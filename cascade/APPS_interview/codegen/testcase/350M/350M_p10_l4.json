[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"a:b:\", \":|:\", \"a:b\", \"|\"]) == 4, \"The result should be 4\"\nassert solution([\"|:|:\", \"||:||:\", \"||||||:\", \"||||||\"]) == 5, \"The result should be 5\"\nassert solution([\"a:b\", \":|:\", \"a:b\"]) == 1, \"The result should be 1\"\nassert solution([\"a:b:|\", \":|:\", \"a:b\", \"|\"]) == -1, \"The result should be -1\"\nassert solution([\"a:b:\", \":|:\", \"a:b\", \"|\", \":|:\", \"|\"]) == -1, \"The result should be -1\"\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"$091$\"\n    ) == 4\nassert solution(\n    \"$058$\"\n    ) == 5\nassert solution(\n    \"$124$\"\n    ) == 12\nassert solution(\n    \"$093$\"\n    ) == 3"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abcde\") == \"cd\"\nassert solution(\"abcd\") == \"ba\"\nassert solution(\"abd\") == \"ba\"\nassert solution(\"abc\") == \"cba\"\nassert solution(\"abcdab\") == \"cba\"\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"a:b:|\", \"a:b:|\"]) == 2\n\n\n>>> from collections import deque\n>>> import os\n>>> import sys\n>>> sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))\n>>> import utils\n>>> from utils import inp\n\n\n>>> def parse(s):\n    pass\n\n\n>>> def solution(stdin):\n    return -1\n\n\n>>> utils.capture_stdin(parse, solution)\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n'''"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"a:b:|\"]) == 4\nassert solution([\"a:b:|:\", \"a:c:|\", \"b:c:|\", \"d:f:|\", \"e:g:|\", \"e:h:|\"]) == -1\n\n\n'''"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 4\n\nExplanation\nGiven $s$ is a string of lowercase Latin letters and characters [, ], : and |, you want to transform it into an accordion by removing some characters from it.\n\nThere are four cases:\n\n|: |:    (without transposition)\n|:  |  (with transposition)\n|: |  (without transposition)\n|: |:    (without transposition)\n\nthe max possible length is 4.\n\"\"\"\n\nclass Solution:\n    def accordions(self, stdin: str) -> str:\n        pass\n\nassert Solution().accordions(input()) == 4"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"a:b:|\") == 4\nassert solution(\"a:b:\") == -1\nassert solution(\"aaa\") == -1\nassert solution(\"aaa|bbb\") == 4\nassert solution(\"aaa|bbb|ccc\") == 4\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"499\"\nassert solution(stdin) == \"499\"\nassert solution(stdin) == \"499\"\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == int(str(stdin)[:])"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"499\"\nassert solution(stdin) == \"487\"\nassert solution(stdin) == \"387\"\nassert solution(stdin) == \"39\"\nassert solution(stdin) == \"79\"\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 99\nassert solution(stdin) == 99\nassert solution(stdin) == 99\nassert solution(stdin) == 99\nassert solution(stdin) == 99\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"521\"\n\"\"\""
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == (stdin)\nassert solution(input()) == (input())\nassert solution(input()) == (input())\nassert solution(input()) == (input())\nassert solution(input()) == (input())\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 50\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"100\") == \"99\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"499\""
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"53\") == \"99\"\nassert solution(\"57\") == \"58\"\nassert solution(\"99\") == \"99\"\nassert solution(\"542\") == \"543\"\nassert solution(\"999\") == \"999\"\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"499\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"521\"\nassert solution(stdin) == \"521\"\nassert solution(stdin) == \"99\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"99\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2000\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '1000'\n\"\"\"\nimport time\n\nfrom sys import getsizeof\n\nstdin = input()\nout = 0\nres = 0"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"4\", \"201\"]) == \"99\", \"returns wrong value.\"\n\n\n-----Constraints-----\n1 <= n <= 10^9\n\n-----Time Limit 2 seconds per test case-----\nTime limit: 1 second\n\n-----Space Limit: 0,00\"\"\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5'\n\nassert solution(stdin) == '200'\n\nassert solution(stdin) == '100'\n\nassert solution(stdin) == '1000'\n\n\"\"\"\n\nclass Solution:\n    def numberOfDays(self, year: int) -> int:\n        \n        if year < 10000:\n            return (year - 100) * 4\n        elif year < 100000:\n            return (year - 10000) * 100\n        else:\n            return (year - 100000) * 100\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 2\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 1\nassert solution(4000000) == 86400\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1000\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"2000\"\nassert solution(stdin) == \"2001\"\nassert solution(stdin) == \"2002\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '99'\nassert solution(stdin) == '1000'"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a=201, b=100) == \"100\"\nassert solution(a=4000, b=1000) == \"1000\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1000\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"99\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"200\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"100\"\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7 5\") == \"7\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"4 6\") == \"3\"\nassert solution(\"5 6\") == \"3\"\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 3') == 3\nassert solution('5 4') == 1\nassert solution('5 5') == 0\nassert solution('4 4') == 0\nassert solution('4 3') == 0\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 4\nassert solution(stdin) == 1\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 5\") == 7\nassert solution(\"2 3\") == 3\nassert solution(\"5 4\") == 4\nassert solution(\"4 5 4\") == 3\nassert solution(\"2 1\") == 2\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 5\n'''"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 30\nstdin contains digits from 00-99\n\n---CODE---\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 23) == 2\nassert solution(5, 17) == 0\nassert solution(5, 0) == 0\nassert solution(0, 00) == -1"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2\", \"1\", \"1\", \"7\"]) == \"2\"\nassert solution([\"1\", \"2\", \"2\", \"3\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"7\"]) == \"0\"\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"2\"\nassert solution(3) == \"0\"\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, 11, 23, \"\") == \"2\"\nassert solution(5, 11, 23, \"2\") == \"0\"\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\n\n\n-----Constraints-----\n1 <= x <= 60\n1 <= hh <= 23\n1 <= mm <= 59\n\nTime Limit: 1 minute\nSpace Limit: 1 megabyte\n\n-----Time Limit Exceeded-----\n\nThe time is not valid because it is impossible to ensure that a number meets a requirement.\n\nThe time that comes to it is not valid because of different reasons.\n\"\"\"\n\nclass Solution:\n    def time2(self, time: str) -> int:\n        import math\n        \n        x = int(time[:2])\n        y = int(time[3:])\n        \n        return math.ceil((y * 60 + x - 1) / 60)"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\n\n-----------------------------------------------------------------------------------------\n\nString\n\nGiven a string that consists of only '1's and '0's, find the length of the longest substring containing all '1's and '0's.\n\n\n\nInput: s = \"111010\"\nOutput: 4\nExplanation: The longest substring is \"100110\".\n\n\n\nInput: s = \"0111111\"\nOutput: 6\nExplanation: The longest substring is \"11011\".\n\n\n\nInput: s = \"0111110\"\nOutput: 2\nExplanation: The longest substring is \"111011\".\n\n\n\nInput: s = \"100000000000000000000000000000001\"\nOutput: 2\nExplanation: The longest substring is \"100000000000000000000000000000001\".\n\n##############################################################################\n\nInput: s
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"1\"\n\nassert solution(input()) == \"2\""
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == '2'\nassert solution(2) == '0'\nassert solution(3) == '2'\nassert solution(4) == '2'\nassert solution(5) == '1'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 5\n1 <= hh <= 23\n0 <= mm <= 59\n\nTime will always be represented in the format hh: mm.\n\nA time is considered lucky if it contains a digit '7'. For example, 13: 07 and 17: 27 are lucky, while 00: 48 and 21: 34 are not lucky.\n\nReferences\nhttps://en.wikipedia.org/wiki/Alarm_timer#Time\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 11, 23, 00, 00) == 2\n\nassert solution(5, 11, 23, 00, 23) == 0\n\nassert solution(5, 11, 23, 00, 21) == 1\n\nassert solution(5, 11, 23, 00, 34) == 2\n\nInput\n1\n9 22 19\n\nOutput\n2\n\nExplanation\nJamie needs to wake up at 9:22.\n\"\"\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3 2 4\") == 5\nassert solution(\"1 3 1 3\") == 0\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input().split(' ')) == '0'\n\nassert solution(input().split(' ')) == '0'"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 3 2 4\") == \"5\"\nassert solution(\"5 2 1 3\") == \"0\"\nassert solution(\"5 3 1 5\") == \"0\""
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4, 3) == 5\nassert solution(4, 1) == 0\nassert solution(5, 1) == 1\nassert solution(5, 2) == 2\nassert solution(5, 3) == 3\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '5'\n\n\"\"\""
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"6 3 2 4\") == 5\nassert solution(\"6 3 1 3\") == 1\nassert solution(\"5 2 1 5\") == 0\nassert solution(\"5 2 1 5\") == 0\nassert solution(\"5 3 2 4\") == 0\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3\\n3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n') == '3'\nassert solution('3\\n3 10\\n6 3\\n8 2\\n1 4\\n4 10\\n4 1\\n3 2\\n2 6\\n1 100\\n2 15\\n10 11\\n14 100\\n') == '-1'\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(-1)\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n    return '1'\n\nOutput: 10\n\"\"\"\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 10 3\") == \"3\"\nassert solution(\"3 10 3 4 4 4 10\") == \"3\"\nassert solution(\"3 10 3 4 4 4 10 4 3\") == \"3\"\nassert solution(\"3 10 3 4 4 4 10 3 4\") == \"1\"\nassert solution(\"3 10 3 4 4 4 10 3 4 5\") == \"2\"\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == \"1\"\nassert solution(2) == \"3\"\nassert solution(3) == \"1\"\nassert solution(4) == \"4\"\nassert solution(5) == \"1\"\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n'''"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['5 2', '8 1']) == '4'\nassert solution(['8 1']) == '1'\nassert solution(['5']) == '1'\nassert solution(['5','1']) == '3'\nassert solution(['5', '1']) == '1'\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"8 1\") == \"5\"\nassert solution(\"1\") == \"0\"\nassert solution(\"1000\") == \"0\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5 2\", \"8 1\"]) == \"4\"\nassert solution([\"5 2\", \"8 1\", \"10 2\", \"2 1\"]) == \"3\"\nassert solution([\"5 2\", \"8 1\", \"10 2\", \"2 1\", \"3 1\"]) == \"5\"\nassert solution([\"8 1\", \"5 2\", \"2 1\", \"3 1\"]) == \"5\"\nassert solution([\"8 1\", \"5 2\", \"2 1\", \"3 1\", \"4 1\"]) == \"4\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5,2) == 4\nassert solution(8,1) == 5\nassert solution(8,4) == 4\nassert solution(4,2) == 1\nassert solution(2,1) == 1\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == 4\nassert solution(\"8 1\") == 5\nassert solution(\"8 2\") == 5\nassert solution(\"8 3\") == 2\nassert solution(\"8 4\") == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5,2) == 4\nassert solution(8,1) == 5\nassert solution(8,2) == 3\nassert solution(8,3) == 2\nassert solution(8,4) == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 2\") == \"4\"\nassert solution(\n    \"8 1\") == \"5\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == 4\nassert solution(\"8 1\") == 5\nassert solution(\"5 1\") == 3\nassert solution(\"8 1\") == 0\nassert solution(\"8 4\") == 0\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"[2m, 3p, 2s, 4m, 1s, 2s, 4s]\") == 1\nassert solution(\"[4s, 3m, 3p, 4s, 5p, 4s, 5p]\") == 3\nassert solution(\"[5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p]\") == 1\nassert solution(\"[5p, 4p, 6p]\") == 0\nassert solution(\"[5p, 7p, 6p]\") == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '0'\n\nassert solution(input()) == '1'\n\nassert solution(input()) == '0'\n\nassert solution(input()) == '1'\n\nassert solution(input()) == '0'"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1s 2s 3s\") == 0\nassert solution(\"9m 9m 9m\") == 1\nassert solution(\"3p 9m 2p\") == 3\nassert solution(\"3p 9m 9m\") == 3\nassert solution(\"9p 9s 2p\") == 1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 0\n\n\n\n-----Time complexity-----\n\nApproximate runtime of the algorithm is O(n^2).\n\n\n-----Space complexity-----\n\nApproximate runtime of the algorithm is O(1) for the koutsu, which makes the total space required for the final answer to be O(n^2) where n is the number of tiles in the game. \n\n'''"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1s2s3s) == 0\nassert solution(9m9m9m9m) == 0\nassert solution(3p9m9m9m) == 1\nassert solution(9m9m9m9m) == 0\nassert solution(3p9m9m9m) == 0\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1s 2s 3s\") == 0\nassert solution(\n    \"9m 9m 9m\") == 0\nassert solution(\n    \"3p 9m 2p\") == 1\nassert solution(\n    \"3p 9m 9p\") == 1\nassert solution(\n    \"3p 9p 2p\") == 1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1s) == 0\n\nassert solution(3s) == 1\n\nassert solution(9m) == 1\n\nassert solution(3p) == 1\n\n\n-----Notes-----\n\n1. The only exception is that the number of extra suited tiles is not limited to the number of mentsu, because [1m, 1p, 1s] is not a koutsu.\n2. The shortest path from a mentsu to a koutsu does not include any koutsu.\n3. The mentsu, if we want to draw an extra suited tile, is not included in the mentsu.\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\n\n\nInput\n2\n1 2\n2 0 2\n3 2 3\n\nOutput\n3\n\n\n\nConstraints\n1 <= stdin.length <= 105\n\n2 <= stdin[i] <= 106\n\nstdin[i] is either 'L' or 'R'\n\nOutput\n2\n\n\"\"\""
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\n\n\n'''"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == -1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.n = int(input())\n        self.m = int(input())\n        self.sofas = []\n        for i in range(self.n):\n            self.sofas.append(list(map(int, input().split())))\n\n    def solve(self):\n        sofas = []\n        for i in range(self.n):\n            sofas.append([])\n        for i in range(self.m):\n            for j in range(self.n):\n                sofas[j].append(self.sofas[j][i])\n        x = 0\n        y = 0\n        for i in range(self.n):\n            x = max(x, sofas[i][0])\n        for i in range(self.n):\n            y = max(y, sofas[i][1])\n        x = x if x!= 0 else 1\n        y = y if y!= 0 else 1\n        cnt = 0\n        for i in range(self.n):\n            if sofas[i][0] == x and sofas[i][1] == y:\n                cnt += 1\n        return cnt\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2') == '1'\nassert solution('3 2') == '-1'\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"3 2\") == \"-1\"\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4 4'\nassert solution(stdin) == '2 0'\n\n\n------Expected output------\n\n0 2\n4 4\n\n------Successful----------\n'''"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4) == 4 and solution(2) == 2"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(14) == 4, \"Solution should be 4\"\nassert solution(2) == 0, \"Solution should be 0\"\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"14\") == 4, \"expect 4\"\nassert solution(\"2\") == 2, \"expect 2\"\nassert solution(\"0\") == 0, \"expect 0\""
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == (0,2)\nassert solution(stdin) == (0, 4)\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == (0,2)\nassert solution(stdin) == (4,4)\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 0\nassert solution(2) == 2\nassert solution(5) == 4\nassert solution(6) == 4\nassert solution(7) == 4\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == (0, 2)\nassert solution(stdin) == (1, 3)\nassert solution(stdin) == (1, 4)\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4 4\""
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == [0, 2]\n\n-----Constraints-----\n\n1 \u2264 n \u2264 1012\n\n\n-----Sample Input\n\nSample Input\n\n14\n\nSample Output\n\n4 4\n\nSample Input\n\n2\n\nSample Output\n\n0 2\n\"\"\""
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 40\n'''\n\nn = int(stdin)\narr = list(map(int,stdin.split()))\nmax_num = 0\n\nfor i in range(n):\n    a = arr[i]\n    b = arr[i+1]\n    for j in range(a, b):\n        for k in range(j+1, b):\n            if k % a == 0:\n                if k % b == 0:\n                    max_num += 1\n\nprint(max_num)"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"51\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n\nfor a_i in range(n):\n    for b_i in range(n):\n        if a[a_i] % a[b_i] == 0 and b[b_i] % b[a_i] == 0:\n            print(a[a_i]*b[b_i])\n            break\n        elif a[a_i] % a[b_i]!= 0 and b[b_i] % b[a_i]!= 0:\n            print(a[a_i]*b[b_i])\n            break"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13\") == \"51\"\nassert solution(\"1 9 2 1 5 6 9 8 6 9 4 2\") == \"25\"\nassert solution(\"1 1 2 2 3 4\") == \"24\"\nassert solution(\"1 1 1 1 1 1\") == \"13\"\nassert solution(\"1 1 1 1 1 1 1\") == \"13\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 62"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 39\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 51\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"20 3 3\") == 11\nassert solution(\"20 20\") == 0\nassert solution(\"20 20 30 30 20 30 20\") == 45\nassert solution(\"20 20 30 30 30 30\") == 12\nassert solution(\"20 20 20 20 20 20 20 20 20 20 20\") == 13\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 71\nassert solution(stdin) == 72\nassert solution(stdin) == 90\nassert solution(stdin) == -1"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 2, 3, 12, 15) == 39\nassert solution(20, 2, 3, 3, 5) == 51\n\n\n----------------------OUTPUT-----------------------\n\nOutput all numbers in the input are proper.\n\nAccording to the input, a, b, p, q are proper.\n\nNote: Answer is big enough to contain 64-bit integer type.\n\n-----------------------------Recursive--------------------------\n\nInput\n5 2 3 12 15\n\nOutput\n39\n\n-----------------------------Recursive--------------------------\n\nInput\n20 2 3 3 5\n\nOutput\n51\n\n-----------------------------Recursive--------------------------\n\nInput\n30 2 2 3 10\n\nOutput\n108\n\n-----------------------------Recursive--------------------------\n\nInput\n3 5 10 3 2\n\nOutput\n72\n\n-----------------------------Recursive--------------------------\n\nInput\n2 4 6 8\n\nOutput\n18\n\n-----------------------------Recursive--------------------------\n\nInput\n1 1\n\nOutput\n1\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Recursive--------------------------\n\n-----------------------------Rec"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"39\"\nassert solution(inp) == \"51\""
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1') == '0'\nassert solution('3 1') == '7'\nassert solution('4 1') == '4'\nassert solution('3 5') == '5'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == \"0\"\n\n\nExample 1:\n\nInput\n\n10\nGGG\nGGG\nG\nGGG\nGGG\nGGG\nGGG\nG\nGGG\nGGG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\nG\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\\"\\\") == 6, \\\"\\\"\\\"\\\"\\\"\\\".\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\"\\\")\n\"\"\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"GGG\") == \"G\"\nassert solution(\"GG\") == \"G\"\nassert solution(\"GS\") == \"G\"\nassert solution(\"SSS\") == \"G\"\nassert solution(\"GGGG\") == \"G\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n'''\n\nimport math"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '0'"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 4\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n\nExplanation\n\nThe series of examples with exactly $n$ = 3 are generated using the pseudo code\n\nsequence = \"\"\nsequence += \"GGG\"\nsequence += \"GGG\"\nsequence += \"GGG\"\nsequence += \"GGG\"\nsequence += \"GGG\"\nsequence += \"GGG\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence += \"G\"\nsequence +="
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 5\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \n    \"\"\"\n    1 2 3 4 5\n    \"\"\"\n    ) == \"5\"\n    \nassert solution(\n    \n    \"\"\"\n    1 2 3 4\n    0 0 0\n    0 1 2\n    1 1 4\n    2 2 6\n    \"\"\"\n    ) == \"-1\"\n    \nassert solution(\n    \n    \"\"\"\n    1 3\n    \"\"\"\n    ) == \"0\"\n    \nassert solution(\n    \n    \"\"\"\n    0 1\n    1 1\n    0 1\n    1 1\n    \"\"\"\n    ) == \"2\"\n    \nassert solution(\n    \n    \"\"\"\n    0 1\n    1 2\n    1 2\n    1 2\n    0 1\n    \"\"\"\n    ) == \"3\"\n    \n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6, \"It is not possible to get the specialty\"\n\nOutput:\n9 2\n1 3 5 6 1 2\n\nExplanation\nThe minimal number of courses which is necessary to get a specialty is 7 because all the other courses must be passed before the first course.\nThe highest number of courses which can be passed is 7 because the last course must be passed before the first.\n\n'''"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1\") == \"0 1\"\nassert solution(\"1 4\") == \"1 2 3 4 5\"\nassert solution(\"2 9\") == \"2 1 9 4 5 3\"\nassert solution(\"2\") == \"0 1\"\nassert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"5\"\nassert solution(\"3 9 5\") == \"3 4\"\nassert solution(\"3 9 4\") == \"1 3\"\nassert solution(\"1 8\") == \"1 2\"\nassert solution(\"1 6\") == \"2\"\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\nwhile True:\n    x = input()\n    if not x:\n        break\n    x = list(map(int, x.split()))\n    assert solution(stdin) == 5\n    print(x[0])\n\"\"\""
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == -1\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3 2 1 5 4'"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3 2 1 5 4'\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['3', '3', '2']) == '3 2'\nassert solution(['3', '2', '3']) == '2 3'\nassert solution(['1', '2', '3']) == '3 1'\nassert solution(['1', '2', '3', '1']) == '1 1 1'\nassert solution(['3', '3', '3']) == '3 3 3 3'\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 2 1 5 4'\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3\", \"1\", \"2\"]) == \"3 2 1\"\nassert solution([\"2\", \"3\", \"1\"]) == \"3 2 1\"\nassert solution([\"3\", \"2\", \"1\"]) == \"3 2 1\"\nassert solution([\"1\", \"3\", \"2\"]) == \"3 2 1\"\nassert solution([\"2\", \"3\", \"1\"]) == \"3 2 1\"\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"3 2 1 5 4\"\nassert solution(\"3 4\") == \"3 4 5\"\nassert solution(\"5 3 2\") == \"5 3 2 5\"\nassert solution(\"5 3\") == \"5 3\"\nassert solution(\"1 3 4 1\") == \"1 3 4 1 5\"\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3 2 1 5 4\"\nassert solution(input()) == \"3 2 1 5 4\""
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 3 2 1\"), \"3 3 2 1\"\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n'''\n'''\n) == -1\n\nassert solution(\n'''\n'''\n) == 5\n\nassert solution(\n'''\n'''\n) == 3\n\nassert solution(\n'''\n'''\n) == -1\n\nassert solution(\n'''\n'''\n) == 5"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    f=\n    '''\n    def restorePairs(arr: List[int]) -> List[int]:\n        pass\n    '''\n) == [-1]\nassert solution(\n    f=\n    '''\n    def restorePairs(arr: List[int]) -> List[int]:\n        pass\n    '''\n) == [-1]\nassert solution(\n    f=\n    '''\n    def restorePairs(arr: List[int]) -> List[int]:\n        pass\n    '''\n) == [1, 2, 3]\nassert solution(\n    f=\n    '''\n    def restorePairs(arr: List[int]) -> List[int]:\n        pass\n    '''\n) == []\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 4 3\") == \"YES\"\nassert solution(\"-4 5\") == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()), \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 10 0\") == \"YES\"\nassert solution(\"10 10 0\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 2 1 2\") == \"NO\"\nassert solution(\"1 6 -5 0 1 0 -1 -2 3 -4 -5\") == \"YES\"\nassert solution(\"0 -1\") == \"NO\"\nassert solution(\"0 3 2 1 -2 -1 -1\") == \"YES\"\nassert solution(\"1 -1 -1\") == \"YES\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Time Complexity-----\n\nO(n) for all n for the first sequence. \nO(n) for all n for the second sequence.\nO(n) for all n for the third sequence. \nO(n) for all n for the fourth sequence.\nO(n) for all n for the fifth sequence.\nO(n) for all n for the sixth sequence.\nO(n) for all n for the seventh sequence.\nO(n) for all n for the eighth sequence.\nO(n) for all n for the ninth sequence.\nO(n) for all n for the tenth sequence.\nO(n) for all n for the eleventh sequence.\nO(n) for all n for the twelfth sequence.\nO(n) for all n for the thirteenth sequence.\nO(n) for all n for the fourteenth sequence.\nO(n) for all n for the fiveteenth sequence.\nO(n) for all n for the sixthteen sequence.\nO(n) for all n for the seventhteen sequence.\nO(n) for all n for the eighthteen sequence.\nO(n) for all n for the nineteen sequence.\nO(n) for all n for the tenthteen sequence.\nO(n) for all n for the eleventhteen sequence.\nO(n) for all n for the twelfthteen sequence.\nO(n) for all n for the thirteenthteen sequence.\nO(n) for all n for the fourteenthteen sequence.\nO(n) for all n for the fiveteenthteen sequence.\nO(n) for all n for the sixteen sequence.\nO(n) for all n for the seventeen sequence.\nO(n) for all n for the eighteen sequence.\nO(n) for all n for the nineteen sequence.\nO(n) for all n for the tenthteen sequence.\nO(n) for all n for the twelfthteen sequence.\n\n\nO(n) for all n for the one-hundred sequence.\nO(n) for all n for the two-hundred sequence.\nO(n) for all n for the three-hundred sequence.\nO(n) for all n for the four-hundred sequence.\nO(n) for all n for the five-hundred sequence.\nO(n) for all n for the six-hundred sequence.\nO(n) for all n for the seven-hundred sequence.\nO(n) for all n for the eight-hundred sequence.\nO(n) for all n for the nine-hundred sequence.\n\n\nO(n) for all n for the ten-hundred sequence.\nO(n) for all n for the eleven-hundred sequence.\nO(n) for all n for the twelve-hundred sequence.\nO(n) for all n for the thirteen-hundred sequence.\nO(n) for all n for the fourteen-hundred sequence.\nO(n) for all n for the fifteen-hundred sequence.\nO(n) for all n for the sixteen-hundred sequence.\nO(n) for all n for the seventeen-hundred sequence.\nO(n) for all n for the eighteen-hundred sequence.\nO(n) for all n for the nineteen-hundred sequence.\nO(n) for all n for the twenty-hundred sequence.\nO(n) for all n for the thirty-hundred sequence.\nO(n) for all n for the fourty-hundred sequence.\nO(n) for all n for the fivety-hundred sequence.\nO(n) for all n for the sixty-hundred sequence.\nO(n) for all n for the seventy-hundred sequence.\nO(n) for all n for the eightty-hundred sequence.\nO(n) for all n for the ninthty-hundred sequence.\nO(n) for all n for the tenty-hundred sequence.\nO(n) for all n for the eleventy-hundred sequence.\nO(n) for all n for the twelvety-hundred sequence.\nO(n) for all n for the thirteenty-hundred sequence.\nO(n) for all n for the fourteenty-hundred sequence.\nO(n) for all n for the fifteenty-hundred sequence.\nO(n) for all n for the sixteenty-hundred sequence.\nO(n) for all n for the seventeenty-hundred sequence.\nO(n) for all n for the eighteenty-hundred sequence.\nO(n) for all n for the nineteenty-hundred sequence.\n\n\nO(n) for all n for the twenty-thousand sequence.\nO(n) for all n for the thirty-thousand sequence.\nO(n) for all n for the fourty-thousand sequence.\nO(n) for all n for the fifty-thousand sequence.\nO(n) for all n for the sixty-thousand sequence.\nO(n) for all n for the seventy-thousand sequence.\nO(n) for all n for the eighty-thousand sequence.\nO(n) for all n for the ninety-thousand sequence.\nO(n) for all n for the one-hundred thousand sequence.\nO(n) for all n for the two-hundred thousand sequence.\nO(n) for all n for the three-hundred thousand sequence.\nO(n) for all n for the four-hundred thousand sequence.\nO(n) for all n for the five-hundred thousand sequence.\nO(n) for all n for the six-hundred thousand sequence.\nO(n) for all n for the seven-hundred thousand sequence.\nO(n) for all n for the eight-hundred thousand sequence.\nO(n) for all n for the nine-hundred thousand sequence.\n\n\nO(n) for all n for the ten-thousand sequence.\nO(n) for all n for the eleven-thousand sequence.\nO(n) for all n for the twelve-thousand sequence.\nO(n) for all n for the thirteen-thousand sequence.\nO(n) for all n for the fourteen-thousand sequence.\nO(n) for all n for the fifteen-thousand sequence.\nO(n) for all n for the sixteen-thousand sequence.\nO(n) for all n for the seventeen-thousand sequence.\nO(n) for all n for the eighteen-thousand sequence.\nO(n) for all n for the nineteen-thousand sequence.\nO(n) for all n for the twenty-thousand sequence.\nO(n) for all n for the thirty-thousand sequence.\nO(n) for all n for the fourty-thousand sequence.\nO(n) for all n for the fifty-thousand sequence.\nO(n) for all n for the sixty-thousand sequence.\nO(n) for all n for the seventy-thousand sequence.\nO(n) for all n for the eighty-thousand sequence.\nO(n) for all n for the ninety-thousand sequence.\nO(n) for all n for the one-hundred thousand sequence.\nO(n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('6 2') == 'YES'\nassert solution('-4 5') == 'NO'"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Time complexity-----\n\nTime complexity for the below functions is O(n).\n\nTime complexity for the above functions is O(n).\n\nTime complexity for the above functions is O(n^2).\n\n\n-----Space Complexity-----\n\nTime complexity is O(n^2), which is the worst case when you want to find the first element of the sequence.\nSpace complexity is O(n), which is the worst case when you want to find the first element of the sequence.\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 7 3\") == \"YES\"\nassert solution(\"10 10 0\") == \"YES\"\nassert solution(\"0 60 50\") == \"NO\"\nassert solution(\"0 60 50\") == \"NO\"\n\n---Time Complexity---\n\nWe start with a very large solution because we go from an infinite to a single number.\n\nFor the first and second test cases, it is simply one line (no loop) and the size of the problem does not exceed 10^9.\n\nFor the third test case, it is not a huge addition to the first line, but the time complexity of the solution is small.\n\nFor the fourth and fifth test cases, it is a huge addition to the second line (no loop) and the time complexity of the solution is greater than 10^9.\n\nThe most difficult of the test cases is a huge addition to the last line (no loop).\n\nWhen the solution is solved, the time complexity is no larger than 10^9 and the number of lines is small.\n\n\"\"\""
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"solution\"\nassert solution(stdin), \"solution\"\nassert solution(stdin), \"solution\"\nassert solution(stdin), \"solution\"\nassert solution(stdin), \"solution\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"(())()(()((()()())))\") == \"1\"\nassert solution(\"(())(()((()())())\") == \"0\"\nassert solution(\"(())()(()(()(()())()(()()()()))\") == \"1\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(3) == \"1\"\nassert solution(4) == \"0\"\nassert solution(5) == \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"((()))\"\n) == \"1\"\n\nassert solution(\n    \"((()\")) == \"1\"\n\nassert solution(\n    \"((()(()(()()())))\") == \"0\"\n\nassert solution(\n    \"((())\") == \"0\"\n\nassert solution(\n    \"(()())()()()()()()(()()\") == \"0\""
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Should be one solution\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= cnt_i <= 10^9\n\n------Problems-----\n1\n3\n4\n3\n2\n\n3\n3\n\n3\n1\n\n7\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(3) == \"1\"\nassert solution(4) == \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == 0\nassert solution(2) == 0\nassert solution(3) == 2\nassert solution(2) == 2\nassert solution(3) == 0\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\") == \"0\"\n\nassert solution(\"(\") == \"0\"\n\nassert solution(\"(()\") == \"1\"\n\nassert solution(\"()((())()(()()()()(())()()()()()()(\") == \""
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"((()((()()()()))()((()(()()()())()((()()()()()()))))(()((()()()()()(()(()()()()()))))(())((()()()()()()(())()()((()()()()(()()()()))((()()()()()()))))(()((()()()()()()(())()()((()()()()())(())()()()(()(()()()()))((())()()()()()((())()()((()()()()()))()((()()()()()(())()()()((())()()()()((())()()()()))((())()()()()(()(()()()))((())()()()()()((())()()())(())()()()(())(())()()()(())()()()()((())()()()((()))()((()()()(()(()()(())()()()()()((()))()(()(((()))()()(((()))()()()((()))()()()(((()))()()()((()))()()()((()))()()(((()))()()()(((()))()()()((())()()()((()))()()((()))((()))))((())()()()()(()))((())()()()()((()))()()(((()))()()(((()))()()()((()))((()))()(((()))()()(((()))()()())(()))((()))()()(((()))()()(((()))()()(((()))()()()(((()))()()(((()))()()(((()))()()()(())(())()()()(((()))()()()()(((()))()()(())()()()(((()))()()()()(((()))()()()(((()))()()()(((()))()()(())()()()(()(((()))()()()(((()))()(()(((()))()()(((()))()()(())()()()(((()))()()()(((()))()()(((()))()()()(((()))()()(())()()()(((()))()()()(((()))()()()(())(())()()(())(())(()((()))()()()((()))()(((()))()()()(((()))()()(())(())(())((()))()()(((()))()()()(())(())(())(())(())(())(())(())(())((()))()()()(((()))()()()(((()))()()()(((()))()()(())()()()(((()))()()(()(((()))()()()(((()))()()()(((()))()()(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(()"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 5 3\") == 3\nassert solution(\"10 5 7\") == 5\nassert solution(\"10 5 12\") == 3\nassert solution(\"10 5 12\") == 3\nassert solution(\"10 5 12\") == 3\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 5 3\") == 3\nassert solution(\"10 5 7\") == 3\nassert solution(\"10 5 12\") == 3\nassert solution(\"10 5 12\") == 3\nassert solution(\"10 5 12\") == 3\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '12'\nassert solution(stdin) == '14'\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\nassert solution(\"10 5 12\") == \"5\"\nassert solution(\"10 5 12\") == \"5\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 5 3\") == 3\nassert solution(\"10 5 7\") == 5\nassert solution(\"10 5 12\") == 3\nassert solution(\"10 5 14\") == 4\nassert solution(\"10 5 16\") == 5\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 3, \"Your program should return a single integer.\"\n\n\n-----Examples-----\nInput\n10 5 3\n\nOutput\n3\n\nInput\n10 5 7\n\nOutput\n5\n\nInput\n10 5 12\n\nOutput\n5\n\nExplanation\n1. The first spectator is standing at time 1 and the second spectator is standing at time 2.\n2. The third spectator is standing at time 2 and the fourth spectator is standing at time 3.\n3. The fifth spectator is standing at time 3 and the sixth spectator is standing at time 4.\n4. The seventh spectator is standing at time 4 and the eighth spectator is standing at time 5.\n5. The ninth spectator is standing at time 5 and the tenth spectator is standing at time 6.\n6. The eight spectator is standing at time 6 and the nineth spectator is standing at time 7.\n7. The tenth spectator is standing at time 7 and the tenth spectator is standing at time 8.\n8. The ninth spectator is standing at time 8 and the first spectator is standing at time 9.\n9. The second spectator is standing at time 9 and the second spectator is standing at time 10.\n10. The third spectator is standing at time 10 and the third spectator is standing at time 11.\n10. The fourth spectator is standing at time 11 and the fourth spectator is standing at time 12.\n11. The fifth spectator is standing at time 12 and the fifth spectator is standing at time 13.\n12. The sixth spectator is standing at time 13 and the sixth spectator is standing at time 14.\n13. The seventh spectator is standing at time 14 and the seventh spectator is standing at time 15.\n14. The eighth spectator is standing at time 15 and the eighth spectator is standing at time 16.\n15. The nineth spectator is standing at time 16 and the nineth spectator is standing at time 17.\n16. The tenth spectator is standing at time 17 and the tenth spectator is standing at time 18.\n17. The tenth spectator is standing at time 18 and the tenth spectator is standing at time 19.\n18. The nth spectator is standing at time 19 and the nth spectator is standing at time 20.\n19. The nth spectator is standing at time 20 and the first spectator is standing at time 21.\n20. The nth spectator is standing at time 21 and the nth spectator is standing at time 22.\n21. The nth spectator is standing at time 22 and the first spectator is standing at time 23.\n22. The nth spectator is standing at time 23 and the nth spectator is standing at time 24.\n23. The nth spectator is standing at time 24 and the nth spectator is standing at time 25.\n24. The nth spectator is standing at time 25 and the nth spectator is standing at time 26.\n25. The nth spectator is standing at time 26 and the nth spectator is standing at time 27.\n26. The nth spectator is standing at time 27 and the nth spectator is standing at time 28.\n27. The nth spectator is standing at time 28 and the nth spectator is standing at time 29.\n28. The nth spectator is standing at time 29 and the nth spectator is standing at time 30.\n29. The nth spectator is standing at time 30 and the nth spectator is standing at time 31.\n30. The nth spectator is standing at time 31 and the nth spectator is standing at time 32.\n31. The nth spectator is standing at time 32 and the nth spectator is standing at time 33.\n32. The nth spectator is standing at time 33 and the nth spectator is standing at time 34.\n33. The nth spectator is standing at time 34 and the nth spectator is standing at time 35.\n34. The nth spectator is standing at time 35 and the nth spectator is standing at time 36.\n35. The nth spectator is standing at time 36 and the nth spectator is standing at time 37.\n36. The nth spectator is standing at time 37 and the nth spectator is standing at time 38.\n37. The nth spectator is standing at time 38 and the nth spectator is standing at time 39.\n38. The nth spectator is standing at time 39 and the nth spectator is standing at time 40.\n39. The nth spectator is standing at time 40 and the nth spectator is standing at time 41.\n40. The nth spectator is standing at time 41 and the nth spectator is standing at time 42.\n41. The nth spectator is standing at time 42 and the nth spectator is standing at time 43.\n42. The nth spectator is standing at time 43 and the nth spectator is standing at time 44.\n43. The nth spectator is standing at time 44 and the nth spectator is standing at time 45.\n44. The nth spectator is standing at time 45 and the nth spectator is standing at time 46.\n45. The nth spectator is standing at time 46 and the nth spectator is standing at time 47.\n46. The nth spectator is standing at time 47 and the nth spectator is standing at time 48.\n47. The nth spectator is standing at time 48 and the nth spectator is standing at time 49.\n48. The nth spectator is standing at time 49 and the nth spectator is standing at time 50.\n49. The nth spectator is standing at time 50 and the nth spectator is standing at time 51.\n50. The nth spectator is standing at time 51 and the nth spectator is standing at time 52.\n51. The nth spectator is standing at time 52 and the nth spectator is standing at time 53.\n52. The nth spectator is standing at time 53 and the nth spectator is standing at time 54.\n53. The nth spectator is standing at time 54 and the nth spectator is standing at time 55.\n54. The nth spectator is standing at time 55 and the nth spectator is standing at time 56.\n55. The nth spectator is standing at time 56 and the nth spectator is standing at time 57.\n56. The nth spectator is standing at time 57 and the nth spectator is standing at time 58.\n57. The nth spectator is standing at time 58 and the nth spectator is standing at time 59.\n58. The nth spectator is standing at time 59 and the nth"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"5\"\nassert solution(\"10 5 12\") == \"5\"\nassert solution(\"10 5 12\") == \"5\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\nassert solution(\"10 5 13\") == \"5\"\nassert solution(\"10 5 14\") == \"3\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'abc'\nassert solution(input()) == 'def'\nassert solution(input()) == 'bcdef'\nassert solution(input()) == 'bcd'\nassert solution(input()) == 'bcde'\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abc\") == \"def\"\nassert solution(\"abc\") == \"cba\"\nassert solution(\"abc\") == \"cde\"\nassert solution(\"abc\") == \"abc\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'cba'\nassert solution(stdin) == 'abcdefg'\nassert solution(stdin) == 'abdbcdefg'\n\n\n------Constraints-----\n0 <= |s| <= 10^5\n\n\n------Coding Scheme------\nO(n)\n\n\n------Time Complexity------\nO(|s| + |t|) = O(|s| + |t|) = O(n) since we append to t the smallest character in t.\n\n\n------Space Complexity------\nO(n)\n\"\"\""
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"cab\"), \"cab\"\nassert solution(\"acdb\"), \"acdb\"\nassert solution(\"abc\"), \"abc\"\nassert solution(\"\"), \"not possible\"\n\nInput\ncab\n\nOutput\ncab\n\n\"\"\"\n\nimport string"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"abc\", \"did not get expected answer\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == u\n\"\"\""
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"cab\\\"), 'cab'\nassert solution(\\\"abcdefghijklmnopqrstuvwxyz\\\"), 'abcdefghijklmnopqrstuvwxyz'\nassert solution(\\\"abdefghijklmnopqrstuvwxyz\\\"), 'abdefghijklmnopqrstuvwxyz'\n\n\n\n\"\"\""
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"cab\") == \"abc\"\n\n\n\"\"\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abcd\") == \"abcd\"\n\n\n-----Constraints-----\n1 <= s.length <= 10^5\ns consists of lowercase English letters.\n\n\"\"\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sys.stdin) == \"\"\n'''\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin.split()[0])\n        p = int(stdin.split()[1])\n        c = int(stdin.split()[2])\n        player = [0 for i in range(n)]\n        for i in range(n):\n            player[i] = stdin.split(' ')[i + 1]\n        j = 0\n        for i in range(n):\n            if player[i] == 'Y':\n                j += 1\n                for j in range(p):\n                    player[i] = 'X'\n        assert j == n\n        return ''.join(player)\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\"\"\"\nimport math\n\nT = int(input())\n\nfor case in range(T):\n    n = int(input())\n    p_i = int(input())\n    c_i = int(input())\n    \n    p_i_ = math.floor(math.log(p_i, 10))\n    c_i_ = math.floor(math.log(c_i, 10))\n    \n    if p_i_ > c_i_:\n        print(\"NO\")\n    elif p_i_ == c_i_:\n        print(\"YES\")\n    else:\n        print(\"YES\")"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input().split()) == \"YES\"\n\"\"\"\nimport math\n\nn = int(input())\n\nc = list(map(int, input().split()))\n\nc.sort()\n\nm = int(input())\n\nmax_val = 0\n\nfor i in range(len(c)):\n    x = abs(c[i] - m)\n    if max_val < x:\n        max_val = x"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\n3\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n2\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n2\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n1\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n1\\n1\\n0\\n0\\n0\\n1\\n1\\n1\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n1\\n0\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n0\\n1\\n1\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n0\\n1\\n1\\n0\\n1\\n1\\n0\\n0\\n0\\n1\\n0\\n1\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n0\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n0\\n1\\n1\\n0\\n1\\n1\\n1\\n0\\"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 1\nassert solution(stdin) == 0\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 11\nassert solution(13) == 0\nassert solution(23) == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == 11, \"Test 1 failed\"\n\nassert solution(13) == 0, \"Test 2 failed\"\nassert solution(23) == 1, \"Test 3 failed\"\nassert solution(59) == 1, \"Test 4 failed\""
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"00:00\") == 0\nassert solution(\"23:59\") == 1\nassert solution(\"13:31\") == 11\nassert solution(\"13:31\") == 1\nassert solution(\"23:59\") == 11\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"11\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n\nTime complexity: O(N)\nSpace Complexity: O(N)\n\"\"\"\n\nclass Solution:\n    def minTime(self, h: int, m: int) -> str:\n        h_string = ''\n        m_string = ''\n        if h <= 1:\n            h_string = '0' + str(h)\n        else:\n            h_string = str(h)\n        if m <= 1:\n            m_string = '0' + str(m)\n        else:\n            m_string = str(m)\n        \n        if len(h_string) > len(m_string):\n            h_string = h_string[1:]\n            m_string = m_string[1:]\n        elif len(h_string) < len(m_string):\n            h_string = h_string[:len(m_string)-1]\n            m_string = m_string[:len(h_string)-1]\n        \n        min_string = ''\n        if h_string + m_string[::-1] == '00' + ':00':\n            min_string = h_string + m_string[::-1]\n        elif h_string + m_string[::-1] == '00' + ':':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[1:]\n        elif h_string + m_string[::-1] == '00' + ':00':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[1:]\n        elif h_string + m_string[::-1] == '00' + ':':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '23':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '59':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '12':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '00':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '10':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '01':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '20':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '20':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '30':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '00':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        elif h_string + m_string[::-1] == '00':\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n        else:\n            min_string = h_string + m_string[::-1]\n            min_string = min_string[:len(h_string)-1]\n\n        return min_string"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 1\n\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n\n0 <= hh < hh <= 23\n0 <= mm < mm <= 59\nstdin contains only lower case English letters.\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(test_input) == 11\n\"\"\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 23, 0) == 11\nassert solution(13, 31, 0) == 0\nassert solution(23, 59, 0) == 1\nassert solution(0, 23, 59) == 1\nassert solution(5, 0, 0) == 5\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == 11\nassert solution(13) == 1\nassert solution(23) == 0\nassert solution(59) == 11\nassert solution(1) == 0"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(7, [5, 1, 3, 2]) == 3\nassert solution(6, [5, 4, 3, 2]) == 5\nassert solution(5, [3, 4, 5, 6]) == 6\nassert solution(6, [1, 6, 5, 3, 4, 2]) == 6\nassert solution(5, [2, 3, 1, 6, 5]) == 5\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '3'\nassert solution(input()) == '6'\nassert solution(input()) == '5'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"4\",\"5\",\"6\",\"7\"]) == \"3\"\nassert solution([\"6\",\"5\",\"4\",\"7\"]) == \"6\"\nassert solution([\"6\",\"5\",\"4\",\"7\",\"3\"]) == \"6\"\nassert solution([\"1\",\"6\",\"5\",\"7\"]) == \"2\"\nassert solution([\"1\",\"6\",\"5\",\"7\",\"4\"]) == \"1\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 5\nassert solution(3) == 7\nassert solution(4) == 6\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n3\n1 4\n5 2 3\n4 6\n\"\"\"\n) == \"3\"\n\n\n'''\nThere are 2 cases for the algorithm. The first one is the case when the input array has an odd size. In that case, the array will be sorted ascendingly.\nThe second one is the case when the input array has an even size. In that case, the array will be sorted descendingly.\nA sorted array is a permutation of the input array (in other words, the elements that are in the input array will be in the permutation).\n\nThis does not matter, because the input array is already sorted.\n\nThe algorithm:\n\n1. Sort the input array.\n2. Find the minimum element in the sorted array.\n3. Swap the minimum element to the end of the input array.\n4. Sort the input array.\n5. Find the minimum element in the sorted array.\n6. Swap the minimum element to the end of the input array.\n7. Sort the input array.\n8. Find the minimum element in the sorted array.\n9. Swap the minimum element to the end of the input array.\n10. Sort the input array.\n11. Find the minimum element in the sorted array.\n\nO(nlogn)\n\n'''\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"6\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"7\", \"5\", \"3\", \"2\", \"1\"]) == \"3\"\nassert solution([\"6\", \"4\", \"2\", \"1\", \"3\"]) == \"3\"\nassert solution([\"1\", \"5\", \"3\", \"6\", \"7\"]) == \"6\"\nassert solution([\"5\", \"4\", \"3\", \"2\", \"1\"]) == \"3\"\nassert solution([\"4\", \"2\", \"1\", \"3\", \"5\"]) == \"3\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\n\nassert solution(stdin) == \"6\"\n\n\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == 3\nassert solution(7) == 6\nassert solution(6) == 5\nassert solution(6) == 4\nassert solution(5) == 2\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == 'TAK' or solution(s) == 'NIE', \"failed\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['oXoxoXo', 'bod']) == 'TAK'\nassert solution(['Er', 'bod']) == 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"NIE\"\nassert solution(input()) == \"TAK\"\n\n\n-----Time complexity-----\n\nTime complexity of the algorithm is O(n), since n is the length of the given string.\nThe algorithm is O(n), because it operates on the entire string.\n\n\n-----Space complexity-----\n\nThe space complexity of the algorithm is O(1), because there is only one line of code.\nThe algorithm is O(1), because there is only one line of code.\n\n'''\n\nfrom typing import Tuple"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"NIE\"\nassert solution(\"ER\") == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('oXoxoXo') == 'TAK'\nassert solution('bod') == 'NIE'\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"bod\") == \"bod\"\nassert solution(\"ER\") == \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aabc\") == \"TAK\"\nassert solution(\"bbbb\") == \"TAK\"\nassert solution(\"\") == \"NIE\"\nassert solution(\"ab\") == \"NIE\"\nassert solution(\"aa\") == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aa\") == \"aa\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ba\"\nassert solution(\"aaa\") == \"aaa\"\nassert solution(\"abcd\") == \"abcd\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"bod\") == \"bod\"\nassert solution(\"oXoxoXo\") == \"NIE\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9321','solution() failed'"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1234\") == \"4321\"\nassert solution(\"123\") == \"1234\"\nassert solution(\"3921\") == \"4321\"\nassert solution(\"10000\") == \"9321\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"111\") == \"111\"\nassert solution(\"22\") == \"22\"\nassert solution(\"3921\") == \"9321\"\nassert solution(\"10000\") == \"10000\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4940') == '9321'\nassert solution('10000') == '9321'\nassert solution('20') == '20'\nassert solution('7') == '7'\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    (\n        (\n            int(i) for i in input().split()\n        )\n    )\n) == (\n    int(i) for i in\n    input().split()\n)\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(int(stdin)) == int(stdin)\n\"\"\"\n\nimport math"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"213\"\nassert solution(\"222\") == \"9321\"\nassert solution(\"3921\") == \"5000\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"234\") == \"234\"\nassert solution(\"8901\") == \"8901\"\nassert solution(\"00000\") == \"00000\""
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"224\") == \"224\"\nassert solution(\"3202\") == \"3202\"\nassert solution(\"222\") == \"222\"\nassert solution(\"17\") == \"17\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"123\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"213\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"9321\"\nassert solution([\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]) == \"1\"\nassert solution([\"1\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\"]) == \"1\"\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"XX.XX.XXXX.XXOXX.OO.O.X.OOOO.OOOOO\"\n) == \"YES\"\nassert solution(\n    \"XX.XXXXXXXXXX.XX.XXXX.X.OXX.X.XXO\"\n) == \"YES\"\nassert solution(\n    \"XXXX.XX.X.X.XXXX.XXOXXXXOOX.XXOXX\"\n) == \"NO\"\nassert solution(\n    \"XXXXO.XXXXOXX.XXXX.XXOXXXXXX.X.X.X.XXXX.XXXX\"\n) == \"NO\"\nassert solution(\n
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"X.XXX\") == \"YES\", \"X.XXX\"\nassert solution(\"XXXOXX..\") == \"YES\", \"XXXOXX..\"\nassert solution(\"OOXOXXOO\") == \"NO\", \"OOXOXXOO\"\nassert solution(\"OOO\") == \"NO\", \"OOO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"OX.XX...\") == \"YES\"\nassert solution(\"XXXX.OO...\") == \"NO\"\n\"\"\""
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"XX.XX.....\"\n) == \"YES\"\n\nassert solution(\"XXOXX....\") == \"NO\""
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"XOXX..\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\"]) == \"NO\"\nassert solution([\"XOXX..\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\"]) == \"NO\"\nassert solution([\"XOXX..\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\"]) == \"NO\"\nassert solution([\"XOXX..\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\", \"..OOOO\"]) == \"NO\"\nassert solution([\"OOXOX.....\", \"O.O......\", \"O.O......\", \"O.O......\", \"O.O......\", \"O.O......\", \"O.O......\", \"O.O......\", \"O.O......\", \"O.O......\", \"O.O......\", \"O.O......\"]) == \"YES\"\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"OOO\") == 'NO'\nassert solution(\"OOOOX\") == 'YES'\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('XX.XX.....') == 'YES', \"Should be YES\"\nassert solution('.....OOOO.') == 'NO', \"Should be NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    ['XX.XX.....', '.....OOOO.', '..........', '..........', '..........', '..........', '..........', '..........', '..........', '..........']) == \"YES\"\nassert solution(\n    ['XX.XX.....', '..O......', '....OO....', '..O......', '..O......', '..O......', '..O......', '..O......', '..O......']) == \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(X.X..X...X..X..X.X.X) == 'YES'\nassert solution(X.XXO..XX.) == 'YES'\nassert solution(X...OXO...X.OOX..X.XO.O) == 'NO'"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('XXX') == 'NO'\nassert solution('OXX.') == 'YES'\nassert solution('XXOXX') == 'YES'\nassert solution('XX.OOX') == 'YES'\nassert solution('OO.OOO') == 'NO'\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 0 0 0 0 0 0 1 0 0 0 0 0\" or -1\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,2) == 1\nassert solution(3,2) == 0\nassert solution(2,1) == -1\nassert solution(3,1) == -1\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 0\"\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['2', '1', '1', '1', '1']) == '1'\nassert solution(['3', '5', '5', '3', '3']) == '-1'\nassert solution(['2', '1', '1', '1', '1']) == '-1'\nassert solution(['3', '5', '5', '3', '3']) == '0'\nassert solution(['2', '1', '1', '1', '1']) == '0'\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 1') == '1'\nassert solution('3 2') == '1'\nassert solution('2 5') == '-1'\n\n\n'''\nInput\n2 1\n\nOutput\n1 0 \n0 0 \n\nInput\n3 2\n\nOutput\n1 0 0 \n0 1 0 \n0 0 0 \n'''\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1 0 0 0 0 0'\n\n\n-----My OWN CODE-----\n\nn, k = map(int, input().split())\nlst = []\nfor i in range(n):\n    lst.append(list(map(int, input().split())))\n\nfor i in range(n):\n    for j in range(n):\n        if lst[i][j] > lst[j][i]:\n            lst[i][j] = lst[j][i]\n\nfor i in lst:\n    print(' '.join(map(str, i)))"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"-1\""
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 0\" or -1\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"z^y^x\"\n\nassert solution(input()) == \"x^y^z\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1.0 1.0 1.0\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.0 1.0 1.0\") == \"(x^y)^z\"\nassert solution(\"2.0 2.0 2.0\") == \"(x^y)^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'z^y^x'\n\nExplanation\nThe expression for which one is the maximum is that the expression z^y^x is obtained as x^y^z.\n\n\"\"\"\n\nclass Solution:\n    def maximum(self, x, y, z):\n        if x >= y and x >= z:\n            return str(x ** y ** z)\n        elif y >= x and y >= z:\n            return str(y ** x ** z)\n        elif z >= x and z >= y:\n            return str(z ** x ** y)\n        else:\n            return str(y ** x ** z)\n\n    def generate(self, num, a, b, c):\n        # if num == 0:\n        #     return a * b * c\n        # if num == 1:\n        #     return a * b\n        # if num == 2:\n        #     return a * b * c\n        # if num == 3:\n        #     return a * b * c * d\n        # if num == 4:\n        #     return a * b * c * d * e\n        # if num == 5:\n        #     return a * b * c * d * e * f\n        # if num == 6:\n        #     return a * b * c * d * e * f * g\n        # if num == 7:\n        #     return a * b * c * d * e * f * g * h\n        # if num == 8:\n        #     return a * b * c * d * e * f * g * h * i\n        # if num == 9:\n        #     return a * b * c * d * e * f * g * h * i * j\n        # if num == 10:\n        #     return a * b * c * d * e * f * g * h * i * j * k\n        # if num == 11:\n        #     return a * b * c * d * e * f * g * h * i * j * k * l\n        # if num == 12:\n        #     return a * b * c * d * e * f * g * h * i * j * k * l * m\n        # if num == 13:\n        #     return a * b * c * d * e * f * g * h * i * j * k * l * m * n\n        if num == 0:\n            return self.maximum(a, b, c)\n        elif num == 1:\n            return self.maximum(a * b, c)\n        elif num == 2:\n            return self.maximum(a * b * c, c)\n        elif num == 3:\n            return self.maximum(a * b * c * d, c)\n        elif num == 4:\n            return self.maximum(a * b * c * d * e, c)\n        elif num == 5:\n            return self.maximum(a * b * c * d * e * f, c)\n        elif num == 6:\n            return self.maximum(a * b * c * d * e * f * g, c)\n        elif num == 7:\n            return self.maximum(a * b * c * d * e * f * g * h, c)\n        elif num == 8:\n            return self.maximum(a * b * c * d * e * f * g * h * i, c)\n        elif num == 9:\n            return self.maximum(a * b * c * d * e * f * g * h * i * j, c)\n        elif num == 10:\n            return self.maximum(a * b * c * d * e * f * g * h * i * j * k, c)\n        elif num == 11:\n            return self.maximum(a * b * c * d * e * f * g * h * i * j * k * l, c)\n        elif num == 12:\n            return self.maximum(a * b * c * d * e * f * g * h * i * j * k * l * m, c)\n        elif num == 13:\n            return self.maximum(a * b * c * d * e * f * g * h * i * j * k * l * m * n, c)\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'z^y^x'\nassert solution(stdin) == '(x^y)^z'\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 300\n1 <= stdin[i] <= 9\n\n2 <= stdin[i] <= 7\nstdin.length <= 300\nstdin[i] <= 9\n\nA_i = max(a_{i} for a_{i} in stdin) <= 200\nC_i = min(a_{i} for a_{i} in stdin) <= 12\n\n\n-----Time Complexity-----\n\nO(n^2) -> worst case\nO(n) -> best case\nO(nlogn) -> log2(n)\nO(logn) -> log2(n)\n\n\n-----Space Complexity-----\n\nO(1)\n\nThe algorithm is iterative, and the worst case for the worst case is O(n^2)\n\nO(n)\n\nThe algorithm is iterative, and the best case for the best case is O(n)\n\nO(nlogn)\n\nThe algorithm is O(nlogn)\n\n\n-----Algorithm 2-----\n\nThe algorithm is iterative, and the best case is O(n)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(n)\n\nThe algorithm is O(logn)\n\n\n-----Algorithm 3-----\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(n)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(n)\n\nThe algorithm is O(n)\n\n\n-----Algorithm 4-----\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\n\n-----Algorithm 5-----\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\n\n-----Algorithm 6-----\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\n\n-----Algorithm 7-----\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\n\n-----Algorithm 8-----\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\nThe algorithm is O(nlogn)\n\n\n-----Algorithm 9-----\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\n\n-----Algorithm 10-----\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm is O(n^2)\n\nThe algorithm"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1.0 1.0 1.0\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"3.0 3.0 3.0\") == \"(x^y)^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"z^y^x\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"z^y^x\"\nassert solution(input()) == \"(x^y)^z\"\nassert solution(input()) == \"x^y^z\"\nassert solution(input()) == \"(z^y)^x\"\nassert solution(input()) == \"x^y^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 'z^y^x'\nassert solution(input) == 'x^y^z'\nassert solution(input) == '((x^y)^z)'\nassert solution(input) == '(x^y)^z'\nassert solution(input) == 'x^y^z'\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == 5\n\"\"\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution(\"ababca\"),3) == 5\nassert solution(\"abcdefgh\",1) == 5\nassert solution(\"abcdefgh\",2) == 5\nassert solution(\"abcdefgh\",4) == 5\nassert solution(\"abcdefgh\",5) == 5\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\nInput\n8\naabbccddeeeffg\n\nOutput\n3\n\nInput\n8\nababcbcdeeefgcd\n\nOutput\n6\n\nInput\n6\nabcdefgh\n\nOutput\n3\n\n'''\n\nimport sys"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(6) == 5, \"The answer is wrong!\"\nassert solution(1) == 2, \"The answer is wrong!\"\nassert solution(2) == 2, \"The answer is wrong!\"\nassert solution(3) == 1, \"The answer is wrong!\"\nassert solution(4) == 2, \"The answer is wrong!\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str) == 7\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(7, \"abcabca\") == 5\nassert solution(8, \"abcdefgh\") == 3\nassert solution(8, \"aabbcc\") == 7\nassert solution(9, \"qwertyuiop\") == 8\nassert solution(10, \"asdfghjkl\") == 6\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 10\nassert solution(stdin) == 12\nassert solution(stdin) == 13\nassert solution(stdin) == 14\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5, 'incorrect'\n\n\n\"\"\"\n\nclass Solution:\n    def minOperations(self, s: str) -> int:\n        #Dynamic Programming \n        n = len(s)\n        dp = [[0 for _ in range(n+1)] for _ in range(n)]\n        #starting values\n        for i in range(1,n):\n            dp[i][0] = 1\n        #Trying to copy string\n        for i in range(1,n):\n            for j in range(1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        return n*2-sum(dp[n])"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3, \"The only solution\"\n\nassert solution(\"abcde\") == 4, \"Operation 4\"\n\nassert solution(\"aaaaaaaa\") == 0, \"Operation 0\"\n\nassert solution(\"abcdefghiabcdefghi\") == 4, \"Operation 4\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"test.txt\") == \"move test.txt 1 2\"\nassert solution(\"test.txt\") == \"move test.txt 1 test.txt\"\nassert solution(\"test.txt\") == \"move test.txt 1 test1 2\"\nassert solution(\"test.txt\") == \"move test.txt 1 test1 test.txt\"\nassert solution(\"test.txt\") == \"move test.txt 1 test1 test1\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 3\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"move 2 1\"\nassert solution(stdin) == \"move 2 1\"\nassert solution(stdin) == \"move 2 1\"\nassert solution(stdin) == \"move 2 1\"\nassert solution(stdin) == \"move 2 1\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"move 1 1\"\nassert solution(stdin) == \"move 2 1\"\nassert solution(stdin) == \"move 3 2\"\nassert solution(stdin) == \"move 99 3\"\nassert solution(stdin) == \"move 1 4\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) =='move 5 1'\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == \"move 3 1\"\nassert solution(2) == \"move 1 3\"\nassert solution(5) == \"move 2 extra\"\nassert solution(1) == \"move 1\"\nassert solution(1) == \"move 1\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1\") == \"move
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"move 1 3\"\nassert solution(stdin) == \"move 1 5\"\nassert solution(stdin) == \"move 11 1\"\nassert solution(stdin) == \"move 111 1\"\nassert solution(stdin) == \"move 11111 2\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n\nclass Solution:\n    def move(self, files, moves):\n        res = \"\"\n        \n        def move(files, moves):\n            for i in range(moves):\n                name = files[i].split(\" \")[0]\n                type = int(files[i].split(\" \")[1])\n                if type == 0:\n                    files[i] = \"0\" + files[i].split(\" \")[2]\n                elif type == 1:\n                    files[i] = \"1\" + files[i].split(\" \")[2]\n                else:\n                    files[i] = \"extra\" + files[i].split(\" \")[2]\n            return \" \".join(files)\n        \n        for i in range(len(files)):\n            res += move(files, i)\n        \n        return res"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 0\nassert solution(1) == 1\nassert solution(0) == 2\nassert solution(111000) == 2"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"123456\") == 0\nassert solution(\"111111\") == 0\nassert solution(\"110101\") == 3\nassert solution(\"110001\") == 4\nassert solution(\"111111\") == 5\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"123456\") == 2\nassert solution(\"111000\") == 1\nassert solution(\"123456789\") == 3\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(123456) == 0\nassert solution(111000) == 2\nassert solution(123) == 1\nassert solution(12345) == 1\nassert solution(123456) == 1\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"123456\") == 0\nassert solution(\"111000\") == 2\nassert solution(\"123456\") == 2\nassert solution(\"111100\") == 1\nassert solution(\"123456\") == 1\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '0'"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n\n-----Constraints-----\n1 <= stdin.length <= 30\n1 <= st in str <= 10^6\n\n\n-----Example 1-----\nInput\n000000\nOutput\n0\n\nExample 2\nInput\n123456\nOutput\n1\n\nExample 3\nInput\n111000\nOutput\n2\n\nExample 4\nInput\n111000\nOutput\n2\n\nExample 5\nInput\n12345\nOutput\n2\n\n-----Submissions-----\nRuntime: 76 ms, faster than 85.02% of Python3 online submissions for Luba's Ticket.\nMemory Usage: 17.4 MB, less than 33.52% of Python3 online submissions for Luba's Ticket.\n\"\"\"\n\nclass Solution:\n    def min_replacements(self, st: str) -> int:\n        # similar as problem 3\n        # also a faster way to find a substring\n        return 1 + sum(i * 3 for i, s in enumerate(st[::-1]) if s.isnumeric())\n\n    def min_replacements_slow(self, st: str) -> int:\n        # easier to understand\n        # a loop on the sub-string\n        # [6, 5, 4, 3]\n        #\n        # [7, 3, 7, 6]\n        #\n        # [4, 1, 0, 1]\n        #\n        # [6, 2, 3, 4]\n        #\n        # [1, 0, 1, 0]\n        #\n        # [3, 2, 2, 3]\n        #\n        # [1, 1, 1, 1]\n        #\n        # [5, 1, 1, 0]\n        #\n        # [5, 0, 0, 0]\n\n        substrings = [s.strip() for s in st.split(\" \") if s.strip()]\n        for i, s in enumerate(substrings):\n            for j, s2 in enumerate(substrings[i:]):\n                if s == s2:\n                    substrings[i] = s2[:j] + str(i + j + 2) + s2[j:]\n\n        return sum(i * 3 for i, s in enumerate(substrings) if s.isnumeric())\n\n    def min_replacements_fast(self, st: str) -> int:\n        # TODO\n        # using a dictionary, use a hashmap to keep track of number of substrings and substrings left\n        # keep track of leftmost string for a substring, as we go\n        # leftmost string is the first substring left\n        # for each substring left\n        # substrings left - right are the substrings\n        # count the number of substrings\n        n = len(st)\n\n        leftmost_substrings = [st[:i] for i in range(n + 1)]\n        leftmost_substrings_hashmap = {leftmost_substrings[i]: i for i in range(n + 1)}\n\n        def recurse(leftmost_substrings, leftmost_substrings_hashmap):\n            # base case\n            if leftmost_substrings[-1] == \"0\":\n                return 0, leftmost_substrings_hashmap\n\n            # iterate through leftmost_substrings\n            substring_hashmap = leftmost_substrings_hashmap\n            for i in range(n - 2, -1, -1):\n                new_substring = st[i:] + st[:i]\n                if new_substring in substring_hashmap:\n                    # check if leftmost_substring was a substring with the new substring\n                    leftmost_substrings.insert(i + 1, new_substring)\n                    substring_hashmap[new_substring] = i\n                    leftmost_substrings_hashmap[new_substring] = i + 1\n                    if i + 1 == n:\n                        return len(leftmost_substrings), leftmost_substrings_hashmap\n\n                    if leftmost_substrings[i + 1]!= \"0\":\n                        # recurse\n                        return recurse(leftmost_substrings[i + 1:], substring_hashmap)\n\n            # no substrings left\n            return 0, leftmost_substrings_hashmap\n\n        return recurse(leftmost_substrings, leftmost_substrings_hashmap)\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"111100\"), 2\nassert solution(\"121111\"), 1\nassert solution(\"0111111\"), 0\nassert solution(\"010000\"), 1\nassert solution(\"000000\"), 5"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\nassert solution(\"13123\") == 0\n\nassert solution(\"123456\") == 1\n\nassert solution(\"12345678\") == 2\n\nassert solution(\"10\") == 1"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n0 2\\n0 3\\n3 0\\n\") == \"3\"\nassert solution(\"1 0\\n2 2\\n3 3\\n\") == \"3\"\nassert solution(\"1 1\\n2 2\\n3 3\\n\") == \"3\"\nassert solution(\"1 1\\n2 2\\n3 3\\n4 3\\n5 3\\n\") == \"3\"\nassert solution(\"0 0\\n0 0\\n1 1\\n2 2\\n3 3\\n4 4\\n5 4\\n6 3\\n7 3\\n8 3\\n9 3\\n\") == \"2\"\n\n\"\"\""
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 3\"\n    ) == 3\n    assert solution(\n    \"5 2\"\n    ) == 2\n    assert solution(\n    \"5 2\"\n    ) == 2\n    assert solution(\n    \"5 2\"\n    ) == 2\n    assert solution(\n    \"5 2\"\n    ) == 2\n    "
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0\") == \"0\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 4\") == \"2\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"5 6\") == \"0\"\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 5) == 3\nassert solution(3, 2) == 1\nassert solution(3, 0) == 2\nassert solution(0, 1) == 3\nassert solution(0, 2) == 2\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"30\") == \"1\"\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"3\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3\",\"1\"]) == \"2\"\nassert solution([\"5\",\"4\",\"2\"]) == \"3\"\nassert solution([\"1\",\"2\",\"5\",\"0\",\"2\"]) == \"2\"\nassert solution([\"1\",\"2\",\"0\",\"3\",\"3\"]) == \"3\"\nassert solution([\"1\",\"2\",\"0\",\"3\",\"0\"]) == \"3\"\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == 3\nassert solution(\"5 2\") == 2\nassert solution(\"5 4\") == 1\nassert solution(\"3 2\") == 1\nassert solution(\"5 6\") == 2\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '23 128'\nassert solution(input('single')) == '1 1'\nassert solution(input('double')) == '1 8'\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 3') == 1\nassert solution('4 3') == 23\nassert solution('2 3') == 1\nassert solution('2 4') == 8\nassert solution('2 5') == 23\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 8\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"23 128\"\n\"\"\"\nfrom math import gcd"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '23'\nassert solution(stdin) == '128'\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution) == '1 1'\n\n\n-----Constraints-----\n0 \u2264 k \u2264 10^18\n\n[execution time limit] 4 seconds (py3)\n\n[input] int k\n\n[input] string stdin\n\n[output] string\n\n\"\"\"\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"23 128\"\nassert solution(\"4 3\") == \"23 128\"\nassert solution(\"1 3 2\") == \"1 1\"\nassert solution(\"4 3 2\") == \"23 128\"\nassert solution(\"2 4 5\") == \"23 128\"\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1 1'\nassert solution(stdin) == '23 128'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '1 8'\nassert solution(stdin) == '23 128'\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"23 128\"\n\n-----Explanation-----\n\nIn the first sample case, there are 2^3 = 8 days in Udayland. The probability that 2 people have the same birthday among 2 people is clearly $\\frac{1}{8}$.\n\nIn the second sample case, there are only 2^1 = 2 days in Udayland, but there are 3 people, so it is guaranteed that two of them have the same birthday. Thus, the probability is 1 and A = B = 1.\n\nAfter subtracting 2 from 2^n, the number of people in the interval [1, 2^n-1) are non-negative integers, hence the answer is the sum of the squares of the numbers in the interval [1, 2^n-1).\n\nIn the third sample case, there are only 2^1 = 2 days in Udayland, and there are 3 people. The probability that 2 people have the same birthday among 2 people is clearly $\\frac{1}{8}$.\n\nIn the fourth sample case, there are only 2^2 = 4 days in Udayland, and there are 3 people. The probability that 2 people have the same birthday among 2 people is clearly $\\frac{1}{8}$.\n\nIn the fifth sample case, there are only 2^3 = 6 days in Udayland, and there are 3 people. The probability that 2 people have the same birthday among 2 people is clearly $\\frac{1}{8}$.\n\nConclusion\n\nThe correctness of the hypothesis that a random person has the same birthday in the interval [1, 2^n-1) has a factor $B$ of two, is an important insight of why ZS the Coder is successful. A ZS person has the same birthday in the interval [1, 2^n-1) has a factor $B$ of two. What is the value of A and B?\n\n\"\"\"\n\nn, k = map(int, input().split())\nprint(solution(n, k))"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '23 128'\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= t_i <= 10^6\n1 <= dir_i <= 10^6\n1 <= t_{i} <= 10^6\n2 <= n <= 1000\n\n-----Time Limit: 1 second (S=Standard input)\n\nSample Input\n5\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North\n\nSample Output\nYES\n\nSample Input\n5\n20000 South\n10 East\n20000 North\n4000 North\n\nSample Output\nNO\n\"\"\"\n\nclass Solution:\n    def valid(self, stdin, dir, length, type, j, cur_dir, move_cur_dir):\n        if length == 0:\n            return True\n        if j >= length:\n            return True\n        if dir == cur_dir:\n            return self.valid(stdin, dir, length - 1, type, j + 1, cur_dir, move_cur_dir)\n        else:\n            return self.valid(stdin, dir, length, type, j + 1, cur_dir, move_cur_dir) or self.valid(stdin, cur_dir, length - 1, type, j + 1, dir, move_cur_dir)\n    \n    def is_on_pos(self, stdin, dir, length, type, j, cur_dir, move_cur_dir):\n        if type == 1:\n            if j >= length:\n                return True\n            if self.valid(stdin, dir, length - 1, type, j + 1, cur_dir, move_cur_dir):\n                return True\n            else:\n                return self.valid(stdin, dir, length, type, j + 1, cur_dir, move_cur_dir)\n        if type == 2:\n            if j >= length:\n                return True\n            if self.valid(stdin, cur_dir, length - 1, type, j + 1, dir, move_cur_dir):\n                return True\n            else:\n                return self.valid(stdin, cur_dir, length, type, j + 1, dir, move_cur_dir)\n        if type == 3:\n            if j >= length:\n                return True\n            if self.valid(stdin, cur_dir, length - 1, type, j + 1, dir, move_cur_dir):\n                return True\n            else:\n                return self.valid(stdin, cur_dir, length, type, j + 1, dir, move_cur_dir)\n    \n    def is_valid(self, stdin, dir, length, type, j, cur_dir, move_cur_dir):\n        if length == 0:\n            return True\n        if j >= length:\n            return True\n        if dir == cur_dir:\n            return self.is_on_pos(stdin, dir, length - 1, type, j + 1, cur_dir, move_cur_dir)\n        else:\n            return self.is_on_pos(stdin, cur_dir, length, type, j + 1, dir, move_cur_dir) or self.is_on_pos(stdin, cur_dir, length - 1, type, j + 1, dir, move_cur_dir)\n        \n    def is_on_pos_double(self, stdin, dir, length, type, j, cur_dir, move_cur_dir):\n        if type == 1:\n            if j >= length:\n                return True\n            if self.valid(stdin, dir, length - 1, type, j + 1, cur_dir, move_cur_dir):\n                return True\n            else:\n                return self.valid(stdin, cur_dir, length, type, j + 1, dir, move_cur_dir)\n        if type == 2:\n            if j >= length:\n                return True\n            if self.valid(stdin, cur_dir, length - 1, type, j + 1, dir, move_cur_dir):\n                return True\n            else:\n                return self.valid(stdin, cur_dir, length, type, j + 1, dir, move_cur_dir)\n        if type == 3:\n            if j >= length:\n                return True\n            if self.valid(stdin, cur_dir, length - 1, type, j + 1, dir, move_cur_dir):\n                return True\n            else:\n                return self.valid(stdin, cur_dir, length, type, j + 1, dir, move_cur_dir)\n        \n    def solution(self, stdin: str) -> str:\n        n = int(stdin.strip())\n        t_i = int(stdin.strip().split(\" \")[0])\n        dir = stdin.strip().split(\" \")[1].strip(\"'\")\n        \n        move_cur_dir = {\"North\":0, \"South\":1, \"West\":2, \"East\":3}\n        \n        for i in range(n):\n            cur_dir = dir\n            \n            if i == t_i:\n                type = 1\n            else:\n                type = 2\n            \n            if self.is_on_pos_double(stdin, cur_dir, n, type, i, cur_dir, move_cur_dir):\n                continue\n            \n            if type == 1:\n                cur_dir = move_cur_dir[\"North\"]\n            if type == 2:\n                cur_dir = move_cur_dir[\"South\"]\n            if type == 3:\n                cur_dir = move_cur_dir[\"West\"]\n                \n            if self.is_on_pos_double(stdin, cur_dir, n, type, i, cur_dir, move_cur_dir):\n                continue\n            \n            if type == 1:\n                cur_dir = move_cur_dir[\"North\"]\n            if type == 2:\n                cur_dir ="
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n0 <= stdin[i] <= 10^5\n\n------------------"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nprint(\"Yes\")\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 100\n\n-----Division-----\n\nTime Limit: 1 sec\n\nBonus points: 0\n\n\n-----Submissions-----\n749\n\"\"\""
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"West\") == \"NO\"\nassert solution(\"North\") == \"YES\"\nassert solution(\"South\") == \"NO\"\nassert solution(\"East\") == \"YES\"\nassert solution(\"NorthWest\") == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7500 South\") == \"YES\"\nassert solution(\"10000 East\") == \"NO\"\nassert solution(\"3500 North\") == \"NO\"\nassert solution(\"4444 West\") == \"YES\"\nassert solution(\"4000 North\") == \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"solution([<stdin>]) returned 'NO' despite the validity of the input.\"\n\nassert solution(stdin), \"solution([<stdin>]) returned 'NO' despite the validity of the input.\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n\n-----Constraints-----\n1 \u2264 L \u2264 R \u2264 2\u00b710^9\n0 \u2264 k' \u2264 L \u2264 R \u2264 2\u00b710^9\nL \u2264 k' \u2264 k' \u2264 R \u2264 2\u00b710^9\n\n-----Time Limit---O(K + N) for K \u2265 1 and N \u2265 1\nO(K + N) for k' > 0\n\"\"\""
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\n\nInput\n2 0 4 3 6\n\nOutput\n2\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 2\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 0 3 3 5 21\") == \"3\"\nassert solution(\"2 4 3 0 6 17\") == \"2\"\nassert solution(\"2 4 0 6 17\") == \"1\"\nassert solution(\"3 4 4 3 7\") == \"1\"\nassert solution(\"3 4 0 6 17\") == \"1\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n'''\n\nfrom math import log\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 5\n'''"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 0 3 3 5 21') == '3'\nassert solution('2 4 3 0 6 17') == '3'\nassert solution('2 0 4 0 1 11') == '3'\nassert solution('2 0 3 3 4') == '3'\nassert solution('2 0 4 0 1 1') == '1'\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 2 3\",\n    \"7 10\") == 1\nassert solution(\n    \"4 7 10\",\n    \"7 10\") == 3\n\n\n----------------\n\"\"\"\n\nimport math"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 2\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\""
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8]\n    ]) == 10\n    pass\n\nassert solution(\n    [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [10, 15, 20, 25]\n    ]) == 20\n    pass\n\nassert solution(\n    [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [10, 15, 20, 25],\n        [10, 15, 20, 25]\n    ]) == 10\n    pass\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 3\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4\", \"7\", \"10\"]) == \"3\"\nassert solution([\"3\", \"7\", \"3\"]) == \"3\"\nassert solution([\"3\", \"7\", \"1\", \"3\"]) == \"3\"\nassert solution([\"3\", \"4\", \"1\", \"3\"]) == \"3\"\nassert solution([\"3\", \"2\", \"3\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1,3) == \"1\"\nassert solution(4,7) == \"3\"\nassert solution(3,5) == \"5\"\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == 1\nassert solution(\"4 7 10\") == 3\nassert solution(\"4 4\") == 1\nassert solution(\"4 2\") == 1\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('123' == 'RRRRR') == 'NO', 'output: %s' % solution('123')\nassert solution('1234567890') == 'YES', 'output: %s' % solution('1234567890')\nassert solution('12345678') == 'NO', 'output: %s' % solution('12345678')\nassert solution('123456789') == 'NO', 'output: %s' % solution('123456789')\nassert solution('1234567') == 'NO', 'output: %s' % solution('1234567')\n\nPass\n\n-----Other Solutions-----\n\nLeetcode\n\n@lc missed\n\n@lc code=start\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        if not s: return True\n        dic = {'R':0, 'G':0, 'B':0}\n        for c in s:\n            dic[c] += 1\n            if dic[c] > 1: return False\n        if len(s) % 2!= 0: return False\n        return True\n\n@lc code=end\n\n@lc main=start\nclass Solution:\n    def isValid(self, s: str) -> bool:\n        dict = {'R':0, 'G':0, 'B':0}\n        for c in s:\n            dict[c] += 1\n            if dict[c] > 1: return False\n        if len(s) % 2!= 0: return False\n        return True\n\n@lc main=end"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == \"YES\"\n\"\"\""
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,4) == \"YES\", \"output error\"\nassert solution(6,7) == \"YES\", \"output error\"\nassert solution(6,3) == \"NO\", \"output error\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"RRRR\", \"RRRR\"]) == \"NO\"\nassert solution([\"RRRR\", \"RRRR\"]) == \"NO\"\nassert solution([\"RRRR\", \"RRRR\"]) == \"NO\"\nassert solution([\"RRRR\", \"RRRR\"]) == \"NO\"\nassert solution([\"RRRR\", \"RRRR\"]) == \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"8 8\") == \"NO\"\nassert solution(\"5 4\") == \"NO\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"5 3\") == \"YES\"\nassert solution(\"6 7\") == \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('RRRGBBGGRRR') == \"YES\"\nassert solution('RRRGRRRRR') == \"NO\"\nassert solution('BBRBBBBBB') == \"NO\"\nassert solution('RRRRGBBGG') == \"YES\"\nassert solution('RGGRRGGGR') == \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n(\n(1 2 2 4 3 1),\n(1 2 2 1 1),\n(1 1 1 2 2),\n(1 2 2 2 2),\n(1 1 2 1 3),\n(1 1 2 1 3),\n(1 1 2 1 1)) == \"YES\"\n\nassert solution(\n(\n(1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 111 110 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111 111"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin: str = input()\n)\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == -2\nassert solution(7) == 3\nassert solution(1) == -1\nassert solution(0) == 0\nassert solution(6) == 1\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\", 3, 7) == 3\nassert solution(\"\", 3, 7) == -2\nassert solution(\"\", 3, 7) == 3\nassert solution(\"\", 3, 7) == -2\nassert solution(\"\", 3, 7) == 3\n\n\n------------------\n--- Solutions ---"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == (-2, 0)\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-2 0'\n\nassert solution(stdin) == '3 2'\n\nassert solution(stdin) == '-2 0'\n\nassert solution(stdin) == '3 2'\n\nassert solution(stdin) == '-2 0'\n\"\"\""
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '-2 0'\nassert solution(input) == '3 2'\nassert solution(input) == '-2 0'\nassert solution(input) == '3 2'\nassert solution(input) == '-2 0'\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == -2\nassert solution(5) == 2\nassert solution(6) == 3\nassert solution(7) == -2\nassert solution(8) == 2\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin=\"3 7\".split()\n) == (\n    -2,\n    -1\n)\n\n\n-----Submissions-----\n1\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(7) == -2, \"The function solution failed\"\n\n-----------------------------\nThe brute force approach is to use the above approach.\n\nIn this approach, Ayrat's search through the field is not very fast.\n\nWe can also use the backtracking method to help us solve the problem.\n\nStart with a direction\u00a0up and a distance.\n\nThen, Ayrat will go on to the next direction,\n\nIf the next number is 1, we will move left.\n\nIf the next number is 0, we will move right.\n\nWe can also calculate the position of the next hexagon.\n\n-2 0 0 0\n0 0 0 0\n0 0 0 0\n-2 0 0 0\n\n\n\n------------------------------\nWe know that we have a valid solution.\n\nThe first move is to move the hexagon horizontally.\n\nThe second move is to move the hexagon vertically.\n\nThe third move is to move the hexagon diagonally.\n\nThe final move is to move the hexagon back.\n\nThe next move is to move the hexagon left.\n\nThe last move is to move the hexagon right.\n\nNow, we know the direction and distance of the next hexagon.\n\nWe have an idea about the next move.\n\nSo, we know, that Ayrat will move along the spiral.\n\nNow, we know the direction of the next move.\n\nSo, we know, that Ayrat will move vertically.\n\nNow, we know the direction of the next move.\n\nSo, we know, that Ayrat will move horizontally.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nNow, we know the next move.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n\nSo, we know, that Ayrat will move left.\n\nSo, we know, that Ayrat will move right.\n\nSo, we know, that Ayrat will move diagonally.\n\nSo, we know, that Ayrat will move back.\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"The string should be in the form of xyxye\"\n\"\"\"\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == -2\nassert solution(10) == 3\nassert solution(12) == 2\nassert solution(15) == 2\n\n\n------IMPORTANT-----\nAs soon as we get the correct solution (non-solution) then you can use it in the challenge.\n-----Input-----\n\nThe only line of the input contains integer n (0 \u2264 n \u2264 10^18)\u00a0\u2014 the number of Ayrat's moves.\n\n\n-----Output-----\n\nPrint two integers x and y\u00a0\u2014 current coordinates of Ayrat coordinates.\n\n\n------IMPORTANT-----\nAs soon as we get the correct solution (solution) then you can use it in the challenge.\n-----Input-----\n\nThe only line of the input contains integer n (0 \u2264 n \u2264 10^18)\u00a0\u2014 the number of Ayrat's moves.\n\n\n-----Output-----\n\nPrint two integers x and y\u00a0\u2014 current coordinates of Ayrat coordinates.\n\n\n------IMPORTANT-----\nAs soon as we get the correct solution (solution) then you can use it in the challenge.\n-----Input-----\n\nThe only line of the input contains integer n (0 \u2264 n \u2264 10^18)\u00a0\u2014 the number of Ayrat's moves.\n\n\n-----Output-----\n\nPrint two integers x and y\u00a0\u2014 current coordinates of Ayrat coordinates.\n\n-----START OF EXAMPLE-----\nimport math"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 6 2\") == \"Yes\"\nassert solution(\"3 11 6\") == \"Yes\"\nassert solution(\"6 11 6\") == \"No\"\n\"\"\""
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"No\"\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 11 6\") == \"No\"\nassert solution(\"6 11 7\") == \"No\"\nassert solution(\"6 3 3\") == \"Yes\"\nassert solution(\"6 4 3\") == \"Yes\"\nassert solution(\"6 1 1\") == \"Yes\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 6, 7) == \"Yes\"\nassert solution(3, 2, 7) == \"No\"\n\n\n\"\"\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"Yes\"\n\nprint(solution(inp))\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2 6\") == \"Yes\"\nassert solution(\"2 1 3\") == \"Yes\"\nassert solution(\"1 2 6\") == \"Yes\"\nassert solution(\"3 6 5\") == \"Yes\"\n\n\n-----Constraints-----\n1 \u2264 a \u2264 10\n1 \u2264 b \u2264 10\n1 \u2264 c \u2264 10 000\n\n------Time Limit: 30 seconds per testcase------\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 5 5 5 5 4 3\") == \"Yes\"\nassert solution(\"2 2 2 3 3 3 3 3 3 3\") == \"No\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4 5 6\") == \"YES\"\nassert solution(\"2 3 5 8\") == \"NO\""
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4 2\") == \"YES\"\nassert solution(\"3 4 2 1\") == \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 100, L <= n <= 100\n\n1 <= stdin.length <= 100\n\n1 <= stdin[i] <= L\n\nstdin contains distinct integers in the ascending order.\n0 <= stdin[j] <= L\n\nstdin contains distinct integers in the ascending order.\n0 <= stdin[k] <= L\n\nstdin contains distinct integers in the ascending order.\n0 <= stdin[l] <= L\n\n2 <= n <= 100\n\n2 <= stdin[i] <= stdin[j]\n\n2 <= stdin[i] <= stdin[l]\n\n\n-----Time Limit-----\nO(NlogN)\n\nN is the length of the track.\n\n1 <= N <= 100\n\n1 <= L <= n\n\n1 <= stdin.length <= 100\n\n1 <= stdin[i] <= L\n\nstdin contains distinct integers in the ascending order.\n0 <= stdin[j] <= L\n\nstdin contains distinct integers in the ascending order.\n0 <= stdin[k] <= L\n\nstdin contains distinct integers in the ascending order.\n0 <= stdin[l] <= L\n\n2 <= n <= 100\n\n2 <= stdin[i] <= stdin[j]\n\n2 <= stdin[i] <= stdin[l]\n\n\n------SAMPLE CASES-------\n\nsample_input = \"5 3\"\nsample_output = \"YES\"\n\ninput = [3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\ninput = [4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\ninput = [2, 1, 3, 5, 7, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\ninput = [2, 1, 3, 5, 7, 6, 8, 9, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\ninput = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\ninput = [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\npass\n\n-----Bonus-----\n\n[Time complexity]\nO(nL)\n\n[Space complexity]\nO(L)\n\n\"\"\""
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"mew\") == 3\nassert solution(\"wuffuw\") == 5\nassert solution(\"qqqqqqqq\") == 0\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"hgdfggd\", \"gdfgggf\", \"hfgdf\", \"fgggf\", \"hgdf\"]) == \"2\"\nassert solution([\"brw\", \"vgb\", \"g\", \"gb\", \"vr\", \"bb\", \"br\"]) == \"3\"\nassert solution([\"heb\", \"ibc\", \"de\", \"cbc\", \"hc\"]) == \"2\"\nassert solution([\"ah\", \"aa\", \"bca\", \"bcb\", \"abb\", \"bca\", \"bcb\", \"abb\", \"bcb\", \"abc\"]) == \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 3, \"Correct!\"\n\"\"\"\n\nimport re\nimport sys\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('mew') == 3\nassert solution('wuffuw') == 5\nassert solution('qqqqqqqq') == 0"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('mew'), '1'\nassert solution('wuffuw'), '5'\nassert solution('qqqqqqqq'), '0'"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(str) == \"0\"\nassert solution(str) == \"1\"\nassert solution(str) == \"3\"\nassert solution(str) == \"5\"\nassert solution(str) == \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(mew) == \"3\", \"palindrome\"\nassert solution(wuffuw) == \"5\", \"palindrome\"\nassert solution(qqqqqqqq) == \"0\", \"palindrome\"\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"mew\\\") == \"3\", \"stdin:mew\"\nassert solution(\\\"wuffuw\\\") == \"5\", \"stdin:wuffuw\"\nassert solution(\\\"qqqqqqqq\\\") == \"0\", \"stdin:qqqqqqqq\""
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 0\n'''"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"unrated\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) =='maybe', 'Students must be rated in the same order!'\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"rated\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"unrated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"maybe\", \"Should return'maybe'\"\n\"\"\""
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"rated\"\nassert solution(stdin) == \"unrated\"\nassert solution(stdin) == \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"maybe\"\n\"\"\""
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"rated\"\nassert solution(input()) == \"rated\"\nassert solution(input()) == \"rated\"\nassert solution(input()) == \"rated\"\nassert solution(input()) == \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2 1 0 3 0 0 3 2 4'\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3 1 0 3 0 0 3 2 4'\nassert solution(stdin) == '0 1 2 3 4'\nassert solution(stdin) == '2 1 0 1 2 3 4'\nassert solution(stdin) == '0 1 2 3 4'\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5 6 0 1 -2 3 4\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution == '0 1 2 3 4'\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        [2, 1, 0, 3, 0, 0, 0],\n        [0, 0, 0, 0, 1, 0, 2],\n        [0, 0, 0, 0, 2, 0, 1],\n        [0, 0, 0, 0, 2, 0, 1],\n        [0, 0, 0, 0, 2, 0, 1],\n        [0, 0, 0, 0, 1, 0, 2],\n        [0, 0, 0, 0, 2, 0, 1]\n    ]) == '0 1 2 3 4'\n    pass\n'''\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 6 0 1 -2 3 4\") == \"0 1 2 3 4\"\nassert solution(\"7\") == \"0 1 2 3 4\"\nassert solution(\"5\") == \"0 1\"\nassert solution(\"5 7\") == \"0 1\"\nassert solution(\"7 5\") == \"0 1\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 0 3 0 0 3 2 4\"), \"0 1 2 3 4\"\nassert solution(\"3\"), \"0\"\nassert solution(\"\"), \"3\"\nassert solution
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 1 0 3 0 0 3 2 4\"\nassert solution(stdin) == \"0 1 2 3 4\"\nassert solution(stdin) == \"0 1 2 3 4\"\nassert solution(stdin) == \"2 1 0 3 0 0 3 2 4\"\nassert solution(stdin) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input().split()) == [2, 4, 1, 0, -2, 0, 0, 0, 1, 3, 2, 2]\n\nassert solution(input().split()) == [3, 0, 1, 2, 2, 1, 1, 0, 1, 2, 2, 3, 3, 3, 4]\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 4 1 1 2 2\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"000111\") == 2\nassert solution(\"001\") == 2\nassert solution(\"10\") == 3\nassert solution(\"101\") == 2\nassert solution(\"11001\") == 2\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()), \"There are not only distinct cyclical binary strings.\"\n\nassert solution(input()), \"There are not only distinct cyclical binary strings.\"\n\nassert solution(input()), \"There are not only distinct cyclical binary strings.\"\n\"\"\"\n\nclass Solution:\n    def findSubstring(self, s: str, t: str) -> int:\n        m = len(t)\n        n = len(s)\n        if m < n:\n            return 0\n        cnt = [0] * (n + 1)\n        cnt[0] = 1\n        for i in range(1, n + 1):\n            for j in range(0, m):\n                if t[j]!= s[i - 1]:\n                    break\n                cnt[i] += cnt[i - 1]\n            cnt[i] += cnt[i - 1]\n            if cnt[i] > 1:\n                return i\n        return 0\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, \"0\") == 1\nassert solution(4, \"10101010101010\") == 3\nassert solution(20, \"10101010101010\") == 2\nassert solution(20, \"110000\") == 0\nassert solution(20, \"110111111111111\") == 2\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 2\n\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= s.length <= n\ns contains only digits and '0' and '1'.\n\n\"\"\")"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"000111\", \"001\", \"01110\", \"10\"]) == 3\nassert solution([\"000111\", \"001\", \"01110\"]) == 0\nassert solution([\"00001\", \"01\", \"01\"]) == 0\nassert solution([\"00001\", \"1\"]) == 1\nassert solution([\"01\", \"001\"]) == 2\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, \"10101010101010\") == 6\nassert solution(5, \"101101010101010\") == 9\nassert solution(5, \"101011000001100\") == 14\nassert solution
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2, \"0\") == 3\nassert solution(4, \"10101010101010\") == 2\nassert solution(20, \"10101010101010\") == 0\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(10, \"000111\") == 2\nassert solution(20, \"10101010101010\") == 962"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"000111\") == 2\nassert solution(\"10101010101010\") == 3\nassert solution(\"10\") == 4\nassert solution(\"11\") == 4\nassert solution(\"1111101\") == 3\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 962\n\"\"\""
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5 6'\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6, \"solution() failed to print the expected result\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    '4'\n    '-1 0'\n    '0 -1'\n    '1 0'\n    '1 1'\n    '-4 -5'\n    '-4 -6'\n) == '3 4'\nassert solution(\n    '6'\n    '-1 0'\n    '0 -1'\n    '1 0'\n    '1 1'\n    '-4 -5'\n    '-4 -6'\n) == '6 5'\nassert solution(\n    '4 2'\n    '0 -1'\n    '1 0'\n    '1 1'\n    '-4 -5'\n    '-4 -6'\n) == '3 4'\nassert solution(\n    '6 6'\n    '-1 0'\n    '0 -1'\n    '1 0'\n    '1 1'\n    '-4 -5'\n    '-4 -6'\n) == '6 5'\nassert solution(\n    '4 1 3 4'\n    '0 -1'\n    '1 0'\n    '1 1'\n    '-4 -5'\n    '-4 -6'\n) == '3 4'\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5 6\"\nassert solution(input()) == \"3 4\""
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 5\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '3 4'\nassert solution(inp) == '2 3'\nassert solution(inp) == '2 3'\nassert solution(inp) == '2 3'\nassert solution(inp) == '2 3'\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == (3, 6)\n\"\"\""
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"5 4\"\nassert solution(input()) == \"1 2\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '3 4'"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"6 5\"\nassert solution(stdin) == \"2 4\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2 1 4 10\", \"2 1 4 5\", \"5 2 1 4 10\", \"5 2 1 4 5\", \"5 2 1 4 5\", \"5 2 1 4 5\"]) == 14\nassert solution([\"5 1 5 4\", \"5 4 3 3\", \"2 2 1 2\", \"2 3 1 2\", \"5 3 1 2\", \"5 4 1 2\", \"5 5 1 2\"]) == 13\nassert solution([\"2 4 2\"]) == \"1\"\nassert solution([\"2 3 4 1\"]) == \"2\"\nassert solution([\"2 3 4 1\"]) == \"1\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"17\"\nassert solution(stdin) == \"17\"\nassert solution(stdin) == \"20\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"14\"\n\nassert solution(inp) == \"13\"\n\nassert solution(inp) == \"14\"\n\nassert solution(inp) == \"13\"\n\nassert solution(inp) == \"14\""
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\"5\",\"2\",\"1\",\"4\",\"10\",\"5\",\"3\",\"5\",\"5\",\"2\"]\n    ) == \"13\"\nassert solution(\n    [\"5\",\"2\",\"1\",\"4\",\"10\",\"5\",\"3\",\"5\",\"5\",\"2\"]\n    ) == \"14\"\nassert solution(\n    [\"5\",\"2\",\"1\",\"4\",\"10\",\"5\",\"3\",\"5\",\"5\",\"2\"]\n    ) == \"14\"\nassert solution(\n    [\"5\",\"2\",\"1\",\"4\",\"10\",\"5\",\"3\",\"5\",\"5\",\"2\"]\n    ) == \"14\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"14\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input()) == \"14\"\nassert solution(\n    input()) == \"13\"\nassert solution(\n    input()) == \"13\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '13'\n\"\"\""
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '14'\nassert solution(stdin) == '13'\nassert solution(stdin) == '13'\nassert solution(stdin) == '13'\nassert solution(stdin) == '13'\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == -1\nassert solution(1) == 2\nassert solution(2) == 6\nassert solution(3) == 5\nassert solution(4) == 10\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == -1"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 2\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(list(map(int, stdin.split()))) == -1\nassert solution(list(map(int, stdin.split()))) == str(k)\nassert solution(list(map(int, stdin.split()))) == str(k)\nassert solution(list(map(int, stdin.split()))) == str(-1)\nassert solution(list(map(int, stdin.split()))) == str(-1)"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,5) == -1\nassert solution(10,10) == -1\nassert solution(18,6) == 6\nassert solution(48,30) == -1\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == 0, \"No solution\"\nassert solution(4) == 3, \"No solution\"\nassert solution(12) == 12, \"No solution\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == -1\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 7\nassert solution(input()) == 8\nassert solution(input()) == -1"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('6 12') == '14'\nassert solution('11 14') == '31'\nassert solution('3 8') == '5'\nassert solution('5 7') == '7'\nassert solution('21 21') == '88'\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 5) == 7\nassert solution(2, 3) == 5\nassert solution(3, 4) == 7\nassert solution(5, 4) == 1\nassert solution(7, 5) == 3\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '14'"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(31)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(7)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(5)\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 5\") == \"7\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"5\"\nassert solution(\"21 21\") == \"88\"\nassert solution(\"1 5\") == \"1\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 12\") == \"14\"\nassert solution(\"11 14\") == \"31\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"5 7\") == \"7\"\nassert solution(\"21 21\") == \"88\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 7\") == \"31\"\nassert solution(\"11 14\") == \"7\"\nassert solution(\"5 5\") == \"1\"\nassert solution(\"21 21\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '31'\nassert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '88'\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '31'\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"42\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"42\"\nassert solution(inp) == \"42\"\nassert solution(inp) == \"0\"\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 22\nassert solution(stdin) == 42\nassert solution(stdin) == 22"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 22\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 -2\") == 22\nassert solution(\"12 -3\") == 0\nassert solution(\"5 10\") == 22\nassert solution(\"12 10\") == 0\nassert solution(\"5 10 -1 -2 -3 -4 -5\") == 42\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"-2 -3 -4 -5\") == \"42\"\nassert solution(\"-1 -2 -3 -4 -5\") == \"0\"\nassert solution(\"-1 -2 -3 -4 -5\") == \"0\"\nassert solution(\"1 3 3 7 1 3 3 7 1 3 3 7\") == \"22\"\nassert solution(\"1 3 3 7 1 3 3 7 1 3 3 7\") == \"0\"\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 10\") == 0\nassert solution(\"12 10\") == 0\nassert solution(\"5 -2\") == 22\nassert solution(\"12 -3\") == 42\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, -2) == 22\nassert solution(12, -3) == 0\nassert solution(12, -5) == 42\nassert solution(0, -1) == 0\nassert solution(5, 1) == 22\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '42','something wrong'\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '22'\n\n\"\"\"\n\nclass Solution:\n    def beauty(self, a, x):\n        n = len(a)\n        if n == 0:\n            return 0\n        if n == 1:\n            if a[0] == -x:\n                return 1\n            else:\n                return 0\n\n        if x == 1:\n            return self.beauty(a[1:], -x)\n\n        if x == -1:\n            return self.beauty(a[:n-1], -x)\n\n        return self.beauty(a[n-1:], x-1)\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == str(5)\n\n\"\"\"\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3 4\"), \"2 3 4\"\nassert solution(\"2 3 4 5\"), \"5\"\nassert solution(\"2 3 4 6\"), \"6\"\nassert solution(\"2 3 4 5 1\"), \"1\""
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 5\n\nExample 1:\n\nInput\n2 3 2\n\nOutput\n2\n\nInput\n2 4 6\n\nOutput\n4\n\nInput\n1 10 5\n\nOutput\n10\n\n\n\n-----Note-----\n\nThere are a number of ways that you could write a multiplication table for a non-decreasing sequence of values. Here is a table that is fairly basic:\n\n1 2 3\n2 4 6\n\nThere are 2 ways to write a multiplication table that is of size k:\n\n2 4 6\n\n3 2 3\n\nk is 3.\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n\n1 \u2264 m \u2264 10^5\n\n1 \u2264 k \u2264 n*m\n\nK is in the range 1,2,3,4,5,6,7,8,9,10\n\nTime Limit: 40 ms\n\nSpace Limit: 20k\n\n\n-----Submissions-----\n\n1\n\"\"\"\nn, m, k = map(int,input().split())\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5'\n\n\"\"\""
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\n\nInput\n\n2 3 4\n\nOutput\n1\n\n\n\n-----Constraints-----\n1 \u2264 n, m \u2264 10^5\n0 \u2264 k < n\u00b7m\n\ne.g.\n\n\nin\n\n2 4\n\n1\n\nin\n\n3 5\n\n1\n\nin\n\n1 10\n\n1\n\nout\n\n\"\"\"\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"2 3 4\") == \"4\"\nassert solution(\"1 10 5\") == \"5\"\nassert solution(\"1 10 6\") == \"6\"\nassert solution(\"1 10 10\") == \"1\"\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 2), \"4\"\nassert solution(2, 4), \"2\"\nassert solution(1, 10), \"5\"\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\n\n\"\"\""
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n\n1 \u2264 n, m \u2264 5\u00b710^5\n0 \u2264 k \u2264 n\u00b7m\n\nsolution does not contain any characters other than characters:\n\nA \u201ca\u201d is not a valid character for the multiplication table.\n\n\n-----Examples-----\nInput\n3 2 2\n\nOutput\n3\n\nInput\n2 3 4\n\nOutput\n6\n\"\"\""
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(7) == 5\nassert solution(21) == 7"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == 5\nassert solution(\"5\") == 5\nassert solution(\"6\") == 6\nassert solution(\"7\") == 7\nassert solution(\"3\") == 5\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(7) == 5\nassert solution(21) == 7\nassert solution(123456789101112131415161718192021222324252627282930313233343536) == 7\n\n\"\"\"\n\nfrom collections import deque\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(7) == 5\nassert solution(21) == 5\n\n\n-----Brute Force Search-----\n\nPython's built-in sequence does not support `solution(x)` because it does not support the comparison `x < 0` when x is a string. Therefore, you will try `solution(str)` instead.\n\nFor example, `solution(123)` will return `2`, because `123` is a valid string.\n\n\n-----Constraints-----\n0 < k < 10^5\n\n\n------Time Complexity------\nO(n) - n is the length of the sequence, which is the length of $1$-based index and $n$ is the length of $k$-th digit.\n\n\n------Worst Case Time Complexity------\nO(k) - k is the length of $k$-th digit.\n\n\n------Space Complexity------\nO(1) - N is the length of the sequence.\n\n\n-----Sample Input-----\n\nSample Input:\n\nInput\n\nSample Output:\n\n2\n\n\n-----Sample Output-----\n\n2\n\n\n------Time Complexity------\nO(1) - N is the length of $1$-based index and $n$ is the length of $k$-th digit.\n\n\n------Worst Case Time Complexity------\nO(k) - k is the length of $k$-th digit.\n\n\n------Space Complexity------\nO(1) - N is the length of $1$-based index and $n$ is the length of $k$-th digit.\n\n\n----Time complexity----\nO(n) - n is the length of the sequence, which is the length of $1$-based index and $n$ is the length of $k$-th digit.\n\n\n----Space Complexity----\nO(n) - n is the length of $1$-based index and $n$ is the length of $k$-th digit.\n\n\"\"\"\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(7) == 5\nassert solution(21) == 7\nassert solution(\"1,3,0,4\") == \"0\"\nassert solution(\"0,1,3,5,6,7\") == \"1\"\nassert solution(\"0,2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99\") == \"34\"\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(7) == \"7\"\nassert solution(21) == \"21\"\nassert solution(123456789101112131415161718192021222324252627282930313233343536... ) == \"5\"\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n0 < $k \\le 10^{12}$\n\n-----Time Limit (Crazy)-----\nO(n)\n\n-----Space Limit (Crazy)-----\nO(1)\n'''\n\nimport math"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 26\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100,000, 0 \u2264 m \u2264 100,000, 0 \u2264 r \u2264 1000, 1 \u2264 s_i \u2264 1000\ns_i = s_1 + s_2\nb_i = b_1 + b_2\n0 < s_i < 100\n0 < b_i < 1000\n0 < m < n\n\n\"\"\"\nfrom typing import Callable, Iterator, Tuple, List, Dict\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"26\"\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '26'\nassert solution(input()) == '50'\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '26'\n\nOutput\n\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"26\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 26\n\nprint('Example 1:')\nprint('Input : ')\nprint('n = 3, m = 4, r = 11')\nprint('Output :')\nprint('26')\n\nprint('Example 2:')\nprint('Input : ')\nprint('n = 2, m = 2, r = 5')\nprint('Output :')\nprint('20')\n\nprint('Example 3:')\nprint('Input : ')\nprint('n = 3, m = 2, r = 4')\nprint('Output :')\nprint('26')\n\nprint('Example 4:')\nprint('Input : ')\nprint('n = 3, m = 4, r = 2')\nprint('Output :')\nprint('50')\n\nprint('Example 5:')\nprint('Input : ')\nprint('n = 3, m = 4, r = 1')\nprint('Output :')\nprint('2')\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, {1, 2, 5}) == 26, \"The code should return 26, as expected\"\nassert solution(2, {1, 2, 5}) == 5, \"The code should return 5, as expected\"\nassert solution(2, {1, 2, 5}) == 5, \"The code should return 5, as expected\"\nassert solution(4, {1, 2, 5}) == 10, \"The code should return 10, as expected\"\nassert solution(2, {1, 2, 5}) == 5, \"The code should return 5, as expected\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 4 11\", 2, 2, \"5\", \"4 2\", \"4 4\", \"5\") == \"26\"\nassert solution(\"2 2 50\", 2, 2, \"5\", \"4 2\", \"4 4\", \"5\") == \"50\"\nassert solution(\"2 2 50\", 2, 2, \"5\", \"4 2\", \"4 4\", \"5\") == \"50\"\nassert solution(\"2 2 50\", 2, 2, \"5\", \"4 2\", \"4 4\", \"5\") == \"50\"\nassert solution(\"2 2 50\", 2, 2, \"5\", \"4 2\", \"4 4\", \"5\") == \"50\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\", \"4\", \"11\"]) == \"26\"\nassert solution([\"2\", \"2\", \"5\", \"4\", \"4\", \"5\", \"5\", \"4\", \"5\"]) == \"26\"\nassert solution([\"2\", \"2\", \"4\", \"5\", \"4\", \"5\", \"5\", \"5\", \"5\"]) == \"52\"\nassert solution([\"3\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\"]) == \"8\"\nassert solution([\"4\", \"4\", \"4\", \"5\", \"4\", \"4\", \"4\", \"4\", \"4\"]) == \"8\"\n"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution\u0435"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"20\"\n\"\"\""
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == -1\nassert solution(25) == 20\nassert solution(2) == -1\nassert solution(0) == -1\n\n\n-----Learning-----\n\nThe following solution to this problem for the first test is pretty straightforward. \nIt can be converted into a Python solution in a different way.\n\n\n-----Constraints-----\n\n1 <= n <= 10^18\n\n[input] integer n\n\nA positive integer that is more than 1 million.\n\n[output] integer\n\n\n\n-----Constraints-----\n\nA valid tournament format is provided.\nThe format for each stage is described as a string of at least 4 digits and of at most 200 digits.\n\n\"\"\""
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"20\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"20\"\nassert solution(\"10\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"0\") == \"0\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '25'\nassert solution(stdin) == '20'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == -1\nassert solution(4) == 5\nassert solution(25) == 20\nassert solution(0) == -1\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('abacabca') == 8\nassert solution('abacabca') == 6\nassert solution('abacabca') == 1\nassert solution('abacabca') == 1\nassert solution('abacabca') == 17\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 27\n\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"123\") == 2\nassert solution(\"abc\") == 2\nassert solution(\"ab\") == 0\nassert solution(\"aaa\") == 1\nassert solution(\"abab\") == 1\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 26\nassert solution(stdin) == 17\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 8\nassert solution(input().upper()) == 8\nassert solution(input().lower()) == 8\nassert solution(input().strip().lower()) == 8\nassert solution(input().split(\" \")) == 8\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abacabac') == 8\nassert solution('abaccaba') == 6\nassert solution('abaccabca') == 17\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abacabac\") == 8\nassert solution(\"abacabac\") == 14\nassert solution(\"abacabca\") == 18\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 26\n\"\"\""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n3 7\n\nOutput\nYES\n\nInput\n100 99\n\nOutput\nNO\n\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 'YES'\nassert solution(input) == 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 3\") == \"YES\"\nassert solution(\"10 99 10 100 100 100\") == \"NO\"\n\"\"\"\nclass Solution:\n    def canMeasureWeight(self, weight: int, weightLeft: int, weightRight: int) -> bool:\n        s = str(weightLeft + weightRight)\n        l = s[0]\n        r = s[-1]\n        if len(s) % 2 == 1:\n            return l == r\n        else:\n            return l == r and s[1:-1] == s[0]"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 4 3 1 4 2 4 2 4 2 2 3 3 3 3 4 4 4 4 4 4 3\") == \"YES\"\nassert solution(\"100 99 1 1 9 1 9 9 1 1 9 99 1 9 9 9 9 99 99 99 99 1\") == \"NO\""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"99 99\") == \"NO\"\nassert solution(\"100 50\") == \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3\") == \"NO\"\nassert solution(\"1 3 4 5 6 7 9 10\") == \"YES\"\nassert solution(\"2 10\") == \"YES\"\nassert solution(\"2 3 5 3\") == \"YES\"\nassert solution(\"2 3 3 9 10 11 12 13 14 15\") == \"NO\""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 7\") == \"YES\"\nassert solution(\"100 99\") == \"YES\"\nassert solution(\"100 50\") == \"NO\"\nassert solution(\"0 0\") == \"NO\""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 5\") == \"YES\"\nassert solution(\"2 5\") == \"YES\"\nassert solution(\"5 1\") == \"NO\"\nassert solution(\"5 1\") == \"NO\""
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"No\"\nassert solution(\"4 1\") == \"No\"\nassert solution(\"1 2\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"10\") == \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 4 5 2 3 1\") == \"Yes\"\nassert solution(\"3 1 2 1 0\") == \"No\"\nassert solution(\"3 1 2 1 1\") == \"Yes\"\nassert solution(\"3 1 2 3\") == \"No\"\n\nInput:\n\n10\n2\n1 3 4 5 2 7 8 9 12\n\n\nOutput:\n\n2 3 4 5\n\nExplanation:\n\nThere are two substrings of sequence 2 that satisfy the conditions:\n\n- 2^{-1} \u2264 2^{-1} \u2264 2^{-1}\n- a_i \u2260 b_i for all i < k\n- a_i \u2264 b_i for all i < k\n\nFor example, if the sequence is 2 3 4 5. Then the substrings are:\n\n2 3 4 5\n\n2 3 4 5\n\n3 2 2 1 0\n\n3 2 1 3 0\n\n3 2 1 2 1\n\n3 2 1 1 0\n\n3 2 1 1 1\n\n3 2 1 1 1\n\n3 2 3 1 0\n\n3 2 1 1 1\n\n3 2 1 1 1\n\n3 2 3 1 0\n\n3 2 1 1 1\n\n3 2 1 1 1\n\n3 2 1 3 0\n\n3 2 1 3 0\n\n3 2 1 3 0\n\n3 2 1 3 0\n\n3 2 3 1 0\n\n3 2 3 1 0\n\n3 2 3 1 0\n\n3 2 3 1 0\n\n\n\n\"\"\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n\n\n-----Note-----\n\nSample 1:\n\n4^2 + 4^2 = 5 + 2 = 9\n\nSample 2:\n\n9^2 + 9^2 = 4 + 4 = 11\n\nSample 3:\n\n9^2 + 9^2 = 4 + 2 = 5\n\nSample 4:\n\n2^2 + 2^2 = 5 + 3 = 7\n\nSample 5:\n\n3^2 + 3^2 = 4 + 2 = 6\n\nSample 6:\n\n3^2 + 3^2 = 4 + 2 = 5\n\nSample 7:\n\n3^2 + 3^2 = 4 + 2 = 5\n\nSample 8:\n\n2^2 + 2^2 = 5 + 3 = 4\n\nSample 9:\n\n2^2 + 2^2 = 5 + 3 = 4\n\nSample 10:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 11:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 12:\n\n3^2 + 3^2 = 2 + 2 = 4\n\nSample 13:\n\n3^2 + 3^2 = 2 + 2 = 4\n\nSample 14:\n\n2^2 + 2^2 = 4 + 2 = 3\n\nSample 15:\n\n3^2 + 2^2 = 2 + 2 = 4\n\nSample 16:\n\n2^2 + 2^2 = 3 + 2 = 5\n\nSample 17:\n\n2^2 + 2^2 = 3 + 2 = 4\n\nSample 18:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 19:\n\n4^2 + 4^2 = 5 + 2 = 7\n\nSample 20:\n\n4^2 + 2^2 = 5 + 2 = 7\n\nSample 21:\n\n3^2 + 2^2 = 5 + 2 = 7\n\nSample 22:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 23:\n\n3^2 + 2^2 = 5 + 2 = 3\n\nSample 24:\n\n2^2 + 2^2 = 4 + 2 = 3\n\nSample 25:\n\n2^2 + 2^2 = 5 + 2 = 4\n\nSample 26:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 27:\n\n4^2 + 2^2 = 5 + 2 = 7\n\nSample 28:\n\n4^2 + 2^2 = 5 + 2 = 3\n\nSample 29:\n\n3^2 + 2^2 = 5 + 2 = 7\n\nSample 30:\n\n2^2 + 2^2 = 5 + 2 = 3\n\nSample 31:\n\n2^2 + 2^2 = 3 + 2 = 5\n\nSample 32:\n\n2^2 + 2^2 = 3 + 2 = 4\n\nSample 33:\n\n2^2 + 2^2 = 3 + 2 = 4\n\nSample 34:\n\n2^2 + 2^2 = 3 + 2 = 5\n\nSample 35:\n\n3^2 + 2^2 = 4 + 2 = 5\n\nSample 36:\n\n3^2 + 2^2 = 4 + 2 = 5\n\nSample 37:\n\n3^2 + 2^2 = 4 + 2 = 5\n\nSample 38:\n\n4^2 + 2^2 = 5 + 2 = 7\n\nSample 39:\n\n3^2 + 2^2 = 5 + 2 = 7\n\nSample 40:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 41:\n\n3^2 + 2^2 = 4 + 2 = 3\n\nSample 42:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 43:\n\n3^2 + 2^2 = 5 + 2 = 4\n\nSample 44:\n\n3^2 + 2^2 = 5 + 2 = 4\n\nSample 45:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 46:\n\n3^2 + 2^2 = 5 + 2 = 4\n\nSample 47:\n\n2^2 + 2^2 = 5 + 2 = 3\n\nSample 48:\n\n2^2 + 2^2 = 5 + 2 = 4\n\nSample 49:\n\n2^2 + 2^2 = 5 + 2 = 3\n\nSample 50:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 51:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 52:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 53:\n\n5^2 + 2^2 = 4 + 2 = 3\n\nSample 54:\n\n2^2 + 2^2 = 4 + 2 = 3\n\nSample 55:\n\n2^2 + 2^2 = 5 + 2 = 7\n\nSample 56:\n\n2^2 + 2^2 = 5 + 2 = 7\n\nSample 57:\n\n2^2 + 2^2 = 5 + 2 = 7\n\nSample 58:\n\n3^2 + 2^2 = 5 + 2 = 7\n\nSample 59:\n\n3^2 + 2^2 = 5 + 2 = 7\n\nSample 60:\n\n4^2 + 2^2 = 5 + 2 = 7\n\nSample 61:\n\n3^2 + 2^2 = 5 + 2 = 7\n\nSample 62:\n\n3^2 + 2^2 = 5 + 2 = 7\n\nSample 63:\n\n3^2 + 2^2 = 4 + 2"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inin) == \"Yes\"\nassert solution(inin) == \"Yes\"\n\n\n\nOutput:\n3\n-1 -1\n\nSample Input\n\n2\n4\n3 4\n4 4\n\nSample Output\n\nNo\n-1 -1\n\n\n\n\nInput:\n\nThe first line consists of two integers n and k (1 \u2264 n \u2264 10^18, 1 \u2264 k \u2264 10^5)\u00a0\u2014 the required sum and the length of the sequence.\n\n\nOutput:\n\nOutput \"No\" (without quotes) in a single line if there does not exist such sequence. Otherwise, output \"Yes\" (without quotes) in the first line, and k numbers separated by space in the second line\u00a0\u2014 the required sequence.\n\nIt is guaranteed that the integers in the answer sequence fit the range [ - 10^18, 10^18].\n\n\n\nInput:\n\nThe first line consists of two integers n and k (1 \u2264 n \u2264 10^18, 1 \u2264 k \u2264 10^5)\u00a0\u2014 the required sum and the length of the sequence.\n\n\nOutput:\n\nOutput \"No\" (without quotes) in a single line if there does not exist such sequence. Otherwise, output \"Yes\" (without quotes) in the first line, and k numbers separated by space in the second line\u00a0\u2014 the required sequence.\n\nIt is guaranteed that the integers in the answer sequence fit the range [ - 10^18, 10^18].\n\n\n\nExample 1:\n\nInput\n\n2\n1\n1\n1\n2\n2\n\nOutput\n\nNo\n\nExplanation\n\nThere are no such sequence which has the sum of 2 and 2^2 + 1 = 1.\n\nHence, the function return No in the second line.\n\nExample 2:\n\nInput\n\n2\n2\n2\n2\n2\n2\n2\n2\n\nOutput\n\nYes\n-1 -1\n\nExplanation\n\nThere are two such sequences which have the sum of 2 and 2^2 + 1 = 1.\n\nThe first of them is bigger than the second.\n\nThis case happens when a number greater than 1 is seen before the second one in the sequence.\n\nHence, the function return Yes in the first line and the second one.\n\"\"\""
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin: str) == \"Yes\"\n    # return 'Yes' if solution(\n    # stdin: str) == 'Yes' else 'No'\n    # return 'No' if solution(\n    # stdin: str) == 'No' else 'Yes'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == \"Yes\"\nassert solution(\"2 4 4 2\") == \"Yes\"\nassert solution(\"1 1 2\") == \"No\"\n\n\n-----Constraints-----\n1 <= n, k <= 10^5\n\n1 <= stdin.length <= 1000\n\n\n-----Example 1 (Case #1)-----\n\nInput\n2\n3\n4\n5\n\nOutput\nNo\n\nExample 2 (Case #2)\n\nInput\n5\n2\n3\n4\n6\n\nOutput\nYes\n\nExample 3 (Case #3)\n\nInput\n5\n1 1 2 2 3\n4\n1 1 2 2 3 4\n5\n\nOutput\nYes\n\nExample 4 (Case #4)\n\nInput\n10\n2\n3\n4\n5\n\nOutput\nNo\n\nExample 5 (Case #5)\n\nInput\n4\n2\n3\n4\n5\n\nOutput\nNo\n\nExample 6 (Case #6)\n\nInput\n10\n1 2 3 4 5 6 7 8 9 10\n\nOutput\nYes\n\nExample 7 (Case #7)\n\nInput\n3\n1 2 3 4\n\nOutput\nNo\n\n\n-----Constraints-----\n\n1 <= n <= 2^50\n\n1 <= stdin.length <= 100\n\n\n-----Constraints-----\n\n-10^6 <= a[i] <= 10^6\n-10^6 <= b[i] <= 10^6\n\n-10^6 <= a[i] <= 10^6\n-10^6 <= b[i] <= 10^6\n\n\n-----Sample-----\n\nSample 1:\n\nInput\n3\n3 2 1\n\nOutput\nNo\n\nSample 2:\n\nInput\n3\n2 2\n\nOutput\nNo\n\nSample 3:\n\nInput\n3\n0 0 0\n\nOutput\nNo\n\nSample 4:\n\nInput\n2\n0 1\n\nOutput\nNo\n\nSample 5:\n\nInput\n2\n0 1\n\nOutput\nNo\n\nSample 6:\n\nInput\n1\n0 1\n\nOutput\nYes\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(in_1: str, in_2: str, in_3: str, in_4: str) == \"4\"\nassert solution(in_1: str, in_2: str, in_3: str, in_4: str) == \"6\"\nassert solution(in_1: str, in_2: str, in_3: str, in_4: str) == \"12\"\nassert solution(in_1: str, in_2: str, in_3: str, in_4: str) == \"8\"\nassert solution(in_1: str, in_2: str, in_3: str, in_4: str) == \"10\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"4\"\nassert solution(\"4 3\") == \"6\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2 7\") == \"5\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == 3\nassert solution(\"4 8\") == 4\nassert solution(\"4 7\") == 6\nassert solution(\"10 2\") == 7\nassert solution(\"1 2\") == 2\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n\nclass Solution:\n    def champagne_fall(self, n: int, t: float) -> float:\n        pass\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\""
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"17\"\nassert solution(stdin) == \"34\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1) == 0\nassert solution(4, 2) == 6\nassert solution(8, 2) == 16\nassert solution(10, 2) == 65\nassert solution(12, 0) == 162\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Solution is not possible.\"\nassert \"4\" == solution(\"5\"), \"Wrong answer.\"\nassert \"6\" == solution(\"1\"), \"Wrong answer.\"\nassert \"4\" == solution(\"4\"), \"Wrong answer.\"\nassert \"4\" == solution(\"4 8\"), \"Wrong answer.\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3 4\", \"5 5\"]) == \"4\"\nassert solution([\"3 3\", \"3 4\", \"4 3\", \"3 4\", \"4 3\", \"5 4\", \"5 3\", \"3 2\"]) == \"5\"\nassert solution([\"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == \"1\"\n\nassert solution([\"1 3\", \"2 3\", \"3 3\", \"4 3\", \"5 3\", \"6 3\", \"7 3\", \"8 3\", \"9 3\", \"10 3\", \"11 3\", \"12 3\", \"13 3\", \"14 3\", \"15 3\", \"16 3\", \"17 3\", \"18 3\", \"19 3\", \"20 3\", \"21 3\", \"22 3\", \"23 3\", \"24 3\", \"25 3\", \"26 3\", \"27 3\", \"28 3\", \"29 3\", \"30 3\", \"31 3\", \"32 3\", \"33 3\", \"34 3\", \"35 3\", \"36 3\", \"37 3\", \"38 3\", \"39 3\", \"40 3\", \"41 3\", \"42 3\", \"43 3\", \"44 3\", \"45 3\", \"46 3\", \"47 3\", \"48 3\", \"49 3\", \"50 3\", \"51 3\", \"52 3\", \"53 3\", \"54 3\", \"55 3\", \"56 3\", \"57 3\", \"58 3\", \"59 3\", \"60 3\", \"61 3\", \"62 3\", \"63 3\", \"64 3\", \"65 3\", \"66 3\", \"67 3\", \"68 3\", \"69 3\", \"70 3\", \"71 3\", \"72 3\", \"73 3\", \"74 3\", \"75 3\", \"76 3\", \"77 3\", \"78 3\", \"79 3\", \"80 3\", \"81 3\", \"82 3\", \"83 3\", \"84 3\", \"85 3\", \"86 3\", \"87 3\", \"88 3\", \"89 3\", \"90 3\", \"91 3\", \"92 3\", \"93 3\", \"94 3\", \"95 3\", \"96 3\", \"97 3\", \"98 3\", \"99 3\", \"100 3\", \"101 3\", \"102 3\", \"103 3\", \"104 3\", \"105 3\", \"106 3\", \"107 3\", \"108 3\", \"109 3\", \"110 3\", \"111 3\", \"112 3\", \"113 3\", \"114 3\", \"115 3\", \"116 3\", \"117 3\", \"118 3\", \"119 3\", \"120 3\", \"121 3\", \"122 3\", \"123 3\", \"124 3\", \"125 3\", \"126 3\", \"127 3\", \"128 3\", \"129 3\", \"130 3\", \"131 3\", \"132 3\", \"133 3\", \"134 3\", \"135 3\", \"136 3\", \"137 3\", \"138 3\", \"139 3\", \"140 3\", \"141 3\", \"142 3\", \"143 3\", \"144 3\", \"145 3\", \"146 3\", \"147 3\", \"148 3\", \"149 3\", \"150 3\", \"151 3\", \"152 3\", \"153 3\", \"154 3\", \"155 3\", \"156 3\", \"157 3\", \"158 3\", \"159 3\", \"160 3\", \"161 3\", \"162 3\", \"163 3\", \"164 3\", \"165 3\", \"166 3\", \"167 3\", \"168 3\", \"169 3\", \"170 3\", \"171 3\", \"172 3\", \"173 3\", \"174 3\", \"175 3\", \"176 3\", \"177 3\", \"178 3\", \"179 3\", \"180 3\", \"181 3\", \"182 3\", \"183 3\", \"184 3\", \"185 3\", \"186 3\", \"187 3\", \"188 3\", \"189 3\", \"190 3\", \"191 3\", \"192 3\", \"193 3\", \"194 3\", \"195 3\", \"196 3\", \"197 3\", \"198 3\", \"199 3\", \"200 3\", \"201 3\", \"202 3\", \"203 3\", \"204 3\", \"205 3\", \"206 3\", \"207 3\", \"208 3\", \"209 3\", \"210 3\", \"211 3\", \"212 3\", \"213 3\", \"214 3\", \"215 3\", \"216 3\", \"217 3\", \"218 3\", \"219 3\", \"220 3\", \"221 3\", \"222 3\", \"223 3\", \"224 3\", \"225 3\", \"226 3\", \"227 3\", \"228 3\", \"229 3\", \"230 3\", \"231 3\", \"232 3\", \"233 3\", \"234 3\", \"235 3\", \"236 3\", \"237 3\", \"238 3\", \"239 3\", \"240 3\", \"241 3\", \"242 3\", \"243 3\", \"244 3\", \"245 3\", \"246 3\", \"247 3\", \"248 3\", \"249 3\", \"250 3\", \"251 3\", \"252 3\", \"253 3\", \"254 3\", \"255 3\", \"256 3\", \"257 3\", \"258 3\", \"259 3\", \"260 3\", \"261 3\", \"262 3\", \"263 3\", \"264 3\", \"265 3\", \"266 3\", \"267 3\", \"268 3\", \"269 3\", \"270 3\", \"271 3\", \"272 3\", \"273 3\", \"274 3\", \"275 3\", \"276 3\", \"277 3\", \"278 3\", \"279 3\", \"280 3\", \"281 3\", \"282 3\", \"283 3\", \"284 3\", \"285 3\", \"286 3\", \"287 3\", \"288 3\", \"289 3\", \"290 3\", \"291 3\", \"292 3\", \"293 3\", \"294 3\", \"295 3\", \"296 3\", \"297 3\", \"298 3\", \"299 3\", \"300 3\", \"301 3\", \"302 3\", \"303 3\", \"304 3\", \"305 3\", \"306 3\", \"307 3\", \"308 3\", \"309 3\", \"310 3\", \"311 3\", \"312 3\", \"313 3\", \"314 3\", \"315 3\", \"316 3\", \"317 3\", \"318 3\", \"319 3\", \"320 3\", \"321 3\", \"322 3\", \"323 3\", \"324 3\", \"325 3\", \"326 3\", \"327 3\", \"328 3\", \"329 3\", \"330 3\", \"331 3\", \"332 3\", \"333 3\", \"334 3\", \"335 3\", \"336 3\", \"337 3\", \"338 3\", \"339 3\", \"340 3\", \"341 3\", \"342 3\", \"343 3\", \"344 3\", \"345 3\", \"346 3\", \"347 3\", \"348 3\", \"349 3\", \"350 3\", \"351 3\", \"352 3\", \"353 3\", \"354 3\", \"355 3\", \"356 3\", \"357 3\", \"358 3\", \"359 3\", \"360 3\", \"361 3\", \"362 3\", \"363 3\", \"364 3\", \"365 3\", \"366 3\", \"367 3\", \"368 3\", \"369 3\", \"370 3\", \"371"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 1') == '-1'\nassert solution('1 1') == '-1'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\nassert solution('1 1') == '0'\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\" or solution(stdin) == \"-1\"\n\n@lc regular\n\n@lc codestyle\nclass Solution:\n    def erase(self,n,a,b,c,d):\n        pass\n    \n    def isRectangleRectangle(self, a, b, c, d, r):\n        pass\n\n\n'''\n\n'''"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"2\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"-1\"\nassert solution(\n    \"2\"\n) == \"1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    line: str,\n    vertices: List[List[int]]\n) == -1, \"Vertices do not appear in the initial rectangle\"\nassert solution(\n    line: str,\n    vertices: List[List[int]]\n) == -1, \"Vertices do not appear in the initial rectangle\"\nassert solution(\n    line: str,\n    vertices: List[List[int]]\n) == -1, \"Vertices do not appear in the initial rectangle\"\nassert solution(\n    line: str,\n    vertices: List[List[int]]\n) == 1, \"Vertices do not appear in the initial rectangle\"\nassert solution(\n    line: str,\n    vertices: List[List[int]]\n) == 1, \"Vertices do not appear in the initial rectangle\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '0'"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\\n0 0\") == \"1\"\nassert solution(\"2\\n1 1\") == \"1\"\nassert solution(\"2\\n1 1\\n0 0\") == \"1\"\nassert solution(\"2\\n1 1\\n0 0\\n0 1\") == \"1\"\nassert solution(\"2\\n1 1\\n0 0\\n0 1\\n0 0\") == \"1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\n\n\"\"\"\n\nfrom collections import deque\n\nn, x, y = map(int, input().split())\nassert n > 1\nassert (x ** 2 + y ** 2) % 10000 == 0\n\nq = deque()\n\nfor i in range(n):\n    x, y = map(int, input().split())\n    q.append((x, y))\n    \nwhile len(q):\n    x, y = q.popleft()\n\n    if y * (x + 1) < 1000 and (x + 1) * (y + 1) < 1000:\n        q.append((x + 1, y))\n        q.append((x, y + 1))\n        \nprint(1 if y * (x + 1) < 1000 else -1)"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Solution must be true.\"\n\"\"\""
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n\n-----My Solution-----"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\n-----Expected output-----\n\nprint(solution(stdin))\n\n-----Sample Input-----\n\n5\n3\n1\n\nOutput\n2\n\nExplanation\n\nInput\nInput is valid. So the input consists of the sequence [5,3,1]\n\nInput is invalid. So the input consists of the sequence [3,1,2]\n\nInput is valid. So the input consists of the sequence [2,3,1]\n\n-----Sample Output-----\n\n3\n\n-----Sample Explanation-----\n\nInput:\nInput is valid.\nInput consists of the sequence [5,3,1].\n\nOutput:\nOutput consists of the sequence [3,1,2].\n\nExplanation:\n\nInput is valid.\nInput consists of the sequence [3,1,2].\n\nOutput:\nOutput consists of the sequence [2,3,1].\n\nExplanation:\n\nInput is valid.\nInput consists of the sequence [2,3,1].\n\nOutput:\nOutput consists of the sequence [1,3,2].\n\n-----Sample Rules-----\n\nRules for the fifth example:\n\nFor example, consider [5,3,1] as the sequence [3,1,2].\n\nIn this sequence, it's not valid.\n\nIn this sequence, it's valid.\n\nThe first frame's length is 5, but the second frame's length is 3 and therefore the first frame's length is 2.\n\nIn this sequence, it's valid.\n\nThe first frame's length is 5, and the second frame's length is 3.\n\nIn this sequence, it's not valid.\n\nThe first frame's length is 2, and the second frame's length is 3.\n\nIn this sequence, it's valid.\n\nThe first frame's length is 5, and the second frame's length is 3.\n\nIn this sequence, it's valid.\n\nThe first frame's length is 2, and the second frame's length is 3.\n\nIn this sequence, it's valid.\n\nNote:\n\n1 <= stdin.length <= 2000\n1 <= n <= 100\n1 <= a, b <= 100\n\n-----Constraints-----\n\n1 <= stdin.length <= 100000\n1 <= stdin.length <= 100\n1 <= stdin.length <= 10^5\n\nNOTE:\n\nUsing the division operator, for example 1/2 = 0.5, the answer is 2/3 = 1.5, or 1/2 = 0.25.\n\n\n-----Time Limit-----\n\nO(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O(N)O("
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\""
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"6\"\n\n\n\n\"\"\""
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 20\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\n\"\"\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6) == \"YES\"\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('01010') == 'NO'\nassert solution('010101') == 'YES'\nassert solution('0100101') == 'YES'\nassert solution('0101100') == 'YES'\nassert solution('0110001') == 'YES'\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0, [5, 6, 1, 2, 3, 4]) == \"YES\"\nassert solution(1, [5, 6, 1, 2, 3, 4]) == \"NO\"\nassert solution(2, [5, 6, 1, 2, 3, 4]) == \"YES\"\n\n\n\n[\uacb0\uacfc]\n\n6\n\n\n\n\n\n[\uc81c\ud55c\uc0ac\ud56d]\n\n1 \u2264 n \u2264 100,000\n\n\n\n[\uc81c\ud55c\uc0ac\ud56d]\n\n0 \u2264 a_i \u2264 200000\n\n\n\n[\uc608\uc81c \ucd9c\ub825]\n\nYES\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"NO\"\n\nassert solution(\"1 1 1 1 1 0\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"NO\"\n\nassert solution(\"1 2 3 4 5 6\") == \"YES\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '18'\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1f 4a 5e 6f\") == \"1\"\nassert solution(\n    \"2d 9d 3d 5d 2d\") == \"10\"\nassert solution(\n    \"4a 5a 6a 7a\") == \"11\"\nassert solution(\n    \"1d 9d 3d 5d 1d\") == \"12\"\nassert solution(\n    \"1d 9d 3d 5d 3d\") == \"14\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"10\"\nassert solution(input) == \"18\"\nassert solution(input) == \"13\"\nassert solution(input) == \"12\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1f\") == \"1\"\nassert solution(\"2d\") == \"10\"\nassert solution(\"4a\") == \"11\"\nassert solution(\"5e\") == \"18\"\nassert solution(\"5f\") == \"0\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1f) == 1\nassert solution(2d) == 10\nassert solution(4a) == 11\nassert solution(5e) == 18"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"11\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\n1f\n2d\n4a\n5e\n6f\n7d\n8d\n9e\n10e\n11f\n12d\n13e\n14f\n15e\n16d\n17e\n18f\n19d\n20e\n21f\n22d\n23e\n24f\n25d\n26e\n27f\n28d\n29e\n30e\n31f\n32d\n33e\n34f\n35d\n36e\n37f\n38d\n39e\n40f\n41d\n42e\n43f\n44d\n45e\n46f\n47d\n48e\n49f\n50d\n51e\n52f\n53d\n54e\n55f\n56d\n57e\n58f\n59d\n60e\n61f\n62d\n63e\n64f\n65d\n66e\n67f\n68d\n69e\n70e\n71f\n72d\n73e\n74d\n75e\n76f\n77d\n78d\n79e\n80f\n81d\n82d\n83d\n84d\n85e\n86d\n87e\n88d\n89d\n90e\n91f\n92d\n93e\n94d\n95e\n96d\n97f\n98d\n99e\n100d\n101e\n102f\n103d\n104d\n105d\n106e\n107d\n108d\n109f\n110d\n111e\n112d\n113d\n114d\n115d\n116d\n117d\n118d\n119d\n120d\n121d\n122d\n123d\n124d\n125d\n126d\n127d\n128d\n129d\n130d\n131d\n132d\n133d\n134d\n135d\n136d\n137d\n138d\n139d\n140d\n141d\n142d\n143d\n144d\n145d\n146d\n147d\n148d\n149d\n150d\n151d\n152d\n153d\n154d\n155d\n156d\n157d\n158d\n159d\n160d\n161d\n162d\n163d\n164d\n165d\n166d\n167d\n168d\n169d\n170d\n171d\n172d\n173d\n174d\n175d\n176d\n177d\n178d\n179d\n180d\n181d\n182d\n183d\n184d\n185d\n186d\n187d\n188d\n189d\n190d\n191d\n192d\n193d\n194d\n195d\n196d\n197d\n198d\n199d\n200d\n201d\n202d\n203d\n204d\n205d\n206d\n207d\n208d\n209d\n210d\n211d\n212d\n213d\n214d\n215d\n216d\n217d\n218d\n219d\n220d\n221d\n222d\n223d\n224d\n225d\n226d\n227d\n228d\n229d\n230d\n231d\n232d\n233d\n234d\n235d\n236d\n237d\n238d\n239d\n240d\n241d\n242d\n243d\n244d\n245d\n246d\n247d\n248d\n249d\n250d\n251d\n252d\n253d\n254d\n255d\n256d\n257d\n258d\n259d\n260d\n261d\n262d\n263d\n264d\n265d\n266d\n267d\n268d\n269d\n270d\n271d\n272d\n273d\n274d\n275d\n276d\n277d\n278d\n279d\n280d\n281d\n282d\n283d\n284d\n285d\n286d\n287d\n288d\n289d\n290d\n291d\n292d\n293d\n294d\n295d\n296d\n297d\n298d\n299d\n300d\n301d\n302d\n303d\n304d\n305d\n306d\n307d\n308d\n309d\n310d\n311d\n312d\n313d\n314d\n315d\n316d\n317d\n318d\n319d\n320d\n321d\n322d\n323d\n324d\n325d\n326d\n327d\n328d\n329d\n330d\n331d\n332d\n333d\n334d\n335d\n336d\n337d\n338d\n339d\n340d\n341d\n342d\n343d\n344d\n345d\n346d\n347d\n348d\n349d\n350d\n351d\n352d\n353d\n354d\n355d\n356d\n357d\n358d\n359d\n360d\n361d\n362d\n363d\n364d\n365d\n366d\n367d\n368d\n369d\n370d\n371d\n372d\n373d\n374d\n375d\n376d\n377d\n378d\n379d\n380d\n381d\n382d\n383d\n384d\n385d\n386d\n387d\n388d\n389d\n390d\n391d\n392d\n393d\n394d\n395d\n396d\n397d\n398d\n399d\n400d\n401d\n402d\n403d\n404d\n405d\n406d\n407d\n408d\n409d\n410d\n411d\n412d\n413d\n414d\n415d\n416d\n417d\n418d\n419d\n420d\n421d\n422d\n423d\n424d\n425d\n426d\n427d\n428d\n429d\n430d\n431d\n432d\n433d\n434d\n435d\n436d\n437d\n438d\n439d\n440d\n441d\n442d\n443d\n444d\n445d\n446d\n447d\n448d\n449d\n450d\n451d\n452d\n453d"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '10'\n\nassert solution(stdin) == '18'\n\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"=\", \"Should return: '='\"\nassert solution(\"1 3\") == \">\", \"Should return: '>'\"\nassert solution(\"4 7\") == \"=\", \"Should return: '='\"\nassert solution(\"16 2\") == \">\", \"Should return: '>'\"\nassert solution(\"FF 4007 A_{16}\") == \">\", \"Should return: '>'\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"=\", \"Expected '=', but got '{}' instead.\".format(solution(input))\nassert solution(stdin) == \">\", \"Expected '>', but got '{}' instead.\".format(solution(stdin))\nassert solution(stdin) == \"<\", \"Expected '<', but got '{}' instead.\".format(solution(stdin))"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \">=<\"\nassert solution(stdin) == \">=<\"\nassert solution(stdin) == \"=\"\nassert solution(stdin) == \"=\"\nassert solution(stdin) == \"<\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0<X<Y\") == \"=\", \"X < Y\"\nassert solution(\"1<X<Y\") == \">=\", \"X > Y\"\nassert solution(\"2<X<Y\") == \"<\", \"X < Y\"\nassert solution(\"3<X<Y\") == \">=\", \"X > Y\"\nassert solution(\"4<X<Y\") == \"=\", \"X < Y\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"=\", \"wrong answer\"\nassert solution(\"7 16\") == \">\", \"wrong answer\"\nassert solution(\"7 16\") == \">\", \"wrong answer\"\nassert solution(\"7 16\") == \">\", \"wrong answer\"\nassert solution(\"7 16\") == \">\", \"wrong answer\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '<'\n\nassert solution(stdin) == '='\n\nassert solution(stdin) == '>'\n\nassert solution(stdin) == '='\n\nassert solution(stdin) == '>'"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3_2\") == \"=\", \"Should equal to '='\"\nassert solution(\"1_5_3\") == \">\", \"Should >=\"\nassert solution(\"7_1\") == \"<\", \"Should <\"\nassert solution(\"1_2_1\") == \">\", \"Should >=\"\nassert solution(\"1_0\") == \"<\", \"Should <\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"=\", \"The solution should be '='\"\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= b_{x} <= b_{y} <= 10^9\nb_{x}!=b_{y}\n1 <= x_i <= b_{x}\n1 <= y_i <= b_{y}\n0 <= m <= 1000\n\nConstraints are balanced.\n\n\"\"\"\nimport math"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 3\") == \"=\", \"Error\"\nassert solution(\"7 16\") == \">\", \"Error\"\nassert solution(\"7 16\") == \"<\", \"Error\"\nassert solution(\"7 16\") == \"<=\", \"Error\"\nassert solution(\"7 16\") == \"=\", \"Error\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 5 2\") == \"=\", \"1 0 2\"\nassert solution(\"5 7\") == \">\", \"1 0 2\"\nassert solution(\"6 6\") == \"=\", \"1 0 2\"\nassert solution(\"7 16\") == \"<\", \"1 0 2\"\nassert solution(\"7 9\") == \"<\", \"1 0 2\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"BitLGM\"\n\nassert solution(stdin) == \"BitAryo\"\n\nassert solution(stdin) == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"BitLGM\"\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Unable to determine winner.\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1 1\") == \"BitLGM\"\nassert solution(\"1 1 2 1\") == \"BitAryo\"\nassert solution(\"1 3 1 2\") == \"BitLGM\"\nassert solution(\"1 2 1 1\") == \"BitLGM\"\nassert solution(\"1 1 1 1 1\") == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 4 3\"), \"BitLGM\"\nassert solution(\"2 4 3\"), \"BitLGM\"\nassert solution(\"2 4 3\"), \"BitLGM\"\nassert solution(\"1 1 1\"), \"BitLGM\"\nassert solution(\"1 1 0\"), \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, [2, 1]) == \"BitLGM\"\nassert solution(2, [1, 2]) == \"BitLGM\"\nassert solution(3, [1, 2, 1]) == \"BitAryo\"\nassert solution(3, [1, 2, 2]) == \"BitLGM\"\nassert solution(3, [1, 3, 2]) == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"BitLGM\"\nassert solution(stdin) == \"BitAryo\"\n\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"BitLGM\"\nassert solution(stdin) == \"BitAryo\"\nassert solution(stdin) == \"BitLGM\"\nassert solution(stdin) == \"BitAryo\"\nassert solution(stdin) == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"BitLGM\"\nassert solution(input()) == \"BitAryo\"\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"BitLGM\"\nassert solution(input()) == \"BitAryo\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 4\"\n    ) == 1\nassert solution(\n    \"6 2 8\"\n    ) == 3\nassert solution(\n    \"9 1 14\"\n    ) == 4\nassert solution(\n    \"3 6\"\n    ) == 1\nassert solution(\n    \"9 1 14\"\n    ) == 1\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 4\") == \"0\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 1 1 2\") == \"0\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4\") == \"4\"\nassert solution(\"3 6\") == \"3 4\"\nassert solution(\"3 9\") == \"1\"\nassert solution(\"3 14\") == \"1\"\nassert solution(\"3 17\") == \"0\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n1 <= n <= 10^4\n\n1 <= k <= 10^9\n\nAccepted\n295,173\nSubmissions\n341,639\nMemory Usage\n16 MB, less than 95.34% of Python3 online submissions for Number of Ways to Choose X and Y.\n\"\"\"\n\nclass Solution:\n    def solve(self, n: int, k: int) -> str:\n        return str(int(n**(1/2)) // k)"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 4\"\n) == \"1\"\nassert solution(\n    \"3 6\"\n) == \"3\"\nassert solution(\n    \"9 1 14\"\n) == \"3\"\nassert solution(\n    \"9 1 14\"\n) == \"1\"\nassert solution(\n    \"11 1 9\"\n) == \"4\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == 3\nassert solution(\"5 7\") == 2\nassert solution(\"5 3\") == 0\nassert solution(\"5 8\") == 1\nassert solution(\"5 1\") == 0\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"6 6\") == \"3 4\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"4 1\") == \"1 4\"\nassert solution(\"2 1 3\") == \"2 1\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aabb\") == \"NO\"\nassert solution(\"aacaab\") == \"YES\"\nassert solution(\"aabbbbbcaaabaa\") == \"NO\"\nassert solution(\"aaabbaabbbbbcaaabaa\") == \"NO\"\nassert solution(\"aaa\") == \"YES\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\n0123456789\\nabcdefghijklmnopqrstuvwxyz\\n\\\"\\\"\\\"\\\") == \"\"\nassert solution(\\\"\\\"\\\"\\\"\\n0123456789\\nabcdefghijklmnopqrstuvwxyz\\n\\\"\\\"\\\"\\\") == \"YES\"\n\nassert solution(\\\"\\\"\\\"\\\"\\n0123456789\\nabcdefghijklmnopqrstuvwxyz\\n\\\"\\\"\\\"\\\") == \"YES\"\nassert solution(\\\"\\\"\\\"\\\"\\n0123456789\\nabcdefghijklmnopqrstuvwxyz\\n\\\"\\\"\\\"\\\") == \"YES\"\nassert solution(\\\"\\\"\\\"\\\"\\n0123456789\\nabcdefghijklmnopqrstuvwxyz\\n\\\"\\\"\\\"\\\") == \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('aabb') == 'YES'\nassert solution('aacaab') == 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aabb\"), \"aabba\"\nassert solution(\"aaba\"), \"aab\"\nassert solution(\"aabbba\"), \"aabba\"\nassert solution(\"aabbbaa\"), \"aabba\"\nassert solution(\"aabbaab\"), \"aabbba\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 k \u2264 100\ns contains only letters in the Latin alphabet.\ns = \u201ca\u201d, \u201cb\u201d, \u201cc\u201d, \u201cd\u201d, \u201ce\u201d, \u201cf\u201d, \u201cg\u201d, \u201ch\u201d, \u201ci\u201d, \u201cj\u201d, \u201ck\u201d, \u201cl\u201d, \u201cm\u201d, \u201cn\u201d, \u201co\u201d, \u201cp\u201d, \u201cq\u201d, \u201cr\u201d, \u201cs\u201d, \u201ct\u201d, \u201cu\u201d, \u201cv\u201d, \u201cw\u201d, \u201cx\u201d, \u201cy\u201d, \u201cz\u201d.\ns = \"a\" or \"b\" or \"c\" or \"d\" or \"e\" or \"f\" or \"g\" or \"h\" or \"i\" or \"j\" or \"k\" or \"l\" or \"m\" or \"n\" or \"o\" or \"p\" or \"q\" or \"r\" or \"s\" or \"t\" or \"u\" or \"v\" or \"w\" or \"x\" or \"y\" or \"z\"\n\n'abc'\n'aab'\n'aac'\n'abcdef'\n'aabcdef'\n'abcde'\n'abcdefgh'\n'abcdefghij'\n'abcdefghijkl'\n'abcdefghijklmn'\n'abcdefghijklmnop'\n'abcdefghijklmnopq'\n'abcdefghijklmnopqr'\n'abcdefghijklmnopqrst'\n'abcdefghijklmnopqrstu'\n'abcdefghijklmnopqrstuv'\n'abcdefghijklmnopqrstuvw'\n'abcdefghijklmnopqrstuvwxy'\n'abcdefghijklmnopqrstuvwxyz'\n\n\uc785\ub825\n\n3 2\naabb\naac\nabcdef\naabcdef\naacdefgh\nabcdefghij\nabcdefghijkl\nabcdefghijklmn\nabcdefghijklmnop\nabcdefghijklmnopq\nabcdefghijklmnopqr\nabcdefghijklmnopqrst\nabcdefghijklmnopqrstu\nabcdefghijklmnopqrstuv\nabcdefghijklmnopqrstuvw\nabcdefghijklmnopqrstuvwxy\nabcdefghijklmnopqrstuvwxyz\n\n\ucd9c\ub825\n\nYES\n\"\"\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, 'abc') == 'NO'\nassert solution(6, 'abc') == 'YES'"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 k \u2264 100\n\nTime Limit: 1 second\n\n=======Solution=======\nEnter your code in the editor."
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\n- In the second example, we find out that both of the two color that are in the same color will give up, because we don't have to check every baloon.\n\n- In the third example, we have to find out, that in the first color, we can not get any baloon, because we can not get all his friends in the first color.\n\n- In the fourth example, we find out, that in the first color, we can not get any baloon, because we don't know the color of each friend.\n'''"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aabb\") == \"NO\"\nassert solution(\"aaab\") == \"YES\"\nassert solution(\"aaba\") == \"NO\"\nassert solution(\"aab\") == \"NO\"\nassert solution(\"aab\") == \"YES\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\",\"2\"]) == \"NO\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2, [3, 3, 1, 5, 5, 5, 6, 6]) == 2\nassert solution(3, [1, 2, 2, 3, 3]) == 3\nassert solution(9, [1, 2, 2, 3, 3, 4, 4]) == 3\nassert solution(9, [1, 2, 2, 3, 3, 4, 4, 5, 6]) == 6\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input()\n    ) == \"1\""
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3\",\"5\",\"6\",\"5\",\"4\",\"1\",\"2\",\"3\",\"4\"]) == \"3\"\nassert solution([\"9\"]) == \"0\"\nassert solution([\"3\"]) == \"3\"\nassert solution([\"1\"]) == \"0\"\nassert solution([\"1\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"9 9 3 5 7 6 2 2 6 3 3 2 1 4\") == \"1\"\nassert solution(\"9 9 3 5 7 6 2 2 6 3 3 2 1 4\") == \"2\"\nassert solution(\"9 9 3 5 7 6 2 2 6 3 3 2 1 4\") == \"3\"\nassert solution(\"9 9 3 5 7 6 2 2 6 3 3 2 1 4\") == \"3\"\nassert solution(\"9 9 3 5 7 6 2 2 6 3 3 2 1 4\") == \"3\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 3\n\n\"\"\""
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '0.5'\nassert solution(inp) == '0.75'\nassert solution(inp) == '0.75'\nassert solution(inp) == '0.7'\nassert solution(inp) == '0.7'\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3/10\"\nassert solution(stdin) == \"3/7\"\nassert solution(stdin) == \"3/14\"\nassert solution(stdin) == \"3/9\"\nassert solution(stdin) == \"1/1\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3/7\"\n\n-----Constraints-----\n\n1 \u2264 t \u2264 500\n1 \u2264 w \u2264 10^18\n1 \u2264 b \u2264 10^18\n\nTime Limit: 40 seconds\nSpace Limit: 50 megabytes\n\n-----Notes-----\n\nThe input is case-sensitive.\n\"\"\"\n\n\nimport random"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 3 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"3/7\"\nassert solution(\"5 4 6\") == \"1/3\"\nassert solution(\"5 3 4\") == \"0.5\"\nassert solution(\"5 3 5\") == \"1/6\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin = \"2 1 2\"\n)\nassert solution(\n    stdin = \"6 1 2\"\n)\nassert solution(\n    stdin = \"7 1 2\"\n)\nassert solution(\n    stdin = \"7 1 2\"\n)\nassert solution(\n    stdin = \"1 1 1\"\n)\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 3) == \"1/3\"\nassert solution(7, 2) == \"3/4\"\nassert solution(1, 2) == \"2/1\"\nassert solution(1, 4) == \"2/2\"\nassert solution(5, 6) == \"1/6\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3/10'\n\nassert solution(stdin) == '3/7'\n\nassert solution(stdin) == '3/4'\n\nassert solution(stdin) == '3/5'\n\nassert solution(stdin) == '3/6'"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3/7\"\n\nIn the second sample, Bolt will run when the racer's speed is higher than the longest W step, while will run when the racer's speed is lower than the longest B step. \n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"10 3 2\") == \"1/7\"\nassert solution(\"10 3 2\") == \"1/5\"\nassert solution(\"7 1 2\") == \"3/10\"\nassert solution(\"7 1 2\") == \"1/10\"\nassert solution
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3/10'\n\nassert solution(stdin) == '3/7'\n\nassert solution(stdin) == '3/1'\n\n------Test Cases-----\n\nInput\n10 3 2\n\nOutput\n3/10\n\nInput\n7 1 2\n\nOutput\n3/7\n\nInput\n7 1 2\n\nOutput\n3/7\n\nInput\n10 4 2\n\nOutput\n5/10\n\nInput\n10 3 2\n\nOutput\n1/10\n\nInput\n10 7 2\n\nOutput\n1/7\n\n------Examples-----\n\nInput\n10 3 2\n\nOutput\n3/10\n\nInput\n7 1 2\n\nOutput\n3/7\n\nInput\n10 4 2\n\nOutput\n5/10\n\nInput\n10 7 2\n\nOutput\n1/7\n\nInput\n10 1 2\n\nOutput\n1/1\n\n------Examples-----\n\nInput\n10 3 2\n\nOutput\n3/10\n\nInput\n10 5 2\n\nOutput\n3/5\n\nInput\n10 3 2\n\nOutput\n3/3\n\nInput\n10 4 1\n\nOutput\n2/10\n\nInput\n10 3 2\n\nOutput\n1/10\n\nInput\n10 5 2\n\nOutput\n3/5\n\n------Tests-----\n\nInput\n10 3 2\n\nOutput\n3/10\n\nInput\n10 7 2\n\nOutput\n3/7\n\nInput\n10 1 2\n\nOutput\n3/1\n\nInput\n10 5 2\n\nOutput\n3/5\n\nInput\n10 3 2\n\nOutput\n1/10\n\nInput\n10 7 2\n\nOutput\n1/7\n\n------Examples-----\n\nInput\n10 3 2\n\nOutput\n3/10\n\nInput\n10 7 2\n\nOutput\n3/7\n\nInput\n10 1 2\n\nOutput\n3/1\n\n------Tests-----\n\nInput\n10 3 2\n\nOutput\n3/10\n\nInput\n10 7 2\n\nOutput\n3/7\n\nInput\n10 1 2\n\nOutput\n3/1\n\n------Examples-----\n\nInput\n10 3 2\n\nOutput\n1/10\n\nInput\n10 7 2\n\nOutput\n1/7\n\nInput\n10 1 2\n\nOutput\n1/1\n\"\"\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"?\"\nassert solution(6) == \"0\"\n\n\"\"\""
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"?\""
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0,1,2,3,4) == \"??\"\n\nassert solution(3,1,2,3,4) == \"??\"\n\nassert solution(0,0,2,3,4) == \"??\""
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 7 0\") == \"?\"\nassert solution(\n    \"2 0 1\") == \"?\nassert solution(\n    \"0 0 1\") == \"0\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2 0') == '+', '1'\nassert solution('1 3 2 0') == '0', '0'\nassert solution('2 3 2 0') == '-', '-'\nassert solution('0 0 1 0 0 0 0 0 0') == '?', '?'\nassert solution('0 0 1 0 0 0 0 0 1') == '-', '?'"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"?\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 0 0\") == \"0\"\nassert solution(\"1 1 0\") == \"-\"\nassert solution(\"1 1 1\") == \"+\"\nassert solution(\"1 1 1 1\") == \"?\"\nassert solution(\"1 1 1 1 1\") == \"?\n\n\n-----Reminder-----\n\nIf you do not know how to solve this problem, you can get a hint at the valid range of input in the following manner. If the $x$ is the valid number, $y$ and $z$ is the valid number, you need to write a code that will print the result.\n\nNote that this code is based on the formula (x+y+z)%3 and you can find it in the below link.\n\nhttps://www.codeforces.com/problemset/problem/3747/B\n\n-----Reminder-----\n\nFor the first example, $x = 5, y = 2, z = 2$, the only possible result is \"?\", because there are two ways to upvote and downvote, and it is an unknown person.\n\nFor the second example, $x = 5, y = 2, z = 1$, the only possible result is \"0\", because there are two possible upvoting and downvotes.\n\nFor the third example, $x = 5, y = 1, z = 2$, the only possible result is \"?\", because there are two possible upvoting and downvotes.\n\nFor the fourth example, $x = 5, y = 0, z = 2$, the only possible result is \"0\", because there are two possible upvoting and downvotes.\n\n\n-----Included Code-----\n\nUse a dictionary to avoid re-calculating the dictionary everytime the function is called.\n\nLets assume that the dictionary is a combination of $x$ and $y$ with some prefix \"P\" (P is the prefix of $x$).\n\nNow we are only interested in the \"P\" prefix of $x$, $y$ and $z$:\n\nLets assume that $x^y^z$ is a valid string:\n\n$x^y^z$ is a valid string:\n\n$x^y^z$ is not a valid string:\n\n$x^y^z$ is not a valid string:\n\n$x^y^z$ is a valid string:\n\n$x^y^z$ is not a valid string:\n\n$x^y^z$ is not a valid string:\n\n$$$x^y^z$$$ is a valid string:\n\n$$$x^y^z$$$$ is a valid string:\n\n$$$x^y^z$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$$x^y^z$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ is a valid string:\n\n$$"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"?\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-\"\nassert solution(stdin) == \"+\"\nassert solution(stdin) == \"+\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 7, 0) == \"+\"\nassert solution(2, 0, 1) == \"?\"\nassert solution(0, 1, 1) == \"0\"\nassert solution(0, 1, 0) == \"?\"\nassert solution(0, 0, 0) == \"?\""
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2 0 1\", \"1 1 0\", \"0 0 1\"]) == \"0\"\nassert solution([\"1 1 0\", \"0 0 1\", \"0 0 1\"]) == \"-?\"\nassert solution([\"2 0 1\", \"1 1 0\", \"0 0 1\"]) == \"?\"\nassert solution([\"2 0 1\", \"1 1 0\", \"0 0 1\"]) == \"+\"\nassert solution([\"1 1 0\", \"0 0 1\", \"0 0 1\"]) == \"?\"\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n\nExplanation\nThe robot starts at $(0, 0)$ and moves to $(x, y)$. The given sequence is RULR.\nThe robot moves to $(x, y)$ and sees that it's impossible.\n\nThe robot end its path.\n\n\n------Example 1 (Implementation with memoization)-----\n\nclass Solution:\n    def dfs(self, x, y, visited, sequence):\n        self.sequence[x][y] = sequence\n        if not visited[x][y]:\n            visited[x][y] = 1\n            if x < len(sequence) - 1:\n                self.dfs(x + 1, y, visited, sequence)\n            if y < len(sequence[0]) - 1:\n                self.dfs(x, y + 1, visited, sequence)\n        return\n\n    def getSequence(self, x, y, sequence):\n        if self.sequence[x][y]!= -1:\n            return self.sequence[x][y]\n        visited = [[0 for _ in range(len(sequence[0]))] for _ in range(len(sequence))]\n        self.sequence[x][y] = 0\n        self.dfs(x, y, visited, sequence)\n        return self.sequence[x][y]\n\n\n    def minimumLength(self, n: int) -> int:\n        self.sequence = [[-1 for _ in range(n)] for _ in range(n)]\n        visited = [[0 for _ in range(n)] for _ in range(n)]\n        return self.getSequence(0, 0, self.sequence)\n\n\n------Example 2 (Implementation with memoization)-----\n\nimport sys\n\nclass Solution:\n    def minimumLength(self, n: int) -> int:\n        if n == 1:\n            return 0\n        self.dp = [0 for _ in range(n)]\n        self.dp[1] = 1\n        for i in range(2, n):\n            self.dp[i] = self.dp[i - 1] + self.dp[i - 2]\n        return self.dp[n - 1]\n\nSolution().minimumLength(1)\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n1 <= n <= 10^5\nx, y <= 10^9\n\n---Coding Rules---\n\nThe given line contains only digits, space, +, -, *, and/or.\n\nThe first line contains two integers $x$ and $y$ \u2014 the coordinates of the cell where the robot should end its path.\n\nInput\n3\n2 3\n6 7\n8 9\n\nOutput\n3\n\n------Sample-------\n3\n3 2 3\n6 5 1\n8 3 8\n7 6 4\n8 9 6\n\n------Sample-------\n3\n3 2 3\n6 7 1\n8 3 7\n7 6 5\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n\n------Sample-------\n3\n3 2 3\n6 7 1\n8 3 8\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n\n------Sample-------\n3\n3 2 3\n6 7 1\n8 3 7\n7 6 5\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n8 9 6\n7 6 4\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == -1\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\nassert solution(\"[-2 3]\") == -1\n\nInput\n5\nUUUU\n1 2\n\nOutput\n3\n\nInput\n4\nUUU\n1 1\n\nOutput\n0\n\nInput\n3\nUUUU\n100 100\n\nOutput\n-1\n\"\"\""
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"010010\") == \"3\"\nassert solution(\"010010\") == \"0\"\nassert solution(\"010010\") == \"1\"\nassert solution(\"010010\") == \"2\"\nassert solution(\"010010\") == \"3\"\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 6, \"Tests failed\"\n\"\"\"\nfrom math import factorial\nimport sys\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"100000000001001000001110111100011101001100101011110011010011011101110111001000110010111011010\"\n) == 7\nassert solution(\n    \"100000000001001000001110111100011101001100101011110011010011011101110111001000110010111011010\"\n) == -1\nassert solution(\n    \"100000000001001000001110111100011101001100101011110011010011011101110111001000110010111011010\"\n) == 0\nassert solution(\n    \"100000000001001000001110111100011101001100101011110011010011011101110111001000110010111011010\"\n) == 4\nassert solution(\n    \"100000000001001000001110111100011101001100101011110011010011011101110111001000110010111011010\"\n) == 11\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"solution is not defined\"\nassert solution(stdin), \"solution is not defined\"\nassert solution(stdin), \"solution is not defined\"\nassert solution(stdin), \"solution is not defined\"\nassert solution(stdin), \"solution is not defined\"\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"010010\", \"10\", \"0\") == 0, \"0\"\nassert solution(\"010010\", \"10\", \"1\") == -1\nassert solution(\"010010\", \"10\", \"2\") == -1\nassert solution(\"010010\", \"10\", \"3\") == 2\nassert solution(\"010010\", \"10\", \"4\") == 2\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('010010') == '0'\nassert solution('10101') == '-1'\nassert solution('001') == '0'\nassert solution('10') == '0'\nassert solution('101010010') == '-1'\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\nfrom itertools import permutations"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str) == '3'\n\n-----Be Careful-----\n\nIn the second test case, there is 1 good prefix of $t$: with length $28$ and $30$.\n\nWe can only take $30$ if there are $30$ occurrences of 0 in $s_i$;\nin other words, the total sum of $n$ doesn't exceed $10^5$.\n\nBut the sum of $30$ is smaller than $n$. In this case, we can't take $30$ if there are $30$ occurrences of 1 in $s_i$.\n\nConsider the following string:\n\n30-10\n101-01\n010-101\n0001-0001\n000100010001\n000101010101\n
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"30020 3\") == \"1\"\nassert solution(\"100 9\") == \"2\"\nassert solution(\"10203049 2\") == \"3\"\nassert solution(\"10203049 23\") == \"3\"\nassert solution(\"10203049 3\") == \"3\"\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5,3) == 4\nassert solution(10,2) == 3\nassert solution(10203049,2) == 2\n\n\n-----Constraints-----\n1 <= n <= 10^3\n1 <= k <= 9"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10000\") == \"100\"\nassert solution(\"1101\") == \"11\"\nassert solution(\"1111\") == \"1\"\nassert solution(\"0011\") == \"00\"\nassert solution(\"000\") == \"0\"\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(10203049) == 3\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '3'"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"100000000\") == \"1\"\nassert solution(\"10000000000\") == \"1\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n\nprint(\"Test passed\")"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\nassert solution(input()) == solution(input())\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"1 3 8 1 1\"\"\") == \"3 2 3\"\nassert solution(\"\"\"4 2 9 4 2\"\"\") == \"2 1 1\"\nassert solution(\"\"\"5 5 25 4 3\"\"\") == \"1 1 1\"\n\n\n\n\"\"\"\nInput\n1 3 8 1 1\n\nOutput\n3 2 3\n\"\"\"\nInput\nInput = sys.stdin.readline\n\nstdin = Input().rstrip().split()\n\nn, m, k = map(int, stdin)\nx = int(stdin.readline().rstrip())\ny = int(stdin.readline().rstrip())\n\nmax_num = 0\nmin_num
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3 2 3\"\nassert solution(input()) == \"1 1 1\"\nassert solution(input()) == \"1 1 1\"\nassert solution(input()) == \"1 1 1\"\nassert solution(input()) == \"1 1 1\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"\""
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1 3 8 1 1\"\n) == \"3 2 3\"\nassert solution(\n    \"4 2 9 4 2\"\n) == \"1 1 1\"\nassert solution(\n    \"5 5 25 4 3\"\n) == \"1 1 1\"\nassert solution(\n    \"100 100 1000000000000000000 100 100\"\n) == \"101010101010101 50505050505051 50505050505051\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"101010101010101\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 8, 1, 1) == 3, 'expected 3, got {}'.format(3)\nassert solution(4, 9, 1, 1) == 1, 'expected 1, got {}'.format(1)\nassert solution(5, 25, 4, 3) == 3, 'expected 3, got {}'.format(3)\nassert solution(100, 100, 100, 100) == 1010101010101015050505050505150505051, 'expected 1010101010101015050505050505150505051, got {}'.format(1010101010101015050505050505150505051)\nassert solution(100, 100, 100, 100) == 1001, 'expected 100, got {}'.format(1001)\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == ''\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Kuro\"\nassert solution(stdin) == \"Kuro\"\nassert solution(stdin) == \"Kuro\"\nassert solution(stdin) == \"Kuro\"\nassert solution(stdin) == \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Katie\" or \"Kuro\"\nassert solution(stdin) == \"Shiro\" or \"Karo\"\nassert solution(stdin) == \"Karo\" or \"Katie\"\nassert solution(stdin) == \"Shiro\" or \"Kuro\" or \"Katie\"\nassert solution(stdin) == \"Karo\" or \"Katie\" or \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"Katie\"\nassert solution(\"7\") == \"Kuro\"\nassert solution(\"1\") == \"Katie\"\nassert solution(\"15\") == \"Draw\"\nassert solution(\"threefriends\") == \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Katie'\nassert solution(stdin) == 'Kuro'\nassert solution(stdin) == 'Kuroo'"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 'Kuro'\nassert solution(7) == 'Draw'\nassert solution(1) == 'Kuro'\nassert solution(15) == 'Shiro'\nassert solution(3) == 'Katie'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Katie\"\nassert solution(stdin) == \"Kuro\"\nassert solution(stdin) == \"Kuro\"\nassert solution(stdin) == \"Kuro\"\nassert solution(stdin) == \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Katie\"\nassert solution(stdin) == \"Kuro\""
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\", \"1\"]) == \"3\"\nassert solution([\"6\", \"5\", \"1\", \"2\"]) == \"6\"\nassert solution([\"12\", \"12\", \"0\", \"4\"]) == \"0\""
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"15\"\n\n\n\n-----Constraints-----\n\n1 \u2264 c \u2264 1000,\n0 \u2264 a \u2264 1000,\n0 \u2264 v_0 \u2264 v_1 \u2264 1000,\n0 \u2264 l \u2264 v_0,\nl \u2264 v_1,\nl\u2265c.\n\nTime Limit: 40 min."
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\n\"\"\""
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '15'"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 11 10 5 4\") == 5\nassert solution(\"12 4 12 4 1\") == 1\nassert solution(\"15 1 100 0 0\") == 15\nassert solution(\"\") == 0\nassert solution(\"13 20\") == 0\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"10 5 4\", \"10 5 1\", \"10 2 1\"]) == \"3\"\n\nprint(solution([\"15\", \"1\", \"100\", \"0\", \"0\", \"0\", \"0\", \"0\"]))\n\nprint(solution([\"12\", \"12\", \"100\", \"0\", \"0\", \"0\", \"0\", \"0\"]))\n\nassert solution([\"12\", \"12\", \"100\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"3\"\n\nassert solution([\"15\", \"15\", \"100\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"3\"\n\n\n-----Code-----\n\nTest:\n\nTest:\n\nTest:\n\nTest:\n\nTest:\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '15'\nassert solution(stdin) == '15'\nassert solution(stdin) == '15'\nassert solution(stdin) == '15'\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\n\n\nExample 1:\n\nInput\n5 5 10 5 4\n\nOutput\n1\n\nInput\n12 4 12 4 1\n\nOutput\n3\n\nInput\n15 1 100 0 0\n\nOutput\n15\n\"\"\"\n\nimport sys"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '15'"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(27) == 3\nassert solution(11) == 5\nassert solution(111211) == 6\nassert solution(12311) == 5\nassert solution(1) == 1\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 1\nassert solution(2) == 3\nassert solution(3) == 5\nassert solution(4) == 11\nassert solution(5) == 11\n\n\n-----Constraints-----\n1 <= stdin.length <= 200\n1 <= stdin[i] <= 10^9\n\n\n-----User Inputs-----\n\n1\n\n2\n\n-----Solution-----\n\n3\n1 3 5 11 11\n3\n\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3 5 11 11\n3\n1 3"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(27) == 3\nassert solution(53) == 5\nassert solution(0) == 1\nassert solution(1) == 1\nassert solution(5) == 11\n\n\n______________________________________________________________________________________________________________________________________________________________\nhttps://practice.geeksforgeeks.org/problems/sudoku-solution-5434417/1\nhttps://practice.geeksforgeeks.org/problems/sudoku-solution-821369/2"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(36) == 3\nassert solution(39) == 3\nassert solution(4) == 1\nassert solution(19) == 2\nassert solution(6) == 5\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(27) == 3\nassert solution(11) == 5\nassert solution(11) == 11\nassert solution(123) == 11\n\n\n\n-----Constraints-----\n\n0 \u2264 stdin.length \u2264 10^4\n\n\n-----Time complexity-----\n\nTime complexity of this program is O(n*3^k), where n is the number of numbers in the input.\n\nTime complexity of solution function is O(k), where k is the number of unique numbers.\n\n\n\n-----Space complexity-----\n\nThere are no space in this program, only a constant number of space.\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 3\nassert solution(7) == 6\nassert solution(2) == 2\nassert solution(9) == 6\nassert solution(10) == 5\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(27) == 3\nassert solution(11) == 5\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(11) == 3\nassert solution(25) == 1\nassert solution(26) == 1\nassert solution(45) == 4\nassert solution(25) == 1\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(45) == 7\nassert solution(64) == 28\nassert solution(52) == 4\nassert solution(23) == 2\nassert solution(99) == 2\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(27) == 3, \"expected 3\"\nassert solution(28) == 4, \"expected 4\"\nassert solution(29) == 3, \"expected 3\"\nassert solution(36) == 2, \"expected 2\"\nassert solution(47) == 1, \"expected 1\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(__doc__) == 'YES'"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('*..*..*..*..*..') == 'YES'\nassert solution('..*..*..*..*..') == 'YES'\nassert solution('*..*..') == 'NO'\nassert solution('..*..') == 'YES'\nassert solution('..*..*') == 'YES'\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"No solution\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4\\n.*..\\n....\\n.*..\\n.*..\\n\\n*..\\n*..\\n*..\\n*..\") == \"YES\"\nassert solution(\"3 4\\n..*..\\n*..\\n....\\n*..\\n*..\\n\\n*..\\n*..\\n*..\\n\\n*..\\n*..\\n\\n*..\" == \"YES\"\nassert solution(\"6 5\\n..*..\\n..*..\\n..*..\\n.*..\\n.*..\\n.*..\\n.*..\") == \"YES\"\nassert solution(\"6 5\\n..*..\\n..*..\\n..*..\\n.*..\\n.*..\\n.*..\") == \"NO\"\n\n\n\n===== solutions ====\n\n--- solution =---\n\nInput\n3 4\n..*..\n....\n.*..\n*..\n\nOutput\nYES\n3 3\n\nInput\n3 4\n*..\n...\n*..\n*..\n\nOutput\nNO\n\nInput\n6 5\n..*..\n..*..\n*****\n..*..\n..*..\n..*..\n\nOutput\nNO\n\n\"\"\"\nimport sys\n\nn, m = map(int, input().split())\nrows = [\"\"]\n\nfor row in range(n):\n    rows.append(input())\n\nfor i in range(1, n):\n    rows[i] = list(rows[i])\n\nfor row in rows:\n    for i in range(m):\n        if row[i] == \"*\":\n            row[i] = \".\"\n\nfor row in rows:\n    print(\"\".join(row))\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"YES\"\n\nprint(solution(input))\n\"\"\"\n\nimport sys\n\nn, m = map(int, input().strip().split())\ndepot = []\nfor i in range(n):\n    line = input()\n    for j in range(m):\n        if line[j]!= \".\":\n            depot.append((i, j))\n        else:\n            if j < (m - 1):\n                depot.append((i, j + 1))\n            else:\n                depot.append((i, 0))\nprint(*depot)\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"4 3\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4 1\") == \"NO\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"5\"\n\nassert solution(input()) == \"0\"\n\n\n-----Constraints-----\n\n0 <= n <= 100,000,000,000,000\n0 <= m <= 10^12,000,000,000\n\n-----Time Limit=3 min\n\n----\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['2', '3', '5', '6', '7', '8']) == '0'\nassert solution(['2', '3', '5', '7', '8', '9']) == '0'\nassert solution(['2', '3', '7', '8']) == '0'\nassert solution(['5', '3', '7', '8']) == '0'\nassert solution(['5', '5']) == '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == ''"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"1\n7 3 8\n\"\"\") == \"15\"\nassert solution(\"\"\"2\n7 3 7\n\"\"\") == \"14\"\nassert solution(\"\"\"1\n3 5\n\"\"\") == \"0\"\n\"\"\" )\nassert solution(\"\"\"3\n6 2\n\"\"\") == \"0\"\nassert solution(\"\"\"1\n3 5\n\"\"\") == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 7 3 8\") == \"0\"\nassert solution(\"2 7 3 7\") == \"0\"\nassert solution(\"30 6 17 19\") == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 5') == '1'\nassert solution('2 2 4') == '2'\nassert solution('3 4 5') == '2'\nassert solution('1 2 3') == '1'\nassert solution('1 2 5') == '1'\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['-2', '2', '-5', '-3', '1']), '-1'\nassert solution(['-5', '-3', '2']), '-1'\nassert solution([]), '-1'\nassert solution(['-2', '2', '-3']), '-1'\nassert solution(['2', '2', '2']), '-1'\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n\nOutput\n2\n\nExplanation\n\nInput:\nInput array is [-2 2 -3 1]\nOutput:\nOutput array is [-2 2 -3]\nExplanation:"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"-2 2 -3 1\") == 3, \"A\"\nassert solution(\"-2 2 -3 1 \") == -1, \"B\"\n\nInput\n6\n-2 2 -3 1 -4 2 4 -1 -5 -3 -4 -2 -1 1 -4 -2\n\nOutput\n15\n\nInput\n7\n-2 -1 -1 2 2 2 2\n\nOutput\n-1\n\n\n\n-----Constraints-----\n0 <= n <= 10^5\n\nTime Limit: 1 sec\nMemory Limit: 1M\n\nCitations:\nhttps://www.codechef.com/SEPT19D21/problems/SQDS\n\n--- Nguyen Van Duc ---\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"3\"\n\nassert solution(\"-2 2 -3 1\") == \"3\"\n\nassert solution(\"-4 -3 -1 -2 -3\") == \"3\"\n\nassert solution(\"3 2 -5 -6\") == \"-1\"\n\nassert solution(\"5 -2 3 -4\") == \"-1\""
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input: \"3 5 -2 -1 3 2 1 -5 2 -3 2\"\n    ) == \"2 3\"\nassert solution(\n    input: \"1 -2 3 4 -3 -4 5\"\n    ) == \"2 -1\"\nassert solution(\n    input: \"0 3 1 5\"\n    ) == \"0\"\nassert solution(\n    input: \"2 -5 4 -3 1 2 -4 3 -4\"\n    ) == \"0\"\nassert solution(\n    input: \"3 3 3 3 3\"\n    ) == \"3\"\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, [3, 2, -5, -3]) == 3\nassert solution(5, [3, 2, -5, -3, 0]) == -1\nassert solution(3, [2, -3]) == 3\nassert solution(3, [2, -3, 0]) == 3\nassert solution(3, [2, -3, -3, 0]) == 3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4) == 3\nassert solution(3) == -1\nassert solution(2) == -1\nassert solution(1) == 3\nassert solution(3) == 1\n\n------ Solutions ------"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= a_1 < 10^4\n-10^5 <= a_2 < 10^4\n\n\"\"\""
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == -1\nassert solution(3) == 2\nassert solution(4) == -2\nassert solution(5) == 3\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_1 <= 10^5\n1 <= a_2 <= 10^5\n-10^4 <= a_i <= 10^4\n\n-----Time Limit-----\n3 seconds\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == ''\n\n\n------Expected output------\n\nOutput one integer \u2014 the number of different sequences of songs, the total length of exactly $T$, such that there are no two consecutive songs of the same genre in them and all the songs in the playlist are different. Since the answer may be huge, output it modulo $10^9 + 7$ (that is, the remainder when dividing the quantity by $10^9 + 7$).\n\"\"\""
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 1 1 1\") == \"2\"\nassert solution(\"1 1 1 2\") == \"3\"\nassert solution(\"1 1 1 3 2 1\") == \"3\"\nassert solution(\"1 1 1 4 2\") == \"1\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"6\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1\") == \"10\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\"5 3\", \"1 1\", \"1 2\", \"1 3\", \"2 1\", \"2 2\", \"2 3\", \"3 2\", \"3 1\"]) == \"6\"\nassert solution(\n    [\"3 2\", \"1 2\", \"3 2\", \"1 3\", \"2 1\", \"3 1\", \"2 2\", \"1 1\"]) == \"10\"\nassert solution(\n    [\"1 1\", \"1 2\", \"1 3\", \"2 1\", \"2 2\", \"2 3\", \"3 2\", \"3 1\"]) == \"2\"\nassert solution(\n    [\"1 3\", \"2 1\", \"1 2\", \"3 2\", \"2 2\", \"1 3\", \"3 2\", \"2 1\"]) == \"2\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 5') == '10'\nassert solution('3 2 2') == '5'\nassert solution('4 3 1') == '4'\nassert solution('5 3 2') == '7'\nassert solution('5 1 3') == '10'\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"1\\n1\\n2\\n1\\n1\\n3\\n2\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n3\\n2\\n1\\n2\\n2\\n1\\n3\\n1\\n1\\n1\\n2\\n3\\n3\\n2\\n3\\n1\\n2\\n3\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n3\\n3\\n2\\n1\\n3\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n3\\n2\\n1\\n1\\n3\\n3\\n2\\n2\\n1\\n3\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n3\\n2\\n2\\n1\\n1\\n2\\n1\\n3\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n2\\n2\\n3\\n2\\n3\\n1\\n2\\n2\\n1\\n1\\n2\\n1\\n3\\n1\\n1\\n2\\n3\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n3\\n1\\n3\\n1\\n1\\n1\\n1\\n2\\n3\\n3\\n1\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n3\\n3\\n1\\n1\\n1\\n3\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n3\\n2\\n2\\n2\\n3\\n3\\n2\\n1\\n1\\n3\\n1\\n2\\n2\\n3\\n1\\n3\\n2\\n3\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n3\\n3\\n1\\n1\\n2\\n3\\n2\\n1\\n1\\n1\\n1\\n1\\n2\\n3\\n3\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n2\\n3\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 3') == '6'\nassert solution('4 10') == '2'\nassert solution('4 11') == '3'\nassert solution('5 1') == '2'\nassert solution('5 2') == '3'\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 1 2 1 3 3 2 2') == '2'\nassert solution('1 3 1 1 3') == '1'\nassert solution('1 1 1 3 1 2 1 2') == '2'\nassert solution('1 1 3 1 2 1 2') == '1'\nassert solution('1 1 2 3 1') == '1'\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 1\") == \"4\"\nassert solution(\"1 3\") == \"2\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,4) == 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(4) == \"333333338\"\nassert solution(5) == \"1\""
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        \"1\"\n    ]\n) == 1\nassert solution(\n    [\n        \"2\"\n    ]\n) == 2\nassert solution(\n    [\n        \"4\"\n    ]\n) == 2\nassert solution(\n    [\n        \"33\"\n    ]\n) == 2\nassert solution(\n    [\n        \"5\"\n    ]\n) == 2\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"333333338\""
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == 1\n\nassert solution(1) == 1\n\nassert solution(2) == 2\n\nassert solution(4) == 3"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"2\"]) == \"1\"\nassert solution([\"1\", \"3\", \"2\"]) == \"3\"\nassert solution([\"2\", \"3\"]) == \"3\"\nassert solution([\"3\"]) == \"1\"\nassert solution([\"1\", \"1\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"333333338\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"333333338\"\n\n\"\"\""
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 1') == '2'\nassert solution('50 100 3 30') == '4'\nassert solution('50 100 3 30') == '0'\n\n'''"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('50 100 3 30') == '4'\nassert solution('3 4 1') == '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    f\"{1, 1} 2 1 {2, 1} 3 {2, 3} 3 2 {3, 2}\") == \"4\"\n\nassert solution(\n    f\"{1, 2, 1} 2 2 {3, 1, 3} 3 {1, 2}\") == \"0\"\n\nassert solution(\n    f\"{1, 2, 3, 4} 3 3 2\") == \"0\"\n\nassert solution(\n    f\"{2, 1} 2 2 {1, 2} {2, 3} {3, 2} {3, 3} {4, 1} {3, 2}\") == \"0\"\n\nassert solution(\n    f\"{4, 1, 1, 2, 3, 3, 3} 3 3 3 3\") == \"0\""
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1 3 3\") == \"4\"\nassert solution(\"4 1 2\") == \"2\"\nassert solution(\"10 10 20 10\") == \"1\"\nassert solution(\"3 1 1\") == \"0\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 3') == '0'\nassert solution('1 2 1 2') == '1'\nassert solution('5 3') == '0'\nassert solution('50 100 3 30') == '4'\nassert solution('50 100 3 30') == '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\""
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1\") == 2\nassert solution(\"50 100 3 30\") == 0\nassert solution(\"1 12 1 12\") == 0\nassert solution(\"1 12 1 2\") == 2\n\n\n\"\"\""
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, 1) == 2\nassert solution(5, 12) == 0\nassert solution(2, 1) == 2\nassert solution(5, 12) == 4\nassert solution(1, 12) == 2\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10 11 15 11') == '3'\nassert solution('10 12 1 5') == '1'\nassert solution('50 100 3 30') == '4'\nassert solution('1 2 1 2') == '2'\nassert solution('3 30 1 6') == '3'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"50\") == \"0\"\nassert solution(\"100\") == \"0\"\nassert solution(\"30\") == \"1\"\nassert solution(\"15\") == \"0\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == '5'\nassert solution('2 3 4 5 6') == '6'\nassert solution('4 3 2 1') == '3'\nassert solution('3 2 3 4 5') == '5'\nassert solution('1 2 3 4 5') == '0'\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n0 <= a, b <= 10^9\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n\n-----Test Inputs-----\n\nTest 1 (100 lines):\n\nInput\n6 10\n\nOutput\n2\nInput\n21 31\n\nOutput\n9\n\n-----Test Output-----\n\nTest 1 (100 lines):\n\nInput\n21 31\n\nOutput\n9\n\n-----Sample Inputs-----\n\nSample Input #1:\n\n3 3\n\nSample Output #1:\n\n2\nSample Input #2:\n\n5 10\n\nSample Output #2:\n\n2\n\n\n-----Sample Inputs-----\n\nSample Input #1:\n\n3 5\n\nSample Output #1:\n\n2\nSample Input #2:\n\n4\n\nSample Output #2:\n\n0\n\n\n-----Sample Inputs-----\n\nSample Input #1:\n\n3 1\n\nSample Output #1:\n\n3\n\n\n-----Sample Inputs-----\n\nSample Input #1:\n\n0 2\n\nSample Output #1:\n\n0\nSample Input #2:\n\n5 2\n\nSample Output #2:\n\n5\n\n-----Solution-----\n\"\"\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '24'\nassert solution(stdin) == '0'\n\n\n\n-----Constraints-----\n\n1 <= $a$ <= $b$ <= $10^9$\n\n\n-----Submissions-----\n\nSample Input\n\n2\n\nSample Output\n\n2\n\n\n-----Sample Input File - Standard input-----\n\nSample Input 1:\n\n8\nSample Output 1:\n\n4\nSample Input 2:\n\n21\nSample Output 2:\n\n10\n\n\n-----Sample Input File - Input is not valid-----\n\nSample Input 1:\n\n1\nSample Output 1:\n\n2\nSample Input 2:\n\n12\nSample Output 2:\n\n6\n\n\n-----Constraints-----\n\n0 <= $a$ <= $b$ <= $10^9$\n\n\n-----Submissions-----\n\nSample Input 1:\n\n2\nSample Output 1:\n\n2\n\n\n-----Submissions-----\n\nSample Input 2:\n\n1\nSample Output 2:\n\n3\n\n\n-----Constraints-----\n\n0 <= $a$ <= $b$ <= $10^9$\n\n------Sol 1------\n\ntest_case = int(input())\nfor i in range(test_case):\n    a,b = map(int,input().split())\n    print(int(a*b))\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nprint(\"Example 1:\")\nprint(\"Input : \" + stdin)\nprint(\"Output : \" + str(solution(stdin)))\nprint(\"Exception :\")\nprint(\"Expected : 1\")\nprint(\"Actual : \" + str(solution(stdin)))\nprint()\nprint(\"Example 2:\")\nprint(\"Input : \" + stdin)\nprint(\"Output : \" + str(solution(stdin)))\nprint(\"Exception :\")\nprint(\"Expected : 0\")\nprint(\"Actual : \" + str(solution(stdin)))\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"32\"\nassert solution(stdin) == \"41\""
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n1 <= stdin.length <= 100\n\n1 <= a, b <= 10^9\n\nSubtask-1. Given two integers $a$ and $b$, return their modulo-safe sum.\nSubtask-2. Given a non-negative integer $k$, return the least common multiple of $a+k$ and $b+k$.\n\nExample 1:\n\nInput\n2\n5 3\n\nOutput\n6\n5\n\nExplanation\nThere are four possibilities:\n\n1. $1^2 + 3^2 = 3$\n2. $1^2 + 2^2 = 2$\n3. $1^2 + 1^2 = 1$\n4. $1^2 + 1^2 = 0$.\n\nExample 2:\n\nInput\n6\n9\n\nOutput\n9\n\nExplanation\nThere are eight possibilities:\n\n1. $1^2 + 2^2 + 3^2 = 3$\n2. $1^2 + 2^2 + 1^2 = 2$\n3. $1^2 + 2^2 + 0^2 = 0$\n4. $1^2 + 2^2 + 1^2 = 1$\n5. $1^2 + 2^2 + 1^2 = 0$\n6. $1^2 + 2^2 + 1^2 = 0$.\n\n\n-----See Also-----\n2. For additional Example input, I suppose you can give me only two integers $a$ and $b$.\n\n'''\n\nclass Solution:\n    def gcd_divisors(self, a):\n        # Write your code here.\n        if a == 1:\n            return 2\n        if a == 2:\n            return 3\n        if a % 2!= 0:\n            return 0\n        if a % 3 == 0:\n            return 2\n        if a % 4 == 0:\n            return 3\n        if a % 5 == 0:\n            return 4\n        if a % 6 == 0:\n            return 5\n        else:\n            return 6"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '9'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '0'\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test_cases[int(input())]) == test_cases[int(input())][0]\n---OR"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 10\") == \"4\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"4 4 4\") == \"3\"\nassert solution(\"0 1 2 3 4\") == \"3\"\nassert solution(\"2 1 2\") == \"3\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '9'\n\nInput\n5\n5\n\nOutput\n9\n10\n\nExplanation\nNoora got n+1 marks in register this year. However, noora is afraid that her marks are not enough to get final mark k. Noora decided to ask for help in the internet, where hacker Leha immediately responded to his request. He is ready to hack class register for Noora and to add Noora any number of additional marks from 1 to k. At the same time, Leha want his hack be unseen to everyone, so he decided to add as less as possible additional marks. Please help Leha to calculate the minimal number of marks he has to add, so that final Noora's mark will become equal to k.\n\n\n-----Input-----\n\nThe first line contains two integers n and k (1 \u2264 n \u2264 100, 1 \u2264 k \u2264 100) denoting the number of marks, received by Noora and the value of highest possible mark.\n\nThe second line contains n integers a_1, a_2,..., a_{n} (1 \u2264 a_{i} \u2264 k) denoting marks received by Noora before Leha's hack.\n\n-----Output-----\n\nPrint a single integer\u00a0\u2014 minimal number of additional marks, that Leha has to add in order to change Noora's final mark to k.\n\n\n-----Example 1-----\nInput\n2 10\n8 9\n\nOutput\n4\nInput\n3 5\n4 4 4\n\nOutput\n3\n\n\n-----Example 2-----\nInput\n1\n10\n\nOutput\n10\n\nExplanation\nNoora has just received 10 marks in register this year.\n\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= k <= 100\n\nFor the first example,\u00a0Noora has just received\u00a01\u00a0marks in register this year.\nFor the second example, noora\u00a0has\u00a0received\u00a01\u00a0more\u00a0marks\u00a0than\u00a01\u00a0plus\u00a01\u00a0and\u00a01\u00a0plus\u00a02\u00a0plus\u00a01\u00a0plus\u00a01\u00a0plus\u00a02\u00a0plus\u00a02\u00a0+\u00a03\u00a0+\u00a04\u00a0+5\u00a0+6\u00a0+7\u00a0+8\u00a0+9\u00a0+10\u00a0+11\u00a0+12\u00a0+13\u00a0+14\u00a0+15\u00a0+16\u00a0+17\u00a0+18\u00a0+19\u00a0+20\u00a0+21\u00a0+22\u00a0+23\u00a0+24\u00a0+25\u00a0+26\u00a0+27\u00a0+28\u00a0+29\u00a0+30\u00a0+31\u00a0+32\u00a0+33\u00a0+34\u00a0+35\u00a0+36\u00a0+37\u00a0+38\u00a0+39\u00a0+40\u00a0+41\u00a0+42\u00a0+43\u00a0+44\u00a0+45\u00a0+46\u00a0+47\u00a0+48\u00a0+49\u00a0+50\u00a0+51\u00a0+52\u00a0+53\u00a0+54\u00a0+55\u00a0+56\u00a0+57\u00a0+58\u00a0+59\u00a0+60\u00a0+61\u00a0+62\u00a0+63\u00a0+64\u00a0+65\u00a0+66\u00a0+67\u00a0+68\u00a0+69\u00a0+70\u00a0+71\u00a0+72\u00a0+73\u00a0+74\u00a0+75\u00a0+76\u00a0+77\u00a0+78\u00a0+79\u00a0+80\u00a0+81\u00a0+82\u00a0+83\u00a0+84\u00a0+85\u00a0+86\u00a0+87\u00a0+88\u00a0+89\u00a0+90\u00a0+91\u00a0+92\u00a0+93\u00a0+94\u00a0+95\u00a0+96\u00a0+97\u00a0+98\u00a0+99\u00a0+100\u00a0+101\u00a0+102\u00a0+103\u00a0+104\u00a0+105\u00a0+106\u00a0+107\u00a0+108\u00a0+109\u00a0+110\u00a0+111\u00a0+112\u00a0+113\u00a0+114\u00a0+115\u00a0+116\u00a0+117\u00a0+118\u00a0+119\u00a0+120\u00a0+121\u00a0+122\u00a0+123\u00a0+124\u00a0+125\u00a0+126\u00a0+127\u00a0+128\u00a0+129\u00a0+130\u00a0+131\u00a0+132\u00a0+133\u00a0+134\u00a0+135\u00a0+136\u00a0+137\u00a0+138\u00a0+139\u00a0+140\u00a0+141\u00a0+142\u00a0+143\u00a0+144\u00a0+145\u00a0+146\u00a0+147\u00a0+148\u00a0+149\u00a0+150\u00a0+151\u00a0+152\u00a0+153\u00a0+154\u00a0+155\u00a0+156\u00a0+157\u00a0+158\u00a0+159\u00a0+160\u00a0+161\u00a0+162\u00a0+163\u00a0+164\u00a0+165\u00a0+166\u00a0+167\u00a0+168\u00a0+169\u00a0+170\u00a0+171\u00a0+172\u00a0+173\u00a0+174\u00a0+175\u00a0+176\u00a0+177\u00a0+178\u00a0+179\u00a0+180\u00a0+181\u00a0+182\u00a0+183\u00a0+184\u00a0+185\u00a0+186\u00a0+187\u00a0+188\u00a0+189\u00a0+190\u00a0+191\u00a0+192\u00a0+193\u00a0+194\u00a0+195\u00a0+196\u00a0+197\u00a0+198\u00a0+199\u00a0+200\u00a0+201\u00a0+202\u00a0+203\u00a0+204\u00a0+205\u00a0+206\u00a0+207\u00a0+208\u00a0+209\u00a0+210\u00a0+211\u00a0+212\u00a0+213\u00a0+214\u00a0+215\u00a0+216\u00a0+217\u00a0+218\u00a0+219\u00a0+220\u00a0+221\u00a0+222\u00a0+223\u00a0+224\u00a0+225\u00a0+226\u00a0+227\u00a0+228\u00a0+229\u00a0+230\u00a0+231\u00a0+232\u00a0+233\u00a0+234\u00a0+235\u00a0+236\u00a0+237\u00a0+238\u00a0+239\u00a0+240\u00a0+241\u00a0+242\u00a0+243\u00a0+244\u00a0+245\u00a0+246\u00a0+247\u00a0+248\u00a0+249\u00a0+250\u00a0+251\u00a0+252\u00a0+253\u00a0+254\u00a0+255\u00a0+256\u00a0+257\u00a0+258\u00a0+259\u00a0+260\u00a0+261\u00a0+262\u00a0+263\u00a0+264\u00a0+265\u00a0+266\u00a0+267\u00a0+268\u00a0+269\u00a0+270\u00a0+271\u00a0+272\u00a0+273\u00a0+274\u00a0+275\u00a0+276\u00a0+277\u00a0+278\u00a0+279\u00a0+280\u00a0+281\u00a0+282\u00a0+283\u00a0+284\u00a0+285\u00a0+286\u00a0+287\u00a0+288\u00a0+289\u00a0+290\u00a0+291\u00a0+292\u00a0+293"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 10\") == \"4\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"3 4 4\") == \"3\"\nassert solution(\"3 5\") == \"3\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"4\"\nassert solution(\"1 5\") == \"6\"\nassert solution(\"2 7\") == \"2\"\nassert solution(\"3 4\") == \"6\"\nassert solution(\"3 6\") == \"5\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 3\") == \"4\"\nassert solution(\"10 1\") == \"4\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"10 2\") == \"3\"\nassert solution(\"10 3\") == \"1\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == \"6\"\n\n0\n0\n\"\"\""
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '9'\n\nTestcases\n8 10\n8 9\n8 4\n8 4\n8 4\n7 4\n7 4\n\n5 5\n5 4\n5 4\n5 4\n5 4\n5 4\n\n4 5\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n\n4 5\n4 5\n4 4\n4 4\n4 4\n4 4\n\n6 6\n6 6\n6 6\n6 6\n6 6\n6 6\n6 6\n6 6\n6 6\n6 6\n6 6\n6 6\n\n-----Bug alert-----\n\nIn the second example Leha has added 6 marks to the registry, so the final mark is 8.\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\n\n'''"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 0\n\nExplanation\nWrite an if-else statement that checks if the first input is a positive number that satisfies the first input condition.\nIf the first input is not a positive number, print any of the following numbers, otherwise print any of the following integers.\n\nInput\n5\n10 0 -7 2 6\nOutput\n4\nInput\n7\n0 0 1 -1 0 0 2\nOutput\n0\n\n\n------------------------------\nExplanation\nGiven $n$ and $d$, find the $d$ positive integers that satisfy the first condition.\n\nInput\n7\n0 0 1 -1 0 0 2\nOutput\n[2.5, 0.5, 1.5, 0.5, 1.5, 0.5]\n\nInput\n7\n0 0 1 -1 0 0 2\nOutput\n[2.5, 0.5, 1.5, 0.5, 1.5, 0.5]\n\n\"\"\"\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\n\nTestcases\n2\n10 0 -7 2 6\n5\nOutput\n4\n0\n0\n\n\nInput\n3\n3 2 3\nOutput\n1\nOutput\n0\n\nInput\n6\n1 1 -6 0 6\nOutput\n2\nOutput\n0\n0\n'''\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\nInput:\n5\n10 0 -7 2 6\nOutput:\n4\nInput:\n7\n0 0 1 -1 0 0 2\nOutput:\n0\n\n\n\"\"\""
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '4'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n\nInput\n5\n10 0 -7 2 6\nOutput\n0\n\nInput\n7\n0 0 1 -1 0 0 2\nOutput\n0\n\nInput\n7\n-1 0 1 0 0 -1 0 1\nOutput\n0\n\n[2, 0, -1, 0, 1, 1, 1]\n[2, -1, -1, 0, 1, 1, 1]\n\n[0, 0, -1, 0, 1, 1, 1]\n[2, -1, -1, 0, 1, 1, 1]\n[0, 0, -1, 0, 1, 1, 1]\n[2, -1, -1, 0, 1, 1, 1]\n\nInput\n5\n-1 0 1 -1 0 0 2\nOutput\n2\n[0, 0, -1, 0, 1, 1, 1]\n[2, -1, -1, 0, 1, 1, 1]\n[0, 0, -1, 0, 1, 1, 1]\n[2, -1, -1, 0, 1, 1, 1]\n[0, 0, -1, 0, 1, 1, 1]\n\n[-1, 0, -1, 0, 1, 1, 1]\n[-1, 2, -1, 0, 1, 1, 1]\n[0, 0, -1, 0, 1, 1, 1]\n[-1, 2, -1, 0, 1, 1, 1]\n[0, 0, -1, 0, 1, 1, 1]\n[-1, 2, -1, 0, 1, 1, 1]\n\n[-1, -1, -1, -1, -1, -1, -1]\n[-1, 2, -1, -1, -1, -1, -1]\n[-1, -1, -1, 2, -1, -1, -1]\n[-1, -1, -1, -1, -1, 2, -1]\n\n[-1, 0, 0, 0, 0, 0, 0]\n[-1, 2, 0, 2, 0, 0, 0]\n[-1, 0, 2, 2, 2, 2, 2]\n[-1, 0, 2, 0, 2, 2, 2]\n[-1, 0, 2, 2, 0, 2, 2]\n[-1, 0, 2, 2, 2, 0, 2]\n[-1, 0, 0, 0, 0, 0, 0]\n[-1, 0, 0, 0, 0, 0, 0]\n[-1, 0, 0, 0, 0, 0, 0]\n\n[-1, -1, -1, -1, -1, -1, -1]\n[-1, 2, -1, 2, -1, -1, -1]\n[-1, -1, -1, 2, -1, 2, -1]\n[-1, -1, -1, -1, 2, 2, -1]\n[-1, -1, -1, -1, -1, 2, 2]\n[-1, -1, -1, -1, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n\n[-1, -1, -1, -1, -1, -1, -1]\n[-1, 2, -1, 2, -1, -1, -1]\n[-1, -1, -1, 2, -1, 2, -1]\n[-1, -1, -1, -1, 2, 2, -1]\n[-1, -1, -1, -1, -1, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n\n[-1, -1, -1, -1, -1, -1, -1]\n[-1, 2, -1, 2, -1, -1, -1]\n[-1, -1, -1, 2, -1, 2, -1]\n[-1, -1, -1, -1, 2, 2, -1]\n[-1, -1, -1, -1, -1, 2, 2]\n[-1, -1, -1, 2, 2, 2, -1]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n[-1, -1, -1, 2, 2, 2, 2]\n\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n[0, 2, 2, 2, 2, 2, 2]\n\n[-1, -1"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\n\n\"\"\""
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, -1, 4) == 0\nassert solution(2, -3, 5) == 4\nassert solution(3, -5, 7) == 0\nassert solution(4, -8, -9) == 7\nassert solution(5, -10, -11) == 3\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\n'''"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"7\") == \"0\"\nassert solution(\"10 0 -7 2 6\") == \"4\"\nassert solution(\"10 0 -1 -1 0 0 2\") == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution) == \"3\"\nassert solution(solution) == \"1\"\nassert solution(solution) == \"2\"\nassert solution(solution) == \"3\"\nassert solution(solution) == \"4\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 5, \"Not a valid answer\""
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '6'\nassert solution(stdin) == '5'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(7) == 3\nassert solution(14) == 2\nassert solution(50) == 4\nassert solution(999) == 1\nassert solution(3) == 0\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '9'\nassert solution(input()) == '1'"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"5 3\"\nassert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"5 2\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"4 2\") == \"2 4\"\nassert solution(\"2 6\") == \"6\"\nassert solution(\"4 5\") == \"5\"\nassert solution(\"4 3\") == \"3\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('a_1 5', 'b_1 3', 'b_2 1', 'a_2 1') == '1'\nassert solution('a_1 5', 'b_1 3', 'b_2 2', 'a_2 2') == '1'\nassert solution('a_1 5', 'b_1 3', 'b_2 3', 'a_2 3') == '3'\nassert solution('a_1 5', 'b_1 3', 'b_2 4', 'a_2 4') == '4'\nassert solution('a_1 5', 'b_1 4', 'b_2 5', 'a_2 5') == '-1'\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '-1'"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"16 5\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '6'\nassert solution(stdin) == '16'\nassert solution(stdin) == '5'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 6\") == \"3\"\nassert solution(\"36 5\") == \"16 5\"\nassert solution(\"36 4\") == \"1 4\"\nassert solution(\"36 3\") == \"1 2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Polycarp\"\n\nassert solution(stdin) == \"Vasiliy\"\n\nassert solution(stdin) == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 1 2 2') == 'Polycarp'\nassert solution('4 7 7 4') == 'Vasiliy'\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 1) == 'Polycarp'\nassert solution(4, 7) == 'Vasiliy'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 1 2') == 'Vasiliy'\nassert solution('4 7 7 4') == 'Polycarp'\nassert solution('1 1') == 'Polycarp'\nassert solution('0 1 0 0') == 'Polycarp'\nassert solution('0 0 0 0') == 'Polycarp'\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 1 2 2') == 'Polycarp'\nassert solution('4 7 7 4') == 'Vasiliy'\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Vasiliy\"\n\n\n-----Constraints-----\n1 <= x_{p}, y_{p}, x_{v}, y_{v} <= 10^5\n\n\n-----Time Limit-----\n1 minute\n\n\n-----Sample Tests-----\ntests =\ntests = [\n    (2, 1, 2, 2),\n    (4, 7, 4, 4)\n]\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Polycarp\"\n\nassert solution(stdin) == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\nassert solution(\"0 0 0 0\") == \"Polycarp\"\nassert solution(\"0 0 0 0\") == \"Vasiliy\""
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 7 4\") == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Vasiliy\"\nassert solution(stdin) == \"Polycarp\"\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"12 1\") == \"6\"\nassert solution(\"2 3 4 7\") == \"6\"\nassert solution(\"4\") == \"5\"\nassert solution(\"23 23\") == \"3\"\nassert solution(\"29 30\") == \"3\"\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 5\n\n\"\"\""
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\n\nassert solution(stdin) == 5\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('11 6') == 5\nassert solution('1 1') == 5\nassert solution('11 6') == 5\nassert solution('11 7') == 5\nassert solution('11 1') == 5\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == 6\nassert solution(\"11 6\") == 5\nassert solution(\"11 6 1\") == 5\nassert solution(\"11 4\") == 5\nassert solution(\"11 6 7\") == 5\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 7\") == 6\nassert solution(\"11 6\") == 5\nassert solution(\"11 1\") == 5\nassert solution(\"1 1\") == 1\nassert solution(\"11 6\") == 5\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 7') == 5\nassert solution('11 6') == 5\nassert solution('1 1') == 2\nassert solution('11 6') == 4\nassert solution('1 7') == 3\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 7\") == 6\nassert solution(\"1 1\") == 5\nassert solution(\"11 6\") == 5\nassert solution(\"11 1\") == 5\nassert solution(\"0 0\") == 0\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 7\") == 6\nassert solution(\"11 6\") == 5\nassert solution(\"1 1\") == 1\nassert solution(\"11 6\") == 5\nassert solution(\"11 5\") == 1\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2017\") == \"26\"\nassert solution(\"2015\") == \"1\"\nassert solution(\"100\") == \"0\"\nassert solution(\"72057594\") == \"0\"\nassert solution(\"72057595\") == \"0\"\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5_10\") == \"2\"\nassert solution(\"2015_10\") == \"0\"\nassert solution(\"72057594000000000 72057595000000000\") == \"26\"\nassert solution(\"100105\") == \"0\"\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\n\n\n-----Constraints-----\n\n0 \u2264 a \u2264 b \u2264 10^18.\n\n\n-----Brute Force Search-----\n\nBrute force search. The run time complexity of this function is O(n^2).\nThe time complexity of this function is O(n^2).\nThe space complexity of this function is O(n).\nWe can perform a brute force search for this space complexity.\n\n\n-----Implementation-----\n\nBrute force search is the following:\n1) The input is limited to a single interval (the range of the interval is either a,b).\n2) Assume that the input has exactly one zero in the binary representation.\n3) The function will never return zero.\n4) The binary representation is an infinite recursive binary sequence of length n.\n5) Let the binary representation of a be a number from 0 to n\u22121 with each bit having a digit.\n6) The first element of the sequence is an integer in the interval [a,b], the second element is the first element of the sequence, and so on.\n7) An integer in the interval [a,b] is not a descendant of a.\n8) An integer is called a prime number if its binary representation is a prime number.\n9) A number is called a composite number if its binary representation is a composite number.\n10) For any integer in the interval [a,b], a^b = 1.\n11) For any integer a in the interval [a,b] the number of its binary representation is either 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 2147483648, 4194304,"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 26\n\n-----Constraints-----\n\n0 \u2264 stdin.length \u2264 10^4\n0 \u2264 a \u2264 b \u2264 10^18\n\n-----Time Limit: 1 sec\n\n-----Memory Limit: 128 MB\n\n-----Constraints:\n\n1 \u2264 stdin.length \u2264 10^4\nstdin contains only digits, no spaces, no parentheses, no whitespaces, no parentheses, no numbers.\n\n\n-----Input Format\n\nThe first line contains an integer, a and b (1 \u2264 a \u2264 b \u2264 10^18).\n\n\n-----Output Format\n\nPrint one integer, the number of years Limak will count in his chosen interval.\n\nSample Input\n\n3\n\nSample Output\n\n2\n\nExplanation\n\nLimak started counting only from 2017_10 = 1_10 = 000_10.\n\nLimak stops counting from 2017_10 = 11_10 = 1111_10.\n\n0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0_0"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == 0, \"invalid\"\nassert solution(\"2020\") == 26, \"invalid\"\nassert solution(\"16123\") == 52, \"invalid\"\nassert solution(\"1050013\") == 200_000_000, \"invalid\"\nassert solution(\"1525\") == 4_200_000, \"invalid\"\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5_10\") == \"2\"\nassert solution(\"2015_10\") == \"1\"\nassert solution(\"100_105\") == \"0\"\nassert solution(\"72057594000000000_72057595000000000\") == \"26\"\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 1, 'output is incorrect'\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2015 2015\") == 2\nassert solution(\"100 105\") == 0\nassert solution(\"72057594000000000 72057595000000000\") == 26\nassert solution(\"72057595000000000 72057595000000000\") == 26\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 2\n\n\n-----Constraints-----\n\n1 <= N <= 100\n\n\n------Time complexity-------\n\nLog(N) + Log(2) + Log(N + 1) +... + Log(N + (N - 1)) = O(N^2)\n\n\n------Space complexity-------\n\n2\n\n\"\"\""
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2\"\n), 1\n\nassert solution(\n    \"3\"\n), 2\n\nassert solution(\n    \"4\"\n), 2\n\nassert solution(\n    \"4\"\n), 3\n\nassert solution(\n    \"5\"\n), 1"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == 2\nassert solution(\"2\") == 2\nassert solution(\"4\") == 2\nassert solution(\"5\") == 1\nassert solution(\"0\") == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == \"4\"\n\n\n-----Constraints-----\n1 <= N <= 100\n\n\n-----Time Limit-----\n1 second\n\n\n-----SAMPLE 1-----\n5\n2\n\n2\n4\n3\n\n2\n0\n3\n\n2\n0\n0\n0\n\n\"\"\"\n\n\"\"\"\nTime complexity: O(n2^n + m2^n)\nSpace complexity: O(n + m)\n\"\"\"\nclass Solution:\n    def minDepth(self, root: Optional[TreeNode]) -> int:\n        if not root: return 0\n        if not root.left and not root.right: return 1\n        if root.left and root.right:\n            return 1 + min(self.minDepth(root.left), self.minDepth(root.right))\n        return 1 + max(self.minDepth(root.left), self.minDepth(root.right))"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 2\nassert solution(6) == 3\nassert solution(7) == 1\nassert solution(8) == 0\nassert solution(9) == 0\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 2, 'incorrect solution'\nassert solution(4) == 2, 'incorrect solution'\nassert solution(5) == 3, 'incorrect solution'\nassert solution(6) == 4, 'incorrect solution'\nassert solution(7) == 5, 'incorrect solution'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == 2, 'test'\nassert solution(\"3\") == 1, 'test'\nassert solution(\"4\") == 2, 'test'\nassert solution(\"5\") == 2, 'test'\nassert solution(\"6\") == 4, 'test'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 2\nassert solution(\"4\") == 3\nassert solution(\"5\") == 4\nassert solution(\"4\") == 5\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\nassert solution(6) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == 2\nassert solution(4) == 2\nassert solution(7) == 4\nassert solution(8) == 4\nassert solution(8) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(6)\n\n-----Time complexity-----\n\nTime complexity of solution is O(2^n) because we will iterate through the whole set of n lines in the input. \n\nSpace complexity is O(n) because we will store the number of exclamation marks. \n\n-----Algorithm-----\n\nWe will iterate through the input, while we will keep it iterated only if we find a cube that has a single exclamation mark on it. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution.\n\nWe will use an additional counter to keep track of how many cubes have been used and when to stick them on their corresponding cubes. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution.\n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution.\n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which is a possible solution. \n\nWe will keep iterating until we find a cube that has a single exclamation mark on it, which"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 1 1'), 1\nassert solution('3 1 1'), 6\nassert solution('3 1 1'), 1\nassert solution('3 1 1'), 2\nassert solution('3 1 1'), 6\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 3' == 0) == 0\nassert solution('3 2 2' == 1) == 1\nassert solution('3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3 4 5\") == \"6\"\nassert solution(\"5 3 2\") == \"2\"\nassert solution(\"6 3\") == \"1\"\nassert solution(\"6 3 2\") == \"0\"\nassert solution(\"6 4\") == \"0\"\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '6'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '6'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"6\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n        \"2 2 30\"\n        ), \"1\"\nassert solution(\n        \"3 1 1\"\n        ), \"2\"\nassert solution(\n        \"4 3\"\n        ), \"1\"\nassert solution(\n        \"5 3\"\n        ), \"3\"\nassert solution(\n        \"6 3\"\n        ), \"6\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n------Problem Set 3-----\n\nThere are a total of $27$ tasks. There are $27$ place holders for each of the tasks:\n\nA task is given in a list $A$ and contains the initial array $v_1, v_2, \\dots, v_n$. A task is called if there are $k$ positions available on the array $v_1, v_2, \\dots, v_n$ where $k$ is defined below.\n\nTask $t$ consists of an integer $t$, which represents the number of tasks.\n\nTask $i$ consists of $k$ integers, with $k$ between 1 and $27$.\n\nTask $j$ consists of a sequence of $k$ integers, with $k$ between 1 and $27$.\n\nTask $k$ consists of positive integers.\n\nInput\n\nThe first line contains an integer $t$ (1\u2009\u2264\u2009t\u2009\u2264\u200926) \u2014 the number of test cases. Next $2t$ lines contain test cases \u2014 two lines per test case.\n\nThe first line of each test case contains $k$ integers $k$ in the range [1, $27$]\n\nThe second line contains $k$ integers $k$ in the range [1, $27$]\n\nThe third line contains a sequence of $k$ integers, with $k$ between 1 and $27$.\n\nOutput\n\nFor each task, output YES if it can be performed, otherwise output NO.\n\n\n--------Input:\n\n3\n2\n4\n1\n2\n1\n2\n3\n5\n1\n5\n2\n2\n3\n5\n1\n2\n2\n2\n\nOutput:\n\nYES\n\n\n--------Output:\n\nYES\n\n\n------Example 1-----\nInput:\n\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput:\n\nYES\nYES\nNO\nNO\nNO\n\n\n-----Example 2-----\nInput:\n\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput:\n\nYES\nYES\nYES\nNO\nNO\n\n\n\n-----Expected Time Complexity: O(N) -----"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 'NO'\nassert solution(3) == 'YES'\nassert solution(4) == 'YES'\nassert solution(5) == 'YES'\nassert solution(6) == 'YES'\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"NO\"\nassert solution(4) == \"NO\"\nassert solution(9) == \"NO\"\nassert solution(9) == \"YES\"\nassert solution(12) == \"YES\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 4 100 0 0 0 0 0 0 0\") == \"YES\"\nassert solution(\"4 100\") == \"YES\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 4 1\") == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\", \"4\", \"100\", \"0\", \"0\", \"0\"]) == \"YES\"\nassert solution([\"5\", \"4\", \"100\", \"0\", \"0\", \"0\"]) == \"NO\"\nassert solution([\"5\", \"4\", \"100\", \"0\", \"0\", \"0\"]) == \"NO\"\nassert solution([\"5\", \"4\", \"100\", \"0\", \"0\", \"0\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"3\", \"4\", \"1\", \"1\"]) == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 'NO'\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 4 0 0 0 0 1 0 0 0 0 0 0 0') == 'YES'\nassert solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0') == 'YES'\nassert solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0') == 'YES'\nassert solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0') == 'YES'\nassert solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0') == 'YES'\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 20\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 20, \"sum\"\nassert solution(stdin) == \"18\", \"sum\""
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 2, 2, 4) == 20\nassert solution(5, 6, 7, 8) == 1520\nassert solution(3, 3, 1, 1) == 3\n\n\"\"\"\n\na = int(input())\nb = int(input())\nc = int(input())\nd = a*b*c\nsum = 0\nfor i in range(1, a+1):\n    if(d % i == 0):\n        sum = sum + i\n        \nprint(sum)"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2 2 2) == 20\nassert solution(5 6 7) == 1520\nassert solution(5 1) == 4\nassert solution(0) == 0\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 1 2\") == \"20\"\nassert solution(\"4 7 2\") == \"1520\""
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 20, \"Invalid input\"\n\"\"\""
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 20, \"Test failed\"\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 2 2\") == \"20\"\nassert solution(\n    \"5 6 7\") == \"1520\"\nassert solution(\n    \"1 1 1\") == \"1\"\nassert solution(\n    \"5 6 2\") == \"1520\"\nassert solution(\n    \"5 7 2\") == \"43\"\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\", \"1\", \"1\"]) == \"20\"\nassert solution([\"2\", \"1\", \"1\", \"2\"]) == \"13\"\nassert solution([\"1\", \"1\", \"2\"]) == \"3\"\nassert solution([\"1\", \"1\", \"2\", \"2\"]) == \"20\"\nassert solution([\"1\", \"2\", \"2\", \"2\"]) == \"0\"\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a, b, c) == 20\nassert solution(a, b, c, 5, 6, 7) == 1520\nassert solution(a, b, c, 1, 2, 3) == 21\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n1 <= N <= 10^5\n1 <= A[i] <= X\n1 <= B[i] <= Y\n\n[input] string\nA two-dimensional string of letters.\n\n\n[output] string\nYES\n\n\n[input] string\nAB\n\n[output] string\nNO\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\nThe input consists of two lines separated by whitespace, where the first line contains only letters A, B, C.\n\nThe second line contains two integers X and Y.\n\nA puzzle at position X, Y is always an empty cell.\nA puzzle at position X, Y is always a valid configuration of one of the 3 possible tiles.\nA puzzle at position X, Y is always a valid configuration of one of the 3 possible empty cells.\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"AB\") == \"NO\"\nassert solution(\"AB\") == \"YES\"\nassert solution(\"ABC\") == \"NO\"\nassert solution(\"ABC\") == \"YES\"\nassert solution(\"ABD\") == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= grid.length, grid[i].length <= 100\ngrid[i][j] is either 'A', 'B', 'C', or 'X'.\ngrid[i] consists of only lower-case English letters.\ngrid[i] contains exactly two unique characters.\n\n2 <= len(grid[0]) <= 100\n\n1 <= grid[i][j] <= A\n\n-----Time Limit-----\n\nO(n^3)\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"AB\nXC\nXB\nAC\n\"\"\") == \"YES\"\nassert solution(\"\"\"A\nXB\n\"\"\") == \"NO\"\nassert solution(\"\"\"A\nXC\n\"\"\") == \"NO\"\nassert solution(\"\"\"A\nXB\nBX\n\"\"\") == \"NO\"\nassert solution(\"\"\"A\nXB\nCX\n\"\"\") == \"YES\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n-----Constraints-----\n\n0 <= N <= 10^5\n\n-------Input Format-------\n\nThe first line contains an integer N, the number of test cases.\nThe next N lines each contain an A, B, and C grid separated by spaces.\n\nConstraints\n1 <= N <= 10^5\n0 <= Ai, Bi, Ci <= 10^8\n0 <= Ai < Ai + 1\n0 <= Bi < Bi + 1\n0 <= Ci < Ci + 1\n\nOutput Format\n\nFor each test case, print \"Yes\" if Bessie and Elsie can reach the same configuration (and Bessie and Elsie are not BFFLs). Otherwise, print \"No\"\n\n\n-----Sample Inputs-----\n\n6\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\nA B C\n\n-----Sample Output-----\n\nYES\nNO\n\n\n-----Note-----\n\nBessie and Elsie are friends for 10^8 puzzle spaces.\n\n'''"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '475'\nassert solution(stdin) == '3789'\nassert solution(stdin) == '594'\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '12'\nassert solution(stdin) == '475'\nassert solution(stdin) == '3789'\nassert solution(stdin) == '594'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"475\"\nassert solution(stdin) == \"3789\"\nassert solution(stdin) == \"594\"\nassert solution(stdin) == \"11311\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(13) == 1040\nassert solution(16) == 9961\nassert solution(11311) == 71658\nassert solution(20) == 98570\nassert solution(999) == 798\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"475\"\nassert solution(stdin) == \"3789\"\nassert solution(stdin) == \"594\"\n\n\n\"\"\"\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(13, 12), \"The correct answer is 12\"\nassert solution(13, 12), \"The correct answer is 12\"\nassert solution(16, 11311), \"The correct answer is 11311\"\nassert solution(17, 2016), \"The correct answer is 2016\"\nassert solution(17, 999), \"The correct answer is 999\"\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 37889\n\n-----Examples-----\nInput\n\n2\n3\n\nOutput\n\n1\nInput\n\n4\n2\nOutput\n\n10\n\n-----Note-----\n\nIn the first example, the output is restricted to numbers with 2 or 3 digits, and there are only 3 digits and there is no leading zeros in the number.\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"375\"\n\n\n-----Constraints-----\n1 \u2264 k \u2264 10^18\n\n-----Time Limit-----\nO(n * k)\n\n\n-----Divide and Conquer-----\nO(log(n))\n\n\n-----TLE-----\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"175\"\n\nassert solution(stdin) == \"11110\"\n\nassert solution(stdin) == \"45679\"\n\nassert solution(stdin) == \"71735\""
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '12'\nassert solution(input()) == '475'\nassert solution(input()) == '3789'\nassert solution(input()) == '594'\nassert solution(input()) == '348901'\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 4 4 2\") == \"YES\"\nassert solution(\"3 3 3 3 3 3 3 3 3 3\") == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\",\"7\",\"11\",\"11\",\"2\",\"1\"]) == \"NO\"\nassert solution([\"5\",\"7\",\"11\",\"11\",\"2\",\"1\"]) == \"YES\"\nassert solution([\"5\",\"5\",\"4\",\"2\",\"1\"]) == \"YES\"\nassert solution([\"1\",\"2\",\"1\",\"2\"]) == \"YES\"\nassert solution([\"1\",\"1\",\"1\",\"2\"]) == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('7') == 'YES'\nassert solution('5') == 'NO'\nassert solution('4') == 'YES'\nassert solution('4') == 'NO'\nassert solution('3') == 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\n\nassert solution(input) == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, [5, 7, 11, 11, 2, 1]) == \"YES\"\nassert solution(5, [4, 4, 2]) == \"NO\"\nassert solution(7, [1, 2, 1, 2]) == \"YES\"\nassert solution(7, [1, 2, 1, 2, 3, 4]) == \"YES\"\nassert solution(7, [4, 5, 5, 6]) == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\",\"5\",\"5\",\"5\",\"5\",\"5\"]) == \"YES\"\nassert solution([\"5\",\"5\",\"5\",\"5\",\"5\",\"5\"]) == \"NO\""
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('9 3 10 1 2 2') == 'YES'\nassert solution('11 2 3 4 3') == 'NO'"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(max(map(int, input().split())))\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 3) == 5\nassert solution(20, 5) == 3\nassert solution(10, 6) == 4\nassert solution(1000000, 1000000) == 1"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '31248'\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 11) == \"5\"\nassert solution(1, 20) == \"4\"\nassert solution(1000000, 1000000) == \"1\"\nassert solution(1000000, 4000000) == \"6\"\nassert solution(1000000, 100000000) == \"31248\"\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"31248\""
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"5\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"6\""
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '4'\nassert solution(stdin) == '6'\nassert solution(stdin) == '31248'\n\nTime complexity: O(n^2)\nSpace complexity: O(n)"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 4\nassert solution(input()) == 1\nassert solution(input()) == 6\nassert solution(input()) == 2"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1000000 100\") == \"1\"\nassert solution(\"1000000 10000\") == \"1\"\nassert solution(\"1000000 1000000\") == \"1\"\nassert solution(\"1000000 1000000000\") == \"1\"\nassert solution(\"1000000 100000000000\") == \"1\"\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5, \"test failed\"\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4 1\") == \"1\"\nassert solution(\"1 2 2\") == \"1\"\nassert solution(\"3 4 2\") == \"0\"\nassert solution(\"0 1 0\") == \"0\"\nassert solution(\"3 4 1\") == \"0\"\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(-1)\n\"\"\"\n\nimport sys\nimport math\n\nfrom itertools import permutations\nfrom math import sqrt"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0, \"solution() failed\"\nassert solution(stdin) == -1, \"solution() failed\"\nassert solution(stdin) == 0, \"solution() failed\"\n\n'Input: '\nline = input()\n\nn, m, x, y, vx, vy = map(int, line.split())\nassert n == m == x == y, \"incorrect input\"\nassert vx >= 0 and vy >= 0, \"incorrect input\"\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"-1\"\n\"\"\"\n\nimport math\nimport sys\nimport os\nfrom itertools import combinations"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3 2 2 -1 1\") == 0\nassert solution(\"4 4 2 0 1 1\") == -1\nassert solution(\"10 10 10 1 -1 0\") == -1\nassert solution(\"10 10 10 1 -1 0\") == -1\nassert solution(\"10 10 10 1 -1 0\") == -1\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 \u2264 stdin.length \u2264 105\n\n1 \u2264 n, m \u2264 10^9\n\n-1 \\leq v_x, v_y \\leq 1\n\n-1 \\leq stdin.length \u2264 105\n\n0 < x, y < 10^9\n\n0 < stdin.length \u2264 105\n\nstdin.length < 3\n\n\n-----Algorithm-----\n\nTo solve it, we need to start with the initial position of the ball, then the direction it is moving, then change its direction by 90 degrees. Then, repeat the same as step 3.\n\nTo generate a valid solution, the ball moves in a circle with radius $R$ (the first parameter) times its initial speed, and then it moves to the upper left corner of the table, and if the ball reaches the bottom of the table, it will stop. \nThe ball then moves to the left of the table (the second parameter) times its initial speed, and then it moves up.\n\nThe ball then moves to the right of the table (the third parameter) times its initial speed, and then it stops at the top.\n\nThe ball then moves to the upper right corner (the fourth parameter) times its initial speed, and then it stops at the left.\n\nThe ball then moves back to the upper left corner (the fifth parameter) times its initial speed, and then it stops at the right.\n\nThe ball then moves to the lower right corner (the sixth parameter) times its initial speed, and then it stops at the bottom.\n\nThe ball then moves back to the lower left corner (the seventh parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower left corner (the eighth parameter) times its initial speed, and then it stops at the left.\n\nThe ball then moves to the top right corner (the ninth parameter) times its initial speed, and then it stops at the right.\n\nThe ball then moves to the upper left corner (the tenth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower left corner (the tenth parameter) times its initial speed, and then it stops at the lower.\n\nThe ball then moves to the bottom left corner (the nth parameter) times its initial speed, and then it stops at the top.\n\nThe ball then moves to the bottom right corner (the tenth parameter) times its initial speed, and then it stops at the right.\n\nThe ball then moves to the lower left corner (the tenth parameter) times its initial speed, and then it stops at the lower.\n\nThe ball then moves to the upper right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the lower.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the lower.\n\nThe ball then moves to the lower left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower left corner (the nth parameter) times its initial speed, and then it stops at the lower.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the lower.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower left corner (the nth parameter) times its initial speed, and then it stops at the lower.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the lower.\n\nThe ball then moves to the upper right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the lower right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper right corner (the nth parameter) times its initial speed, and then it stops at the upper.\n\nThe ball then moves to the upper left corner (the nth parameter) times its initial speed,"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"\"\n\n\"\"\"\nimport unittest\nimport sys\nimport math\nimport os\nfrom pathlib import Path"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n0 <= n <= 10^9\n0 <= m <= 10^9\n0 <= x <= 10^9\n0 <= y <= 10^9\n-1 <= v_x, v_y <= 1\n    \nInput\n\nThe first line contains an integer $n$ and $m$, $x$, $y$, $v_x$, $v_y$ ($1 \\leq n, m \\leq 10^9$, $0 \\leq x \\leq n$; $0 \\leq y \\leq m$; $-1 \\leq v_x, v_y \\leq 1$; $(v_x, v_y) \\neq (0, 0)$)\u00a0\u2014 the width of the table, the length of the table, the $x$-coordinate of the initial position of the ball, the $y$-coordinate of the initial position of the ball, the $x$-component of its initial speed and the $y$-component of its initial speed, respectively. It is guaranteed that the ball is not initially in a pocket.\n\nExample 1:\nInput:\n3 4 3 2 -1 1\n\nOutput:\n0 0\nExplanation:\nThe ball will never fall into a pocket.\n\nExample 2:\nInput:\n10 10 10 1 -1 0\n\nOutput:\n-1\n\"\"\""
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '0'\n\n\n[Tip]\nWe can do it using the following algebra:\n    \n    $d = y - v_y$\n    $a = x - v_x$\n    \n    $$\\Omega$$$\n    \n    $c = a \\delta_{s} \\delta_{d} \\delta_{w}$$\n    \n    $$$\n    \n    $\\Omega$$$\n    \n    $\\\\Omega$$$\n    \n    $\\\\Omega$$$\n    \n    $\\\\Omega$$$\n    \n    $\\\\Omega$$$\n    \n    $$$\n    \n    $\\\\Omega$$$\n    \n    $$$\n    \n    $$$$\n\n[Link]\nhttps://www.hackerrank.com/challenges/basic-sudoku/problem\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 2\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"2 3\") == \"NO\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n\n-----Side Effects-----\n\nYou don't need to change the input or the solution.\n\n\n-----Submissions-----\n\n1\n\n\n\"\"\"\nfrom typing import List\nimport math\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"NO\"\n\nassert solution(input()) == \"NO\"\n\nassert solution(input()) == \"YES\"\n\n-----Constraints-----\n1 <= stdin.length <= 1000\n1 <= stdin[i] <= 1000\n1 <= a_1, b_1 <= 1000\n2 <= a_2, b_2 <= 1000\n1 <= a_3, b_3 <= 1000\n2 <= a_3, b_3 <= 1000\n\n------Time complexity-----\n\nTime complexity: O(n)\n\n-----Space complexity-----\n\nTime complexity: O(1)\n\n-------Solutions-----\n\nInput\n4 2\n2 3\n3 3\n\nOutput\nYES\n\nInput\n2 2\n2 3\n2 3\n\nOutput\nNO\n\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\n\n\n\n-----Basic problem-----\n\nThe painter can place two very rare paintings on the wall, and the wall has the same shape as it would be placed on the board. Given a painting, the painter can attach it to the wall and make the painting in the right position. It is guaranteed that the paintings are in the same position (it is a correct solution) and that they are not going out of the wall. If two painting have the same position, then the painter can place them on the wall, and the painting will be attached to the wall.\n\n\n-----Challenge-----\n\nThe painter can place two very rare paintings on the wall, and the wall has the same shape as it would be placed on the board. Given a painting, the painter can attach it to the wall and make the painting in the right position. It is guaranteed that the paintings are in the same position (it is a correct solution) and that they are not going out of the wall. If two painting have the same position, then the painter can place them on the wall, and the painting will be attached to the wall.\n\n\n-----Submissions-----\n\nInitial Thoughts:\n\n---\nIt's a basic problem, and it is easy to get started, but it requires some careful analysis before you can finish it.\n\n\n---\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"YES\"\nassert solution([\"1\",\"2\",\"3\"]) == \"NO\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) == \"NO\"\nassert solution([\"1\",\"3\",\"3\",\"4\",\"5\",\"6\"]) == \"YES\"\nassert solution([\"1\",\"3\",\"3\",\"4\",\"5\",\"6\"]) == \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, [1,2]) == \"YES\"\nassert solution(5, [1,3]) == \"YES\"\nassert solution(4, [2,1]) == \"NO\"\nassert solution(5, [2,2]) == \"NO\""
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n'''\n\nimport math"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"YES\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"3 3\") == \"NO\""
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\"\nimport sys\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\n-----IMPORTANT-----\n\nThis problem is in basic algebraic programming. The problem is similar to the one in the image.\n\nIn this image, we keep the word \"paintings\" in the middle, and the word \"paintings\" is next to \"painting\".\n\nWe are interested only in the \"paintings\". We want to help us find the painting(s) which can be placed on the wall, and not in the wrong spot.\n\nFor example, in the image above, a painting is shown from the top left to the bottom right corner of the wall. The \"paintings\" in the middle of the wall are in the upper left.\n\nIf we want to create a painting from the middle of the wall, we can replace the \"paintings\" with the \"paintings\" in the wall. We only need to find the piece that is the center of the wall (the \"paintings\" we are looking for).\n\nFor example, if we want to create a painting from the top left of the wall, we can replace the \"paintings\" with the \"paintings\" in the wall, but we can't find the painting in the wall.\n\nTo find the painting, we first need to get the image of the wall. We get the width and height of the image, then get the coordinates of the top left corner. We only need to get the coordinates of the bottom right corner. We then get the coordinates of the bottom left corner and the coordinates of the top right corner.\n\nThen we get the coordinates of the middle, which is the center of the wall.\n\nNow, we will help us find the \"paintings\" which can be placed on the wall.\n\nFor example, if we want to create a painting from the middle of the wall, we can replace the \"paintings\" with the \"paintings\" in the wall, but we can't find the painting in the wall.\n\nNow, we only need to find the middle and the bottom right corner. If we get the bottom right corner, we get the bottom left corner and we get the top right corner.\n\nThen, we only need to find the middle and the top left corner.\n\nWe then find the top left corner and the top right corner.\n\nNow, we only need to find the middle.\n\nWe then find the bottom left corner.\n\nFinally, we need to find the middle.\n\nWe then find the bottom right corner.\n\nFinally, we need to find the middle.\n\nThis is a very important question. When we find the middle of the wall, we need to find the bottom right corner of the wall, but we still need to find the bottom left corner, and we need to find the top right corner.\n\nThis is the only question you need to solve.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"inf\""
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n[\n    [3, 2, 30, 4],\n    [12, 14, 25, 48],\n    [\n    [\n        3,\n        12,\n        24,\n    ],\n    [\n        123,\n        -5453,\n        141245,\n    ],\n    [\n        -13,\n        -6,\n        124,\n    ],\n]\n)\nassert solution(\n[\n    [123, -1, 2143435, 4],\n    [123, 11, 141245, 4],\n    [\n        134,\n        -5453,\n        141245,\n    ],\n    [\n        -13,\n        -6,\n        124,\n    ],\n]\n)\nassert solution(\n[\n    [123, -1, 2143435, 4],\n    [123, 11, 141245, 4],\n    [\n        134,\n        -5453,\n        141245,\n    ],\n    [\n        -13,\n        -6,\n        124,\n    ],\n]\n)\nassert solution(\n[\n    [\n        123,\n        -1,\n        2143435,\n    ],\n    [\n        123,\n        11,\n        141245,\n    ],\n    [\n        134,\n        -5453,\n        141245,\n    ],\n    [\n        -13,\n        -6,\n        124,\n    ],\n]\n)\nassert solution(\n[\n    [\n        123,\n        -1,\n        2143435,\n    ],\n    [\n        123,\n        11,\n        141245,\n    ],\n    [\n        134,\n        -5453,\n        141245,\n    ],\n    [\n        -13,\n        -6,\n        124,\n    ],\n]\n)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2 30 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"inf\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 2 30 4\"\n    ) == \"3\"\nassert solution(\n    \"123 1 2143435 4\"\n    ) == \"12\"\nassert solution(\n    \"54343 -13 6 124\"\n    ) == \"13\"\nassert solution(\n    \"123 11 -5453 141245\"\n    ) == \"141245\"\nassert solution(\n    \"123 1 2143435 4\"\n    ) == \"45343\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"inf\"\n\n\n\n\n\nclass Solution:\n    def countProgression(self, num: int, prod_list: List[int]) -> str:\n        def is_bad(n):\n            m = 1\n            for i in prod_list:\n                m = m * i\n                if n > m:\n                    return True\n            return False\n\n        if num == 0:\n            return \"inf\"\n\n        elif num == 1:\n            return \"0\"\n\n        elif num == 2:\n            return \"0\"\n\n        else:\n            if is_bad(num):\n                return \"inf\"\n            else:\n                prod_list.append(num)\n                result = self.countProgression(num - prod_list[-1], prod_list)\n                prod_list.pop()\n                return result\n\n\n    def countProgression_v1(self, num: int, prod_list: List[int]) -> str:\n        m = 0\n        for i in range(1, len(prod_list)):\n            if prod_list[i - 1] == prod_list[i]:\n                m = m + 1\n        return str(m)\n\n\n    def countProgression_v2(self, num: int, prod_list: List[int]) -> str:\n        p = prod_list[0]\n        m = 1\n        for i in range(1, len(prod_list)):\n            p = p * prod_list[i]\n            if p == num:\n                m += 1\n        return str(m)\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 3 4\") == \"3\"\nassert solution(\"123 1 2143435 4\") == \"4\"\nassert solution(\"54343 -13 6 124\") == \"0\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"inf\"\nassert solution(\"10 1 2 4 5\") == \"3\"\nassert solution(\"10 1 2 4 5 6 7 8 9 10\") == \"6\"\nassert solution(\"10 1 2 4 5 6 7 8 9\") == \"inf\"\nassert solution(\"1 12 34 56 63\") == \"inf\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"inf\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\n        \"3 2 30 4\",\n        \"6 14 25 48\",\n        \"123 1 2143435 4\",\n        \"123 11 -5453 141245\",\n    ]\n) == \"inf\""
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"inf\"\n\"\"\"\nimport sys\nimport math\nfrom itertools import count"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"w\""
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\n\"\"\""
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"..w..w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"..w..\"\nassert solution(\"4\") == \"..w..\"\nassert solution(\"5\") == \"..w..\"\nassert solution(\"6\") == \"..w..\"\nassert solution(\"7\") == \"..w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"+\"\n\nassert solution(stdin) == \"+\"\nassert solution(stdin) == \"+\"\nassert solution(stdin) == \"+\"\nassert solution(stdin) == \"+\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"..+..\"\nassert solution(stdin) == \"w....\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"8 4\"\n    ) == \"..w..w..\"\nassert solution(\n    \"5 6\"\n    ) == \"......\"\nassert solution(\n    \"2 6\"\n    ) == \"..+..\"\nassert solution(\n    \"2 4\"\n    ) == \"..+..\"\nassert solution(\n    \"2 3\"\n    ) == \"..w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"..+..+..\"\nassert solution(stdin) == \"..+..+..\"\nassert solution(stdin) == \"..+..+..\"\nassert solution(stdin) == \"..+..+..\"\nassert solution(stdin) == \"..+..+..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '..w..'\nassert solution(stdin) == '...w..'\nassert solution(stdin) == 'w..w..'\nassert solution(stdin) == 'w..w..'\nassert solution(stdin) == '...w..'\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"YES\"\nassert solution(\"100\") == \"YES\"\nassert solution(\"15\") == \"NO\"\nassert solution(\"9960594\") == \"NO\"\nassert solution(\"2551\") == \"YES\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('15') == 'YES'\nassert solution('10') == 'NO'\nassert solution('9960594') == 'YES'\nassert solution('2551') == 'YES'\nassert solution('2557') == 'NO'\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), 'First test failed!'\nassert solution(stdin), 'Second test failed!'\nassert solution(stdin), 'Third test failed!'\nassert solution(stdin), 'Fourth test failed!'\nassert solution(stdin), 'Fifth test failed!'\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        \"7\",\n        \"2\",\n        \"3\",\n        \"9960594\",\n        \"2551\",\n        \"2557\",\n        \"9960594\",\n        \"2551\",\n        \"2557\",\n        \"2557\",\n        \"2557\",\n        \"2557\",\n        \"2557\"\n    ) == \"YES\"\n\nassert solution(\n        \"100\",\n        \"2\",\n        \"3\",\n        \"99960594\",\n        \"2551\",\n        \"2557\",\n        \"99960594\",\n        \"2551\",\n        \"2557\",\n        \"2557\",\n        \"2557\",\n        \"2557\"\n    ) == \"NO\"\n\nassert solution(\n        \"15\",\n        \"4\",\n        \"8\",\n        \"9999000\",\n        \"2551\",\n        \"2557\",\n        \"9999000\",\n        \"2551\",\n        \"2557\",\n        \"2557\",\n        \"2557\",\n        \"2557\"\n    ) == \"YES\"\n\nassert solution(\n        \"9960594\",\n        \"2551\",\n        \"2557\",\n        \"9999000\",\n        \"2551\",\n        \"2557\",\n        \"9999000\",\n        \"2551\",\n        \"2557\",\n        \"2557\",\n        \"2557\",\n        \"2557\"\n    ) == \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 'YES'\n\nassert solution(input) == 'NO'\n\"\"\""
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7\") == \"YES\"\nassert solution(\"100\") == \"YES\"\nassert solution(\"15\") == \"NO\"\nassert solution(\"9960594\") == \"YES\"\nassert solution(\"2551\") == \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4 5\"), \"No\"\nassert solution(\"5 4 5\"), \"Yes\"\nassert solution(\"1 1\"), \"Yes\"\nassert solution(\"5\"), \"No\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"2\",\"3\",\"2\",\"1\",\"4\",\"1\",\"1\",\"1\"]\n) == \"NO\"\nassert solution(\n    [\"4\",\"1\",\"1\"]\n) == \"YES\"\nassert solution(\n    [\"4\",\"3\",\"3\",\"2\",\"3\"]\n) == \"YES\"\nassert solution(\n    [\"3\",\"2\",\"3\"]\n) == \"NO\"\nassert solution(\n    [\"3\",\"1\",\"4\"]\n) == \"YES\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\""
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1-10\") == \"ten\"\nassert solution(\"-1-5\") == \"minusfive\"\nassert solution(\"2-99\") == \"twenty\"\nassert solution(\"zero\") == \"zero\"\nassert solution(\"-2\") == \"twenty-nine\""
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == \"zero\", '0'\nassert solution(1) == \"one\", '1'\nassert solution(2) == \"two\", '2'\nassert solution(3) == \"three\", '3'\nassert solution(4) == \"four\", '4'\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( \"6\" ) == \"six\"\nassert solution( \"99\" ) == \"ninety-nine\"\nassert solution( \"20\" ) == \"twenty\"\nassert solution( \"27\" ) == \"-27\"\nassert solution( \"29\" ) == \"27\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"six\"\nassert solution(\"99\") == \"ninety-nine\"\nassert solution(\"20\") == \"twenty\"\nassert solution(\"-\") == \"-ten\"\nassert solution(\"one\") == \"one\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(9) == \"nineteen-nineteen\"\nassert solution(8) == \"twenty-twenty\"\nassert solution(11) == \"twenty-five-twenty\"\nassert solution(0) == \"zero\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"ninety-nine\"\nassert solution(stdin) == \"twenty\"\nassert solution(stdin) == \"zero\"\nassert solution(stdin) == \"one\"\nassert solution(stdin) == \"two\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6) =='six'\nassert solution(99) == 'ninety-nine'\nassert solution(20) == 'twenty'\nassert solution(0) == '-'\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == '0'\nassert solution(2) == '10'\nassert solution(3) == '20'\nassert solution(4) == '01'\nassert solution(5) == '-11'\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"five\"\nassert solution(\"-1\") == \"-1\"\nassert solution(\"6\") == \"six\"\nassert solution(\"20\") == \"twenty\"\nassert solution(\"99\") == \"ninety-nine\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"four\") == \"twenty\"\nassert solution(\"20\") == \"ninety-nine\"\nassert solution(\"four\") == \"twenty\"\nassert solution(\"four-\") == \"ninety-nine\"\nassert solution(\"four-\") == \"twenty\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"3\", \"4\", \"6\", \"9\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"0\"\nassert solution([\"2\", \"5\", \"8\", \"9\", \"10\"]) == \"0\"\nassert solution([\"3\", \"7\", \"9\", \"10\"]) == \"0\"\nassert solution([\"3\", \"5\", \"8\", \"9\", \"10\", \"11\"]) == \"0\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '0'\n\n-----Constraints-----\n1 \u2264 n \u2264 100\n-105 \u2264 a_i <= 10^3\n1 \u2264 a_1 < a_2 <... <= a_n\n\n\"\"\"\n\nfrom sys import stdin\nimport time\nstart_time = time.time()\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\n\"\"\""
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().strip()) == \"2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5 6 9') == '2'\nassert solution('1 2 3 4 5 6 9') == '4'\n\n\n-----Advanced-----\n\n1. The rule of symmetry has been undetermined. In theory, all the elements can be removed in the same manner, but in this case, the order has to be chosen from the input.\n\n2. The element a_i is removed from the array as well as from the position $i$ using the formula given above.\n\n3. The element a_i is removed from the array as well as from the position $i$ using the formula given above.\n\n4. The element a_i is removed from the array as well as from the position $i$ using the formula given above.\n\nThe solution has been solved with a solution method, which is repeated until it succeeds. The third input line of the input contains an integer $k$ (1\u2264k\u226410^4) \u2013 the number of elements in the array.\n\nInput:\n1\n1 2 3 4 5 6 9\n\nOutput:\n2\n1 3 4\n4\n4\n4\n\n\n-----IMPORTANT-----\n\nWhen the JATC has been removing an element, it is more efficient to remove all elements in the array to form the solution, and as a consequence, the remaining elements are removed.\n\nBy construction, the JATC will be able to work with any array, even if the number of elements is less than $10^3$. In order to solve this problem, you'll need to use the same approach to solve the problem.\n\n\n-----General approach-----\n\n1. Create a function solution() that accepts one parameter, $k$ and returns the last $k$ elements in the array.\n\n2. The only change is that you need to keep the elements in the array, not change their index.\n\n3. The function solution() is repeated as many times as $k$ to get the last $k$ elements.\n\n4. Write a function solution() that accepts an array and an integer $k$ as parameters, and returns the last $k$ elements.\n\n5. The algorithm is as follows:\n    (1) Define a new empty list that will contain the result of the function solution() (see the example).\n    (2) Write a for loop that iterates through the elements of the array, until the elements are in the form $a_i$ or $a_i$ to the left of the $i$ element, and add it to the result.\n    (3) Iterate through the array, one by one.\n    (4) The result of the loop is in the format that the last $k$ elements are in the form $a_i$.\n    (5) Write a variable that is an empty list that will contain the result of the for loop.\n    (6) If the elements are in the form $a_i$ or $a_i$ to the left of the $i$ element, the list is updated as follows.\n    (7) If the elements are in the form $a_i$ or $a_i$ to the left of the $i$ element, the list is updated as follows.\n    (8) If the elements are in the form $a_i$ or $a_i$ to the left of the $i$ element, the list is updated as follows.\n\n6.\n\n7.\n\n8.\n\n-----Output-----\n\nReturn the last $k$ elements.\n\nimport math"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(6, [[1, 3, 4, 5, 6, 9]]) == \"0\"\nassert solution(3, [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0, 0, 0, 0, 0, 0, 0], []]) == \"0\"\nassert solution(5, [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0, 0, 0, 0, 0, 0, 0], []]) == \"0\"\nassert solution(3, [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0, 0, 0, 0, 0, 0, 0], []]) == \"0\"\nassert solution(5, [[1, 2, 3, 4, 5, 6, 7, 8], [9, 0, 0, 0, 0, 0, 0, 0], []]) == \"0\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n'''\n\nimport math\n\nn, a = map(int, input().split())\njata = [int(x) for x in input().split()]"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4\") == 2\nassert solution(\"6\") == 3\nassert solution(\"7\") == 2\nassert solution(\"12\") == 4\nassert solution(\"17\") == 7\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\"\nimport math\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == 1\nassert solution(1) == 2\nassert solution(2) == 3\nassert solution(3) == 4\nassert solution(4) == 5\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n5\n2 3 2 1\n\nOutput\n4\n\nInput\n6\n2 2 2 2 2\n\nOutput\n3\n\n\n\n-----Notes-----\n\nComplexity\nTime: O(n)\nSpace: O(1)\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.currentDay = 0\n        self.answer = 1\n\n    def solve(self, n: int, a: List[int]) -> int:\n        for day in range(1, n + 1):\n            if len(a) < day:\n                return -1\n            while a[self.currentDay] == day:\n                self.currentDay += 1\n                self.answer += 1\n                if self.currentDay == len(a):\n                    return day - 1\n        return -1"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 9 3\\n\"\n    \"1 9 3\\n\"\n    \"8 6 7\\n\"\n    \"4 2 5\\n\"\n    \"4 1 5\\n\"\n    \"3 3 1\\n\"\n    \"3 2 5\\n\"\n    \"3 3 5\\n\"\n    \"2 2 2\\n\"\n    \"2 3 2\\n\"\n    \"1 3 1\\n\"\n    \"1 3 2\\n\"\n    \"1 2 3\\n\"\n    \"2 2 3\\n\"\n    \"3 3 2\\n\"\n    \"3 2 3\\n\"\n    \"1 2 1\\n\"\n    \"1 3 1\\n\"\n    \"1 2 2\\n\"\n    \"1 3 3\\n\"\n    \"1 4 3\\n\"\n    \"1 5 3\\n\"\n    \"2 4 1\\n\"\n    \"2 4 3\\n\"\n    \"2 3 2\\n\"\n    \"2 4 2\\n\"\n    \"3 3 1\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3 3\\n\"\n    \"3 3"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()), \"\"\n\n\"\"\""
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 8 6 7 4 2 5\") == \"12 1\"\nassert solution(\"8 6 7 7 4 2 5\") == \"9\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"12\"\n\nassert solution(input()) == \"23\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"8\"\n\nassert solution(input()) == \"6\""
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 10 4 8 1 7 2 9\") == '12 1'\nassert solution(\n    \"3 8 5 4 2 7 6\") == '12 1'\nassert solution(\n    \"3 7 5 3 4 8 2 9\") == '12 1'\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"12\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12, 'incorrect output'\n\"\"\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '12 1'\nassert solution(stdin) == '12'\nassert solution(stdin) == '12'\nassert solution(stdin) == '12'\nassert solution(stdin) == '12'\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"12\""
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution\u0434"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2), \"1\"\nassert solution(0), \"1\"\nassert solution(1), \"1\"\nassert solution(32), \"1\"\nassert solution(99), \"1\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(100010001) == \"yes\"\nassert solution(100) == \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"yes\", \"should be yes\"\nassert solution(stdin) == \"no\", \"should be no\"\n\n-----Constraints-----\n1 <= s.length <= 100\ns consists of characters '0' or '1'.\n\n-----Time complexity-----\nO(n) for n = len(s)\n\nO(1) for removing digits\nO(n) for removing digits\nO(n) for calculating number of digits in s\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"100010001\") == \"yes\"\nassert solution(\"100010010\") == \"yes\"\nassert solution(\"100011001\") == \"no\"\n\n\n-----Constraints-----\n1 <= s.length <= 10^5\n\n\n-----TODO-----\nFixer in solution(a) -> solution(a)\nFixer in solution(a, b) -> solution(a, b)\nFixer in solution(a, c) -> solution(a, c)"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"no\""
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"11111101\") == \"no\"\nassert solution(\"11111110\") == \"no\"\nassert solution(\"111111011\") == \"yes\"\nassert solution(\"1111111111\") == \"yes\"\nassert solution(\"111111111111\") == \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(100010001) == \"yes\"\nassert solution(100) == \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"111101111\"\n) == \"no\", \"solution(\\\"111101111\\\")\"\n\"\"\"\n\nimport re\nimport sys\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"yes\"\nassert solution(inp) == \"no\"\n\nclass Solution:\n    def solution(self,inp: str) -> str:\n        def is_number(s):\n            try:\n                int(s)\n            except ValueError:\n                return False\n            else:\n                return True\n\n        def check_num(s):\n            for i, c in enumerate(s):\n                if c not in \"01\" or i == len(s)-1:\n                    return False\n            return True\n        \n        def remove_digits(s):\n            return s.replace(\"1\", \"\").replace(\"0\", \"\")\n        \n        def check_num_rem(s):\n            return s.replace(\"1\", \"\").replace(\"0\", \"\").isnumeric()\n        \n        def check_num_rem_is_not_binary(s):\n            return check_num_rem(remove_digits(s))\n        \n        def remove_digits_is_binary(s):\n            return remove_digits(s).replace(\"1\", \"\").replace(\"0\", \"\").isnumeric()\n        \n        def solution(inp):\n            s = \"\"\n            for i in range(1, len(inp)):\n                if is_number(inp[i-1]):\n                    if check_num(inp[i-1]):\n                        s = s[:-1] + inp[i-1] + s[-1]\n                        return remove_digits(s)\n                    else:\n                        s = s[:-1] + inp[i-1] + s[-1]\n                        return remove_digits(s)\n                else:\n                    if inp[i-1] == \"0\":\n                        s = s[:-1] + inp[i-1] + s[-1]\n                        return remove_digits(s)\n                    else:\n                        s = s[:-1] + inp[i-1] + s[-1]\n                        return remove_digits(s)\n                    \n        def check_num_rem_is_binary(inp):\n            if inp.isnumeric():\n                return remove_digits_is_binary(inp)\n            else:\n                return False\n        \n        def solution(inp):\n            s = remove_digits_is_binary(inp)\n            return \"yes\" if s == \"yes\" else \"no\"\n            \n        return solution(inp)\n        \n        \n        \n        \n        "
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aacceeggiiklmmooqqssuwuuxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n\"\"\""
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(inp) == \"cdefghijklmnopqrstuvwxyz\"\nassert solution(inp) == \"eghijklmnopqrstuvwxyz\"\nassert solution(inp) == \"a\"\nassert solution(inp) == \"abb\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input().strip()\n) == \"abcdefghijklmnopqrstuvwxyz\"\n\nassert solution(\n    input().strip().replace(\" \",\"\").replace(\"?\",\"\").replace(\".\", \"\")\n) == \"abcdefghijklmnopqrstuvwxyz\"\n\nprint(\"The answer is correct!\")\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"thereisnoanswer\"\nassert solution(stdin) == \"-1\"\n'''\n\nclass Solution:\n    def __init__(self):\n        self.i = 0\n        self.j = 0\n\n    def last_word(self, s: str) -> str:\n        arr = [i for i in range(26)]\n        arr.append(65)\n        return chr(arr[self.j] + self.i)\n\n    def delete_word(self, st, start):\n        if start == len(st) - 1:\n            return \"\"\n        for i in range(start, len(st)):\n            j = start\n            while True:\n                if j == start:\n                    break\n                if ord(st[i]) - ord(st[j]) == 1:\n                    st = st[:i] + st[j + 1:]\n                    break\n                j += 1\n        return st\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aacceegip\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n\"\"\""
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(input()) == \"abcdebcdefghijklmnopqrstuvwxyz\"\nassert solution(input()) == \"abcdebcdefghijklmnopqrstuvwxyz\"\nassert solution(input()) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(input()) == \"abcdebcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aacceegiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n    ) == \"abcdefghijklmnopqrstuvwxyz\"\n    pass\n\nassert solution(\n    \"thereisnoanswer\"\n    ) == \"abcdefghijklmnopqrstuvwxyz\"\n    pass\n\nassert solution(\n    \"asdccdddddd\"\n    ) == \"asdccdddddd\"\n    pass\n\nassert solution(\n    \"jghijklmnopqrstuvwxyz\"\n    ) == \"ghijklmnopqrstuvwxyz\"\n    pass\n\nassert solution(\n    \"ljklmnopqrstuvwxyz\"\n    ) == \"jghijklmnopqrstuvwxyz\"\n    pass"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\"), \"The answer to the word abcdefghijklmnopqrstuvwxyz is not a valid sub sequence.\\n\"\nassert solution(\"thereisnoanswer\"), \"The answer to the word abcdefghijklmnopqrstuvwxyz is not a valid subsequence.\\n\"\nassert solution(\"thereisnoanswer\"), \"The answer to the word abcdefghijklmnopqrstuvwxyz is not a valid subsequence.\\n\"\nassert solution(\"aacceegihiikkmmooqqssuuwwy\"), \"The answer to the word abcdefghijklmnopqrstuvwxyz is not a valid sub sequence.\\n\"\nassert solution(\"thereisnoanswer\"), \"The answer to the word abcdefghijklmnopqrstuvwxyz is not a valid subsequence.\\n\"\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '32.833333333'\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3.0000000000'\nassert solution(stdin) == '1.0000000000'\nassert solution(stdin) == '2.0000000000'\nassert solution(stdin) == '2.0000000000'\nassert solution(stdin) == '3.0000000000'\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,1) == 1\nassert solution(1,2) == 2\nassert solution(1,3) == 2\nassert solution(1,4) == 3\nassert solution(2,1) == 2\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\nassert solution(input
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 2 3\") == \"2.0000000000\"\nassert solution(\"12 17 9 40\") == \"32.8333333333\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 1 2 3') == '32.8333333333333333'\nassert solution('12 17 9 40') == '32.8333333333'"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2.5'\nassert solution(stdin) == '2.6416'\nassert solution(stdin) == '2.7'\nassert solution(stdin) == '2.8'\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"20.0\"\nassert solution(\"2 3 5 6 9 10\") == \"3.33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"32.8333333333333\"\nassert solution(stdin) == \"32.8333333333333\"\nassert solution(stdin) == \"32.8333333333333\"\nassert solution(stdin) == \"32.8333333333333\"\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 2) == \"2\"\nassert solution(12, 17, 9, 3) == \"32.83333333333\"\nassert solution(12, 17, 9, 3, 5) == \"32.83333333333\"\nassert solution(8, 8, 8, 8) == \"8.0000000000\"\nassert solution(6, 2, 2, 4) == \"2\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"0 3 4 2 4 5 -3 6 -3 -3 -3 -3 0 -3 -3 -3 -3 -3 -3 0 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 0 0 0 -3 0 0 0 0 -3 0 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 0 0 0 -3 0 0 0 0 0 -3 0 -3 -3 -3 -3 -3 -3 -3 -3 -3 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 -3 -3 -3 -3 -3 -3 -3 -3 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0 0 0 0 -3 0 0 0"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    f=\n    [\n        [2, 2],\n        [2, 2],\n        [2, 2]\n    ],\n    s=\n    [\n        [3],\n        [3],\n        [3]\n    ],\n    a=\n    [\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10]\n    ],\n    s=\n    [\n        [3],\n        [3],\n        [3]\n    ],\n    a=\n    [\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10],\n        [-10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -10, -"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-3 -3 2'\nassert solution(stdin) == '0'"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-3 2 2 -3 2 2'\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"-3 -3 -3 2\"\nassert solution(stdin) == \"-3 -3 2\"\nassert solution(stdin) == \"-3 -3 2\"\nassert solution(stdin) == \"-3 -3 2\"\nassert solution(stdin) == \"-3 -3 2\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2 1 2 2\") == \"-3 2 -3 2\"\nassert solution(\"3 3 -3\") == \"3 -3 2\"\nassert solution(\"3 2 3 2 3\") == \"-3 2 2 2\"\nassert solution(\"3 -3 -3\") == \"-3 2 -3 2\""
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"2\", \"2\", \"2\", \"2\"]) == \"0\"\nassert solution([\"1\", \"2\", \"1\", \"1\", \"1\"]) == \"-1\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"3\", \"3\", \"3\", \"3\", \"3\"]) == \"0\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"-3 -3 -3 -3\"\n\nassert solution(stdin) == \"-3 -3 2\"\n\nassert solution(stdin) == \"-3 2 -3\"\n\nassert solution(stdin) == \"-3 3 -3\"\n\nassert solution(stdin) == \"-3 3 -3\""
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-3 -3 2'\nassert solution(stdin) == '-3 -3 2'\nassert solution(stdin) == '-3 -3 2'\nassert solution(stdin) == '-3 -3 2'\nassert solution(stdin) == '-3 -3 2'\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0, 0) == -1, \"Should be -1\"\nassert solution(0, 1) == -1, \"Should be -1\"\nassert solution(1, 2) == 1, \"Should be 1\"\nassert solution(2, 3) == -1, \"Should be -1\"\nassert solution(3, 4) == 6, \"Should be 6\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == out\n\"\"\""
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 4 5 6 7 8 9 10 20\"\n) == \"10\"\n\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, 2) == -1\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^9\n1 \u2264 k \u2264 10^9\n\n\n-----Time complexity-----\nO(lg(n) * lg(k))\n\nO(lg(n) * lg(k))\n\nO(lg(n)) * lg(k)\n\nn: input value; k: input value\n\nn: length of input; k: length of input\n\nn: input value; k: length of input\n\nn: output value\n\nn: length of output\n\nn: output value\n\nn: length of output\n\n\n-----Time complexity-----\nO(lg(n) * lg(k))\n\nO(lg(n) * lg(k))\n\nO(lg(n)) * lg(k)\n\nn: input value; k: input value\n\nn: length of input; k: length of input\n\nn: output value\n\nn: length of output\n\nn: output value\n\nn: length of output\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^9\n0 \u2264 k \u2264 10^9\n\n[input]\n\nA positive integer n.\n\n\n[output]\n\nA positive integer k.\n\n\n[examples]\n\n>>> import sys\n>>> sys.setrecursionlimit(10**7)\n>>> n = int(input())\n>>> k = int(input())\n>>> print(solution(n,k))\n-1\n\n\n>>> import sys\n>>> sys.setrecursionlimit(10**7)\n>>> n = int(input())\n>>> k = int(input())\n>>> print(solution(n,k))\n6\n\n\n>>> import sys\n>>> sys.setrecursionlimit(10**7)\n>>> n = int(input())\n>>> k = int(input())\n>>> print(solution(n,k))\n-1\n\n\n>>> import sys\n>>> sys.setrecursionlimit(10**7)\n>>> n = int(input())\n>>> k = int(input())\n>>> print(solution(n,k))\n6\n\n\n>>> import sys\n>>> sys.setrecursionlimit(10**7)\n>>> n = int(input())\n>>> k = int(input())\n>>> print(solution(n,k))\n-1\n\n\n>>> import sys\n>>> sys.setrecursionlimit(10**7)\n>>> n = int(input())\n>>> k = int(input())\n>>> print(solution(n,k))\n6\n\n\n>>> import sys\n>>> sys.setrecursionlimit(10**7)\n>>> n = int(input())\n>>> k = int(input())\n>>> print(solution(n,k))\n-1\n\n\"\"\""
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == -1\n\n\n-----Constraints-----\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n-----Time complexity-----\n\nO(log n)\n\n\n-----Space complexity-----\n\nO(1)\n\n-----Submissions-----\n\nSample Input\n\n4 2\n\nSample Output\n\n2\n\nSample Explanation\n\n4 and 5 is the k-th smallest divisor.\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 1--------\n\nInput\n\n3\n\nOutput\n\n2\n\nExample 2--------\n\nInput\n\n4\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 1--------\n\nInput\n\n12 5\n\nOutput\n\n6\n\n\n------Constraints------\n\n1 <= n <= 10^9\n\n1 <= k <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 2--------\n\nInput\n\n12 3\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(1)\n\n\n------Example 3--------\n\nInput\n\n12 5\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 4--------\n\nInput\n\n3 4\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 5--------\n\nInput\n\n10 20\n\nOutput\n\n5\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 6--------\n\nInput\n\n5 5\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 7--------\n\nInput\n\n3 5\n\nOutput\n\n2\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 8--------\n\nInput\n\n6 7\n\nOutput\n\n6\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 9--------\n\nInput\n\n12 5\n\nOutput\n\n2\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 10--------\n\nInput\n\n12 3\n\nOutput\n\n1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 11--------\n\nInput\n\n12 3\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 12--------\n\nInput\n\n3 7\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 13--------\n\nInput\n\n3 7\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 14--------\n\nInput\n\n4 9\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 15--------\n\nInput\n\n5 7\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 16--------\n\nInput\n\n6 7\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 17--------\n\nInput\n\n4 10\n\nOutput\n\n0\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules------\n\nThe input will be string.\n\n\n------Space Complexity------\n\nO(1)\n\n\n------Time Complexity------\n\nO(logn)\n\n\n------Example 18--------\n\nInput\n\n9 3\n\nOutput\n\n-1\n\n\n------Constraints------\n\n1 <= k <= 10^9\n\n1 <= n <= 10^9\n\n\n------Coding Rules"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 2) == 2\nassert solution(5, 2) == -1\nassert solution(12, 5) == 6\n\nInput\n6\n\nOutput\n6\n\nInput\n25\n\nOutput\n-1\n\nInput\n8\n\nOutput\n8\n\n\"\"\"\nn, k = map(int, input().split())\na = list(map(int, input().split()))\na.sort()\np = a[n - 1]\nfor i in range(n - 1):\n    if a[i] % p == 0:\n        print(p, end ='')\n        break\n    else:\n        p = a[i]"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == -1\nassert solution(input()) == 6\nassert solution(input()) == -1\nassert solution(input()) == 6\nassert solution(input()) == -1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == -1\n\n\nExample 2:\n\nInput\n6 2\n\nOutput\n3\n\nInput\n5 4\n\nOutput\n3\n\nInput\n20 5\n\nOutput\n9\n\n\n-----Constraints-----\n\n1 <= n <= 10^9\n1 <= k <= 10^9\n\n-----Submissions-----\n24 ms\n\n\"\"\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"4 2\"\n) == 2\nassert solution(\"5 3\") == -1\nassert solution(\"12 5\") == 6\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1 1 2 3 4 5\") == \"87\"\nassert solution(\"0 1 1 3 5 6 8\") == \"98\"\n\nassert solution(\"3 7 1 0 1 1\") == \"87\"\nassert solution(\"2 4 0 3 0 1\") == \"98\"\n\nassert solution(\"3 0 3 3 0 4\") == \"98\"\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '88'\n\n-----Constraints-----\n1 <= n <= 10^3\n\nElements of stdin are from 0 to 10^9.\n\nReferences\nhttps://www.geeksforgeeks.org/python-search-strings-in-a-string/\nhttps://www.geeksforgeeks.org/bit-manipulation-in-python/\nhttps://www.geeksforgeeks.org/python-program-for-breaking-a-string-in-an-array/\n\n\n------Constraints------\n1 <= n <= 10^9\n\nTime Limit: 1 sec\n\n\n------Sample Cases-------\nSample Input 1:\n\n3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n\nSample Output 1:\n\n88\nSample Input 2:\n\n5\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 6 7 9\n\nSample Output 2:\n\n98\nExplanation\n\nMasha can build all numbers from 1 to 100, but she can't make 100 because there are no two cubes with digit 8.\n\"\"\"\nimport unittest\nfrom sys import stdin"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 87, 'Invalid input.'\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 1) == \"87\"\nassert solution(3, 2) == \"98\"\nassert solution(3, 3) == \"98\"\nassert solution(3, 4) == \"98\"\nassert solution(3, 5) == \"98\"\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(87)\n\n\n\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == '87'\nassert solution(4) == '98'\nassert solution(5) == '87'\n\nassert solution(6) == '98'\nassert solution(7) == '97'\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"88\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 3 * 10^4\n1 <= stdin[i] <= 10^9\n1 <= a_{i}_{j} < 9\n\nInput Format\n\nThe first line contains the integer n.\nThe next n lines contains 6 integers a_{i}_{j} (0 \u2264 a_{i}_{j} \u2264 9), separated by spaces.\n\n\nOutput Format\n\nPrint single integer\u00a0\u2014 maximum number x such Masha can make any integers from 1 to x using her cubes or 0 if Masha can't make even 1.\n\"\"\"\n\nclass Solution:\n    def largestMasha(self, M, n):\n        \"\"\"\n        :type M: str\n        :type n: int\n        :rtype: str\n        \"\"\"\n        cubes = []\n        for i in range(1, n+1):\n            for j in range(1, 10):\n                cubes.append(j*i)\n                \n        return \"\".join(map(str, cubes))\n        pass"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 0 0\") == \"88\"\nassert solution(\"0 0 0 0 1\") == \"88\"\nassert solution(\"0 0 0 1 0\") == \"88\"\nassert solution(\"0 0 1 0 0\") == \"88\"\nassert solution(\"0 0 1 0 1\") == \"88\"\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"87\"\n\n\n-----Constraints-----\n0 \u2264 n \u2264 3\n0 \u2264 a_{i}_{j} \u2264 9\n\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"87\"\n\"\"\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"123456789\") == \"123456789\"\nassert solution(\"1234567890001\") == \"1234567890001\"\nassert solution(\"1234567890123\") == \"1234567890123\"\nassert solution(\"123456789012345\") == \"123456789012345\"\nassert solution(\"1234567890123456789\") == \"1234567890123456789\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"375 4\") == \"30000\"\nassert solution(\"10001\") == \"10000\"\nassert solution(\"0\") == \"0\"\nassert solution(\"00101\") == \"1\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 30000\nassert solution(stdin) == 10000\nassert solution(stdin) == 38101\nassert solution(stdin) == 123456789\nassert solution(stdin) == 12345678900000000"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '10000'\nassert solution(input()) == '10000'\nassert solution(input()) == '10000'\nassert solution(input()) == '10000'\nassert solution(input()) == '10000'\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"375\") == \"375\"\nassert solution(\"10000\") == \"10000\"\nassert solution(\"38101\") == \"38101\"\nassert solution(\"123456789\") == \"123456789\"\nassert solution(\"123456789\") == \"123456789\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(10,4) == 1\nassert solution(8,2) == 3\nassert solution(5,1) == 2\nassert solution(5,2) == 2\nassert solution(10,1) == 1"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"12345678900000000\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(375, 4) == 30000\nassert solution(10000, 1) == 1000000\nassert solution(123456789, 8) == 12345678900000000\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\n\nassert solution(stdin) == 12000000"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"123456789 8\") == \"12345678900000000\"\nassert solution(\"38101 0\") == \"38101\"\nassert solution(\"123456789\") == \"123456789\"\nassert solution(\"\") == \"\"\nassert solution(\"8\") == \"8\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"3 0 1\") == \"0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"1 1 1\"\nassert solution(\"3 3\") == \"1 1 1\"\nassert solution(\"3 3\") == \"0 0 0\"\nassert solution(\"3 3\") == \"0 0 0\"\nassert solution(\"3 3\") == \"0 0 0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    inp := [\n        \"3 3\",\n        \"1 1 1\",\n        \"1 1 1\",\n        \"0 1 1\",\n        \"0 0 1\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        \"0 0 0\",\n        "
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3,3) == 0\nassert solution(3,3) == 0\nassert solution(3,3) == 0\nassert solution(3,3) == 0\nassert solution(3,3) == 0\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, [3, 3, 3, 1, 1, 1, 1, 1, 1, 0]) == \"1\"\nassert solution(2, [3, 3, 3, 0, 0, 0, 0, 0, 0, 0]) == \"0\"\nassert solution(3, [3, 3, 3, 0, 0, 0, 0, 0, 0, 1]) == \"0\"\nassert solution(4, [3, 3, 3, 0, 0, 0, 0, 0, 0, 1]) == \"0\"\nassert solution(5, [3, 3, 3, 0, 0, 0, 0, 0, 0, 1, 0]) == \"0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3,3) == '0'\nassert solution(3,3) == '0'\nassert solution(3,3) == '1'\nassert solution(3,3) == '1'\nassert solution(3,3) == '1'\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3 3\", \"1 1 1\", \"1 1 1\", \"0 1 1\", \"0 0 1\", \"0 0 1\", \"0 0 1\", \"0 0 1\", \"0 0 1\"]) == \"3\"\nassert solution([\"3 3\", \"1 0 1\", \"1 0 1\", \"0 0 1\", \"0 0 1\", \"0 0 1\", \"0 0 1\", \"0 0 1\", \"0 0 1\"]) == \"0\"\nassert solution([\"3 3\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\"]) == \"0\"\nassert solution([\"3 3\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\", \"0 0 0\"]) == \"0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"3 3\") == \"3\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.27408425418 0.409668298468 0.619546480887\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0.35\""
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\") == 0.222222222222\nassert solution(\"2 1 2\") == 0.073333333333\nassert solution(\"1 1 3\") == 0.133333333334\nassert solution(\"1 1 4\") == 0.056666666666\nassert solution(\"1 3 3\") == 0.111111111111\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0.61538461538\"\nassert solution(stdin) == \"0.57142857143\"\nassert solution(stdin) == \"0.42244897465\"\nassert solution(stdin) == \"0.18285714286\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0.300000000000 0.057142857143 0.285714285714\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 2 2\"\n\"\"\"\nimport math"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0.29292929293 0.285714285714'\nassert solution(stdin) == '0.214748364719 0.0'\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0.0'\nassert solution(stdin) == '0.0'\nassert solution(stdin) == '0.0'\nassert solution(stdin) == '0.0'\nassert solution(stdin) == '0.0'\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '0.657142857143 0.285714285714'\n\"\"\""
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3') == \"0.56\"\nassert solution('1 4 3') == \"0.85\"\nassert solution('2 3 2') == \"0.34\"\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n----Constraints----\n\n1 <= stdin.length <= 10^5\n0 <= l_1 <= r_1 <= 10^19\n0 <= l_2 <= r_2 <= 10^19\n1 <= k <= 10^18\n\nSolution\n\n10^18 < l_1, r_1 <= 10^19 < l_2, r_2 <= 10^19 < l_3, r_3 <= 10^19 < l_4, r_4 <= 10^19\n\n\"\"\"\n\nclass Solution:\n    def prime_number(self, n):\n        # return False if n <= 1 else True if n % 2 == 0 else n % 3 == 0\n        # print(n % 2 == 0 and n % 3 == 0)\n        if n <= 1:\n            return False\n        if n % 2 == 0 and n % 3 == 0:\n            return True\n        return self.prime_number(n // 2) or self.prime_number(n // 3)\n        \n    def countPrimes(self, n):\n        if n <= 1:\n            return 0\n        if n == 2:\n            return 1\n        if n % 2 == 0 and n % 3 == 0:\n            return 2\n        return self.countPrimes(n - 1) + self.countPrimes(n - 2)\n            \n    def findNumbers(self, n):\n        res = []\n        for i in range(n + 1):\n            if self.prime_number(i):\n                res.append(i)\n        return res\n\ns = Solution()\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"50\"\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 10 9 20 1\") == 2\nassert solution(\"1 100 50 200 75\") == 50\nassert solution(\"1 10 20 50 50 50 50 100\") == 50\nassert solution(\"1 10 50 100 100 100 100 100\") == 10\nassert solution(\"1 10 20 100 100 100 100 100\") == 10\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\"1 10 9 20 1\", \"1 100 50 200 75\", \"1 100 50 200 75\", \"1 100 50 200 75\", \"1 100 50 200 75\", \"1 100 50 200 75\", \"1 100 50 200 75\", \"1 100 50 200 75\"]) == \"50\"\nassert solution(\n    [\"1 10 50 200\", \"1 100 50 200\", \"1 100 50 200\", \"1 100 50 200\", \"1 100 50 200\", \"1 100 50 200\", \"1 100 50 200\", \"1 100 50 200\"]) == \"3\"\nassert solution(\n    [\"1 10 100\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\"]) == \"3\"\nassert solution(\n    [\"1 10 100\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\"]) == \"0\"\nassert solution(\n    [\"1 10 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\", \"1 100 50\"]) == \"2\"\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 50\n\"\"\""
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 10 50 10 50 10 50 10 50 10 50\") == \"2\"\nassert solution(\"5 10 50 30 50 50 50 50 50 50 50 50 50\") == \"3\"\nassert solution(\"20 1 1 50 50 50 50 50 50 10 50 50 10 50 10\") == \"4\"\nassert solution(\"10 20 10 20 20 10 50 10 50 10 50 50 10 50 10\") == \"3\"\nassert solution(\"10 20 10 20 20 10 50 10 50 10 50 50 10 50 10 10\") == \"3\"\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 10, 9, 1, 1) == 2\nassert solution(1, 100, 50, 0, 2) == 50\nassert solution(1, 100, 50, 0, 3) == 50\nassert solution(1, 100, 50, 0, 4) == 50\nassert solution(1, 100, 50, 0, 5) == 50\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"11 100 100 100\") == 4\nassert solution(\"1000\") == 2\n\n\n\n\"\"\""
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 10 9 20 1\"\n    ) == \"2\"\n    \nassert solution(\n    \"1 100 50 200 75\"\n    ) == \"50\"\n    \nassert solution(\n    \"1 100 50 200 75\"\n    ) == \"100\"\n    \nassert solution(\n    \"1 100 50 200 75\"\n    ) == \"1\"\n    \nassert solution(\n    \"1 100 50 200 75\"\n    ) == \"0\"\n    \n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n1 10 9 20 1\n\n\"\"\") == 1\nassert solution(\n\"\"\"\n1 100 50 200 75\n\n\"\"\") == 2\nassert solution(\n\"\"\"\n1 100 50 200 75\n\n\"\"\") == 1\nassert solution(\n\"\"\"\n1 100 50 200 75\n\n\"\"\") == 4\nassert solution(\n\"\"\"\n1 100 50 200 75\n\n\"\"\") == 5\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(sys.stdin) == \"0\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 0\") == 0\nassert solution(\"0 1 1\") == 0\nassert solution(\"0 2 2\") == 0\nassert solution(\"-3 4 -1\") == -5\nassert solution(\"-2 6 3\") == 6\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '13'\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 13, \"The function does not return the area of the region the cow can reach, it returns a string, with a single integer.\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"\n\\\"\\\"\\\"\n\\\"\\\"\\\"\nN M\n1 2 0\n0 1 1\n0 2 2\n-3 4 -1\n-2 6 3\n1 0 1\n0 1 2\n2 0 2\n-1 -4 5\n3 -2 4\n1 2 4\n\\\"\\\"\\\"\\\""
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"INF\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"13\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(\"-1 5 0\") == \"INFINITY\"\nassert solution(\"-2 0 2\") == \"INFINITY\"\nassert solution(\"-3 4 -1\") == \"INFINITY\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"13\""
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"13\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n\nExplanation\n\nInput\nInput is of the form\n\nTwo lines:\n\nTime,  Interval\n\nFirst line is t,  the time the pineapple barks for the first time.\nSecond line is s,  the interval in seconds of the second line.\nThird line is x,  the time the pineapple wants to eat the pineapple.\n\nThe second line should be either 1, 2,..., s, or s+1, or 1+2+...+s.\nThe third line should be either 1, 3,..., s+1, or s+2, or 1+2+...+s+2.\n\nIf the first line is 0, then the last line must be either 1, 3,..., s+1, or s+2, or 1+2+...+s+2.\n\nConstraints\n\n[Time Limit] 1 second\n\n\n[input] integer stdin\n\nThe first line contains two integers t and s separated by a single space.\n\n[output] string\n\nIf the first line is 0 then the last line must be either 1, 3,..., s+1, or s+2, or 1+2+...+s+2.\n\n\n[input] integer stdin\n\nThe first line contains two integers t and s separated by a single space.\n\n[output] string\n\nIf the first line is 0 then the last line must be either 1, 3,..., s+1, or s+2, or 1+2+...+s+2.\n\n\n[input] string\n\nThe first line contains two integers t and s separated by a single space.\n\n[output] string\n\nIf the first line is 0 then the last line must be either 1, 3,..., s+1, or s+2, or 1+2+...+s+2.\n\n\n[constraints] 1 \u2264 t \u2264 10^9\n1 \u2264 s \u2264 10^9\n0 \u2264 x \u2264 100\n\n\n[self-idea]\n\nexample\n\nInput 1:\n\nInput 2:\n\nInput 3:\n\nInput 4:\n\nOutput 1:\n\nYES\n\nInput 2:\n\nInput 3:\n\nInput 4:\n\nOutput 1:\n\nNO\n\n---\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin = '3 10 4')) == 'NO'\nassert solution(stdin = '3 8 51')) == 'YES'\nassert solution(stdin = '3 8 52')) == 'YES'\nassert solution(stdin = '3 8 51')) == 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"YES\"\nassert solution(\"3 0\") == \"YES\"\nassert solution(\"3 1 1\") == \"YES\"\nassert solution(\"3 1 2\") == \"YES\"\nassert solution(\"3 1 4\") == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"NO\"\nassert solution(\"3 8 52\") == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, \"3 4\") == \"YES\"\nassert solution(3, \"3 1\") == \"NO\"\nassert solution(3, \"3 5\") == \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 3 2 2\") == \"YES\"\nassert solution(\"1 3 1\") == \"YES\"\nassert solution(\"2 3 2\") == \"YES\"\nassert solution(\"3 4 2\") == \"YES\"\nassert solution(\"4 4 3\") == \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3 10 4\", \"3 8 51\", \"3 8 52\"]) == \"YES\"\nassert solution([\"3 8 51\", \"3 8 52\", \"3 8 54\"]) == \"NO\"\nassert solution([\"3 8 52\", \"3 8 54\", \"3 8 59\"]) == \"YES\"\nassert solution([\"3 8 54\", \"3 8 59\", \"3 8 61\"]) == \"YES\"\nassert solution([\"3 8 61\", \"3 8 62\", \"3 8 63\"]) == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 5 4 3') == 'YES'\nassert solution('3 10 6') == 'YES'\nassert solution('5 7') == 'NO'\nassert solution('1 10 1') == 'NO'\nassert solution('2 7 2') == 'YES'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2 1'\nassert solution(input()) == '2 1'\nassert solution(input()) == '3 9'\nassert solution(input()) == '3 9'\nassert solution(input()) == '3 9'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 2\nassert solution('3') == 1\nassert solution('5') == -1\nassert solution('3') == -1\nassert solution('5') == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n\n1 <= n <= 20\n1 <= l_1, r_1 <= 10^9\n\nSample Input\n\n3\n3 10\n1 2\n2 3\n2 4\n3 5\nSample Output\n\n2 1\n\nExplanation\n\nn = 5, l_1 = 1, r_1 = 3, l_2 = 2, r_2 = 4, l_3 = 2, r_3 = 5.\nSample Input\n\n3\n1 10\n2 4\n3 10\n2 4\n3 10\n\nSample Output\n\n3\n1\nExplanation\n\nn = 3, l_1 = 1, r_1 = 3, l_2 = 2, r_2 = 4, l_3 = 2, r_3 = 5.\n\"\"\""
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin),'solution() failed'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \n    stdin: str\n    ) == [2, 1]\n\"\"\"\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(10, \"1 10\") == 1\nassert solution(5, \"2 9\") == 2\nassert solution(3, \"2 3\") == 2\nassert solution(2, \"2 9\") == -1\nassert solution(3, \"2 3\") == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, [1, 5, 1, 2]) == 3\nassert solution(2, [1, 2]) == 1\nassert solution(0, [1]) == -1\nassert solution(2, [2, 6, 20]) == -1\nassert solution(3, [3, 4, 5, 20, 6, 7, 8, 9]) == -1"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, [1, 10, 2, 9, 3, 9, 2, 3, 2, 6]) == 2, 'The correct answer is 2.'\nassert solution(3, [1, 5, 2]) == -1, 'The correct answer is -1.'\nassert solution(3, [1, 2, 5]) == -1, 'The correct answer is -1.'\nassert solution(3, [1, 2, 3]) == -1, 'The correct answer is -1.'\nassert solution(3, [1, 2, 3, 4]) == 2, 'The correct answer is 2.'\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"AGTCTGAGTGTGTTT\"\nassert solution(stdin) == \"AACGCTCTGAGTGTGTTT\"\nassert solution(stdin) == \"AACGGCTCTGAGTGTGTTT\"\nassert solution(stdin) == \"AAAACGGCTCTGAGTGTGTTT\"\nassert solution(stdin) == \"AACGGCTCTGAGTGTGTTT\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'AGACGTCT'\nassert solution(input()) == 'AGCGTCT'\nassert solution(input()) == 'AGACGCT'\nassert solution(input()) == 'AGCTCG'\nassert solution(input()) == 'AGAACG'\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"6a\"\n    ) == \"AACGCTTAA\"\nassert solution(\n    \"2a\"\n    ) == \"AACGCTTAA\"\nassert solution(\n    \"4a\"\n    ) == \"AACGCTTAA\"\nassert solution(\n    \"5a\"\n    ) == \"AACGCTTAA\"\nassert solution(\n    \"6a\"\n    ) == \"AACGCTTAA\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AACGTTG\"\nassert solution(stdin) == \"AACGTTT\"\nassert solution(stdin) == \"AACGTTT\"\nassert solution(stdin) == \"AACGTTT\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"AGACGTCT\", \"no\"\nassert solution(input(\"A\")) == \"AAC\", \"yes\"\nassert solution(input(\"T\")) == \"TAC\", \"no\"\nassert solution(input(\"G\")) == \"GAG\", \"no\"\nassert solution(input(\"G\")) == \"GAA\", \"no\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, \"AGCGTCT\") == \"AACCGGTCTT\"\nassert solution(5, \"AAAAAAAAAA\") == \"AACCGGTCTT\"\nassert solution(6, \"AACBTTT\") == \"AACCGGTCTT\"\nassert solution(10, \"AACBBBBB\") == \"AACCGGTCTT\"\nassert solution(9, \"AACCG?C\") == \"AACCGGTCTT\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AGACGTCT\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 'AAGCT'\nassert solution(4) == 'AAGCT'\nassert solution(6) == '==='\n\n\"\"\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"AACGCTCT\"\nassert solution(stdin) == \"AACGCTCT\"\nassert solution(stdin) == \"AACGCTCT\"\nassert solution(stdin) == \"AACGCTCT\"\nassert solution(stdin) == \"AACGCTCT\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == \"AGACGTCT\", \"solution failed\"\nassert solution(6) == \"===\", \"solution failed\"\n\nassert solution(8) == \"AGACGTCT\", \"solution failed\"\nassert solution(4) == \"AGACGCT\", \"solution failed\"\nassert solution(6) == \"===\", \"solution failed\""
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n\n\"\"\"\n\nimport sys\nimport collections\nimport itertools\nfrom typing import Counter, Iterator\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"xx.ox\") == \"YES\"\nassert solution(\"xx.oox\") == \"NO\"\nassert solution(\"oox.oox\") == \"YES\"\nassert solution(\"oo.oxx\") == \"YES\"\nassert solution(\"oox.ooxx\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nprint(\"OK\")\n\"\"\""
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n0 <= stad.length <= 100\n1 <= stad[i].length <= 100\nstad[i] consists of only lowercase English letters.\n\n------Coding Time Complexity------\n\nTime complexity for solution(stdin) is O(n).\nTime complexity for this function is O(n) because it is recursive.\n\nSpace complexity: O(1)\n\nConstraints:\n0 <= x < 4\n0 <= y < 4\n1 <= stad[i].length <= 100\n1 <= stad[i][j] < 4\n\"\"\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input().strip()) == 'NO'\n\nassert solution(\"xx.x.\") == 'NO'\nassert solution(\"xx..x.\") == 'NO'\nassert solution(\"oo.o.x.x.\") == 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"xx.x.o\") == \"YES\"\nassert solution(\"xx.x.o.x\") == \"YES\"\nassert solution(\"xx.x.o.x.o.x\") == \"YES\"\nassert solution(\"xx.o.x.o.x.o.x\") == \"NO\"\nassert solution(\"xx.o.x.o.x.x.o.x\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == \"YES\"\n\nassert solution(3) == \"NO\"\n\nassert solution(3) == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"1 2 2 3 3 4\") == \"NO\"\n\nPass #1/2\nGiven an integer array nums, two elements a and b of the same value are chosen such that a + b = nums[i + 1].\nReturn YES if Vasya can divide the array. Otherwise return NO.\n\nInput\n2\n1 3\n2\n\nOutput\nYES\n\nInput\n2\n1 3 2\n\nOutput\nNO\n\nInput\n3\n1 2 3 4 5\n\nOutput\nYES\n\nInput\n3\n2 3 4\n\nOutput\nNO\n\nInput\n2\n1 3\n\nOutput\nNO\n\n\n\n-----Bonus-----\n\n@lc tags=array\n@lc plot=images\n\n@lc group=\n\n@lc rank=\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= n <= 100000\n1 <= a_i <= 10^9\na_1, a_2,..., a_{n} are unique\n\n-----Time Limit-----\nNo limit to amount of time n = 100,000.\n\ncomplexity:\ntime: O(n)\nspace: O(n)\n\"\"\"\n\nclass Solution:\n    def canMove(self, arr: List[int], n: int) -> bool:\n        # Addition\n        # Note: n = 1 because it's not possible to move it in one place.\n        #   If n = 2, then 2 times 1 will move, so it can be moved in all places.\n        #   (because it's impossible to move out of index 2.)\n        prefix = arr[:n]\n        suffix = arr[n:]\n        \n        # Conquer\n        # Note: n = 1 because it's not possible to move it in one place.\n        #   If n = 2, then 2 times 1 will move, so it can be moved in all places.\n        #   (because it's impossible to move out of index 2.)\n        for i in range(n):\n            prefix.append(prefix[i] + suffix[i])\n        \n        # Check if prefix.pop() == suffix.pop()\n        # (because prefix.pop() == suffix.pop() == prefix.pop() == suffix.pop()).\n        return prefix == suffix"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == YES\nassert solution(5) == NO\n\nprint(solution(int(input())))\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == YES\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == NO\nassert solution(10) == YES\nassert solution(20) == NO\n\n\n'''"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 5 5 4 3 2\") == \"YES\"\nassert solution(\"20 5 5 4 3 2\") == \"NO\"\nassert solution(\"24 9 5 4 3 2\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n\n\n\n-----Advanced-----\n\nThe array is divided in two parts. The prefix and the suffix.\n\nThis part also takes advantage of the fact that Vasya can move all elements before the first and after the second element to the left.\n\nYou have to check if Vasya can divide the array after moving the first element.\n\n\n-----Input-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 100000) \u2014 the size of the array.\n\nThe second line contains n integers a_1, a_2... a_{n} (1 \u2264 a_{i} \u2264 10^9) \u2014 the elements of the array.\n\n\n-----Output-----\n\nPrint YES if Vasya can divide the array after moving one element. Otherwise print NO.\n\nInput\n3\n1 2 3 4 5\n\nOutput\nYES\n\nInput\n3\n1 2 3\n\nOutput\nNO\n\nInput\n3\n3 5 5\n\nOutput\nYES\n\nInput\n1\n3\n\nOutput\nNO\n\nInput\n5\n1 2 3 4 5\n\nOutput\nYES\n\nInput\n4\n2 1 3 5\n\nOutput\nNO\n\nInput\n3\n1 2 3\n\nOutput\nYES\n\n------\n\nprint(\"Yes\" if solution(\"10 5 5 4 3 2\") == \"YES\" else \"No\")\n\nprint(\"Yes\" if solution(\"20 5 5 4 3 2\") == \"NO\" else \"No\")\nprint(\"Yes\" if solution(\"24 9 5 4 3 2\") == \"NO\" else \"NO\")\nprint(\"Yes\" if solution(\"5\") == \"NO\" else \"NO\")\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n-----Examples-----\n\nInput\n1\n1 2 2\n\nOutput\nNO\n\nInput\n5\n1 2 3 4 5\n\nOutput\nNO\n\n\n------Solution-----"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, [1, 3, 5]) == NO\nassert solution(5, [1, 2, 3, 4, 5]) == NO\nassert solution(3, [1, 1, 1, 2, 2, 2]) == YES"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\""
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 0 1\") == \"Yes\"\nassert solution(\"6 1\") == \"No\"\nassert solution(\"4 1\") == \"Yes\"\nassert solution(\"7 7\") == \"No\"\nassert solution(\"8 9\") == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\"\n\n\nclass Solution:\n    def isValidSpiral(self, a: str, b: str) -> bool:\n        a_len, b_len = len(a), len(b)\n        if a_len < b_len:\n            return False\n        for i in range(b_len):\n            a_idx = int(a[i % a_len]) - 1\n            b_idx = int(b[i % b_len]) - 1\n            if a[b_idx]!= b[a_idx]:\n                return False\n        return True\n\n    def isValidSpiral2(self, a: str, b: str) -> bool:\n        a_len, b_len = len(a), len(b)\n        if a_len < b_len:\n            return False\n\n        l = a_len\n        r = b_len\n\n        for i in range(l - 1, -1, -1):\n            if a[i]!= b[i]:\n                return False\n        return True\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 1\") == \"Yes\"\nassert solution(\"4 1\") == \"No\"\nassert solution(\"7 7\") == \"Yes\"\nassert solution(\"4 1\") == \"No\"\nassert solution(\"6 1\") == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2') == 'Yes'\nassert solution('0 0 0 0 0 0 0') == 'No'\nassert solution('8 94 0 4') == 'Yes'\nassert solution('9 10') == 'No'\n\npass\nassert solution('2 3') == 'No'\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\nassert solution(stdin) == \"No\"\n\n\n\"\"\""
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"8 2\") == \"Yes\"\nassert solution(\"4 3\") == \"No\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 1 1\") == \"YES\"\nassert solution(\"5 2 2\") == \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n### Solution"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= x, y, z <= 10^5\n0 <= a, b, c <= 10^5\n1 <= stdin[i] <= stdin[i+1] <= 10^5\n1 <= stdin[i] <= stdin[i+1] <= 10^5\n\nTime Limit: 300 ms\nMemory Limit: 128 MB\n\nclass Solution:\n    def __init__(self):\n        self.res = [\"YES\" for _ in range(10)]\n        self.prev = [\"YES\" for _ in range(10)]\n        self.a = \"5\"\n        self.b = \"2\"\n        self.c = \"3\"\n        self.prev[1] = \"NO\"\n        self.prev[3] = \"NO\"\n\n    def addGrapes(self, grape, a, b, c):\n        if grape < int(self.a):\n            self.prev[a] = \"NO\"\n        if grape < int(self.b):\n            self.prev[b] = \"NO\"\n        if grape < int(self.c):\n            self.prev[c] = \"NO\"\n\n    def checkGrapes(self, grape):\n        if grape < int(self.a):\n            self.res[self.a] = \"NO\"\n            self.prev[self.a] = \"NO\"\n        if grape < int(self.b):\n            self.res[self.b] = \"NO\"\n            self.prev[self.b] = \"NO\"\n        if grape < int(self.c):\n            self.res[self.c] = \"NO\"\n            self.prev[self.c] = \"NO\"\n        if grape < 10:\n            self.res[grape] = \"NO\"\n            self.prev[grape] = \"NO\"\n        return self.res[grape] == \"YES\"\n\n    def isHappy(self, grape):\n        while grape:\n            if grape & 1:\n                if grape & 2:\n                    if grape & 3:\n                        if grape & 4:\n                            if grape & 5:\n                                if grape & 6:\n                                    if grape & 7:\n                                        if grape & 8:\n                                            if grape & 9:\n                                                if grape & 10:\n                                                    if grape & 11:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 12:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 13:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 14:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 15:\n                                                        self.addGrapes(grape, a, b, c)\n                                                if grape & 16:\n                                                    if grape & 17:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 18:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 19:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 20:\n                                                        self.addGrapes(grape, a, b, c)\n                                                if grape & 21:\n                                                    if grape & 22:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 23:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 24:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 25:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 26:\n                                                        self.addGrapes(grape, a, b, c)\n                                                if grape & 27:\n                                                    if grape & 28:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 29:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 30:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 31:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 32:\n                                                        self.addGrapes(grape, a, b, c)\n                                                if grape & 33:\n                                                    if grape & 34:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 35:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 36:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 37:\n                                                        self.addGrapes(grape, a, b, c)\n                                                    if grape & 38:\n                                                        self.addGrapes(grape, a, b, c)\n                                                if grape & 39"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1\u2264x\u226410^5\n1\u2264y\u226410^5\n1\u2264z\u226410^5\n\n----Examples-----\nInput\n1 6 2\n4 3 3\n\nOutput\nNO\n\nInput\n5 1 1\n4 3 2\n\nOutput\nYES\n\n\"\"\""
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,1) == 'YES'\nassert solution(1,2) == 'NO'"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 5 4\") == \"YES\"\nassert solution(\"1 4 3\") == \"NO\"\nassert solution(\"1 2 1\") == \"NO\"\nassert solution(\"1 5 2\") == \"NO\"\nassert solution(\"5 4 1\") == \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"5\", \"4\", \"4\"]) == \"YES\", \"test case failed\"\n\nassert solution([\"1\", \"2\", \"3\", \"5\", \"4\", \"5\"]) == \"NO\", \"test case failed\"\n\nassert solution([\"1\", \"1\"]) == \"NO\", \"test case failed\"\n\nassert solution([\"1\", \"1\", \"2\"]) == \"YES\", \"test case failed\"\n\nassert solution([\"1\", \"1\", \"1\"]) == \"NO\", \"test case failed\""
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\nAccepted\n2\n3\n5\n\nRuntime\n0 ms\nYour runtime beats 86.79 % of python3 submissions (in 30.11%)\nYour memory usage beats 65.99 % of python3 submissions (in 30.11%)\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'NO'"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"6 1 2\") == \"YES\"\nassert solution(\"5 1 1\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1 0 0\") == \"NO\"\nassert solution(\"1 0 0 0\") == \"NO\"\nassert solution(\"0 1 0 0 1\") == \"NO\"\nassert solution(\"0 0 0 1 0\") == \"YES\"\nassert solution(\"0 0 1 0 0\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\"\n\nimport sys\nimport collections\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 0 1 0\") == \"NO\"\nassert solution(\"0 1 0 1\") == \"YES\"\n\n\n-----Submissions-----\n[Web]\nhttps://www.codewars.com/kata/54af56a8a64c3431a000059\n\n[Easy]\nimport sys\nfrom collections import deque"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"0 0 0 1 0 0 0 0 0 1 0 1 1 0 0 0 0 1 1 0 0 0 0 1 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 1 0 1 1 1 1 1 0 1 1 0 1 0 0 1 0 1 0 1 0 0 1 1 1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 1 1 1 1 0 0 0 1 1 0 1 1 1 1 1 1 0 0 0 1 0 0 1 0 0 0 1 0 1 0 0 1 0 0 0 1 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 1 1 1 1 1 1 1 1 0 1 1 0 1 1 1 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 0 1 1 1 1 1 1 1 1 0 1 1 0 0 1 1 1 1 1 1 1 0 1 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0 0 1 0 1 0 0 1 0 0 0 1 0 1 1 1 1 1 1 0 1 1 0 0 1 1 0 1 1 1 0 0 1 0 0 1 0 0 1 0 0 0 1 0 1 0 0 0 1 0 0 1 0 0 1 0 1 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 1 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 1 0 0 0 1 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 1 0 1 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 1 1 0\") == \"YES\"\nassert solution(\"1 0 0 0\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\"\"\"\nclass Solution:\n    def detect_accidents(self, intervals: List[List[int]]) -> List[str]:\n        intervals.sort(key=lambda x: x[0])\n        N=len(intervals)\n        id=0\n        l=0\n        r=1\n        p=0\n        result=[]\n        def find_interval(i):\n            if i[1]<=i[0]:\n                return i[0],i[1]\n            else:\n                return i[1],i[0]\n        \n        for i in range(N):\n            if i%2==0:\n                result.append(f\"No-{id}\")\n                id+=1\n                l,r=find_interval(intervals[i])\n                result.append(f\"Yes-{id}\")\n                p=i+1\n                intervals[p-1][0],intervals[p][1]=l,r\n            else:\n                r,p=find_interval(intervals[i])\n                result.append(f\"Yes-{id}\")\n                l=r\n                id+=1\n                intervals[p-1][1],intervals[p][1]=l,r\n                \n        return result\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\nfor _ in range(int(input())):\n    n, s, r, p = map(int, input().split())\n    l, s, r, p = map(lambda x: int(x)-1, input().split())\n    if n==0 and p==0:\n        print(\"YES\")\n    else:\n        print(\"NO\")"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    '1 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"0 1 1 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2 1 0 0) == \"NO\"\nassert solution(1 1 0 0) == \"NO\"\nassert solution(0 1 0 0) == \"NO\"\nassert solution(0 0 0 1) == \"YES\""
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES', 'incorrect result'\n\n-----Bonus-----\n\nTest input example\n\nInput\n8\n113224222222\n\nOutput\nYES\n\n'''"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, \"586\") == \"YES\"\nassert solution(3, \"09\") == \"NO\"\nassert solution(3, \"123456789\") == \"NO\"\nassert solution(3, \"911\") == \"YES\"\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\" or solution(stdin) == \"NO\""
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\n-----Test Cases-----\n\nExample 1:\n\nInput:\n3\n586\n\nOutput:\nYES\n\nExample 2:\n\nInput:\n3\n09\n\nOutput:\nNO\n\nExample 3:\n\nInput:\n2\n123456789\n\nOutput:\nNO\n\"\"\"\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\"\"\""
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\n\n\n\n\"\"\"\n\nimport sys\n\nn, f = map(int, input().split())\nn_list = []\nfor i in range(1, n + 1):\n    n_list.append(i)\n\nn_list.sort()\n\ns = n_list[f - 1]"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == 10\nassert solution(\"4 1\") == 5\nassert solution(\"3 5\") == 3\nassert solution(\"3 1\") == 2\nassert solution(\"1 5\") == 1\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"10\"\n\nassert solution(\"4 1\") == \"10\"\n\nassert solution(\"3 5\") == \"10\"\n\nassert solution(\"2 3\") == \"10\"\n\nassert solution(\"1 5\") == \"10\""
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 2') == '10'\nassert solution('4 1') == '5'\nassert solution('4 1') == '5'\nassert solution('4 1') == '5'\nassert solution('4 1') == '5'\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2\") == \"10\"\nassert solution(\"1 3\") == \"15\"\nassert solution(\"1 4\") == \"15\"\nassert solution(\"1 5\") == \"10\"\nassert solution(\"1 6\") == \"10\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 2\") == \"10\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"4 1\") == \"5\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"10\"\nassert solution(\"4 1\") == \"5\"\nassert solution(\"4 3\") == \"15\"\nassert solution(\"4 5\") == \"35\"\nassert solution(\"4 6\") == \"43\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '10'\nassert solution(inp) == '5'\nassert solution(inp) == '10'\nassert solution(inp) == '10'\nassert solution(inp) == '10'\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10\n\"\"\"\n\nclass Solution:\n    def shopSmart(self, ops: List[List[int]], N: int, M: int) -> int:\n        def dfs(w, cnt):\n            if cnt > M:\n                return cnt\n            else:\n                return max(cnt, dfs(w, cnt + ops[w][0]) + ops[w][1])\n        \n        return dfs(0, 0)"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\nhttps://www.hackerrank.com/challenges/maximum-messiness-in-a-stalls/problem\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"1 3\") == 3\nassert solution(\"5\") == 5\nassert solution(\"1 1\") == 1\nassert solution(\"1 1 1\") == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '10'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 5\") == 10\nassert solution(\"2 10\") == 0"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 10\n\"\"\"\nn, k = list(map(int, input().split()))\ncows = list(map(int, input().split()))\ncows.sort()"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\n\n###\n###\n###\n###\n\n\"\"\"\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 10\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\n\n## This solution is also a bit harder because the cows may be swapped (not necessarily if the cows are ordered in increasing order of their position). In this case, we need to keep track of the time of the first cycle and the time of the second cycle so that we can report how many swaps we have. When one second comes after the other, we just need to make sure that the cows are in the correct order.\n## The start time is the number of cycles left during the second cycle so that we can calculate the total number of swaps for the first cycle.\n## The end time is the number of cycles left during the first cycle so that we calculate the total number of swaps for the second cycle.\n## The number of swaps is the number of cows that have been swapped during the second cycle.\n## So the total number of swaps is the number of cycles left during the second cycle.\n## So we calculate the total number of swaps by checking how many cycles are left during the first cycle.\n## Then we use the input number to calculate how many swaps we have.\n\nimport collections"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"20 3 10\") == \"1\"\nassert solution(\"10 11 2 4\") == \"-1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '1'\n\nassert solution(inp) == '-1'\n'''"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(10, 15, 2, 3, 4) == 1\nassert solution(10, 15, 1, 3, 4) == -1\nassert solution(1, 1, 1, 1, 1) == -1\n\n\n------Code Start here------\nimport sys\ninput = sys.stdin.readline\n\nN, M, K, L = map(int, input().strip().split())"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 1\nassert solution(10) == -1\nassert solution(20) == 1\nassert solution(15) == -1\n\n\n\"\"\"\n\nimport sys\n\nN, M, K, L = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\n---Medium\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"-1\"\n\"\"\""
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 4') == '5'\nassert solution('1 2') == '1'\nassert solution('3 3') == '-1'\nassert solution('3 3') == '1'\nassert solution('4 3') == '1'\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 4\") == \"5\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"1 2 1\") == \"3\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == 5\nassert solution(\"1 2\") == -1\nassert solution(\"3 3\") == 1"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\nInput\n2 2\nb b\n\nOutput\n3\n\n\"\"\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 4\") == \"5\"\nassert solution(\"1 2\") == -1"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\nimport sys\nfrom collections import deque\n\nstdin = sys.stdin.readline\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\n\"\"\""
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n'''"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4 0\") == \"Yes\"\nassert solution(\"2 3 9\") == \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 5\\n2 2\\n2 4\\n1 0\\n1 1\\n2 4\\n3 6\\n4 7\\n5 8\\n6 10\\n\") == \"No\"\nassert solution(\"1 1\\n1 1\\n1 1\\n2 1\\n1 1\\n\") == \"No\"\nassert solution(\"1 1\\n1 1\\n2 1\\n2 1\\n\") == \"No\"\nassert solution(\"1\\n2\\n2\\n\") == \"Yes\"\nassert solution(\"1\\n1\\n1\\n\") == \"Yes\"\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['1 1 1 1 1', '2 1 4 3 5', '3 2 9', '1 7 9']) == 'No'\nassert solution(['1 1 1 1 1', '1 0 1 0 1', '1 0 1 0 1', '1 0 1 0 1']) == 'Yes'\nassert solution(['1 1 1 1 1', '2 1 4 3 5', '3 2 9', '1 7 9']) == 'Yes'\nassert solution(['1 0 1 0 1', '1 0 1 0 1', '1 0 1 0 1', '1 0 1 0 1']) == 'No'\nassert solution(['1 1 1 1 1', '1 0 1 0 1', '1 0 1 0 1', '1 0 1 0 1']) == 'No'\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\nNote: The input always contains an integer, $n$, where $0 \\leq n \\leq 1000$.\n\nThe first input line contains a single integer $n$, the number of piles with stones in the garden ($1 \\leq n \\leq 50$).\n\nThe second line contains $n$ integers separated by spaces $x_1, x_2, \\ldots, x_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the first time ($0 \\leq x_i \\leq 1000$).\n\nThe third line contains $n$ integers separated by spaces $y_1, y_2, \\ldots, y_n$, the number of stones in piles recorded in the notebook when the participants came to the place with stones for the second time ($0 \\leq y_i \\leq 1000$).\n\"\"\"\n\nfrom collections import defaultdict\nfrom math import inf\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N, M = map(int, stdin.split())\n        \n        def do_group_pile(piles):\n            if len(piles) == N:\n                return piles\n            \n            pile = piles[0]\n            for pile_i in piles[1:]:\n                pile = pile[:pile_i] + pile[pile_i+1:]\n            return pile\n\n        def solve(piles, l):\n            if not l:\n                return []\n            \n            result = []\n            if len(piles) >= l:\n                pile = do_group_pile(piles)\n                result += solve(piles[1:], l)\n            result += solve(piles[:l], l)\n            return result\n        \n        return solve(['0'], 0)[0]"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input() == \"Yes\") == \"No\"\n\"\"\"\nimport sys\n\nimport math"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, \"1 2 3 4 5\\n2 1 4 3 5\\n3 7 9\\n1 7 9\\n5\") == \"Yes\"\nassert solution(3, \"1 1 1 1 1\\n1 0 1 0 1\\n1 0 0 0 1\") == \"No\"\nassert solution(3, \"1 1 1 1 1\\n2 0 1 0 1\\n1 0 1 0 1\") == \"No\"\nassert solution(5, \"1 1 1 1 1\\n1 0 1 0 1\\n1 0 0 0 1\\n1 0 0 0 1\\n5\") == \"No\""
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n        \"\"\"\n                4\n                1 2 3 4 5\n                2 1 4 3 5\n                \"\"\") == 'No'\n        \"\"\"\n    \"\"\"\n    print(solution(\n        \"\"\"\n        4\n        1 2 3 4 5\n        2 1 4 3 5\n        \"\"\") == 'Yes')\n        \"\"\"\n    \"\"\"\n    print(solution(\n        \"\"\"\n        3\n        2 1\n        1 0\n        \"\"\") == 'No')\n        \"\"\"\n    \"\"\"\n    print(solution(\n        \"\"\"\n        1\n        2\n        \"\"\") == 'No')\n        \"\"\"\n    \"\"\"\n    print(solution(\n        \"\"\"\n        5\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1 0\n        1 0 1 1"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 360\nassert solution(input()) == 0\nassert solution(input()) == 360\nassert solution(input()) == 0\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n\"\"\""
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4,90) == 0, \"ValueError\"\nassert solution(3,90) == 60, \"ValueError\"\nassert solution(3,270) == 60, \"ValueError\"\nassert solution(1,90) == 0, \"ValueError\"\nassert solution(4,90) == 60, \"ValueError\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 10\") == \"0\"\nassert solution(\"3 7\") == \"1\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"4 9\") == \"0\"\nassert solution(\"3 4\") == \"1\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '0'"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input() for _ in range(int(stdin))) == 360\n'''\n\nimport math\n\nn = int(stdin.readline())\na = [int(i) for i in stdin.readline().split()]"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 360\n\"\"\""
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n        \n        # my own example\n        # Input:\n        # 10\n        # 90 90 90 90\n        # Output:\n        # 0\n        # 0\n        # 0\n    )\n        \n    pass"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n\n\n      \n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"90 90 90 90\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"360\") == \"360\"\nassert solution(\"4\") == \"360\"\nassert solution(\"3\") == \"360\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"{1,2,3}\") == \"1\"\nassert solution(\"{2,3,4}\") == \"3\"\nassert solution(\"{3,4,2}\") == \"6\"\nassert solution(\"{4,3,2}\") == \"9\"\nassert solution(\"{1,2,3,4,5}\") == \"11\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"14\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(9)\n\n\n-----Constraints-----\n\n1 <= n <= 10^9\n1 <= m <= 10^9\n\n-----Time Limit (C/C++)-----\n\nO(mn)\n\n\n-----Space Limit (C/C++)-----\n\nSince our problem uses recursive calls, we will only use constant space.\n\n\n-----Submissions-----\n\nSample Input\n\nInput\n\n1\n2\n3\n4\n5\n\nOutput\n\n7\n7\n\n\n-----Note-----\n\nIn this problem, the number of boxes is strictly smaller than the number of kinds of presents, and we are not going to validate it.\n\n\n\"\"\""
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"5\"\n\n-----Known Bug---\n\nHere is the same code as above, the result is that the answer is not too large, but too small. \nHowever, we must calculate the answer within 10^7. "
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\"\n'''"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == str(sum(map(int, input().split())))\n\"\"\""
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 9\nassert solution(stdin) == '9'\nassert solution(stdin) == '7'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '9'\n\nInput\n1 2\n\nOutput\n1 2\n\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"5\"\nassert solution(\"5\") == \"16\"\nassert solution(\"5\") == \"32\"\nassert solution(\"1\") == \"5\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n\"\"\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == '-1'\nassert solution(\"0\") == '-1'\nassert solution(\"1 1\") == '-1'\nassert solution(\"0 2 3 4 5\") == '-1'\nassert solution(\"0 3 5 8 9\") == '-1'\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"4 5\"\nassert solution(\"6\") == \"8 10\"\nassert solution(\"1\") == \"1\"\nassert solution(\"17\") == \"144 145\"\nassert solution(\"67\") == \"2244 2245\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1 4 5'\n\nassert solution(stdin) == '2 6 8'\n\nassert solution(stdin) == '3 12 13'\n\nassert solution(stdin) == '4 5 6'\n\nassert solution(stdin) == '7 8 10'"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2244 2245\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '-1'\n\n\n\n------------------\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3,2) == '1'\nassert solution(3,2) == '-1'\nassert solution(6,1) == '-1'\nassert solution(6,1) == '-1'\nassert solution(1,1) == '0'\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == ''\nassert solution('') == ''\nassert solution('0') == ''\nassert solution('1') == ''\nassert solution('2') == ''\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 5\"), \"Yes\"\nassert solution(\"5 3\"), \"No\"\n\nassert solution(\"15 4\"), \"No\"\nassert solution(\"2 6\"), \"Yes\"\nassert solution(\"-5 4\"), \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\nInput\n10 10\n\nOutput\nNo\n\"\"\""
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"No\"\nassert solution(input()) == \"Yes\"\n\n\n-----Time complexity-----\n\nTime complexity: O(n)\n\nSpace complexity: O(n)\n\n\"\"\""
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"1 2\\\") == \"No\"\nassert solution(\\\"2 2\\\") == \"Yes\"\nassert solution(\\\"3 4\\\") == \"Yes\"\nassert solution(\\\"3 3\\\") == \"No\"\nassert solution(\\\"1 1\\\") == \"Yes\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"Yes\"\nassert solution(\"5 3\") == \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == \"Yes\"\nassert solution(\"5 4\") == \"No\"\n\nprint('solution(\"Hello\")', solution(\"Hello\"))\n\nprint('solution(\"ThouHlLeLo\")', solution(\"thouhlelo\"))\n\nprint('solution(\"g\")', solution(\"g\"))\n\nprint('solution(\"lmE\")', solution(\"lmE\"))\n\nprint('solution(\"thouHlLeLo\")', solution(\"thouhlelo\"))"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('12345') == 'Yes'\nassert solution('123456789') == 'Yes'\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n\nInput\n5 3\n\nOutput\nYes\n\nInput\n2 2\n\nOutput\nNo\n\n-----Notes-----\n\nFind the first $n \\operatorname{mod} i \\operatorname{mod} j$, where $n \\operatorname{mod} i < j \\operatorname{mod} j$ is distinct."
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution({\"<\": 9, \"=\": 10}) == \"=\", \"= does not equal \"\nassert solution({\"<\": \"9\", \"=\": \"10\"}) == \">\", \"< does not equal \"\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \">\"\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"9\\n10\\n\") == \">\\n\"\nassert solution(\"11\\n10\\n\") == \">\\n\"\nassert solution(\"1\\n0\") == \"<\\n\"\nassert solution(\"1\\n1\") == \"<\\n\"\nassert solution(\"0\") == \">\"\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"=\", \"wrong value of stdin\""
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"09\") == '=', \"Test failed\"\nassert solution(\"0123456789\") == '=', \"Test failed\"\nassert solution(\"1234567890\") == '=', \"Test failed\"\nassert solution
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '<'\nassert solution(input()) == '>'\nassert solution(input()) == '='\nassert solution(input()) == '>='\nassert solution(input()) == '='\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"00000123\") == \">\"\nassert solution(\"0123\") == \"<\"\nassert solution(\"1111\") == \"=\"\nassert solution(\"100000000\") == \">\"\nassert solution(\"0123456789\") == \"<\"\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1234\") == '<'\nassert solution(\"1234\") == '>'\nassert solution(\"123456\") == '='\nassert solution(\"1\") == '='\nassert solution(\"0\") == '<'\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == '>'\nassert solution(7) == '<'\nassert solution(8) == '='\nassert solution(9) == '>'\nassert solution(10) == '='\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \">\nassert solution(\"0 9\") == \"=\nassert solution(\"10\") == \">\nassert solution(\"99\") == \"<\""
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '6'\n\"\"\"\n\nfrom sys import stdin\nimport math\nfrom collections import defaultdict\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '1'\n\nassert solution(input()) == '0'\n\nassert solution(input()) == '0'\n\nassert solution(input()) == '1'\n\nassert solution(input()) == '0'"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 -1\") == \"1 2 1\"\nassert solution(\"1 0 0 1\") == \"2 1 1\"\nassert solution(\"0 1 0 0\") == \"3 1 1\"\nassert solution(\"1 -1\") == \"4\"\nassert solution(\"0 0 0 0\") == \"3 4\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n\n>>> import sys; print(sys.stdin.read())\n1 2\n>>> 3 1\n>>> 1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2 0 1\n>>> 0 0 1\n>>> -1 1\n>>> 2 1\n>>> -1\n>>> -1\n>>> 0\n>>> 0 0\n>>> 0 0 1\n>>> -1\n>>> 0 0 1\n>>> -1\n>>> -1 1\n>>> 2 0 1\n>>> -1\n>>> 2 0 1\n>>> -1\n>>> -1 1\n>>> 2 0 1\n>>> -1\n>>> -1\n>>> 0\n>>> 0 0\n>>> 0 0 1\n>>> -1\n>>> 2 1\n>>> 0\n>>> -1\n>>> -1 1\n>>> 2 0 1\n>>> -1\n>>> 2 1\n>>> -1\n>>> -1 1\n>>> 2 0 1\n>>> -1\n>>> 2 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> 0 0 1\n>>> -1 0 1\n>>> 0 0 1\n>>> -1\n>>> -1 0 1\n>>> -1 0 1\n>>> 0 0 1\n>>> -1\n>>> -1 0 1\n>>> 0 0 1\n>>> -1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2 0 1\n>>> -1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2 1\n>>> -1\n>>> -1 0 1\n>>> -1\n>>> -1 0 1\n>>> 2\n>>> -1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> 2\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0 1\n>>> -1 0"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"-1 0 1\") == \"1\"\nassert solution(\"-1 -1\") == \"1\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 30\n1 <= n <= 2^10\n-1 <= p <= 1\n\n\n-----Examples-----\nInput\n2\n-1 0 1\n\nOutput\n2\nInput\n1 0 0\n\nOutput\n2\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 30\n-1 <= c_{i} \\leq 1\n-1 <= p \\leq 1\n\n[Image]\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 1) == \"1\"\nassert solution(2, -1) == \"1\"\nassert solution(1, 0) == \"1\"\nassert solution(1, 1) == \"0\"\nassert solution(2, 1) == \"2\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.string stdin\n\n[output] string\n\nprint(solution(stdin))\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1 4 1\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"9999999999 1000000000 1000000000 1000000000\") == \"0\"\nassert solution(\"10000000000000000000000000000000000000000000000\") == \"0\"\nassert solution(\"100000000000000000000000000000000000000000000000000000000000000000\") == \"0\"\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1 3 4\") == \"3\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"4 4 4 4\") == \"0\"\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4, 1, 3, 4) == 3\nassert solution(6, 1, 3, 4) == 3\nassert solution(99999999, 1000000000, 1000000000, 4) == 0\nassert solution(99999999, 1000000000, 1000000000, 4) == 1\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input().split()\n) == \"3\""
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1 4 2\") == 3\nassert solution(\"5 1 2 3\") == 0\nassert solution(\"1000000000 1000000000 1000000000 1000000000\") == 1\nassert solution(\"9999999999 1000000000 1000000000 1000000000\") == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('6 2 1 1') == '3'\nassert solution('6 4 4 4') == '0'\nassert solution('999999999 1000000000 1000000000 1000000000') == '1000000000'\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3 4\", \"1 2\", \"2 3\", \"3 2\", \"3 1\", \"2 1\", \"4 5\"]) == \"YES\", \"A graph cannot be acyclic\"\nassert solution([\"5 6\", \"1 2\", \"2 3\", \"3 2\", \"3 1\", \"2 1\", \"4 5\"]) == \"NO\", \"A graph cannot be acyclic\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"5 6\") == \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 2\", \"2 3\", \"3 2\", \"3 1\"]) == \"NO\"\nassert solution([\"1 2\", \"2 3\", \"3 2\", \"3 1\"]) == \"YES\"\nassert solution([\"1 2\", \"2 3\", \"3 2\", \"3 1\"]) == \"YES\"\nassert solution([\"1 2\", \"2 3\", \"3 2\", \"3 1\"]) == \"NO\"\nassert solution([\"1 2\", \"2 3\", \"3 2\", \"3 1\"]) == \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"NO\"\nassert solution(\"5 6\") == \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"NO\"\n\nclass Solution:\n    def acyclic(self, n, m):\n        if len(set(map(tuple, (map(tuple, (set(range(n + 1)) - set([n])) for _ in range(m)))))) < m:\n            return \"NO\"\n        else:\n            return \"YES\"\n\"\"\"\n\nclass Solution:\n    def acyclic(self, n, m):\n        if len(set(map(tuple, (map(tuple, (set(range(n + 1)) - set([n])) for _ in range(m)))))) < m:\n            return \"NO\"\n        else:\n            return \"YES\""
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 1\") == \"YES\", \"Don't remove edge.\"\nassert solution(\"6 5\") == \"NO\", \"Don't remove edge.\"\nassert solution(\"3 4\") == \"YES\", \"Don't remove edge.\"\nassert solution(\"3 4\") == \"NO\", \"Don't remove edge.\"\nassert solution(\"5 1\") == \"NO\", \"Don't remove edge.\""
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 595\") == \"281\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 50\") == \"30\"\nassert solution(\"5 240\") == \"26\"\nassert solution(\"4 0\") == \"10\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 1\") == \"1\"\nassert solution(\"3 595\") == \"51\"\nassert solution(\"2 50\") == \"17\"\nassert solution(\"5 24\") == \"19\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 595\") == \"281\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 50\") == \"30\"\nassert solution(\"3 1\") == \"26\"\nassert solution(\"5 239\") == \"26\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 595\") == \"281\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 50\") == \"30\"\nassert solution(\"5 240\") == \"26\"\n\n---Solution---\n\nint x = 0;\nint s = 0;\nint y = 0;\n\nfor (int n = 1; n <= 100; ++n)\n{\n    x = n;\n    s = 0;\n    for (int i = 0; i < x; ++i)\n    {\n        if (x - i > s && x + i < y)\n        {\n            s = i;\n        }\n    }\n    y = y + s;\n    x = x - s;\n}\n}\n\nint answer = x * y;\n\nassert answer == 281\n\n\"\"\""
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"281\"\n\"\"\"\nn = int(input())\ns = int(input())"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '281'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"281\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"3 3\") == \"2\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input() == \"161\")\n\"\"\"\n\nn, m = map(int, input().split())\nx, s = map(int, input().split())"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '281'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 8\nassert solution(stdin) == 8\nassert solution(stdin) == 11\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 2 3 4 5 6 7 8\", \"0\", \"0 0 0 0 0 0 0\"]) == \"0\"\nassert solution([\"0 0 0 0 0 0 0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"0\"\nassert solution
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"3 0 0 0 0 0 0 0\") == \"3\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0,0) == 0\nassert solution(3,0) == 0\nassert solution(3,3) == 3\nassert solution(4,4) == 5\nassert solution(4,5) == 1\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\n\nInput\n1\n1\n1 3 4 5 6 7 8\n\nOutput\n4\n\nInput\n2\n1 3 4 5 6 7 8\n\nOutput\n4\n\nInput\n0\n0 0 0 0 0 0 0 0\n\nOutput\n0\n\n-----------------------------------------------------------------------------------------------------------------------------------------\n\nThe first line contains one integer W, the maximum total weight of a set of items.\n\nThe second line contains $8$ integers $cnt_1$, $cnt_2$,..., $cnt_8$ ($0 \\le cnt_i \\le 10^{16}$).\n\nThe third line contains $cnt_i$ integers $cnt_i$ ($0 \\le cnt_i \\le 10^{16}$).\n\nThe fourth line contains a single integer $W$ ($0 \\le W \\le 10^{18}$).\n\nThe fifth line contains the set of items you have. It contains $8$ integers $cnt_1$, $cnt_2$,..., $cnt_8$ ($0 \\le cnt_i \\le 10^{16}$).\n\n\n\"\"\"\nimport sys\ninput = sys.stdin.readline\n\nW = int(input())"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\nprint(solution(stdin))\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0,1,2,3,4,5,6,7,8,9,10) == 3\nassert solution(10,1,2,3,4,5,6,7,8,9,10) == 3\nassert solution(11,1,2,3,4,5,6,7,8,9,10) == 2\nassert solution(11,0,0,0,0,0,0,0,0,0,0) == 0\nassert solution(11,0,0,0,0,0,0,0,0,0,0) == 0\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 44981600785557577"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4, 20, 30, 70, 90, 100, 10000, 1000, 100000, 3, 4, 8, 3, 1) == 2216847\nassert solution(4, 20, 30, 70, 90, 100, 10000, 1000, 100000, 3, 4, 8, 3, 2) == 150\nassert solution(4, 20, 30, 70, 90, 100, 10000, 1000, 100000, 3, 4, 8, 3, 3) == 500\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), 'incorrect stdin'\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"100\"\nassert solution(stdin) == \"250\"\nassert solution(stdin) == \"350\"\nassert solution(stdin) == \"450\"\nassert solution(stdin) == \"550\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '150'\nassert solution(input()) == '40'\nassert solution(input()) == '80'\nassert solution(input()) == '40'\nassert solution(input()) == '80'\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"100\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '30'\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10\") == \"20\"\nassert solution(\"3 4\") == \"10\"\nassert solution(\"4 2\") == \"30\"\nassert solution(\"1 3 2\") == \"30\"\nassert solution(\"1 2 3 4 5\") == \"30\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"150\"\n\nassert solution(stdin) == \"30\"\n\nassert solution(stdin) == \"50\"\n\nassert solution(stdin) == \"200\"\n\nassert solution(stdin) == \"9\""
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"50\"\nassert solution(stdin) == \"40\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"50\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str) == 5\nassert solution(str) == 5\nassert solution(str) == 5\nassert solution(str) == 5\nassert solution(str) == 5"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == \"3\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, [1, 3, 3, 6]) == 5, \"fatal\""
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(5)"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"5\"\nassert solution(\"1 3 3 6\") == \"3\"\n\n\n------Examples-----\n\nInput\n2\n1 3\n\nOutput\n2\n\nInput\n2\n2 1\n\nOutput\n1\n\n\n------Note-----\n\nIn the first sample case if one will decrease the second element value to 2 and the fifth element value to 4 then the mex value of resulting array 1 2 3 3 4 will be equal to 5.\n\nTo reach the answer to the second sample case one must not decrease any of the array elements.\n\n\"\"\""
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, [1, 3, 3, 6]) == 5\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a_i <= 10^9\n\n\n\n-----Time complexity-----\n\n1. Time complexity of the problem: O(n^2)\n\n2. Time complexity of the solution: O(n)\n\nIn case of a tie, the maximum of the result is the one with the smallest index.\n\n------Bugs----\n\nIn case of an array with duplicate values, the worst case time complexity of the solution is O(n^2) since the array is sorted.\n\nTime complexity of the solution is O(n) since all the operations are done in a single step.\n\nThe worst case time complexity of the solution is O(n) because the array is sorted.\n\"\"\""
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n5\n1 3 3 3 6\n\nOutput\n5\n\n\"\"\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('15\\n8\\n4\\n5\\n25\\n17\\n1\\n2') == 'YES'\nassert solution('15\\n1\\n3\\n2') == 'NO'\n\n\"\"\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nInput\n5\n73452\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780\n350224829278780"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 100\n0 <= a_i < 9\n\n------Time complexity----\n\nO(n)\n\n------Space complexity----\n\nO(n)\n'''\n\nclass Solution:\n    def luckyNumbers(self, ticket: str) -> str:\n        nums = [int(c) for c in ticket]\n        for i in range(0, len(nums), 2):\n            nums[i] += nums[i + 1]\n            if nums[i] == nums[i + 1]:\n                return 'YES'\n        return 'NO'\n        "
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"7094\", \"74112\", \"7341\", \"7095\", \"7409\", \"7441\"]) == \"YES\"\nassert solution([\"71\", \"74\", \"742\"]) == \"NO\"\nassert solution([\"81\", \"811\", \"821\", \"841\", \"851\", \"851\"]) == \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\na_1 < a_2 < a_3 <= a_4\n\n\n-----Time Complexity-----\n\nO(N) is the time complexity of the function.\n\nO(N) space complexity is the space complexity of the function.\n\n-----Algorithm-----\n\nSort tickets by sum of digits:\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def is_valid_ticket(self, ticket):\n        # sum = 0\n        # for i in ticket:\n        #     sum += int(i)\n        # return sum == 9\n        pass\n\n    def is_valid_ticket(self, ticket):\n        # for i in range(len(ticket)-1):\n        #     if ticket[i]!= ticket[i+1]:\n        #         return False\n        # return True\n        pass\n\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5,[\"7345\", \"1248\"]) == \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\""
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"350178\", \"350109\"]) == \"NO\"\nassert solution([\"350200\", \"350201\", \"350202\"]) == \"NO\"\nassert solution([\"350201\", \"350202\", \"350203\", \"350204\"]) == \"YES\"\n\nInput\n5\n73452\n\nOutput\nYES\n\nInput\n4\n1248\n\nOutput\nNO\n\nInput\n4\n1248\n\nOutput\nNO\n\nInput\n5\n1248\n\nOutput\nNO\n\nInput\n4\n1248\n\nOutput\nNO\n\nInput\n5\n1248\n\nOutput\nNO\n\nInput\n4\n1248\n\nOutput\nYES\n\nInput\n1\n1248\n\nOutput\nNO\n\n\n-----Solution-----"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"wwww\") == \"CHAT WITH HER!\"\nassert solution(\"Www\") == \"CHAT WITH HER!\"\nassert solution(\"www\") == \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"CHAT WITH HER!\"\n\n\n\"\"\""
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('wjmzbmr') == 'CHAT WITH HER!'\nassert solution('xiaodao') == 'IGNORE HIM!'"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == \"CHAT WITH HER!\"\nassert solution(\"wjmzbmr\") == \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"CHAT WITH HER!\""
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"CHAT WITH HER!\""
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"14 2\", \"1 1 -1 1\"]) == \"2\"\nassert solution([\"14 3\", \"1 1 -1 1\"]) == \"2\"\nassert solution([\"14 3\", \"1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1\"]) == \"10\"\nassert solution([\"14 5\", \"1 -1 1 1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"]) == \"6\"\nassert solution([\"14 4\", \"1 -1 1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1\"]) == \"4\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2 1 -1 1 1 1 -1 1 1 1\") == 2\nassert solution(\"14 3\") == 9\nassert solution(\"14 3\") == 1\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"9\""
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"-1\") == \"1\"\nassert solution(\"-2\") == \"1\"\nassert solution(\"0\") == \"2\""
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 -1 1 1\") == 2, \"bad test\"\nassert solution(\"1 -1 1 1 -1 -1 1 -1 -1 -1 1 -1 -1 1\") == 0, \"bad test\"\nassert solution(\"1 -1 1 -1 1 -1 -1 1 -1 -1 -1 1 -1 -1 1\") == 5, \"bad test\"\nassert solution(\"1 -1 1 -1 1 -1 -1 1 -1 -1 -1 1 -1 -1 1\") == 10, \"bad test\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == '0'\nassert solution(stdin) == '9'\nassert solution(stdin) == '16'\n\nassert solution(stdin) == ''\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"9\"\n\n\n'''\n\n\nn, k = map(int, input().split())\ntab = list(map(int, input().split()))\n\ntab.sort(reverse=True)\n\ntab = [0] + tab"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\", \"1\", \"3\", \"1\", \"2\", \"1\", \"2\", \"2\", \"1\", \"2\", \"3\", \"2\", \"2\", \"2\", \"1\", \"1\"]) == \"9\"\nassert solution([\"3\", \"2\", \"1\", \"2\", \"2\", \"2\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"2\", \"3\", \"3\", \"2\", \"2\", \"2\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"2\"]) == \"0\"\nassert solution([\"2\", \"1\", \"2\", \"2\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"4\", \"2\", \"3\", \"4\", \"3\"]) == \"3\"\nassert solution([\"14\", \"3\", \"3\", \"1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\"]) == \"2\"\nassert solution([\"14\", \"3\", \"3\", \"1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\"]) == \"9\"\nassert solution([\"4\", \"2\", \"1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\"]) == \"0\"\nassert solution([\"14\", \"3\", \"3\", \"1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\", \"1\", \"-1\"]) == \"1\"\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"0\", \"0\", \"1\", \"0\"]) == \"12\"\nassert solution([\"0\", \"0\", \"1\", \"0\", \"1\"]) == \"4\"\nassert solution([\"1\", \"1\", \"0\", \"1\"]) == \"4\"\nassert solution([\"1\", \"0\", \"1\", \"1\"]) == \"3\"\nassert solution([\"1\", \"0\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 12\nassert solution(input().split()) == 12\nassert solution(input().split()) == 12\nassert solution(input()) == 12\nassert solution(input().split()) == 12\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"9\",\"0\",\"3\",\"3\",\"0\",\"3\",\"0\",\"3\",\"0\",\"1\",\"2\"]) == \"21\"\nassert solution([\"0\",\"0\",\"0\",\"2\",\"3\",\"3\",\"3\",\"3\",\"3\",\"3\",\"3\",\"3\"]) == \"3\"\nassert solution
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12, 'failed'\n\n--------test case-------\nimport sys"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 11 10\") == \"12\"\nassert solution(\"10 20 30 40\") == \"22\"\nassert solution(\"1 2 3 4\") == \"14\"\nassert solution(\"11 12 13\") == \"14\"\nassert solution(\"5 11 10 20\") == \"22\"\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"12\""
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 1), \"3 does not make sense\"\n\nassert solution(3, 2), \"3 does not make sense\"\n\nassert solution(3, 1), \"3 does not make sense\"\n\nassert solution(3, 2), \"3 does not make sense\"\n\nassert solution(3, 0), \"3 does not make sense\"\n\n\"\"\"\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['4', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '1', '1', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '1', '1', '1', '1', '0', '1', '0', '1', '1', '1', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '1', '1', '1', '0', '1', '1', '0', '1', '1', '0', '1', '0', '0', '0', '0', '1', '0', '1', '0', '0', '0', '0', '0', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '0', '1', '0', '0', '0', '0', '0', '0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10 5 0 0 0 0 0') == 12\nassert solution('100 4 0 0 0 0 0') == 12\nassert solution('9 3 7 3') == 12\nassert solution('1 2') == 12\nassert solution('0 3') == 12\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12\n\n------------------\nInput\n\nThe first line of input contains an integer n, the number of characters in the alphabet. Then it is one of the n numbers 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 (1 \u2264 n \u2264 100). Then it is a sequence of '0' and '1' that means that the character is '0' and is used for all letters in the alphabet. The next n lines contains '0' and '1' for the next '0' and '1' characters (respectively) in the sequence. The next n lines contains '0' and '1' for the next '0' and '1' characters (respectively) in the sequence.\n\nOutput\nReturn the minimum total cost of the alphabet.\n\n\n\nassert solution(stdin) == 12\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 1 4 3 2\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 3 2 2 2 3 1 1 1\") == \"YES\"\nassert solution(\"2 2 3 3 3 3 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"1\", \"4\", \"3\", \"2\"]) == \"NO\"\nassert solution([\"10\", \"2\", \"1\", \"9\", \"10\"]) == \"YES\"\n\nassert solution([\"10\", \"2\", \"1\", \"9\", \"10\"]) == \"NO\"\nassert solution([\"10\", \"2\", \"1\", \"9\", \"10\"]) == \"NO\"\nassert solution([\"10\", \"2\", \"1\", \"9\", \"10\"]) == \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3 10 5 6 4') == 'NO'\nassert solution('10 2 1 9 10') == 'YES'"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n> Input\n3 2 4 4\n> Output\nYES\n\n> Explanation\nWe visit: 3 stations, and only arrive at 3 stations at time 1 minute.\n\"\"\"\n\nclass Station:\n    def __init__(self, start, finish):\n        self.start = start\n        self.finish = finish\n        self.finish = self.start + self.finish\n\n    def __repr__(self):\n        return str(self.start) + \" \" + str(self.finish)\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 3 5 6') == 'NO'\nassert solution('2 4 7') == 'NO'\nassert solution('1 2 3 4') == 'YES'\nassert solution('2 3 4') == 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2 3 1 4 1\") == \"YES\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\nassert solution(\"5 2 3 1 4 5\") == \"NO\"\nassert solution(\"5 2 3 4 5\") == \"NO\"\nassert solution(\"5 4 4\") == \"NO\"\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0, 0) == \"NO\"\nassert solution(1, 1) == \"YES\"\nassert solution(2, 2) == \"NO\"\nassert solution(3, 3) == \"YES\"\nassert solution(4, 4) == \"YES\"\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 1 5 3 2\") == \"YES\"\nassert solution(\"10 1 5 3 2\") == \"NO\"\nassert solution(\"10 2 1 9 10\") == \"NO\"\nassert solution(\"10 2 1 4 5\") == \"NO\"\nassert solution(\"10 2 1 4 5\") == \"YES\"\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\n-----Constraints-----\n\n1 <= x, y <= 10^18\n\n1 <= l <= r <= 10^18\n\nl <= x <= r\n'''\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"8\"\nassert solution
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\") == 0\n\n\"\"\""
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 3000\n1 <= stdin[i] <= 10^18\nstdin has the following structure:\n\nSTDIN contains exactly 4 lines containing integer values stdin[0], stdin[1], stdin[2] and stdin[3].\nThere is no space or newline at the end of the input.\n\nOutput of the program is guaranteed to be a string of digits with no leading zeros and no digits except for the zero in that position.\n\nExample Input\n3 5 10 22\n\nExample Output\n0\n\nExplanation\nThe input [2, 3, 5, 10, 22] is considered as valid.\n\nSo maximum length of The Golden Age is achived in the interval [1, 1].\n\nExample Explanation\nThe input [2, 3, 5, 10, 22] is considered as invalid because the sequence [2, 3, 5, 10, 22] is longer than the sequence [2, 3, 5, 10, 24].\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 3 1 10') == 1, '1'\nassert solution('3 5 10 22') == 8, '8'\nassert solution('2 3 3 5') == 0, '0'\nassert solution('2 3 3 4') == 5, '5'\nassert solution('2 3 3 6') == 7, '7'\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 0\nassert solution(input) == 8\nassert solution(input) == 0\nassert solution(input) == 0\nassert solution(input) == 0\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 1 10\") == 0\nassert solution(\"3 5 10 22\") == 8\nassert solution(\"2 3 3 5\") == 0\nassert solution(\"2 3 3 5 7\") == 0\n\n###\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\n\nassert solution(\"2 3 1 10\") == 8\n\nassert solution(\"3 5 10 22\") == 0\n\nassert solution(\"2 3 3 5\") == 0\n\n------Output-----\n\nOutput\n0\n\nOutput\n0\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 1 10\") == '1'\nassert solution(\"3 5 10 22\") == '8'\nassert solution(\"2 3 3 5\") == '0'"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 2\nassert solution(6) == 4\nassert solution(27) == 12\nassert solution(50) == 0\nassert solution(54) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n\nn = int(input())\n\nprint(max(int(n / 2), 2))\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 8\nassert solution(input()) == 9\nassert solution(input()) == 10\nassert solution(input()) == 11\nassert solution(input()) == 12\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"9\") == 2\nassert solution(\"15\") == 5\nassert solution(\"27\") == 3\nassert solution(\"917\") == 9\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 5"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 3\n\n\nInput\n4\n\nOutput\n5\n\nInput\n27\n\nOutput\n5\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 4, \"Invalid\"\nassert solution(input()) == 4, \"Invalid\"\nassert solution(input()) == 3, \"Invalid\"\nassert solution(input()) == 3, \"Invalid\"\nassert solution(input()) == 1, \"Invalid\"\n\nInput\n11\n\nOutput\n1\n\n'''"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 10\nassert solution(input()) == 10\nassert solution(input()) == 5\nassert solution(input()) == 3\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 3\nassert solution(input()) == 2\n\n\"\"\"\n\nclass Solution:\n    def solution(self, n: int) -> int:\n        \n        # Create a list to store the max number of burles needed in a given partition.\n        arr = [0]*n\n\n        # Calculate the maximum number of burles needed for each partition.\n        for i in range(1, n):\n            arr[i] = arr[i-1] + 1\n        \n        # Find the minimum number of burles needed for each partition.\n        for i in range(n-2, -1, -1):\n            arr[i] = min(arr[i+1], arr[i+2])\n        return arr[0]\n    \n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 3\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asd fasd f\"\nassert solution(\"tbearno\") == \"tbearno\"\nassert solution(\"tbearna\") == \"tbearna\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n'') == '', 'Empty input.'\nassert solution('hello') == 'hhhello', 'No typos.'\nassert solution('hellooo') == 'hellooo', 'No typos.'\nassert solution('hellooo') == 'hellooo', 'No typos.'\nassert solution('hellooo') == 'hellooo', 'No typos.'\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('hellno') == 'hell no'\nassert solution('abacaba') == 'abacaba'\nassert solution('asdfasdf') == 'asdfasdf'\nassert solution('abababac') == 'abababac'\nassert solution('abababacdf') == 'abababac'\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"ab ac a\"\nassert solution(\"asdfasdf\") == \"asdfasdf\"\nassert solution(\"asd\") == \"asdfasdf\"\nassert solution(\"pqrstuuy\") == \"pq rst uy\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\") == \"\", \"fail\"\nassert solution(\"the\") == \"the\", \"fail\"\nassert solution(\"michael\") == \"michael\", \"fail\"\nassert solution(\"tasdasdasdasdasdasdasdasdasdasdsadasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasdasd_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_cjtzzz_c"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"hellno\"\n    ), \"he shouldn't be a typo\"\nassert solution(\n    \"hellno\"\n    ), \"he should not be a typo\"\nassert solution(\n    \"helln\"\n    ), \"he should not be a typo\"\nassert solution(\n    \"hellno\"\n    ), \"he should not be a typo\"\nassert solution(\n    \"hellno\"\n    ), \"he should not be a typo\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin) == \"hellno\", \"Expected hellno, got {} instead.\".format(solution(stdin))\n\"\"\""
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"the little worlboy\") == \"hellno\"\nassert solution(\"hellno\") == \"hellno\"\nassert solution(\"hellno\") == \"hellno\"\nassert solution(\"hellno\") == \"hellno\"\nassert solution(\"hellno\") == \"hellno\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"hellno\"\nassert solution(stdin) == \"abacaba\"\nassert solution(stdin) == \"asdfasdf\"\nassert solution(stdin) == \"defasdf\"\nassert solution(stdin) == \"asd fsd\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('hellno') == \"hell no\"\nassert solution('abacaba') == \"abacaba\"\nassert solution('asdfasdf') == \"asdfasdf\"\nassert solution('asdfasdfasdf') == \"asdfasdfasdf\"\nassert solution('asdfasdfasdfasdf') == \"asdfasdfasdfasdf\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"20\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^9\n1 \u2264 k \u2264 10^9\n1 \u2264 s \u2264 10^9\n1 \u2264 m \u2264 3\u00b710^5\n1 \u2264 x \u2264 2\u00b710^9\n1 \u2264 b_{i} \u2264 x\n1 \u2264 a_{i} \u2264 b_{i}\n1 \u2264 c_{i} \u2264 2\u00b710^9\n1 \u2264 d_{i} \u2264 2\u00b710^9\n1 \u2264 n \u2264 k\n1 \u2264 s \u2264 k\n2\u00b710^5\nInput\n20 3 2\n10 99\n2 4 3\n20 10 40\n4 15\n10 80\n\nOutput\n20\n\nInput\n20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800\n\nOutput\n200\nExplanation\n\nWith a penalty of 5 for the first spell, Anton can use b_{i} spell, so he takes 2 seconds, and takes 4 seconds.\nwith a penalty of 10 for the second spell, Anton can use a spell of the second type, so he takes 4 seconds, and takes 2 seconds.\nwith a penalty of 20 for the second spell, Anton can use a spell of the second type, so he takes 4 seconds, and takes 2 seconds.\nwith a penalty of 100 for the second spell, Anton can use a spell of the second type, so he takes 4 seconds, and takes 2 seconds.\nSo, if Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 80 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 700 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 600 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 1000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 1300 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 1400 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 2100 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 2400 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 2700 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 3000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 30000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 3500 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 40000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 50000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 60000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 70000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 80000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 90000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 100000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 110000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 120000 for the second spell, Anton takes a potion, he needs to wait 4 seconds for the spell to complete, so he takes 15 seconds.\nSo, with a penalty of 130000 for the second spell, Anton takes"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"20\"\n\n\n------SAMPLE OUTPUT-----\n\nPrint one integer\u00a0\u2014 the minimum time one has to spent in order to prepare n potions.\n\nInput\n20 3 2\n10 99\n2 4 3\n20 10 40\n4 15\n10 80\n\nOutput\n20\n\nInput\n20 3 2\n10 99\n2 4 3\n200 100 400\n4 15\n100 800\n\nOutput\n200\n\n\"\"\""
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"200\"\nassert solution(stdin) == \"90\"\n\n\n-----Constraints-----\n0 < stdin.length <= 2000\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= k <= 10^9\n1 <= c[i] <= 10^9\n1 <= d[i] <= 10^9\n\nAccepted\n32,222\nSubmissions\n2,029\n\n-----Time Limit Exceeded-----\n\nInput\n20 3 2\n10 99\n2 4 3\n20 10 40\n4 15\n10 80\n\nOutput\n42\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        import numpy as np\n        import heapq\n        import copy\n        n, m, k = map(int, stdin.split())\n        x, s = map(int, stdin.split())\n        # t = np.zeros(n, dtype=np.int32)\n        # t[x] = s\n        t = np.zeros(n, dtype=np.int32)\n        t[x] = s\n        q = []\n        t_len = 0\n        for _ in range(k):\n            t[t[x]] = s\n            t_len += s\n            heapq.heappush(q, (s, x))\n        while len(q) > 0:\n            s, x = heapq.heappop(q)\n            if t_len + s >= x:\n                t_len += s\n            else:\n                t[x] = t_len\n                t_len = x\n                heapq.heappush(q, (t_len, x))\n        return str(t_len)\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '20'\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"20 3 2\") == \"20\"\nassert solution(\"20 3 2 1\") == \"10\"\nassert solution(\"20 3 2 3\") == \"20\"\nassert solution(\"20 3 2 4\") == \"100\"\nassert solution(\"20 3 2 5\") == \"100\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"1 1 10\") == \"3\"\nassert solution(\"1 1 5\") == \"3\"\nassert solution(\"1 1 10 2\") == \"10\"\nassert solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 229 230 231 232 233 234 235 236 237 238 238 239 240 241 242 243 244 245 246 247 248 249 251 252 253 253 254 255 255 256 257 258 259 260 261 262 263 264 265 266 268 269 270 271 272 275 275 276 277 278 279 280 281 282 283 284 285 286 287 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 301 301 302 301 304 301 305 306 307 308 309 310 311 311 313 313 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 328 329 330 330 331 332 333 333 333 334 334 335 336 337 336 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '200'\n\"\"\"\n\nfrom typing import Tuple\n\n\nclass Solution:\n    def solution(self, n: int, m: int, k: int, a: int, b: int, c: int, d: int) -> str:\n        def dfs(k, manapoints):\n            if k > n:\n                return 0\n            if manapoints < a or manapoints < c:\n                return dfs(k+1, manapoints+b) + dfs(k+1, manapoints+d)\n            return dfs(k+1, manapoints)\n\n        return str(dfs(k, m))[1:-1]\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"2 3 4\"\nassert solution(\"1 2 3 4 \") == \"1 2 3 4\"\nassert solution(\"1 2 3 4 \") == \"1 2 3 4\"\nassert solution(\"1 2 3 4 \") == \"1 2 3 4\"\nassert solution(\"1 2 3 4 \") == \"1 2 3 4\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '20'\n\"\"\""
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"200\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"5\", \"5\", \"4\", \"4\", \"5\", \"5\", \"4\", \"4\"]) == \"7\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^2\n1 <= stdin[i] <= 10^5\n1 <= t_{j} <= 1000000\n0 <= k < stdin.length\n\"\"\""
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"23\"\nassert solution(stdin) == \"34\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"20\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\n\n----Reminder----\n\nAfter solving a task, you should complete it only if you can solve all of it. If you cannot, you should try your solution again and again.\n\nYou are not required to use this function. If you have some \"simple math\" solution, please use the below solution.\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n'''\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '7'\n\"\"\""
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == 1\nassert solution(3) == 0\nassert solution(0) == 0\n\n\n\n\"\"\",\n\"Accepted\": 9,\n\"Difficulty\": 1,\n\"Tags\": [\"BST\", \"Recursion\", \"String\", \"HashTable\"]\n}\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"1\"\n\nassert solution(input) == \"0\"\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \n        def is_balanced(left: int, right: int):\n            if left > right:\n                return False\n            elif left == right:\n                return True\n            \n            left_parity = 0\n            right_parity = 0\n            \n            if left == 0:\n                return True\n            \n            if right == 0:\n                return False\n            \n            left_parity = left // left\n            right_parity = right // right\n            \n            if left_parity!= right_parity:\n                return False\n            \n            return is_balanced(left_parity, right_parity)\n            \n            \n        def bst(num: int) -> str:\n            if num == 1:\n                return \"perfect\"\n            \n            if num % 2 == 0:\n                return \"perfect\"\n            \n            return bst(num // 2)\n            \n        def count_bst(num: int) -> str:\n            count = 0\n            while num!= 0:\n                if num % 2 == 0:\n                    count += 1\n                num //= 2\n            return count\n        \n        def count_striped(num: int) -> str:\n            count = 0\n            while num!= 0:\n                num //= 2\n                count += count_bst(num)\n            return count\n                \n        return count_striped(sum(map(int, stdin.split())))\n            \n                \n        \n        "
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\"), \"2 is not a valid integer.\"\nassert solution(\"3\"), \"3 is not a valid integer.\"\nassert solution(\"5\"), \"5 is not a valid integer.\"\nassert solution(\"11\"), \"11 is not a valid integer.\"\nassert solution(\"9\"), \"9 is not a valid integer.\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"7\") == \"0\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"0\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 1\nassert solution(3) == 0\nassert solution(4) == 0\n\n\n------SAMPLE INPUT------\n\n3\n\n------SAMPLE OUTPUT------\n\n1\n\n1\n\n\n------SAMPLE INPUT------\n\n5\n\n------SAMPLE OUTPUT------\n\n1\n\n1\n\n\n\n------SAMPLE INPUT------\n\n6\n\n------SAMPLE OUTPUT------\n\n0\n\"\"\"\n\n\"\"\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == \"1\"\nassert solution(1) == \"0\"\nassert solution(2) == \"0\"\nassert solution(3) == \"0\"\nassert solution(4) == \"0\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == 0\nassert solution(2) == 0\nassert solution(4) == 1\nassert solution(5) == 1\nassert solution(6) == 1\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"0\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1 2'\n\n\n-----Constraints-----\n1 <= stdin.length <= 1000\nstdin.length >= 2\n2 <= n, m <= 10^9\n1 <= k < n\u00b7m <= 100\n\n\"\"\"\nclass Solution:\n    def move(self,direction,n,m,k):\n        if direction == 0:\n            for _ in range(n):\n                self.curr_cell = (self.curr_cell[0] + 1, self.curr_cell[1])\n            return self.curr_cell\n\n        elif direction == 1:\n            for _ in range(n - m):\n                self.curr_cell = (self.curr_cell[0], self.curr_cell[1] - 1)\n            return self.curr_cell\n\n        elif direction == 2:\n            for _ in range(m - n):\n                self.curr_cell = (self.curr_cell[0] - 1, self.curr_cell[1])\n            return self.curr_cell\n\n        elif direction == 3:\n            for _ in range(k):\n                self.curr_cell = (self.curr_cell[0] + 1, self.curr_cell[1])\n            return self.curr_cell\n\n        else:\n            return self.curr_cell"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"4 3\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 3 0') == '1 1'\nassert solution('4 3 7') == '3 2'"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0, 0) == '1 1'\nassert solution(4, 3) == '1 2'\nassert solution(4, 7) == '3 2'\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,1) == '1'\nassert solution(2,2) == '2'\nassert solution(3,1) == '3'\nassert solution(4,3) == '3'\nassert solution(5,4) == '4'\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"3 2\"\nassert solution(input) == \"1 1\"\n\n\nassert solution(input) == \"1 2\"\nassert solution(input) == \"3 2\"\n\n\nassert solution(input) == \"3 3\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 1\"\n\nInput\n4 3 0\n\nOutput\n1 1\n\nInput\n4 3 11\n\nOutput\n3 2\n\"\"\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 1'\n\"\"\"\n\n\nclass Solution:\n    def checkInclusion(self, s1: str, s2: str) -> bool:\n        \"\"\"\n        Leetcode\n        You are going to be given two strings s1 and s2 and you are trying to find a string that is as long as possible and as long as possible.\n        You are given the first string s1 and the second string s2.\n        You are allowed to change the string s1 and s2 at most once.\n        \"\"\"\n\n        i = 0\n        j = 0\n        n, m = len(s1), len(s2)\n        is_matched = []\n        is_matched_2 = set()\n        while i < n or j < m:\n            if i == n and j == m:\n                if is_matched_2:\n                    return \"\".join(is_matched_2)\n\n                return \"\".join(is_matched)\n\n            if s1[i] == s2[j]:\n                i += 1\n                j += 1\n\n            else:\n                is_matched.append(s1[i])\n                i += 1\n\n        return \"\".join(is_matched)\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"6\") == \"1 3\"\nassert solution(\"4\") == \"1 4\"\nassert solution(\"1\") == \"1 1\""
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 1"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == 1\nassert solution(6) == 1\nassert solution(4) == 2\nassert solution(1) == 1\nassert solution(5) == 2\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        \n        '2', '1', '3', '1', '1', '2', '1'\n    ]\n
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 2, 2, 1) == 1\nassert solution(1, 2, 3, 1) == 2\nassert solution(3, 2, 2, 1) == 1\nassert solution(5, 1, 1, 1) == 1\nassert solution(7, 1, 1, 1) == 1\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('6') == '1'\nassert solution('4') == '1'\nassert solution('1') == '1'\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"6\") == 2\nassert solution(\"4\") == 1\nassert solution(\"1\") == 1"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2, 5, 7) == 7, \"Correct\"\n\nassert solution(1, 5, 7) == 0, \"Incorrect\"\n\nassert solution(3, 3, 7) == 0, \"Incorrect\"\n\nassert solution(2, 1, 1) == 0, \"Incorrect\"\n\nassert solution(2, 1, 2) == 0, \"Incorrect\""
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2,5,7) == 7\nassert solution(4,7,13) == 21\nassert solution(2,3,2) == 0"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"7\"\nassert solution(\"2 1 1\") == \"21\"\nassert solution(\"2 1 2\") == \"0\""
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin.readline()) == 0\n\"\"\"\n\nfrom collections import deque"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 4 5 10\"\n) == \"4 7\"\nassert solution(\n    \"3 13\"\n) == \"0\"\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"21\"\n\"\"\""
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 5, 7) == 7\nassert solution(2, 3, 2) == 3\nassert solution(2, 1, 1) == 0\nassert solution(2, 0, 1) == 0\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2,7,3) == 2\nassert solution(2,7,1) == 2\nassert solution(2,7,4) == 0\nassert solution(2,7,1) == 2\nassert solution(2,7,0) == 2\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 21\nassert solution(stdin) == 0\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 2 1\") == \"YES\"\nassert solution(\"2 2 2\") == \"YES\"\nassert solution(\"2 3 2\") == \"NO\"\nassert solution(\"2 2 2\") == \"NO\"\nassert solution(\"3 3 3\") == \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'NO'\n'''\n\n'''\nGiven n representing the amount of pieces of a chess board.\n\nIt is possible to place pieces on the board such that no two adjacent pieces are sharing an occupied space.\n\nReturn the maximum amount of pieces that can be put in the board (not necessarily the minimum amount of pieces).\n\nNote that in a chess board with n rows and m columns, each of the m pieces can be placed anywhere in the board.\n\n \n\nExample 1:\n\nInput: n = 3, m = 3\nOutput: 3\nExplanation:\nThe chess board looks like this:\n-------------\n\n.....\n.....\n.....\n\nAfter placing three 3-piece pieces, the board looks like this:\n-------------\n\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n\n\nExample 2:\n\nInput: n = 1, m = 1\nOutput: 1\nExplanation:\nThe chess board looks like this:\n-------------\n\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n\n\nExample 3:\n\nInput: n = 1, m = 2\nOutput: 0\nExplanation:\nThe chess board looks like this:\n-------------\n\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n.....\n\n\nExample 4:\n\nInput: n = 4, m = 4\nOutput: 0\nExample 5:\n\nInput: n = 2, m = 2\nOutput: 0\n \n\nConstraints:\n\n1 <= n <= 1000\n1 <= m <= 1000\n\n\nclass Solution:\n    def maxCount(self, n: int, m: int) -> int:\n        \n        \n        dp = [[0]*(m+1) for i in range(n+1)]\n        dp[1][0] = 1\n        \n        \n        for i in range(2, n+1):\n            for j in range(m+1):\n                if j < dp[i-1][j]:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i-1][j-m]\n                    \n        return dp[n][m]\n            \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2, 2, 1, 3, 2, 1, 1) == \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\"]) == \"YES\"\nassert solution([\"3\", \"2\", \"4\", \"1\"]) == \"YES\"\nassert solution([\"3\", \"4\", \"1\", \"2\"]) == \"NO\""
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\") == \"YES\"\nassert solution(\"2 3 4\") == \"NO\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 7\"\nassert solution(stdin) == \"2 7 1\"\nassert solution(stdin) == \"2 7 4 5\"\nassert solution(stdin) == \"1 4 5 6 7 8\"\nassert solution(stdin) == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 2 + 7 + 28 == 9 + 7 + 28 == 2 + 7 + 28 + 2\nassert solution(6) == 2 + 7 + 28 + 1 + 7 + 28 + 1 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 + 28 + 2 + 7 +"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n        int(i)\n        for i in stdin\n        if i!= int(i)\n    ]\n) == int(i)\n'''\n\nclass Solution:\n    def solution(self, arr):\n        n = len(arr)\n        if not arr:\n            return\n        dp = [1] * n\n        dp[0] = arr[0]\n        for i in range(1, n):\n            dp[i] = max(dp[i - 1] + arr[i], arr[i])\n        return dp[-1]"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    ['2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 1\nassert solution(7) == 1\nassert solution(8) == 1\nassert solution(9) == 1\nassert solution(10) == 1\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == 1\nassert solution(2) == 3\nassert solution(4) == 7\nassert solution(6) == 28\nassert solution(7) == 49\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 5\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 7\n\n\n-----Sample Input-----\n2 4\n\n-----Sample Output-----\n7\n\n7 will divide every element of A if, for example, we perform the following operation:\n - Choose i = 2, j = 1. A becomes (7, 21).\nWe cannot reach the situation where 4 or greater integer divides every element of A.\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(N K\n              ) <= 7\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 3\",\n    8,\n    20\n) == 7\nassert solution(\n    \"8 20\",\n    8,\n    20\n) == 21\nassert solution(\n    \"9 27\",\n    10,\n    27\n) == 21\nassert solution(\n    \"47 4\",\n    47,\n    4\n) == 19\nassert solution(\n    \"47 5\",\n    47,\n    5\n) == 19\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 7\n'''"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '7'\n'''"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"7\"\n\n-----My Solution-----\nThis is a solution from the official answer, but it is very difficult to add in this line.\n\nimport itertools\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"7\"\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\"2 3\", \"8 20\"]\n) == \"7\"\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"7\"\nassert solution(\"8 20\") == \"7\"\nassert solution(\"10 200 1000\") == \"8\"\nassert solution(\"7 200 1000\") == \"7\"\nassert solution(\"10 200 1000\") == \"7\""
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\",\"1\",\"1\"]) == \"12\"\nassert solution([\"2\",\"1\",\"0\",\"0\",\"0\",\"1\",\"0\"]) == \"12\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"0\"]) == \"12\"\nassert solution([\"2\",\"1\",\"0\",\"0\",\"0\",\"1\",\"0\",\"2\"]) == \"8\"\nassert solution([\"1\",\"1\",\"1\",\"0\",\"0\",\"1\",\"1\",\"1\"]) == \"8\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\n\nInput\n39\n\nOutput\n3\n4 3 \nInput\n1\n\nOutput\n0\n\nInput\n7\n\nOutput\n0\n\nInput\n1\n\nOutput\n0\n\nInput\n6\n\nOutput\n0\n\n\n-----Constraints-----\n\n1 <= x <= 10^5\n\n2 <= t <= 40\n\nx is a number that satisfies the requirements of the problem.\n\n\n-----Example 1-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n1\nOutput\n0\n\n\n-----Example 2-----\n\nInput\n39\n\nOutput\n3\n1 3 7 10\nInput\n2\nOutput\n0\nInput\n1\nOutput\n0\n\n\n-----Example 3-----\n\nInput\n39\n\nOutput\n3\n1 3 7 10\nInput\n4\nOutput\n0\nInput\n1\nOutput\n0\n\n\n-----Example 4-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n0\nOutput\n3\n\n\n-----Example 5-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n3\nOutput\n0\n\n\n-----Example 6-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n4\nOutput\n0\nInput\n1\nOutput\n0\n\n\n-----Example 7-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n1\nOutput\n0\n\n\n-----Example 8-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n0\nOutput\n0\n\n\n-----Example 9-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n1\nOutput\n0\n\n\n-----Example 10-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n2\nOutput\n0\nInput\n1\nOutput\n0\n\n\n-----Example 11-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n1\nOutput\n1\nInput\n0\n\n\n-----Example 12-----\n\nInput\n39\n\nOutput\n0\n1 3 7 10\nInput\n2\nOutput\n1\nInput\n1\n\n\n-----Constraints-----\n\n1 <= t <= 40\n\n\n-----Tips-----\n\nYou can perform one of two types of operations at most, 1. Replace $x$ by $x \\oplus (2^{n_i} - 1)$, with $\\oplus$ being a bitwise XOR operator. 2. Increase $x$ by $1$, changing its value to $57$. 3. Increase $x$ by $1$, changing its value to $63 = 2^6 - 1$.\n\n'''"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '14'\nassert solution(stdin) == '36'\nassert solution(stdin) == '57'\nassert solution(stdin) == '84'\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(123) == \"40\"\nassert solution(12) == \"42\"\nassert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(7) == \"31\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['a', 'b', 'b', 'c', 'd', 'd', 'd', 'e', 'e']) == '8'\nassert solution(['a', 'a', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd']) == '3'\nassert solution(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == '0'\nassert solution(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == '1'\nassert solution(['a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a']) == '0'\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 3 5\") == \"59\"\nassert solution(\"1 7 1 2 2 2 1 3 3 4 3\") == \"5\"\nassert solution(\"1 7 1 2 2 2 1 3 3 4 5\") == \"8\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"1 0 1 0 1\") == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(problem) == \"3\"\nassert solution(problem) == \"0\"\nassert solution(problem) == \"3\"\nassert solution(problem) == \"3\"\nassert solution(problem) == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 2\") == \"7\"\nassert solution(\"7 5 3\") == \"5\"\nassert solution(\"1 2 3 4\") == \"7\"\nassert solution(\"1 3 2\") == \"0\"\nassert solution(\"7 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n\n1 <= x <= 10^6\n\nTime Limit: 1 sec\n\n1 <= t <= 40\n\n0 <= n <= 30\n\n\n-----Examples-----\nInput\n1\n\nOutput\n0\n\nInput\n7\n\nOutput\n0\n\n\n-----Note-----\n\nIn the first test, one of the transforms might be as follows: $39 \\to 56 \\to 57 \\to 62 \\to 63$. Or more precisely: Pick $n = 5$. $x$ is transformed into $39 \\oplus 31$, or $56$.  Increase $x$ by $1$, changing its value to $57$.  Pick $n = 3$. $x$ is transformed into $57 \\oplus 7$, or $62$.  Increase $x$ by $1$, changing its value to $63 = 2^6 - 1$. \n\nIn the second and third test, the number already satisfies the goal requirement.\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"No\"\nassert solution(stdin), \"Yes\"\nassert solution(stdin), \"Yes\"\nassert solution(stdin), \"Yes\"\nassert solution(stdin), \"No\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 1'\n                  '2 3 5'\n                  '1 2 3 4 5 6'\n                  '7') == 7\n\n\nInput\n6 7\n1 2 3 4 5 6\n\nOutput\n7\n\n\n------Constraints------\n\n1 <= n <= 100, k <= 100, a_i < a_{i + 1}\n\n----------------------------------------------------"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n\"\"\""
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 6\") == 5\nassert solution(\"6 7\") == 7\n\n\nassert solution(\"1 2\") == 2\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 4 5 6') == '1'\nassert solution('2 3 5 6') == '1'\nassert solution('6 7') == '1'\nassert solution('7') == '1'\n\nprint('Hello World')\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 5\") == \"2\"\nassert solution(\"2 4 7\") == \"2\"\nassert solution(\"1 2 3 4 5 6\") == \"3\"\nassert solution(\"1 4\") == \"3\"\nassert solution(\"3 3 2 3\") == \"3\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"6 1\") == \"YES\"\nassert solution(\"6 2\") == \"NO\"\nassert solution(\"7 3\") == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nprint(\"The test passed!\")"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"6 1\") == \"YES\"\nassert solution(\"7 3\") == \"NO\"\nassert solution(\"6 2\") == \"NO\"\nassert solution(\"7 3\") == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"NO\"\nassert solution(\"6 1\") == \"YES\"\nassert solution(\"7 3\") == \"NO\"\nassert solution(\"6 2\") == \"NO\"\nassert solution(\"6 2\") == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(instr) == \"YES\" or solution(instr) == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4.3750000000\"\nassert solution(stdin) == \"11.3333333333\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0.3333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"4.75\"\nassert solution(stdin) == \"4.3719\"\nassert solution(stdin) == \"4.3719\"\nassert solution(stdin) == \"4.3750000000\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(-1)\nassert solution(stdin) == str(2.375)\nassert solution(stdin) == str
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('10 3 2 1') == '-1'\nassert solution('3 4 2 2 1') == '11.3333333333'\nassert solution
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '0.000000000000000'\nassert solution(stdin
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4 10 13 10 3 1') == '4.3750000000'\nassert solution('1 4 6 2 2 1') == '1.3333333333'\nassert solution('3 10 15 17 9 2') == '3.125'\nassert solution('2 6 2 1') == '2.125'\nassert solution('2 6 2 1') == '-1'\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(1.3333333333)\nassert solution(stdin) == str(-1)\n\nassert solution(stdin) == str(-1)\nassert solution(stdin) == str(-1)\nassert solution(stdin) == str(-1)\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1000000000000000000 0 1000000000000000000\",\n    \"1000000000000000000 0 1000000000000000000\",\n    \"1000000000000000000 0 1000000000000000000\",\n    \"1000000000000000000 0 1000000000000000000\",\n    \"1000000000000000000 0 1000000000000000000\",\n    \"1000000000000000000 0 1000000000000000000\",\n    \"1000000000000000000 0 1000000000000000000\"\n) == \"1000000000000000000 0 1000000000000000000\"\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n0 <= b, d, s \u2264 10^18\n\n1 <= s\n\nThe card contains three integers, b, d, and s.\n\nNo meal have been lost.\nThe times for Vasiliy left and he have waited till the next day.\nThe time of the day when Vasiliy was left.\nThe time when Vasiliy is left.\nThe number of breakfast, dinner and supper present during the vacation is a positive integer.\n\n\n\n\n\"\"\"\n\n\nimport collections\n\nclass Solution:\n    def minMeetingRooms(self, intervals):\n        \n        # create a queue to hold the current meeting\n        q = collections.deque()\n        \n        # keep a count of meetings\n        meetings = 0\n        \n        # iterate through intervals\n        for i in intervals:\n            # add meeting to the queue\n            if i[0] <= q[0]:\n                # if meeting is before meeting in queue\n                q.popleft()\n            \n            # add meeting to queue\n            else:\n                q.append(i[1])\n        \n        # check if there are meetings in the queue\n        while q:\n            meetings += 1\n            # remove meeting from queue\n            meet = q.popleft()\n            \n            # if meeting has been in queue\n            if meetings <= meetings:\n                # if meeting is after meeting in queue\n                if meet < q[0]:\n                    # if meeting is after meeting in queue\n                    q.append(meet)\n                    # increment meetings\n                    meetings += 1\n                # if meeting has been before meeting in queue\n                elif meet > q[0]:\n                    # if meeting is before meeting in queue\n                    q.append(meet)\n                    # increment meetings\n                    meetings += 1\n        \n        return meetings"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(int(input()))) == \"1\"\nassert solution(str(int(input()))) == \"0\"\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"999999999999999999\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"999999999999999999\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"999999999999999999\""
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 0 0\") == \"0\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"0\"\nassert solution(\"1000000000000000000 0 100000000000000000010000000000000000000000\") == \"0\"\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        pass"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 2 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1000000000000000000 0 1000000000000000000') == '0'\nassert solution('1000000000000000000 0 1000000000000000000000') == '999999999999999999'\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"3 2 1\\\") == \\\"1\\\"\nassert solution(\\\"1 0 0\\\") == \"0\"\nassert solution(\\\"1 0 1\\\") == \"0\"\nassert solution(\\\"1000000000000000000 0 1000000000000000000\\\") == \"999999999999999999\"\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == YES\nassert solution(stdin) == NO\n\"\"\""
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == YES\n\"\"\""
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'NO', \"incorrect return value\"\nassert solution(stdin) == 'YES', \"incorrect return value\"\nassert solution(stdin) == 'NO', \"incorrect return value\"\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\" or solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a_1, a_2,..., a_{n} <= 10^9\n\n---CODE---"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('3 3') == 'NO'\nassert solution('4 4') == 'YES'\nassert solution('5 5') == 'NO'\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"abca\",\"a\",\"b\",\"aab\",\"aba\",\"abc\"]) == \"abca\"\nassert solution([\"abcbac\",\"bacad\",\"cadcb\",\"cbadc\"]) == \"ac\"\nassert solution([\"abcbac\",\"bacad\",\"cadcb\",\"cbadc\"]) == \"-\"\nassert solution([\"abcdcba\",\"abcdcb\"]) == \"abcba\"\nassert solution([\"abca\",\"abcdcba\",\"abcdcb\"]) == \"ac\""
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"abca\"\n\n\n======="
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"a\"\nassert solution(input()) == \"ab\"\nassert solution(input()) == \"abcdcba\"\nassert solution(input()) == \"ac\"\nassert solution(input()) == \"abcba\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution((\"aabbca\",\"babca\",\"bbcaa\",\"caaab\",\"aabca\",\"a\")), \"aabbca\"\nassert solution((\"aabc\",\"aaab\",\"aaaaa\",\"aaaba\",\"aabab\",\"aa\",\"abca\",\"baba\",\"babaa\",\"bababa\",\"bababb\",\"babaaab\",\"bababaab\",\"babababab\",\"babababaab\",\"babababbaa\")), \"aabbca\"\nassert solution((\"aa\",\"aa\",\"ab\",\"aaab\",\"aabab\",\"aabab\",\"aab\",\"aabaa\",\"abbbaa\",\"abbbaa\",\"abbbaa\",\"abbbaa\",\"abbbaab\",\"abbbaab\",\"abbbaabab\",\"abbbaabab\",\"abbbaabab\",\"abbbaabab\",\"abbbaabab\")), \"aabbca\"\n\nInput\nabca\naababab\n\nOutput\n-\n\nInput\naababab\naabab\n\nOutput\n-\n\nInput\naababab\naabab\n\nOutput\n-\n\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"b\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"ac\"\nassert solution(stdin) == \"-\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"Your solution does not work.\"\n\n\"\"\""
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '-', 'incorrect answer'\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('hi'), 'hi' == 'hi'\nassert solution('abca'), 'ac' == 'abcba'\nassert solution('abcdcba'), 'ac' == 'bacdca'\nassert solution('bob'), '-' == 'bob'\nassert solution('hi'), '-hi' == '-hi'\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, \"---+\") == \"1\"\nassert solution(1, \"+\") == \"0\"\nassert solution(5, \"++\") == \"4\"\nassert solution(5, \"-+\") == \"3\"\nassert solution(2, \"-+\") == \"1\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1, \"The result is wrong!\"\nassert solution(2) == 1, \"The result is wrong!\"\nassert solution(3) == 0, \"The result is wrong!\"\nassert solution(4) == 4, \"The result is wrong!\"\nassert solution(5) == 0, \"The result is wrong!\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 0\nassert solution(4) == 0\nassert solution(2) == 4\nassert solution(5) == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '0'\n\n\n\"\"\""
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 0\nassert solution(0) == 1\nassert solution(4) == 3\nassert solution(1) == 2\nassert solution(5) == 2\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"1\") == 0\nassert solution(\"5\") == 4\nassert solution(\"0\") == 0\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4\") == \"0\", \"4 failed\"\nassert solution(\"2\") == \"1\", \"2 failed\"\nassert solution(\"3\") == \"4\", \"3 failed\"\nassert solution(\"1\") == \"0\", \"1 failed\"\nassert solution(\"0\") == \"0\", \"0 failed\""
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 4\n\nassert solution(2) == 0\n\nassert solution(5) == 3\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2') == '1'\nassert solution('2 2') == '2'\nassert solution('1 1') == '2'\nassert solution('1 1') == '2'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10\", \"11\", \"9\", \"8\", \"1\") == \"1\"\nassert solution(\"10\", \"5\", \"6\", \"1\", \"2\") == \"2\"\nassert solution(\"10\", \"5\", \"6\", \"1\", \"3\") == \"2\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"1\") == 1\nassert solution(\"4\") == 4\n\n\n\n\"\"\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n        \"2 4\",\n        \"1 1 3 1\"\n    ) == \"2\"\nassert solution(\n        \"3 5\",\n        \"2 2 1 5 1\"\n    ) == \"2\"\nassert solution(\n        \"5 2\",\n        \"1 3 3 1 3 4 4 4\"\n    ) == \"2\"\nassert solution(\n        \"5 3\",\n        \"1 4 1 5 4 3 1 3 4 4 3 4\"\n    ) == \"2\"\nassert solution(\n        \"1 1 1 1 2 2 2 2 2 2 2 2 2\",\n        \"1 1 1 1 2 2 2 2 2 2 2 2 2 2\"\n    ) == \"1\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"10 3\") == \"3\"\nassert solution(\"10 1\") == \"2\"\nassert solution(\"10 2\") == \"3\"\nassert solution(\"10 1 3\") == \"2\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2 1 3'\n\nassert solution(stdin) == '2 2 2'\nassert solution(stdin) == '2 2'\n\nassert solution(stdin) == '2 3'\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 3\") == 2\nassert solution(\"2 4 2\") == 2\n\n\n\"\"\""
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 3 4 1 2') == '2 1 3'\nassert solution('5 2 3 2 2') == '3 1 3'\nassert solution('2 3 2 2') == '2 1 3'\nassert solution('2 4') == '3 1'\nassert solution('5 2 3 2') == '2 1'\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n\n\nassert solution(\"1 2 3 4 5\") == 2\nassert solution(\"1 1\") == 1\nassert solution(\"1 4 5 6 7 8 9 10\") == 2\nassert solution(\"10 3 4 6 7 8 9 10\") == 2\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 2\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n1 <= k_1 <= n - 1 <= k_2 <= n\n\n\"\"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(str(input())), []\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == [\"1\", \"-1\", \"-1\"]\nassert solution(stdin) == [\"1\", \"-1\"]\nassert solution(stdin) == [\"1\", \"-1\"]"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"4 3 2\"\n    ),\n\"Error\"\n\nassert solution(\n    \"3 2 2\"\n    ),\n\"Error\"\n\nassert solution(\n    \"2 1 3\"\n    ),\n\"Error\"\n\nassert solution(\n    \"3 1 2\"\n    ),\n\"Error\"\n\nassert solution(\n    \"5\"\n    ),\n\"Error\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n        stdin = \"abacaba\"\n    )\nassert solution(\n        stdin = \"X12345\"\n    )\nassert solution(\n        stdin = \"CONTEST_is_STARTED!!11\"\n    )\nassert solution(\n        stdin = \"1\"\n    )\nassert solution(\n        stdin = \"1_1\"\n    )\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Correct\"\nassert solution(input()) == \"Too weak\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abacaba\"), \"abacaba\"\nassert solution(\"X12345\"), \"X12345\"\nassert solution(\"STARTED\"), \"STARTED\"\nassert solution(\"xxx\"), \"xxx\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\"), \"abcdefghijklmnopqrstuvwxyz\""
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\""
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 'Correct'\nassert solution(inp) == 'Too weak'"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == \"Correct\", \"Wrong output\"\nassert solution(2) == \"Correct\", \"Wrong output\"\nassert solution(3) == \"Too weak\", \"Wrong output\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Correct\"\nassert solution(\"a1_\") == \"Wrong\"\nassert solution(\"a1c_\") == \"Wrong\"\nassert solution(\"a1_!@#12345_\") == \"Wrong\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Correct\", \"Wrong\"\nassert solution(stdin) == \"Too weak\", \"Wrong\"\nassert solution(stdin) == \"Correct\", \"Too weak\""
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['X12345', 'X1']) == 'Correct'\nassert solution(['X12345', 'X1', 'X', 'X', 'X']) == 'Correct'\nassert solution(['ABC123', 'BAC', '123']) == 'Not Correct'\nassert solution(['abc', '_', 'xyz']) == 'Not Correct'\nassert solution(['X', 'X', 'X', 'X']) == 'Not Correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Correct\", \"The password isn't complex enough\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 1\nassert solution(inp) == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3 4 4\"\n    \"1 5 6 7 8 9 10 11 12 13 14 15\"\n    \"8 9\"\n    \"1 5 2 3 4 5 6\"\n    \"5 1 8 5 7\"\n    \"1 3\"\n    \"3 4 4 3 2\"\n) == \"3\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == -1"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4 4 4\") == \"1\"\nassert solution(\"5 5 5 5\") == \"1\"\nassert solution(\"3 2 3 2\") == \"3\"\nassert solution(\"5 1 5 3\") == \"3\"\nassert solution(\"7 1 3 2 3 1 1\") == \"3\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3' or solution(stdin) == '-1'\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"2\", \"3\", \"5\", \"3\", \"3\", \"1\", \"3\"]) == \"3\"\nassert solution([\"1\", \"1\", \"1\", \"2\", \"3\", \"5\", \"3\", \"3\", \"1\", \"3\"]) == \"4\"\nassert solution([\"1\", \"2\", \"1\", \"2\", \"1\", \"2\", \"1\", \"2\", \"2\", \"1\"]) == \"1\"\nassert solution([\"3\", \"1\", \"1\", \"2\", \"1\", \"1\", \"2\", \"2\", \"3\", \"3\"]) == \"3\"\nassert solution([\"3\", \"1\", \"1\", \"2\", \"1\", \"2\", \"2\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 'NO'\nassert solution(input) == 'YES'"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('><>') == 'NO'\nassert solution('><>') == 'YES'\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= m <= 100\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA line of characters, each separated by a space.\n\n\n[output] string\n\nA single string consisting of \"YES\" or \"NO\" depending on whether the given pattern meets the mayor's criteria.\n\n[constraints]\n\n1 <= n <= 1000\n1 <= m <= 100\n\n[input] string\n\nA string of length n.\n\n\n[output] string\n\nA single string consisting of \"YES\" or \"NO\" depending on whether the given pattern meets the mayor's criteria.\n\n\n[input] string direction\n\nA string of length 2, made of characters '<' and '>', denoting direction of each horizontal street. If the i-th character is equal to '<', the street is directed from east to west otherwise, the street is directed from west to east.\n\n\n[output] string\n\nA single string consisting of \"YES\" or \"NO\" depending on whether the given pattern meets the mayor's criteria.\n\n\n[constraints]\n\n1 <= n <= 1000\n1 <= m <= 100\n\n[input] string direction\n\nA string of length 2, made of characters '<' and '>', denoting direction of each vertical street. If the i-th character is equal to '<', the street is directed from south to north, otherwise the street is directed from north to south.\n\n\n[output] string\n\nA single string consisting of \"YES\" or \"NO\" depending on whether the given pattern meets the mayor's criteria.\n\n[constraints]\n\n1 <= n <= 1000\n1 <= m <= 100\n\n[input] string direction\n\nA string of length 2, made of characters '^' and 'v', denoting direction of each vertical street. If the i-th character is equal to '^', the street is directed from east to west otherwise, the street is directed from west to east.\n\n\n[output] string\n\nA single string consisting of \"YES\" or \"NO\" depending on whether the given pattern meets the mayor's criteria."
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"<>\") == \"NO\"\nassert solution(\"<><>\") == \"YES\"\nassert solution(\"v^v^\") == \"NO\"\nassert solution(\"^\") == \"NO\"\nassert solution(\"<>\") == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 1 1 0\") == \"YES\"\nassert solution(\"0 1 1 -1\") == \"YES\"\nassert solution(\"-1 0 0 -0\") == \"NO\"\nassert solution(\"1 0 1 -1\") == \"NO\"\nassert solution(\"1 0 0 -1\") == \"YES\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"0\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"\") == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input().strip()) == 'YES'\nassert solution(input().strip()) == 'YES'\nassert solution(input().strip()) == 'NO'\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"7\") == \"YES\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"0 1 1 0 -1 -1 0 0 0 -1 -1 1 -1 0 1 0 -1 0 0 0 0 0 0 0 0 -1 0 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 0 -1 -1 -1 0 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0 -1 0 0 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 -1 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 0 -1 0 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 0 -1 -1 -1 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 -1 0 0 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 0 -1 0 -1 -1 -1 0 -1 0 -1 0 -1 0 -1 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 -1 -1 0 -1 -1 -1 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 0 -1 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 0 -1 -1 0 -1 0 0 -1 0 0 0 0 0 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 -1 -1 -1 -1 0 -1 -1 0 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 0 0 -1 0 -1 -1 -1 -1 -1 -1 0 -1 -1 0 -1 0 0 0 -1 0 0 0 0 -1 0 0 -1 0 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 0 -1 0 0 0 0 -1 -1 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 0 -1 0 0 0 0 0 -1 -1 0 -1 -1 -1 -1 0 -1 -1 0 0 -1 0 0 0 -1 0 0 0 -1 0 0 -1 0 0 0 -1 0 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 0 0 0 0 -1 -1 -1 -1 -1 -1 -1 -1 -1 0 -1 0 0 0 0 0 -1 0 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 -1 0 0 0 0 0 -1 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 -1 0 0 0 0 -1 0 0 0 -1 0 0 -1 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\", \"Incorrect result\""
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == \"0\""
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"), \"\"\nassert solution(\"3\") == \"0 1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\\n1\") == \"2\"\nassert solution(\"3\\n2\\n5\") == \"7\"\nassert solution(\"3\\n2\\n1\\n5\") == \"7\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\\n1\\n5\") == \"2\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(12,5) == 0\nassert solution(31,12) == 7\nassert solution(31,1) == 0\nassert solution(1,1) == 0\nassert solution(1,0) == 1\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(7)\n\n\n-------------------\nInput\n\n6\n\nOutput\n\ntrue\n\n------------------\n'''\n\nimport sys\n\nclass Node():\n    def __init__(self, key, left = None, right = None, parent = None):\n        self.key = key\n        self.left = left\n        self.right = right\n        self.parent = parent\n\nclass BinaryTree():\n    def __init__(self):\n        self.root = None\n        self.size = 0\n    \n    def find(self, key):\n        if self.root == None:\n            return None\n        else:\n            if self.root.key == key:\n                return self.root\n            elif self.root.key < key:\n                return self.root.right.find(key)\n            elif self.root.key > key:\n                return self.root.left.find(key)\n\n    def insert(self, key, value):\n        if self.root == None:\n            self.root = Node(key)\n            self.size += 1\n            return True\n        else:\n            if self.root.key == key:\n                self.root.value = value\n                return True\n            elif self.root.key < key:\n                self.root.right = BinaryTree()\n                self.root.right.insert(key, value)\n                self.size += 1\n                return True\n            elif self.root.key > key:\n                self.root.left = BinaryTree()\n                self.root.left.insert(key, value)\n                self.size += 1\n                return True\n\n    def delete(self, key):\n        if self.root == None:\n            return None\n        else:\n            if self.root.key == key:\n                if self.root.right:\n                    self.root = self.root.right\n                elif self.root.left:\n                    self.root = self.root.left\n                else:\n                    return self.root\n            elif self.root.key < key:\n                self.root.right.delete(key)\n                self.size -= 1\n            elif self.root.key > key:\n                self.root.left.delete(key)\n                self.size -= 1\n            else:\n                return None"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(12, 5) == 0, \"true\"\nassert solution(31, 12) == 7, \"true\"\nassert solution(31, 12) == 7, \"false\""
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"7 12\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\u201c17 11\u201d) == \u201c15 9\u201d\nassert solution(\u201c28 19\u201d) == \u201c14 17\u201d\nassert solution(\u201c12345\u201d) == \u201c15 9\u201d\nassert solution(\u201c999\u201d) == \u201c9 9\u201d\nassert solution(\u201c123456789\u201d) == \u201c9 9\u201d\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0 1'\nassert solution(stdin) == '0 1'\nassert solution(stdin) == '0 1'\nassert solution(stdin) == '0 1'\nassert solution(stdin) == '0 1'\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 -4 4\") == \"5\"\nassert solution(\"1 3 3\") == \"2\"\nassert solution(\"2 -2\") == \"1\"\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 -4 4') == '10'\nassert solution('2 -4 4 10') == '10'\nassert solution('-4 10 2') == '3'\nassert solution('-4 -4') == '0'\nassert solution('-4 -4 4') == '0'\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 5) == 10\nassert solution(2, 10) == 5\nassert solution(4, -1) == 10\nassert solution(1, -10) == 10\nassert solution(-1, -10) == 10\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1 10') == '10'\nassert solution('2 -4 4') == '5'\nassert solution('3 -4 -1 -1') == '2'\nassert solution('2 1 10') == '10'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10, \"1 1 10\"\nassert solution(stdin) == 5, \"2 -4 4\"\nassert solution(stdin) == 5, \"2 -4 4\"\nassert solution(stdin) == 5, \"2 -4 4\"\nassert solution(stdin) == 10, \"2 -4 4\"\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 10\") == 10\nassert solution(\"2 -4 4\") == 5\nassert solution(\"3 -4 4\") == 3\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == 1\nassert solution(\"2 3 6\") == 5\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1 1 10) == 10\nassert solution(2 -4 4) == 5\nassert solution(2 -2) == 2\nassert solution(2 -3) == 4\nassert solution(2 -4) == 1\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 2, 4) == 10\nassert solution(2, -4, 4) == 5\nassert solution(2, 2, 3) == 2\nassert solution(0, 0, 0) == 1\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '5'\n\n\n'''"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10101\") == \"11101\"\nassert solution(\"11100\") == \"11101\"\nassert solution(\"1110101\") == \"11101\"\nassert solution(\"111010101\") == \"11101\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10101101\") == \"5\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"3\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"7\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"5\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"0\"\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '3'\nassert solution(3) == '7'\nassert solution(4) == '7'\nassert solution(5) == '41'\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 5\n\n>>> def solution(stdin: str) -> str:\n    return str(int(stdin.strip()) % 10)\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(21) == 5\nassert solution(123456789101112131415161718192021222324252627282930313233343536...)\nassert solution(123) == 123\nassert solution(123456789101112131415161718192021222324252627282930313233343536...)\nassert solution(123456789101112131415161718192021222324252627282930313233343536...)\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\n\n------Standards Input-------\n\nTest Input:\n1\n\nTest Output:\n5\n\nInput:\n23\n\nTest Output:\n7\n\n\n------Standards Output-------\n\nTest Explanation:\nTest Input:\n\n0123456789101112131415161718192021222324252627282930313233343536\n\nTest Output:\n5\n\n------Standards Output-------\n\nTest Explanation:\nTest Input:\n\n0123456789101112131415161718192021222324252627282930313233343536\n\nTest Output:\n7\n\n------Standards Output-------\n\nTest Explanation:\nTest Input:\n\n
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(n = 7) == 5, \"wrong value of n\"\nassert solution(n = 21) == 5, \"wrong value of n\"\nassert solution(n = 200) == 5, \"wrong value of n\"\n\n\nassert solution(n = 100) == 9, \"wrong value of n\"\nassert solution(n = 987) == 9, \"wrong value of n\"\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\n----------My Solution----------"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"112233445566778899\") == \"NO\"\nassert solution(\"1111\") == \"NO\"\nassert solution(\"1111\") == \"YES\"\nassert solution(\"12341234\") == \"NO\"\nassert solution(\"1234\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'NO'\n\n\n\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(7, \"8380011223344\") == \"NO\"\n\n\n-----Constraints-----\n0 <= n <= 10^5\ns consists only digits from the digits $|s| = n$\n\nTime Limit: 1 second\n\nExample 1:\n\nInput\n7\n8380011223344\n\nOutput\nYES\n\nExample 2:\n\nInput\n4\n123412341234123412341234\n\nOutput\nNO\n\nExample 3:\n\nInput\n5\n9191919191919191919191919\n\nOutput\nNO\n\n\n------Constraints----\n\n1 <= n <= 10^5\ns consists of digits from the digits $|s| = n$\ns[i] is not 8\n\n\n------Time Limit: 1 second\n---Memory Limit: 1048576\n------Input Format:\n\nThe first line contains an integer $n$, the length of the string $s$.\n\nThe second line contains the string $s$ ($|s| = n$), consisting only digits from the digits $|s| = n$.\n\n\n------Output Format\n\nPrint YES if Vasya has a strategy that guarantees him victory, otherwise print NO.\n\nSample Input\n\n4\n8123412341234123412341234\n\nSample Output\n\nYES\n\nExplanation\n\nGiven s = 8123412341234123412341234, Vasya starts with 8. It is impossible to complete the game.\n\nAfter the player has played a move, Vasya's move must be followed by another digit. Vasya has a strategy that guarantees him victory, if any one of the following are true:"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(8, '8') == 'NO', \"solution\"\nassert solution(9, '81') == 'NO', \"solution\"\nassert solution(10, '112') == 'YES', \"solution\"\nassert solution(11, '11011001') == 'NO', \"solution\"\nassert solution(13, '81950010') == 'YES', \"solution\"\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(13) == \"YES\"\nassert solution(15) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'NO'\n\nExample 1:\n\nInput:\n3\n8380011223344\n\nOutput:\nYES\n\nInput:\n15\n807345619350641\n\nOutput:\nYES\n\nInput:\n3\n807345619350643\n\nOutput:\nNO\n\nInput:\n15\n807345619350643\n\nOutput:\nNO\n\n\nConstraints:\n1 <= n <= 10^5\n\nTime Limit: 10^9\nSubmissions: 0\n\nclass Solution:\n    def is_valid_number(self, s: str) -> bool:\n        for i in s:\n            if len(s) % 10!= 0:\n                return False\n            if int(i) > 9:\n                return False\n        return True\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"8380011223344\") == \"YES\"\nassert solution(\"807345619350641\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == YES\n\nassert solution(stdin) == NO\n\n\"\"\"\nimport sys\nfrom collections import deque\n\ninput = sys.stdin.readline"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Submissions-----\n\nLet us now say that Vasya is a winner of his strategy if Vasya wins.\n\n\n\"\"\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['123', '42', '24', '24', '24']) == '824071958'\nassert solution(['123', '123', '24', '24', '24']) == '1110101001'\nassert solution(['123', '123', '24', '24', '24']) == '11210101001'\nassert solution(['123', '123', '24', '24', '24']) == '11210101001'\nassert solution(['123', '123', '24', '24', '24']) == '1123122424'\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('123 42 24') == '824071958'\nassert solution('123 42 24') == '824071958'\nassert solution('123 42 24') == '824071958'\nassert solution('123 42 24') == '824071958'\nassert solution('123 42 24') == '824071958'\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 824071958\n\n\n-----Constraints-----\n0 < stdin.length <= 100\n0 < stdin[i] < 10^9\n1 <= n <= 1000\n1 <= pos <= 1000\n2 <= x < 10^9\n\n-----Time complexity-----\nO(n log n)\n\nO(n log n)\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '824071958'\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4, 2) == 824071958\nassert solution(123, 42, 123, 4) == 824071958\nassert solution(123, 42, 123, 4) == 824071958\nassert solution(123, 42, 123, 4) == 824071958\nassert solution(123, 42, 123, 4) == 824071958\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == \"6\"\nassert solution(\"2 3 4\") == \"6\"\nassert solution(\"123 42 24\") == \"824071958\"\nassert solution(\"123 4 91234\") == \"824071958\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 824071958\n\n\n-----Notes-----\n\nBecause the input is a permutation of size $n$, the result may be very large, and this function returns `true` if the given number $x$ is in the given permutation of size $n$\n\nThis is a solution to the problem described in the problem statement.\n'''"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 2) == 824071958\nassert solution(4, 3) == 824071958\nassert solution(1, 2) == 1\nassert solution(3, 4) == 824071958\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '824071958'\n\n-----Constraints-----\n0 <= n <= 1000\n\n1 <= x <= n - 1\n\nPositive integers and $0 \\le pos \\le n - 1$\n\nPositive integers\n    1\n\nPositive integers\n    2\n\nPositive integers\n    3\n\nPositive integers\n    4\n\nPositive integers\n    5\n\nPositive integers\n    6\n\nPositive integers\n    7\n\nPositive integers\n    8\n\nPositive integers\n    9\n\nPositive integers\n    10\n\nPositive integers\n    11\n\nPositive integers\n    12\n\nPositive integers\n    13\n\nPositive integers\n    14\n\nPositive integers\n    15\n\nPositive integers\n    16\n\nPositive integers\n    17\n\nPositive integers\n    18\n\nPositive integers\n    19\n\nPositive integers\n    20\n\nPositive integers\n    21\n\nPositive integers\n    22\n\nPositive integers\n    23\n\nPositive integers\n    24\n\nPositive integers\n    25\n\nPositive integers\n    26\n\nPositive integers\n    27\n\nPositive integers\n    28\n\nPositive integers\n    29\n\nPositive integers\n    30\n\nPositive integers\n    31\n\nPositive integers\n    32\n\nPositive integers\n    33\n\nPositive integers\n    34\n\nPositive integers\n    35\n\nPositive integers\n    36\n\nPositive integers\n    37\n\nPositive integers\n    38\n\nPositive integers\n    39\n\nPositive integers\n    40\n\nPositive integers\n    41\n\nPositive integers\n    42\n\nPositive integers\n    43\n\nPositive integers\n    44\n\nPositive integers\n    45\n\nPositive integers\n    46\n\nPositive integers\n    47\n\nPositive integers\n    48\n\nPositive integers\n    49\n\nPositive integers\n    50\n\nPositive integers\n    51\n\nPositive integers\n    52\n\nPositive integers\n    53\n\nPositive integers\n    54\n\nPositive integers\n    55\n\nPositive integers\n    56\n\nPositive integers\n    57\n\nPositive integers\n    58\n\nPositive integers\n    59\n\nPositive integers\n    60\n\nPositive integers\n    61\n\nPositive integers\n    62\n\nPositive integers\n    63\n\nPositive integers\n    64\n\nPositive integers\n    65\n\nPositive integers\n    66\n\nPositive integers\n    67\n\nPositive integers\n    68\n\nPositive integers\n    69\n\nPositive integers\n    70\n\nPositive integers\n    71\n\nPositive integers\n    72\n\nPositive integers\n    73\n\nPositive integers\n    74\n\nPositive integers\n    75\n\nPositive integers\n    76\n\nPositive integers\n    77\n\nPositive integers\n    78\n\nPositive integers\n    79\n\nPositive integers\n    80\n\nPositive integers\n    81\n\nPositive integers\n    82\n\nPositive integers\n    83\n\nPositive integers\n    84\n\nPositive integers\n    85\n\nPositive integers\n    86\n\nPositive integers\n    87\n\nPositive integers\n    88\n\nPositive integers\n    89\n\nPositive integers\n    90\n\nPositive integers\n    91\n\nPositive integers\n    92\n\nPositive integers\n    93\n\nPositive integers\n    94\n\nPositive integers\n    95\n\nPositive integers\n    96\n\nPositive integers\n    97\n\nPositive integers\n    98\n\nPositive integers\n    99\n\nPositive integers\n    100\n\nPositive integers\n    101\n\nPositive integers\n    102\n\nPositive integers\n    103\n\nPositive integers\n    104\n\nPositive integers\n    105\n\nPositive integers\n    106\n\nPositive integers\n    107\n\nPositive integers\n    108\n\nPositive integers\n    109\n\nPositive integers\n    110\n\nPositive integers\n    111\n\nPositive integers\n    112\n\nPositive integers\n    113\n\nPositive integers\n    114\n\nPositive integers\n    115\n\nPositive integers\n    116\n\nPositive integers\n    117\n\nPositive integers\n    118\n\nPositive integers\n    119\n\nPositive integers\n    120\n\nPositive integers\n    121\n\nPositive integers\n    122\n\nPositive integers\n    123\n\nPositive integers\n    124\n\nPositive integers\n    125\n\nPositive integers\n    126\n\nPositive integers\n    127\n\nPositive integers\n    128\n\nPositive integers\n    129\n\nPositive integers\n    130\n\nPositive integers\n    131\n\nPositive integers\n    132\n\nPositive integers\n    133\n\nPositive integers\n    134\n\nPositive integers\n    135\n\nPositive integers\n    136\n\nPositive integers\n    137\n\nPositive integers\n    138\n\nPositive integers\n    139\n\nPositive integers\n    140\n\nPositive integers\n    141\n\nPositive integers\n    142\n\nPositive integers\n    143\n\nPositive integers\n    144\n\nPositive integers\n    145\n\nPositive integers\n    146\n\nPositive integers\n    147\n\nPositive integers\n    148\n\nPositive integers\n    149\n\nPositive integers\n    150\n\nPositive integers\n    151\n\nPositive integers\n    152\n\nPositive integers\n    153\n\nPositive integers\n    154\n\nPositive integers\n    155\n\nPositive integers\n    156\n\nPositive integers\n    157\n\nPositive integers\n    158\n\nPositive integers\n    159\n\nPositive integers\n    160\n\nPositive integers\n    161\n\nPositive integers\n    162\n\nPositive integers\n    163\n\nPositive integers\n    164\n\nPositive integers\n    165\n\nPositive integers\n    166\n\nPositive integers\n    167\n\nPositive integers\n    168\n\nPositive integers\n    169\n\nPositive integers\n    170\n\nPositive integers\n    171\n\nPositive integers"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4, 2, 3, 4) == 6\nassert solution(123, 24, 1, 4) == 824071958\nassert solution(123, 24, 1, 2) == 824071958\nassert solution(123, 24, 1, 3) == 824071958\nassert solution(123, 24, 1, 4) == 824071958\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"happynewyear\"\nassert solution(stdin) == \"ababb\"\nassert solution(stdin) == \"ababb\"\nassert solution(stdin) == \"ababb\"\nassert solution(stdin) == \"a\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(hw?ap*yn?eww*ye*ar) == 12\nassert solution(hw?ap*yn?eww*ye*ar) == \"aa\"\nassert solution(hw?ap*yn?eww*ye*ar) == \"babb\"\nassert solution(hw?ap*yn?eww*ye*ar) == \"ababb\"\nassert solution(hw?ap*yn?eww*ye*ar) == \"aa\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Impossible\", \"solution does not return a valid answer.\""
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"Hello, Andrey!\") == \"Hello, Andrey!\"\nassert solution(\"Hello, Andrey!\") == \"Hello, Andrey!\"\nassert solution(\"hello!\") == \"Hello, Andrey!\"\nassert solution(\"Hello, Andrey!\") == \"Hello, Andrey!\"\nassert solution(\"Hello, Andrey!\") == \"Hello, Andrey!\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin: str) == \"happynewyear\"\nassert solution(\n    stdin: str) == \"happypdunewyyw\"\nassert solution(\n    stdin: str) == \"happypdunewww\"\nassert solution(\n    stdin: str) == \"happypdunewy\"\nassert solution(\n    stdin: str) == \"happypdunewe\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(hw?)\nassert solution(ab)\nassert solution(ab???)\nassert solution(ababb)\nassert solution(abab?a)\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ahoy!hw?ap*yn?eww*ye*ar\") == \"happynewyear\"\nassert solution(\"ab?a\") == \"aa\"\nassert solution(\"abbb\") == \"aba\"\nassert solution(\"abaaaa\") == \"ababb\"\nassert solution(\"ab?a?a\") == \"ababb\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"happynewyear\") == \"aa\"\nassert solution(\"happynewyear\") == \"bba\"\nassert solution(\"happynewyear\") == \"cdd\"\nassert solution(\"happynewyear\") == \"eeee\"\nassert solution(\"happynewyear\") == \"ffff\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"hello world\") == \"hi there\"\nassert solution(\"hi\") == \"hi there\"\nassert solution(\"hello world\") == \"hi there\"\nassert solution(\"hello\") == \"hi there\"\nassert solution(\"\") == \"hello world\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('a*') == 'a'\nassert solution('*?') == '?'\nassert solution('?a?') == 'a'\nassert solution('aa?') == 'aa'\nassert solution('ab?') == 'ab'\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(60) == \"1\", \"90 degrees clockwise\"\nassert solution(60) == \"3\", \"360 degrees counter-clockwise\"\nassert solution(60) == \"0\", \"0 degrees\"\nassert solution(60) == \"2\", \"90 degrees clockwise\"\nassert solution(60) == \"1\", \"90 degrees counter-clockwise\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(60) == 1\nassert solution(-60) == 3\nassert solution(120) == 30\nassert solution(30) == 120\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 1000\n0 <= x <= 10^18\n\n\n-----Divisors 1<= x <= 2^31 - 1"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(60) == '1'\nassert solution(60) == '3'\n\n\n\nExample 1:\n\nInput\n12\n\nOutput\n5\n\nExplanation\nExpected output: 12\nExpected output =  5\n\nNote:\n\nThe maximum line of input is at most 10^18.\nThe camera angle is between -180\u00b0 (clockwise) and 180\u00b0 (counter-clockwise).\nThe camera angle must be divisible by 90.\n\n\nConstraints:\n\n1 <= stdin.length <= 100\n-10^18 < x < 10^18\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return str(int(stdin) % 90)\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '3'"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '60'\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"60\") == \"3\"\nassert solution(\"-60\") == \"1\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(60) == 1\nassert solution(90) == 3\nassert solution(60) == 3\nassert solution(60) == 1\nassert solution(90) == 1\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(60) == 1, \"60\"\nassert solution(60) == 1, \"60\"\nassert solution(60) == 1, \"60\"\nassert solution(60) == 1, \"60\"\nassert solution(60) == 1, \"60\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"60\") == \"1\"\nassert solution(\"-60\") == \"3\"\nassert solution(\"60-60\") == \"2\"\nassert solution(\"-60-60\") == \"4\"\nassert solution(\"-60-60-60\") == \"5\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"25\"\nassert solution(input()) == \"123\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 4 0\") == \"Yes\"\nassert solution(\"5 6 1\") == \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n-----Problem-----\n\nGiven two integers a and b,\n\nreturn true if it is possible to transform two blue blue spheres into one orange sphere of any other color. If not, return false.\n\nThe transformation process is written as follows:\n\nb blue\nx blue\ny violet\nz orange\nFor example, if we transform one blue blue sphere into one orange sphere of any color, we can get the other blue blue sphere. If we transform one blue blue sphere into two violet sphere of any color, we can get two orange spheres of any color.\n\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA blue blue sphere of any color\nA"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3 3\") == \"Yes\"\nassert solution(\"1 2 1\") == \"Yes\"\nassert solution(\"4 4 0\") == \"No\"\nassert solution(\"2 2 2\") == \"No\"\nassert solution(\"3 3 3\") == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 4 0\") == \"Yes\", \"No\"\nassert solution(\"5 6 1\") == \"Yes\", \"No\"\nassert solution(\"3 3 3\") == \"Yes\", \"No\"\nassert solution(\"2 2 2\") == \"Yes\", \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\"\"\"\n2 3\n0 2\n1 7\n0 0\n1 1\n\"\"\"\n) == \"Yes\"\nassert solution(\n\"\"\"\n4 2 0\n2 1 2\n0 2 0\n1 0 1\n\"\"\"\n) == \"No\"\nassert solution(\n\"\"\"\n5 5 2\n2 7 2\n1 7 1\n0 0 1\n\"\"\"\n) == \"Yes\"\nassert solution(\n\"\"\"\n2 2 3\n2 0 0\n2 0 2\n2 0 3\n\"\"\"\n) == \"No\"\nassert solution(\n\"\"\"\n5 1 4\n4 2 2\n1 1 1\n\"\"\"\n) == \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3') == '6'\nassert solution('1 2 3 4') == '45'\nassert solution('10 0 0') == '590'\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '590'\n\n>>> def solution(stdin: str) -> str:\n    pass\n\"\"\""
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1 2 1000) == 4\nassert solution(2 2 1000) == 45\nassert solution(5 3 1103) == 5590\nassert solution(3) == 2"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"2 2 3\") == \"3\"\nassert solution(\"2 2 3 4\") == \"1\"\nassert solution(\"2 2 3 5\") == \"4\"\nassert solution(\"2 2 3 6\") == \"5\"\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"45\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == \"590\"\nassert solution([\"1\", \"2\", \"3\", \"0\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == \"45\"\nassert solution([\"1\", \"1\"]) == \"0\"\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '4'\nassert solution(input) == '45'\nassert solution(input) == '590'\nassert solution(input) == '210'\nassert solution(input) == '0'\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"101\") == \"100\"\nassert solution(\"1000\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution(solution(input()))) == int(input())\nassert solution(solution(solution(input()))) == int(input())\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5') == '10'\nassert solution('10') == '1'\nassert solution('2') == '0'\nassert solution('3') == '2'\nassert solution('5') == '10'\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"13\") == \"13\"\nassert solution(\"12345678901234567890\") == \"12345678901234567890\"\nassert solution(\"12345678901234567890\") == \"123556\"\nassert solution(\"1234567890\") == \"123556\"\nassert solution(\"123456\") == \"123556\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"6\"\nassert solution(\"5 5 5\") == \"14\"\nassert solution(\"0 0 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 3 3 3 3 3 3 3 3 3 3 3 3 3\") == \"14\"\nassert solution(\"4 1 2 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 1, a : 2\")\nprint(\"Output :\")\nprint(\"6\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 2:\")\nprint(\"l: 0, r: 0, a: 1\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 4:\")\nprint(\"l: 0, r: 0, a: 1\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 2, a : 1\")\nprint(\"Output :\")\nprint(\"0\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 2, a: 1\")\nprint(\"Exception 2:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 4:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 1, a : 1\")\nprint(\"Output :\")\nprint(\"0\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 2:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 4:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 2, a : 3\")\nprint(\"Output :\")\nprint(\"0\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 2, a: 3\")\nprint(\"Exception 2:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 4:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 5:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 2, a : 3\")\nprint(\"Output :\")\nprint(\"2\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 2, a: 3\")\nprint(\"Exception 2:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 4:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 6:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 1, a : 1\")\nprint(\"Output :\")\nprint(\"1\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 2:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 4:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 7:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 2, a : 1\")\nprint(\"Output :\")\nprint(\"1\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 2, a: 1\")\nprint(\"Exception 2:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 4:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 8:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 1, a : 2\")\nprint(\"Output :\")\nprint(\"1\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 2:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 4:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 9:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 2, a : 1\")\nprint(\"Output :\")\nprint(\"0\")\n\nprint(\"Exception 1:\")\nprint(\"l: 1, r: 2, a: 1\")\nprint(\"Exception 2:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 3:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 4:\")\nprint(\"l: 1, r: 1, a: 2\")\nprint(\"Exception 5:\")\nprint(\"l: 1, r: 1, a: 1\")\nprint(\"Exception 6:\")\nprint(\"l: 0, r: 0, a: 1\")\n\nprint(\"Example 10:\")\nprint(\"Input : \")\nprint(\"l : 1, r : 1"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '14'\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3 2\") == \"6\"\nassert solution(\"5 3 1\") == \"14\"\nassert solution(\"0 2 0\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0 0 0' '0') == 0\nassert solution('0 0 0' '1') == 1\nassert solution('0 0 1' '0') == 0\nassert solution('0 0 1' '1') == 1\nassert solution('1 0 0' '0') == 0\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"14\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3 2 1 4 5 2 2\", \"2 3 3 3 3 4 2\", \"1 2 1 2 2 2\"]) == \"6\"\nassert solution([\"1 2 1 3 3 3 3 3 3\", \"3 3 3 3 3 3 3 3 3 3\"]) == \"14\"\nassert solution([\"1 1 1 1 1 1 1\", \"2 2 2 2 2 2 2\"]) == \"6\"\nassert solution([\"1 1 1 1 1 1 1\", \"2 2 2 2 2 2 2\"]) == \"14\"\nassert solution([\"1 1 1 1 1 1 1\", \"1 2 2 2 2 2 2\"]) == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"14\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input().split()) == '6'\nassert solution(input().split()) == '14'\nassert solution(input().split()) == '0'\nassert solution(input().split()) == '0'\nassert solution(input().split()) == '0'\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == 6\nassert solution(\"4 2\") == 13\nassert solution(\"5 1\") == 15\nassert solution(\"2 1\") == 0\nassert solution(\"3 2\") == 0\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == 6\nassert solution(\"5 1\") == 13\n\"\"\""
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '6'\nprint('Example 1:')\nprint('Input :')\nprint('2 2')\nprint('Exception :')\nprint('6')\nprint('Output :')\nprint('6')\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 6\n\n'''\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,1) == 1\nassert solution(3,3) == 2\nassert solution(6,3) == 12\nassert solution(4,5) == 5\nassert solution(1,4) == 6"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"returns 'all coins' but should return 'one coin'\"\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp := '2 2') == '6'\nassert solution(inp := '4 1') == '15'\nassert solution(inp := '5 1') == '13'\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 1') == '6'\n\nExample 2\n\nInput\n2 2\n\nOutput\n0\n\nInput\n3 2\n\nOutput\n1\n\nExplanation\nNastya is standing near the leftmost manhole. She could open it (if there are at least one stone on the leftmost manhole) and pick the coin from it. She can see that the coin is thrown from the manhole to the left, which is close enough to the leftmost manhole. Nastya can leave the room when she opened the coin.\n\nSo, $1$ moves are required to win.\n\nSee [Image] for the figure.\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= k <= n\nn = 2\n\nExample 3\n\nInput\n2 2\n\nOutput\n0\n\nInput\n3 2\n\nOutput\n1\n\nExplanation\nNastya is standing near the leftmost manhole. She can not open the coin to the left. She must open the coin to the right. She cannot open the coin to the left, since there is no stone on the left.\n\nSo, $0$ moves are required to win.\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= k <= n\nn = 2\n\nExample 4\n\nInput\n1 2\n\nOutput\n1\n\nExplanation\nNastya is standing near the leftmost manhole. She can not open the coin to the left. She cannot pick the coin from the manhole, since there is no stone on the left.\n\nSo, $1$ moves are required to win.\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= k <= n\nn = 2\n\nExample 5\n\nInput\n1 2\n\nOutput\n0\n\nExplanation\nNastya is standing near the leftmost manhole. She cannot pick the coin from the manhole.\n\nSo, $0$ moves are required to win.\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= k <= n\nn = 2\n\nExample 6\n\nInput\n1 2\n\nOutput\n1\n\nExplanation\nNastya is standing near the leftmost manhole. She can not open the coin to the left.\n\nSo, $1$ moves are required to win.\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= k <= n\nn = 2\n\n\n'''"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 13"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 10\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 3) == 9\nassert solution(1, 2) == 10\nassert solution(3, 2) == 9\nassert solution(5, 0) == 10\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,3) == 9\nassert solution(3,2) == 8\nassert solution(5,0) == 10\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 9\nassert solution(input()) == 10\n\n----------Note----------\n\nThe tallest tower is not a tower of height three.\n\nThe tallest tower is not a tower of height two.\n\nThe tallest tower is not a tower of height one.\n\nIn this challenge, you are tasked to find the minimum height of the tallest tower.\n\nA tower of height h has h blocks of height h - 1.\n\nThere are n blocks of height h - 1, so you need to complete the function towersOfHightest which takes an integer h as a parameter.\n\n\"\"\""
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"10\"\n\n-----Advanced-----\n\nNext, define the two heights of each tower of height h, and h >= 2.\nFor example, if the height of the first tower is h = 1, the second tower is h = 3. The tallest tower is the first one with height h = 1.\nFor the second tower, the tallest tower is the second one with height h = 3.\n\nThe following are two heights that represent the tallest tower of height 2, 3, and 6, respectively.\n\nInput\n1 3\n\nOutput\n9\n\nInput\n5 0\n\nOutput\n10\n\n\n\"\"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1 2\") == \"9\"\nassert solution(\n    \"3 2\") == \"8\"\nassert solution(\n    \"5 0\") == \"10\"\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == answer\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n------Problem Description-----\n\nThere are n students in a class. There are n^2 blocks of pieces of size m. The first block of the first student can make a tower of height n. The second block of the second student can make a tower of height 2*n. The third block of the third student can make a tower of height 3*n.\n\nIn the third student, it can make two-block pieces and three-block pieces, for a maximum height of 8 blocks.\n\n------Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n------Problem Description-----\n\nThere are n students in a class. Each student makes a tower of height n. The first block of the first student can make a tower of height n. The second block of the second student can make a tower of height 2*n. The third block of the third student can make a tower of height 3*n.\n\nIn the third student, it can make two-block pieces and three-block pieces, for a maximum height of 8 blocks.\n\n\n------Solution-----"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n\n\n) == 8\n\nInput\n1 3\n\nOutput\n9\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 9\nprint(\"The solution is correct!\")"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, 3) == 9\nassert solution(3, 2) == 8\nassert solution(5, 0) == 10"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(3) == \"YES\"\nassert solution(4) == \"YES\"\nassert solution(5) == \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(6) == \"YES\"\nassert solution(6) == \"NO\""
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"2\") == \"YES\""
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"6\") == \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"YES\"\nassert solution(\"6\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"20\") == \"NO\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"6\\n\"\n    \"6\\n\"\n    \"6\\n\"\n    \"6\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"1\\n\"\n    \"1\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"2\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    \"3\\n\"\n    "
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"1 4\") == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n\n\"\"\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nfrom collections import deque\nfrom itertools import permutations\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('YES') == 'YES'\nassert solution('NO') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'NO'\n\n\"\"\""
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"3 7\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3 7'\n\n\n\"\"\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 7\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 2\") == \"1\"\nassert solution(\"1 1 1 3\") == \"1\"\nassert solution(\"1 1 1 4\") == \"1\"\nassert solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 246 246 247 248 249 250 251 252 253 253 254 255 255 256 257 258 259 260 261 262 266 267 268 268 269 290 291 292 293 294 295 296 297 298 299 300 301 302 303 303 304 305 306 308 309 310 311 312 313 314 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 327 328 329 330 330 331 332 332 333 334 334 335 336 337 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 3\") == \"3 2\"\nassert solution(\"5 1 1 2 2 3\") == \"3 7\"\nassert solution(\"10 1 1 2 2 3\") == \"2 0\"\nassert solution(\"5 1 1 2 2 3\") == \"7\"\nassert solution(\"10 1 1 2 2 3\") == \"2 0\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 7\n\n\n\"\"\""
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, [10, 1, 4]) == 7\nassert solution(5, [1, 1, 2, 2, 3]) == 7\nassert solution(5, [1, 1, 2, 2, 3, 4]) == 7\nassert solution(5, [1, 1, 2, 2, 3, 4, 5]) == 7\nassert solution(5, [1, 1, 2, 2, 3, 4, 5, 6]) == 7\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"2\"\nassert solution(\"1 2 3\") == \"2 0\"\nassert solution(\"1 2 3 4 5 6 7\") == \"6 0\"\nassert solution(\"1 4 1 3 2 5 6\") == \"7\"\nassert solution(\"1 1 1 2 3 2 4\") == \"2\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()), \"Failed\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"123..\") == \"123..\"\nassert solution(\"123.456\") == \"123.456\"\nassert solution(\".*\") == \".*\"\nassert solution(\"..*..\") == \"..*..\"\nassert solution(\"..*.\") == \"..*.\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435: \u0446\u0438\u043a\u043b\u044b \u0438 \u043f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u0415\u0441\u043b\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043a\u0440\u0430\u0441\u0438\u0432\u043e \u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u043c \u044d\u043a\u0440\u0430\u043d\u0435 \u0438\u043b\u0438 \u043d\u0435\u0442 - \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0439\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435.\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b:\n\n[2]\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"3\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"2 1.. \") == \"3\"\nassert solution(\"2 3..... \") == \"3\"\nassert solution(\"2 3 3 3 3\") == \"3\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\""
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1.0'\nassert solution(stdin) == '1.0.'\nassert solution(stdin) == '1.2.'\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == solution.__doc__\n\n\"\"\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2.5'\n\n\u041e\u0431\u0449\u0438\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f:"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n\n\n\n\n-----\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0432\u0442\u043e\u0440\u043e\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440:\n\n [Image] \n\n\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0442\u0440\u0435\u0442\u0438\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440:\n\n [Image]\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3'\n\n\"\"\"\n\nn, m = map(int, input().split())\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\n[Image]\n\n[Image] \n\n[Image]\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\" or \"1\" or \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0.75\"\nassert solution(input()) == \"1.0\"\nassert solution(input()) == \"1.0\"\nassert solution(input()) == \"1.0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\n\n\n-----Constraints-----\n0 <= k <= 10^9\n1 <= n <= 10^9\n\n1 <= a_i < a_j < n\n\n[input]\n\nThe first line of input contains an integer $n$ denoting the length of the array $a$.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ (0 \\le a_i \\le 1).\n\n[output]\n\nPrint $P \\pmod {10^9+7}$, where $P$ is the probability that after all the operations are completed.\n\n[example]\n\nInput\n1 1\n0 1 0\n1\n0 0 1 0\n0 0 1\n0\n1\n0\n0\n0 0 0 1 0\n0 1\n1\n1\n1 0 0 0 0 1 1 0 0 0\n\nOutput\n0\nExplanation\n\nThe probabilities of operations are given by $\\dfrac{3}{9}=\\dfrac{1}{3}$, where $3 \\leq n \\leq 10^9$ and $9 \\leq k \\leq 10^9$ (the larger the number of operations, the more expensive the operation is)."
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 2') == '333333336'\nassert solution('5 1') == '0'\nassert solution('6 4') == '968493834'\nassert solution('6 4') == '0'\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"333333336\"\n\"\"\""
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"333333336\"\nassert solution(stdin) == \"968493834\"\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"4 5\") == \"6\"\nassert solution(\"8 5\") == \"6\"\nassert solution(\"22 4\") == \"6\"\nassert solution(\"\") == \"0\""
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '6'\nassert solution(input()) == '6'\nassert solution(input()) == '6'\n\n\"\"\"\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\nassert solution(\"\") == \"0\"\n\n------Tests-----\n\nIn the first test, Memory is not a degenerate triangle.\n\nIn the second test, Memory starts with the equilateral triangle of side length 3, and then gets two of side lengths 2 and 4.\n\nIn the third test, Memory starts with two of side lengths 2 and 4, and then gets two of side lengths 2 and 1.\n\nIn the fourth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the fifth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the sixth test, Memory starts with one of side lengths 2 and 2, and then gets two of side lengths 2 and 1.\n\nIn the seventh test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the eighth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the ninth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the tenth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the eleventh test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twelfth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 2.\n\nIn the thirteenth test, Memory starts with one of side lengths 2 and 2, and then gets two of side lengths 2 and 1.\n\nIn the fourteenth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the fifteenth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the sixteenth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the seventeenth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the eighteenth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the nineteenth test, Memory starts with one of side lengths 2 and 2, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 1, and then gets two of side lengths 2 and 3.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 2.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2 and 3, and then gets two of side lengths 2 and 1.\n\nIn the twentieth test, Memory starts with one of side lengths 2"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 6 8 9 10 11 12') == '12'\nassert solution('2 3 6 7 9') == '7'\nassert solution('1 4 7 2') == '4'\nassert solution('1 2 2 3 2') == '3'\nassert solution('1 7 5') == '5'\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"6 3\") == 4\nassert solution(\"8 5\") == 3\nassert solution(\"22 4\") == 6\n\"\"\"\n\nimport math\nimport sys\n\nclass Solution:\n    # @param A : integer\n    # @return an integer\n    def solution(self, A):\n        if A<=1 or math.isinf(A):\n            return 0\n        \n        return math.ceil(math.log(A,2)/math.log(2))"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n\nNote:\nThe input string consists of only digits.\nThe answer must be in the range 1 to 10^9.\n\n\"\"\""
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=\"8 5\"\n) == \"3\"\nassert solution(\n    stdin=\"22 4\"\n) == \"6\"\nassert solution(\n    stdin=\"3322\"\n) == \"3322\"\nassert solution(\n    stdin=\"22 4\"\n) == \"3\"\nassert solution(\n    stdin=\"13.5\"\n) == \"6.5\"\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(6,6,6) == \"4\", \"Should return a single string (6)\\n\""
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"0.5000000000\"\nassert solution(\"1 0\") == \"0.2000000000\"\n\"\"\"\nimport math\nfrom sys import stdin, setrecursionlimit\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0.5000000000\"\nassert solution(stdin) == \"0.50000000\"\nassert solution(stdin) == \"0.50000000\"\nassert solution(stdin) == \"0.50000000\"\nassert solution(stdin) == \"0.50000000\"\n\n-----Constraints-----\n\n1 <= a, b <= 10^9\n1 <= c, d <= 10^9\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.__elements = [0]\n        self.__matrix = [[0] * 10 for _ in range(10)]\n\n    def __calc_abs(self, value):\n        \"\"\"\n        \"\"\"\n        return int(abs(value))\n\n    def __calc_sqrt(self, value):\n        \"\"\"\n        \"\"\"\n        return int(round(value ** 0.5))\n\n    def __calc_det(self, A):\n        \"\"\"\n        \"\"\"\n        def det(a):\n            return a[0] * a[1]\n\n        detA = det(A)\n        if detA == 0:\n            return 0\n        else:\n            return detA / det(A)\n\n    def __calc_norm(self, A):\n        \"\"\"\n        \"\"\"\n        return sum([self.__calc_abs(x) for x in A])\n\n    def __calc_matrix_det(self, matrix):\n        \"\"\"\n        \"\"\"\n        det = self.__calc_det(matrix)\n        for i in range(10):\n            if det == 0:\n                return 0\n            else:\n                det = self.__calc_det(self.__matrix[i])\n        return det\n\n    def __calc_matrix_norm(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_norm(self.__matrix)\n\n    def __calc_matrix_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_norm(self.__matrix)\n\n    def __calc_matrix_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_det(self.__matrix)\n\n    def __calc_matrix_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_norm(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det(self.__matrix)\n\n    def __calc_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_norm(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_det(self.__matrix)\n\n    def __calc_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_norm(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_det(self.__matrix)\n\n    def __calc_matrix_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det_dist(self.__matrix)\n\n    def __calc_matrix_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_norm_dist(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det_dist(self.__matrix)\n\n    def __calc_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_norm_dist(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det_dist(self.__matrix)\n\n    def __calc_matrix_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det_dist(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det(matrix)\n\n    def __calc_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_norm_dist(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det(matrix)\n\n    def __calc_matrix_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det_dist(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_det_dist(self.__matrix)\n\n    def __calc_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_norm_dist(self.__matrix)\n\n    def __calc_det_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_det_dist(self.__matrix)\n\n    def __calc_norm_dist(self, matrix):\n        \"\"\"\n        \"\"\"\n        return self.__calc_matrix_norm_dist(self.__matrix)\n\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        \"\"\"\n        row, col = stdin.split()\n        row = int(row)\n        col = int(col)\n        self.__matrix = [[0] * 10 for _ in range(10)]\n        matrix = []\n        for i in range(row):\n            matrix.append(list(map(int, stdin.split())))\n        self.__matrix = matrix\n        A = self.__matrix[0][0:col]\n        B = self.__matrix[0][col:]\n        if A.is_equal(B) == True:\n            return str(A.norm())\n        self.__matrix = [[0] * 10 for _ in range(10)]\n        return str(self.__calc_det(self.__matrix))\n\nsolution(stdin)"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0.5000000000\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == 0.2000000000\nassert solution(\"1 0\") == 0.5000000000\nassert solution(\"1 -1\") == 0.2000000000\nassert solution(\"0.0 1\") == 0.0\nassert solution(\"-0.0 1\") == 0.5\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0.5000000000'\nassert solution(stdin) == '0.2000000000'\nassert solution(stdin) == '0.2000000000'\nassert solution(stdin) == '0.5000000000'\n\n\n-----Advanced-----\n\nThe matrix A can be represented by a 2 \u00d7 2 array of integers. In each row, the element of the ith row contains the value of the ith element in the ith column.\n\n\n-----Input-----\n\nInput\n2 2\n1 5 7\n1 3 6\n1 1 6\n1 4 1\n\nOutput\n2.20000000\n\n------\n\nSample input:\n\n2 2\n3 4\n1 5 7\n1 3 6\n1 1 6\n1 4 1\n1 4 1\n1 4 1\n\nSample output:\n\n2.2000000\n\n\"\"\""
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0.5000000000\"\nassert solution(stdin) == \"0.15000000000\"\nassert solution(stdin) == \"0.2000000000\"\n\n\n-----Constraints-----\n0 <= a <= 10^9\n0 <= b <= 10^9\n\nSample Input\n\n3 4\n\nSample Output\n\n0.5\n\n\n\n-----Tags-----\nTags: Medium, Coding, Multi-line, Easy, Gold, OOP, OOP TLE\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0.5'\n\"\"\""
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0.5\"\n\"\"\""
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1 2\", \"3 4\"]) == \"0.2000000000\"\nassert solution([\"1 0\", \"0 1\", \"0 1\"]) == \"0.5000000000\"\n\n\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"0.2000000000\"\nassert solution(\"1 0\") == \"0.5000000000\"\nassert solution(\"1 0\") == \"0.5000000000\"\n\n\n\"\"\""
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input().strip()) == ''\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"4\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"4\", \"1\", \"2\", \"1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"2\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 1 2\") == \"0\"\nassert solution(\"4 1 1\") == \"2\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4 1 2') == '1 1 1 1'\nassert solution('4 1 1') == '0'\nassert solution('4 1 2 1') == '2'\nassert solution('4 2 1 2') == '3'\nassert solution('4 2 3') == '0'\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == 1\nassert solution(\"1 1 1 2\") == 2\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"1 1 1 2 2\") == 2\nassert solution(\"1 1 1 3 2\") == 2\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\") == 0\nassert solution(\"4 1 1\") == 0\nassert solution(\"4 1 2 2\") == 0\nassert solution(\"4 1 2 3\") == 0\nassert solution(\"4 1 2 4\") == 0\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4\") == \"2\"\nassert solution(\"1 1 2 3 4\") == \"3\"\nassert solution(\"1 1 1 2 3 4\") == \"4\"\nassert solution(\"1 1 1 1 2 3 4\") == \"0\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 1 2\"\n) == \"0\"\nassert solution(\n    \"4 1 2\"\n) == \"2\"\nassert solution(\n    \"4 1 1\"\n) == \"1\"\nassert solution(\n    \"4 1 2\"\n) == \"1\"\nassert solution(\n    \"4 1 1\"\n) == \"1\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 2, [1, 2, 1]) == 2\nassert solution(4, 1, [1, 2, 1]) == 2\nassert solution(4, 1, [1, 2, 2]) == 1\nassert solution(4, 1, [1, 1, 1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == 0\nassert solution(\"4 1 1\") == 2\nassert solution(\"4 1 1\") == 0\nassert solution(\"4 1 1\") == 0\nassert solution(\"4 1 1\") == 2\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"5\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"3\"\n\nassert solution(inp) == \"3\"\nassert solution(inp) == \"1\""
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin=\"10 10 5 20\") == \"5\"\n\nassert solution(\n    stdin=\"2 2 0 4\") == \"5\"\n\nassert solution(\n    stdin=\"2 2 2 1\") == \"-1\"\n\n'''"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n10 10 5 20\n\nOutput\n5\nInput\n2 2 0 4\n\nOutput\n-1\nInput\n2 2 2 1\n\nOutput\n-1\n\n\n-----Constraints-----\n\n1 \u2264 $A$ \u2264 100\n1 \u2264 $B$ \u2264 100\n1 \u2264 $C$ \u2264 100\n1 \u2264 $N$ \u2264 1000\n\n\"\"\"\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n\n\n-----Constraints-----\n1 <= A, B, C, N <= 10^5\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\n\n-----Example 1-----\n\nInput\nA B C N\n\nOutput\n5\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == -1\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= A, B, C, N <= 100\nstdin contains distinct integers.\n\n[input]\n\nA positive integer for each of the $A$ and $B$ and $C$ numbers.\n\n\n[output]\n\nOutput the amount of students who did not pass the exam.\n\nConstraints\n1 <= stdin.length <= 10^5\n1 <= A, B, C, N <= 100\n\"\"\"\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"-1\"\nassert solution(input) == \"0\"\n'''\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\n\n\n-----Solution-----\n\nprint(solution(stdin))\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 20\n\n1 <= A <= 100\n\n1 <= B <= 100\n\n1 <= C <= 100\n\n1 <= N <= 100\n\nTime Limit: O(N)\n\n\n-----Returns-----\nIf the number of students who did not pass the exam is non-zero then return $-1$. Otherwise return one of $N$ as an integer.\n\n\n-----Example 1 -----\nInput\n3 2 2 3\n\nOutput\n4\n\n\n-----Example 2 -----\nInput\n4 3 0 1\n\nOutput\n-1\n\n\n-----Constraints-----\n0 <= stdin.length <= 200\n\n0 <= A <= 100\n\n0 <= B <= 100\n\n0 <= C <= 100\n\n0 <= N <= 100\n\nTime Limit: 1 second\n\n\n------Time Complexity------\nO(N)\n\n\n------Space Complexity------\nO(1)\n\n\n------Algorithm-----\nThe algorithm is as follows:\n\nFor every student, calculate the probability of passing the exam given that he has passed. In other words, calculate the probability for each number (A, B, C, D) that the number is passed.\nFor example, if A = 2, the probability of passing the exam is $p(A)$ = p(2) = 0.1, and B = 0, then p(B) = 0.1, and C = 0, and D = 0.\nThen the number of students who didn't pass the exam are $N$, so p(N) = 0.1.\nThen the probabilities $p(A,B,C,D)$ for each number (A, B, C, D) are $p(A)$ and $p(B)$ and $p(C)$ and $p(D)$, and $p(A,B,C,D)$ = $p(1) + p(2) + p(3) + p(4) = 1 + 2 + 3 + 4 = 5$ and $p(A,B,C,D)$ = $p(1) + p(2) + p(3) + p(4) = 5$ and $p(A,B,C,D)$ = $p(1) + p(2) + p(3) + p(4) = 5$.\n\nNow, we need to calculate the probability for every student that is not passed.\nFor example, if A = 2, the probability of passing the exam is $p(1) = 0.1$, $p(2) = 0.1$, $p(3) = 0.1$ and $p(4) = 0.1$.\nThen the probability for the student with index $i$ is $p(1) = p(2) + p(3) = p(4) = 5$.\n\nThen the probabilities for the students that don't pass the exam are $p(1) = 0.1$, $p(2) = 0.1$, $p(3) = 0.1$ and $p(4) = 0.1$.\nNow, we need to calculate the probabilities for every student that is not passed, but the probabilities for the students with index $i$ are $p(1) = 0.1$, $p(2) = 0.1$, $p(3) = 0.1$ and $p(4) = 0.1$.\nThen the probabilities for the students that don't pass the exam are $p(1) = 0.1$, $p(2) = 0.1$, $p(3) = 0.1$ and $p(4) = 0.1$.\nSo, we need to calculate the probability for every student that is not passed, and then calculate the probability for the students with index $i$, and then calculate the probability for the students with index $i$.\n\n\n-----Algorithm-----\nNow, we need to calculate the probability for every student that is not passed, but the probabilities for the students with index $i$ are $p(1) = 0.1$, $p(2) = 0.1$, $p(3) = 0.1$ and $p(4) = 0.1$.\nThen the probabilities for the students that don't pass the exam are $p(1) = 0.1$, $p(2) = 0.1$, $p(3) = 0.1$ and $p(4) = 0.1$.\nSo, we need to calculate the probability for every student that is not passed, and then calculate the probability for the students with index $i$, and then calculate the probability for the students with index $i$.\n\n\n-----Algorithm-----\nNow, we need to calculate the probability for every student that is not passed, and then calculate the probabilities for the students with index $i$, and then calculate the probability for the students with index $i$.\n\n\n-----Algorithm-----\nNow, we need to calculate the probability for every student that is not passed, and then calculate the probabilities for the students with index $i$, and then calculate the probability for the students with index $i$.\n\n\n-----Algorithm-----\nNow, we need to calculate the probability for every student that is not passed, and then calculate the probabilities for the students with index $i$, and then calculate the probabilities for the students with index $i$.\n\n\n-----Algorithm-----\nNow, we need to calculate the probability for every student that is not passed, and then calculate the probabilities for the students with index $i$, and then calculate the probabilities for the students with index $i$.\n\n\n-----Algorithm-----\nNow, we need to calculate the probability for every student that is not passed, and then calculate the probabilities for the students with index $i$, and then calculate the probabilities for the students with index $i$.\n\n\n-----Algorithm-----\nNow, we need to calculate the probability for every student that is not passed, and then calculate the probabilities for the students with index $i$, and then calculate the probabilities for the students with index $i$.\n\n\n-----Algorithm-----\nNow, we need to calculate the probability for every student that is not passed, and then calculate the probabilities for the students"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n\"\"\""
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"21\""
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 21\nassert solution(stdin) == 24\nassert solution(stdin) == 25\nassert solution(stdin) == 26\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 0\") == 4\nassert solution(\"2 1\") == 7\nassert solution(\"3 2\") == 21\nassert solution(\"3 3\") == 0\nassert solution(\"3 4\") == 7\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '21'\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\n\nassert solution(stdin) == '7'\nassert solution(stdin) == '21'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 7"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == 4\nassert solution(\"3\") == 7\nassert solution(\"4\") == 21"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input().split()) == 7\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2) == 4, \"1\"\nassert solution(2, 2) == 7, \"2\"\nassert solution(3, 2) == 21, \"3\"\nassert solution(4, 2) == 56, \"4\"\nassert solution(5, 2) == 110, \"5\"\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n\n\n\n\n\n----Constraints----\n\n1 <= stdin.length <= 300\n\n1 <= stdin[i] <= 10^9\n\n2 <= l_i < r_i\n\n-10^9 <= x, y < 10^9\n\n\n-----Time Limit-----\n1 minute\n\nSample cases:\n\nInput\n1\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n\nOutput\n2\n0\n0\n0\n0\n0\n\nExplanation\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n3\n0\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n1\n0\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n0\n0\n0\n\nExplanation:\n\nInput:\nn = 1\nl_i = 1\nr_i = 2\n\nSample Output:\n0\n0\n0\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"499122177\"\n\"\"\"\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2\") == \"42\"\nassert solution(\"4\") == \"1337\"\nassert solution(\"1 2\") == \"13\"\nassert solution(\"1 2 1\") == \"3\"\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '579'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '578894053'\n\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\""
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\n\"\"\""
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Note-----\n\nThe definition of the problem order was taken from the paper, and it is a pretty subtle one:\n\n$l_i,r_i$ (is the lower bound, is the upper bound)\n\n$$\nl_i = \\sum_{j=1}^{i} j $$\n$$\nr_i = \\sum_{j=1}^{i} j $$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$\n$$"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == 1\nassert solution(20) == 4\n\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(6) == 1\nassert solution(20) == 4\nassert solution(200) == 1\nassert solution(2) == 2\nassert solution(100) == 1\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(5)) == \"4\"\nassert solution(str(30)) == \"3\"\nassert solution(str(90)) == \"2\"\nassert solution(str(600)) == \"1\"\nassert solution(str(10**9)) == \"0\"\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n\n\n-----Known Cases-----\n\nInput\n7\n\nOutput\n1\n\nInput\n14\n\nOutput\n5\n\nInput\n15\n\nOutput\n7\n\nInput\n14\n\nOutput\n6\n\nInput\n15\n\nOutput\n3\n\nInput\n17\n\nOutput\n3\n\nInput\n15\n\nOutput\n2\n\nInput\n1\n\nOutput\n1\n\nInput\n15\n\nOutput\n0\n\nInput\n17\n\nOutput\n0\n\nInput\n2\n\nOutput\n2\n\nInput\n1\n\nOutput\n1\n\nInput\n1\n\nOutput\n1\n\nInput\n1\n\nOutput\n1\n\nInput\n4\n\nOutput\n2\n\nInput\n4\n\nOutput\n1\n\nInput\n5\n\nOutput\n3\n\nInput\n4\n\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n2\nOutput\n2\n\nInput\n3\nOutput\n0\n\nInput\n4\nOutput\n1\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n4\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n3\nOutput\n1\n\nInput\n1\nOutput\n2\n\nInput\n4\nOutput\n1\n\nInput\n3\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n4\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n3\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n4\nOutput\n2\n\nInput\n5\nOutput\n2\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n2\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n3\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n2\n\nInput\n2\nOutput\n1\n\nInput\n2\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n3\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n3\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n2\n\nInput\n2\nOutput\n2\n\nInput\n2\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n2\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n2\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n0\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\nOutput\n1\n\nInput\n1\nOutput\n0\n\nInput\n2\nOutput\n0\n\nInput\n1\nOutput\n0\n\nInput\n1\nOutput\n1\n\nInput\n2\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(str(input())) == \"4\"\n\ninput:\n3\n5\n3 3\n\noutput:\n3\n\ninput:\n10\n7\n4\n3 3\n\noutput:\n3\n\ninput:\n1\n1\n3 2\n\noutput:\n3\n\ninput:\n1\n2\n2\n3 2\n\noutput:\n1\n1\n1\n1"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\n\n\"\"\""
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4'\n\n-----Constraints-----\n\n1 \u2264 n \u2264 2\u00b710^9\n\n------------------------------------------------\nn^2 = (n+1)^2\n\"\"\"\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"4 3 5\") == \"3\"\nassert solution(\"3 7\") == \"2\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"-1\"\n\"\"\"\n\nn, s = map(int, stdin.split())"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n\n\n-----Constraints-----\n\n1 <= n <= 10^3\n1 <= v_1 <= 10^9\n\n1 <= s <= 10^12\n\n-------Time Limit---------\n\nO(log(V_N*V_V))\n\n\n\n\"\"\""
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= n, s <= 10^12\n1 <= v_i <= 10^9\n\n-----Time Limit-----\n\nO(n log n)\n\n\n-----Submissions-----\nThe fair nut's knapsack problem was written in a problem-specific version of the Knapsack Problem on Wikipedia.\nThis version is pretty easy because it follows the notation:\n\nindex = 1\nwhile weight <= capacity:\n    if weight < capacity:\n        total = weight + value[index]\n        if total < capacity:\n            weight = total\n        else:\n            total = total - value[index]\n            weight = capacity\n    else:\n        total = weight + value[index]\n        if total < capacity:\n            weight = capacity\n        else:\n            total = total - value[index]\n            weight = capacity\n    index += 1"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\nInput\n2 2\n2 3\n\nOutput\n2\n\n\"\"\""
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"1\""
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '-1'\n\"\"\"\n\nimport math"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n'''<stdin>'''\n) == '-1'\n\nassert solution(\n'''<stdin>'''\n) == '0'\n\nassert solution(\n'''<stdin>'''\n) == '1'\n\nassert solution(\n'''<stdin>'''\n) == '0'\n\nassert solution(\n'''<stdin>'''\n) == '0'"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"-1\"\n\"\"\""
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\"10 30\", \"2 1\", \"1 1\", \"5 4\"]\n) == [\"1\", \"0\"]\nassert solution(\n    [\"10 13\", \"1 1\", \"1 2\", \"5 4\"]\n) == [\"1\"]\nassert solution(\n    [\"10 19\", \"1 2\", \"5 4\"]\n) == [\"1\", \"2\", \"3\"]\nassert solution(\n    [\"1 50\", \"5 4\"]\n) == [\"1\"]\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"10\",\"30\",\"13\",\"19\",\"50\",\"4\",\"5\",\"1\"]) == \"0\"\nassert solution([\"2\",\"2\",\"1\"]) == \"1\"\nassert solution([\"1\",\"2\",\"2\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"0\"\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\n\n-----Solution-----\n\nIn the first example the caterpillar is at the height 26.\n\nAt 10 pm of the next day it slips down to the height 14. And finally at 6 am of the same day the caterpillar gets the apple.\n\nNote that in the last example the caterpillar was slipping down under the ground and getting the apple on the next day.\n\n\n------Input-----\n\nthe first line of input contains a positive integer T. T is the number of test cases.\n\nthe second line contains two integers a and b, where a denotes the distance the caterpillar goes up and b denotes the distance the caterpillar goes down.\n\nThe third line contains an integer h.\n\nOutput\n\nfor T = 0, the function returns the value of (1 + 2 + 3 +... + h). In the first test case (0 \u2264 h < 10^5) the function returns 1.\n\nfor T = 1, the function returns (1 + 2 + 3 +... + h). In the second test case (1 \u2264 h < 10^5) the function returns (1 + 2 + 3 +... + h) * 10^4 + 3.\n\nfor T = 2, the function returns (1 + 2 + 3 +... + h) * 10^5 + 7. In the third test case (2 \u2264 h < 10^5) the function returns (1 + 2 + 3 +... + h) * 10^6 + 10.\n\nfor T = 3, the function returns (1 + 2 + 3 +... + h) * 10^7 + 15. In the fourth test case (3 \u2264 h < 10^5) the function returns (1 + 2 + 3 +... + h) * 10^8 + 20.\n\nfor T = 4, the function returns (1 + 2 + 3 +... + h) * 10^9 + 35. In the fifth test case (4 \u2264 h < 10^5) the function returns (1 + 2 + 3 +... + h) * 10^10 + (6 + 8 + 7 +... + h) + 15.\n\nfor T = 5, the function returns (1 + 2 + 3 +... + h) * 10^11 + (5 + 8 + 7 +... + h) * 10^12 + (8 + 9 + 10 +... + h) + 20.\n\n\n------Output-----\n\nfor T = 0, the function returns 1.\n\nfor T = 1, the function returns 5.\n\nfor T = 2, the function returns 15.\n\nfor T = 3, the function returns (5 + 8 + 7 +... + h) * 10^12 + (10 + 12 + 13 +... + h) * 10^14 + (15 + 20 + 25 +... + h) + (21 + 30 + 35 +... + h) + (30 + 40 + 45 +... + h) + (40 + 50 + 55 +... + h) + (45 + 60 + 65 +... + h) + (60 + 70 + 75 +... + h) + (70 + 80 + 85 +... + h) + (80 + 90 + 95 +... + h) + (90 + 100 + 105 +... + h) + (100 + 110 + 120 +... + h) + (105 + 120 + 125 +... + h) + (120 + 130 + 135 +... + h) + (130 + 140 + 145 +... + h) + (140 + 150 + 155 +... + h) + (150 + 160 + 165 +... + h) + (160 + 170 + 175 +... + h) + (170 + 180 + 185 +... + h) + (180 + 190 + 195 +... + h) + (190 + 200 + 205 +... + h) + (205 + 210 + 215 +... + h) + (210 + 220 + 225 +... + h) + (220 + 230 + 240 +... + h) + (230 + 250 + 260 +... + h) + (250 + 270 + 280 +... + h) + (270 + 290 + 300 +... + h) + (300 + 310 + 315 +... + h) + (315 + 340 + 350 +... + h) + (340 + 350 + 400 +... + h) + (400 + 500 + 506 +... + h) + (505 + 606 + 607 +... + h) + (605 + 706 + 807 +... + h) + (706 + 809 + 910 +... + h) + (909 + 1021 + 1131 +... + h) + (1131 + 1141 + 1151 +... + h) + (1141 + 1151 + 1191 +... + h) + (1191 + 1201 + 1231 +... + h) + (1201 + 1231 + 1309 +... + h) + (1309 + 1231 + 1321 +... + h) + (1321 + 1331 + 1401 +... + h) + (1401 + 1431 + 1521 +... + h) + (1521 + 1531 + 1601 +... + h) + (1601 + 1631 + 1721 +... + h) + (1721 + 1801 + 1831 +... + h) + (1801 + 1900 + 2000 +... + h) + (1900 + 2000 + 2001 +... + h) + (2001 + 2002 + 2003 +... + h) + (2003 + 2004 + 2005 +... + h) + (2005 + 2006 + 2007 +... + h) + (2006 + 2007 + 2008 +... + h) + (2008 + 2009 + 2010 +... + h) + (2009 + 2010 + 2011 +... + h) + (2011 + 2012 + 2013 +... + h) + (2013 + 2014 + 2015 +... + h) + (2015 + 2016 + 2017 +... + h) + (2017 + 2018 + 2019 +... + h) + (2018 + 2020 + 2021 +... + h) + (2019 + 2020 + 2021 +... + h) + (2020 + 2021 + 2022 +... + h) + (2021 + 2022 + 2023 +... + h) + (2023 + 2024 + 2025 +... + h)\n\nFor T = 5, the function returns (5 + 8 + 7 +... + h) * 10^12 + (5 + 12 + 13 +... + h) * 10^14 + (5 + 15 + 16 +... + h) * 10^17 + (5 + 20 + 25 +... + h) * 10^18 + (5 + 30 + 35 +... + h) * 10^19 + (5 + 40 + 45 +... + h) * 10^20 + (5 + 50 + 55 +... + h) * 10^21 + (5 + 60 + 65 +... + h) * 10^22 + (5 + 70 + 75 +... + h) *"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 30\"), \"Error on line 1\"\nassert solution(\"10 13\"), \"Error on line 2\"\nassert solution(\"1 1\"), \"Error on line 3\"\nassert solution(\"1 2\"), \"Error on line 4\"\nassert solution(\"1\"), \"Error on line 5\"\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 20000\n1 <= h_1, h_2 <= 10^5\n1 <= a, b <= 10^5\n\n------Code-------\nn, m, k = map(int, stdin.split())\n\nh = [int(i) for i in stdin.split()]\nh = h[2:]"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\nprint(\"Example 1:\")\nprint(\"Expected output: 1\")\nprint(\"Your output:\", solution(stdin))\nprint(\"Example 2:\")\nprint(\"Expected output: 0\")\nprint(\"Your output:\", solution(stdin))\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n        \"10 3 5 2 3\") == 16\n\nassert solution(\n        \"10 4 4 10\") == 15\n\nassert solution(\n        \"10 1 5 2 3 4\") == 12\n\n\n-----Constraints-----\nYou cannot have more than 10^4 candles in a row and each of the lower ones is a number from 1 to 10^9.\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 16\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 25\n\n\n-----Time Limit-----\n\nO(NlogN)\n\n\n\n-----Stable-----\n\nPseudocode"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 1 1\") == 16\n\n>>> solution(\"4 3 2 2\")\n\nInput\n1\n1\n2\n1\nOutput\n2\n\n>>> solution(\"3 3 3 3\")\n\nOutput\n2\n\nInput\n3\n2\n2\n2\nOutput\n2\n\n>>> solution(\"3 3 3 3\")\n\nOutput\n1\n\nInput\n3\n2\n2\n2\nOutput\n2\n\n>>> solution(\"3 3 3 3\")\n\nOutput\n1\n\nInput\n3\n2\n2\n1\nOutput\n1\n\n>>> solution(\"3 3 3 3\")\n\nOutput\n0\n\nInput\n3\n1\n1\nOutput\n0\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n0\n\nInput\n3\n1\n2\nOutput\n0\n\n>>> solution(\"6 4 1 3 4\")\n\nOutput\n0\n\nInput\n4\n1\n1\nOutput\n0\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n0\n\nInput\n1\n1\n1\nOutput\n0\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n0\n\nInput\n1\n1\n2\nOutput\n1\n\n>>> solution(\"6 4 1 3 4\")\n\nOutput\n1\n\nInput\n3\n2\n1\nOutput\n0\n\n>>> solution(\"3 3 3 3\")\n\nOutput\n0\n\nInput\n3\n2\n1\nOutput\n1\n\n>>> solution(\"4 3 3 3\")\n\nOutput\n0\n\nInput\n3\n2\n2\nOutput\n0\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n0\n\nInput\n3\n1\n2\nOutput\n1\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n0\n\nInput\n3\n2\n1\nOutput\n0\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n0\n\nInput\n3\n1\n1\nOutput\n1\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n1\n\nInput\n3\n1\n1\nOutput\n0\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n1\n\nInput\n3\n1\n2\nOutput\n1\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n1\n\nInput\n3\n1\n1\nOutput\n0\n\n>>> solution(\"1 1 1 1\")\n\nOutput\n0\n\n\"\"\""
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 16\n\"\"\""
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"16\"\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"10\"\n\n-----Constraints-----\n0 \u2264 C, H_{r}, H_{b}, W_{r}, W_{b} \u2264 10^9\n\n-----Time Limit-----\nNo limit to input.\nNo limit to output.\n\nSample Tests\n>>> solution(\"10 2 3 2 3\")\n16\n>>> solution(\"10 3 2 3\")\n12\n>>> solution(\"10 5 4 3\")\n4\n>>> solution(\"10 2 3 2\")\n0\n-----Successfully-----\nTest cases passed.\nTest case #1: Correct.\nInput\n10 3 5 2 3\nOutput\n16\nExplanation\nCandies are the most important thing in the world, but on the other hand overeating is not good. Om Nom thinks that it isn't proper to leave candy leftovers, so he can only eat a whole candy. Om Nom is a great mathematician and he quickly determined how many candies of what type he should eat in order to get the maximum number of joy units. Can you repeat his achievement?\n\n\n>>> solution(\"10 2 3 2\")\n0\n\nTest case #2: Not perfect.\nInput\n10 3 2 3\nOutput\n16\nExplanation\nCandies are the most important thing in the world, but on the other hand overeating is not good. Om Nom thinks that it isn't proper to leave candy leftovers, so he can only eat a whole candy. Om Nom is a great mathematician and he quickly determined how many candies of what type he should eat in order to get the maximum number of joy units. Can you repeat his achievement?\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 3 5 2 3\") == 16\n\n\n-----Example 1-----\nInput\n2 3 2\n\nOutput\n3\n\n-----Example 2-----\nInput\n10 3 5 2 3\n\nOutput\n5\n\n\n-----Constraints-----\n\n1 \u2264 stdin.length \u2264 1000\n\n0 \u2264 C \u2264 10^9\n\n1 \u2264 H_{r}, H_{b} \u2264 10^9\n\n0 \u2264 W_{r}, W_{b} \u2264 10^9\n\nOnly one red candy can be left over at any time.\n\n----Constraints----\n0 \u2264 stdin.length \u2264 10^6\n\n\n------Time Complexity-----\n\nTime = O(2^n)\n\nn = stdin.length\n\nThe 2^n time complexity is O(2^n) because the job is run in linear time and O(n) in O(1) as it takes to run each loop.\n\nThe subproblem is O(n^2) since we run the loop for each element of n, and O(n) is the maximum number of joy units that Om Nom can get for a single candy.\n\n----Space Complexity----\n\nTime = O(n)\n\nWe keep only the same result as in the first example, as that's what Om Nom thinks. The subproblem is O(n) as it takes to run each loop.\n\nThis space complexity is O(n), since we will run the loop for each element of n, and O(n) is the maximum number of joy units that Om Nom can get for a single candy.\n\n\"\"\"\nclass Solution:\n    def candy(self, candy: int) -> int:\n        result = 0\n        n = len(candy)\n        for i in range(1,n):\n            if candy[i] == candy[i-1] and candy[i-1] == candy[i-2]:\n                result += 1\n            else:\n                result += 1\n        return result\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 2\") == \"16\"\nassert solution(\"2 3 5 2 3\") == \"6\"\nassert solution(\"3 4 5 2 3\") == \"5\"\nassert solution(\"4 5 5 2 3\") == \"6\"\nassert solution(\"4 6 5 2 3\") == \"6\"\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 16\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"10 3 5 2 3\"]) == \"16\"\nassert solution([\"10 3 5 1\", \"2 3 2\"]) == \"15\"\nassert solution([\"10 1 3 1\", \"1 2 1 2\", \"1 3 2 3\"]) == \"13\"\nassert solution([\"10 1 3 1\", \"1 2 3 2\"]) == \"13\"\nassert solution([\"10 1 3 2\", \"1 2 3 1\", \"1 2 2 1\", \"1 3 2 1\", \"1 3 2 2\"]) == \"4\"\n\n\n'''"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\nstdin contains only digits, space, and signs.\n\n\n------Time Limit-----\n1 minute\n\n------Memory Limit-----\n128 MB\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0 0 0 0) == 4"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0,4) == 3\nassert solution(3,6) == 5\nassert solution(6,1) == 6\nassert solution(0,0) == 0\nassert solution(\"0\",0) == 0\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [0, 0]) == 0, '1'\nassert solution(\n    [3, 0]) == 0, '2'\nassert solution(\n    [6, 3]) == 1, '3'\nassert solution(\n    [4, 6]) == 3, '4'\nassert solution(\n    [6, 4]) == 2, '5'\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 0\") == \"5\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"3 6\") == \"3\"\nassert solution(\"5 4\") == \"3\"\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0 0) == 1\nassert solution(3 4) == 4\nassert solution(6 1) == 3\nassert solution(4 1) == 4\nassert solution(3 1) == 5\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"51\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'D'\nassert solution(input()) == 'R'\nassert solution(input()) == 'D'\nassert solution(input()) == 'R'\nassert solution(input()) == 'D'\n\n\n\nSample Test Cases\n\nExpected Result:\n\nD\n\nExplanation:\n\nEmployee 1 was depublicant.\nEmployee 2 was depublicant.\nEmployee 3 was depublicant.\nEmployee 4 was depublicant.\nEmployee 5 was depublicant.\n\nRemaining employees:\n\nEmployee 1 was remocrat.\nEmployee 2 was remocrat.\nEmployee 3 was remocrat.\nEmployee 4 was remocrat.\nEmployee 5 was remocrat.\n\nThe resulting outcome is:\n\n'D'\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.num_employee = 0\n        self.num_votes = 0\n\n    def is_valid_answer(self, answer):\n        if answer == 'D' or answer == 'R':\n            return True\n        else:\n            return False\n\n    def depublicant(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(1, self.num_employee):\n            if votes[i] == votes[i-1]:\n                pass\n            else:\n                return False\n\n        return True\n\n    def remocrat(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(1, self.num_employee):\n            if votes[i] == votes[i-1]:\n                pass\n            else:\n                return False\n\n        return True\n\n    def depublicant_remoc(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(1, self.num_employee):\n            if votes[i] == votes[i-1]:\n                pass\n            else:\n                return False\n\n        return True\n\n    def remocrat_remoc(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(1, self.num_employee):\n            if votes[i] == votes[i-1]:\n                pass\n            else:\n                return False\n\n        return True\n\n    def depublicant_remoc_remoc(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(1, self.num_employee):\n            if votes[i] == votes[i-1]:\n                pass\n            else:\n                return False\n\n        return True\n\n    def remove_votes(self, votes):\n        for i in range(len(votes)):\n            if votes[i] == 'R':\n                votes[i] = 'D'\n            elif votes[i] == 'D':\n                votes[i] = 'R'\n            else:\n                return False\n\n        return True\n\n    def remocrat_remoc_remoc(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(len(votes)):\n            if votes[i] == 'R':\n                votes[i] = 'D'\n            elif votes[i] == 'D':\n                votes[i] = 'R'\n            else:\n                return False\n\n        return True\n\n    def remove_votes_remoc_remoc(self, votes):\n        for i in range(len(votes)):\n            if votes[i] == 'R':\n                votes[i] = 'D'\n            elif votes[i] == 'D':\n                votes[i] = 'R'\n            else:\n                return False\n\n        return True\n\n    def remove_votes_remoc_remoc(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(len(votes)):\n            if votes[i] == 'R':\n                votes[i] = 'D'\n            elif votes[i] == 'D':\n                votes[i] = 'R'\n            else:\n                return False\n\n        return True\n\n    def remove_votes_remoc_remoc(self, votes):\n        for i in range(len(votes)):\n            if votes[i] == 'R':\n                votes[i] = 'D'\n            elif votes[i] == 'D':\n                votes[i] = 'R'\n            else:\n                return False\n\n        return True\n\n    def remove_votes_remoc_remoc(self, votes):\n        for i in range(len(votes)):\n            if votes[i] == 'R':\n                votes[i] = 'D'\n            elif votes[i] == 'D':\n                votes[i] = 'R'\n            else:\n                return False\n\n        return True\n\n    def depublicant_remoc_remoc(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(len(votes)):\n            if votes[i] == 'D':\n                votes[i] = 'R'\n            elif votes[i] == 'R':\n                votes[i] = 'D'\n            else:\n                return False\n\n        return True\n\n    def remoc_remoc_remoc(self, votes):\n        self.num_employee = len(votes)\n        self.num_votes = 0\n        self.num_votes = votes\n\n        for i in range(len(votes)):"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(a) == 'D'"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1DDRRRR\") == \"D\"\nassert solution(\"1DDRRRR\") == \"R\"\nassert solution(\"2DDRRRR\") == \"D\"\nassert solution(\"2DDRRRR\") == \"R\"\nassert solution(\"3DDRRRR\") == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == \"D\",'should return D'\nassert solution(2) == \"R\",'should return R'\nassert solution(3) == \"D\",'should return D'\nassert solution(4) == \"R\",'should return R'\nassert solution(5) == \"R\",'should return R'\n\n\n-----My Idea-----\n\nA prediction is to go to a particular fraction, where a fraction is the fraction of the fraction where a vote is possible. \n\nFor example, the fraction with a right answer is F, and a fraction with a left answer is F.\n\nIf the answer is F, the prediction becomes F.\n\nIf the fraction is of the form (a/b) where a and b are integers, then the answer is a/b.\n\nIf the fraction is of the form (a/b) where a and b are fractions, then the answer is a/b.\n\nIn other words, the prediction is a fraction of a fraction of the fraction.\n\nThe fraction that we will find is F.\n\nFor example, the fraction with a right answer is F, and a fraction with a left answer is F.\n\nFor example, the fraction with a right answer is F, and a fraction with a left answer is F.\n\nIn other words, the fraction that we will find is F, and the fraction that we will find is F.\n\nSo, so, the prediction is a fraction of a fraction of the fraction.\n\nFinally, the fraction that we will find is F, which is a fraction of a fraction of the fraction.\n\n\n-----Searching-----\n\nConsider the following lists of fractions.\n\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction z: F, and F = 1.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction z: F, and F = 1.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 0.  Fraction y: F, and F = 1.  Fraction z: F, and F = 0.  Fraction w: F, and F = 1.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 0.  Fraction y: F, and F = 0.  Fraction z: F, and F = 0.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 0.\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction z: F, and F = 0.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 0.\nFraction x: F, and F = 0.  Fraction y: F, and F = 1.  Fraction z: F, and F = 0.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction z: F, and F = 0.  Fraction w: F, and F = 1.  Fraction xz: F, and F = 0.\nFraction x: F, and F = 1.  Fraction y: F, and F = 1.  Fraction z: F, and F = 0.  Fraction w: F, and F = 1.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction z: F, and F = 0.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction z: F, and F = 1.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 0.  Fraction y: F, and F = 0.  Fraction z: F, and F = 0.  Fraction w: F, and F = 1.  Fraction xz: F, and F = 0.\nFraction x: F, and F = 0.  Fraction y: F, and F = 1.  Fraction z: F, and F = 0.  Fraction w: F, and F = 1.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction z: F, and F = 0.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 0.  Fraction y: F, and F = 0.  Fraction z: F, and F = 1.  Fraction w: F, and F = 0.  Fraction xz: F, and F = 0.\nFraction x: F, and F = 0.  Fraction y: F, and F = 0.  Fraction z: F, and F = 1.  Fraction w: F, and F = 1.  Fraction xz: F, and F = 0.\nFraction x: F, and F = 0.  Fraction y: F, and F = 1.  Fraction z: F, and F = 0.  Fraction w: F, and F = 1.  Fraction xz: F, and F = 0.\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction z: F, and F = 0.  Fraction w: F, and F = 1.  Fraction xz: F, and F = 1.\nFraction x: F, and F = 1.  Fraction y: F, and F = 0.  Fraction"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == 'D'\nassert solution('6') == 'D'\nassert solution('5') == 'R'\nassert solution('6') == 'R'\nassert solution('5') == 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"R\""
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"D\"\nassert solution(input()) == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3DDRRR\") == \"R\"\nassert solution(\"3DDDRRR\") == \"D\"\nassert solution(\"3DDDRRR\") == \"R\"\nassert solution(\"3DDDRRRR\") == \"D\"\nassert solution(\"3DDDRRRR\") == \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"R\"\nassert solution(\"6\") == \"D\"\nassert solution(\"7\") == \"D\"\nassert solution(\"4\") == \"R\"\nassert solution(\"5\") == \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5') == 'D'\nassert solution('6') == 'D'\nassert solution('6') == 'R'\nassert solution('1') == 'R'\nassert solution('1') == 'R'\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000000063\"\n\n\"\"\""
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"3\", \"2\"]) == \"1000000063\"\nassert solution([\"4\", \"6\", \"9\", \"22\"]) == \"0\"\nassert solution([\"1\", \"0\", \"0\", \"0\", \"0\"]) == \"10000000000\"\nassert solution([\"1000000000000000000\", \"1000000000000000000\", \"999999866000004473\", \"99999822000007597\"]) == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1000000063\"\n\nassert solution(stdin) == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\nfrom collections import defaultdict\n\nclass Solution:\n    def solution(self, A):\n        m, n = len(A), len(A[0])\n        parent = [[0] * n for _ in range(m)]\n        distances = [float('inf')] * m\n        visited = [False] * m\n        queue = []\n        for i in range(m):\n            for j in range(n):\n                if A[i][j]!= 0:\n                    parent[i][j] = A[i][j]\n                    if A[i][j] > 0:\n                        distances[i] = A[i][j]\n                    queue.append((i, j))\n                    visited[i] = True\n\n        def dfs(s, parents):\n            if len(queue) == 0:\n                return 0\n\n            if not visited[s]:\n                return distances[s]\n\n            minimum = float('inf')\n            for i, j in queue:\n                minimum = min(minimum, parent[i][j] * dfs(i, parents))\n\n            visited[s] = False\n            return minimum\n\n        return min(dfs(i, parent) for i in range(m)) + min(dfs(i, parent) for i in range(m))"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 2 6 4') == '3'\nassert solution('4 1 2') == '1'\nassert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == '1000000063'\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == 3\nassert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == 0\nassert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == 1\nassert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == 1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\nassert solution('1000000000000000000 1000000000000000000 999999866000004473 999999822000007597') == 0\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 3\nassert solution(input()) == 0\n\n\n\n-----Constraints-----\n0 <= a, b <= 10^6\n0 <= x, y <= 10^18\na \\le b\nb \\le a\nb \\le b\nx \\le y\n\n\"\"\""
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"3\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"0\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\""
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\nassert solution(\"5 10\") == \"1\"\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"solution() returned 'false'\"\nassert solution(stdin) == '0', \"solution() returned 'false'\""
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"6 9\") == \"3\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('6 9') == '1'\nassert solution('38 11') == '3'\nassert solution('5 2') == '3'\nassert solution('5 10') == '3'\nassert solution('5 12') == '1'\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"3\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('20', '10') == '3'\nassert solution('5', '10') == '1'\nassert solution('5', '2') == '3'\nassert solution('5', '12') == '1'\nassert solution('0', '0') == '1'\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1 3 5 7 9 10\"\n) == \"1101\"\nassert solution(\n    \"6 4 5\"\n) == \"14\"\nassert solution(\n    \"6 4 7\"\n) == \"12\"\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == str(sum(map(int, input().split())))\n\nassert solution(input()) == str(sum(map(int, input().split())))\n\nassert solution(input()) == str(sum(map(int, input().split())))\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"3\"]) == \"1\"\nassert solution([\"3\", \"1\", \"4\"]) == \"3\"\nassert solution([\"1\", \"3\", \"0\"]) == \"1\"\nassert solution([\"1\", \"3\", \"0\", \"2\"]) == \"3\"\nassert solution([\"0\", \"1\", \"3\"]) == \"0\"\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 5 3\"), \"0\"\nassert solution(\"6 4 5\"), \"12\"\nassert solution(\"1 1000000000\"), \"28\"\nassert solution(\"1 999999999999999999\"), \"9000000000000000\"\nassert solution(\"6 4 5\"), \"22\"\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11\n\nTEST\n>>> import sys\n>>> stdin = sys.stdin.readline\n>>> solution(stdin) == 11\nTrue\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"101\"\nassert solution
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '18'\n\n\n------Sample Input-------\n\nInput\n\n5 6\n\nOutput\n\n18\n\n------Sample Output-------\n\nSample Input:\n\n3 2\n\nSample Output:\n\n18\n\n\n\"\"\""
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input().strip()) == 500000001500000001\nassert solution(input().strip()) == 101\nassert solution(input().strip()) == 10\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '20'\nassert solution(stdin) == '18'\nassert solution(stdin) == '20'\nassert solution(stdin) == '18'\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"17\"\nassert solution(\"5 1\") == \"2\"\nassert solution(\"100 100000 1\") == \"11\"\nassert solution(\"6 4 5\") == \"4\"\nassert solution(\"7 6\") == \"7\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3,5) == \"Yes\"\nassert solution(4,3,1) == \"No\"\n\n\n-----Constraints-----\n1 <= n <= 100\n0 <= a_i <= 100\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n\n-----Details-----\nThis problem is based on the sequence, as described in the problem statement, you can calculate the length of the sequence and the number of subsegments starting from the sequence.\n\nTime Complexity: O(n)\nSpace Complexity: O(n)\n\n\n-----Basic idea-----\n\nIn this problem, we start with a sequence of non-negative integers and the length of the sequence. We then calculate the number of subsegments of this sequence that are even and odd.\n\nThe number of subsegments is equal to n/2 + 1, so we calculate it by adding n/2 to n. Then we add n/2 + 1 to n (since we need to add one extra number to the subsegments)\n\nThe following is the longest possible subsegment that can be formed: [1, 3, 5], [2, 4, 6], [1, 4, 9], [3, 5, 7], [4, 6, 8], [5, 7, 9], [6, 8, 10], [7, 9, 11].\n\nThe subsegments that can be formed, are: [1, 3, 5] and [2, 4, 6].\n\nEach of the subsegments can be formed by using the same length subsegments. The length of the subsegments is odd.\n\nWe add the number of subsegments to the number of subsegments that can be formed, and return the longest possible subsegment.\n\n\n\"\"\""
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(9) == \"No\"\nassert solution(9) == \"Yes\"\nassert solution(1) == \"No\"\nassert solution(1) == \"Yes\"\nassert solution(9) == \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4) == \"Yes\"\nassert solution(2) == \"No\"\nassert solution(5) == \"No\"\nassert solution(1) == \"No\"\nassert solution(3) == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Yes\"\n\n\n-----Constraints-----\n1 <= n <= 100\n0 <= a_1, a_2,..., a_{n} <= 100\n\n---- Solutions ----\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == \"No\"\nassert solution(5) == \"Yes\"\n\n\n------Good question 1-----\n\nGiven an odd number of subsegments with an odd length, where each subsegment is {3, 5} and the odd numbers are 0, 1, 2,..., n, where n is the length of the subsegment, try to divide the number of subsegments into two subsegments such that the difference between the subsegments is 1, and all the subsegments have an odd length, and it is possible to divide it into two subsegments such that the difference between the subsegments is 1, and all the subsegments have an odd length.\n\n\nInput\n\nThe first line contains a non-negative integer t, the number of test cases. Then t lines follow, each containing one integer n.\n\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 100).\n\nOutput\n\nOutput the yes/no depending on whether the two subsegments can be divided into two or one.\n\nConstraints\n\n1 \u2264 t \u2264 100\n1 \u2264 n \u2264 100\n\n----Examples----\n\nInput\n\n3\n10 9\n\nOutput\n\nYes\n\nInput\n\n4\n1 1 1 1 1\n\nOutput\n\nYes\n\nInput\n\n1\n2\n\nOutput\n\nNo\n\n\n\n-----Note-----\n\nIn the first example, divide the whole sequence into two subsegments, {1, 2}, {3, 4}, {5}, {6}, {7} and {8}.\n\nIn the second example, divide the whole sequence into two subsegments, {3, 6}, {1, 4, 5}.\n\nIn the third example, one of the subsegments must start with the first number in the subsegment, thus the requirements cannot be met.\n\nIn the fourth example, the sequence can be divided into two subsegments, {3}, {3}, {3}, {3}.\n\n----Good question 2-----\n\nGiven an odd number of subsegments with an odd length, where each subsegment is {2, 4, 6, 8, 10, 12, 20, 30} and the odd numbers are 0, 1, 2,..., 9, where n is the length of the subsegment, try to divide the number of subsegments into two subsegments such that the difference between the subsegments is 1, and all the subsegments have an odd length.\n\n\nInput\n\nThe first line contains a non-negative integer t, the number of test cases. Then t lines follow, each containing one integer n.\n\nThe second line contains n space-separated integers a_1, a_2,..., a_{n} (0 \u2264 a_{i} \u2264 100).\n\nOutput\n\nOutput the yes/no depending on whether the two subsegments can be divided into two or one.\n\nConstraints\n\n1 \u2264 t \u2264 100\n1 \u2264 n \u2264 100\n\n----Examples----\n\nInput\n\n3\n10 20 30 40 50\n\nOutput\n\nYes\n\nInput\n\n2\n10 50 80 60 100\n\nOutput\n\nNo\n\n\n\n-----Solution-----\n\nThis problem uses an O(n^2) approach. We can solve it recursively.\n\nIn each iteration, we will set the current position to be the position of the smallest subsegment.\n\nThen, if we can partition a_1, a_2,..., a_{n} into two subsegments, we will increase the position by 1.\n\nIf the subsegment is bigger than the current position, we will decrease it by 1.\n\nIf the subsegment is bigger than or equal to the current position, we will decrease it by 1.\n\nIf the subsegment is equal to the current position, we can increase the current position by 2.\n\nIf the current position is less than the smallest subsegment, we can increase the current position by 1.\n\nAgain, if we can partition a_1, a_2,..., a_{n} into two subsegments, we will increase the current position by 2.\n\nThus, if we can partition a_1, a_2,..., a_{n} into two subsegments, we can increase the current position by 2.\n\nFinally, if the subsegment is equal to the current position, we can increase the current position by 2.\n\nTherefore, we can solve the problem using a backtracking approach.\n\nThe initial position is 0.\n\nThe initial subsegment is the only subsegment of the sequence.\n\n\n\n------Good question 3-----\n\nGiven an even number of subsegments with an even length, where each subsegment is {1, 2, 3, 4, 5, 6, 7, 8, 9}, the even numbers are 0, 1, 2,..., 9.\n\nFor example, {2, 4, 6, 8, 10} and {1, 2, 4, 6, 8} are subsegments of sequence {1, 2, 3, 4, 5, 6, 7, 8, 9}.\n\nGiven n, return true if it is possible to divide n into two subsegments such that they have an even number of digits.\n\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100);\nThe second line contains n space-separated integers a_1, a_2,..., a_{n}.\n\nOutput\n\nOutput \"Yes\" if it's possible to divide n into two subsegments, {1, 2, 3, 4, 5, 6, 7, 8, 9}.\n\nConstraints\n\n1 \u2264 n \u2264 100\n1 \u2264 t \u2264 100\n\n----Examples----\n\nInput\n\n3\n10 20 30 40 50\n\nOutput\n\nYes\n\nInput\n\n3\n20 10 25 15 20\n\nOutput\n\nYes\n\n----Good question 4-----\n\nGiven an even number of subsegments with an even length, where each subsegment is {1, 2, 3, 4, 5, 6, 7, 8, 9}, the even numbers are 0, 1, 2,..., 9.\n\nFor example, {2, 4, 6, 8, 10} and {1, 2, 4, 6, 8} are subsegments of sequence {1, 2, 3, 4, 5, 6, 7, 8, 9}.\n\nGiven n, return true if it is possible to divide n into two subsegments such that they have an even number of digits.\n\n\nInput\n\nThe first line contains an integer t (1 \u2264 t \u2264 100);\nThe second line contains n space-separated integers a_1, a_2,..., a_{n}.\n\nOutput\n\nOutput \"Yes\" if it's possible to divide n into two subsegments, {1, 2, 3, 4, 5, 6, 7, 8, 9}.\n\nConstr"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\n-----Constraints-----\n1 <= stdin.length <= 105\n-109 <= stdin[i] <= 109\n\nsubsegment.length == n\n1 <= a_i <= 100\n\nsubsegment[i] is unique\n0 <= a_i < 10^9\n\n'''\n\nimport math"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == \"Yes\"\nassert solution(5) == \"No\"\nassert solution(3) == \"Yes\"\nassert solution(1) == \"No\"\nassert solution(4) == \"No\""
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"{3, 0, 1}\") == \"Yes\"\nassert solution(\"{3, 9, 9}\") == \"No\"\nassert solution(\"{5, 1, 1}\") == \"No\"\nassert solution(\"{5, 1, 1}\") == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Yes\"\n\n\n\n-----Discussion-----\n\nConsider each value n from the sequence and determine whether it can divide n into a subsegment of size n, if possible. Otherwise, it must be an odd number of non-empty subsegments.\n\nHere, you can do it for all the values of n.\n\n\n-----The First Round-----\n\nThe first round of coding is similar to the second.\n\nAfter, we can use a counter to track whether we've seen a number yet, and check whether we've seen a subsegment. If so, we can divide it into an even number of subsegments.\n\nWe can then check whether n can be divided into an even number of subsegments.\n\nIf we've seen a subsegment, we must also have visited it before.\n\nSo, if we have seen a subsegment that has an odd length, we must also have visited it before.\n\nSo, if we have visited all the subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an even length, we must also have visited all of them before.\n\nSo, if we have visited all subsegments that have an odd length, we must also have visited all of them before.\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n\n\n\n-----Time Limit Exceeded-----\n\nRuntime: 1 ms, faster than 65.56% of Python3 online submissions for Odd Even Segment.\nMemory Usage: 19.9 MB, less than 11.17% of Python3 online submissions for Odd Even Segment.\n\n\n-----Test Cases-----\nInput: n = 7\nOutput: \"Yes\"\nInput: n = 7\nOutput: \"Yes\"\nInput: n = 1\nOutput: \"No\"\nInput: n = 1\nOutput: \"No\"\nInput: n = 5\nOutput: \"No\"\nInput: n = 3\nOutput: \"Yes\"\n\n\n-----Solution-----\n\nsol1:\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('0 0 0 1'), '0 0 0 1'\nassert solution('0 0 1 1'), '0 0 1 1'\nassert solution('0 0 1 2'), '0 0 1 2'\nassert solution('0 0 1'), '0 0 1'\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == -1"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"0 0 0 1\",\"0 0 1 1\",\"0 0 2 1\"]) == \"-1\"\nassert solution([\"0 0 0 1\",\"0 0 1 1\",\"0 0 2 1\"]) == \"0 1 0 1\"\nassert solution([\"0 0 0 1\",\"0 0 1 1\",\"0 0 2 1\"]) == \"0 0 1\"\nassert solution([\"0 0 0 1\",\"0 0 1 1\",\"0 0 2 1\"]) == \"0 0 1\"\nassert solution([\"0 0 0 1\",\"0 0 1 1\",\"0 0 2 1\"]) == \"0 0 1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0 0 0 1) == -1\nassert solution(0 0 1 1) == 1\nassert solution(0 0 1 2) == 1\nassert solution(0 0 1 0) == 0\nassert solution(0 0 0 1) == 0\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1 0 1'\nassert solution(stdin) == '1 0 0'\nassert solution(stdin) == '0 0 0'\nassert solution(stdin) == '0 0 1'\nassert solution(stdin) == '0 1 0'\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 1\") == \"0 1 1 0\"\nassert solution(\"0 0 1 1\") == \"1 1 0 1\"\nassert solution(\"0 0 1 2\") == \"0 1 1 0\"\nassert solution(\"0 0 1\") == \"0 1 0 1\"\nassert solution(\"1 0 0\") == \"-1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\n\n\"\"\""
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == -1\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1 2 0\""
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0 1 1\"\nassert solution(stdin) == \"0 1 0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 0 0\"\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1000000006'\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1000000006\"\nassert solution(stdin) == \"1000000006\"\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3\"\n    ) == \"1000000006\"\nassert solution(\n    \"0 -1\"\n    ) == \"1000000006\"\nassert solution(\n    \"2\"\n    ) == \"1000000006\"\nassert solution(\n    \"2 3\"\n    ) == \"1000000006\"\nassert solution(\n    \"0 -1\"\n    ) == \"1000000006\"\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(1000000006)\nassert solution(stdin) == str(-1)\n\n\n-----Constraints-----\n\n1 \u2264 x \u2264 10^9\n1 \u2264 y \u2264 10^9\n\n\n-----Time Limit: 10 min\n-----Memory Limit: 10 GB\n\n------Time Limit: 10 min\n-----Memory Limit: 1 GB\n'''\n\nimport math\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, 3) == 1\nassert solution(0, 2) == 1\nassert solution(2, -1) == 1\nassert solution(0, 0) == 1\n\n\"\"\""
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2,3) == 1, \"f_2 = -1\"\nassert solution(0,2) == 1, \"f_2 = 1\"\nassert solution(0,2) == -1, \"f_2 = 1\"\nassert solution(0,2) == 1, \"f_2 = 1\"\nassert solution(0,2) == -1, \"f_2 = -1\""
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 2\") == 1\nassert solution(\"0 2 3\") == 1\nassert solution(\"0 -1\") == 1\nassert solution(\"2 -1\") == 1000000006\nassert solution(\"-1 1\") == -1\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"1000000006\"\nassert solution(inp) == \"100000000100001000010000100001000010000\"\nassert solution(inp
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == 1\nassert solution(\"0 -1\") == 1\nassert solution(\"2\") == 100000000006\nassert solution(\"3\") == 3\nassert solution(\"0\") == 1\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"1\") == \"YES\"\nassert solution(\"0\") == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4') == 'YES'\nassert solution('2') == 'YES'\nassert solution('3') == 'YES'\nassert solution('9') == 'NO'\nassert solution('8') == 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 2 -3 -4 -10 7 3') == 'YES'\nassert solution('5 3 -5') == 'NO'"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"NO\"\nassert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"6\") == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2, 1) == 'YES'\nassert solution(4, -1) == 'NO'\nassert solution(1, -1) == 'NO'\nassert solution(3, -1) == 'YES'\nassert solution(5, 1) == 'YES'\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"YES\"\n\nassert solution(inp) == \"NO\"\n\"\"\""
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 3, 2) == \"3\"\nassert solution(5, 4, 2) == \"6\"\nassert solution(5, 4, 1) == \"6\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^6\n\n\n-----Examples-----\nInput\n4\n\nOutput\n18\n\nInput\n3\n\nOutput\n17\n\nInput\n4\n\nOutput\n4\n\nInput\n2\n\nOutput\n3\n\n-----Constraints-----\n\n1 <= n, m, k <= 10^9\n\n$\n\n\n------Amazon's first attempt at python solution-----"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5,3,2) == 3\nassert solution(5,4,2) == 6"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 2, 2) == 3\nassert solution(2, 2, 1) == 4\nassert solution(3, 1, 1) == 3\nassert solution(3, 3, 2) == 5\nassert solution(5, 1, 2) == 11\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"21\"\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2,3) == 1\nassert solution(3,2) == 2\nassert solution(4,2) == 1\nassert solution(5,2) == 3\nassert solution(5,3) == 4\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"0\"\nassert solution(\"5 4 2\") == \"6\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5,3,2) == 3\nassert solution(5,4,2) == 6\n\nprint('The answer is', solution(5,3,2))\n\n-----Constraints-----\n0 <= stdin.length <= 10^6\n1 <= stdin[i] <= 10^9\nstdin has the following format:\nn m k\nSample Input\n\n4 4\n5 2\n\nSample Output\n\n6\n\nSample Explanation\n\nExplanation 1:\nManao answered three questions. The minimum possible score is obtained when the only wrong answer is to the question 4.\nExplanation 2:\nManao answered four questions. The minimum possible score is obtained when the only wrong answer is to the question 4.\nExplanation 3:\nManao answered five questions. The minimum possible score is obtained when the only wrong answer is to the question 4.\nExplanation 4:\nManao answered one question. The minimum possible score is obtained when the only wrong answer is to the question 4.\nExplanation 5:\nManao answered one question. The minimum possible score is obtained when the only wrong answer is to the question 4.\nExplanation 6:\nManao answered one question. The minimum possible score is obtained when the only wrong answer is to the question 4.\n\nExplanation:\n1 is the answer for manao answered 5 questions.\nThe answer is the maximum possible score obtained when the only wrong answer is to the question 4.\nExplanation:\nManao answered five questions.\nThe minimum possible score obtained when the only wrong answer is to the question 4.\nExplanation:\n1 is the answer for manao answered five questions.\nThe answer is the maximum possible score obtained when the only wrong answer is to the question 4.\n\n-----Time complexity-----\n\nThis solution has O(n^4) complexity in its O(2^n), since each term in the division expression is performed by O(n) times.\n\nThis means that the answer will not be the exact answer of the problem because it could not be obtained by cutting down.\n\nThis approach is faster than the division approach.\n\nSample1. Manao answered three questions out of 4, and his score would double for each two consecutive correct answers. If Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.\nSample2. Now Manao answered four questions. The minimum possible score is obtained when the only wrong answer is to the question 4.\nSample3. Now Manao answered five questions. The minimum possible score is obtained when the only wrong answer is to the question 4.\nSample4. Now Manao answered one question. The minimum possible score is obtained when the only wrong answer is to the question 4.\nSample5. Now Manao answered one question. The minimum possible score is obtained when the only wrong answer is to the question 4.\n\nprint('The answer is', solution(5,3,2))\n\n-----Memory Usage-----\n\n- The answer is 6.\n- The answer is not an integer.\n- The answer is an integer.\n- The answer is an integer.\n- The answer is an integer.\n- The answer is an integer.\n\n* This solution takes O(n^4) extra space because the division expression is performed by O(n) times.\n\n(This solution takes O(n^2) extra space because the division expression is performed by O(n) times)\n\n----Time complexity----\n\nThis solution has O(n^2) complexity in its O(2^n), since each term in the division expression is performed by O(n) times.\n\nThis means that the answer will not be the exact answer of the problem because it could not be obtained by cutting down.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon as possible. If the answer is not a number, the solution is uncertain.\n\nThe answer is not an integer.\n\nThe answer is not an integer.\nThe answer is not an integer.\nThe answer is not an integer.\n\nIn the problem I have tried to find the answer to this problem as soon"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 4) == 3\nassert solution(3, 2) == 1\nassert solution(5, 2) == 7\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"25\"\n\nExplanation\n\nFor example, if Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.\n\nGiven input, Manao answered 3 questions out of 5, and his score would double for each two consecutive correct answers. If Manao had answered the first, third and fifth questions, he would have scored as much as 3 points.\n\nAccording to the following table, the minimum possible score is obtained when the only wrong answer is to the question 4.\n\nSample Input\n\n5 3 2\n\nSample Output\n\n3\n\n\"\"\""
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == \"NO\"\nassert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(3) == \"YES\"\nassert solution(4) == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3454\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"111111\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(454) == \"YES\", 'This is not a solution'\nassert solution(10) == \"YES\", 'This is not a solution'\nassert solution(111111) == \"NO\", 'This is not a solution'\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(10) == \"NO\"\nassert solution(12345) == \"YES\"\nassert solution(111111) == \"YES\"\nassert solution(22) == \"YES\"\nassert solution(12345) == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3424') == 'YES' or solution('3425') == 'NO'\nassert solution('123') == 'NO'\nassert solution('3425') == 'YES'\nassert solution('3424') == 'YES'\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 4\n\n\n------Code------\n\nn, m = map(int, stdin.split())\nnums = list(map(int, stdin.split()))\nflats = []\nfor i in range(m):\n    flats.append(set(map(int, stdin.split())))\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4'\n\n\"\"\""
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('10 3') == 4, '10'\nassert solution('8 4') == -1, '8'\nassert solution('8 7') == -1, '8'\nassert solution('8 9') == 4, '8'\nassert solution('8 5') == 4, '8'\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0 2 3 4 5 6 7 8 9 10\") == \"4\"\nassert solution(\"0 1 0 4\") == \"4\"\nassert solution(\"0 0 3 5 0\") == \"4\"\nassert solution(\"1 2 1 5 4\") == \"4\"\nassert solution(\"0 0 1 0 4\") == \"3\"\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\n\n### Solution 2 ###"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1,5) == 1\nassert solution(1,6) == -1\nassert solution(2,3) == -1\n\n\n-----Constraints-----\n0 < n <= 100\n0 < m <= 100\n\n\n-----User input----\n\nThe first line contains two integers n and m (1 \u2264 n \u2264 100, 0 \u2264 m \u2264 100), where n is the number of the flat you need to restore floor for, and m is the number of flats in Polycarp's memory.\n\nm lines follow, describing the Polycarp's memory: each of these lines contains a pair of integers k_{i}, f_{i} (1 \u2264 k_{i} \u2264 100, 1 \u2264 f_{i} \u2264 100), which means that the flat k_{i} is on the f_{i}-th floor. All values k_{i} are distinct.\n\nIt is guaranteed that the given information is not self-contradictory.\n\n\n-----Time complexity-----\n\nFor each call of solution, the time complexity of the program is O(n).\n\nFor each call of solution, the time complexity of the program is O(n).\n\nFor each call of solution, the time complexity of the program is O(n).\n\nIn worst case, time complexity of solution is O(n^2) because it relies on the fact that the number of flats on each floor is the same.\n\nIn other case, time complexity of solution is O(n^3) because we are working with the pattern in pattern-checker-problem.\n\nTime complexity of solution is O(n^2).\n\nThe number of operations of solution is O(n).\n\nSample input 1:\n\n2 4\n1 1\n1 2\n3 2\n\nSample output 1:\n\n4\n\n\nSample input 2:\n\n3 2\n1 1\n1 2\n1 3\n\nSample output 2:\n\n-1\n\n\nSample input 3:\n\n1 4\n1 2\n2 1\n3 2\n\nSample output 3:\n\n-1\n\n\n\"\"\"\n\nclass Solution:\n    def restoreFlats(self, n: int, m: int, k: List[int]) -> int:\n        if m == 0:\n            return -1\n        \n        q = []\n        d = k\n        k[0] = -1\n        \n        for i in range(1, n):\n            if len(d) == 0:\n                return -1\n            \n            while True:\n                if k[0] == -1:\n                    return -1\n                \n                for j in range(len(d)):\n                    if d[j] == k[0] + 1:\n                        d[j] = -1\n                        q.append((i, d[j]))\n                        \n                k[0] += 1\n                \n                if k[0] == i:\n                    d = d[:j] + [i + 1] + d[j + 1:]\n                    q.append((i, i + 1))\n                    break\n                \n                if len(d) == 0:\n                    return -1\n        \n        return len(q)\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n    pass\n\n\n-----My Solution-----\n\nAssuming that n = 2, i = 0, j = 2 and floor i is equal to floor j. In this problem, there are two choices.\n\n1. X, Y, Z are adjacent elements. We need to find the pairs (X, Y) such that X is in the smaller set of elements and Y is the larger set of elements.\n\n2. The set X, Y are non-overlapping. We need to find the set union of each of them in Z.\n\n---Time---\n\n---Memory---\n\n---Runtime---\n\nTime complexity: O(n log n)\nSpace Complexity: O(n)\n\n---Constraints---\n\n1 <= n <= 100\n\n0 <= k <= 100\n\n----Examples----\n\nInput\n5\n2\n2\n2\n1\n3\n\nOutput\n2\n\nInput\n2\n4\n1\n2\n1\n2\n\nOutput\n-1\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(6, 5) == 4\nassert solution(8, 3) == -1\n\n\n-----Constraints-----\n1 <= n <= 100, m <= 100, k_{i} <= n\n\ntime limit: 24 seconds (py 3.5)\n\nmemory limit: 64 MB (py 3.5)\n\n\n-----Tags-----\nhashing: Hash\nstable\nbinary: Binary\ninorder: Inorder\n\"\"\"\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('XX' * 10) == '1'\nassert solution('0X0X0X0X0X0X0X0X0') == '1'\nassert solution('00X0X0X0X0X0X0X0X0X0X0') == '0'\nassert solution
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('00X00X0XXX0') == 1\nassert solution('0X0X0') == 1\nassert solution('XXX') == 1\nassert solution('0X0X0X') == 0\nassert solution('XXX0') == 2\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['0X0X0', '0X0X0', '0X0X0', '0X0X0']) == 2\nassert solution(['0X0X0', '0X0X0', '0X0X0', '0X0X0', '0X0X0', '0X0X0', '0X0X0', '0X0X0']) == 2\nassert solution
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"00X00X0XXX0\") == 1\nassert solution(\"0X0X0\") == 4\nassert solution(\"00X00X0XXX0\") == 1\nassert solution(\"0X0X0X0X0\") == 2\nassert solution(\"XXX0\") == 2\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 2\nassert solution(input) == 2\nassert solution(input) == 2\nassert solution(input) == 2\nassert solution(input) == 2\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"baababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\nInput\n12\nzACaAbbaazzC\n\nOutput\n1\n\nInput\n13\nzACaAbbaazzCz\n\nOutput\n3\n\nInput\n13\nzACaAbbaazzcz\n\nOutput\n3\n\nInput\n13\nzACaAbbaazcz\n\nOutput\n0\n\"\"\"\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(11) == 2\nassert solution(12) == 3\nassert solution(3) == 0\nassert solution(4) == 0\nassert solution(5) == 0\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(11, \"aaaaBaabAbA\") == 2\nassert solution(12, \"zACaAbbaazzC\") == 3\nassert solution(3, \"ABC\") == 0"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(str) == 0\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(11, \"aaaaBaabAbA\") == 2\nassert solution(12, \"zACaAbbaazzC\") == 3\nassert solution(3, \"ABC\") == 0"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\n(def solution(stdin: str) -> str)\n\n(solution(stdin))"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 3, \"Test 1 failed\"\nassert solution(6) == 120, \"Test 2 failed\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"120\"\nassert solution(inp) == \"120\"\nassert solution(inp) == \"120\"\nassert solution(inp) == \"120\"\nassert solution(inp) == \"120\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 -2 0\"\n) == \"3\"\nassert solution(\n    \"16 23 16 15 42 8\"\n) == \"120\"\nassert solution(\n    \"6 -2 0\"\n) == \"120\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1-2 0\") == \"3\"\nassert solution(\"1 2 0\") == \"0\"\nassert solution(\"1-2 0 0\") == \"3\"\nassert solution(\"3 -2 1 -2 0\") == \"0\"\nassert solution(\"3 1 -2 0\") == \"0\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 120"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().strip()) == '12'\nassert solution(input().strip()) == '12'\nassert solution(input().strip()) == '12'\nassert solution(input().strip()) == '12'\nassert solution(input().strip()) == '12'\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"120\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 0 5 6\") == \"6\"\nassert solution(\"4 1 0 4 6\") == \"6\"\nassert solution(\"2 4 3 0 1\") == \"1\"\nassert solution(\"2 2 2 2 2\") == \"2\"\nassert solution(\"1 1 0 1 1\") == \"1\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 3\nassert solution(\"3\") == 6\nassert solution(\"4\") == 12\nassert solution(\"5\") == 0"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 120\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"2\"\nassert solution(\"6 5 4 3\") == \"2\"\nassert solution(\"6 6 4 1\") == -1\nassert solution(\"6 5 3 4\") == -1\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,9,2,4) == 5\nassert solution(5,3,2,3,4) == -1\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(2)"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == -1\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 6 2\") == \"2\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 4\") == \"1\"\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2') == '2'\nassert solution('0 5') == '3'\nassert solution('1 3') == '3'\nassert solution('0 1') == '3'\nassert solution('0 0') == '0'\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"6 9 2 4\") == \"4\"\nassert solution(\"6 10 2 4\") == \"3\"\nassert solution(\"6 5 4 3\") == \"2\"\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 2 4\") == \"4\"\nassert solution(\"1 1 5\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10 10 10 10 10 10 10 10 10\") == \"4\"\nassert solution(\"5 5 1 5\") == \"1\"\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\""
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('Codeforces') == 2\nassert solution('Privet') == 2\nassert solution('abacabac') == -1\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abacabac\") == 2\nassert solution(\"Codeforces\") == 2\nassert solution(\"Privet\") == -1\nassert solution(\"Hippo\") == -1\nassert solution(\"\") == -1"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1, \"The first line of code should contain two integers, p and q, the first one must be greater than 0 and less than n.\"\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('abacabac'), '-1'\nassert solution('Codeforces'), '-1'\nassert solution('codeforces'), '-1'\nassert solution('Privet'), '-1'\nassert solution('ABCDE'), '-1'\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\nassert solution(stdin) == \"JUMP 3\"\nassert solution(stdin) == \"RUN 1\"\nassert solution(stdin) == \"JUMP 2\"\nassert solution(stdin) == \"RUN 1\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\""
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"RUN X\"\nassert solution(stdin) == \"JUMP Y\"\nassert solution(stdin) == \"JUMP 2\"\nassert solution(stdin) == \"JUMP 3\"\nassert solution(stdin) == \"JUMP 1\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2 3\") == \"IMPOSSIBLE\", \"Wrong solution\"\n\nassert solution(\"3 4 6\") == \"JUMP 2\", \"Jumping is not allowed\"\n\nassert solution(\"3 7 6\") == \"JUMP 3\", \"Jumping is not allowed\"\n\nassert solution(\"3 8 7\") == \"RUN 3\", \"Jumping is not allowed\"\n\nassert solution(\"1 2 3\") == \"JUMP 2\", \"Jumping is not allowed\""
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 10 1 3\") == \"RUN 2\\nJUMP 3\\nRUN 1\\nJUMP 2\"\nassert solution(\"3 4 7\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n\n\"\"\""
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 3) == 'IMPOSSIBLE','solution(3, 3)'\n\n\n-----Constraints-----\n0 < stdin.length <= 20000\n0 < m < 10^9\n0 < s <= 10^9\n0 < d <= 10^9\n\n------Time Limit---------\n10 minutes\n\n------Space Limit---------\n128 MB\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) == 'RUN 2 JUMP 3'\nassert solution(3,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 10 3 4\") == \"JUMP 2\"\nassert solution(\n    \"1 3 1\") == \"RUN 2\"\nassert solution(\n    \"3 2 1\") == \"JUMP 2\"\nassert solution(\n    \"3 2 1\") == \"RUN 2\"\nassert solution(\n    \"3 2 1\") == \"RUN 2\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nassert solution(stdin) == 0\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0, \"FAILED\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 0"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3\", \"5\"]) == \"3\"\nassert solution([\"6\", \"6\", \"3\"]) == \"2\"\nassert solution([\"4\", \"9\", \"6\", \"8\", \"4\"]) == \"0\""
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0, \"true\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a=3, b=7) == 2\nassert solution(a=3, b=3) == 0\n\n\n-----Constraints-----\n\n1 <= s, x <= 10^12\n\nInput\n\nThe first line contains an integer s, the sum and bitwise xor of the pair of positive integers, respectively.\n\nThe second line contains a positive integer a and b.\n\nBoth a and b are distinct and are in the range 1 \u2264 a \u2264 10^9 and 1 \u2264 b \u2264 10^9.\n\nConstraints\n\n0 <= s, x <= 10^12\n\nSample I/2 (10^4 lines):\n\nSample II/2 (10^5 lines):\n\nSample III/2 (10^6 lines):\n\nSample IV/2 (10^7 lines):\n\n\n-----Time Complexity-----\n\nTime complexity of the above approach is O(n).\nTime complexity of the solution takes O(n) to find the solutions.\n\n-----Space Complexity-----\n\nO(n) to store the solutions.\nO(n) space for the solutions.\n\n\"\"\""
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n0 < s, x < 10^12\n0 < a, b < 10^12\n\n\n-----Time Limit-----\n1 sec\n\n\n-----Tags-----\noptional\n\n\n-----Submissions-----\nhaha\n\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n\n\n-----Constraints-----\n1 <= s, x <= 10^12\n\n\"\"\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == 2\nassert solution(\"5 1\") == 2\nassert solution(\"5 3\") == 2\nassert solution(\"5 2\") == 2\nassert solution(\"5 1\") == 1\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"1 6\"\nassert solution(\"5 1\") == \"2 4\"\n\nassert solution(\"5 1\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"2\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"5 1\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n\n\n-----Constraints-----\n0 <= stdin.length <= 200\n\n1 <= n, k <= 10^5\n\n1 <= stdin[i] <= 10^7\n\n\n-----Time Limit-----\n1 minute\n\n---Coding Rules---\nThe given code consists of $n$ lines that specify the number of skewers, $k$ lines that specify the number of skewers from the corresponding side.\n\"\"\"\nimport math\nimport sys\nimport time\nimport random\n\n\nclass Skewer:\n    def __init__(self, start: int, end: int):\n        self.start = start\n        self.end = end\n\n    def __lt__(self, other: \"Skewer\"):\n        return self.start < other.start\n\n    def __gt__(self, other: \"Skewer\"):\n        return self.end > other.end\n\n    def __eq__(self, other: \"Skewer\"):\n        return self.start == other.start and self.end == other.end\n\n    def __str__(self) -> str:\n        return f\"{self.start},{self.end}\"\n\n\nclass SkewerSolver:\n    def __init__(self, num_skewers: int, num_turns: int):\n        self.num_skewers = num_skewers\n        self.num_turns = num_turns\n\n    def solve(self, board: str) -> None:\n        assert len(board) >= 2\n        assert board[0] == board[1] == \"-\" and board[2] == board[3] == \"-\"\n        assert board[0] == \"-\" or board[2] == \"-\" or board[4] == \"-\" or board[6] == \"-\"\n\n        i, j = 0, 0\n        num_skewers = 0\n\n        # while i < self.num_skewers:\n        while num_skewers < self.num_skewers:\n            for start, end in ((i, j), (i, j + 1), (i + 1, j), (i + 1, j + 1)):\n                if board[start]!= \"-\" or board[end]!= \"-\" or board[start]!= board[end]:\n                    continue\n                else:\n                    num_skewers += 1\n                    i = start\n                    j = end\n\n            i += 1\n            j += 1\n            num_skewers += 1\n\n        print(num_skewers)\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 3 6 2\") == 2\nassert solution(\n    \"1 5 1\") == 2\nassert solution(\n    \"1 4 5\") == 5\nassert solution(\n    \"1 4 3\") == 4\nassert solution(\n    \"2 3 4\") == 2\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 2) == 3\nassert solution(6, 5) == 2\nassert solution(7, 1) == 2\nassert solution(1, 1) == 1\nassert solution(2, 5) == 2\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"6 6\"\n) == 2\n\nassert solution(\n    \"5 5\"\n) == 2\n\nassert solution(\n    \"3 3\"\n) == 2\n\nassert solution(\n    \"5 5\"\n) == 2\n\nassert solution(\n    \"3 2\"\n) == 3"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 2\nassert solution(1) == -1\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"8314\") == 2\nassert solution(\"625\") == 0\nassert solution(\"333\") == -1\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\nprint(\"Example 1:\")\n\nprint(\"Input : \" + str(3))\nprint(\"Exception : \" + str(0))\n\nprint(\"Output : \" + str(2))\n\nprint(\"Example 2:\")\n\nprint(\"Input : \" + str(5))\nprint(\"Exception : \" + str(0))\n\nprint(\"Output : \" + str(0))\n\nprint(\"Example 3:\")\n\nprint(\"Input : \" + str(1))\nprint(\"Exception : \" + str(1))\n\nprint(\"Output : \" + str(-1))\n\nprint(\"-----------------------------\")\n\nprint(\"Example 4:\")\n\nprint(\"Input : \" + str(1))\nprint(\"Exception : \" + str(0))\n\nprint(\"Output : \" + str(2))\n\nprint(\"-----------------------------\")\n\nprint(\"Example 5:\")\n\nprint(\"Input : \" + str(1))\nprint(\"Exception : \" + str(1))\n\nprint(\"Output : \" + str(2))\n\nprint(\"-----------------------------\")"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1, 'Error'\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3235\") == \"2\"\nassert solution(\"123\") == -1\nassert solution(\"1\") == -1\nassert solution(\"13\") == -1\nassert solution(\"933\") == -1\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"9\") == 2\nassert solution(\"98\") == 3\nassert solution(\"6\") == 2\nassert solution(\"1\") == -1\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 0\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"99999\") == -1, \"Invalid Input\"\nassert solution(\"10000\") == -1, \"Invalid Input\"\nassert solution(\"0000\") == -1, \"Invalid Input\"\nassert solution(\"0\") == -1, \"Invalid Input\"\nassert solution(\"0.1\") == -1, \"Invalid Input\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == -1\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == -1\n\nInput\n8314\n\nOutput\n3\n\nInput\n625\n\nOutput\n0\n\nInput\n333\n\nOutput\n-1\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '1'\nassert solution(2) == '4'\nassert solution(3) == '2'\nassert solution(4) == '3'\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"120\"\n\n\n-----Time complexity-----\n\nTime complexity for $f(p)$ is O(n^2) for a permutation of length $n$\nTime complexity for $f_{max}(n)$ is O(n^2)\n\nTime complexity for $f(p)$ is O(n)\nTime complexity for $f_{max}(n)$ is O(n^2)\n\nTime complexity for $f(p)$ is O(n^2)\nTime complexity for $f_{max}(n)$ is O(n^2)\n\n\n-----Space complexity-----\n\nSpace complexity is O(1)\n\n\n-----Algorithm complexity-----\n\nTime complexity for $f(p)$ is O(n^2)\nSpace complexity is O(n)\n\n\n-----Extra credit-----\n\nIf you're stuck for the extra credit, there are two way to solve this problem:\n1. If we knew the value of $f(p)$, that is $f_{max}(n)$, then we could store $f_{max}(n)$ as a variable $f_max$.\n2. If we knew $n$, then we could store $n$ as a variable $n$ and we can calculate the sum of $f_{max}(n)$ as follows: $f_{max}(n) = f_{n} + f_{n+1}$\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == 1\n\n\n-----Example-----\n\nInput\n1\n\nOutput\n1\n\nExplanation\n\nThere are no permutations.\n\"\"\""
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '120'\nassert solution(stdin) == '60'\nassert solution(stdin) == '120'\nassert solution(stdin) == '120'\nassert solution(stdin) == '120'\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\nInput\n3\n\nOutput\n4\n\nInput\n5\n\nOutput\n60\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"120\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"120\"\n\n\n-----Side-effects-----\n\nIf n = 10^6, then the largest possible value of f is 10^9+7.\nSo, the number of permutations of length n can be written as $f(n) = 10^{9+7}$.\n\nTo find the maximum possible value of f for a permutation of length $n$, we can use a dynamic programming technique, where we continue from the greatest common divisor (GCD) of elements of length $i$ as $g_{i}$, which is the greatest common divisor (GCD) of elements of length $i-1$, $i$,..., $i+2$. We continue this until we reach $g_{i} = 1$, which means that $f(n) = 1$. Then, we write the equations for $n$ by replacing the GCD of elements of length $i$ with 1. Then, we find the maximum possible value of f for a permutation of length $n$ using the dynamic programming.\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ABABCBBBCFEYUKOTT\") == 1\nassert solution(\"AAA\") == 4\nassert solution(\"ABABCBBBCFEYUKOTT\") == 1\nassert solution(\"AAA\") == 4\nassert solution(\"AAAAABBC\") == 3\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '4'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\nInput\n\nWrite an input comment\n\nOutput\n\nPrint the solution\n\n-----Examples-----\n\nSample Input\n\nA\nSample Output\n\n4\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\nInput\nABABBBACFEYUKOTT\n\nOutput\n4\nInput\nA\nOutput\n0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('ABCBFEYUKOTT') == 5\nassert solution('AAA') == 1\nassert solution('AAABBACFEYUKOTT') == 2"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"AAAABBBCCDAABBB\"\"\") == 7\nassert solution(\"\"\"ABABCCDEFGHIJKLMNOPQRSTUVWXYZYXZCDE\"\"\") == 4\nassert solution(\"\"\"aBbCcDDeeFFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOPqrstUvWYxzCdeEfFgHiiIjklmNOP"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == 0\nassert solution(s) == 1\nassert solution(s) == 2\nassert solution(s) == 3\nassert solution(s) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\n'''"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 7, 11, 5) == \"YES\"\nassert solution(7, 3, 2, 5) == \"NO\"\nassert solution(7, 3, 2, 2) == \"NO\"\nassert solution(7, 2, 3, 5) == \"YES\"\nassert solution(7, 2, 3, 2) == \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 11 10 3\") == \"NO\"\nassert solution(\"7 1 1 1\") == \"NO\"\nassert solution(\"7 1 1 2\") == \"NO\"\nassert solution(\"5 5 5 2\") == \"YES\"\nassert solution(\"15 15 15\") == \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\", \"2\", \"5\", \"3\"]) == \"YES\"\nassert solution([\"4\", \"1\", \"4\", \"1\"]) == \"NO\"\nassert solution([\"4\", \"2\", \"3\", \"5\"]) == \"YES\"\nassert solution([\"4\", \"2\", \"3\", \"2\"]) == \"NO\"\nassert solution([\"5\", \"5\", \"5\"]) == \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 4 2\") == \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\nRuntime: 868 ms, faster than 61.42% of Python3 online submissions for Candy.\nMemory Usage: 14 MB, less than 86.68% of Python3 online submissions for Candy."
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1 7 11 5) == 'YES'\nassert solution(7 3 2 5) == 'NO'\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 7, 11, 5) == \"YES\"\nassert solution(7, 3, 2, 5) == \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == [\"653\",\"733\"]\n\nInput\n5\n10 21 10 21 10\n\nOutput\n31 41\n\n\n\n-----Constraints-----\n\n1 <= N <= 50\n\n\n=====SOLUTION====="
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == [\"653\",\"733\"]\nassert solution(stdin) == [\"451\",\"401\"]\nassert solution(stdin) == [\"451\",\"401\"]\nassert solution(stdin) == [\"451\",\"401\"]\nassert solution(stdin) == [\"451\",\"401\"]\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"3\"\nassert solution(\"3\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"9\") == \"1\"\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"653\"\nassert solution(\"5\") == \"653\"\nassert solution(\"5\") == \"653\"\nassert solution(\"1\") == \"0\""
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(0) == 1\nassert solution(4) == 3\nassert solution(6) == 4\nassert solution(10) == 6\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 10 3 10 20\") == \"653 733\"\nassert solution(\"5 21 21 10 21 10\") == \"31 41\"\nassert solution(\"5 21 21 10 21 10\") == \"766\"\nassert solution(\"5 21 21 10 21 10\") == \"766\"\nassert solution(\"5 21 21 10 21 10\") == \"766\"\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 5, \"1\"\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 5\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(653 + 31)\nassert solution(stdin) == str(15)\nassert solution(stdin) == str(12)\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 21 10 21 10\") == 6532\nassert solution(\"5 21 10 21 10\") == 341\n\n-----Basic Testing-----\nInput\n3\n141 592 653\n\nOutput\n653 733\n\nInput\n5\n10 21 10 21 10\n\nOutput\n31 41\n\"\"\"\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"653\"\nassert solution(input()) == \"31\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 6 5 8\"), 2\nassert solution(\"3 6 5 8\"), 3\nassert solution(\"6 5 8\"), -1\n\n\n-----Goals-----\n\nYou have worked for the last part of the challenge. This is a single line challenge. This is how you must fix the problem.\n\nHint\n\nYou can solve it for m from 1 to n, using a brute-force approach. The k-th operations is assigned a variable b_i to satisfy the k-th operation. In other words, we can say that, for k=1, b_i = 1. The following operations are all equal to the given sum of variables b_i and b_{i+1}. For example, for k=2, b_i = 1 + b_{i+1} = 2.\n\nNow we use a set to store all the values that are assigned to variable b_i, and for all the values, we need to check whether the current value of the variable equals the sum of all values that are assigned to it. If not, we append it to the set b_i.\n\nA solution, if you can solve it by assigning all the values in the set b_i to the current value, you will get a solution.\n\nFinally, we return the minimum number of variables m, such that any of the variables can help you perform the sequence of operations.\n\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 7 3 4 6 8\"\n) == 2\n\n\n-----Examples-----\nInput\n5\n1 2 3 6 8\n\nOutput\n2\n\nInput\n3\n4 5 6 10 12 18\n\nOutput\n4\n\nInput\n6\n2 4 8 6 10 18\n\nOutput\n3\n\"\"\""
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3, \"Maximum number of variables doesn't make sense\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 10^5\n1 \u2264 a_1, a_2,..., a_{n} \u2264 10^9\n1 \u2264 b_1, b_2,..., b_{m} \u2264 10^9\n1 \u2264 t \u2264 m\n\n-----Time complexity-----\nO(n) for every input and O(1) for the variables.\n\nO(m * n) for every operation.\n\nO(m + n) for each operation's second argument.\n\nO(m + n) for the arithmetic operations.\n\nComplexity\n\nO(n + m) for each operation.\n\nSpace\n\nO(m)\n\nExample\n\nExample 1:\n\nInput\n\n3\n1 2 3\n4\n5 6\n6 7 8\n9\n10 8 7 9 3 2\n\nOutput\n\n2\n\nExplanation\n\nExplanation 1:\n\nThe following operations are performed in order:\n\n 1. (1, 2) + (2, 4) = (1, 3) + (3, 6)\n 2. (1, 2) + (2, 4) = (1, 4) + (4, 6)\n 3. (1, 2) + (2, 4) = (1, 4) + (2, 6)\n 4. (1, 2) + (2, 4) = (1, 3) + (3, 6)\n 5. (1, 2) + (2, 4) = (1, 4) + (2, 6)\n 6. (1, 2) + (2, 4) = (1, 4) + (2, 6)\n 7. (1, 2) + (2, 4) = (1, 3) + (3, 6)\n 8. (1, 2) + (2, 4) = (1, 3) + (3, 6)\n 9. (1, 2) + (2, 4) = (1, 4) + (2, 6)\n 10. (1, 2) + (2, 4) = (1, 3) + (3, 6)\n 11. (1, 2) + (2, 4) = (1, 3) + (3, 6)\n 12. (1, 2) + (2, 4) = (1, 4) + (2, 6)\n\nExample 2:\n\nInput\n\n1\n4 5 3 6 7\n2 3 5 6\n3 2 1 4\n\nOutput\n\n2\n\nExplanation\n\nExplanation 1:\n\nThe first operation of this sequence can be performed at any integer index: (1, 2).\n\n 1. (1, 4) + (4, 3) = (1, 4) + (1, 2)\n 2. (1, 4) + (1, 2) = (1, 4) + (2, 2)\n 3. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n 4. (1, 4) + (2, 2) = (1, 2) + (2, 2)\n 5. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n 6. (1, 4) + (2, 2) = (1, 2) + (2, 2)\n 7. (1, 2) + (2, 2) = (1, 2) + (2, 1)\n 8. (1, 2) + (2, 2) = (1, 4) + (2, 1)\n 9. (1, 2) + (2, 2) = (1, 4) + (2, 1)\n 10. (1, 2) + (2, 2) = (1, 4) + (2, 1)\n 11. (1, 2) + (2, 2) = (1, 4) + (2, 1)\n 12. (1, 2) + (2, 2) = (1, 2) + (2, 1)\n\nExample 3:\n\nInput\n\n3\n1 2 3\n4\n5 6\n7 8 9\n10 11 12\n13 14 15\n\nOutput\n\n2\n\nExplanation\n\nExplanation 2:\n\nThe first operation of this sequence can be performed at any integer index: (1, 2).\n\n 1. (1, 4) + (4, 3) = (1, 4) + (1, 2)\n 2. (1, 4) + (1, 2) = (1, 4) + (2, 1)\n 3. (1, 4) + (2, 1) = (1, 4) + (2, 2)\n 4. (1, 4) + (2, 1) = (1, 4) + (2, 2)\n 5. (1, 4) + (2, 2) = (1, 4) + (2, 2)\n 6. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n 7. (1, 4) + (2, 2) = (1, 4) + (2, 2)\n 8. (1, 4) + (2, 2) = (1, 4) + (2, 2)\n 9. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n10. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n11. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n12. (1, 4) + (2, 2) = (1, 4) + (2, 2)\n13. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n14. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n15. (1, 4) + (2, 2) = (1, 4) + (2, 1)\n\nExample 4:\n\nInput\n\n4\n1 2 3 4\n5\n6 7 8 9\n10 11 12 13\n14 15 16 17\n\nOutput\n\n2\n\nExplanation\n\nExplanation 3:\n\nThe first operation of this sequence can be performed at any integer index: (1, 4).\n\n 1. (1, 4) + (4, 3) = (1, 4) + (1, 2)\n 2. (1, 4) + (1, 2) = (1, 4) + (2, 1)\n 3. (1, 4) + (2, 1) = (1"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n\n\n\n-----Basic Idea-----\n\nLet n be the length of the sequence.  For each operation, you can choose two variables and assign it to a_1 and a_2, respectively.\n\nThen, you can perform the operation on a_1.\n\nThat is, a_1 := a_2, a_1 := a_2 + a_1, a_1 := a_1 + a_2.\n\nYou can store the numbers in the same variable b_1, b_2,..., b_{n-1}.\n\nFinally, you can create a variable n, the number of operations.\n\nWhen doing the operation, you can perform n operations, and store the results in b_i.\n\nFinally, you can perform operations on b_i.\n\nBecause n >= 2, we can get to n - 1 operations.\n\nIf we try to add two numbers, we know that b_i has not been created yet.\n\nBut after n operations, b_i has been created, and n - 1 operations, we can perform operations on b_i.\n\nSo, we can create n - 1 variables b_i, b_i+1,..., b_{n-1}.\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23) == 23\n\nassert solution(b_1, b_2, b_3, b_4, b_5, b_6, b_7, b_8, b_9, b_10, b_11, b_12, b_13, b_14, b_15, b_16, b_17, b_18, b_19, b_20, b_21, b_22, b_23) == 30\n\n\n-----My Solution-----\n\nInput\n5\n1 2 3 6 8\n\nOutput\n2\n\nInput\n6\n2 4 8 6 10 18\n\nOutput\n3\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 6 8\") == 3\nassert solution(\"2 4 8 6 10 18\") == -1\nassert solution(\"3 6 5\") == 3"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == str(2)\nassert solution(input()) == str(-1)\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == '1'\nassert solution(1) == '2'\nassert solution(2) == '3'\nassert solution(3) == '6'\nassert solution(4) == '8'\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == '2'\nassert solution(['2', '2', '3', '3', '3', '4', '4']) == '1'\nassert solution(['2', '2', '3', '3', '3', '3', '3', '3', '3', '3']) == '-1'\nassert solution(['2', '2', '4', '4']) == '3'\n\n\n-----Constraints-----\n1 \u2264 n \u2264 1000\n1 \u2264 a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23, a_24, a_25, a_26, a_27, a_28, a_29, a_30, a_31, a_32, a_33, a_34, a_35, a_36, a_37, a_38, a_39, a_40, a_41, a_42, a_43, a_44, a_45, a_46, a_47, a_48, a_49, a_50, a_51, a_52, a_53, a_54, a_55, a_56, a_57, a_58, a_59, a_60, a_61, a_62, a_63, a_64, a_65, a_66, a_67, a_68, a_69, a_70, a_71, a_72, a_73, a_74, a_75, a_76, a_77, a_78, a_79, a_80, a_81, a_82, a_83, a_84, a_85, a_86, a_87, a_88, a_89, a_90, a_91, a_92, a_93, a_94, a_95, a_96, a_97, a_98, a_99, a_100, a_101, a_102, a_103, a_104, a_105, a_106, a_107, a_108, a_109, a_110, a_111, a_112, a_113, a_114, a_115, a_116, a_117, a_118, a_119, a_120, a_121, a_122, a_123, a_124, a_125, a_126, a_127, a_128, a_129, a_130, a_131, a_132, a_133, a_134, a_135, a_136, a_137, a_138, a_139, a_140, a_141, a_142, a_143, a_144, a_145, a_146, a_147, a_148, a_149, a_150, a_151, a_152, a_153, a_154, a_155, a_156, a_157, a_158, a_159, a_160, a_161, a_162, a_163, a_164, a_165, a_166, a_167, a_168, a_169, a_170, a_171, a_172, a_173, a_174, a_175, a_176, a_177, a_178, a_179, a_180, a_181, a_182, a_183, a_184, a_185, a_186, a_187, a_188, a_189, a_190, a_191, a_192, a_193, a_194, a_195, a_196, a_197, a_198, a_199, a_200, a_201, a_202, a_203, a_204, a_205, a_206, a_207, a_208, a_209, a_210, a_211, a_212, a_213, a_214, a_215, a_216, a_217, a_218, a_219, a_220, a_221, a_222, a_223, a_224, a_225, a_226, a_227, a_228, a_229, a_230, a_231, a_232, a_233, a_234, a_235, a_236, a_237, a_238, a_239, a_240, a_241, a_242, a_243, a_244, a_245, a_246, a_247, a_248, a_249, a_250, a_251, a_252, a_253, a_254, a_255, a_256, a_257, a_258, a_259, a_260, a_261, a_262, a_263, a_264, a_265, a_266, a_267, a_268, a_269, a_270, a_271, a_272, a_273, a_274, a_275, a_276, a_277, a_278, a_279, a_280, a_281, a_282, a_283, a_284, a_285, a_286, a_287, a_288, a_289, a_290, a_291, a_292, a_293, a_294, a_295, a_296, a_297, a_298, a_299, a_300, a_301, a_302, a_303, a_304, a_305, a_306, a_307, a_308, a_309, a_310, a_311, a_312, a_313, a_314, a_315, a_316, a_317, a_318, a_319, a_320, a_321, a_322, a_323, a_324, a_325, a_326, a_327, a_328, a_329, a_330, a_331, a_332, a_333, a_334, a_335, a_336, a_337, a_338, a_339, a_340, a_341, a_342, a_343, a_344, a_345, a_"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Alice\"\nassert solution(stdin) == \"Bob\"\nassert solution(stdin) == \"\""
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"Bob\"\nassert solution(inp) == \"Alice\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_1, a_2, \\ldots, a_n <= 10^5\n\nTime Limit: O(n^3)\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"1\", \"2\", \"2\"]) == \"Alice\"\nassert solution([\"2\", \"2\", \"3\", \"3\"]) == \"Alice\"\nassert solution([\"2\", \"2\", \"3\", \"2\"]) == \"Bob\""
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Bob\"\n\nassert solution(input()) == \"Alice\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Alice\""
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Alice\"\n\"\"\""
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Alice\"\nassert solution(input()) == \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4 3\") == \"Bob\"\nassert solution(\"1 4 1\") == \"Alice\"\n\n--------Note-----\n\nIn the first example, the number of stones can be odd. But if Alice and Bob remove odd number of stones, the number of stones would be even.\n\nIn the second example, Alice and Bob cannot use any piles at all.\n\n\"\"\"\n\nn = int(input())\n\na = list(map(int,input().split()))"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1 4 1\"), \"Bob\"\nassert solution(\"3 3 4 4\"), \"Alice\"\nassert solution(\"3 4 1 1\"), \"Alice\"\nassert solution(\"1 1 1 1\"), \"Alice\"\nassert solution(\"2 4 1 4\"), \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Bob'\n\n\n-----Explanation-----\n\nAlice is not allowed to make a move. Only Bob can remove enough stones from the pile, which means Alice won the game.\n\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= n <= 10^5\n\nTime Limit: 1 sec\n\nNumber of Test Case = 1\n\nInput Format\n\nThe first line contains an integer n (1 \u2264 n \u2264 100 000) \u2013 the number of integers in the Filya's array. The second line contains n integers a_1, a_2,..., a_{n}.\n\n\nConstraints\n\nTime Limit: 1 sec\n\nSample Input\n\n5\n1 3 3 2 1\n\nSample Output\n\nNO\n\nTestcases\n\n1\n1 2 3 4 5\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 3 3 2 1') == \"YES\"\nassert solution('1 2 3 4 5') == \"NO\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\n1 <= a_1, a_2,..., a_{n} <= 10^9\nstdin contains at least one integer\nstdin does not contain any numbers which are not in the range [0, 10^9]\nstdin does not contain any duplicates"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 3 3 2 1\", \"1 3 4 4 5\"]) == \"YES\"\nassert solution([\"1 1 1 1 1\"]) == \"NO\"\nassert solution([\"1 2 3 4 5\"]) == \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 1 2 3 4 5\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"0 1 4 5\") == \"NO\"\nassert solution(\"0 1 3 2\") == \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    5\n    ) == \"YES\"\nassert solution(\n    5\n    ) == \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"4 5 2 1 2 3 2 4 4\") == \"YES\"\n\nassert solution(\n    \"4 5 2 1 2 3 2 4 4\") == \"NO\""
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input(\"Input: \")) == \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100000\n\n0 < a_1 < 10^9\n\n0 < a_2 < 10^9\n\n1 \u2264 a_1, a_2, a_{n} < 10^9\n\n\n-----Time complexity-----\n\nO(n) - time and space.\n\"\"\"\n\nclass Solution:\n    def check(self, arr, x):\n        for i in range(len(arr)):\n            if arr[i] - x!= 0:\n                return False\n        return True\n    def recur(self, arr, x, i):\n        if self.check(arr, x):\n            return arr[i]\n        else:\n            return self.recur(arr, x, i+1) + arr[i]\n\n    def find(self, arr, x):\n        i = 0\n        while self.check(arr, x):\n            i += 1\n        return self.recur(arr, x, i)\n\n\n    def __init__(self):\n        pass\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ababab') == 5\nassert solution('a') == 2\nassert solution('a') == 0\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ababa\"), \"no\"\nassert solution(\"aa\") == \"aa\", \"no\"\nassert solution(\"a\") == \"a\", \"no\"\nassert solution(\"\") == 0, \"no\"\nassert solution(\"ababababababababa\") == 2, \"no\"\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abab') == 2\nassert solution('aaba') == 0\nassert solution('baab') == 0\nassert solution('ba') == 2\nassert solution('baaba') == 2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"),\") == 1 or 1, line 1\nassert solution(\"abc\") == \"abc\", line 2\nassert solution(\"abc\") == \"abc\", line 3\nassert solution(\"a\") == \"a\", line 4\nassert solution(\"ab\") == \"ab\", line 5\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aabbcc\"), \"a\"\nassert solution(\"abc\"), \"b\"\nassert solution(\"abab\"), \"a\"\nassert solution(\"ababcccd\"), \"ababcc\"\nassert solution(\"abacd\"), \"bc\"\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 'ababa') == 2\nassert solution(10, 'ababa') == 0\nassert solution(3, 'aabab') == 2\nassert solution(6, 'ababab') == 2\nassert solution(5, 'abab') == 0\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ababa\") == 2\nassert solution(\"aaabbbaabaa\") == 0\nassert solution(\"aabaa\") == 0\nassert solution(\"ba\") == 0\nassert solution(\"ababa\") == 2"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ababa\") == 2\nassert solution(\"abcabc\") == 1\nassert solution(\"abcabcabc\") == 0\nassert solution(\"bababab\") == 0\nassert solution(\"aaa\") == 0\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 2\nassert solution(5) == 0\nassert solution(5) == 0\nassert solution(5) == 0\nassert solution(5) == 0\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('abababababab') == 2\nassert solution('a') == 0\nassert solution('a') == 0\nassert solution('a') == 0\nassert solution('abababababab') == 2\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == 2\n\nassert solution(1) == 0\n\nassert solution(2) == 3\n\nassert solution(3) == 2\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('8 2') == 2\n\nassert solution('8 3') == 3\n\nassert solution('8 4') == 4\n\nassert solution('8 5') == 5\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 7\n\nassert solution(input()) == 3\n\nassert solution(input()) == 0\n\nassert solution(input()) == 0\n\nassert solution(input()) == 0"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 4"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4, 2) == 2\nassert solution(8, 5) == 3\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['4','5','6','8','15','20','30','40']) == '2'\nassert solution(['4','5','6','8','15','20','30','40']) == '2'\nassert solution(['8','15','20','30','40']) == '1'\nassert solution(['8','15','20','30','40']) == '2'\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == '0', '<br>'\nassert solution(5) == '0', '<br>'\nassert solution(7) == '0', '<br>'\nassert solution(12) == '1', '<br>'\nassert solution(16) == '2', '<br>'\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 1 2 1 2 1\") == \"YES\"\nassert solution(\"2 1 2 1 2 2 2 2 2\") == \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == YES\n\nSuccess\nExplain\nQuestion\nFrom the first line, you will be given an input of the following format:\n\n5 2\n1 1 2 2 1\n1 2\n\nOutput\nYES\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2 1\") == \"NO\"\nassert solution(\"1 1 2 1\") == \"NO\"\nassert solution(\"1 2 1 2\") == \"YES\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 3 4\") == \"YES\"\nassert solution(\"5 5 1 2 1\") == \"NO\""
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 5 2\") == \"NO\"\n\n\n------Sample Input------\n\n5\n1 1 2 2 1\n1 2\n\nOutput\nNO\n\n\n------Sample Output------\n\nOutput\nNO\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n'''\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 290 291 292 293 294 295 296 297 298 299 299 300 301 302 303 304 305 306 308 308 309 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1 1 1') == 'YES'\nassert solution('2 3 2 1') == 'NO'\nassert solution('2 5 3 2 1') == 'NO'\nassert solution('5 1 4 1 3 1') == 'YES'\nassert solution('5 5 1 4 1 1') == 'NO'\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Friendship is magic!^^\"\nassert solution(input()) == \"Mishka\"\nassert solution(input()) == \"Chris\"\nassert solution(input()) == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Mishka\"\nassert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Chris\"\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"Mishka\"\nassert solution(\"2\") == \"Chris\"\nassert solution(\"3 1\") == \"Friendship is magic!^^\"\nassert solution(\"2 1\") == \"Friendship is magic!^^\"\nassert solution(\"4 2\") == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Mishka\"\n\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Friendship is magic!^^\"\n\nassert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1') == 'Friendship is magic!'\nassert solution('2') == 'Mishka'\nassert solution('3') == 'Chris'\nassert solution('4') == 'Friendship is magic!'\nassert solution('5') == 'Friendship is magic!'\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Chris\"\n\n-----Examples-----\nInput\n2\n1 3\n\nOutput\nFriendship is magic!^^\n\nInput\n1\n6 3\n\nOutput\nFriendship is magic!^^\n\nInput\n2\n6 3\n\nOutput\nFriendship is magic!^^\n\nInput\n2\n1 6\n\nOutput\nFriendship is magic!^^\n\n-----Solution-----"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3' == '1') == 'Friendship is magic!'\nassert solution('3' == '1 6') == 'Friendship is magic!'\nassert solution('3' == '1 1') == 'Friendship is magic!'\nassert solution('3' == '1 3') == 'Friendship is magic!'\nassert solution('3' == '1 5') == 'Friendship is magic!'\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Friendship is magic!^^\"\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 100\nstdin.length is an integer between 1 and 100.\n1 \u2264 m_i, c_i \u2264 6\nm_i and c_i are distinct and are distinct integers.\n0 \u2264 m_i < c_i < 6\n\n------Time Limit Exceeded------\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Friendship is magic!^^\"\n\"\"\"\n\nfrom collections import deque\nfrom heapq import heappush, heappop"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\", \"The program should return YES.\"\n\n-----Example-----\n\nInput\n3 3\n111\n1*1\n111\n\nOutput\nYES\nInput\n2 4\n*.*.\n1211\n\nOutput\nNO\n\"\"\"\n\nn = int(input())\nm = int(input())\n\nfor _ in range(n):\n    a,b = input().split()\n    a = int(a)\n    b = int(b)\n    print(b if b>0 else a)"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 3\", \"111\", \"1*1\", \"111\", \"*1\", \"111\", \"*1\", \"111\", \"1*1\"]) == \"YES\", \"Failed\"\nassert solution([\"2 4\", \"1211\", \"1*1\", \"1*1\", \"*1\", \"*1\", \"*1\", \"*1\", \"*1\"]) == \"NO\", \"Failed\"\n\n\"\"\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 1) == \"YES\"\nassert solution(3, 3) == \"NO\"\nassert solution(1, 1) == \"NO\"\nassert solution(1, 3) == \"YES\"\n\n\n'''\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, \"1*1\") == \"NO\"\nassert solution(3, \"11111\") == \"YES\"\nassert solution(3, \"1111\") == \"NO\"\nassert solution(3, \"1*1*\") == \"YES\"\nassert solution(3, \"1*1*1\") == \"NO\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1*1*1\") == \"YES\", \"Empty field\"\nassert solution(\"1*1*1*1\") == \"YES\", \"Bomb field\"\nassert solution(\"1*1*1*1*1\") == \"YES\", \"Incomplete field\"\nassert solution(\"1*1*1*1*1*1*1\") == \"YES\", \"Invalid field\"\nassert solution(\"1*1*1*1*1*1*1*1*1\") == \"YES\", \"Incomplete field\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 1 1 1\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"NO\"\nassert solution(\"1 2 1 1 1\") == \"YES\"\nassert solution(\"1 2 1 1 1 2\") == \"NO\"\nassert solution(\"1 1 1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\n\n-----Constraints-----\n0\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('56') == '2'\nassert solution('76') == '3'\nassert solution('61') == '5'\nassert solution('3') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"68\", \"65\", \"59\", \"56\", \"51\", \"48\", \"44\", \"41\", \"37\", \"34\", \"31\", \"28\", \"26\", \"23\", \"21\", \"18\", \"17\", \"14\", \"10\", \"9\", \"6\", \"6\", \"3\", \"3\", \"0\"]) == \"3\"\n\n\n\n\nInput:\n\nThe first line contains an integer t, the number of test cases.\n\nThen t test cases follow.\n\nFirst line contains an integer n, the initial amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in each day.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nFourth line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nFourth line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nFourth line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nFourth line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nThird line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of candies in the box.\n\nSecond line contains n space separated integers, k, representing the amount of"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"20\""
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(n) == 3"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('68') == '3'\nassert solution('6') == '3'\nassert solution('6') == '3'\nassert solution('9') == '3'\nassert solution('6') == '3'\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\"\"\""
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('74') == 3\nassert solution('123') == 3\n\n\n\n\n\n'''\nimport sys\nimport math\n\nn = int(input())"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 13\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"NO\"\nassert solution(\"-o---o-\") == \"YES\"\nassert solution(\"-o---o-o\") == \"YES\"\nassert solution(\"-o---o---\") == \"YES\"\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'YES'\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"-o-o--o-o\"\n) == \"YES\"\nassert solution(\n    \"o---o---o-o\"\n) == \"NO\"\nassert solution(\n    \"-o---o---o--o-o\"\n) == \"YES\"\nassert solution(\n    \"ooo--oo--oo--oo\"\n) == \"YES\"\nassert solution(\n    \"o---o---o---o\"\n) == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport unittest\nfrom typing import List\nfrom collections import Counter\n\nfrom utils import extract_input\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"YES\", \"incorrect\"\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ooo\"), \"NO\""
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"o-o--\") == \"YES\"\nassert solution(\"-.-o-\") == \"NO\""
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 'YES'\nassert solution(inp) == 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"ooo-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o-o"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 6 2\") == 2\nassert solution(\"3 10 3\") == 3\nassert solution(\"3 6 1\") == 4\nassert solution(\"3 6 2\") == 3"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 11 3') == 2, \"Expected 2, got {}.\".format(2)\nassert solution('3 6 1') == 3, \"Expected 3, got {}.\".format(3)\nassert solution('3 10 3') == 2, \"Expected 2, got {}.\".format(2)\nassert solution('3 1 2') == 3, \"Expected 3, got {}.\".format(3)\nassert solution('3 0 3') == 0, \"Expected 0, got {}.\".format(0)\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 5, \"should be 5\"\nassert solution(input()) == 7, \"should be 7\"\nassert solution(input()) == 3, \"should be 3\"\nassert solution(input()) == 4, \"should be 4\"\nassert solution(input()) == 2, \"should be 2\"\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\"\"\"\nfrom sys import stdin\n\nn, m, k = map(int, input().split())"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n-----Constraints-----\n\n1 <= n <= 10^9\n1 <= m <= 10^9\n1 <= k <= n\nstdin.length <= 2 * 10^5\nstdin contains distinct characters.\n\nExample 1:\n\nInput:\n3 6 2\n\nOutput:\n2\n\nExample 2:\n\nInput:\n1\n2\n\nOutput:\n1\n\"\"\""
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n\n\n_______________________________________________________________________________________________________________________\n\nYes, this is a lot of wrong.\n\n'''\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 6 2\") == 2\nassert solution(\"3 6 1\") == 1\nassert solution(\"3 10 3\") == 3\nassert solution(\"3 10 5\") == 5\nassert solution(\"3 10 3\") == 3\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 4\n\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 3\") == \"1\"\nassert solution(\"2 2 2\") == \"2\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"4 1 1\") == \"2\"\nassert solution(\"5 2 5\") == \"5\"\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input = \"\"\"\n    1 10 3\n    3 6 2\n    \"\"\") == \"2\"\nassert solution(\n    input = \"\"\"\n    3 10 3\n    \"\"\") == \"3\"\nassert solution(\n    input = \"\"\"\n    3 1\n    \"\"\") == \"3\"\nassert solution(\n    input = \"\"\"\n    1 1\n    \"\"\") == \"1\"\nassert solution(\n    input = \"\"\"\n    1 10\n    \"\"\") == \"1\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin: str,\n    ) == \"10\"\n\"\"\""
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution() == 0\n\nPass\n\n-----Constraints-----\n1 <= n, m, k <= 10^5\n-10^9 < a_i < 10^9\n\n------Time complexity-----\nO(m * n * k * m * n)\n\nO(m * n * k * m * n)\n\n------Space complexity-----\nO(n * m)\n\n------Algorithm-----\n\n1. Subarray\n\nSince n is not equal to m, the cost of subarray $a_l, a_{l+1}, \\dots, a_{r-1}, a_r$ is equal to $\\sum\\limits_{i=l}^{r} a_i - k \\lceil \\frac{r - l + 1}{m} \\rceil$, where $\\lceil x \\rceil$ is the least integer greater than or equal to $x$.\n\n2. Empty subarray\n\nSince n is not equal to m, the cost of empty subarray is equal to zero.\n\n3. Problem\n\n\nRuntime: 196 ms, faster than 86.12% of Python3 online submissions for Maximum Cost of Some Subarray.\nMemory Usage: 14.1 MB, less than 10.49% of Python3 online submissions for Maximum Cost of Some Subarray.\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 10 10 10 10\") == \"14\"\nassert solution(\"5 2 3 10\") == \"15\"\nassert solution(\"4 6 4 6 4 6\") == \"16\"\nassert solution(\"1 1 1 1 1\") == \"0\"\nassert solution(\"2 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0, 0, 0, 0, 0, 0, 0) == 0\nassert solution(1, 0, 0, 0, 0, 0, 0) == 0\nassert solution(2, 0, 0, 0, 0, 0, 0) == 0\nassert solution(3, 0, 0, 0, 0, 0, 0) == 0\nassert solution(4, 0, 0, 0, 0, 0, 0) == 0\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\n\"\"\"\n\nimport math\nimport sys\n\nfrom collections import deque"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=input,\n    ) == \"1\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 1 0 10\"\nassert solution(stdin) == \"0 0 1 0 0 0\"\nassert solution(stdin) == \"0 0 1 0 0\"\nassert solution(stdin) == \"0 1 0 0 1 0\"\nassert solution(stdin) == \"0 1 0 0 1 0\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0') == '0 1 1 9'\nassert solution('1') == '0 0 0'\nassert solution('10') == '1 0 1 9'\nassert solution('1 1') == '0 0 1'\nassert solution('1 1 1 1 1 1 1 1 1') == '0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == (\"0 1\\n0 10\\n0 0\\n0 9\\n0 10\", 0)\nassert solution(input()) == (\"0 1\\n0 10\\n0 0\\n0 1\\n0 9\", 0)\nassert solution(input()) == (\"0 1\\n0 10\\n0 0\\n0 1\\n0 9\", 0)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"0 10\", \"1 0\", \"1 0\", \"0 1\"]) == \"0 1 0 0 0\"\nassert solution([\"0 0\", \"1 10\", \"1 1\", \"0 1\"]) == \"0 0 1 0 0\"\nassert solution([\"0 0\", \"0 10\", \"1 1\", \"1 1\", \"0 1\"]) == \"0 1 0 10 0\"\nassert solution([\"1 10\", \"1 0\", \"1 0\", \"0 1\"]) == \"0 1 0 0 10\"\nassert solution([\"1 1\", \"1 1\", \"0 1\", \"0 1\"]) == \"0 1 1 0 1\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0 1 0 0 0 0\""
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n    ]\n) == \"1 1 0 9 0 9\"\n\nassert solution(\n    [\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n    ]\n) == \"1 1 0 9 0 9\"\n\nassert solution(\n    [\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n    ]\n) == \"1 1 0 9 9 9\"\n\nassert solution(\n    [\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n    ]\n) == \"1 1 0 9 9 9\"\n\nassert solution(\n    [\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\"],\n        [\"0\", \"1\", \"1\", \"1\"],\n    ]\n) == \"1 1 0 9 9 9\""
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1\\n0 0\\n1 0\\n0 1\"), \"Wrong answer\"\nassert solution(\"0 10\\n1 0\\n10 1\\n0 1\"), \"Wrong answer\"\nassert solution(\"0 10\\n0 10\\n1 10\\n0 1\"), \"Wrong answer\"\nassert solution(\"0 10\\n0 10\\n10 10\\n1 10\"), \"Wrong answer\"\nassert solution(\"0 10\\n0 10\\n1 1\\n1 1\\n1 1\"), \"Wrong answer\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"0 1\"\nassert solution(input()) == \"0 1\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0 10') == '0 0'\nassert solution('0 0') == '0 0'\nassert solution('1 10') == '0 0'\nassert solution('1 0') == '0 0'\nassert solution('0 10') == '0 0'\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0 10') == '0 1 0 10 0 9'\nassert solution('0 10') == '0 1 0 10 0 9'\nassert solution('0 1') == '0 0'\nassert solution('0 10') == '0 1 0 10 0 9'\nassert solution('10 10') == '1 0 0 0 0 9'\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('003512') == '30021'\nassert solution('199966633300') == '3036366999'"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"30021\"\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('00712') == '00301'\nassert solution('12201') == '00201'\nassert solution('11001') == '00011'\nassert solution('12500') == '00001'\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"003512\", \"021\", \"63\"]) == \"30021\"\nassert solution([\"199966633300\", \"63\"]) == \"3036366999\"\nassert solution([\"1910123456789\"]) == \"0\"\nassert solution([\"99\"]) == \"1\"\nassert solution([\"3\"]) == \"0\"\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"30021\"\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('a'+'0'*10000+'a') == 'a'\nassert solution('a0'+'0'*10000+'a') == 'a'\nassert solution('0'+'0'*10000+'a') == 'a'\nassert solution('0'+'a'*10000+'a') == 'a'\nassert solution('a'+'0'*10000+'0') == '0'\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"003512\", \"021\", \"63\", \"199966633300\", \"30021\"]) == \"30021\"\nassert solution([\"30005\", \"20000000001\", \"300000001\"]) == \"300000001\"\nassert solution([\"2\",\"1\",\"3\",\"4\",\"5\",\"7\",\"8\",\"9\",\"0\"]) == \"6\"\nassert solution([\"-\",\"-\",\"-\",\"-\",\"0\",\"0\",\"0\",\"0\",\"0\"]) == \"0\"\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"30021\"\n\n\n\n------------------Test Case------------------\nInput\n003512\n021\n\nOutput\n30021\nExplanation\n\nThe first line contains a substring of n which Vasya remembers. The only way is to remove leading zeroes is to take the integer n and add it to the left part of the string.\n\nSimilarly, the second line contains a substring of n which Vasya remembers. A single digit 0 was used to restore the string.\n\nThe next line contains an integer n that Vasya could pass to Kate.\n\nThe last line contains a substring of n which Vasya knows that this string is a non-empty substring of n.\n\nFor example, if Vasya is passed a string that contains only one digit, Vasya can restore n as a string of length 3.\n\nIf Vasya is passed a string that contains two digits, Vasya can restore n as a string of length 4.\n\nIf Vasya is passed a string that contains three digits, Vasya can restore n as a string of length 6.\n\n\n------------------Example------------------\nInput\n199966633300\n63\n\nOutput\n3036366999\nExplanation\n\nThe first line contains a substring of n which Vasya remembers. The only way to restore the integer n is to add it to the left part of the string.\n\nThe second line contains a substring of n which Vasya remembers. A single digit 0 was used to restore the string.\n\nThe last line contains a substring of n which Vasya knows that this string is a non-empty substring of n.\n\n\n------------------Example------------------\nInput\n2000\n2000\n2000\n\nOutput\n30021\nExplanation\n\nThe first line contains a substring of n which Vasya remembers. The only way to restore the integer n is to add it to the left part of the string.\n\nThe second line contains a substring of n which Vasya remembers. A single digit 0 was used to restore the string.\n\nThe last line contains a substring of n which Vasya knows that this string is a non-empty substring of n.\n\nFor example, if Vasya is passed a string that contains two digits, Vasya can restore n as a string of length 3.\n\nIf Vasya is passed a string that contains three digits, Vasya can restore n as a string of length 4.\n\nIf Vasya is passed a string that contains only three digits, Vasya can restore n as a string of length 6.\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ab\") == \"30021\"\n\n\n\n=======Solution=======\nclass Solution:\n    def minimumPassingPlaces(self, n: int) -> int:\n        i=0\n        while n>0:\n            remainder, remainder_possible = divmod(n, 10)\n            i+=1\n            n//=remainder_possible\n        return i\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"34\") == \"34\"\nassert solution(\"33\") == \"34\"\nassert solution(\"444\") == \"34\"\nassert solution(\"555\") == \"34\"\nassert solution(\"99999\") == \"34\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Correct'\nassert solution(stdin) == 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Correct', 'The output should be \"Correct\"'\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Correct\" or \"Incorrect\"\n\n\n---Time Complexity---\n\nIn the first test sample one of the possible initial configurations of temperatures is [1, 2].\n\nIn the second test sample one of the possible initial configurations of temperatures is [2, 1, 3].\n\nIn the third test sample it is impossible to add one temperature to obtain the minimum equal to 1 and the maximum equal to 3.\n\nTime complexity: O(n)\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Correct\", 'incorrect'\nassert solution(stdin) == \"Incorrect\", 'incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 1 2\\n1\\n2\\n3\") == \"Correct\"\nassert solution(\"2 1 1 3\\n1\\n2\\n3\") == \"Correct\"\nassert solution(\"2 1 1 4\\n1\\n2\\n3\\n4\") == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"2 1 1 4\") == \"Incorrect\"\nassert solution(\"3 1 1 5\") == \"Incorrect\"\nassert solution(\"3 1 1 6\") == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Correct\", \"incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"2 2 1 2\") == \"Incorrect\"\nassert solution(\"2 2 1 2\") == \"Incorrect\"\nassert solution(\"2 2 2 2\") == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\n\n\n\"\"\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1 1 2\") == \"Correct\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\n\n\n-----Note-----\n\nThe test sample receives the same values as the first test sample, but contains additional temperatures. It is assumed that the sample produces the minimum and maximum temperature for the specific set of temperatures.\n\n\n\n-----Example 1-----\n\nInput\n1 1 1 2\n1\n2 1 2 3\n\nOutput\nIncorrect\n\nInput\n1 1 1 2\n2\n3 1 2 3\n\nOutput\nIncorrect\n\n\n-----Example 2-----\n\nInput\n1 1 1 2\n1\n2 1 2 3\n\nOutput\nCorrect\n\nInput\n1 1 1 2\n2\n3 1 2 3\n\nOutput\nCorrect\n\n\n-----Example 3-----\n\nInput\n4 2 3 2\n1 2 3 1\n\nOutput\nIncorrect\n\nInput\n2 4 3 3\n1 2 3 3\n\nOutput\nIncorrect\n\n\n-----Example 4-----\n\nInput\n3 4 4 4\n2 1 3 2\n3 3 3 3\n\nOutput\nIncorrect\n\n\n-----Example 5-----\n\nInput\n3 2 2 3\n4 4 4 4\n\nOutput\nCorrect\n\nInput\n2 3 3 3\n3 3 3 3\n\nOutput\nIncorrect\n\n\n-----Constraints-----\n0 < stdin.readline().strip() < 105\n2 <= n, m <= 100\n\n\n-----Constraints:-----\nThe input consists of only integers, and no empty lines (lines with spaces)\n\n------IMPLEMENTATION------"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 5\nassert solution(2) == 5\nassert solution(3) == 7\nassert solution(4) == 14\nassert solution(5) == 120\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 5\nassert solution(15) == 1\nassert solution(0) == 1\nassert solution(1) == 1\nassert solution(6) == 20\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 5\nassert solution(input()) == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == '0'\n\nassert solution(2) == '3'\n\nassert solution(3) == '6'\n\nassert solution(4) == '12'\n\nassert solution(5) == '24'"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 5\nassert solution(2) == 5\nassert solution(3) == 0\nassert solution(4) == 0\nassert solution(5) == 0\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 5\nassert solution(2) == 4\nassert solution(3) == 6\nassert solution(4) == 16\nassert solution(5) == 120\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(3) == 6\nassert solution(4) == 24\nassert solution(5) == 120\nassert solution(6) == 720\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == \"5\"\nassert solution(1) == \"5\"\nassert solution(5) == \"10\"\nassert solution(5) == \"10\"\nassert solution(6) == \"20\"\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 0\nassert solution(3) == 0\nassert solution(5) == 1\nassert solution(8) == 0\nassert solution(6) == 1\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2, 2) == \"1\"\nassert solution(4, 5) == \"3\"\nassert solution(4, 3) == \"3\"\nassert solution(4, 1) == \"1\"\nassert solution(5, 1) == \"1\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 5 3') == '2 2 3 3 3 3'\nassert solution('3 4 2') == '1 1 2 2'\nassert solution('2 4 1 2 4 3 3') == '1 1 2 3'\nassert solution('1 2 4 3') == '1 2 1 3'\nassert solution('1 2 4 3 4 3') == '1 1 1 2'\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3 2\") == \"1 2 3\"\nassert solution(\n    \"4 5 3\") == \"3 3 3\"\nassert solution(\n    \"1 2 3\") == \"1 3 2\"\nassert solution(\n    \"1 2 3 1\") == \"2 2 1\"\nassert solution(\n    \"1 2 3 1 1\") == \"1 2 1 1\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2 3 2\"\nassert solution(input()) == \"2 3 3\"\n\n\nassert solution(input()) == \"3 3 3\"\nassert solution(input()) == \"3 3 3\"\nassert solution(input()) == \"3 3 3\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 3 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 2\\n3 1 2\\n2 3 1\\n3 2 3\") == \"2 3 3\"\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n3 3 3\") == \"3 3 3\"\nassert solution(\"4 5 3\\n1 2 3\\n1 2 5\\n4 2 1\\n3 3 3\") == \"3 3 3\"\n\n-----Constraints-----\n    \u2022 1 <= stdin.length <= 100\n    \u2022 0 <= stdin.length <= 100\n    \u2022 1 <= k <= 100\n    \u2022 1 <= m <= 10^4\n    \u2022 1 <= x_1, x_2,..., x_k < stdin.length\n    \u2022 1 <= x_i < stdin.length\n    \u2022 0 <= u <= n\n    \u2022 0 <= v <= n\n    \u2022 0 <= w >= 1\n\nInput\n2 3 2\n2 1\n1 2 3\n1 2 5\n4 2 1\n2 3 2\n1 4 3\n1 3 4\n\nOutput\n3 3 3 \n\nInput\n4 5 3\n1 2 3\n1 2 5\n1 2 2\n1 3 2\n1 4 3\n1 3 4\n1 5 3\n1 3 4\n\nOutput\n3 3 3 \n\n\n-----Solution-----\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\") == \"3 3 3\"\nassert solution(\"4 5 3\") == \"3 3 3\"\nassert solution(\"4 2 1\") == \"3 2 1\"\n\nassert solution(\"2 2 1\") == \"1 1 2\"\nassert solution(\"2 2 2\") == \"1 1 2\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 3 2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 2\"\nassert solution(stdin) == \"1 3 3\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 2, 2) == 3\nassert solution(2, 4, 1) == 3\nassert solution(2, 5, 2) == 3\nassert solution(1, 4, 3) == 3\nassert solution(1, 2, 2) == 3\n\n\n\nOutput\n2\n\n-----Constraints-----\n1 <= n, m, k <= 10^5\n1 <= x_1, x_2,..., x_k <= n - 1\nx_1 >= 0\nx_2 >= 0\n1 <= u, v, w <= 10^9\n\n-----Advanced-----\n\nWe can find a special vertex which is farthest from it, and the minimum cost of the two edges is equal to $2^k$ (i.e. the minimum cost of the paths of $2^k$ vertices)\n\n\"\"\""
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"1 4 4\"\nassert solution(stdin) == \"2 3 3\"\n\n\n-----Advanced-----\n\nWrite a simple program to find the farthest distance from all the vertices in the graph, given the following constraints.\n\nThe special vertices are $x_1, x_2, \\ldots, x_k$. You are given $n$ vertices and $m$ edges. The edges are weighted.\n\nFor each edge, we can choose any two vertices and cost the same weight. The edges are such that there is an edge between $x_i$ and $x_j$ with weight $w$.\n\nFor example, if there are four edges, $x_1, x_2, x_3, x_4$ and $x_1, x_5, x_6, x_7$ then $x_1, x_5, x_6, x_7$ is the farthest edge.\n\nYou can choose all edges by choosing a special vertex, and the special vertex is the farthest vertex.\n\nYou can not choose any other edges.\n\nGiven the number of vertices, edges and special vertices, find the minimum number of special edges that a particular edge from the graph is connected to.\n\nInput\n\nThe first line contains two integers $n$ and $m$ \u2014 the number of vertices, edges and special vertices.\n\nThe second line contains $m$ integers $x_1, x_2, \\ldots, x_k$ \u2014 the edges of the graph.\n\nThe first line contains a single integer $0 \\leq $k$ \u2014 the total number of edges.\n\nThe next $k$ lines contains $x_1, x_2, \\ldots, x_k$ \u2014 the special vertices of the graph.\n\nThe second line contains a single integer $0 \\leq $m$ \u2014 the number of special vertices.\n\nThe third line contains $m$ integers $x_i, x_j, \\ldots, x_j$ \u2014 the edges of the special vertices.\n\nThe fourth line contains $0 \\leq$ n - $m$ \u2014 the vertices in the graph.\n\nOutput\n\n$m$ integers.\n\n\n\nassert solution(stdin) == \"4 2 1\"\nassert solution(stdin) == \"2 1\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 0\nassert solution(\"3\") == 1\nassert solution(\"4\") == 2\nassert solution(\"5\") == 2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input().split()) == \"0\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '0'\n\n\"\"\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, \"0 1\") == 0\nassert solution(0, \"0 2\") == 0\nassert solution(2, \"0 1\") == 0\nassert solution(1, \"0 2\") == 0\nassert solution(2, \"0 1\") == 1\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 0, 'passed'\nassert solution(1) == 1, 'failed'\nassert solution(1) == 2, 'failed'\nassert solution(2) == 1, 'failed'\nassert solution(2) == 0, 'passed'\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['1', '2', '3']) == '0'\nassert solution(['1', '3', '2']) == '1'\nassert solution(['1', '3', '2', '4']) == '0'\nassert solution(['1', '4', '3']) == '0'\nassert solution(['1', '5', '3']) == '2'\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5' ) == '1'\nassert solution('3' ) == '0'\nassert solution('2' ) == '0'\nassert solution('1' ) == '2'\nassert solution('4') == '3'\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['5','0','3','0','3','2']) == \"YES\"\nassert solution(['0','0','0','0','0','0']) == \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\", \"Test 1 failed\"\n\nassert solution(stdin) == \"NO\", \"Test 2 failed\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n\") == \"YES\"\nassert solution(\n    \"4\\n0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n\") == \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n\") == \"YES\"\nassert solution(\n    \"0 0 2 3\\n0 3 3 5\\n2 0 5 2\\n3 2 5 5\\n2 2 3 3\\n\") == \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 'YES', '1'\nassert solution(2) == 'NO', '2'\nassert solution(4) == 'YES', '4'"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 0 2 3\") == \"YES\"\nassert solution(\"0 0 3 3\") == \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"12 1\") == 3, \"The first line of the input is not correct.\"\nassert solution(\"25 20\") == 0, \"The second line of the input is not correct.\"\nassert solution(\"10 9\") == 1, \"The third line of the input is not correct.\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"20 20\") == 0, \"Number is not a big number\"\nassert solution(\"10 30\") == 0, \"Smaller than 10\"\nassert solution(\"10 15\") == 1, \"Smaller than 10\"\nassert solution(\"10 5\") == 2, \"Smaller than 10\"\nassert solution(\"5 10\") == 2, \"Smaller than 10\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3, \"The solution is incorrect\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 4\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"1000\") == \"0\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"6 9\") == 3\n\n\nInput\n12 1\n\nOutput\n1\n\nInput\n25 20\n\nOutput\n0\n\n\n\"\"\""
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(0)\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\") == \"1\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"1 4\") == \"2\"\nassert solution(\"1 9\") == \"1\"\nassert solution(\"1 -1 -1 -1 -1\") == \"0\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10010011\") == 3\nassert solution(\"111111111\") == 1\nassert solution(\"112233444\") == 0\nassert solution(\"777777777\") == 1\nassert solution(\"234567890\") == 0\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"24 2\") == 3\n\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == 2\n\nassert solution(\"10 2\") == 1\n\nassert solution(\"5 5\") == 3\n\nassert solution(\"10110\") == 3"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == 3\nassert solution(\"10\") == 0\nassert solution(\"2 10\") == 1\nassert solution(\"30\") == 1\nassert solution(\"10 9\") == 1\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"0\", \"0\", \"0\", \"0\"]) == \"YES\"\nassert solution([\"5\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"NO\"\nassert solution([\"5\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 'YES'\nassert solution(5) == 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\n\nassert solution(\"5\") == \"NO\"\n\nassert solution(\"5\") == \"NO\"\n\nassert solution(\"5\") == \"YES\"\n\nassert solution(\"5\") == \"YES\""
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n'''\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == \"NO\"\nassert solution(5) == \"YES\""
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 'YES', \"wrong result\"\nassert solution(5) == 'NO', \"wrong result\"\nassert solution(10) == 'YES', \"wrong result\"\nassert solution(10) == 'NO', \"wrong result\"\nassert solution(5) == 'NO', \"wrong result\"\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, [[0, 0]]) == \"YES\"\nassert solution(5, [[1, 1]]) == \"NO\"\nassert solution(5, [[2, 2]]) == \"YES\"\nassert solution(5, [[-1, -1], [2, 2]]) == \"NO\"\nassert solution(5, [[1, 1], [1, -1]]) == \"YES\"\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"No\"\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nYes\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nYes\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nYes\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nYes\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nYes\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----\n\nNo\n\n\n\n-----Searching problem-----\n\n-----Input-----\n\n2\n10 1\n1 0 1 0 1\n1 0 1 1 0\n1 0 0 1 0\n1 1 1 1 1\n\n-----Output-----"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"NO\"\nassert solution(\"5 1\") == \"YES\"\nassert solution(\"5 1 3\") == \"YES\"\nassert solution(\"5 3 1\") == \"NO\"\nassert solution(\"5 -1 -1\") == \"NO\"\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n\n-----Time Complexity-----\n\nTime complexity: O(2^t), where 2 is number of lines in input.\n\nSpace Complexity: O(t), where t is the number of lines in input.\n\n-----Algorithm-----\n\nMemory:\n    a = -1\n    b = 1\n\n    i = 0\n    while i < 2:\n        a = (a + b) % 100\n        b = a - 1\n        i = i + 1\n\n    return a%100 + 1\n\nLexa:\n    a = -1\n    b = 1\n    i = 0\n    while i < 2:\n        a = (a + b) % 1000\n        b = a - 1\n        i = i + 1\n    return a%1000 + 1\n\n\nTime Complexity: O(t * t * 2), where t is the number of lines in input.\nSpace Complexity: O(t * t), where t is the number of lines in input.\n\n-----Solution-----\n\nassert solution(stdin) == 6\n\n---Memory usage---\n\nTime Complexity: O(2^t * 2^t * 2^t), where 2 is number of lines in input.\nSpace Complexity: O(t * t), where t is the number of lines in input.\n\nassert solution(stdin) == 31\n\n---Lexa usage---\n\nTime Complexity: O(2^t * 2^t * 2^t), where 2 is number of lines in input.\nSpace Complexity: O(t * t), where t is the number of lines in input.\n\nassert solution(stdin) == 0\n\n---Memory usage---\n\nTime Complexity: O(2^t * 2^t), where 2 is number of lines in input.\nSpace Complexity: O(t * t), where t is the number of lines in input.\n\nassert solution(stdin) == 31\n\n---Lexa usage---\n\nTime Complexity: O(2^t * 2^t * 2^t), where 2 is number of lines in input.\nSpace Complexity: O(t * t), where t is the number of lines in input."
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 2 1\") == \"31\"\nassert solution(\"2 1 2 2\") == \"0\"\nassert solution(\"2 1 2 3\") == \"0\"\nassert solution(\"2 3 5 2\") == \"0\"\nassert solution(\"2 3 4 6\") == \"0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str_to_int(\"2 2 1\")) == 6\nassert solution(str_to_int(\"2 2 2\")) == 0\nassert solution(str_to_int(\"2 2 3\")) == 31\nassert solution(str_to_int(\"2 2 4\")) == 0\nassert solution(str_to_int(\"2 2 1\")) == 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,2,1,2) == 3\n\nassert solution(2,1,2,1) == 1\n\nassert solution(0,1,2,1) == 1\n\nassert solution(1,0,2,1) == 2\n\nassert solution(1,1,2,1) == 2"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"31\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 2\") == 6\nassert solution(\"2 12 3 1\") == 31\nassert solution(\"1 1 1 2\") == 0\nassert solution(\"2 12 3 1\") == 0\nassert solution(\"1 1 1 2\") == 0\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\") == 0\nassert solution(\"2\") == 2\nassert solution(\"2 1\") == 1\nassert solution(\"1 1\") == 2\nassert solution(\"1 1 1\") == 1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 1, 1, 1) == 6\nassert solution(2, 1, 2, 1) == 31\nassert solution(3, 1, 0, 2) == 0\nassert solution(3, 1, 2, 1) == 0\nassert solution(3, 2, 1, 2) == 2\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '31'\nassert solution(stdin) == '0'\nassert solution(stdin) == '31'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 250 185 230') == '0'\nassert solution('4 250 185 230') == '0'\nassert solution('2 300 185 230') == '2'\nassert solution('0') == '0'\nassert solution('2 3 1 4 1') == '2'\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 300 185 230\"), \"4\"\nassert solution(\"3 250 185 230\"), \"0\"\nassert solution(\"2 300 185 230\"), \"0\"\nassert solution(\"3 250 185 230\"), \"2\"\nassert solution(\"2 300 185 230\"), \"2\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1') == 0, \"Expected 0\"\nassert solution('0') == 0, \"Expected 0\"\nassert solution('4') == 0, \"Expected 0\"\nassert solution('2') == 2, \"Expected 2\"\nassert solution('1') == 0, \"Expected 0\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 0 1 2\") == \"0\"\nassert solution(\"1 0 2\") == \"1\"\nassert solution(\"2 3 5 6\") == \"0\"\nassert solution(\"1 1 1 1\") == \"0\"\nassert solution(\"0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '942477.796077000'\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"942477.796077000\"\nassert solution(stdin) == \"3983.539484752\"\nassert solution(stdin) == \"67330\"\n\"\"\""
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Expected a, but got \" + str(solution(stdin)) + \".\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"942477.796077000\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"9 7\") == \"93\"\nassert solution(\"1 4\") == \"3\"\nassert solution(\"10 7\") == \"31\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == answer\n\n\"\"\""
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == answer\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"solution() returned false\"\n\n---------------Explanation-----------------\n\nThe problem is solved by the following:\n\nMaximum volume of Cake is a.\nCapsule has a maximum volume of 20.\nFirst, first, and last, capsules do not exist.\n\nHere, first and last are, a, and b.\n\n1.\n\nIn the other hand, capsule b has a maximum volume of 80,\nbut now 1 does not exist.\nSo, the volume of the capsule is limited to the maximum volume of a.\n\nIn the other hand, capsule a has a maximum volume of 50.\nSo, the volume of the capsule is limited to the maximum volume of b.\n\nHere, capsule a does not exist.\nSo, capsule b has a maximum volume of 30.\nSo, capsule b does not exist.\nSo, capsule b has a maximum volume of 20.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 10.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 8.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does not exist.\nSo capsule b has a maximum volume of 1.\nSo capsule b does"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"942477.796077000\"\n\n\n\"\"\"\n\nfrom sys import stdin, setrecursionlimit\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 3\") == \"942477.796077000\"\nassert solution(\"10 3 1\") == \"942477.796077000\"\nassert solution(\"10 3 2\") == \"942477.796077000\"\nassert solution(\"10 3 3\") == \"942477.796077000\"\nassert solution(\"10 3 4\") == \"942477.796077000\"\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nInput\n5 5\n1 1 2 2 4\n\nOutput\n1\n\n\n-----Note-----\n\nIn the second example, we have $2$ slices, and this only changes the initial heigth of the first tower. The first tower, on height $1$, is now on height $2$, and the second tower is removed from the first tower.\nIn the second example, we have $2$ slices, and this only changes the initial heigth of the first tower. The first tower, on height $1$, is now on height $2$, and the second tower is removed from the first tower.\nIn the third example, we have $2$ slices, and this only changes the initial heigth of the first tower. The first tower, on height $1$, is now on height $2$, and the second tower is removed from the first tower.\nIn the fourth example, we have $2$ slices, and this only changes the initial heigth of the first tower. The first tower, on height $1$, is now on height $2$, and the second tower is removed from the first tower.\nIn the fifth example, we have $2$ slices, and this only changes the initial heigth of the first tower. The first tower, on height $1$, is now on height $2$, and the second tower is removed from the first tower.\n\"\"\""
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n'''"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5 5\",\"3 1 2\",\"2 3 4\",\"4 5\",\"5 4 5\"]) == \"2\"\nassert solution([\"4 5\",\"2 3 4\",\"2 2 4\",\"2 2 3\"]) == \"3\"\nassert solution([\"4 5\",\"2 3 4\",\"2 2 4\",\"2 2 3\"]) == \"1\"\nassert solution([\"4 5\",\"2 3 4\",\"2 2 4\",\"2 2 3\"]) == \"2\"\nassert solution([\"3 2\",\"2 1\",\"1 3\",\"3 1\"]) == \"2\"\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\nInput\n5 5\n3 1 2 2 4\n\nOutput\n2\n\n\n\n-----Notes-----\n\n- Time Limit: $O(n^2)$ (assuming each tower has at least one cube.)\n- Space Limit: $O(n^2)$\n- Minimize the cost of each \"slice\" by choosing the lowest cube as the initial height.\n\"\"\"\n\nimport math\nimport sys\n\n\nclass Solution:\n    def solution(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        # the number of bricks, bricks are in n number of cubes. Each brick is represented by a number (1, 2,..., n), where the bricks can be broken by the number of cubes in that brick.\n        # the number of good slices is the number of bricks - the number of bricks which are broken by the number of cubes of bricks.\n        # the number of good slices are the number of bricks which is broken by the number of cubes which are not broken by the number of bricks.\n        # the smallest number of good slices is the min(n, k).\n        # to calculate the number of bricks, we use math.ceil(log n)\n        # we can use math.ceil(n/k)\n        # we can use math.ceil(log(n,k))\n        if n < k:\n            return 0\n        i = 1\n        while k > n // i:\n            i += 1\n            k = (n//i) * i\n        return math.ceil(n/i)"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\nstdin.length <= 10^9\nstdin.length <= 10^4\n\n0 <= h_i < 10^9\n\n10^5 <= n <= 10^9\n1 <= k <= 10^4\n\n\"\"\""
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n\n1 <= stdin.length <= 50\n1 <= stdin[i] <= 10^5\nstdin.length <= 10^5\n\nExample\nInput 1:\n\n2 3\n3 1 2 2 4\n\nOutput 1:\n\n2\n\nInput 2:\n\n4 5\n2 3 4 5\n\nOutput 2:\n\n2\n\n------Problem-----\n\nSolution:\n\nExample 2:\n\nInput:\n\n4 5\n2 3 4 5\n\nOutput:\n\n2\n\n------Problem-----\n\nSolution:\n\nExample 3:\n\nInput:\n\n3 5\n2 3 4 5\n\nOutput:\n\n2\n\n------Problem-----\n\nSolution:\n\nExample 4:\n\nInput:\n\n3 5\n1 2 3 4 5\n\nOutput:\n\n1\n\n------Problem-----\n\nSolution:\n\nExample 5:\n\nInput:\n\n1\n1\n1\n1\n1\n1\n1\n\nOutput:\n\n1\n\n------Problem-----\n\nSolution:\n\nExample 6:\n\nInput:\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n\nOutput:\n\n1\n\n------Problem-----\n\nSolution:\n\nExample 7:\n\nInput:\n\n2\n1\n1\n1\n1\n1\n1\n1\n\nOutput:\n\n1\n\n------Problem-----\n\nSolution:\n\nExample 8:\n\nInput:\n\n6\n3 2 1 1 3\n\nOutput:\n\n2\n\n------Problem-----\n\nSolution:\n\nExample 9:\n\nInput:\n\n8\n3 3 2 1 3\n\nOutput:\n\n1\n\n------Problem-----\n\nSolution:\n\nExample 10:\n\nInput:\n\n15\n2 5 1 3 4 4 4 5 4 1 4 3 4 5 1 3 1 1 3 4 3 4 1 2 4 3 4 5 3 4 1 2 3 4 5 1 4 2 4 2 3 5 2 1 2 3 4 5 3 4 1 2 3 4 5 1 3 2 4 4 5 3 4 1 2 3 4 5 1 2 2 3 4 5 3 4 1 2 3 4 5 3 2 4 3 2 2 4 3 2 5 3 3 4 1 2 2 3 4 5 2 4 3 2 2 2 3 2 4 3 2 2 2 2 3 2 2 2 2 3 2 2 2 3 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^5\n2 <= k <= 10^9\n\nTime Limit: 1 sec\n\nSubmissions:\n1,974\n\"\"\"\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5,3) == 2\n\n\n-----Algorithm-----\n\nLet's write all pairs of cubes as well as their indices in a list, then divide them into two: one for each tower. We create a dictionary to contain each pair of cubes as a key, and the value corresponding to that pair of cubes as a value. The value for the key is the cost of that pair of cubes.\n\nFor example,\n    $h_i$ = [1,2,3]\n    a = {\n        (1,2,3): 3,\n        (2,3,4): 5\n    }\n\na[(1,2,3)] = 3\na[(2,3,4)] = 5\n\nWe then divide the tower (2,3,4) and a. If a[(2,3,4)] = 1, we add a pair of cubes to the tower (2,3,4). This adds a second pair of cubes to the tower (2,3,4). And we divide the tower (2,3,4) by a[(2,3,4)] = 2. Now we want to know the cost of the two pairs of cubes.\n\nWe can do that with a dictionary:\n    $h_i$ = {\n        (1,2,3): 3,\n        (2,3,4): 5\n    }\n    a = {\n        (1,2,3): {\n            (2,3,4): 2\n        }\n    }\n\na[(1,2,3)] = {\n    (2,3,4): 2\n}\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n    (2,3,4): 1\n}\n\na[(2,3,4)] = {\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n\nclass Solution:\n    def get_min_slices(self, heights):\n        if len(heights) == 0: return 0\n        \n        n = len(heights)\n        return n + self.get_min_slices(heights[1:])\n        \n    def solution(self, stdin: str) -> str:\n        res = -1\n        heights = stdin.split()\n        heights = [int(x) for x in heights]\n        \n        heights.sort()\n        \n        return str(self.get_min_slices(heights))\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5') == '6'\nassert solution('5') == '0'\nassert solution('8') == '10'\nassert solution('3') == '0'\nassert solution('-30') == '-30'\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"8\") == \"6\"\nassert solution(\"3\") == \"4\"\nassert solution(\"-30\") == \"0\""
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 10\nassert solution(input()) == 10\nassert solution(input()) == 10\nassert solution(input()) == 10\nassert solution(input()) == 10\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == str(0)\n\nNote: stdin is assumed to be a file where the first line starts with the length of the input.\n\"\"\""
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\n\n\n-----Bonus-----\n\nInput\n5\n5 -2 10 -1 4\n\nOutput\n5\n\nInput\n5\n5 -2 10 -1 -1 -1 4\n\nOutput\n10\n\n\"\"\"\n\nimport sys\nfrom typing import Tuple, Union\n\nimport unittest"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2 2 3) == 'YES'\nassert solution(4 2 3) == 'NO'"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\n\n\n-----Algorithms-----\n\nRead the file and determine the frequency of the garlands. If a garland is lit, the time interval is considered as one second.\n\nCall a function that counts the frequency of each garland.\n\nCall a function that returns the most frequent garland.\n\nRead the file and determine the frequency of the garlands.\n\nThe garlands in such a way that a second is chosen for every second, then the garland will be lit.\n\nReturn the most frequent garland.\n\n\n-----Time Complexity-----\n\nFirst, the minimum number of seconds is 1.\nSecond, the minimum number of seconds is 0.\nThird, every second, we have 2 seconds each.\nFourth, every minute, we have 1 second each.\nFifth, every hour, we have 1 second each.\n\nThus, the time interval is 2 seconds.\n\n\n-----Successful Answer-----\n\nIn this second, the first garland will be lit during seconds 1, 4, 7, 10,..., which already cover all the seconds after the 2-nd one.\n\nIn this second, we see two garlands which are lit at exactly 1 second each.\n\nFor all the seconds after the 2-nd one, we must switch on all the garlands which are lit.\n\nFinally, we have one garland which is lit for every second and is also at exactly 1 second each.\n\nFor example, there are two garlands which are lit: 1, 3, 5, 7, 10,...\n\nFinally, we have one garland which is lit during seconds 1, 4, 7, 10,...\n\nSo, there are two garlands which are lit: 1, 3, 5, 7, 10,...\n\nFinally, we have two garlands which are lit: 1, 3, 5, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two garlands which are lit during seconds 1, 4, 7, 10,...\n\nSo, we have two"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str(int(input()))) == \"YES\"\n\n'''\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 2 3\") == \"YES\"\nassert solution(\"5 2 2\") == \"NO\"\nassert solution(\"7 1 1\") == \"NO\"\nassert solution(\"0 10\") == \"NO\"\nassert solution(\"1 10\") == \"YES\"\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2 3\"\n) == \"YES\"\nassert solution(\n    \"4 3\"\n) == \"NO\"\n\"\"\""
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\n\n-----Constraints-----\n1 <= k_1, k_2, k_3 <= 1500\n\"\"\"\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"4 2\") == \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\", \"4\"]) == \"NO\"\nassert solution([\"2\", \"3\"]) == \"YES\"\n\"\"\""
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 4 10 5 7 12\") == \"YES\"\nassert solution(\"3 3 1\") == \"NO\"\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 3\nassert solution(4) == 2\nassert solution(5) == 3\nassert solution(6) == 0\nassert solution(7) == 0\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"bbbbbcccdd\") == 3"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\nInput\n5\naaabbbbccc\n\nOutput\n3\nInput\n10\nabcabcabc\n\nOutput\n2\nInput\n13\naaaabbbbbcccdddd\n\nOutput\n0\nInput\n15\nababcbbccddf\n\nOutput\n5\nabacab\n\nInput\n13\nbbbbbcccddfbbb\n\nOutput\n2\nInput\n14\naaaaaabbbbbccccddfd\n\nOutput\n5\naaaaaabbbbbccccddfd\n\nExplanation\n\nGiven string $s$ consists of lowercase Latin letters, each string $s$ may contain duplicates.\n\nFor example, with $s = aba, the minimum number of operations is made to delete the substring \"a\", \"aa\", \"ab\", \"aa\".\n\nString $s$ contains a substring $s$ in which the first $s$ characters are different.\n\nThe minimum number of operations is $3 + 2 + 5 = 7$\n\nThe string $s$ contains a substring $s$ in which the first $s$ characters are different.\n\nThe string $s$ contains a substring $s$ in which the first $s$ characters are different.\n\nInput\n\nInput is a single line of space-separated integers.\n\nOutput\n\n\"\"\"\nimport sys"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 0\n\n\n\n\"\"\""
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == 3\n\n\n\n-----Time Complexity-----\n\nLet's say you are about to find the length of the longest substring you need to delete, then you will find the longest substring that can be of\nlength $n$, because in a long string $s$, you can do a series of operations: in one operation you can delete some\nsubstring from the string, if all letters in the substring you delete are equal.\n\nThen you will find the smallest possible substring that can be of length $n$, because it will be of length $n$ that\nis in the longest possible string.\n\n\n-----Note-----\n\nWe can assume that the entire string is a valid solution, and that we will only have one operation that is to delete\nany substring from the string.\n\nThe length of the longest substring we can have is the value of the index $i$ where we have $i$ in the string.\n\n\n-----Constraints-----\n\n1 <= $s$ <= $n$\n\n\n-----Usage-----\nSample Input\n\n3\nbba\nabc\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(8) == 3\nassert solution(5) == 3\nassert solution(3) == 1\nassert solution(2) == 1\nassert solution(4) == 1\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('aabc') == 5\n\nassert solution('aaa') == 5\n\nassert solution('aaaa') == 5\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"baa\") == 3\nassert solution(\"bbbb\") == 3\nassert solution(\"aaa\") == 4\nassert solution(\"ccc\") == 5\nassert solution(\"aaaa\") == 5\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1 1\") == \"3\"\nassert solution(\"1 1 1 1 1 1\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == 2\n\"\"\""
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 4 6 2') == '0'\nassert solution('1 2 3 4') == '3'\nassert solution('4 5 1 7 9') == '3'\nassert solution('4 1 2 3') == '1'\nassert solution('4 4 2 1') == '1'\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == 1\nassert solution('2') == 3\nassert solution('3') == 0\nassert solution('4') == 3\nassert solution('5') == 3\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin\n) == 5"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"3\"\nassert solution(\"1 3 4 5\") == \"3\"\nassert solution(\"1 4 2 3\") == \"0\"\nassert solution(\"1 4 2 3\") == \"2\"\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(10000)"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 1 5 7 9\") == 0, \"Error\"\nassert solution(\"3 1 1 1 1\") == 0, \"Error\"\nassert solution(\"4 1 5 7 9\") == 3, \"Error\"\nassert solution(\"4 4 6 9\") == 2, \"Error\"\nassert solution(\"1 1 1 1 1\") == 3, \"Error\"\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()), \"\"\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 1 5 7 9') == 2\nassert solution('5 1 3') == 3\nassert solution('5 1 5 7 9') == 0"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Team 1\"\nassert solution(stdin) == \"Team 2\"\nassert solution(stdin) == \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 5') == 'Team 1'\nassert solution('2 3') == 'Team 2'\nassert solution('2 3 2') == 'Team 2'\nassert solution('3 2 3') == 'Team 2'\nassert solution('3 3 3') == 'Team 2'\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('Player A: 1 1 \\nPlayer B: 2 2') == 'Team 1'\nassert solution('Player A: 2 2 \\nPlayer B: 3 3') == 'Team 2'\nassert solution('Player A: 3 3 \\nPlayer B: 1 1') == 'Draw'\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Team 1\"\nassert solution(stdin) == \"Team 2\"\nassert solution(stdin) == \"Draw\"\n\"\"\""
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 3 3 4 1 1 5 1 5 3\") == \"Team 1\"\nassert solution(\n    \"3 2 2 3 4 3 2 3 2 2 3 3 3 2 3 2 3 2 3 2 2 3 2 3 2 2 3 2 3 2 3 3 2 2 3 3 3 2 3 2 3 2 3 2 3 3 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 3 3 3 2 3 2 3 2 3 2 3 3 2 3 3 3 2 3 2 3 2 3 3 3 2 3 2 3 3 3 2 3 2 3 3 3 2 3 3 3 2 3 2 3 2 3 3 3 2 3 2 3 3 3 2 3 3 2 3 3 3 3 2 3 3 2 3 3 3 3 2 3 2 3 3 3 3 2 3 2 3 3 3 3 2 3 3 3 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 3 3 2 3 3 3 3 3 3 3 3 2 3 3 3 3"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Team 1\"\nassert solution(stdin) == \"Team 2\"\nassert solution(stdin) == \"Draw\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"Team 1\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 100\\n100 1\\n100 99\\n100 99\\n100 99\") == \"Team 1\"\nassert solution(\"3 3\\n3 1\\n2 2\\n2 2\\n3 3\\n2 2\\n1 1\") == \"Team 2\"\nassert solution(\"4 2\\n1 2\\n1 3\\n1 1\") == \"Team 2\""
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"Team 1\"\nassert solution(\"3 3\") == \"Team 2\"\nassert solution(\"1 2\") == \"Team 1\"\nassert solution(\"2 2\") == \"Team 2\"\nassert solution(\"3 3\") == \"Team 1\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 1, 1, 1, 1) == \"Team 1\"\nassert solution(3, 2, 1, 1, 1) == \"Team 2\"\nassert solution(1, 1, 2, 1, 1) == \"Team 2\"\nassert solution(1, 2, 2, 1, 1) == \"Team 1\"\nassert solution(1, 3, 2, 1, 1) == \"Team 2\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 0 3\") == \"1.4\"\nassert solution(\"-1 0 3\") == \"2.4\"\nassert solution(\"0 0 3\") == \"2.5\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 3\") == \"3\"\n\nassert solution(\"4 3\") == \"3\"\n\nassert solution(\"-1 0 3\") == \"1 0 3\"\n\nassert solution(\"0 0 3\") == \"1 0 3\"\n\nassert solution(\"1 0 2\") == \"1 0 2\""
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"2.4\"\nassert solution(\"-1 0 3\") == \"1.0\"\nassert solution(\"0 0 3\") == \"0.0\"\nassert solution(\"0 -1 0 3\") == \"-1.0\"\nassert solution(\"0 0 -1 0 3\") == \"-1.0\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"2.5\"\nassert solution(\"0 1 0 3\") == \"2.0\"\nassert solution(\"1 -1 3\") == \"1.5\"\nassert solution(\"1 0 1 0\") == \"1.0\"\nassert solution(\"2 1 2\") == \"0.0\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 -1 0 3\") == \"2.4\"\nassert solution(\"3 -1 0 3\") == \"3.141592653589793\"\nassert solution(\"1 2 -1 0 2\") == \"3.141592653589793\"\nassert solution(\"1 2 -1 0 1\") == \"3.141592653589793\"\nassert solution(\"1 -1 0 -1\") == \"2.4\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '1.2'\nassert solution(input) == '2.2'\nassert solution(input) == '1.3'\nassert solution(input) == '0.4'\nassert solution(input) == '0.6'\n\n\"\"\""
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"1.8\"\n\n\"\"\"\n\nimport math\nfrom typing import List"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"5\"\n\nassert solution(\"1 4\") == \"2\"\n\nassert solution(\"5 3\") == \"4\"\n\nassert solution(\"3 2\") == \"3\"\n\nassert solution(\"2 3\") == \"2\""
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '2.4'\n\n'''\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(f\"{N} {K}\") == \"2.5\"\n\"\"\""
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input: stdin: str\n) == \"Monocarp\"\nassert solution(\n    input: stdin: str\n) == \"Bicarp\"\nassert solution(\n    input: stdin: str\n) == \"Bicarp\"\nassert solution(\n    input: stdin: str\n) == \"Monocarp\"\nassert solution(\n    input: stdin: str\n) == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Bicap\"\nassert solution(stdin) == \"Monocarp\"\n\nassert solution(stdin) == \"Bicarp\"\nassert solution(stdin) == \"Bicarp\"\nassert solution(stdin) == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 'Bicap'\nassert solution(input) == 'Monocarp'\n\n\"\"\"\nimport math"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"Monocarp\"\nassert solution(1) == \"Bicarp\"\nassert solution(6) == \"Monocarp\"\nassert solution(8) == \"Bicarp\"\nassert solution(6) == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Bicarp\""
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Bicarp\"\n\nassert solution(stdin) == \"Monocarp\"\n\nassert solution(stdin) == \"Bicarp\"\n\nassert solution(stdin) == \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 523\") == \"Bicarp\"\nassert solution(\"2 \" + \"?4\") == \"Bicarp\"\nassert solution(\"2\") == \"Bicarp\"\nassert solution(\"8?\") == \"Bicarp\"\nassert solution(\"6!\") == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"Bicarp\"\nassert solution(input) == \"Monocarp\"\nassert solution(input) == \"Monocarp\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= n <= 10^5\n\n\"\"\""
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Bicarp\"\nassert solution(input()) == \"Bicap\"\n\nassert solution(input()) == \"Monocap\"\nassert solution(input()) == \"Bicap\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2\",\"5\",\"?4\"]) == \"Bicarp\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"?\"]) == \"Monocarp\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\"]) == \"Bicarp\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\"]) == \"Monocarp\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\",\"?\"]) == \"Monocarp\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 3 2') == '3'\nassert solution('4 5 6') == '1'\nassert solution('3 3 3') == '1'\nassert solution('3 4 9') == '1'\nassert solution('3 5 6') == '1'\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 4 1') == '3'\nassert solution('3 7 2') == '2'\nassert solution('5 4 3 4 2') == '3'\nassert solution('1 9 2 5 6') == '3'\nassert solution
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\\n5\\n4\\n1\\n2\\n3\\n4\\n5\\n6\\n4\\n2\\n2\\n2\\n3\\n2\\n3\\n3\\n5\\n5\\n\") == \"3\"\nassert solution(\"1\\n5\\n4\\n1\\n2\\n3\\n4\\n5\\n6\\n4\\n2\\n2\\n2\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n2\\n4\\n5\\n6\\n1\\n2\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3\\n4\\n5\\n6\\n4\\n2\\n3\\n3"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1' in solution('4' in solution('3' in solution('1')))) == '3'\nassert solution('1' not in solution('4' not in solution('3'))) == '4'\nassert solution('3' not in solution('2')) == '2'\nassert solution('3' not in solution('1')) == '3'\nassert solution('2' not in solution('1')) == '1'\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 5') == '3'\nassert solution('3 3') == '1'\nassert solution('3 5') == '1'\nassert solution('2 3') == '3'\nassert solution('2 2') == '1'\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n\nInput\n4\n\nOutput\n2\n\nInput\n3\n\nOutput\n1\n\n'''\nimport re"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"5\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"16\"\nassert solution(inp) == \"64\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 2') == '5'\nassert solution('5 2') == '4'\nassert solution('7 5') == '7'\nassert solution('2 2') == '2'\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '11'\nassert solution(input()) == '13'\nassert solution(input()) == '21'\nassert solution(input()) == '33'\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1 1) == 1\nassert solution(3 2) == 5\nassert solution(7) == 1\nassert solution(10) == 1\nassert solution(123456789) == 123456789\n\"\"\"\n\nfrom collections import defaultdict\n\nm, k = map(int, input().split())"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n10 10\n\nOutput\n10\nassert solution(stdin) == \"10\"\n\"\"\""
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"yes\"\n\n\nassert solution(inp) == \"no\"\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'yes', \"Incorrect answer\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n\n1 <= stdin[i] <= 10^5\n\n\n-----Side-effects-----\n\nCorrectness of the solution can be achieved by removing the platform number n.\n\n\n------Code------"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3 4 5 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n) == 'yes'\n\nassert solution(\n    \"2 3 4 5 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n) == 'no'\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100\n\n\n------Sample input 1.txt-----\n\n2\n.**..**.**.***.**\nSample Output\nno\n\n\n-----Sample input 2.txt-----\n\n5\n.**.*..**.***.**\nSample Output\nyes\n\n------Sample input 3.txt-----\n\n4\n.**.**.**.**\nSample Output\nno\n\n\"\"\"\n\nclass Solution:\n    def pathToDestination(self, path: str) -> int:\n        m = {}\n        for i in path:\n            if i in m:\n                m[i] += 1\n            else:\n                m[i] = 1\n        l = [i for i in m.values() if i == 1]\n        l.sort()\n        return l[-1]"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"011101\"\n) == \"yes\"\nassert solution(\n    \"101111\"\n) == \"no\"\nassert solution(\n    \"110100\"\n) == \"yes\"\nassert solution(\n    \"110101\"\n) == \"no\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"no\"\n\nInput\n4\n.**.*..*.***.**.\n\nOutput\nno\n\"\"\"\n\nimport collections\nimport itertools"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(string) == \"yes\", \"Failed\"\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"yes\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^6\n\n\n-----Problems-----\nMedium\n\n12\n*.*..*.***.**.\n\nMedium\n\n9\n***.***.***.\n\nMedium\n\n9\n...*.*...*..*..*..*..*..*..*..\n\nMedium\n\n1\n*.*...*...*..*..*..*..*..*..\n\nMedium\n\n1\n...*..*..*..*..*..*..*..*..\n\nMedium\n\n2\n*.*...*...*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n1\n.*...*...*..*..*..*..*..*..\n\nMedium\n\n2\n.*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n1\n.*..*..*..*..*..*..*..*..\n\nMedium\n\n2\n.*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n3\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n1\n..***.***.***.\n\nMedium\n\n2\n.**.*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.*..*..*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.*..*..*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n4\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n.***.***.***.\n\nMedium\n\n3\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n3\n.***.***.***.\n\nMedium\n\n4\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n.***.***.***.\n\nMedium\n\n4\n.***.***.***.\n\nMedium\n\n4\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n.***.***.***.\n\nMedium\n\n4\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n3\n.***.***.***.\n\nMedium\n\n4\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n.***.***.***.\n\nMedium\n\n4\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n3\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n4\n..*..*..*..*..*..*..*..*..\n\nMedium\n\n1\n.***.***.***.\n\nMedium\n\n2\n.***.***.***.\n\nMedium\n\n4\n...*.*...*..*..*..*..*..*..\n\nMedium\n\n3\n.***.***.***.\n\nMedium\n\n4\n..*"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"yes\"\n\"\"\"\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"*.*..*.*.*.*.*.**.**.**.***.**.**.*.*.**.*.*.*.**.*.*.*.*.*.*.*.**.*.**.*.**.*.**.*.**.*.**.*.*.**.*.**.*.**.*.**.*.**.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.*.**.\"\n) == \"yes\"\nassert solution(\n    \"**.*.**.**.*.***..**.**.**.*.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.\"\n) == \"no\"\nassert solution(\n    \"***.*.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.**.\"\n) == \"no\"\nInput\n1\n***.**\nOutput\nyes\nInput\n*\n***\nOutput\nno\nInput\n*\n**\nOutput\nyes\nInput\n*\n***\nOutput\nno\nInput\n***.\nOutput\nyes\nInput\n*\n**\nOutput\nno\nInput\n*\n**.\nOutput\nno\nInput\n***.\nOutput\nyes\nInput\n*\n**.\nOutput\nyes\nInput\n***.\nOutput\nno\nInput\n***.\nOutput\nno\n\"\"\"\n\nclass Solution:\n    def goodNodes(self, N: int, levels: str) -> str:\n        n = len(levels)\n        prev_level = int(levels[0])\n        jump_depth = int(levels[1])\n        jump_depth_index = n - 1 - jump_depth - 1\n        jump_level_index = n - jump_depth_index - 1\n        jump_start_index = jump_level_index - jump_depth_index - 1\n        jump_level = jump_depth - jump_start_index\n\n        level_index = jump_level_index - 1\n        level_length = jump_start_index - jump_depth - 2\n        level_start = jump_start_index - level_length\n        level_end = jump_start_index + jump_length - level_length\n\n        jump_length = 0\n        jump_start_index = 0\n        jump_length = jump_start_index - level_length\n        jump_depth_index = level_end + 1 - level_start\n        jump_depth = jump_depth_index - 1\n        jump_level = jump_depth - jump_start_index - 2\n\n        #print(jump_depth, jump_level)\n\n        while jump_start_index > level_start or jump_length > level_length:\n            jump_start_index -= 1\n            jump_length -= 1\n\n        level_start += jump_start_index\n        level_end += jump_length\n        jump_length = jump_length + jump_start_index + jump_depth\n        jump_start_index = level_start\n        jump_start_index += jump_depth_index\n        jump_depth_index = jump_depth_index + 1\n\n        for level in range(level_start, level_end):\n            level_start = level\n            level_length = jump_start_index - level_start\n            level_start += jump_length\n            level_end += jump_length\n\n        jump_length = jump_length + jump_start_index + jump_depth\n        jump_start_index = level_end\n        jump_start_index += jump_depth_index\n        jump_depth_index = jump_depth_index + 1\n        \n        for level in range(level_end, jump_start_index):\n            level_start = level\n            level_length = jump_start_index - level_start\n            level_start += jump_length\n            level_end += jump_length\n\n        jump_length = jump_length + jump_start_index + jump_depth\n        jump_start_index = level_end\n        jump_start_index += jump_depth_index\n        jump_depth_index = jump_depth_index + 1\n        \n        for level in range(level_start, level_end):\n            level_start = level\n            level_length = jump_start_index - level_start\n            level_start += jump_length\n            level_end += jump_length\n\n        jump_length = jump_length + jump_start_index + jump_depth\n        jump_start_index = level_end\n        jump_start_index += jump_depth_index\n        jump_depth_index = jump_depth_index + 1\n        \n        for level in range(level_end, jump_start_index):\n            level_start = level\n            level_length = jump_start_index - level_start\n            level_start += jump_length\n            level_end += jump_length\n\n        jump_length = jump_length + jump_start_index + jump_depth\n        jump_start_index = level_end\n        jump_start_index += jump_depth_index\n        jump_depth_index = jump_depth_index + 1\n        \n        for level in range(level_start, jump_start_index):\n            level_start = level\n            level_length = jump_start_index - level_start\n            level_start += jump_length\n            level_end += jump_length\n\n        jump_length = jump_length + jump_start_index + jump_depth\n        jump_start_index = level_end\n        jump_start_index += jump_depth_index\n        jump_depth_index = jump_depth_index + 1\n\n        for level in range(level_end"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"yes\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\",\"4\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"4\",\"0\",\"1\",\"0\",\"0\"]) == \"1\"\nassert solution([\"4\",\"0\",\"0\",\"0\",\"0\"]) == \"1\"\nassert solution([\"4\",\"0\",\"0\",\"1\",\"0\"]) == \"1\"\nassert solution([\"4\",\"0\",\"1\",\"1\",\"0\"]) == \"1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '9'\n\n\n-----IMP----\n\nImplement a solution program which takes 2 lines of input from the user and uses the following trick to calculate the solution to the problem. The first line of the input contains n integers, each of which starts with a positive integer, which is a magic square. \n\nThe second line contains the two lines of input, where the first line contains the number of rows, and the second line contains the number of columns, the number of diagonals, and the third line contains the row and column in the magic grid.\n\nThe magic square consists of two rows, two columns, a row of two diagonals, and a column of two diagonals. When solving the problem, the following rules are applied to the two rows of the magic square:\n\nIf a cell is empty, a row of two diagonals should be filled with a -1, and if a cell is filled, a row of two diagonals should be filled with a positive number. Otherwise, a row of two diagonals should be filled with a number that is positive, and if a cell is filled, a row of two diagonals should be filled with a number, which is a number that is negative, and if a cell is filled, a row of two diagonals should be filled with a negative number.\n\nIf a cell is not empty, a row of two diagonals should be filled with a negative number and if a cell is filled, a row of two diagonals should be filled with a positive number.\n\nThe magic square has the following rules:\n\nEach cell is placed with a -1 if it is empty, and a positive number if it is filled with a number.\n\nEach cell and its three subcells are placed with a -1 if they are empty and a positive number if they are filled with a number.\n\nA magic square can be constructed from 3 rows and 2 columns such that the values of the numbers in the grid are equal.\n\nIf the values of the numbers in the grid are equal, the magic square can be constructed from 3 rows and 2 columns.\n\nInput\n\n3\n1 -2 -4 -3 -5 -7\n2 -2 -3 -3 -5 -8\n\nOutput\n\n9\n\nInput\n\n3\n1 1 1 1\n1 1 0 1\n1 1 2 1\n1 1 1 1\n1 1 1 1\n\nOutput\n\n-1\n\n\n-----Solution-----\n\nThe first line of the input contains a single integer n (1 \u2264 n \u2264 10^9) \u2013 the number of rows of the magic grid.\n\nn lines follow, each of them contains n integers. The j-th number in the i-th of them denotes a_{i}, j (1 \u2264 a_{i}, j \u2264 10^9 or a_{i}, j = 0), the number in the i-th row and j-th column of the magic grid. If the corresponding cell is empty, a_{i}, j will be equal to 0. Otherwise, a_{i}, j is positive.\n\nIt is guaranteed that there is exactly one pair of integers i, j (1 \u2264 i, j \u2264 n) such that a_{i}, j = 0.\n\n\n-----Incorrect Answer-----\n\nThe first example was found by solving this problem as follows:\n\n\nSolution:\n3\n-2 -3 -4 -5 -7\n2 -2 -3 -3 -5 -8\n1 -2 -3 -3 -5 -8\nInput:\n3\n-2 -2 -2 -2 -2 -2\nOutput:\n9\n-1\n-1\n\n\n-----Incorrect Answer-----\n\nThis is the correct answer.\n\n'''\n\nfrom collections import defaultdict"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n        \"3\"\n        ) == \"9\"\nassert solution(\n        \"4\"\n        ) == \"1\"\nassert solution(\n        \"5\"\n        ) == \"1\"\nassert solution(\n        \"6\"\n        ) == \"1\"\nassert solution(\n        \"7\"\n        ) == \"1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '9'\n\"\"\""
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\""
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '9'\nassert solution(stdin) == '-1'"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '9'\nassert solution(inp) == '1'\nassert solution(inp) == '-1'\nassert solution(inp) == '-1'\nassert solution(inp) == '-1'\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '9'\n\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"12\"\nassert solution(\"3\") == \"15\"\nassert solution(\"1\") == \"3\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4 7\"\nassert solution(stdin) == \"2 12\"\nassert solution(stdin) == \"6 13\"\n\n\n'''\n\nclass Solution:\n    def solve(self,stdin,n,m):\n        #dp[i][j] => the minimum people can take the j-th bench to the i-th person\n        dp = [[0] * (n+1) for _ in range(n+1)]\n\n        for i in range(n+1):\n            dp[i][0] = 0\n        for i in range(n+1):\n            for j in range(1,n+1):\n                if j >= m:\n                    dp[i][j] = max(dp[i-1][j-1], dp[i-1][j])\n                else:\n                    dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + 1\n        return dp[n][n]"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"15\"\n\"\"\""
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 2\"), \"No\"\nassert solution(\"1\"), \"No\"\nassert solution(\"3 5\"), \"No\"\nassert solution(\"3 6\"), \"No\"\nassert solution(\"3 4\"), \"Yes\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"3\") == \"12\"\nassert solution(\"5\") == \"14\"\nassert solution(\"4\") == \"6\"\nassert solution(\"7\") == \"12\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4\\n1\\n1\\n2\") == \"3\\n5\\n7\\n12\"\nassert solution(\"1\\n6\\n5\") == \"6\\n12\"\nassert solution(\"3\\n1\\n5\\n5\") == \"7\\n6\\n12\"\nassert solution(\"3\\n2\\n4\\n2\\n2\") == \"4\\n5\\n6\\n12\"\nassert solution(\"2\\n2\\n4\\n5\") == \"6\\n12\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 5\") == \"3\"\nassert solution(\"5 10\") == \"15\"\n\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"0\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\""
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"15\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"13\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"128\"\nassert solution(\"3 4\") == \"128\"\nassert solution(\"3 5\") == \"128\"\nassert solution(\"3 6\") == \"128\"\nassert solution(\"3 7\") == \"128\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3,3) == 128\nassert solution(2,4) == 5\nassert solution(3,3) == 0\nassert solution(2,4) == 1\n\n\n\nExample 2:\n\nInput\n3 3\n\nOutput\n3\n\n\n\nExample 3:\n\nInput\n1\n\nOutput\n1\n\n\n\nExample 4:\n\nInput\n2\n\nOutput\n2\n\n\n\nExample 5:\n\nInput\n5\n\nOutput\n5\n\n\n\nConstraints:\n\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n\"\"\"\n\n\"\"\"\nIntuition\n\nThis approach is not valid, because the plane only has one person to take a seat, and there is no way to pick the seat.\n\nThis is the better approach, because we have a segment in the plane where a person can take all of the seats in the plane, if there are no seats left to take.\n\"\"\""
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"8\"\nassert solution(\"1 2 3 5\") == \"14\"\nassert solution(\"1 2\") == \"9\"\nassert solution(\"0\") == \"0\"\nassert solution(\"3 7\") == \"0\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, 3) == 128\nassert solution(5, 4) == 8\nassert solution(5, 3) == 8\nassert solution(5, 3) == 8\nassert solution(5, 3) == 8\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == 1\nassert solution(\"5 2\") == 0\nassert solution(\"3 4\") == 2\nassert solution(\"5 2\") == 2\nassert solution(\"2 1\") == 2\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"128\""
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 127, 'answer is not 127'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 3') == 128\nassert solution('3 3') == 0\nassert solution('2 3') == 3\nassert solution('2 3') == 0\nassert solution('3 3') == 1\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == 6, 'incorrect'\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2 4\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '10'\n\"\"\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '2 4'\nassert solution(inp) == '4 4'\nassert solution(inp) == '2 4'\nassert solution(inp) == '2 4'\nassert solution(inp) == '2 4'\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4 2 3 4\") == \"2 4\"\nassert solution(\"1 4 2 3 4\") == \"4 2\"\nassert solution(\"1 4 2 3 4\") == \"4\"\nassert solution(\"1 4 2 3 4\") == \"1 3\"\nassert solution(\"1 4 2 3 4\") == \"1\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"2 3\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 3\") == \"1 2\"\nassert solution(\"4\") == \"1\"\nassert solution(\"\") == \"1\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"2 4\"\nassert solution(\"2 3 4 3 4 4 2 2 3 3 4\") == \"2 3 4\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"1 2\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"1 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == \"1 2\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2, \"This solution does not work\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 0\") == \"-1 -1\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,5) == -1\nassert solution(30,45) == -1\nassert solution(2000,90) == -1\nassert solution(15,12) == 90\nassert solution(0,0) == -1\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,1) == -1, \"1\"\nassert solution(1,2) == -1, \"1\"\nassert solution(1,0) == -1, \"1\"\nassert solution(1,5) == -1, \"1\"\nassert solution(2,1) == -1, \"1\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"69 96\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == (69, -1, -1)\n\nassert solution(\"0\") == (0, 0, -1)\nassert solution(\"5\") == (5, 0, -1)\nassert solution(\"9\") == (9, 0, -1)\nassert solution(\"1\") == (1, 0, -1)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4523\"), \"4523\"\nassert solution(\"5421\"), \"5421\"\nassert solution(\"5679\"), \"5679\"\nassert solution(\"9007\"), \"9007\"\nassert solution
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == (\"69\", \"96\")"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 15) == 69, \"expected 69 got: %s\" % solution(2, 15)\nassert solution(3, 0) == -1, \"expected -1 got: %s\" % solution(3, 0)\nassert solution(3, 10) == -1, \"expected -1 got: %s\" % solution(3, 10)\nassert solution(3, 0) == -1, \"expected -1 got: %s\" % solution(3, 0)\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2, 15) == -1\nassert solution(3, 0) == -1\nassert solution(3, 111) == 69\nassert solution(4, 0) == -1\nassert solution(5, 0) == -1\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"69-96\""
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2189'\nassert solution(stdin) == '2750685'\nassert solution(stdin) == '121'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2189\"\n\nassert solution(stdin) == \"2750685\"\n\nassert solution(stdin) == \"101154\"\n\nassert solution(stdin) == \"15412\"\n\nassert solution(stdin) == \"77125\""
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2189'\n\nassert solution(stdin) == '2750685'\n\nassert solution(stdin) == '101154'\n\nassert solution(stdin) == '10101'\n\nassert solution(stdin) == '101010'"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1230'\nassert solution(stdin) == '2750685'\nassert solution(stdin) == '2189'\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2345 10\") == 1230\nassert solution(\"101 154 2\") == 2750685\nassert solution(\"1 2345 10\") == 2750685\nassert solution(\"1 2345 10\") == 2750685\nassert solution(\"101 154 2\") == 2750685\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('101 001 100100') == '10'\nassert solution('100100') == '1'\nassert solution('1001011101100') == '11'\nassert solution('10010101100100100') == '1'\nassert solution
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('101') == '2750685'\nassert solution('0') == '0'\nassert solution('1000') == '1000'\nassert solution('10') == '10'\nassert solution('4') == '4'\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 50 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\nassert solution(\"101 11444 2\") == \"637\"\nassert solution(\"1 1234 5678\") == \"9123\"\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1230, \"correct\"\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"10 50 2\", \"1 2345 10\", \"101 154 2\", \"101 154 3\", \"101 154 4\"]) == \"2750685\"\nassert solution(\n    [\"10 50 2\", \"1 2345 10\", \"101 154 2\", \"101 154 3\", \"101 154 4\"]) == \"2189\"\nassert solution(\n    [\"10 50 2\", \"1 2345 10\", \"101 154 2\", \"101 154 3\", \"101 154 4\"]) == \"2750685\"\nassert solution(\n    [\"10 50 2\", \"1 2345 10\", \"101 154 2\", \"101 154 3\", \"101 154 4\"]) == \"2189\"\nassert solution(\n    [\"10 50 2\", \"1 2345 10\", \"101 154 2\", \"101 154 3\", \"101 154 4\"]) == \"2750685\"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\n2 \u2264 a_1, a_2,..., a_{n} \u2264 10^9, k \u2264 n\n\n3 \u2264 k \u2264 n\n\n1 \u2264 a_i \u2264 10^9\n\nSample Input\n\n3 10 5\n4 5 3 13 4 10\n\nSample Output\n\nYES\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n1 2 3\n4 5 6 7\n8 9 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nYES\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nYES\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n1 2 3\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n1 2 3\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n1 2 3\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n1 2 3\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nYES\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nYES\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nNO\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264 100, n \u2264 1000, k \u2264 100, d \u2264 10^9\n\nSample Input\n\n3 2 5\n4 5 3 13 4 10\n\nSample Output\n\nYES\n\n\n\n-----Constraints-----\n\n1 \u2264 n, k, d \u2264"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 2\") == \"YES\"\nassert solution(\"1 3 5 3\") == \"YES\"\nassert solution(\"1 4 6 6 7\") == \"NO\"\nassert solution(\"1 5 4 3 10\") == \"NO\"\n\n'''\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\nIn case of error, print \"NO\" and exit.\n\nInput\n6 3 10\n7 2 7 7 4 2\n\nOutput\nYES\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \n        n = int(stdin[0])\n        k = int(stdin[1])\n        d = int(stdin[2])\n        \n        total_pics = []\n        for i in range(1, n+1):\n            total_pics.append(int(stdin[i]))\n        \n        if k >= 1 and k <= n:\n            if d == 0:\n                if sum(total_pics[:k]) <= d:\n                    total_pics = [0]+total_pics\n                    \n            else:\n                if sum(total_pics[:k]) <= d and d <= sum(total_pics[k:k+1]):\n                    total_pics = [0] + total_pics[k:k+1]\n                    \n        if k < n:\n            total_pics = total_pics[:k] + total_pics[k+1:]\n            \n        if d >= 0 and d < sum(total_pics):\n            total_pics = total_pics[:d]\n            \n        \n        return \"YES\" if len(total_pics) == 1 else \"NO\""
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"YES\"\nassert solution(\"3 5 3\") == \"YES\"\nassert solution(\"3 4\") == \"YES\"\nassert solution(\"4 5 6\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"NO\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"RRGBGRYYBGYYGGRYBYGRYRYB\") == \"0 0 0 0\"\nassert solution(\"RRYBGBYGRY\") == \"1 1 0 1\"\nassert solution(\"GBRYB\") == \"1 0 1 0\"\nassert solution(\"GRYBY\") == \"1 0 0 1\"\nassert solution(\"RYGBYGGGRYBGRY\") == \"0 0 0 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('RYBGRYBGR') == '0 1 0 0'\nassert solution('!RGYB') == '0 1 0 0'\nassert solution('!!!!YGRB') == '0 1 0 0'\nassert solution('!GB!RG!Y!') == '2 1 1 1'\n\n\n\"\"\"\n    \n    def solution(stdin):\n        n = stdin.split()\n        n = list(map(str, n))\n        n = n[1:]\n\n        t = int(n[0])\n        l = len(n)\n        k = 0\n        for i in range(0,t):\n            k += (1 << i)\n\n        res = 0\n        for i in range(0,l):\n            n[i] = int(n[i])\n\n            if n[i] == 0:\n                res += 1\n            elif n[i] > 0:\n                res += 2\n            else:\n                res -= 2\n        return res\n\n\"\"\""
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0 0 0 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"RRYBGRYBGRY\") == \"0 0 0 0\"\nassert solution(\"GRYYRBGRYYY\") == \"0 0 0 0\"\nassert solution(\"!YGRBGRYY\") == \"0 0 0 0\"\nassert solution(\"!!!!YGRBGRY\") == \"0 0 0 0\"\nassert solution(\"R!GYYBGRY\") == \"0 0 0 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"RRYBGGRYBGRRYBGRYBGRYBGRY\") == \"0 0 0 0\"\nassert solution(\"!RRYBGGRYBGRY\") == \"0 0 0 0\"\nassert solution(\"!!!!YGRB\") == \"0 1 0 0\"\nassert solution(\"RGRB\") == \"0 1 1 1\"\nassert solution(\"RGBY\") == \"1 1 1 1\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"RYBGRYBGR\") == \"0 0 0 0\"\nassert solution(\"!RGYB\") == \"0 0 0 0\"\nassert solution(\"!\") == \"0 0 0 0\"\nassert solution(\"!GRB\") == \"0 0 0 0\"\nassert solution(\"BGRY\") == \"0 0 0 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0 0 0 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Quick Hashing-----\n\ns = \"RRYYBGRYBGR\""
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0 0 0 0\"\nassert solution(input()) == \"0 1 0 0\"\nassert solution(input()) == \"1 1 1 1\"\nassert solution(input()) == \"1 1 1 1\"\nassert solution(input()) == \"1 1 1 1\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1.5\"\n\n\n\n---Optimized Logic---\n\npassages = {}\nN = int(input())\nfor i in range(N):\n    s, t = input().split()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(t)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"0\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in passages:\n    passages[i].sort()\nfor i in passages:\n    passages[i].append(i)\npassages.pop(\"\")\npassages.pop(\"\")\nN -= 1\nfor i in range(N):\n    s = input()\n    if s not in passages:\n        passages[s] = []\n    passages[s].append(s)\nfor i in"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1.5\"\n\"\"\""
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1.5'\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '1.5000000000'\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1.5'\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 1.5, \"Exception\""
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\"4\", \"6\", \"9\", \"10\", \"15\", \"19\", \"24\", \"25\", \"29\", \"31\"]) == \"2.5\"\nassert solution(\n    [\"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"]) == \"1.5\"\nassert solution(\n    [\"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"]) == \"1\"\nassert solution(\n    [\"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"]) == \"2.5\"\nassert solution(\n    [\"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"]) == \"1\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 3 3 3\") == \"1.5\"\nassert solution(\"2 3 2 3 2 2\") == \"1.5\"\nassert solution(\"3 3 3 3 3 3\") == \"0\"\nassert solution(\"3 3 3 3 3\") == \"1\"\nassert solution(\"4 4 4 4 4 4 4 4 4\") == \"1\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '1.5'\nassert solution(input()) == '1.5'\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1.5\"\n\nassert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3) == 3\n\nassert solution(12) == 0\n\nassert solution(7128) == 7128\n\nassert solution(0) == 0\n\nassert solution(0) == 0\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == \"0\"\nassert solution(113) == \"110\"\nassert solution(1000000000) == \"1000000000\"\nassert solution(5432359) == \"5432360\"\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"0\"\nassert solution(113) == \"110\"\nassert solution(1000000000) == \"1000000000\"\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 10\nassert solution(113) == 110\nassert solution(1000000000) == 1000000000"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '10'\nassert solution(stdin) == '1000000000'\nassert solution(stdin) == '5432359'\n\"\"\""
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == \"0\"\nassert solution(10) == \"10\"\nassert solution(113) == \"110\"\nassert solution(1234567891) == \"1234567891\"\nassert solution(123456789) == \"123456789\"\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\nassert solution(stdin) == '110'\nassert solution(stdin) == '111'\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 0\nassert solution(50000) == 10\nassert solution(99999) == 100\nassert solution(9999) == 0"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 0\nassert solution(5432359) == 5432360\nassert solution(5432359) == 0\nassert solution(10) == 0\nassert solution(5432359) == 10\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input().upper()) == \"0\"\nassert solution(input().replace(' ', '')) == \"0\"\nassert solution(input().replace(' ', '').replace('h', 'h').replace('e', 'e').replace('l', 'l').replace('w', 'w').replace('o', 'o').replace('s','s').replace('y', 'y').replace('m','m').replace('r', 'r')) == \"0\""
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('hello world') == 'hello world'\nassert solution('hello') == 'hello'\nassert solution('hello\\nworld') == 'hello\\nworld'\nassert solution('hello\\rworld') == 'hello\\nworld'\nassert solution('hello\\r\\nworld') == 'hello\\nworld'\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"helloworld\") == \"3\"\nassert solution(\"hasteababy\") == \"0\"\nassert solution(\"merrychristmas\") == \"0\"\nassert solution(\"christmasmerry\") == \"0\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"-1\"\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"h e a s\") == \"3\"\nassert solution(\"h e a s\") == \"0\"\nassert solution(\"h e a s\") == \"1\"\nassert solution(\"h e a s\") == \"2\"\nassert solution(\"h e a s\") == \"2\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"hello world\") == \"7 5 4 6 1 3 4\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('hello world') == '3 2 1'\nassert solution('h e l a w r c t a b y z c d') == '3 1 2'\nassert solution('mqxcb') == '0'\nassert solution('mqxcb') == '1'\nassert solution('mqxcb') == '1'\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"h an\") == \"me e up\"\nassert solution(\"me an\") == \"me e up\"\nassert solution(\"h an alp\") == \"alp e up\"\nassert solution(\"h an alp\") == \"alp e up\"\nassert solution(\"h an alp abc\") == \"abc e up\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('hastalavistababy') == '3'\nassert solution('merrychristmas') == '0'\nassert solution('helloworld') == '1'\nassert solution('babyswoop') == '0'\nassert solution('tuuuuu') == '0'\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"bob\", \"bob\") == \"bob\"\nassert solution(\"bob\", \"bobba\") == \"bobba\"\nassert solution(\"bob\", \"bobb\") == \"bob\"\nassert solution(\"harry\", \"harry\") == \"harry\"\nassert solution(\"harry\", \"har\") == \"har\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"a\"\nassert solution(\"bc\") == \"a\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aabc\") == \"b\", \"test failed\"\nassert solution(\"bba\") == \"c\", \"test failed\"\nassert solution(\"abcd\") == \"c\", \"test failed\"\nassert solution(\"aab\") == \"a\", \"test failed\"\nassert solution(\"aabcdefghijklmnopqrstuvwxyz\") == \"abc\", \"test failed\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"b\") == \"a\"\nassert solution(\"bc\") == \"b\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"def\") == \"a\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"alex riddle\") == \"alex\"\nassert solution(\"mr. riddle\") == \"mr\"\nassert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"tom riddle def\") == \"tomr\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"hap\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('harry potter') == 'hap'\nassert solution('tom riddle') == 'tomr'\nassert solution('Harry Potter') == 'harrypotter'\nassert solution('bob') == 'bob'\nassert solution('harrypotter') == 'harrypotter'\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"solution(stdin) should return a single string.\"\nassert solution(stdin), \"solution(stdin) should return a string.\"\nassert solution(stdin), \"solution(stdin) should return a string.\"\nassert solution(stdin), \"solution(stdin) should return a string.\"\nassert solution(stdin), \"solution(stdin) should return a string.\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"a\"\nassert solution(\"abbfjigtuvwxyz\") == \"ab\"\nassert solution(\"\") == \"\"\nassert solution(\"g\") == \"g\"\nassert solution(\"w\") == \"u\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"a\") == \"hap\", \"First name should be \\\"a\\\".\"\nassert solution(\"aa\") == \"hap\", \"Last name should be \\\"a\\\".\"\nassert solution(\"abc\") == \"hap\", \"First name should be \\\"abc\\\".\"\nassert solution(\"abcdef\") == \"hap\", \"First name should be \\\"abcdef\\\".\"\nassert solution(\"abcd\") == \"hap\", \"First name should be \\\"abcd\\\".\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()), \"incorrect input\""
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"|+- -+|\"\n\nassert solution(input()) == \"|+- -+\"\n\nassert solution(input()) == \"|+- -\"\n\nassert solution(input()) == \"|+- -\"\n\nassert solution(input()) == \"|+- +\""
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"\\\\[\\\\]\\\\]\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(1000000)\n\nclass Bracket:\n    def __init__(self, height, symbol, left, right):\n        self.height = height\n        self.symbol = symbol\n        self.left = left\n        self.right = right\n        self.symbol_width = 2\n        self.brackets = []\n        self.inverted_brackets = False\n        self.symbols = ['+', '-', '|']\n        self.out_of_place = False\n        self.inverted_brackets_height = 0\n\n    def merge_left(self):\n        if not self.out_of_place and not self.inverted_brackets_height:\n            self.brackets.append(self.left)\n            self.inverted_brackets_height = self.brackets[-1].height\n            self.brackets[-1].out_of_place = True\n            self.brackets[-1].inverted_brackets = True\n            self.brackets[-1].inverted_brackets_height = self.brackets[-1].height + 1\n\n    def merge_right(self):\n        if not self.out_of_place and not self.inverted_brackets_height:\n            self.brackets.append(self.right)\n            self.inverted_brackets_height = self.brackets[-1].height\n            self.brackets[-1].out_of_place = True\n            self.brackets[-1].inverted_brackets = True\n            self.brackets[-1].inverted_brackets_height = self.brackets[-1].height + 1\n\n    def add_left(self):\n        if not self.out_of_place and not self.inverted_brackets_height:\n            self.brackets.append(self.left)\n            self.inverted_brackets_height = self.brackets[-1].height\n            self.brackets[-1].out_of_place = True\n            self.brackets[-1].inverted_brackets = True\n            self.brackets[-1].inverted_brackets_height = self.brackets[-1].height + 1\n\n    def add_right(self):\n        if not self.out_of_place and not self.inverted_brackets_height:\n            self.brackets.append(self.right)\n            self.inverted_brackets_height = self.brackets[-1].height\n            self.brackets[-1].out_of_place = True\n            self.brackets[-1].inverted_brackets = True\n            self.brackets[-1].inverted_brackets_height = self.brackets[-1].height + 1\n\n    def get_height(self):\n        return self.brackets[-1].height\n\n    def get_symbol(self):\n        return self.brackets[-1].symbol\n\n    def get_symbol_width(self):\n        return self.brackets[-1].symbol_width\n\n    def get_left_height(self):\n        return self.brackets[-1].left.height\n\n    def get_brackets(self):\n        return self.brackets\n\n    def get_inverted_brackets(self):\n        return self.brackets[-1].inverted_brackets\n\n    def get_left_bracket(self):\n        return self.brackets[-1].left\n\n    def get_right_bracket(self):\n        return self.brackets[-1].right\n\n    def get_brackets_height(self):\n        return self.brackets[-1].height\n\n    def get_symbol_width(self):\n        return self.brackets[-1].symbol_width\n\n    def get_symbol_height(self):\n        return self.brackets[-1].symbol_height\n\n    def get_brackets_width(self):\n        return len(self.brackets)\n\n    def is_bracket_out_of_place(self):\n        return self.brackets[-1].out_of_place\n\n    def is_bracket_inverted_brackets(self):\n        return self.brackets[-1].inverted_brackets\n\n    def is_bracket_inverted_brackets_height(self):\n        return self.brackets[-1].inverted_brackets_height\n\n    def is_brackets_height_increasing(self):\n        return self.brackets[-1].height > self.brackets[-1].inverted_brackets_height\n\n    def is_brackets_height_increasing_with_height(self, n):\n        return self.brackets[-1].height > n and self.brackets[-1].is_brackets_height_increasing_with_height(n)\n\n    def get_brackets_height_with_height(self, n):\n        return self.brackets[-1].height > n\n\n    def has_some_brackets_with_height(self, n):\n        return self.brackets[-1].has_some_brackets_with_height(n)\n\n    def get_height_with_height(self, n):\n        return self.brackets[-1].get_height_with_height(n)\n\n    def get_symbol_width_with_height(self, n):\n        return self.brackets[-1].get_symbol_width_with_height(n)\n\n    def get_symbol_height_with_height(self, n):\n        return self.brackets[-"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == inp, \"The example failed\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '[]'\nassert solution(stdin) == '[[]]'\nassert solution(stdin) == '[[]|]'\nassert solution(stdin) == '[[[]]]'\nassert solution(stdin) == '[[]][]'\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \" +- -+ \"\n\nassert solution(stdin) == \" +- -+\"\n\nassert solution(stdin) == \" +- -+\"\n\nassert solution(stdin) == \" +- -+\"\n\nassert solution(stdin) == \" +- -+\""
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-+\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"[][]\"]) == \"1+1+1+1+1+1+1+1+1\"\nassert solution([\"[ ]\"]) == \"1+1+1+1+1+1+1\"\nassert solution([\"[ ]][]\"]) == \"1+1+1+1+1+1+1+1\"\nassert solution([\"[][][]\"]) == \"1+1+1+1+1+1+1+1\"\nassert solution([\"[][]]\"]) == \"1+1+1+1+1+1+1+1\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"[[]]\") == \"\", f\"The answer doesn't fit in the sample input\"\n\n\n---Dev Notes---\n\n- Python has a built-in function list.append() which is the recommended way to insert one or more items into a list. \n  - In this example, '+' is inserted into the list by using append() function.\n- The loop iterator is used to iterate over the list, to insert the items from the list as-is. \n  - It is also used to traverse the list, so it is done by a for loop.\n- While using the loop iterator, it should not be used for any other use. \n- In this function, a tuple with a name and a list with its elements is not a valid use.\n- To avoid such use, it is recommended to use the tuple when the list is used as a variable or tuple.\n- There is no extra space by using a space character.\n- To avoid the space being used, the interpreter performs the following steps:\n  - The indentation is added by using indent().\n  - The new line is added by using newline().\n  - The line break is added by using linebreak().\n  - The escape sequence is joined by using escape().\n  - The keyword with the given name is added by using the keyword =.\n  - The brackets are split by using split().\n  - The list is closed by using the list.close().\n  - The if statement is given a name, which is used to compare if the answer is not correct.\n  - The braces of the if statement are replaced by their respective brackets, which is thus a valid use.\n- The result of the example is equal to the result of the following statement:\n  +\n  -\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n+\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"+-     -+\"\nassert solution(stdin) == \"|+- -+|\"\nassert solution(stdin) == \"|+- -+|\"\nassert solution(stdin) == \"|+- -+\"\nassert solution(stdin) == \"|||\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"=\"\nassert solution(stdin) == \">=\"\nassert solution(stdin) == \"<=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \">\"\n\nassert solution(stdin) == \"<\"\n\nassert solution(stdin) == \"=\""
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '>'\nassert solution(input) == '<'\nassert solution(input) == '='\n\n'''"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"100001000\") == \">\", \"Number 2 does not have the same properties as the first one.\"\nassert solution(\"1000010000\") == \"=\", \"Number 2 does not have the same properties as the first one.\"\nassert solution(\"10000100001\") == \">\", \"Number 2 does not have the same properties as the first one.\"\nassert solution(\"100001000001\") == \"=\", \"Number 2 does not have the same properties as the first one.\"\nassert solution(\"100001001001\") == \">\", \"Number 2 does not have the same properties as the first one.\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"=\"\n\n\n-----Test-----\n\nimport sys; input= lambda : sys.stdin.readline().rstrip()\nfrom fractions import Fraction\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \">=\"\nassert solution(\"1\") == \"=<\"\nassert solution(\"1\") == \"==\"\nassert solution(\"2\") == \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \">=\"\n\nassert solution(stdin) == \"<\"\n\nassert solution(stdin) == \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \">\"\n\nassert solution(input()) == \"<\"\n\nassert solution(input()) == \"=\"\n\nassert solution(input()) == \">=\"\n\n\"\"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"=\""
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0') == '0'\nassert solution('1') == '1'\nassert solution('110') == '>'\nassert solution('101') == '<'\nassert solution('110') == '='\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 106\n1 \u2264 m \u2264 6\n\n1 \u2264 stdin.length <= 106\nstdin contains only English letters and the following:\npurple, green, blue, orange, red, yellow\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n3\npurple\npurple\npurple\npurple\n\nOutput\n4\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n0\npurple\npurple\npurple\npurple\n\nOutput\n0\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n6\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n1\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n3\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n2\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n4\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n5\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n0\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n6\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n1\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n\n\n[input] string stdin\n\n\n[output] string\n\nExample\nInput\n2\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\npurple\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\"purple\",\"yellow\",\"orange\",\"red\",\""
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"Power Time Space\"\nassert solution(\"0\") == \"Time Mind\"\nassert solution(\"1\") == \"Mind soul\"\nassert solution(\"5\") == \"Red Orange Yellow Blue\"\nassert solution(\"6\") == \"Space Purple Time Yellow\"\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('0') == 'Red'\nassert solution('1') == 'Purple'\nassert solution('2') == 'Yellow'\nassert solution('3') == 'Orange'\nassert solution('4') == 'Red'\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n\n\nassert solution(input) == \"6\"\n\nassert solution(input) == \"5\"\n\nassert solution(input) == \"6\"\n\nassert solution(input) == \"5\""
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('') == ''\nassert solution('Hello') == 'Hello'\nassert solution('Hello World!') == 'Hello World!'\nassert solution('Hello World! Mr.') == 'Hello World!'\nassert solution('Hello World! Mr. Ella') == 'Hello World!'\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '6'\nassert solution(stdin) == '12'\nassert solution(stdin) == '1'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\"\nimport math\n\nN = int(input())\n\nnum_of_gems = int(math.log2(N)) + 1\ngems = []\n\nfor _ in range(N):\n    gems.append(input())\n\ngems.sort(key=lambda x: len(x))\nprint(len(set(gems)) - 1)\n\nfor gem in gems:\n    for i in range(num_of_gems - len(gem)):\n        gem += '0'\n    print(gem)"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(in_string) == \"2\"\n\nassert solution(in_string) == \"6\"\n\nassert solution(in_string) == \"12\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 2\") == \"Final!\"\nassert solution(\"8 7 5\") == \"Final!\"\nassert solution(\"8 7 6\") == \"Final!\"\n\n\"\"\""
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"Final!\"\nassert solution(\"1 7 5\") == \"Final!\"\nassert solution(\"8 2 6\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\nassert solution(\"8 7 6\") == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Final!\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= a, b <= 10^9\n\n\n-----Time Limit: 1 seconds-----\n\nExample 1:\n\nInput\n6 3\n\nOutput\nFinal!\nExplanation\n\nArkady\u2019s Final ids are 2, 6, and 9. The ids of the teams a and b can meet in the Final are 1, 2, and 3.\n\n\n-----Time Limit: 1 seconds-----\n\nExample 2:\n\nInput\n6 2\n\nOutput\n2\n\nExample 3:\n\nInput\n5 1\n\nOutput\n5\n\n-----Time Limit: 1 seconds-----\n\n'''"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 1 2\") == \"Final!\"\nassert solution(\"8 2 6\") == 2\nassert solution(\"8 7 5\") == 2\nassert solution(\"8\") == 1\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 256\n\n1 \u2264 a, b \u2264 n\n\n\"\"\""
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Final!\"\nassert solution(\"5 1 3 4\") == \"Final!\"\nassert solution(\"8 1 5\") == \"Final!\"\nassert solution(\"8 7 5\") == \"Final!\"\nassert solution(\"8 7 6\") == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Final!\"\nassert solution(stdin, 1, 2) == 1\nassert solution(stdin, 8, 5) == 2\nassert solution(stdin, 8, 6) == 2\nassert solution(stdin, 7, 5) == 1\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"6 8 1\") == \"Final!\"\nassert solution(\"8 7 5\") == \"2\"\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1 4\", \"1 2\", \"3 3\", \"2 2\", \"4 0\"]) == \"4\"\nassert solution([\"1 4\", \"1 0\", \"3 3\", \"2 2\", \"4 0\"]) == \"0\"\nassert solution([\"1 4\", \"1 3\", \"3 2\", \"2 2\", \"4 0\"]) == \"2\"\nassert solution([\"1 1\", \"3 3\", \"2 2\", \"4 0\"]) == \"0\"\nassert solution([\"1 3\", \"3 2\", \"2 2\", \"4 0\"]) == \"0\"\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '1'\n\n-----Level 3-----\n\nInput\n2\n2 3 2\n\nOutput\n0\n\nInput\n2\n2 3 2\n\nOutput\n1\n\nInput\n3\n2 3 2\n\nOutput\n0\n\nInput\n5\n2 3 2 1\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0 0\n0 1 0"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10') == 1\nassert solution('4 3 1') == 2\nassert solution('3 3 0 1') == 1\nassert solution('2 2 0 1') == 1\nassert solution('1 1 1') == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"0\", \"0\", \"0\", \"0\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == 2\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"]) == 1\nassert solution([\"0\", \"1\", \"0\", \"1\", \"1\", \"0\", \"0\", \"1\", \"1\", \"1\"]) == 2\nassert solution([\"0\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\"]) == 3\nassert solution([\"0\", \"0\", \"0\", \"0\", \"1\", \"0\", \"0\", \"1\", \"1\", \"0\"]) == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        stdin: str\n    ) == \"4\"\n\nassert solution(\n        stdin: str\n    ) == \"3\"\n\nassert solution(\n        stdin: str\n    ) == \"2\"\n\nassert solution(\n        stdin: str\n    ) == \"1\"\n\nassert solution(\n        stdin: str\n    ) == \"1\""
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, [\"4\", \"3\", \"2\", \"1\"]) == \"2\"\nassert solution(4, [\"4\", \"3\", \"2\", \"1\"]) == \"1\"\nassert solution(3, [\"4\", \"3\", \"2\"]) == \"1\"\nassert solution(3, [\"4\", \"3\", \"2\"]) == \"2\"\nassert solution(3, [\"4\", \"3\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"1\"\n\nExplanation\n\nGiven p, b = 4 3 2 1, we can change the permutation to 2 3 1 and so we get a sequence of 1 2 1.\n\nSimilarly, given p = 3, b = 1, we can reverse the skewer, b = 1, and then the permutation to 3 1.\n\nThe smallest total elements in the given sequence p and b is 2.\n\nFinally, the smallest total elements in the given sequence p and b are 1.\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1, 'not valid'\n\n-----Examples-----\nInput\n5\n3 1 5 3 2\n0 1 0 0\n\nOutput\n1\n\nInput\n5\n1 3 5 3 2 0\n0 1 0 0\n\nOutput\n2\n\nInput\n10\n
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100\"\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 10^3\nstdin[i] < v_1 < v_2\nt < 100\n\n------Time Limit (S, Best case: O(t * d) | Average case: O(n log(t * d)) -----\nTime Limit\nO(n log(t * d))\n\nSpace Limit\nO(d * n)\n\nExample 1:\n\nInput\n1 3\n4 2\n4 0\n\nOutput\n25\nExample 2:\n\nInput\n2 2\n2 1\n2 0\n\nOutput\n1\nExample 3:\n\nInput\n1 1\n2 2\n2 2\n\nOutput\n3\n\n\n-----Personal note-----\n\nThis problem is not a category of real problems, but a task of this problem is a category of real problems. You are given a sequence of integers v_1, v_2 and t, that is, the values of v_1 and v_2 in seconds, respectively. Your task is to find the maximum possible length of the path segment in meters.\n\nAfter performing the task, you should return the maximum possible length of the path segment in meters.\n\nConstraints\n1 <= v_1, v_2 <= 10^9\n0 <= t <= 100\n\n------Time Limit (S, Best case: O(t * d) | Average case: O(n log(t * d)) -----\nTime Limit\nO(n log(t * d))\n\nSpace Limit\nO(d * n)\n\nExample 1:\n\nInput\n1 1 1\n0 0 0\n0 0 0\n0 0 1\n\nOutput\n1\n\nExample 2:\n\nInput\n2 1\n2 1\n0 1\n0 0\n\nOutput\n2\n\nExplanation\nWhen you are traveling to the end of the second segment, you need to travel 1 minutes to get to the end of the first segment.\nIn this case, you can travel to any second segment.\nSince the path is shorter than the first segment, you will have to travel 1 minute. You can also travel to any second segment if you travel to the end of the first segment before the second segment.\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == 26\nassert solution(\"10 10\") == 100\nassert solution(\"10 0\") == 100\nassert solution(\"10 10\") == 100"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 10 0\") == \"100\"\nassert solution(\"10 0 1\") == \"10\"\nassert solution(\"0 1 0\") == \"0\"\nassert solution(\"0 1 2\") == \"0\"\nassert solution(\"0 1 4\") == \"0\"\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 6\") == 26\nassert solution(\"10 10\") == 100\nassert solution(\"10 0\") == 100\nassert solution(\"10 10 10\") == 100\nassert solution(\"10 0 0\") == 100\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '26'\n\nassert solution(stdin) == '100'\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '100'\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"100\"\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 26, \"The path must be of length 26\"\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"10\"\nassert solution(\"1 4 2\") == \"1\"\nassert solution(\"10 4\") == \"1\"\nassert solution(\"2 6\") == \"10\""
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 3') == '10'\nassert solution('3 2') == '3'\nassert solution('2 4 2') == '2'\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"10\"\nassert solution(\"1 4 2\") == \"10\"\nassert solution(\"1 4 1\") == \"10\"\nassert solution(\"1 3 2\") == \"10\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 2') == \"10\"\nassert solution('1 2') == \"2\"\nassert solution('4 2') == \"5\"\nassert solution('1 3 2') == \"10\"\nassert solution('1 3') == \"9\"\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == 10\nassert solution(\"1 4 2\") == -1\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"10\"\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3 2\\n1 4 2\\n10 4\\n2 6\\n\"\n) == \"10\"\nassert solution(\n    \"3 3\\n1 2 3\\n10 7\\n2 4\\n3 6\\n\"\n) == \"3\"\nassert solution(\n    \"3 2\\n1 3\\n10 4\\n2 6\\n3 6\\n\"\n) == \"3\"\nassert solution(\n    \"3 2\\n1 3\\n10 4\\n2 6\\n3 5\\n\"\n) == \"3\"\nassert solution(\n    \"3 2\\n1 3\\n10 4\\n2 6\\n3 5\\n\"\n) == \"3\"\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 3 5 2') == '1 2'\nassert solution('2 4 6 1') == '1 2'\nassert solution('2 4 7 2') == '1 2'\nassert solution('2 5 2 1') == '1 2'\nassert solution('2 4 6 2') == '1 2'\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\"\"\"\nimport math"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3628800\"\nassert solution(stdin) == \"11772\""
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2 4) == 2\nassert solution(0 10) == 0\nassert solution(107 109) == 2\nassert solution(107 109) == 0\nassert solution(107 109) == 2\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3628800'\nassert solution(stdin) == '11772'\nassert solution(stdin) == '3628800'\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 1,000\n1 \u2264 a,b \u2264 10^18\n\nTime Limit: 1 seconds\n\nMemory Limit: 256 MB\n\nExample\nExample 1:\n\nInput\n3\n\nOutput\n1\n\nExplanation\nThe solution is 1.\n\nExample 2:\n\nInput\n2\n\nOutput\n0\n\nExplanation\nThe solution is 0.\n\"\"\"\n\nclass Solution:\n    \"\"\"\n    Runtime: 24 ms, faster than 70.36% of Python3 online submissions for Number of 1s.\n    Memory Usage: 14.2 MB, less than 69.84% of Python3 online submissions for Number of 1s.\n    \"\"\"\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        Runtime: 44 ms, faster than 7.12% of Python3 online submissions for Number of 1s.\n        Memory Usage: 14.2 MB, less than 67.37% of Python3 online submissions for Number of 1s.\n        \"\"\"\n        a,b=map(int,stdin.split())\n        return str(a*b)"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '0'\nassert solution(input()) == '2'\nassert solution(input()) == '3628800'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"12\"\nassert solution(\"0 10\") == \"3628800\"\nassert solution(\"107 109\") == \"2\"\nassert solution(\"107 109\") == \"2\"\nassert solution(\"107 109\") == \"2\"\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3628800\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '12'\nassert solution(stdin) == '3628800'\nassert solution(stdin) == '11772'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '2'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\" or solution(stdin) == \"4\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 1 7\"\n), 2\n\nassert solution(\n    \"5 4\"\n), 4\n\nassert solution(\n    \"11 100 101\"\n), 4\nassert solution(\n    \"11 1\"\n), -1\n\nassert solution(\n    \"11 100\"\n), -1"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2, \"1111101\", \"00011010100010001011101011111111111101110110111110000111010101011011010011100110110111111101101111111010111001110111011010001010111010111011010001010101110110101001010010101001010101011101110110101000101011011101010001101010001010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1' or solution(stdin) == '2', 'Your code does not pass'\n\"\"\""
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10010101\") == 2\nassert solution(\"1001\") == -1\nassert solution(\"100111001001\") == 3\nassert solution(\"11100101\") == 4\nassert solution(\"100111001110\") == 5\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10010101',2) == '3'\nassert solution('11100101',4) == '3'\nassert solution('10010101',4) == '3'\nassert solution('10010101',2) == '0'\nassert solution('10010101',1) == '0'\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '1'\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^3\n\"\"\""
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\n------Coding Rules-----\n\nAll the input is valid:\n1 \u2264 n \u2264 1000\n\nAll the output is valid:\n1 \u2264 m \u2264 10^3\n\nSample cases:\n\nInput\n\n3\n\nOutput\n\n2\n\nSample cases:\n\nInput\n\n4\n\nOutput\n\n2\n\n\n------Constraints------\n\n0 \u2264 n \u2264 1000\n\n-10^3 <= m < 10^3\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n------Memory Complexity------\n\nO(1)\n\nExample:\n\nInput\n\n5\n\nOutput\n\n2\n\nExplanation:\n\nYou have n = 5 and m = 2. You have to return m because 2 = 4 = 5.\n\n----Constraints----\n\n0 \u2264 n \u2264 1000\n0 \u2264 m \u2264 10^3\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse a set to store all prime number of a given number\n\nCreate a set using set() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nuse set() to store all prime number of a given number\n\nCreate a set using set() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse map() to store all prime number of a given number\n\nCreate a set using map() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse map() to store all prime number of a given number\n\nCreate a set using map() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse map() to store all prime number of a given number\n\nCreate a set using map() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set using reduce() to store only prime number of a given number\n\nFind number of prime number that exists in set\n\ncount the prime numbers in set\n\nOutput\n\nn-m-1\n\n------Time Complexity------\n\nO(log(n))\n\nO(1)\n\n-----Submissions-----\n\nApproach:\nUse reduce() to store all prime number of a given number\n\nCreate a set"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 2\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 2\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\n\n)\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 0\nassert solution(4) == 1\nassert solution(5) == 2\nassert solution(1) == 1\nassert solution(2) == 2\n\n\n-----Time complexity-----\n\nThe input to the program is given as follows.\n\n-----Input-----\n\nThe only number from the input is n (1 \u2264 n \u2264 1000). \n\n\n-----Output-----\n\nOutput such m that n\u00b7m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 \u2264 m \u2264 10^3. It is guaranteed the the answer exists.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n1\nInput\n4\n\nOutput\n2\n\n\n-----Note-----\n\nA prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\nFor the first sample testcase, 3\u00b71 + 1 = 4. We can output 1.\n\nIn the second sample testcase, 4\u00b71 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4\u00b72 + 1 = 9, which is not a prime number.\n\nIn the third sample testcase, 5\u00b71 + 1 = 10. We cannot output 1 because 10 is prime. However, m = 3 is okay since 5\u00b73 + 1 = 15.\n\n\n-----Time complexity-----\n\nThe input to the program is given as follows.\n\n-----Input-----\n\nThe only number from the input is n (1 \u2264 n \u2264 1000). \n\n\n-----Output-----\n\nOutput such m that n\u00b7m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 \u2264 m \u2264 10^3. It is guaranteed the the answer exists.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n1\nInput\n4\n\nOutput\n2\n\n\n-----Note-----\n\nA prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\nFor the first sample testcase, 3\u00b71 + 1 = 4. We can output 1.\n\nIn the second sample testcase, 4\u00b71 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4\u00b72 + 1 = 9, which is not a prime number.\n\nIn the third sample testcase, 5\u00b71 + 1 = 10. We cannot output 1 because 10 is prime. However, m = 3 is okay since 5\u00b73 + 1 = 15.\n\n\n-----Time complexity-----\n\nThe input to the program is given as follows.\n\n-----Input-----\n\nThe only number from the input is n (1 \u2264 n \u2264 1000). \n\n\n-----Output-----\n\nOutput such m that n\u00b7m + 1 is not a prime number. Your answer will be considered correct if you output any suitable m such that 1 \u2264 m \u2264 10^3. It is guaranteed the the answer exists.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n1\nInput\n4\n\nOutput\n2\n\n\n-----Note-----\n\nA prime number (or a prime) is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\nFor the first sample testcase, 3\u00b71 + 1 = 4. We can output 1.\n\nIn the second sample testcase, 4\u00b71 + 1 = 5. We cannot output 1 because 5 is prime. However, m = 2 is okay since 4\u00b72 + 1 = 9, which is not a prime number.\n\nIn the third sample testcase, 5\u00b71 + 1 = 10. We cannot output 1 because 10 is prime. However, m = 3 is okay since 5\u00b73 + 1 = 15.\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n\n\n-----Note-----\n\n3 is a prime number, and n = 4.\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^3\n\n\"\"\""
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 'YES'\nassert solution(5) == 'NO'\nassert solution(13) == 'YES'\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"YES\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 10^9\n\n\n-----Examples-----\nInput\n\n1359257\n\nOutput\n\nYES\n\nExplanation\n\nKolya spent all of his initial n game-coins buying only houses, cars and computers.\n\"\"\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 'YES'\nassert solution(2) == 'NO'"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"NO\"\nassert solution(\"123\") == \"NO\"\nassert solution(\"234\") == \"NO\"\nassert solution(\"25\") == \"YES\""
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n\n-----Example 1-----\nInput\n\n3\n1\n1\n1\n\nOutput\n\nNO\nInput\n\n1\n1\n\nOutput\n\nNO\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n\"\"\""
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 1 0\") == \"YES\"\nassert solution(\"2 1 3\") == \"NO\"\n\nassert solution(\"1 1 0\") == \"Yes\"\nassert solution(\"1 1 3\") == \"Yes\"\n\nassert solution(\"2 2 0\") == \"Yes\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"Yes\"\nassert solution(inp) == \"No\"\n\n-----Others-----\n\nImplementation\n1. Iterate over the input, get the n lines. The algorithm is equal to the classic problem, but in this case, we need to scan a range from x_1 to x_2 and calculate the intersection point. \n\n2. The result of this step is the intersection point, where x' = k_{i} * x' + b_{i} (where i=1,..., n). In other words, if point (x', y') belongs to the line number i, then (x', y') = x', y' * k_{i} + b_{i} (where i=1,..., n). Thus, if point (x', y') belongs to the line number j, then x' = x' * k_{j} + b_{j}, that is, point (x', y') belongs to the line number j and x' = x' * k_{j} + b_{j}.\n\n3. Assume that x' = k_{i} * x' + b_{i} = 0, that is, if point (x', y') belongs to the line number i, then x' = x' * k_{i} + b_{i} (where i=1,..., n). For a point (x, y) satisfying these conditions, there is a point (x', y') which lies inside the strip.\n\n4. If x' = k_{i} * x' + b_{i} = 0, then there is a point (x', y') which is inside the strip, so the intersection point is the point (x', y') which lies inside the strip. In other words, the intersection point is the point (x', y') which lies within the strip.\n\n5. In the second line of the task, you just get an array of all intersections. The intersection points are the intersection points of all the lines, and in other words, the intersection points are all the intersection points of the lines, such that the intersection point is on the strip between the i-th line and the j-th line.\n\n6. The intersection points are then the intersection points of all the lines, such that the intersection point is on the strip between the i-th line and the j-th line.\n\n7. In the third line of the task, there is no intersection point, so the intersection point is a point that lies on the strip. So you should print \"Yes\" if the intersection point is a point that lies on the strip. Otherwise, you should print \"No\" and print the intersection point.\n\n-----Tests-----\n\ntest_case_1 = [\n    [\n        [\"1\", \"1\", \"1\"],\n        [\"1\", \"0\"],\n        [\"1\", \"0\"]\n    ],\n    [\n        [\"1\", \"0\"],\n        [\"1\", \"0\"],\n        [\"0\", \"1\"]\n    ]\n]\n\ntest_case_2 = [\n    [\n        [\"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\"],\n        [\"1\", \"0\", \"0\"]\n    ],\n    [\n        [\"1\", \"0\", \"0\"],\n        [\"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\"],\n        [\"0\", \"0\", \"1\"]\n    ]\n]\n\ntest_case_3 = [\n    [\n        [\"1\", \"1\", \"0\", \"0\", \"0\", \"1\", \"1\", \"1\"],\n        [\"1\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\", \"1\"],\n        [\"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"0\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"0\", \"1\"]\n    ],\n    [\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"1\", \"1\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]\n    ]\n]\n\ntest_case_4 = [\n    [\n        [\"1\", \"1\", \"0\", \"0\", \"0\", \"1\", \"1\", \"1\"],\n        [\"1\", \"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"1\"],\n        [\"1\", \"1\", \"0\", \"0\", \"0\", \"0\", \"0\", \"1\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"1\", \"0\", \"1\", \"0\", \"1\", \"1\"],\n        [\"0\", \"0\", \"1\", \"0\", \"1\", \"1\", \"1\", \"1\"]\n    ],\n    [\n        [\"0\", \"0\", \"0\", \"0\", \"0\","
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 4 0 1 2 0 0 1 0\") == \"Yes\"\nassert solution(\"2 3 2 0 0 1 0 0\") == \"YES\"\nassert solution(\"3 3 0 0 1 0 0 1 0\") == \"YES\"\nassert solution(\"1 1 0 0 0 1 0 1 0\") == \"NO\""
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\n\n-----Tests-----\ntests = {\n    \"tests\": [\n        [\n            [\n                [1, 2, 1, 2, 2],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2],\n                [0, 0, 0, 0, 0]\n            ],\n            [\n                [0, 2, 0, 2, 1],\n                [2, 2, 2, 2, 2],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2]\n            ],\n            [\n                [1, 2, 2, 2, 1],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2]\n            ],\n            [\n                [0, 0, 0, 2, 0],\n                [0, 0, 0, 2, 1],\n                [0, 0, 0, 2, 2],\n                [0, 0, 0, 2, 0]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [1, 2, 2, 2, 1],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2]\n            ],\n            [\n                [1, 2, 2, 0, 2],\n                [2, 0, 2, 2, 0],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2]\n            ],\n            [\n                [0, 2, 0, 2, 0],\n                [0, 2, 0, 2, 2],\n                [0, 2, 0, 2, 2],\n                [0, 2, 0, 2, 2]\n            ],\n            [\n                [0, 0, 2, 2, 0],\n                [0, 0, 2, 2, 2],\n                [0, 0, 2, 2, 2],\n                [0, 0, 2, 2, 2]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [1, 2, 2, 2, 1],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ]\n        ],\n        [\n            [\n                [1, 2, 1, 2, 2],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2],\n                [0, 0, 0, 0, 0]\n            ],\n            [\n                [0, 2, 0, 2, 1],\n                [2, 2, 2, 2, 2],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2]\n            ],\n            [\n                [0, 2, 0, 2, 2],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2]\n            ],\n            [\n                [0, 2, 0, 2, 1],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2]\n            ],\n            [\n                [1, 2, 2, 2, 1],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2],\n                [2, 0, 2, 0, 2]\n            ],\n            [\n                [0, 0, 0, 2, 0],\n                [0, 0, 0, 2, 1],\n                [0, 0, 0, 2, 2],\n                [0, 0, 0, 2, 0]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [1, 2, 2, 2, 1],\n                [2, 2, 2, 2, 2],\n                [2, 2, 2, 2, 2]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ],\n            [\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0],\n                [0, 0, 0, 0, 0]\n            ],\n            "
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"No\"\nassert solution(\"1 0 1 0\") == \"No\"\nassert solution(\"2 0 2 0\") == \"No\"\nassert solution(\"1 1 1 1\") == \"Yes\"\nassert solution(\"1 2 2 0\") == \"No\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"No\"\n\"\"\""
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"YES\"\n\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == \"5\"\nassert solution(2) == \"5\"\nassert solution(3) == \"5\"\nassert solution(7) == \"5\"\nassert solution(8) == \"5\"\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n-----Constraints-----\n1 <= stdin.length <= 1000\n\n\n\n------Test Cases-----\ntest.length = 100\ntest.lines = [\n    \"5\",\n    \"7\",\n    \"11\",\n    \"1\",\n    \"8\"\n]\nstdin = \"5\"\nOutput\n4\n\ntest.lines = [\n    \"5\",\n    \"7\",\n    \"11\",\n    \"1\",\n    \"8\"\n]\nstdin = \"9\"\nOutput\n5\n\ntest.lines = [\n    \"8\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\"\n]\nstdin = \"5\"\nOutput\n5\n\ntest.lines = [\n    \"3\",\n    \"4\",\n    \"2\",\n    \"1\",\n    \"1\"\n]\nstdin = \"9\"\nOutput\n5\n\n\ntest.lines = [\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\"\n]\nstdin = \"2\"\nOutput\n1\n\ntest.lines = [\n    \"2\",\n    \"3\",\n    \"2\",\n    \"2\",\n    \"2\"\n]\nstdin = \"3\"\nOutput\n2\n\ntest.lines = [\n    \"7\",\n    \"3\",\n    \"2\",\n    \"1\",\n    \"1\"\n]\nstdin = \"9\"\nOutput\n5\n\ntest.lines = [\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\",\n    \"1\"\n]\nstdin = \"3\"\nOutput\n5\n\ntest.lines = [\n    \"3\",\n    \"2\",\n    \"1\",\n    \"1\",\n    \"1\"\n]\nstdin = \"1\"\nOutput\n1\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\n\n\n-----Constraints-----\n1 <= n <= 10^4\n\n\n\n-----Solution-----\n5\n5\n\nInput\n4\n\nOutput\n5\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == 1, '1'\nassert solution('2') == 2, '2'\nassert solution('3') == 4, '3'\nassert solution('5') == 5, '5'\nassert solution('9') == 5, '9'\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 4\n\nSample Input\n\n8\n\nSample Output\n\nOutput one integer\n\nExplanation\n\nThe weights are equally splitted into five groups:\n\nWeight 1: [$\\textbf 7$] \nWeight 2: [$\\textbf 3$, $\\textbf 3$, 1] \nWeight 3: [$\\textbf 2$, $\\textbf 2$, $\\textbf 2$, 1] \nWeight 7: [$\\textbf 1$, $\\textbf 1$, $\\textbf 1$, $\\textbf 1$]\n\nInput\n\n8\n\nOutput\n\nOutput one integer\n\nExplanation\n\nThe weights are split equally into five groups:\n\nWeight 1: [$\\textbf 7$] \nWeight 2: [$\\textbf 3$, $\\textbf 3$, 1] \nWeight 3: [$\\textbf 2$, $\\textbf 2$, $\\textbf 2$] \nWeight 7: [$\\textbf 1$, $\\textbf 1$]\n\nInput\n\n8\n\nOutput\n\nOutput one integer\n\nExplanation\n\nThere is no split in $n$.\n\nInput\n\n8\n\nOutput\n\nOutput one integer\n\nExplanation\n\nThere is a split of $n$ in $8$: $[4, 4]$.\n\nInput\n\n8\n\nOutput\n\nOutput one integer\n\nExplanation\n\nThere is no split in $8$, but the weight of the split $[1, 1, 1, 1, 1, 1]$ is $5$, so it only has 5 elements.\n\nInput\n\n8\n\nOutput\n\nOutput one integer\n\nExplanation\n\nThere is a split of $8$ in $8$: $[1, 7]$.\n\nInput\n\n8\n\nOutput\n\nOutput one integer\n\nExplanation\n\nThere is a split of $8$ in $8$: $[5, 4]$.\n\nInput\n\n8\n\nOutput\n\nOutput one integer\n\nExplanation\n\nThere is no split in $8$, so it has only 5 elements."
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5'\n\"\"\"\nimport math\n\nclass Solution:\n    def numSplits(self, n: int) -> int:\n        if n < 3:\n            return 0\n\n        i = 3\n        s = 0\n        k = 0\n        for j in range(1, n // 2 + 1):\n            s += j\n            k = k + j\n\n        if (n - k) % 2 == 0:\n            return int(s / 2)\n        else:\n            return int(s / 3)"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"10\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"8\") == \"2\"\nassert solution(\"8\") == \"3\"\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^4\n\n0 \u2264 stdin[i] \u2264 10^9\n\nConstraints declaration\n\n1 \u2264 stdin[i] \u2264 10^9\n\n\n-----User input-----\n\nThe next line contains one integer $n$ ($1 \\leq n \\leq 10^9$).\n\n\n-----Output-----\n\nOutput one integer\u00a0\u2014 the answer to the problem.\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3 4\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"1 2\"\n\n\n\"\"\"\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stmt) == '2 4'\nassert solution(stmt) == '4 2'\nassert solution(stmt) == '2 4'\nassert solution(stmt) == '1 3'\nassert solution(stmt) == '1 3'\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"1 3\"\nassert solution(\"1 3\") == \"1 3\"\nassert solution(\"2 3 4 2 1 3\") == \"1 3\"\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 5\"\n) == \"1 3\"\nassert solution(\n    \"1 6\"\n) == \"1 4\"\nassert solution(\n    \"4 6\"\n) == \"1 3\"\nassert solution(\n    \"1 2\"\n) == \"2\"\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1 3'\nassert solution(input()) == '5 3'\nassert solution(input()) == '2 3'\nassert solution(input()) == '4 3'\nassert solution(input()) == '6 3'\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1 3'\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 3') == '1 3'\nassert solution('2 3') == '2 3'\nassert solution('1 3 2') == '1 3 2'\nassert solution('1 3 4') == '1 3 4'\nassert solution('1 3 5') == '1 3 5'\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 3') == '3 3'\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 3\"\nassert solution(\"1 2 2 4 2\") == \"2\"\nassert solution(\"2 3 2\") == \"3\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"3 2 3 1\") == \"3\"\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 3) == \"1 3\"\nassert solution(1, 4) == \"2 3\"\nassert solution(1, 5) == \"2 4\"\nassert solution(1, 6) == \"2 4\"\nassert solution(2, 3) == \"1 4\"\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 0 1 0\") == \"1 1 2\"\nassert solution(\"0 0 1 2\") == \"1 2 1\"\nassert solution(\"0 0 1 3\") == \"2 1 2\"\nassert solution(\"0 0 1 4\") == \"3 2 3\"\nassert solution(\"0 0 1 5\") == \"4 3 3\"\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\""
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nplayers = []\n\nfor _ in range(n):\n    players.append(int(sys.stdin.readline()))"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\nclass Solution:\n    def solution(stdin: str) -> str:\n        n = int(stdin)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            nums = list(map(int, stdin.split()))\n            for i in range(n):\n                nums[i] = nums[i] - 1\n            nums.sort()\n            return nums[n-1]\n\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n\nclass Solution:\n    def solution(stdin: str) -> str:\n        n = int(stdin)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            nums = list(map(int, stdin.split()))\n            for i in range(n):\n                nums[i] = nums[i] - 1\n            nums.sort()\n            return nums[n-1]\n\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n\nclass Solution:\n    def solution(stdin: str) -> str:\n        n = int(stdin)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            nums = list(map(int, stdin.split()))\n            for i in range(n):\n                if nums[i] >= nums[i-1]:\n                    nums[i] = nums[i] - 1\n                    nums[i-1] = nums[i-1] + 1\n                else:\n                    nums[i] = nums[i] - 1\n            nums.sort()\n            return nums[n-1]"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\n\n\n\n-----Explanation-----\n\nIn the first sample, the number of games is 5.\n\nIn the second sample, the number of games is 3.\n\nIn the third sample, the number of games is 1.\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^6\n\n\n\n-----Time Limit (for each test case)-----\n\n1 \u2264 n \u2264 10^6\n\n\n\n-----Access log-----\n\nInitialize your local variables to store the information that you are looking for.\n\n\n\n-----Subroutines-----"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"15\") == \"2\"\nassert solution(\"100\") == \"2\"\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"2\"\nassert solution(\"20\") == \"2\"\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2\"\n) == \"2\"\nassert solution(\n    \"3\"\n) == \"2\"\nassert solution(\n    \"4\"\n) == \"2\"\nassert solution(\n    \"10\"\n) == \"2\"\nassert solution(\n    \"1000000000\"\n) == \"2\"\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\nimport collections"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"VK\") == 3\nassert solution(\"VVV\") == 1\nassert solution(\"VV\") == 0\nassert solution(\"VKKKKKKKK\") == 1\nassert solution(\"V\") == 0\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"VV\",\"VV\"]) == \"1\"\nassert solution([\"VK\"]) == \"1\"\nassert solution([\"K\"]) == \"0\"\nassert solution([\"VV\",\"VV\"]) == \"3\""
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('VK') == 1\nassert solution('VKKKKKKKKVVVVVVVVVVK') == 3\nassert solution('VKKKKKKKKKVKVVVKVVVVVVVK') == 1"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(st) == '1'\nassert solution(st) == '1'\nassert solution(st) == '1'\nassert solution(st) == '1'\nassert solution(st) == '1'\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == \"3\"\n\n'''"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1, \"Wrong answer\""
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"VV\") == 3\nassert solution(\"VK\") == 1\nassert solution(\"V\") == 2\nassert solution(\"VKKKKKKKKKVVVVVVVVVVK\") == 1\nassert solution(\"KVKV\") == 2\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\n\"\"\""
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2\",\n    [\"1\", \"3\", \"2\"]\n    ) == \"1\"\nassert solution(\n    \"2\",\n    [\"1\", \"4\", \"5\", \"4\", \"3\", \"2\"]\n    ) == \"2\"\nassert solution(\n    \"2\",\n    [\"3\", \"5\", \"6\", \"4\", \"1\", \"2\"]\n    ) == \"2\"\nassert solution(\n    \"2\",\n    [\"2\", \"3\", \"1\", \"5\", \"4\", \"6\"]\n    ) == \"3\"\nassert solution(\n    \"2\",\n    [\"4\", \"4\", \"1\", \"3\", \"2\", \"6\"]\n    ) == \"3\"\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == 3\nassert solution(4) == 4\nassert solution(10) == 1\nassert solution(100) == 0"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 3\nassert solution(6) == 4\nassert solution(10) == 3\nassert solution(1000) == 9\nassert solution(10000) == 9\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 8"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), '3'"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 2\nassert solution(2) == 3\nassert solution(3) == 4\nassert solution(4) == 2\nassert solution(5) == 3\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 4\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(50000)\n\nn = int(input())\ns = []\n\nfor i in range(n):\n    s.append(list(map(int,input().split())))\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 7\") == 2\nassert solution(\"4 9\") == 3\nassert solution(\"1 1\") == 1\nassert solution(\"1 1\") == 2\nassert solution(\"1 1\") == 3\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 4 1') == '3'\nassert solution('1 2 7') == '2'\nassert solution('1 3 9') == '2'\nassert solution('1 1 1') == '1'\nassert solution('4 1 1') == '1'\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 7') == 2\nassert solution('4 9') == 3\nassert solution('1 1') == 1\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 4\") == \"3\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 7\") == \"3\"\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 1\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 7\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"3\""
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2') == 2\nassert solution('2 3') == 5\nassert solution('3 6') == 10\nassert solution('1024') == 2046\nassert solution('10 1024') == 1789\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"LRLRLRLRL\") == 3, \"expected 3, got {}\".format(3)\nassert solution(\"LRLRLRLRL\") == 2, \"expected 2, got {}\".format(2)\nassert solution(\"LRLRLRLRL\") == 5, \"expected 5, got {}\".format(5)\nassert solution(\"LRLRLRLRL\") == 10, \"expected 10, got {}\".format(10)\nassert solution(\"LRLRLRLRL\") == 46, \"expected 46, got {}\".format(46)"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1020\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 2046\n\n\n-----Time complexity-----\n\nTime complexity is O(n).\n\nA possible answer using the following formula is n/h.\n\n1. While n/h <= 2^{h} do\n    1.1 If n/h > 2^{h} then go down a row and check if n/h > 2^{h}\n    1.2 If n/h > 2^{h} then go down a column and check if n/h > 2^{h}\n    1.3 If n/h > 2^{h} then go down a 3-level cell and check if n/h > 2^{h}\n    1.4 If n/h > 2^{h} then go down a 4-level cell and check if n/h > 2^{h}\n    1.5 If n/h > 2^{h} then go down a 5-level cell and check if n/h > 2^{h}\n    1.6 If n/h > 2^{h} then go down a 6-level cell and check if n/h > 2^{h}\n    1.7 If n/h > 2^{h} then go down a 7-level cell and check if n/h > 2^{h}\n    1.8 If n/h > 2^{h} then go down a 8-level cell and check if n/h > 2^{h}\n    1.9 If n/h > 2^{h} then go down a 9-level cell and check if n/h > 2^{h}\n    1.10 If n/h > 2^{h} then go down a 10-level cell and check if n/h > 2^{h}\n    1.11 If n/h > 2^{h} then go down a 11-level cell and check if n/h > 2^{h}\n    1.12 If n/h > 2^{h} then go down a 12-level cell and check if n/h > 2^{h}\n    1.13 If n/h > 2^{h} then go down a 13-level cell and check if n/h > 2^{h}\n    1.14 If n/h > 2^{h} then go down a 14-level cell and check if n/h > 2^{h}\n    1.15 If n/h > 2^{h} then go down a 15-level cell and check if n/h > 2^{h}\n    1.16 If n/h > 2^{h} then go down a 16-level cell and check if n/h > 2^{h}\n    1.17 If n/h > 2^{h} then go down a 17-level cell and check if n/h > 2^{h}\n    1.18 If n/h > 2^{h} then go down a 18-level cell and check if n/h > 2^{h}\n    1.19 If n/h > 2^{h} then go down a 19-level cell and check if n/h > 2^{h}\n    1.20 If n/h > 2^{h} then go down a 20-level cell and check if n/h > 2^{h}\n    1.21 If n/h > 2^{h} then go down a 21-level cell and check if n/h > 2^{h}\n    1.22 If n/h > 2^{h} then go down a 22-level cell and check if n/h > 2^{h}\n    1.23 If n/h > 2^{h} then go down a 23-level cell and check if n/h > 2^{h}\n    1.24 If n/h > 2^{h} then go down a 24-level cell and check if n/h > 2^{h}\n    1.25 If n/h > 2^{h} then go down a 25-level cell and check if n/h > 2^{h}\n    1.26 If n/h > 2^{h} then go down a 26-level cell and check if n/h > 2^{h}\n    1.27 If n/h > 2^{h} then go down a 27-level cell and check if n/h > 2^{h}\n    1.28 If n/h > 2^{h} then go down a 28-level cell and check if n/h > 2^{h}\n    1.29 If n/h > 2^{h} then go down a 29-level cell and check if n/h > 2^{h}\n    1.30 If n/h > 2^{h} then go down a 30-level cell and check if n/h > 2^{h}\n    1.31 If n/h > 2^{h} then go down a 31-level cell and check if n/h > 2^{h}\n    1.32 If n/h > 2^{h} then go down a 32-level cell and check if n/h > 2^{h}\n    1.33 If n/h > 2^{h} then go down a 33-level cell and check if n/h > 2^{h}\n    1.34 If n/h > 2^{h} then go down a 34-level cell and check if n/h > 2^{h}\n    1.35 If n/h > 2^{h} then go down a 35-level cell and check if n/h > 2^{h}\n    1.36 If n/h > 2^{h} then go down a 36-level cell and check if n/h > 2^{h}\n    1.37 If n/h > 2^{h} then go down a 37-level cell and check if n/h > 2^{h}\n    1.38 If n/h > 2^{h} then go down a 38-level cell and check if n/h > 2^{h}\n    1.39 If n/h > 2^{h} then go down a 39-level cell and check if n/h > 2^{h}\n    1.40 If n/h > 2^{h} then go down a 40-level cell and check if n/h > 2^{h}\n    1.41 If n/h > 2^{h} then go down a 41-level cell and check if n/h > 2^{h}\n    1.42 If n/h > 2^{h} then go down a 42-level cell and check if n/h > 2^{h}\n    1.43 If n/h > 2^{h} then go down a 43-level cell and check if n/h > 2^{h}\n    1.44 If n/h > 2^{h} then go down a 44-level cell"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"LRLRLRLRL\") == 10\nassert solution(\"LRLRLRLRL\") == 22\nassert solution(\"LRLRLRLRLR\") == 11\nassert solution(\"LRLRLRLRLR\") == 12\nassert solution(\"LRLRLRLRLR\") == 13\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2046\n'''\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('10 1024') == 5\nassert solution('3 6') == 10\nassert solution('10 1024') == 10\nassert solution('3 6') == 10\nassert solution('10 1024') == 10\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '5'\nassert solution(input) == '10'\nassert solution(input) == '2046'"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 50\nassert solution(stdin) == 10\nassert solution(stdin) == 2046\nassert solution(stdin) == 5\nassert solution(stdin) == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2046'\nassert solution(input()) == '10'\n\nassert solution(input()) == '3'\nassert solution(input()) == '6'\n\n\n-----Reminder-----\n\nInput a string consists of characters \"L\" and \"R\". Amr meets the given criteria to find the path from root to leaf.\n\n\n-----Notes-----\n\nInput\n2\n\nOutput\n2\nInput\n6 10\n\nOutput\n6\nInput\n2\n\nOutput\n10\nInput\n10 1024\n\nOutput\n3\nInput\n10 1024\n\nOutput\n10\nInput\n2 3\n\nOutput\n2\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"23\") == \"24\"\nassert solution(\"2\") == \"24\"\nassert solution(\"10\") == \"24\"\nassert solution(\"2\") == \"24\"\nassert solution(\"4\") == \"24\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\""
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\" + \"26\" + \"2\" + \"9\" + \"3\" + \"5\" + \"3\" + \"5\" + \"9\" + \"2\" + \"1\" + \"2\" + \"1\"\n\nassert solution(stdin) == \"1\" + \"26\" + \"2\" + \"2\" + \"1\" + \"1\" + \"1\"\nassert solution(stdin) == \"1\" + \"26\" + \"2\" + \"2\" + \"1\" + \"1\"\nassert solution(stdin) == \"1\" + \"26\" + \"2\" + \"1\"\nassert solution(stdin) == \"1\" + \"26\" + \"1\" + \"2\" + \"1\" + \"2\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 2\"\n\nassert solution(stdin) == \"2 3\"\n\nassert solution(stdin) == \"2 3\"\n\nassert solution(stdin) == \"2 3\"\n\nassert solution(stdin) == \"2 3\""
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(len(set([i for i in range(len(stdin))])) - 1)\n\n\n\n-----Solution-----"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(26) == \"6\"\nassert solution(2) == \"2\"\nassert solution(8) == \"4\"\nassert solution(3) == \"2\"\nassert solution(5) == \"2\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 12\nassert solution(stdin) == 15\nassert solution(stdin) == 14\nassert solution(stdin) == 16\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"2 3\") == \"NO\""
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution() failed to print 'NO'\"\n\nTest Cases\nTest Case #1\nInput\n4\n31 31 30 31\n\nOutput\nYes\n\nTest Case #2\nInput\n2\n30 30\n\nOutput\nNo\n\nTest Case #3\nInput\n5\n29 31 30 31 30\n\nOutput\nNo\n\"\"\"\n\nimport math"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 5\") == \"NO\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"3 0\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2 1\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"4 3 1\") == \"NO\"\n\nassert solution(\"4 3 2\") == \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1031\") == \"YES\"\nassert solution(\"1029\") == \"NO\"\nassert solution(\"1030\") == \"NO\"\nassert solution(\"1001\") == \"YES\"\nassert solution(\"1001\") == \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 31 30 31\") == \"YES\"\nassert solution(\"2 29 31 30\") == \"NO\"\nassert solution(\"2 31 31 31\") == \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nprint(\"The answer is: %s\" % solution(input()))"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('7' == '31') == 'YES'\nassert solution('3' == '29') == 'YES'\nassert solution('2' == '30') == 'NO'\nassert solution('1') == 'NO'"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == \"NO\"\nassert solution(3) == \"YES\"\nassert solution(2) == \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nassert solution(stdin) == \"NO\"\n\n\n\n-----Notes-----\nhttps://www.hackerrank.com/challenges/one-liner-fraction-numbers/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup&h_r=interview&playlist_slugs%5B%5D=publicdomain\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\u201c2\u201d) == 'NO', \u201c2\u201d is not a valid sequence.\u201d\nassert solution(\u201c6\u201d) == 'YES', \u201c6\u201d is not a valid sequence.\u201d\nassert solution(\u201c6\u201d) == 'YES', \u201c6\u201d is not a valid sequence.\u201d\nassert solution(\u201c2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 1 2 1') == 'YES'\nassert solution('1 1 1 1') == 'NO'\nassert solution('1 1 1 1 2') == 'NO'\nassert solution('2 1 1 1 1') == 'NO'\nassert solution('2 2 2 2') == 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2\", \"6\"]) == \"NO\"\nassert solution([\"6\", \"6\"]) == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"2 5\") == \"YES\"\nassert solution(\"6 2\") == \"NO\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"4 3\") == \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin) == \"YES\"\n\nassert solution(\n    stdin) == \"NO\"\n\nprint(solution(\n    stdin))\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input() == \"YES\") == \"NO\"\n\nassert solution(input() == \"YES\") == \"YES\"\n\nassert solution(input() == \"YES\") == \"YES\"\n\nassert solution(input() == \"YES\") == \"YES\"\n\nassert solution(input() == \"YES\") == \"YES\""
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin=\n    '''\n    4\n    5 7\n    3 3 4 1\n    '''\n    ), \"None\"\n\n    \"\"\"\n    stdin = '''\n    6\n    4 5 3 2\n    2 2 2 2\n    '''\n    assert solution(\n    stdin=\n    '''\n    6\n    4 5 3 2\n    '''\n    ), 'None'\n\n    \"\"\"\n    stdin = '''\n    3\n    3 3 1\n    '''\n    assert solution(\n    stdin=\n    '''\n    3\n    3 3 1\n    '''\n    ), 'None'\n\n    \"\"\"\n    stdin = '''\n    3\n    3 3 2\n    '''\n    assert solution(\n    stdin=\n    '''\n    3\n    3 3 2\n    '''\n    ), 'None'\n\n    \"\"\"\n    stdin = '''\n    3\n    3 3 2\n    '''\n    assert solution(\n    stdin=\n    '''\n    2\n    3 2 2\n    '''\n    ), 'None'\n\n    \"\"\"\n    stdin = '''\n    4\n    5 2\n    3 2 2\n    '''\n    "
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5 5 5 3 3 3 3 3 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3\",\"3\",\"3\",\"3\",\"2\",\"2\",\"2\",\"1\"]) == \"3\"\nassert solution([\"3\",\"2\",\"2\",\"2\",\"2\",\"2\",\"2\",\"1\"]) == \"2\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"2\",\"2\",\"3\",\"3\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"1\",\"2\"]) == \"1\"\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 5"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, [1, 3, 2, 4, 3, 1]) == 5\nassert solution(3, [2, 3, 1, 2, 3, 1, 1, 2, 3, 1, 1]) == -1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == -1,'should return -1'"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input()\n) == '1'\nassert solution(\n    input()\n) == '2'\nassert solution(\n    input()\n) == '3'\nassert solution(\n    input()\n) == '3'\nassert solution(\n    input()\n) == '1'\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 500\n1 <= n, m, k <= 10^4\n0 <= stdin[i] <= 10^9\n\n-----Examples-----\nInput\n6\n5\n1 0 1\n1 0 2\n2 3 0\n2 3 1\n3 4 2\n3 4 1\n4 5 0\n5 6 0\n\nOutput\nNO\n5 0\n5 6\n7 4\n\nInput\n6\n5\n1 0 1\n1 0 2\n2 3 0\n2 3 1\n3 4 2\n3 4 1\n4 5 0\n5 6 0\n\nOutput\nYES\n1 0\n2 3\n3 4\n4 5\n5 6\n\n\"\"\"\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'NO'\n\n------Examples-----\nInput\n4 3 3\n\nOutput\nNO\n-\n-\n-\n-\n\nInput\n4 4 7\n\nOutput\nYES\n-\n-\n-\n-\n-\n\n\"\"\"\nimport math"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 4 4\") == \"YES\"\nassert solution(\"4 4 7\") == \"NO\"\nassert solution(\"4 5 8\") == \"YES\"\nassert solution(\"4 6 7\") == \"NO\"\nassert solution(\"5 4 7\") == \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\n-----Constraints-----\n\n1 <= stdin.length <= 20\n\n\n-----Alternatives-----\n\nGreedy Algorithm\n\nO(nm^2) solution\n\nO(n)\n\nO(nm^2) time\n\n\n------Time Limit-----\n\n1 second\n\n------Memory Limit-----\n\n16 megabytes\n\n------Solutions-----\n\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^3\n1 <= n, m <= 10^9\n0 <= k <= 10^9\n\n\"\"\"\n\nn,m,k = map(int,input().split())\nl = [[0]*4 for i in range(n)]\n\nfor i in range(n):\n    l[i][0]=i\n    for j in range(4):\n        l[i][j+1]=j+i+1\n\nfor j in range(m):\n    l[0][j+1]=j+m\n    for i in range(1,n):\n        l[i][1]=i-1\n\nfor i in range(1,n):\n    for j in range(1,4):\n        if l[i][j] == k:\n            print(\"YES\")\n            exit()\n\nprint(\"NO\")"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'NO'\nprint(stdin)\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n0 <= stdin.length <= 10^6\n0 <= stdin[i] <= 10^9\n\n0 <= n, m, k <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n4 spaces\n\n-----Problems-----\nMedium\n\n######################\nMedium\n\nGiven three integers $n$, $m$, $k$ and $x$, find $x$ point.\n\nThe points have $n$ integers, $m$ integers and $k$ integers.\n\nThe area of the triangle is $n \\times m \\times k$.\n\nThe function has two variants:\n\n\n\nThen the function returns the result $x_i = <x_1, y_1> $if $i = 1,..., $k$, otherwise $x_i = <x_i, y_i$.\n\nThe function does not need to return any values.\n\nThe function does not need to print anything.\n\nInput\nInteger $n, $m, $k$, and $x$ (integer values in the range 1, 10^9).\n\n\nOutput\nString $x$ if $i = 1, or $x_i = <x_1, y_1> $if $i = 1, otherwise $x_i = <x_i, y_i$."
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 7\"), \"5 7\"\nassert solution(\"1 3\"), \"1 3\"\nassert solution(\"2 1\"), \"2 1\"\nassert solution(\"2 3\"), \"2 3\"\nassert solution(\"1 4\"), \"1 4\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^6\n1 <= k <= stdin.length\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES', \"This is the only function I got!\""
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4 3\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n        \"10 4\"\n    ), \"YES\"\n\"\"\"\n\n\nclass Solution:\n    def solve(self, stdin, stdout):\n        n, k = map(int, stdin.split())\n\n        for i in range(1, n + 1):\n            if i == 1:\n                if (k // i) % 2:\n                    stdout.write('YES')\n                else:\n                    stdout.write('NO')\n                    return\n            else:\n                if (k // i) % 2:\n                    if k % (i * 2)!= 0:\n                        stdout.write('NO')\n                    else:\n                        stdout.write('YES')\n                        k -= (i * 2)\n                        if k == 0:\n                            return\n\n        stdout.write('NO')\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2, 2) == \"NO\"\nassert solution(7, 5) == \"NO\"\nassert solution(5, 4) == \"YES\"\nassert solution(1, 4) == \"YES\""
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 5\") == \"YES\"\nassert solution(\"10 5\") == \"NO\""
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"10 4\", \"1 2\"]) == \"NO\"\n\nassert solution([\"10 4\", \"1 3\"]) == \"NO\"\n\nassert solution([\"10 4\", \"1 3\", \"2 1\"]) == \"YES\"\n\nassert solution([\"10 4\", \"1 3\", \"1 1\"]) == \"YES\"\n\nassert solution([\"10 4\", \"1 2\", \"3 1\"]) == \"YES\""
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'NO'\n\nThe following code is an example of a solution:\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0\") == \"chest\"\nassert solution(\"1\") == \"biceps\"\nassert solution(\"2\") == \"back\"\nassert solution(\"3\") == \"chest\"\nassert solution(\"4\") == \"biceps\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"chest\"\nassert solution(input()) == \"back\"\nassert solution(input()) == \"chest\"\nassert solution(input()) == \"biceps\"\nassert solution(input()) == \"back\""
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"chest\"\n\nassert solution(stdin) == \"biceps\"\n\nassert solution(stdin) == \"back\"\n\nassert solution(stdin) == \"chest\"\n\n\n-----Constraints-----\n0\n\n-----Example 1-----\nInput\n2\n3\n2 7\n\nOutput\nback\n\nInput\n3\n5 1 9\n\nOutput\nchest\n\n-----Example 2-----\nInput\n3\n5 1 8 3 7 2\n\nOutput\nback\n\nInput\n6\n2 1 6 5 8 9\n\nOutput\nchest\n\n-----Example 3-----\nInput\n4\n5 1 2 3 4\n\nOutput\nback\n\nInput\n5\n8 1 7 3 2\n\nOutput\nchest\n\n-----Example 4-----\nInput\n4\n1 2 3 4 5\n\nOutput\nchest\n\n-----Example 5-----\nInput\n5\n3 1 2 4 5 6 7\n\nOutput\nchest\n\n-----Example 6-----\nInput\n1\n1\n\nOutput\nback\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"biceps\"\nassert solution(input()) == \"back\"\nassert solution(input()) == \"chest\""
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"chest\"\nassert solution(stdin) == \"biceps\"\nassert solution(stdin) == \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"chest\"\n\n-----Bug Fix-----\n\nThe input file contains incorrect data. The first line contains an integer n (1 \u2264 n \u2264 20). The second line contains n integers a_1, a_2,..., a_{n}. The third line contains an integer s, the average number of time a_i is used, and the fourth line contains an integer m (1 \u2264 m \u2264 25).\n\nNow, we need to check whether the number of times the exercise is repeated is correct.\n\nInput\n2\n2 8\n1 2 2\n\nOutput\n1\n\nExplanation\n\nThe bodybuilder has first 2 exercises, the two biceps, and the two back exercises.\n\nThe average time is 2. Thus, the answer is 1.\n\nIn the third sample, the average time is 3. Thus, the answer is 2.\n\nIn the fourth sample, the average time is 6. Thus, the answer is 2.\n\nIn the fifth sample, the average time is 8. Thus, the answer is 8.\n\nThe second sample reaches the bottom with 1 exercise, so the answer is 1.\n\nThere are no missing numbers in the input.\n\nConstraints\n1 \u2264 n \u2264 20\n\nSample Input\n\n2\n2 8\n1 2 2\n\nSample Output\n\n1\n\nExplanation\n\nThe bodybuilder has first 2 exercises, the two biceps, and the two back exercises.\n\nThe average time is 2. Thus, the answer is 1.\n\nNote: In the first sample, the average time is only 3. Thus, the answer is 2.\n\nIn the second sample, the average time is 6. Thus, the answer is 2.\n\nIn the third sample, the average time is 8. Thus, the answer is 8.\n\nIn the fourth sample, the average time is 8. Thus, the answer is 8.\n\nIn the fifth sample, the average time is 6. Thus, the answer is 8.\n\nNote: The number of back exercises is not an integer."
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"biceps\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'chest'\nassert solution(stdin) == 'biceps'\nassert solution(stdin) == 'back'\nassert solution(stdin) == 'chest'\nassert solution(stdin) == 'biceps'\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(open(\"input.txt\").read()) == \"1\"\n\n\"\"\""
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\n\n\"\"\""
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4 4 5\") == \"0\"\nassert solution(\"5 4 5 4\") == \"1\"\nassert solution(\"3 2 2 2\") == \"0\"\nassert solution(\"4 5 3 2\") == \"0\"\nassert solution(\"4 3 2 2\") == \"0\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0, \"Solution failed\"\n\nassert solution(stdin) == 1, \"Solution failed\"\n\n\"\"\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n) == solution(\n    stdin: str\n)"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 3, \"1 is not valid\"\nassert solution(8) == -1, \"8 is not valid\"\nassert solution(0) == -1, \"0 is not valid\"\nassert solution(5) == -1, \"5 is not valid\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"1\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"0 0\") == \"1\"\nassert solution(\"8 7\") == \"3\"\nassert solution(\"0 0 0\") == \"3\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(in_) == '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"-1\""
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 8\") == \"3 1\"\nassert solution(\"1 1 1\") == \"3 1\"\nassert solution(\"8 5\") == \"3 1\"\nassert solution(\"0 0\") == \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input() == \"-1\") == \"-\"\nassert solution(input() == \"0\") == \"0\"\nassert solution(input() == \"1\") == \"1\"\nassert solution(input() == \"8\") == \"8\"\nassert solution(input() == \"0\\o/\\o/\\o\") == \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : '2 4'\")\nprint(\"Output :\")\nprint(\"3\")\nprint(\"Explanation :\")\nprint(\"The required array of smaller length is 2, \\n\"\n    \"the sum of elements is 3.\")\nassert solution(\"2 4\") == \"3\"\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : '1 3'\")\nprint(\"Output :\")\nprint(\"3\")\nprint(\"Explanation :\")\nprint(\"The array is empty. The sum of elements is 3.\")\nassert solution(\"1 3\") == \"3\"\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"stdin : '8 5'\")\nprint(\"Output :\")\nprint(\"3\")\nprint(\"Explanation :\")\nprint(\"The array is empty. The sum of elements is 3.\")\nassert solution(\"8 5\") == \"3\"\n\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"stdin : '0 0'\")\nprint(\"Output :\")\nprint(\"-1\")\nassert solution(\"0 0\") == \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Alternatives-----"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(121) == 6\n\nInput\n121\n\nOutput\n3\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"101\"\nassert solution(\"17\") == \"012\"\nassert solution(\"1123\") == \"011\"\nassert solution(\"5678\") == \"0\"\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(121) == 6\nassert solution(9) == 2\nassert solution(104) == 2\nassert solution(42) == 1\nassert solution(52) == 2\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 6\n\n\"\"\""
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(121) == 6\n\n\n---My Solutions---"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(21) == '1'\nassert solution(32) == '2'\nassert solution(10) == '3'\nassert solution(9) == '4'\nassert solution(10) == '5'\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(120) == 6\nassert solution(15) == 7\nassert solution(64) == 6\nassert solution(128) == 5\nassert solution(122) == 4\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(123) == 1\nassert solution(121) == 2\nassert solution(1000) == 3\nassert solution(1111) == 4\nassert solution(111111) == 5\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(121) == 6\nassert solution(2147483647) == 6\nassert solution(9223372036854775807) == 6\nassert solution(0) == 6\nassert solution(-1) == -1\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(121) == 6\nassert solution(122) == 6\nassert solution(123) == 6\nassert solution(12345678) == 6\nassert solution(123456789) == 6\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\nInput\n3 3 0 1\n5 1 3 1\n\nOutput\nYES\n\nInput\n0 0 0 6\n1 5\n\nOutput\nYES\n\n\n-----Solution-----\n\nIn this problem, the input is the map of a potion bottle. You are given a standard definition:\n\n  $(a, b) \\rightarrow(a + x, b + y)$  $(a, b) \\rightarrow(a + x, b - y)$  $(a, b) \\rightarrow(a - x, b + y)$  $(a, b) \\rightarrow(a - x, b - y)$ \n\nThe position of Captain Bill the Hummingbird is (x_1, y_1) and the position of the treasure is (x_2, y_2).\n\nThe values on the bottle show how many moves the potion can take in the bottle. The piece of the potion can be used as many times as possible.\n\n\n\nInput\n\nThe first line contains an integer n \u2014 number of rows and columns.\n\nThe second line contains an integer m \u2014 number of types of moves which can be performed for the given bottle.\n\nThe third line contains an integer n \u2014 number of variables for each move.\n\nThe fourth line contains m space-separated integers x_1, y_1, x_2, y_2.\n\nOutput\n\nPrint YES if it is possible for Captain to reach the treasure using the potion, otherwise print NO.\n\nSample Input\n\n3 3\n1 1 0 1\n\nSample Output\n\nYES\n\nExplanation\n\nThe inputs have been validated. The input contains only positive integer numbers (\u2264 10^5). The first line contains an integer n \u2014 number of rows and columns.\nThe second line contains an integer m \u2014 number of types of moves which can be performed for the given bottle.\nThe third line contains m space-separated integers x_1, y_1, x_2, y_2.\n\nIt is always possible for Captain to reach the treasure using the potion.\n\nThe numbers are given on the bottle. We can use exactly one type of move to reach the treasure.\n\nSo the first example is shown.\n\nIn the case of the first example where the bottle is placed, the number of moves is the sum of the numbers.\n\nIn the case of the second example where the bottle is placed, the number of moves is equal to the size of the bottle minus the number of moves of the type that are available.\n\nThe pattern is shown in the example below.\n\nGiven an input string, we can say that the string has two types of moves which are all of the same moves of the bottle, and we can add the number of moves that have been taken to the bottle by one move to get the string.\n\nThe string has exactly one type of move with exactly one number of moves available.\n\nNote that there is only one bottle containing a piece of the potion that can be used.\n\nWe can not assume that the number of moves on the bottle has any specific meaning.\n\nThe answer is only a valid answer.\n\nConstraints\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= x_1, y_1 <= 10^5\n1 <= x_2, y_2 <= 10^5\n\n\"\"\"\nimport re"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nfrom collections import deque\n\ndx = [0, 1, 0, -1]\ndy = [-1, 0, 1, 0]"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"0 0 0 6\"\n    \"1 1 3 6\"\n    \"1 5\"\n    ) == \"YES\"\n\nassert solution(\n    \"0 1 5 3\"\n    \"1 3\"\n    ) == \"NO\"\n\n------The goal here is to be able to run the tests within this test case-----"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= x_1, y_1, x_2, y_2 <= 10^5\n0 <= stdin[i] <= 10^5\n\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\nOutput\nYES\n\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0 0 0 6') == 'YES'\nassert solution('1 1 3 6') == 'NO'\nassert solution('1 5') == 'NO'\nassert solution('2 3') == 'NO'\nassert solution('2 4') == 'NO'\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0 0 0 6) == 'YES'\nassert solution(1 1 3 6) == 'NO'\n\nassert solution(1 1 5 6) == 'NO'\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n0 \u2264 n \u2264 1000\n\n\n-----Time Limit: 1 sec\n-----Space Limit: 1 MiB\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n------Constraints------\n\n0 \u2264 stdin \u2264 10^18\n\n\n------Side Effects------\n\nStdin is correct.\n\n------Others-------\n\nInput\nstdin.txt\nOutput\n16\n\nSample Input\n\n5\n\nSample Output\n\n2\n\nExplanation\n\nGiven $n$ := 5, we have the following 3 bus variations:\n\nNumber $i$: $i$\u00a0is the bus number.\nNumber $0$: $0$\u00a0is the bus number.\nNumber $1$: $1$\u00a0is the bus number.\nNumber $2$: $2$\u00a0is the bus number.\nNumber $3$: $3$\u00a0is the bus number.\nNumber $4$: $4$\u00a0is the bus number.\nNumber $5$: $5$\u00a0is the bus number.\nNumber $6$: $6$\u00a0is the bus number.\nNumber $7$: $7$\u00a0is the bus number.\nNumber $8$: $8$\u00a0is the bus number.\nNumber $9$: $9$\u00a0is the bus number.\nNumber $10$: $10$\u00a0is the bus number.\nNumber $11$: $11$\u00a0is the bus number.\nNumber $12$: $12$\u00a0is the bus number.\nNumber $13$: $13$\u00a0is the bus number.\nNumber $14$: $14$\u00a0is the bus number.\nNumber $15$: $15$\u00a0is the bus number.\nNumber $16$: $16$\u00a0is the bus number.\n\n------The main idea was to implement the algorithm in four steps as follows:\n\n1. In the first step, there are four buses, since we use them as both in each iteration.\n2. In the second step, we keep the minimum number of buses in the number of iteration.\n3. In the third step, we use the number of iteration to compute the minimum bus number.\n4. In the fourth step, we add the numbers in the previous steps to the smallest number.\n5. We return the minimum number of buses in the number of iteration.\n\n\n-----Time Limit-----\n1. The only time that has the effect of finding this number is about 1 second.\n2. The only time that has the effect of finding this number is about 2 seconds.\n3. The only time that has the effect of finding this number is about 3 seconds.\n4. The only time that has the effect of finding this number is about 5 seconds.\n\n\n------Variants-----\n\n1. Smallest number of buses = number of bus variations, because it is the smallest bus number that we can choose from.\n2. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is not the smallest bus number.\n3. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n4. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n5. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n6. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n7. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n\n\n-----Time Limit-----\n1. The only time that has the effect of finding this number is about 1 second.\n2. The only time that has the effect of finding this number is about 2 seconds.\n3. The only time that has the effect of finding this number is about 3 seconds.\n4. The only time that has the effect of finding this number is about 5 seconds.\n\n\n------Variants-----\n\n1. Smallest number of buses = number of bus variations, because it is the smallest bus number that we can choose from.\n2. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n3. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n4. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n5. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n6. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n7. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n\n\n------Variants-----\n\n1. Smallest number of buses = number of bus variations, because it is the smallest bus number that we can choose from.\n2. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n3. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n4. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n5. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n6. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n7. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n\n\n------Variants-----\n\n1. Smallest number of buses = number of bus variations, because it is the smallest bus number that we can choose from.\n2. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n3. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n4. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n5. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n6. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n7. Smallest number of buses = number of bus variations, because the smallest bus number we can choose from is the smallest bus number.\n\n\n------Variants-----\n\n1. Smallest number of buses = number of bus variations, because it is the smallest bus number that we can choose from.\n2. Smallest number of buses = number of bus variations, because the smallest bus number we can choose"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"97\") == 2\nassert solution(\"2028\") == 13\nassert solution(\"2082\") == 2\nassert solution(\"2208\") == 2\nassert solution(\"2280\") == 2\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\n\n-----Time Complexity-----\n\nTime: O(N)\n\nSpace: O(N)\n'''\nclass Solution:\n    def findNumberOfBinarySubstrings(self, number: str) -> int:\n        res = 0\n        n = len(number)\n        def check(start, end):\n            if start == end:\n                return 0\n            if number[start] == number[end]:\n                return 1 + check(start+1, end+1)\n            return 0\n        \n        def dfs(start, end):\n            if end < n and number[start] == number[end]:\n                dfs(start, end + 1)\n                res += check(start, end)\n                return\n            dfs(start + 1, end)\n            dfs(start + 1, end + 1)\n        \n        dfs(0, 0)\n        return res"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\n\nassert solution(\"12\") == 6\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\nassert solution(\"128\") == 1\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '13'\n\nassert solution(stdin) == '25'\n\nassert solution(stdin) == '43'\n\nassert solution(stdin) == '64'"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('', '') == 0\nassert solution('1', '') == 1\nassert solution('8', '') == 1\nassert solution('2', '') == 2\nassert solution('99', '') == 3\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3, \"Error in the solution\"\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 1 1\") == \"15\"\nassert solution(\"5 2 3 1 4\") == \"9\"\nassert solution(\"3 3 3 3 4 2 2\") == \"3\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"1 2 2\") == \"2\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3 5 8 4 2 7 10 7 10\"\n    ) == \"5\"\n    assert solution(\n    \"1 2 1 1\"\n    ) == \"1\"\n    assert solution(\n    \"2 3 1\"\n    ) == \"2\"\n    assert solution(\n    \"1 3 1\"\n    ) == \"1\"\n    assert solution(\n    \"5 1 2 10\"\n    ) == \"3\"\n    "
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9\"\n\n-----Known Issues-----\n\nThe delivery of each item requires two tests: \n\n- The first test should work only if the delivered items are not in the set.\n- The second test should work only if the first set of delivered items is not empty.\n\"\"\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"5\"\nassert solution(5) == \"9\"\nassert solution(9) == \"102\"\nassert solution(2) == \"1\"\nassert solution(3) == \"6\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"11\",\"3\",\"4\",\"5\",\"1\",\"10\",\"6\",\"7\",\"9\") == \"122\"\nassert solution(\"1\",\"1\",\"1\",\"2\",\"1\",\"1\",\"1\",\"2\",\"2\") == \"3\"\nassert solution(\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\") == \"0\"\nassert solution(\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"1\",\"0\") == \"0\"\nassert solution(\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\",\"0\") == \"0\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"Your code failed to pass\"\nassert len(stdin) == 12\nassert all(i.isdigit() for i in stdin)\nassert all(i.isdigit() for i in range(int(stdin[1]), int(stdin[3]) + 1, 1))\nassert all(i.isdigit() for i in range(int(stdin[4]), int(stdin[5]) + 1, 1))\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 17\n\"\"\"\n\nclass Solution:\n    def maxProfit(self, prices: List[int]) -> int:\n        profit, min_price = 0, 100000000000\n        \n        for i in range(len(prices)):\n            min_price = min(min_price, prices[i])\n            profit = max(profit, prices[i] - min_price)\n        return profit\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"102\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"12\") == \"102\"\nassert solution(\"17\") == \"325\"\nassert solution(\"15\") == \"11\"\nassert solution(\"21\") == \"17\""
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\") == \"0\"\nassert solution(\"1\", \"1\", \"1\", \"1\", \"1\", \"\", \"\", \"\") == \"1\"\nassert solution(\"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\") == \"2\"\nassert solution(\"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\", \"2\") == \"1\"\nassert solution(\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\") == \"1\"\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\nNote:\nthe algorithm is as follows:\n\nIf $p$ is prime, $n \\leq p \\leq 10^6+3$, return $n \\cdot a^n \\equiv b \\quad (\\textrm{mod}\\;p)$. Otherwise, $n \\cdot a^n \\equiv b \\quad (\\textrm{mod}\\;p)$ is not possible.\n\nInput\n4 6 7 13\n\nOutput\n1\n\nInput\n233 233 10007 1\n\nOutput\n1\n\ninput = \"/dev/ttyUSB0\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 2, 3, 4) == 1\nassert solution(4, 2, 3, 4) == 1\nassert solution(233, 233, 10007, 1) == 1"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2,6,7,13,1) == 2\nassert solution(4,6,7,13,1) == 1\nassert solution(233,233,10007,1,1) == 1\nassert solution(233,233,10007,1,1) == 1\nassert solution(233,233,10007,1,1) == 1\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2,6,7,13) == 1\nassert solution(4,6,7,13) == 1\nassert solution(233,233,10007,1) == 1\nassert solution(233,233,10007,2) == 1\nassert solution(233,233,10007,3) == 2\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n\nInput\n4 6 7 13\n\nOutput\n1\n\nInput\n233 233 10007 1\n\nOutput\n2\n\n\"\"\"\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 8\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 1\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 1 3 4\") == \"800\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"4 1 3 4\") == \"80\"\nassert solution(\"4 2 2 4\") == \"4\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 3 4') == '800'\nassert solution('1 1 1 1') == '256'"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '800'\nassert solution(stdin) == '32'\nassert solution(stdin) == '256'\nassert solution(stdin) == '256'\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\nassert solution(\"1 1 1 1\") == \"256\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"256\"\nassert solution(input()) == \"800\"\nassert solution(input()) == \"1700\"\nassert solution(input()) == \"7000\"\nassert solution(input()) == \"19000\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 1, 3, 4) == 256\nassert solution(1, 1, 1, 1) == 256\nassert solution(1, 1, 1, 2) == 256\nassert solution(1, 1, 1, 3) == 256\nassert solution(1, 1, 1, 4) == 256\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"800\"\nassert solution(stdin) == \"256\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 1 3 4\") == \"800\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"1 1 1 1\") == \"256\"\nassert solution(\"1 1 1 1\") == \"256\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '256'"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '800'"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\"\"\"\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"9\", \"3\", \"8\", \"10\", \"1\"]) == \"2\"\nassert solution([\"10\", \"7\", \"6\", \"9\", \"4\", \"8\"]) == \"5\"\nassert solution([\"1\", \"3\", \"4\", \"2\"]) == \"5\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"10\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"16\""
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 4 3 1\") == 0, \"Error\"\nassert solution(\"9 3 8 10\") == 2, \"Error\""
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(sys.stdin) == \"\"\n\"\"\""
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 0\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == '0'\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n\n1 \u2264 x < n\n1 \u2264 y < n\n1 \u2264 c \u2264 10^9\n\n[Python3]\n\"\"\"\n\nn = int(input())\nm = int(input())\n\ngrid = []\nfor i in range(n):\n    grid.append([int(j) for j in input().split()])\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"31\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"31\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"31\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(3)\n\"\"\"\nimport sys"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '31'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('12') == 2\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('6') == 3\nassert solution('14') == 3\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '31'\nassert solution(inp, 2, 3) == '3'\nassert solution(inp, 2, 4) == '5'\nassert solution(inp, 2, 5) == '1'\nassert solution(inp, 2, 6) == '6'\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"31\"\nassert solution(stdin, 2, 1) == \"3\"\nassert solution(stdin, 8, 16) == \"30\"\nassert solution(stdin, 1, 1) == \"0\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"8 16\") == \"31\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2\") == \"0\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"The function doesn't exist!\"\n\n## ----------------------------------------------------------------------------\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1 2) == 3\nassert solution(8 16) == 31\nassert solution(1 1) == 0\nassert solution(8 16) == 0\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n\nInput\n6\n\nOutput\n3\n\nInput\n8\n\nOutput\n3\n\nInput\n9\n\nOutput\n1\n\nInput\n23\n\nOutput\n6\n\n------Constraints-----\n0 <= stdin.length <= 10000\n1 <= n <= 50\n1 <= k <= 1000000\n\nExample 1:\n\nInput\n2\n\nOutput\n4\n\nInput\n6\n\nOutput\n4\n\nExample 2:\n\nInput\n1\n\nOutput\n1\n\nInput\n8\n\nOutput\n6\n\n------Constraints-----\n0 <= stdin.length <= 10000\n1 <= n <= 50\n1 <= k <= 1000000\n\n\"\"\"\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\n\n-----Constraints-----\n1 \u2264 n \u2264 10^{18}\n0 \u2264 k \u2264 1,000\n\n-----Time Limit: 0.2s (Average over 10,000 iterations)\n150 ms\n\n\n-----Tags: Medium\n\"\"\""
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\n\n\n\n-----Advanced-----\n\nTo perform the moves described above, the number of vertices for the plot is a non-negative integer. For example, the number of vertices for the plot is 5 and the area of the plot is 8.\n\nThe number of moves is the sum of the number of moves necessary to obtain the maximum possible height of the plot.\n\nThis is a convex constraint on the height of the plot.\n\nThe area of the plot is known. The height of the plot is known.\n\nTo solve the problem, you will first choose a point P_i with the maximum $y$-coordinate in the plot (i.e. such points are $P_1, P_3, \\dots, P_{2n-1}$) and solve the interval [P_i, P_{i+1}] for $x$-coordinate $x$ and $y$-coordinate $y$, then solve the interval [P_{i+1}, P_{i+2}] for $x$-coordinate $x$ and $y$-coordinate $y$.\n\nThe value of $x$ and $y$ is defined as the intersection point between the two lines $P_{i}=(P_{i + 1}, P_{i + 2})$, where $i$ is the coordinate of $i + 1$ (see above). The value of $x$ and $y$ is the maximum $y$-coordinate among all initial points in the plot (i.e. points $P_0, P_1, \\dots, P_{2n-1}$).\n\nFor example, the area of the plot is 8, and $y$-coordinate of the point $P_1$ is equal to $x$-coordinate in the plot. The area of the plot is 10, and $y$-coordinate of the point $P_3$ is equal to $x$-coordinate in the plot.\n\nThe height of the plot is the maximum $y$-coordinate among all initial points in the plot (i.e. points $P_0, P_1, \\dots, P_{2n-1}$). Note that the $x$-coordinate of the point $P_0$ is greater than the $x$-coordinate of the point $P_1$ and $y$-coordinate of the point $P_3$ is less than the $y$-coordinate of the point $P_3$.\n\nFor the second example, the maximum $y$-coordinate is equal to the value of $x$-coordinate in the plot. Hence, the $x$-coordinate of the point $P_1$ is equal to the value of $x$-coordinate in the plot.\n\nThe smallest possible height is $k$, which is given by the sum of the height of each vertex, i.e. $2n+1$ vertices, so the sum of the height of each initial point is $2n$.\n\nThe height of the plot is the maximum $y$-coordinate among all initial points in the plot (i.e. points $P_0, P_1, \\dots, P_{2n-1}$).\n\nThe smallest possible height is $k$, which is given by the sum of the height of each vertex, i.e. $2n+1$ vertices, so the sum of the height of each initial point is $2n$.\n\nIn the second example, the smallest possible height is equal to the value of $x$-coordinate in the plot. Thus, the $x$-coordinate of the point $P_0$ is equal to the value of $x$-coordinate in the plot.\n\nIf we have a plot of $n=3$ vertices and $k$ height, then the smallest possible height is equal to the value of $x$-coordinate in the plot, $k$.\n\nTo satisfy this rule, we can use the assumption that $y$-coordinate of the point $P_0$ is equal to $x$-coordinate in the plot.\n\nFor example, the area of the plot is 4, the height of the plot is 3, and the smallest possible height is $k$, which is equal to the value of $x$-coordinate in the plot.\n\nTo accomplish this, we must have a point P_0 with $y$-coordinate equal to $x$-coordinate in the plot, and a point P_1 with $y$-coordinate equal to $x$-coordinate in the plot.\n\nIf $k$ is the minimum possible height of the plot, then the smallest possible height is $k$.\n\nIn this case, $y$-coordinate of the point $P_0$ is equal to $x$-coordinate in the plot.\n\nIn this case, $y$-coordinate of the point $P_1$ is equal to $x$-coordinate in the plot.\n\n\n-----Discussion-----\n\nThe figure below shows the two plots. The plot is $n=3$ vertices and the area is $k$. Thus, the minimum possible height is $k$ (the area of the plot is 10).\n\nThe figure below shows the third plot. The plot is $n=4$ vertices and the area is $k$. Thus, the minimum possible height is $k$ (the area of the plot is 10).\n\nThe figure below shows the forth plot. The plot is $n=5$ vertices and the area is $k$. Thus, the minimum possible height is $k$ (the area of the plot is 10).\n\nFor example, the figure below shows the five plots. The plot"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"4 12\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\nassert solution(\"999999999999999999 999999999999999986\") == \"3\"\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\n\"\"\""
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\n\n-----Constraints-----\n1 <= n, k <= 10^5\n0 <= stdin.length <= 20\n1 <= P_i.length <= 2n\nP_i[i] \u2260 0\n0 <= P_i[i] <= 10^18\n\n-----Time Limit-----\n50 ms\n\n-----Solutions-----\n\nclass Solution:\n    def solution(self, n, k):\n        return str(max(self.gap(self.gap(self.gap(n * n + 1, 1, 2), 1, 2))) + 1)"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n\"\"\"\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n1 <= n <= 10^9\n1 <= k <= 10^18\n-1000 <= stdin[i] <= 1000\n\nInput\n4 4\n\nOutput\n3\n\nInput\n999999999999999999 999999999999999986\n\nOutput\n3\n\n\n-----Bug-----\n\nThere is a bug which is impossible for the following example: [Image] \n\nThe area of this plot is 1, the height of this plot is 3.\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:\n\nThere is a bug which is impossible for the following example:"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= k <= 10^18\n\n------Time complexity--------\n\nO(n+k)\n\nO(n)\n\n------Space complexity--------\n\n0\n\n------Algorithm----------\n\nUse a stack to store the area of the plot with each vertex as it's own stack. Each stack is a 4-element tuple of the coordinates of the vertex (i.e. $P_{i}$) and the area. The area is also a tuple of the area of the base of each vertex.\n\n\n\n------Variables-----\n\nA stack represents a set of vertices which are all in the same direction and all in the same color. The stack is also a 4-element tuple of the coordinates of the vertex and the area. The vertex is always an element of the stack. The area is also an element of the stack.\n\nA vertex is a tuple of (x,y) coordinates, where $x$ and $y$ are the coordinates of the vertex."
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\nassert solution(\"4 1 7 4 1 3\") == \"YES\"\nassert solution(\"4 2 5 2 3 1\") == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 4 5 3 2\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\nassert solution(\"4 6 6 2 1\") == \"YES\"\nassert solution(\"3 4 5\") == \"YES\"\nassert solution(\"3 5 6\") == \"YES\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 3 5') == 'YES'\nassert solution('5 3 4') == 'NO'\nassert solution('4 4') == 'YES'\nassert solution('1') == 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 4 1 4 4 1 4 1 3\") == \"YES\"\nassert solution(\"4 4 1 4 4 1 4 1 3 2\") == \"YES\"\nassert solution(\"4 4 1 4 4 1 4 1 3 2 3\") == \"NO\"\nassert solution(\"4 4 1 4 4 1 4 1 3 3 3\") == \"NO\"\nassert solution(\"4 4 1 4 4 1 4 1 3 4 4\") == \"YES\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 6 2\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 5\") == \"YES\"\nassert solution(\"1 4\") == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 2 1') == 'YES'\nassert solution('3 2 1') == 'NO'\nassert solution('3 4 3') == 'YES'\nassert solution('4 5 5') == 'YES'\nassert solution('4 5 5') == 'NO'\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 3) == 2\nassert solution(5, 4) == 2\nassert solution(4, 5) == 2\nassert solution(4, 1) == 1\nassert solution(3, 2) == 2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"4 3\n2\"\"\"), \"2\"\nassert solution(\"\"\"4 3\n1\"\"\"), \"1\"\nassert solution(\"\"\"5 3\n1 2\n2 3\n2 4\n3 4\n4 5\n5 6\n7 5\n\"\"\"), \"7\"\nassert solution(\"\"\"1 4\n2 3\n1 2\n2 4\n3 4\n4 5\n\"\"\"), \"5\"\nassert solution(\"\"\"1 4\n2 3\n3 4\n4 5\n\"\"\"), \"2\"\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 5) == 2\nassert solution(10, 3) == 2\nassert solution(100, 10) == 2\nassert solution(1, 4) == 2\nassert solution(3, 2) == 1\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == 2\nassert solution(\"4 3\") == 2\nassert solution(\"1 2\") == 2\nassert solution(\"1 4\") == 1\nassert solution(\"1 2 3\") == 2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0,0) == 0\nassert solution(1,0) == 1\nassert solution(2,0) == 0\nassert solution(2,1) == 0\nassert solution(3,1) == 2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,1) == 2\nassert solution(4, 3) == 2\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= n\n\ninput = input()\n\nassert input == solution(int(input))\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 1\") == 2\nassert solution(\"4 3\") == 2\nassert solution(\"5 3\") == 2\nassert solution(\"10 6\") == 2\nassert solution(\"12 3\") == 2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 4) == 2\nassert solution(3, 2) == 2\nassert solution(4, 2) == 2\nassert solution(2, 2) == 1\nassert solution(3, 2) == 2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '0'"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4, 'incorrect'\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"0\"\nassert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"4\"\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 0 1 0 1') == 3\nassert solution('1 0 1 0 0') == 0\nassert solution('0 1 0 0 0 0 0') == 0\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n'''"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2, [1, 2, 3, 4, 5]) == 2\nassert solution(3, [10, 10, 10, 10, 10]) == 3\nassert solution(3, [10, 10, 10, 10, 10]) == -1\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,2,3,4) == 2\nassert solution(3,17,10,10) == 3\nassert solution(1,9,10,10) == -1\nassert solution(1,1) == 1\nassert solution(0) == -1"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1, \"Bran cannot be given by himself\"\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n\nprint(solution(input()))\n\n-----Examples-----\nInput\n2 3\n1 2\n\nOutput\n3\nInput\n5 1\n10\n\nOutput\n5\nInput\n2 2\n1 1\n\nOutput\n2\nInput\n2\n1 1\n\nOutput\n-1\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1, \"Internal Error\"\n\nstdin  = '2 3'\n\nassert solution(stdin) == 2, \"Error\"\n\nstdin  = '1 2'\n\nassert solution(stdin) == 3, \"Error\"\n\nstdin  = '10 10 10'\n\nassert solution(stdin) == 2, \"Error\"\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\nprint(solution(stdin))\n\n\"\"\""
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= k <= 10^9\n\n1 <= a_1, a_2, a_3,..., a_{n} <= 100\n\"\"\""
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == 2\nassert solution(\"3 17\") == 3\nassert solution(\"1 9\") == -1\n\"\"\"\n\nn, k = map(int, input().split())"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '2'\nassert solution(input) == '3'\nassert solution(input) == '17'\nassert solution(input) == '-1'\n\"\"\"\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\n-----Constraints-----\n1 <= n <= 500\n1 <= k <= 10^6\n\n1 <= a_1, a_2,..., a_{n}\u00a0<= 500\n0 <= b_1, b_2,..., b_{n}\u00a0<= 100\n\n[execution time limit] 4 seconds (py3)\n\n[input] array.string stdin\n\n[output] array.string\n\n[example]\nInput\n2\n2\n2\n\nOutput\n0\n0\n\n[1] - Palindromic dates\n\n\"\"\"\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 5) == 1\nassert solution(5, 2) == 1\nassert solution(2, 3) == 3\nassert solution(0, 0) == 0\nassert solution(6, 4) == 4\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 0) == 0\nassert solution(1, 1) == 2\nassert solution(1, 2) == 1\nassert solution(1, 3) == 0\nassert solution(1, 4) == 2\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 8\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1') == 1\nassert solution('2') == 5\nassert solution('3') == 13\n\nExample Input\n1\n1\n2\n3\n\nExample Output\n3\n\nExplanation\nA $1$-st order rhombus for all $n \\leq 2$ one obtains from a $n-1$-th order rhombus adding all cells which have a common side with it to it (look at the picture to understand it better).\n\"\"\""
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"Correct solution not found\"\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"13\"\n\n-----Code-----\n\nimport math"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(12) == 13\nassert solution(7) == 7\nassert solution(10) == 20\nassert solution(50) == 120\n\nInput\n2\n\nOutput\n5\nExplanation\nThe number of cells in a $n$-th order rhombus is 5.\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '1'\nassert solution(input) == '5'\nassert solution(input) == '13'\nassert solution(input) == '10'\n\"\"\""
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"13\"\n\n\"\"\""
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == 11\n\npass\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 5\n\nhttps://www.hackerrank.com/challenges/number-of-cells-in-a-rhombus/problem\n\nimport math\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"13\"\nassert solution(\"1\") == \"2\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n\nassert solution(stdin) == '13'\n\n\"\"\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"toosmallword\") == \"YES\", \"pangram\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"NO\", \"not pangram\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(12) == \"YES\", \"Test failed\"\nassert solution(35) == \"NO\", \"Test failed\""
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(12) == \"YES\"\nassert solution(35) == \"NO\"\n\n\n\"\"\"\n\nclass Solution:\n    def is_pangram(self, s: str) -> bool:\n        \"\"\"\n        if any character in the string is uppercase or lowercase:\n            is it a pangram.\n        \"\"\"\n\n        # check first char\n        if s[0].isupper():\n            return s.isupper()\n        elif s[0].islower():\n            return s.islower()\n        else:\n            return False\n        \n        # check rest of the string\n        for c in s:\n            if c.isupper() or c.islower():\n                return self.is_pangram(c)\n        return False\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"NO\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"toosmallword\") == \"YES\"\nassert solution(\"qjqxwxqxjqxjqxwxjxqxjqxjxqxjqxqxjxqxjxjxqxjxjxqxjxjqxjqxjqxqxjxjxqxjxqxjqxjqxjxqxjqxqxjqxjqxjqxjqxjqxjqxjqxjqxqxjqxjqxqxqxjqxjqxqxjqxqxqxjqxqxjqxjqxjqxqxjqxqxjqxqxqxqxqxjqxqxjqxqxjqxqxjqxqxqxqxqxjqxqxjqxjqxjqxqxqxjqxqxqxjqxjqxjqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxjqxqxqxqxqxqxqxjqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxqxq"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n\nclass Solution:\n    def is_pangram(self, word):\n        return True if word.isupper() and set(word).issubset(string.ascii_lowercase) else False\n\n    def is_pangram_1(self, word):\n        for letter in word:\n            if letter not in string.ascii_lowercase:\n                return False\n        return True\n\n    def is_pangram_2(self, word):\n        return True if sorted(word) == sorted(string.ascii_lowercase) else False\n\n    def is_pangram_3(self, word):\n        return True if word in set(string.ascii_lowercase) else False\n\n    def is_pangram_4(self, word):\n        return True if set(word).issubset(string.ascii_lowercase) else False\n\n    def is_pangram_5(self, word):\n        return True if word.islower() and set(word).issubset(string.ascii_lowercase) else False\n\n    def is_pangram_6(self, word):\n        return True if word.isupper() and set(word).issubset(string.ascii_lowercase) else False"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"toosmallword\",\"quickbrownfoxjumpsoverthelazydog\"]) == \"YES\", \"Pangram\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(12) == \"YES\", \"test_2\"\nassert solution(35) == \"NO\", \"test_2\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"toosmallword\") == \"NO\"\nassert solution(\"quickbrownfoxjumpsoverthelazydog\") == \"YES\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"YES\"\nassert solution(\"Thequickbrownfoxjumpsoverthelazydog\") == \"NO\"\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == \"00:09\"\nassert solution == \"20:20\"\nassert solution == \"10:10\""
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '10:10'\n\nInput\n23:59\n15\n\nOutput\n00:11\n\nInput\n20:20\n121\n\nOutput\n22:21\n\nInput\n10:10\n0\n\nOutput\n10:10\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"22:21\"\nassert solution(\"10:10\") == \"10:10\""
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '00:09'\nassert solution(stdin) == '00:09'\nassert solution(stdin) == '00:09'\nassert solution(stdin) == '00:09'\nassert solution(stdin) == '00:09'\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '22:21'\nassert solution(input()) == '00:09'\nassert solution(input()) == '00:00'\nassert solution(input()) == '00:00'\nassert solution(input()) == '00:00'\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"00:10\"\nassert solution(\"121\") == \"00:10\"\nassert solution(\"10:10\") == \"10:10\""
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"00:09\"\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '00:09'\nassert solution(stdin) == '00:09'\nassert solution(stdin) == '00:09'\nassert solution(stdin) == '00:09'\nassert solution(stdin) == '00:09'\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"23:59\"\n) == \"00:09\"\nassert solution(\n    \"20:20\"\n) == \"00:10\"\nassert solution(\n    \"121\"\n) == \"22:21\"\nassert solution(\n    \"0\"\n) == \"10:10\""
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '00:09'\nassert solution(stdin) == '00:10'\nassert solution(stdin) == '22:21'\nassert solution(stdin) == '10:10'\nassert solution(stdin) == '10:10'\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == 'NO'"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 191 193 194 195 196 197 198 199 200 201 201 202 202 203 204 205 206 207 208 208 209 210 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 242 243 245 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    inp := input().split()\n)\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\na = [list(map(int, sys.stdin.readline().split())) for _ in range(n)]\nprint(\"YES\" if len([1 for i in a[0] if i == 0 for j in a[1] if j == 0]) == 0 else \"NO\")\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 4\\n10100 11111\\n1111 1111 0001\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n1111 1111 0011\\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        switches = list(map(int, stdin.split()))\n        lamps = [0] * len(switches)\n        visited = [0 for _ in range(len(switches))]\n        for i, switch in enumerate(switches):\n            for j in range(switch):\n                if not visited[j]:\n                    lamps[j] = 1\n                    visited[j] = 1\n        answer = ''\n        for lamp in lamps:\n            if lamp:\n                answer += '1'\n            else:\n                answer += '0'\n        return answer"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10101\") == \"YES\"\nassert solution(\"01000\") == \"YES\"\nassert solution(\"00111\") == \"NO\"\nassert solution(\"10000\") == \"NO\""
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"1\"\nassert solution(\"1 2 3 4 5 6\") == \"3\"\nassert solution(\"3 4 5 6\") == \"4\"\nassert solution(\"5 6 9 4\") == \"5\"\nassert solution(\"1 2 3 4 5 6\") == \"3\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0.2'\nassert solution(stdin) == '0.3'\nassert solution(stdin) == '0.4'\nassert solution(stdin) == '0.5'\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 2, 3, 4, 5) == 1\nassert solution(3, 4, 5, 6, 7) == 0\nassert solution(3, 2, 4, 5, 8) == -1"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"6 4\") == \"1\"\nassert solution(\"1 2\") == \"0\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"0\"\n\nassert solution(\"2\") == -1\n\nassert solution(\"3\") == 1\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == \"YES\"\nassert solution(4) == \"NO\"\nassert solution(4) == \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nAssume that all inputs are valid.\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n\n6\n6 5\n16 13\n61690850361 24777622630\n34 33\n\nOutput\n\nYES\nNO\nNO\nNO\nYES\n\nassert solution(stdin) == \"NO\"\n\n'''"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 'NO'\nassert solution(1) == 'YES'\nassert solution(2) == 'NO'\nassert solution(3) == 'YES'\nassert solution(4) == 'NO'\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 'No'\nassert solution(3) == 'Yes'\nassert solution(4) == 'Yes'\nassert solution(4) == 'No'\nassert solution(5) == 'Yes'\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, \"YES\") == \"Yes\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\n-----Time Limit: 1 second (Sudoku)-----\nTime Limit: 1 second\n\nRuntime: O(n)\nSpace Complexity: O(n)\n\n\n'''"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"Yes\", \"No\"\nassert solution(inp) == \"No\", \"Yes\"\nassert solution(inp) == \"No\", \"Yes\"\nassert solution(inp) == \"Yes\", \"No\"\n\n\"\"\"\n\nclass Solution:\n    def find_invalid_number(self, num: int) -> int:\n        for i in range(1, 10001):\n            if self.is_number(i):\n                continue\n            left, right = 1, i\n            while left < right:\n                middle = (left + right) // 2\n                if self.is_number(middle):\n                    right = middle\n                else:\n                    left = middle + 1\n        return left - 1\n    \n    def is_number(self, num):\n        return num >= 0 and num <= 99\n    \n    def is_valid(self, num, i):\n        return i >= 1 and i <= 99\n    \n    def solution(self, stdin: str) -> str:\n        num = stdin\n        invalid = Solution()\n        return invalid.find_invalid_number(num)\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 1) == 'Yes', 'Only one point can be removed.'\nassert solution(3, 2) == 'No', 'One point can be removed.'\nassert solution(3, -1) == 'No', 'Only two points can be removed.'\nassert solution(4, -1) == 'No', 'One point can be removed.'\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input() == 'No') == 'No', \"Yes\"\nassert solution(input() == 'Yes') == 'Yes', \"No\"\n\"\"\""
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"Yes\"\nassert solution(\"1 1 -1\") == \"No\"\nassert solution(\"1 1 2 -1\") == \"Yes\"\nassert solution(\"1 1 2 -1 -1\") == \"No\"\nassert solution(\"1 1 2 3 4 -1\") == \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2 -1 -2\") == \"Yes\"\nassert solution(\"4 6\") == \"No\"\nassert solution(\"3 1 2 -1 1\") == \"No\"\nassert solution(\"3 1 -1 -1\") == \"No\"\nassert solution(\"1 1\") == \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 4 -1 -1 2\") == \"Yes\"\nassert solution(\"1 1 1 1 1 -1\") == \"No\"\nassert solution(\"1 0 0 0 0 0 0\") == \"No\"\nassert solution(\"1 3 0 0 0 0 -1\") == \"Yes\"\nassert solution(\"0 0 0 0 0 -1 0\") == \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(12) == \"Yes\"\n\n\n-----Time complexity-----\n\nO(n)\n\n\n-----Space Complexity-----\n\nO(n)\n\n\n-----Constraints-----\n1 <= n <= 10^5\n-10^5 <= x_i <= 10^5\n-10^9 <= y_i <= 10^9\n\n-----Constraints for size of input and output.\nInput input\n1\n1 1\n1 1 2\n1 2 1\n2 2 1\n2 3 2\n1 1 1 1\n\nOutput output\nYes\nExplanation\nSince there are two points in the plane, we can remove one point by deleting one point.\n\nSince there is only one point, we can not remove any point.\nSo, removing one point is impossible.\nSo, we can delete all points with the same coordinate, which means removing all point with the same coordinate again is impossible.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we can delete all points with the same coordinate with one point that is adjacent to another point with the same coordinate.\nSo, we"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '24'\n\"\"\"\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '6'\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('0') == 0\nassert solution('1') == 1\nassert solution('100') == 100\nassert solution('101') == 101\nassert solution('11111') == 11\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 1) == 1\nassert solution(4, 4) == 4\nassert solution(3, 4) == 6\nassert solution(2, 2) == 2\nassert solution(2, 2) == 2\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 6\n\n\"\"\""
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 6\n\nSolution:\n\n----------Step 1 ----------\n\n\n\n----------Step 2 ----------\n\n\n\n----------Step 3 ----------\n\n\n\n----------Step 4 ----------\n\n\n\n----------Step 5 ----------\n\n\n\n----------Step 6 ----------\n\n----------Step 7 ----------\n\n----------Step 8 ----------\n\n----------Step 9 ----------\n\n----------Step 10 ----------\n\n----------Step 11 ----------\n\n----------Step 12 ----------\n\n\n\n----------Step 13 ----------\n\n----------Step 14 ----------\n\n\n\n----------Step 15 ----------\n\n----------Step 16 ----------\n\n\n\n----------Step 17 ----------\n\n----------Step 18 ----------\n\n----------Step 19 ----------\n\n----------Step 20 ----------\n\n----------Step 21 ----------\n\n----------Step 22 ----------\n\n----------Step 23 ----------\n\n----------Step 24 ----------\n\n----------Step 25 ----------\n\n----------Step 26 ----------\n\n----------Step 27 ----------\n\n----------Step 28 ----------\n\n----------Step 29 ----------\n\n----------Step 30 ----------\n\n----------Step 31 ----------\n\n----------Step 32 ----------\n\n----------Step 33 ----------\n\n----------Step 34 ----------\n\n\n\n----------Step 35 ----------\n\n----------Step 36 ----------\n\n----------Step 37 ----------\n\n----------Step 38 ----------\n\n\n\n----------Step 39 ----------\n\n----------Step 40 ----------\n\n----------Step 41 ----------\n\n\n\n----------Step 42 ----------\n\n----------Step 43 ----------\n\n----------Step 44 ----------\n\n----------Step 45 ----------\n\n\n\n----------Step 46 ----------\n\n----------Step 47 ----------\n\n----------Step 48 ----------\n\n----------Step 49 ----------\n\n----------Step 50 ----------\n\n----------Step 51 ----------\n\n\n\n----------Step 52 ----------\n\n----------Step 53 ----------\n\n----------Step 54 ----------\n\n----------Step 55 ----------\n\n----------Step 56 ----------\n\n----------Step 57 ----------\n\n----------Step 58 ----------\n\n----------Step 59 ----------\n\n----------Step 60 ----------\n\n----------Step 61 ----------\n\n----------Step 62 ----------\n\n----------Step 63 ----------\n\n----------Step 64 ----------\n\n----------Step 65 ----------\n\n----------Step 66 ----------\n\n----------Step 67 ----------\n\n----------Step 68 ----------\n\n----------Step 69 ----------\n\n----------Step 70 ----------\n\n----------Step 71 ----------\n\n----------Step 72 ----------\n\n----------Step 73 ----------\n\n----------Step 74 ----------\n\n----------Step 75 ----------\n\n----------Step 76 ----------\n\n----------Step 77 ----------\n\n----------Step 78 ----------\n\n----------Step 79 ----------\n\n----------Step 80 ----------\n\n----------Step 81 ----------\n\n----------Step 82 ----------\n\n----------Step 83 ----------\n\n----------Step 84 ----------\n\n----------Step 85 ----------\n\n----------Step 86 ----------\n\n----------Step 87 ----------\n\n----------Step 88 ----------\n\n----------Step 89 ----------\n\n----------Step 90 ----------\n\n----------Step 91 ----------\n\n----------Step 92 ----------\n\n----------Step 93 ----------\n\n\n----------Step 94 ----------\n\n----------Step 95 ----------\n\n----------Step 96 ----------\n\n----------Step 97 ----------\n\n\n----------Step 98 ----------\n\n----------Step 99 ----------\n\n\n\n----------Step 100 ----------\n\n----------Step 101 ----------\n\n----------Step 102 ----------\n\n----------Step 103 ----------\n\n----------Step 104 ----------\n\n----------Step 105 ----------\n\n\n----------Step 106 ----------\n\n----------Step 107 ----------\n\n----------Step 108 ----------\n\n----------Step 109 ----------\n\n----------Step 110 ----------\n\n----------Step 111 ----------\n\n----------Step 112 ----------\n\n\n----------Step 113 ----------\n\n----------Step 114 ----------\n\n----------Step 115 ----------\n\n----------Step 116 ----------\n\n----------Step 117 ----------\n\n----------Step 118 ----------\n\n\n----------Step 119 ----------\n\n----------Step 120 ----------\n\n\n----------Step 121 ----------\n\n----------Step 122 ----------\n\n----------Step 123 ----------\n\n\n----------Step 124 ----------\n\n----------Step 125 ----------\n\n----------Step 126 ----------\n\n\n----------Step 127 ----------\n\n----------Step 128 ----------\n\n----------Step 129 ----------\n\n----------Step 130 ----------\n\n\n----------Step 131 ----------\n\n----------Step 132 ----------\n\n----------Step 133 ----------\n\n----------Step 134 ----------\n\n\n----------Step 135 ----------\n\n----------Step 136 ----------\n\n----------Step 137 ----------\n\n----------Step 138 ----------\n\n----------Step 139 ----------\n\n\n----------Step 140 ----------\n\n----------Step 141 ----------\n\n----------Step 142 ----------\n\n----------Step 143 ----------\n\n----------Step 144 ----------\n\n\n----------Step 145 ----------\n\n----------Step 146 ----------\n\n----------Step 147 ----------\n\n----------Step 148 ----------\n\n----------Step 149 ----------\n\n----------Step 150 ----------\n\n\n----------Step 151 ----------\n\n----------Step 152 ----------\n\n----------Step 153 ----------\n\n----------Step 154 ----------\n\n----------Step 155 ----------\n\n----------Step 156 ----------\n\n----------Step 157 ----------\n\n\n----------Step 158 ----------\n\n----------Step 159 ----------\n\n----------Step 160 ----------\n\n----------Step 161 ----------\n\n----------Step 162 ----------\n\n----------Step 163 ----------\n\n\n----------Step 164 ----------\n\n----------Step 165 ----------\n\n----------Step 166 ----------\n\n----------Step 167 ----------\n\n----------Step 168 ----------\n\n----------Step 169 ----------\n\n\n----------Step 170 ----------\n\n----------Step 171 ----------\n\n----------Step 172 ----------\n\n----------Step 173 ----------\n\n\n----------Step 174 ----------\n\n----------Step 175 ----------\n\n----------Step 176 ----------\n\n----------Step 177 ----------\n\n----------Step 178 ----------\n\n----------Step 179 ----------\n\n\n----------Step 180 ----------\n\n----------Step 181 ----------\n\n----------Step 182 ----------\n\n----------Step 183 ----------\n\n----------Step 184 ----------\n\n\n----------Step 185 ----------\n\n----------Step 186 ----------\n\n----------Step 187 ----------\n\n----------Step 188 ----------\n\n----------Step 189 ----------\n\n\n----------Step 190 ----------\n\n----------Step 191 ----------\n\n----------Step 192 ----------\n\n\n----------Step 193 ----------\n\n----------Step 194 ----------\n\n----------Step 195 ----------\n\n----------Step 196 ----------\n\n----------Step 197 ----------\n\n\n----------Step 198 ----------\n\n----------Step 199 ----------\n\n\n----------Step 200 ----------\n\n----------Step 201 ----------\n\n----------Step 202 ----------\n\n\n----------Step 203 ----------\n\n----------Step 204 ----------\n\n----------Step 205 ----------\n\n\n----------Step 206 ----------\n\n----------Step 207 ----------\n\n----------Step 208 ----------\n\n----------Step 209 ----------\n\n\n----------Step 210 ----------\n\n----------Step 211 ----------\n\n----------Step 212 ----------\n\n----------Step 213 ----------\n\n----------Step 214 ----------\n\n----------Step 215 ----------\n\n\n----------Step 216 ----------\n\n----------Step 217 ----------\n\n----------Step 218 ----------\n\n\n----------Step 219 ----------\n\n----------Step 220 ----------\n\n----------Step 221 ----------\n\n----------Step 222 ----------\n\n\n----------Step 223 ----------\n\n----------Step 224 ----------\n\n----------Step 225 ----------\n\n----------Step 226 ----------\n\n\n----------Step 227 --------"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '36'"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1,2) == 1\nassert solution(4,3) == 6\nassert solution(100, 12) == 144\n\n\n-----Constraints-----\n\n1 <= A, B <= 10^9\n\"\"\""
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,2) == 2\nassert solution(5,9) == 14\nassert solution(8,12) == 12\nassert solution(1,6) == 2\nassert solution(2,6) == 6\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4608 4096'\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '9 8'\nassert solution(stdin) == '4608 4096'\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == '9 8'\nassert solution(2) == '4608 4096'\n\n-------------------\n\nNot correct.\n\n-------------------\n\nIf you're stuck, you can try to make the algorithm more efficient by not using the double for loop.\n\nThe idea is that if you run the code a couple of times, each time it prints out a different number (this is not correct), \nand it will return a different value (because of an infinite loop). \n\nFor example, if we have a string and we run the code twice, the first time it prints out the maximum value of \nthe string, the second time it prints out the maximum value of the string, the third time it prints out the \nmaximum value of the string and so on.\n\nWe could not get the correct result using the double for loop.\n\nI will try to change this.\n\n\n\n-------------------"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == '9'\nassert solution(512) == '4608'\nassert solution(1024) == '8'\nassert solution(2048) == '4608'\nassert solution(4*7*9) == '2048'\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == '9', '1 is not composite'\nassert solution(1024) == '24', '1024 is not composite'\nassert solution(4608) == '4608', '4608 is not composite'\nassert solution(0) == '9', '0 is not composite'\nassert solution(514) == '514', '514 is not composite'\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1024\"\nassert solution(stdin) == \"4608\"\nassert solution(stdin) == \"23\"\nassert solution(stdin) == \"211\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"12\") == 4608\nassert solution(\"1234\") == 4608\nassert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"1024\") == 1024\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == \"9 8\"\nassert solution(512) == \"4608 4096\"\nassert solution(8) == \"7\"\nassert solution(3) == \"0\"\nassert solution(12) == \"9\"\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '4608 4096'\n'''\nimport sys\ninput = sys.stdin.readline\n\nN = input().strip()\n\nN = int(N)\na = 1\nb = 1\n\nwhile a+b!=N:\n    \n    if N%a==0 and N%b==0:\n        print(a,b)\n        break\n    \n    if N%a!=0:\n        a+=1\n    \n    if N%b!=0:\n        b+=1\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == \"9 8\", \"The first input is not possible\"\nassert solution(2) == \"2 5\", \"The second input is not possible\"\nassert solution(3) == \"5 3\", \"The third input is not possible\"\nassert solution(4) == \"13 1\", \"The fourth input is not possible\"\nassert solution(5) == \"1 1\", \"The fifth input is not possible\"\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 10\") == 35, 'incorrect'\nassert solution(\"2 3 5\") == 26, 'incorrect'\nassert solution(\"4 1 3\") == 0, 'incorrect'\nassert solution(\"4 3 10\") == 0, 'incorrect'\nassert solution(\"4 4 10\") == 0, 'incorrect'\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"35\""
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"35\"\nassert solution(input()) == \"None\"\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 35\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"35\""
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 35\n\"\"\""
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 3 10\") == \"35\"\nassert solution(\n    \"1 2 20\") == \"35\"\nassert solution(\n    \"2 3 30\") == \"35\"\nassert solution(\n    \"1 3 45\") == \"35\"\nassert solution(\n    \"1 2 1\") == \"35\"\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n\"\"\"\n5 3\n2 1 20\n3 3 30\n2 3 45\n1 3 45\n1 2 30\n5 3 45\n1 2 45\n2 4 35\n1 2 45\n2 3 35\n1 3 35\n3 2 35\n2 3 35\n1 3 35\n1 2 35\n1 3 35\n2 3 35\n2 4 35\n2 3 35\n1 3 35\n2 4 35\n3 4 35\n1 3 35\n2 4 35\n3 2 35\n2 3 35\n2 4 35\n2 3 35\n2 4 35\n2 3 35\n2 4 35\n2 3 35\n3 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n3 2 35\n1 3 35\n3 2 35\n3 4 35\n2 4 35\n3 4 35\n2 4 35\n3 4 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n3 2 35\n1 2 35\n3 4 35\n3 2 35\n1 3 35\n3 2 35\n3 4 35\n3 2 35\n1 3 35\n2 4 35\n1 3 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n3 4 35\n1 3 35\n1 2 35\n3 4 35\n1 3 35\n1 2 35\n3 4 35\n2 4 35\n1 3 35\n3 4 35\n1 3 35\n2 4 35\n3 4 35\n3 2 35\n1 2 35\n2 4 35\n1 2 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n3 4 35\n1 3 35\n1 2 35\n2 4 35\n2 4 35\n3 4 35\n3 2 35\n1 2 35\n1 2 35\n1 3 35\n3 4 35\n2 4 35\n3 4 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n2 4 35\n3 4 35\n1 3 35\n1 2 35\n2 4 35\n3 4 35\n2 4 35\n3 4 35\n3 2 35\n2 4 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 2 35\n1 3 35\n1 2 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 3 35\n1 2 35\n1 2 35\n1 3 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 3 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2 35\n1 2"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 3 10\") == \"35\"\nassert solution(\"1 2 20\") == \"50\"\nassert solution(\"2 3 30\") == \"45\""
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3 4\", \"1 2\", \"2 4\", \"3 2\"]) == \"50\"\nassert solution([\"3 3\", \"1 4\", \"1 2\", \"1 3\"]) == \"50\"\nassert solution([\"1 4\", \"2 3\", \"3 2\"]) == \"50\"\nassert solution([\"3 2\", \"2 4\", \"2 3\", \"3 4\"]) == \"35\"\nassert solution([\"2 3\", \"1 2\", \"1 3\", \"1 4\"]) == \"35\"\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"7\"\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ba 3\") == 7\nassert solution(\"abc 4\") == 8\nassert solution(\"cbaa 5\") == 11\nassert solution(\"ba 1\") == -1\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n'''"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ba 3') == 7\nassert solution('abc 4') == 9\nassert solution('cbaa 5') == -1\n\n\"\"\"\n\nimport sys\n\nn, c = map(int, sys.stdin.readline().rstrip().split())\narr = sorted(list(map(int, sys.stdin.readline().rstrip().split())))"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ba 3\") == \"7\"\nassert solution(\"abc 4\") == \"7\"\nassert solution(\"cbaa 5\") == \"7\"\nassert solution(\"baa 5\") == \"7\"\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ba 3\") == \"7\"\nassert solution(\"abc 4\") == \"9\"\nassert solution(\"cbaa 5\") == \"7\"\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"7\"\n\n\"\"\"\nimport sys\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ba 3\") == \"7\"\nassert solution(\"abc 4\") == \"7\"\nassert solution(\"cbaa 5\") == \"7\"\n\n\"\"\""
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ba 3\") == \"7\"\nassert solution(\"abc 4\") == \"7\"\nassert solution(\"cbaa 5\") == \"7\"\nassert solution(\"ba 5\") == \"1\"\nassert solution(\"cbaa 3\") == \"1\"\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 6\") == \"7\"\nassert solution(\"6 6 3\") == \"7\"\nassert solution(\"6 6 3 4 5\") == \"7\"\nassert solution(\"2 2\") == \"7\"\nassert solution(\"2 2 1\") == \"7\"\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n\"\"\"\n\nfrom functools import reduce"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\nassert solution(stdin) == 7\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 3\",\n    \"6 6\",\n) == \"7\"\nassert solution(\n    \"1 3\",\n    \"6 6\",\n) == \"7\"\nassert solution(\n    \"1 3\",\n    \"6 6\",\n) == \"7\"\nassert solution(\n    \"1 3\",\n    \"6 6\",\n) == \"7\"\nassert solution(\n    \"1 3\",\n    \"6 6\",\n) == \"7\"\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"4\", \"3\"]) == \"7\"\nassert solution([\"6\", \"5\"]) == \"7\"\nassert solution([\"6\", \"7\"]) == \"7\"\nassert solution([\"5\", \"4\", \"1\"]) == \"7\"\nassert solution([\"2\", \"4\", \"1\"]) == \"7\"\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"4 3\"\n) == 7\nassert solution(\n    \"6 6\"\n) == 7\n\nassert solution(\n    \"6 6\"\n) == 7\nassert solution(\n    \"6 6\"\n) == 7\n\nassert solution(\n    \"4 4\"\n) == 7\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 7, 'Your function does not find the solution'\n'''\nimport unittest\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution(stdin)) == 7\n\"\"\""
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\n\n-----Explanation-----\n\nIn the first example, one has to take all 6 candies and obtain the xor-sum of 7.\n\nIn the second example, one can take all 6 candies and obtain the xor-sum of 7.\n\nIn the third example, one has to take all 6 candies and obtain the xor-sum of 7.\n\nIn the fourth example, one has to take all 6 candies and obtain the xor-sum of 7.\n\nIn the fifth example, one has to take all 6 candies and obtain the xor-sum of 7.\n\nIn the sixth example, one has to take all 6 candies and obtain the xor-sum of 7.\n\n-----Constraints-----\n0 <= n, k <= 10^18\n\n-----Time Limit: 1 sec per case--------\n\nInput =\u00a06\u00a0;\u00a0k =\u00a06\n\nOutput =\u00a07\n\nInput =\u00a06\u00a0;\u00a0n =\u00a06\n\nOutput =\u00a07\n\n\n\n-----Bug Fixes-----\n\nIn the first sample, the maximum xor-sum is 4.\n\nIn the second sample, the maximum xor-sum is 7.\n\nIn the third sample, the maximum xor-sum is 7.\n\nIn the fourth sample, the maximum xor-sum is 7.\n\nIn the fifth sample, the maximum xor-sum is 7.\n\nIn the sixth sample, the maximum xor-sum is 7.\n\n-----Bug Fixes Fixer-----\n\nIn the first sample, the maximum xor-sum is 6.\n\nIn the second sample, the maximum xor-sum is 7.\n\nIn the third sample, the maximum xor-sum is 7.\n\nIn the fourth sample, the maximum xor-sum is 7.\n\nIn the fifth sample, the maximum xor-sum is 7.\n\nIn the sixth sample, the maximum xor-sum is 7.\n\nIn the seventh sample, the maximum xor-sum is 7.\n\nIn the eighth sample, the maximum xor-sum is 7.\n\nIn the ninth sample, the maximum xor-sum is 7.\n\nIn the tenth sample, the maximum xor-sum is 7.\n\n-----Fixed----\n\nIn the first sample, the maximum xor-sum is 7.\n\nIn the second sample, the maximum xor-sum is 7.\n\nIn the third sample, the maximum xor-sum is 7.\n\nIn the fourth sample, the maximum xor-sum is 7.\n\nIn the fifth sample, the maximum xor-sum is 7.\n\nIn the sixth sample, the maximum xor-sum is 7.\n\nIn the seventh sample, the maximum xor-sum is 7.\n\nIn the eighth sample, the maximum xor-sum is 7.\n\nIn the ninth sample, the maximum xor-sum is 7.\n\nIn the tenth sample, the maximum xor-sum is 7.\n\n-----Fixer-----\n\nIn the first sample, the maximum xor-sum is 7.\n\nIn the second sample, the maximum xor-sum is 7.\n\nIn the third sample, the maximum xor-sum is 7.\n\nIn the fourth sample, the maximum xor-sum is 7.\n\nIn the fifth sample, the maximum xor-sum is 7.\n\nIn the sixth sample, the maximum xor-sum is 7.\n\nIn the seventh sample, the maximum xor-sum is 7.\n\nIn the eighth sample, the maximum xor-sum is 7.\n\nIn the ninth sample, the maximum xor-sum is 7.\n\nIn the tenth sample, the maximum xor-sum is 7.\n\nIn the eleven sample, the maximum xor-sum is 7.\n\nIn the twelve sample, the maximum xor-sum is 7.\n\nIn the thirteen sample, the maximum xor-sum is 7.\n\nIn the fourteen sample, the maximum xor-sum is 7.\n\n\n-----Constraints----\n0 <= n <= 10^18\n\n0 <= k <= 10^18\n\n\n-----Time Limit: 1 sec per case--------\n\nSample case: 6 4 6\n\nSample case: 6 5 6\n\nSample case: 6 6 6\n\nSample case: 6 7 6\n\nSample case: 6 8 6\n\nSample case: 6 9 6\n\nSample case: 6 10 6\n\nSample case: 6 11 6\n\nSample case: 6 12 6\n\nSample case: 6 13 6\n\nSample case: 6 14 6\n\nSample case: 6 15 6\n\nSample case: 6 16 6\n\nSample case: 6 17 6\n\nSample case: 6 18 6\n\nSample case: 6 19 6\n\nSample case: 6 20 6\n\nSample case: 6 21 6\n\nSample case: 6 22 6\n\nSample case: 6 23 6\n\nSample case: 6 24 6\n\nSample case: 6 25 6\n\nSample case: 6 26 6\n\nSample case: 6 27 6\n\nSample case: 6 28 6\n\nSample case: 6 29 6\n\nSample case: 6 30 6\n\nSample case: 6 31 6\n\nSample case: 6 32 6\n\nSample case: 6 33 6\n\nSample case: 6 34 6\n\nSample case: 6 35 6\n\nSample case: 6 36 6\n\nSample case: 6 37 6\n\nSample case: 6 38 6\n\nSample case: 6 39 6\n\nSample case: 6 40 6\n\nSample case: 6 41 6\n\nSample case: 6 42 6\n\nSample case: 6 43 6\n\nSample case: 6 44 6\n\nSample case: 6 45 6\n\nSample case: 6 46 6\n\nSample case: 6 47 6\n\nSample case: 6 48 6\n\nSample case: 6 49 6\n\nSample case: 6 50 6\n\nSample case: 6 51 6\n\nSample case: 6 52 6\n\nSample case: 6 53 6\n\nSample case: 6 54 6\n\nSample case: 6 55 6\n\nSample case: 6 56 6\n\nSample case: 6 57 6\n\nSample case: 6 58 6\n\nSample case: 6 59 6\n\nSample case: 6 60 6\n\nSample case: 6 61 6\n\nSample case: 6 62 6\n\nSample case: 6 63 6\n\nSample case: 6 64 6\n\nSample case: 6 65 6\n\nSample case: 6 66 6\n\nSample case: 6 67 6\n\nSample case: 6 68 6\n\nSample case: 6 69 6\n\nSample case: 6 70 6\n\nSample case: 6 71 6\n\nSample case: 6 72 6\n\nSample case: 6 73 6\n\nSample case: 6 74 6\n\nSample case: 6 75 6\n\nSample case: 6 76 6\n\nSample case: 6 77 6\n\nSample case: 6 78 6\n\nSample case: 6 79 6\n\nSample case: 6 80 6\n\nSample case: 6 81 6\n\nSample case: 6 82 6\n\nSample case: 6 83 6\n\nSample case: 6 84 6\n\nSample case: 6 85 6\n\nSample case: 6 86 6\n\nSample case: 6 87 6\n\nSample case: 6 88 6"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"7\"\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, [1, 1, 1]) == 3\nassert solution(3, [1, 2]) == 3\nassert solution(3, [1, 2, 3]) == 3\nassert solution(3, [2, 1]) == 3\nassert solution(3, [2, 2]) == 3\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"4\"\nassert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n5\n1 2\n1 2\n1 2\n1 2\n1 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n\"\"\"\n) == \"5\"\n\nassert solution(\n\"\"\"\n3\n1 1\n1 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2 1\n2 2\n2"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n0 <= n <= 10^5\n\n------Time Limit---------\nO(n*ln(n))\n\n\n------Space Limit---------\nO(1)\n'''\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test_input) == '4'\nassert solution(input) == '4'\nassert solution(input) == '4'\n\n-----Time complexity-----\n\nTime complexity of solution:\n    \n    Time complexity of solution: O(n^2)\n\nSpace Complexity:\n    \n    Space Complexity of solution: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\nUse a dictionary to store the coordinates of each point on the plane.\n\nAfter computing the plane, find the minimum point length.\n\nWhen computing the plane, you need to check if the point is inside the triangle or not.\n\nIf the point is inside the triangle, you need to return the length of the shorter side.\n\nIf the point is outside the triangle, you need to return the length of the shorter side.\n\nYou have to write the algorithm in O(n) space.\n\nIf a point is outside the triangle, you need to return the length of the shorter side.\n\nIn every iteration, you need to do a test. If the point is inside the triangle, you need to do another test.\n\nIf it's outside the triangle, you need to return the length of the shorter side.\n\nThere are $n$ points on the plane, $(x_1,y_1), (x_2,y_2), \\ldots, (x_n,y_n)$.\n\n-----Input-----\n\nFirst line contains one integer $n$ ($1 \\leq n \\leq 10^5$).\n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($1 \\leq x_i,y_i \\leq 10^9$).\n\n\n-----Output-----\n\nPrint the minimum length of the shorter side. It can be proved that it's always an integer.\n\n\n-----Example 1-----\nInput\n\n3\n1 1\n1 2\n2 1\n\nOutput\n\n3\nInput\n\n4\n1 1\n1 2\n2 1\n2 2\n\nOutput\n\n4\n\n-----Example 2-----\nInput\n\n3\n1 1\n1 2\n2 1\n2 2\n\nOutput\n\n3\nInput\n\n4\n1 1\n1 2\n2 1\n2 2\n\nOutput\n\n4\n\n-----Explanation-----\n\nIllustration for the first example: [Image]\n\nIllustration for the second example: [Image]\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 2\") == \"1\"\nassert solution(\"0 1\") == \"2\"\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 1 1\") == \"5\"\n\n\n\"\"\""
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n0 < n < 10^4\n\n------Memory Use-----\nO(n)\n\n------Time Complexity-----\nO(n)\n\n------Space Complexity-----\nO(n)"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"3 4\"\nassert solution(\"4 3\") == \"4 3\"\nassert solution(\"5 5\") == \"5 5\"\n\nConstraints\n1 <= n <= 10^5\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == 0\nassert solution(\"one\") == 1\nassert solution(\"two\") == 2\nassert solution(\"three\") == 3\nassert solution(\"four\") == 4\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"foo\") == \"foo\", \"Test failed\""
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(nniinneetteeeenn) == 2\nassert solution(nineteenineteen) == 2\nassert solution(nneteenabcnneteenabcnneteenabcnneteenabcii) == 1\n\n\n\n-----Algorithm-----\n\nThe idea of the problem is that we keep track of the occurrence of each letter in the string.\n\nSo, if we have a letter \"b\", then we can count how many times \"b\" appears as a string, which is equivalent to \"1\" times.\n\nFor example, \"b\" occurs 2 times, so we have 2 appearances of \"b\".\n\nWe now have to know how many times a letter \"b\" occurs.\n\nSince we can't just repeat the letter \"b\" once, we have to get the occurrence of it from the string.\n\nWe then have to keep track of how many times \"b\" occurs in the string.\n\nThe last time we saw \"b\", we will already have the occurrence of it, and we can now just increment it.\n\nWe can only reach the end of the string if we saw a letter of the same index.\n\nNow we have to find out how many times \"b\" occurs in the string.\n\nThere are two ways of finding the occurrence of \"b\":\n\n1. First, we have to find the index of the \"b\" letter of the string.\n\n2. Next, we have to count how many times \"b\" occurs in the string.\n\nFinally, we have to subtract the number of times \"b\" occurs from the number of \"b\" occurrences in the string.\n\nSo, the sequence of occurrences of \"b\" is simply:\n\nb appears twice\n\nThen, we have to find the \"b\" index of the \"b\" occurrence in the string.\n\nIf the number of occurrences is 1, then we are done.\n\nIf the number of occurrences is 2, then we must have one \"b\" index, and we have to search for \"b\".\n\nSo, we have to increment the index of the occurrence of \"b\" by 2, and we have to increment the number of occurrences by 1.\n\nBut, if we have a \"b\" occurrence with a number of 1, the sequence of occurrences of \"b\" is just:\n\nb appears twice\n\nSo, we have to find the index of the \"b\" occurrence in the string.\n\nSince we have a \"b\" index, we have to subtract the number of occurrences from the number of \"b\" occurrences in the string.\n\nSo, we have to return the number of occurrences, which is the number of times we have to get a \"b\" appearance in the string.\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.counter = {}\n        self.end = 0\n        self.n = len(input())\n        \n    def getMaxCount(self):\n        return self.counter[self.end]\n        \n    def incrementAll(self, i, x):\n        self.counter[i] += x\n        \n        if i == self.end:\n            self.end += 1\n            \n            if self.end == len(self.counter):\n                self.end = 0\n                \n        else:\n            self.incrementAll(self.end + 1, x)\n            \n    def getMaxCount2(self, s):\n        res = 0\n        \n        for c in s:\n            res += self.counter[ord(c) - ord('a')]\n        \n        return res\n            \n        \n        "
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2, 'incorrect result'\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"aab\") == \"aab\"\nassert solution(\"aaabbbbb\") == \"ababbb\"\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"niinneetteeeenn\") == 2\nassert solution(\"nneteenabcnneteenabcnneteenabcnneteenabcii\") == 2\nassert solution(\"nineteenineteen\") == 2\nassert solution(\"\") == 0\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(nniinneetteeeenn) == 2\nassert solution(nneteenabcnneteenabcnneteenabcnneteenabcii) == 2\nassert solution(nineteenineteen) == 3"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"3 4\") == \"2\"\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin) == -1\n\n-----Constraints-----\n1 <= stdin.length <= 10^9\n1 <= p, y <= 10^9\n\n\n-----Time Limit (hint: 0.05s)-----\nWe can use 30s to solve this problem, I prefer a shorter solution than 1s.\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 5) == 5, \"There are no valid branches in second sample case.\"\nassert solution(3, 6) == -1, \"There are no valid branches in second sample case.\"\nassert solution(3, 4) == 3, \"There are no valid branches in second sample case.\"\nassert solution(2, 2) == -1, \"There are no valid branches in second sample case.\"\nassert solution(3, 3) == 2, \"There are no valid branches in second sample case.\"\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, 5) == 5\nassert solution(3, 4) == -1\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\nInput\n3 4\n\nOutput\n5\n\nInput\n4 4\n\nOutput\n-1\n\nExplanation\n\nThere are no suitable branches, so the answer is -1.\n\n'''\n\n\nclass Solution:\n    def solution(self, stdin: str, stdout: str) -> int:\n        s = str(stdin)\n        y = int(s[-1])\n        y = y + 2\n        p = y - 2\n        if p < 1:\n            stdout = -1\n            return stdout\n\n        def solve(p, y):\n            if y == 2:\n                if p < 1:\n                    stdout = -1\n                    return stdout\n                else:\n                    stdout = y\n                    return y\n            else:\n                if p == 1:\n                    return y\n                else:\n                    stdout = solve(p - 1, y)\n                    return y\n\n        return solve(p, y)\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == -1\n\n\n-----Constraints-----\n1 <= p <= 10^9\n1 <= y <= 10^9\n\n\"\"\"\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 2) == 5, 'output error'\nassert solution(6, 5) == -1, 'output error'\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == -1\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\nInput\n3 4\n\nOutput\n5\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '10'\nassert solution(inp) == '5'\nassert solution(inp) == '6'\nassert solution(inp) == '7'\nassert solution(inp) == '3'\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, [3, 5, 5]) == 5\nassert solution(6, [3, 7, 5, 4, 5]) == 5\nassert solution(6, [4, 4, 5, 5, 5]) == 5\nassert solution(2, [5, 5, 5, 5]) == 0\nassert solution(1, [1, 1, 1, 1]) == 0\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '40'\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 10^5,\n0 \u2264 a_1, a_2,..., a_{n} \u2264 100,\n0 \u2264 stdin[i] \u2264 100,\nk \u2264 100,\nstdin[0] \u2264 stdin[i] + stdin[i + 1] \u2264 stdin[n] + stdin[n + 1]\n\"\"\""
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"40\"\nassert solution(input()) == \"30\""
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 1 20\") == 40\nassert solution(\"7 3 50\") == 30\nassert solution(\"10 5 100\") == 20\n\n\n\"\"\"\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 4 0\") == \"30\"\nassert solution(\"10 5 100\") == \"40\"\nassert solution(\"7 3 50\") == \"30\"\nassert solution(\"10 5 100\") == \"40\"\nassert solution(\"10 5 100\") == \"40\"\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    '5 1 20',\n    '0 27 32 21 19',\n    '27 0 0 0 99 33 22',\n    '62 0 0 0',\n    '0 0 0 0',\n    '0 0 0 0',\n    '0 0 0 0',\n    '0 0 0 0',\n    '0 0 0 0',\n    '0 0 0 0',\n    '0 0 0 0',\n    '0 0 0 0',\n) == 40,'solution() should return 40'\n\n\nassert solution(\n    '7 3 50',\n    '0 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n    '0 0 1 0 0',\n) == 30,'solution() should return 30'\n\n\nassert solution(\n    '10 5 100',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0 1 0 0',\n    '1 0"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"40\""
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5 1 20\") == 40\nassert solution(\n    \"7 3 50\") == 30\nassert solution(\n    \"10 5 100\") == 20\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 40\nassert solution(stdin, k) == 30\nassert solution(stdin, k, 6) == 20\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Examples-----\nInput\n2 2\n1 1\n6 1\n1 6\n1 1\n\nOutput\nYES\nInput\n3 3\n4 4 5\n4 4 5\n5 4 5\n4 4 5\n\nOutput\nNO\nInput\n3 3\n1 2 3\n4 5 6\n7 8 9\n1 4 7\n2 5 6\n3 8 9\n\nOutput\nNO\n\n\n\"\"\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n0 < n, m < 500\n\n0 < A[i] < 10^9\n0 < B[i] < 10^9\n\nA, B have to be transposed by matrix transpose\nB can be transposed by matrix transpose\n\"\"\"\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\n\nimport sys\nsys.stdin.readline()\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('4 4') == 'NO'\nassert solution('5 5') == 'YES'\nassert solution('6 6') == 'YES'\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4 7 8 9\") == \"YES\"\n\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"defgh\") == 5\nassert solution(\"a\") == -1\nassert solution(\"defgh\") == 1\nassert solution(\"abcd\") == 5\nassert solution(\"abcd\") == 6\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nassert solution(\"abcd\") == 4\nassert solution(\"defgh\") == 5\nassert solution(\"aaa\") == -1\n\"\"\"\n\nclass Solution:\n    def LCS(self, str1, str2):\n        m = {}\n        n = {}\n        for i in str1:\n            if i in m:\n                m[i] += 1\n            else:\n                m[i] = 1\n\n        for i in str2:\n            if i in n:\n                n[i] += 1\n            else:\n                n[i] = 1\n\n        def find(v):\n            if v in m:\n                return m[v], v\n            if v in n:\n                return n[v], v\n            return v, -1\n\n        return max(map(find, n), key=find)\n\ntests = [\n    ([\"abc\",\"ab\",\"abc\",\"abc\",\"abc\",\"abc\",\"abc\",\"abc\",\"abc\",\"abc\"], \"abc\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\"),\n    ([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"], \"a\")\n]\nfor a, b in tests:\n    assert Solution().LCS(a, b) == len(a), \"Length of LCS is wrong\"\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp[0]) == inp[1]\nassert solution(inp[1]) == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(a=\"defgh\") == 5\n\n\n-----Constraints-----\n\n1 <= |stdin| <= 10^5\n\n\"\"\"\n\nclass Solution:\n    def findLcs(self, a: str, b: str) -> int:\n        n = len(a) + len(b)\n        dp = [[0 for _ in range(n)] for _ in range(n)]\n        \n        for i in range(1, n):\n            dp[i][i] = 1\n            for j in range(i, 0, -1):\n                if a[j-1] == b[i-1]:\n                    dp[i][j] = dp[i-1][j-1] + 1\n                else:\n                    dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n        \n        return n - dp[-1][-1]"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('abcd') == 5\nassert solution('defgh') == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5, \"Longest common subsequence doesn't exist.\"\nassert solution(stdin) == \"-1\", \"Longest common subsequence doesn't exist.\"\nassert solution(stdin) == \"defgh\"\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a) == 5\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abcde\") == 5\nassert solution(\"defgh\") == -1\nassert solution(\"abcd\") == 5\nassert solution(\"a\") == -1\nassert solution(\"\") == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a) == 5\nassert solution(b) == \"a\""
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '82'\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n\n\nExplanation\nsolution is not 100% accurate because one of the first 2 lines is wrong.\n\nAnother problem is that Rick and Morty will scream at same time. Therefore it will not scream at the same time.\n\n-----Constraints-----\n\n1 <= a, b, c, d <= 100\n\nFor a to b\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == -1\nassert solution(\"2 3\") == 0\nassert solution(\"2 2\") == -1\nassert solution(\"2 4\") == -1\nassert solution(\"2 5\") == -1\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5,20,9,19) == \"-1\"\nassert solution(5,2,19,12) == \"82\""
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 1') == '82'\nassert solution('4 2') == '-1'\nassert solution('8 3') == '-1'\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 0\") == \"1\"\nassert solution(\"0 0\") == \"-1\""
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"82\"\n\n-----Constraints-----\n\n1 <= a, b <= 100\n1 <= c, d <= 100\n\n-----Time Limit-----\nO(n) where n is the number of lines of code\nO(1) to solve each line of code in O(n) time\n\n\"\"\""
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Your code failed to print 'Success'\"\n\n\"\"\""
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"77 79\"\nassert solution(stdin) == \"77 77\"\nassert solution(stdin) == \"77\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"77 77 79\"\nassert solution(stdin) == \"77\"\nassert solution(stdin) == \"77\"\nassert solution(stdin) == \"77\"\nassert solution(stdin) == \"77\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 1\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 3\n\nInput\n3\n\nOutput\n2 1 1\n\"\"\"\nimport math\nn = int(input())\na = [int(i) for i in input().split()]\nb = []\nc = []\n\nfor i in range(n):\n    if math.gcd(a[i], n) == 1:\n        b.append(a[i])\n\nfor i in range(n):\n    if math.gcd(b[i], n) == 1:\n        c.append(b[i])\n\nfor i in range(len(c)):\n    if c[i] % 3!= 0:\n        print(c[i])\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == '1 2 1'\nassert solution(233) == '77 77 79'\nassert solution(77) == '77 77 79'\nassert solution(1) == '1'\n\n\n-----Constraints-----\n0 < stdin.readline.call_count < 10^4\n\n-----Time Complexity-----\nO(n) for n = $3$\n\nO(1) for $3$\n\nExample 1:\n\nInput\n3\n\nOutput\n1 1 1\nExample 2:\n\nInput\n1\n\nOutput\n3\n\n\n-----Code-----\nn = int(stdin.readline().strip())\na = []\nb = []\nc = []\nfor i in range(n):\n    a.append(int(stdin.readline().strip()))\nfor i in range(n):\n    b.append(int(stdin.readline().strip()))\nfor i in range(n):\n    c.append(int(stdin.readline().strip()))\nsolution(3)\nfor i in range(n):\n    if a[i] % 3!= 0:\n        print(a[i])\nfor i in range(n):\n    if b[i] % 3!= 0:\n        print(b[i])\nfor i in range(n):\n    if c[i] % 3!= 0:\n        print(c[i])\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == \"1 2\"\nassert solution(233) == \"77 79\"\nassert solution(4) == \"77 77\"\nassert solution(10) == \"77 77 77\"\nassert solution(2222) == \"77 77 77 77\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == \"77\"\nassert solution(233) == \"77\"\nassert solution(233) == \"77\"\nassert solution(3) == \"77\"\nassert solution(6) == \"77\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2 5\") == \"5 2\"\nassert solution(\"1 3 5 6 7\") == \"6 2\"\nassert solution(\"1 9 2\") == \"9 2\"\nassert solution(\"3 5 7 8 9 10\") == \"10\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3\") == \"77 77 79\"\nassert solution(\"233\") == \"77 77 79\"\nassert solution(\"12345\") == \"123 45\"\n\"\"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3') == '1 1 1'\nassert solution('233') == '77 77 79'\nassert solution('123') == '3 3 1'\nassert solution('23') == '3 3 1'\nassert solution('5') == '3 2 1'\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == '1 1 1'\nassert solution(233) == '77 77 79'\nassert solution(0) == '1'\nassert solution(1) == '1'\nassert solution(2) == '1'\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == str(2)\nassert solution(input('2')) == str(2)\nassert solution(input('3')) == str(3)\nassert solution(input('1')) == str(1)\nassert solution(input('3')) == str(2)\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\nstdin = \"\"\"\n6\n5 3 1 2 3\n\"\"\"\nassert solution(stdin) == \"3\"\n\nstdin = \"\"\"\n9\n5 3 1 2 3\n4\n5 3 1 2 3\n\"\"\"\nassert solution(stdin) == \"3\"\n\nstdin = \"\"\"\n1000\n8\n5 3 1 2 3\n7\n4\n6\n8\n\"\"\"\nassert solution(stdin) == \"2\"\n\nstdin = \"\"\"\n2\n3\n1\n\"\"\"\nassert solution(stdin) == \"2\"\n\nstdin = \"\"\"\n2\n3\n2\n\"\"\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(2)\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 1 2\") == \"2\"\nassert solution(\"3 3 1 2 3\") == \"6\"\nassert solution(\"4\") == \"4\"\nassert solution(\"0\") == \"0\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2 1 1 1 2\"]) == \"2\"\nassert solution([\"3 3 1 2 3\"]) == \"6\"\nassert solution
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 3 1 2 3\",\n    \"2 1 1 1 2\",\n    \"2 2\",\n    \"2 3\",\n    \"2 4\",\n    \"2 5\",\n    \"2 6\",\n    \"1 1 1 1 2\",\n    \"1 2\",\n    \"1 3\",\n    \"1 4\",\n    \"1 5\",\n    \"1 6\",\n) == \"3\"\nassert solution(\n    \"5 5 6 5 6 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"4 3\"\n    ), \"1 2\"\n\n\n------Test Cases-----\nassert solution(\n    \"1 1\"\n    ), \"8\"\n\n\n-----Incorrect Input-----\nassert solution(\n    \"1 1\"\n    ), \"0\"\n\n\n-----Test Cases-----\nassert solution(\n    \"4 2\"\n    ), \"1 2\"\n\n\n------Test Cases-----\nassert solution(\n    \"1 1\"\n    ), \"0\"\n\n\n-----Test Cases-----\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"8\""
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 3\") == \"8\"\nassert solution(\"4 3 5\") == \"2\"\nassert solution(\"4 3 6\") == \"0\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 3 5\") == \"2\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"8\"\nassert solution(\"4 3 2\") == \"8\"\nassert solution(\"4 3 3\") == \"1\"\nassert solution(\"4 3 4\") == \"9\"\nassert solution(\"4 3 5\") == \"8\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"8\"\nassert solution(\"4 3 1\") == \"8\"\nassert solution(\"4 3 2\") == \"7\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"4 3\") == \"8\"\nassert solution(\n    \"4 3 5\") == \"8\"\nassert solution(\n    \"4 3 1 1\") == \"0\"\nassert solution(\n    \"4 3 1 2\") == \"1\"\nassert solution(\n    \"4 3 1 3\") == \"0\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"8\"\n\"\"\""
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n'''"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"), 0\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\nstdin contains the integer m\n1 <= c_1, c_2,..., c_{m} <= 100\n0 <= x, y <= 10000\n0 <= c_{i} <= 100\n\n----My solution----\n\nfrom itertools import combinations"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,5,6,4,2,3,5,6) == 3\nassert solution(2,2,3,5,6,1,4,2) == 1\nassert solution(2,2,3,5,6,1,4,3) == 4\nassert solution(2,2,3,5,6,1,4,4) == 0\nassert solution(2,2,3,5,6,1,4,5) == 0\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 0\n\"\"\"\nclass Solution:\n    def solution(self, stdin, stdout):\n        \"\"\"\n        :type stdin: str\n        :type stdout: str\n        :rtype: str\n        \"\"\"\n        m = int(stdin[0])\n        n = int(stdin[1])\n        if m > n:\n            a = n\n            b = m\n        else:\n            a = m\n            b = n\n        c = 0\n        d = 0\n        for i in range(a, b):\n            if c < m:\n                c += 1\n                d = i\n            else:\n                c = i\n                d = m-c\n                break\n        if d > 0:\n            if d >= n:\n                d = n-1\n            else:\n                d = n-1-d\n        for j in range(c, d):\n            if d >= m:\n                d = m-d\n            else:\n                d = m-d\n        d += 1\n        stdout.write(str(d))\n        return \"\"\n\n\"\"\"\n5\n3 4 3 2 1\n6 8\n\nOutput\n3\n\nInput\n5\n0 3 3 4 2\n3 10\n\nOutput\n4\n\nInput\n2\n2 5\n3 6\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\n\"\"\""
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\n\n'''"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2, 5, 2, 1) == 3\nassert solution(2, 10, 3, 1) == 4\nassert solution(0, 0, 1, 1) == 0\nassert solution(0, 0, 2, 1) == 0\nassert solution(1, 1, 2, 1) == 1\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 4 3 2\") == 3\n\n\n-----Example 1-----\nInput\n\nInput is:\n6\n1 2 4 6 8 9 3 5 10 12 11\n\nOutput\n\n1 3 4 6 9 8\n\nExample 2\nInput\n\nInput is:\n2\n3 2 3 4 2\n\nOutput\n\n0\n\nExample 3\nInput\n\nInput is:\n6\n6 6 6 5 6 4\n4 6 6 7 5 6 5 6 6 7\n\nOutput\n\n0\n\nInput : \n6\n1 2 4 6 8 9 3 5 10 12 11\n\nOutput : \n3 4 6 9 8\n\nInput :\n2 3 4 3 2\n3 6\n\nOutput :\n2\n\nInput : \n6\n6 6 6 5 6 4\n4 6 6 7 5 6 5 6 6 7\n\nOutput :\n0\n\nInput : \n6\n1 2 4 6 8 9 3 5 10 12 11\n\nOutput :\n0\n\n'''"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"solution() failed\"\n\nassert solution(stdin), \"solution() failed\"\n\nassert solution(stdin), \"solution() failed\"\n\nassert solution(stdin), \"solution() failed\"\n\nassert solution(stdin), \"solution() failed\"\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"19\") == \"8\"\nassert solution(\"1\") == \"6\"\nassert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"4\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"12\"\n'''\n\n\n\nimport sys\n\nn = int(input())\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\n\ncost = 0\n\nwhile len(A) > 0 or len(B) > 0:\n    if len(A) > 0:\n        if B[0] % A[0] == 0:\n            B[0] = B[0] / A[0]\n            A.pop(0)\n        else:\n            cost += B[0]\n            B.pop(0)\n            A.pop(0)\n            A.append(A[0])\n    else:\n        if A[0] % B[0] == 0:\n            A.pop(0)\n            B.pop(0)\n            A.append(B[0])\n        else:\n            cost += A[0]\n            A.pop(0)\n            B.pop(0)\n            A.append(A[0])\n    if len(B) > 0:\n        if B[0] % A[0] == 0:\n            B[0] = B[0] / A[0]\n            A.pop(0)\n        else:\n            cost += B[0]\n            B.pop(0)\n            A.pop(0)\n            A.append(A[0])\n    else:\n        if A[0] % B[0] == 0:\n            A.pop(0)\n            B.pop(0)\n            A.append(B[0])\n        else:\n            cost += A[0]\n            A.pop(0)\n            B.pop(0)\n            A.append(A[0])\n    if len(A) > 0 or len(B) > 0:\n        if A[0] % B[0] == 0:\n            A.pop(0)\n            B.pop(0)\n            A.append(B[0])\n        else:\n            cost += A[0]\n            A.pop(0)\n            B.pop(0)\n            A.append(A[0])\n\nprint(cost)\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(n, k, A, B) == min(x for x in range(1, (k-1) * A + 1) if x % k == 0)\nassert solution(n, k, A, B) == min(x for x in range(1, (k-1) * B + 1) if x % k == 0)\nassert solution(n, k, A, B) == min(x for x in range(1, (k-1) * B + 1) if x % k == 0)\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"8\"\n\n\n-----Constraints-----\n\n1 <= n <= 2\u00b710^9\n1 <= k <= 2\u00b710^9\n1 <= A, B <= 2\u00b710^9\n\nExample 1:\n\nInput\n\n2\n5\n1\n\nOutput\n\n3\n\nExplanation\n\nSubtract 1 from x (9 \u2192 8) paying 3 coins.  Divide x by 2 (8 \u2192 4) paying 1 coin.  Divide x by 2 (4 \u2192 2) paying 1 coin.  Divide x by 2 (2 \u2192 1) paying 1 coin.\n\n\"\"\"\n\nclass Solution:\n    def coinChange(self, n: int, k: int, coins: List[int]) -> int:\n        dp = [0 for i in range(n+1)]\n        dp[0] = 1\n        for i in range(1, n+1):\n            for j in range(k, 0, -1):\n                dp[i] += dp[i-j]*(j-1)\n        return dp[n]\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), 'incorrect solution'\n\nassert solution(stdin), 'incorrect solution'\n\nassert solution(stdin), 'incorrect solution'\n\n\n-----Time complexity-----\n\nO(n) to calculate the minimum cost of coins.\nO(k) to calculate the minimum cost of coins.\nO(1) for total coins.\nO(1) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(1) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(1) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(1) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(1) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(1) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for total coins.\nO(n) for"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(9, 5) == 8\nassert solution(5, 2) == 4\nassert solution(5, 10) == 2\nassert solution(19, 2) == 2\nassert solution(10, 3) == 1\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0, 1, 2, 3, 4, 5) == 6\nassert solution(5, 3, 2, 4, 1, 1) == 7\nassert solution(2, 5, 1, 1, 1, 2) == 3\nassert solution(2, 1, 1, 1, 1, 2) == 1\nassert solution(2, 3, 1, 1, 1, 2) == 3\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\", \"1\"]) == \"0\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"4\", \"2\", \"2\", \"2\"]) == \"1\"\nassert solution([\"5\", \"3\", \"3\", \"3\"]) == \"1\"\nassert solution([\"4\", \"4\", \"4\", \"4\"]) == \"3\"\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"10 2\"\nassert solution(input()) == \"6 4\"\nassert solution(input()) == \"6 4\"\nassert solution(input()) == \"6 4\"\nassert solution(input()) == \"6 4\"\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(20) == 10\nassert solution(5184) == 6\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 10^6\n\n-----Time Limit-----\n1 minute\n\n-----Space Limit-----\n1 GB\n\n-----Alternatives-----\n\nHeuristic\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\\\"\\\"\\\"\\\")\n\nassert solution(\\\"\\\"\\\"\\\")\n\nassert solution(\\\"\\\"\\\"\\\")\n\nassert solution(\\\"\\\"\\\"\\\")\n\nassert solution(\\\"\\\"\\\"\\\")"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(sys.stdin.readline().strip()) == \"10\"\nassert solution(sys.stdin.readline().strip()) == \"8\"\nassert solution(sys.stdin.readline().strip()) == \"6\"\n\n\nTime Limit: O(N^3)\nSpace Limit: O(1)\n\nclass Solution:\n    def __init__(self):\n        pass\n    def solution(self, n):\n        return str(math.sqrt(n))"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5184) == 10\nassert solution(5184) == 10\nassert solution(5184) == 10\nassert solution(5184) == 10\nassert solution(5184) == 10\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n20\n5184\n100 100\n72 1296\n\"\"\"\n) == \"10 2\"\nassert solution(\n\"\"\"\n5184\n10 20\n72 1296\n\"\"\"\n) == \"6 4\"\nassert solution(\n\"\"\"\n5184\n10 20\n72 1296\n\"\"\"\n) == \"10 2\"\nassert solution(\n\"\"\"\n5184\n10 20\n72 1296\n\"\"\"\n) == \"6 4\"\n\n\"\"\".strip()\n) == \"6 4\"\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2') == '10'\nassert solution('3') == '6'\nassert solution('5184') == '6'\nassert solution('2') == '10'\nassert solution('3') == '6'\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5184') == 10\nassert solution('5184 ') == 10\nassert solution('5184 ') == 10\nassert solution('5184') == 10\nassert solution('5184') == 10\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"27\"\n\n\"\"\"\nfrom typing import List\nfrom collections import defaultdict\n\n\nclass Solution:\n    def __init__(self, N: int, K: int, R: str, S: str, P: str):\n        self.N = N\n        self.K = K\n        self.R = R\n        self.S = S\n        self.P = P\n\n    def max_score_per_hand(self) -> List[int]:\n        pass\n\n    def solution(self) -> str:\n        pass\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"N K\"\n    \"R S P\"\n    \"T\"\n) == \"27\"\nassert solution(\n    \"5 2\"\n    \"8 7 6\"\n    \"rsrpr\"\n) == \"27\"\nassert solution(\n    \"1\"\n    \"3\"\n    \"3\"\n) == \"0\"\nassert solution(\n    \"2\"\n    \"1\"\n    \"2\"\n) == \"0\"\nassert solution(\n    \"2\"\n    \"6\"\n    \"8\"\n) == \"1\"\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(N,K,R,S,P) == 27\n\nThis test case failed.\nThe expected output is:\nThe maximum total score earned in the game was: 27.\nInput:\n5 2\n8 7 6\nrsrpr\nOutput:\n27\nExplanation:\nThe machine will play {Rock, Scissors, Rock, Paper, Rock}.\nWe can, for example, play {Paper, Rock, Rock, Scissors, Paper} against it to earn 27 points.\nWe cannot earn more points, so the answer is 27.\n'''"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 27, \"Error\"\n\"\"\"\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 7) == 27, \"test 1 failed\"\nassert solution(7, 4) == 27, \"test 2 failed\"\nassert solution(2, 1) == 2, \"test 3 failed\"\nassert solution(0, 7) == 0, \"test 4 failed\"\nassert solution(7, 4) == 0, \"test 5 failed\"\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,7,6,5,4) == 27\nassert solution(2,2,2,2,2) == 1\nassert solution(5,5,5,5,5) == 5\nassert solution(4,4,4,4,4) == 4\nassert solution(10,10,10,10,10) == 10\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 27, \"Expected 27, got {}\".format(solution(stdin))\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 27\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport time"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"27\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n\"\"\"\n   .R,S,P\n    r,r,r\n    r,r,p\n    p,r,p\n    r,p,p\n    p,p,p\n    \"\"\") == 27\nassert solution(\n\"\"\"\n   .R,S,P\n    r,p,p\n    p,r,p\n    p,p,r\n    p,p,p\n    p,p,p\n    \"\"\") == 27\nassert solution(\n\"\"\"\n   .R,S,P\n    r,p,p\n    p,r,p\n    r,p,p\n    p,p,p\n    p,p,r\n    \"\"\") == 27\nassert solution(\n\"\"\"\n   .R,S,P\n    r,p,p\n    r,p,p\n    p,r,p\n    p,p,r\n    p,p,r\n    p,p,r\n    \"\"\") == 27\nassert solution(\n\"\"\"\n   .R,S,P\n    r,p,p\n    p,r,r\n    p,p,r\n    p,p,p\n    p,p,p\n    \"\"\") == 27\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"1\"\nassert solution(stdin), \"2\"\nassert solution(stdin), \"3\"\nassert solution(stdin), \"4\"\nassert solution(stdin), \"5\"\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 16\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n'''"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aabab\") == 2\nassert solution(\"abababababab\") == 11\nassert solution(\"ababab\") == 3\nassert solution(\"\") == 0\nassert solution(\"1000000000 1000000000 1000000000\") == 4000000000\n\nprint(\"Sample Tests:\\n\", \"- Yes, the optimal solution is 2x2 and 5x3.\")\nprint(\"- No, the optimal solution is 3x3 and 4x4.\")\nprint(\"- No, the optimal solution is 1x2 and 0x3.\")\nprint(\"- No, the optimal solution is 2x2 and 1x4.\")\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"b\"\nassert solution(\"b\") == \"a\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"abba\") == \"bab\"\nassert solution(\"babaa\") == \"bbaa\"\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 10\n\nfor i in range(0,int(input())):\n    string=input()\n    l=len(string)\n    if l<2:\n        print(l)\n        continue\n    if string[0]!=string[1]:\n        print(l)\n        continue\n    else:\n        for i in range(2,l+1):\n            if string[i]!=string[i-1]:\n                print(l)\n                continue\n            else:\n                print(l)\n                continue\n\n\nassert solution(input()) == 1\nassert solution(input()) == 10\nassert solution(input()) == 1\nassert solution(input()) == 1\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 9\n\nassert solution(stdin) == 10\n\nassert solution(stdin) == 11\n\nassert solution(stdin) == 16\n\nassert solution(stdin) == 26"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('aab') == 4\nassert solution('bba') == 7\nassert solution('abab') == 11\n\n\n'''"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"a\"\n    ) == 4, \"a\"\nassert solution(\n    \"b\"\n    ) == 7, \"b\"\nassert solution(\n    \"ab\"\n    ) == 11, \"ab\"\nassert solution(\n    \"abab\"\n    ) == 15, \"ababababab\"\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7, \"The string is not a good string.\"\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '4\u00a02'\nassert solution(input()) == '4\u00a01'\nassert solution(input()) == '1\u00a05'\nassert solution(input()) == '1\u00a04'\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == str(inp[:k]) + str(inp[k:])\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4 1\"\nassert solution(stdin) == \"4 5\"\nassert solution(stdin) == \"4 6\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 1\"\n\n-----Constraints-----\n1 <= n, k <= 100, p <= 1000, x <= n\u00b7p, y <= p\n\n\n-----Time complexity-----\nO(n * k)\n\nO(n * k)\n\n\n-----Space complexity-----\nO(k)\n\nO(n)\n\n\n-----Algorithm-----\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n\ninput()"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 2\") == \"-1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"18\"\nassert solution(\"1 2 3 4 5 6 5 4 1 2 3\") == \"16\"\nassert solution(\"1 2 3 4 5 6 4 2 3 4 5\") == \"16\"\nassert solution(\"1 2 3 4 5 6 4 3 5 2\") == \"16\"\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n'''\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n\n\"\"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('hello') == 'HELLO'\nassert solution('mrillos') == 'MRILLOS'\nassert solution('python') == 'PYTHON'\nassert solution('rabbit') == 'RABBIT'\nassert solution('python') == 'PYTHON'\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"sumnen\") == \"YES\"\nassert solution(\"njo\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('sneak') == \"YES\"\nassert solution('jan') == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"susi\") == \"YES\"\nassert solution(\"peru\") == \"NO\"\nassert solution(\"fizb\") == \"NO\"\nassert solution(\"viyap\") == \"YES\"\nassert solution(\"suhi\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('noon') == 'YES'\nassert solution('sarawak') == 'NO'\nassert solution('shah') == 'NO'\nassert solution('prueba') == 'NO'\nassert solution('ribba') == 'YES'\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"Hello World\"), \"Hello\"\nassert solution(\"Hello World\"), \"Hello\"\nassert solution(\"Hello World\"), \"Hello World\"\nassert solution(\"Hear me World\"), \"Hello\"\nassert solution(\"Hello World\"), \"Hello\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"suman\"), \"NOT berlanese\"\nassert solution(\"harakiri\"), \"NO berlanese\"\nassert solution(\"yupie\"), \"NO berlanese\"\nassert solution(\"man\"), \"NO berlanese\"\nassert solution(\"zop\"), \"NO berlanese\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n        'harakiri'\n    ) == 'YES'\n\nassert solution(\n        'k'\n    ) == 'NO'\n\nassert solution(\n        'baar'\n    ) == 'NO'\n\nassert solution(\n        'y'\n    ) == 'NO'\n\nassert solution(\n        'g'\n    ) == 'NO'"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"4\"\n\n\n\n-----Constraints-----\n1 <= n <= 10^2\n1 <= m <= 10^3\n\nTime Limit: 1 sec\nSpace Limit: 0,4m\n\n-----Tags-----\nconstructions\n\ntLEO\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n, m):\n        \"\"\"\n        :type n: int\n        :type m: int\n        :rtype: int\n        \"\"\"\n        def find_num(n, m):\n            return n*(n-1)//2 + m*(m-1)\n        \n        if (n < 1 or n > 10**6):\n            return 0\n        \n        def solve(n, m):\n            # process\n            if (m < n):\n                return 0\n            \n            # keep track of which part of the graph the edges are directed toward.\n            part = 0\n            visited = [0 for _ in range(n)]\n            \n            # create an array of edges, starting from each vertex.\n            edges = []\n            for i in range(n):\n                edges.append(0)\n            \n            # assign a direction to each edge.\n            direction = 1\n            # For each edge, add the neighbor to the edge list.\n            for i in range(m):\n                direction = edges[i] = i + 1\n                edges[i + 1] = edges[i] + direction\n            \n            # As long as there is no self-loop, start at the start and go to the end.\n            while (edges[0]!= edges[-1]):\n                # If there is no self-loop, there is no need to go to the next vertex.\n                if (edges[0] == edges[-1]):\n                    edges[0] = 0\n                # If there is, we try to move the current vertex.\n                elif (edges[0] < edges[-1]):\n                    # add the current vertex.\n                    edges[0] = direction\n                    # If the current vertex has already been visited, we start from the last vertex.\n                    if (edges[0] == edges[-1]):\n                        edges[-1] = 0\n                        edges[0] = direction\n                    # Else, continue to the next vertex.\n                    else:\n                        edges[1:] = edges[0:1]\n                        edges[0] = direction\n                        # Recur\n                        edges[0] = edges[0] + direction\n                        edges[1:] = edges[0:1]\n                        edges[0] = direction\n                # If there is, we try to move the last vertex.\n                elif (edges[0] > edges[-1]):\n                    edges[-1] = direction\n                    # If the last vertex has already been visited, we start from the current vertex.\n                    if (edges[-1] == edges[-1-1]):\n                        edges[-1] = 0\n                        edges[-2] = direction\n                    # Else, continue to the next vertex.\n                    else:\n                        edges[0] = direction\n                        edges[-1] = direction\n            # Process each vertex.\n            num = 0\n            # We start from the first vertex, until we reach the last vertex.\n            for i in range(n):\n                # If we have visited this vertex, we have found the minimum number of parts.\n                # So, we return the answer.\n                if (visited[i]!= 0):\n                    num = num + 1\n                    # Mark that we are done.\n                    return num\n                # Then, if it is not visited, we visit this vertex.\n                visited[i] = 1\n                # If this is the last vertex, we have visited all parts of the graph.\n                if (edges[i] == edges[n-1]):\n                    # Recur\n                    num = num + 1\n                    # Mark that we are done.\n                    return num\n                # Otherwise, we continue to the next vertex.\n                else:\n                    # Recur\n                    num = num + 1\n                    # Mark that we are done.\n                    visited[i] = 0\n                    # Move to the next vertex.\n                    edges[i] = edges[i] + direction\n            \n            # We have reached all the parts of the graph.\n            return num\n        \n        edges = [0 for _ in range(n)]\n        \n        # create an array of edges, starting from each vertex.\n        for i in range(n):\n            edges[i] = i + 1\n        \n        # assign a direction to each edge.\n        direction = 1\n        # For each edge, add the neighbor to the edge list.\n        for i in range(m):\n            direction = edges[i] = i + 1\n            edges[i + 1] = edges[i] + direction\n        \n        # As long as there is no self-loop, start at the start and go to the end.\n        while (edges[0]!= edges[-1]):\n            # If there is no self-loop, there is no need to go to the next vertex.\n            if (edges[0] == edges[-1]):\n                edges[0] = 0\n            # If there is, we try to move the current vertex.\n            elif (edges[0] < edges[-1]):\n                # add the current vertex.\n                edges[0] = direction\n                # If the current vertex has already been visited, we start from the last vertex.\n                if (edges[0] == edges[-1"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 5) == 16\n\nassert solution(2, 2) == 1\n\nassert solution(2, 2) == 1\n\nassert solution(2, 2) == 1\n\nassert solution(2, 2) == 1"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '16'\n\n-----Constraints-----\n\n1 <= stdin.length <= 50\n1 <= stdin[i] <= 20\n\n\"\"\"\n\nimport sys\n\nimport math\nfrom itertools import combinations"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"4\", \"0\"]) == \"3\"\nassert solution([\"4\", \"0\", \"1\", \"0\"]) == \"2\"\nassert solution([\"4\", \"0\", \"2\", \"0\", \"3\", \"1\"]) == \"2\"\nassert solution([\"3\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"3\", \"2\", \"1\", \"1\", \"3\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(21)\nassert solution(\"3 2\") == \"2\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 4\") == \"0\"\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '16'\n\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"15\"\n\n'''\n\nfrom sys import stdin\n\nN, M = map(int, stdin.readline().split())\n\ngraph = [[] for _ in range(N)]\n\nfor _ in range(M):\n    a, b = map(int, stdin.readline().split())\n    graph[a].append(b)\n    graph[b].append(a)\n\nans = 0\n\nfor v in range(N):\n    for e in range(len(graph[v])):\n        if graph[v][e] == 1:\n            ans += 1\n\nprint(ans)\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 7) == 1\nassert solution(4, 3) == 0\nassert solution(7, 0) == 0\nassert solution(3, 1) == 2\nassert solution(3, 2) == 1\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 7 1 8 0 2 4 5 4 4 4 3 5 1 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 0\", \"1 2\", \"3 4\", \"5 6\", \"7 7\", \"3 4\", \"2 3\", \"1 5\", \"1 6\", \"1 7\", \"2 4\", \"2 5\", \"2 6\", \"2 7\", \"3 4\", \"3 5\", \"3 6\", \"3 7\", \"4 5\", \"4 6\", \"4 7\", \"5 6\", \"5 7\", \"6 7\", \"7 8\", \"8 9\") == \"4\"\nassert solution(\"3 0\", \"3 1\", \"2 3\", \"2 4\", \"2 5\", \"2 6\", \"2 7\", \"1 2\", \"1 3\", \"1 4\", \"1 5\", \"1 6\", \"1 7\", \"1 8\", \"1 9\") == \"0\"\nassert solution(\"4 0\", \"4 1\", \"4 3\", \"4 4\", \"4 5\", \"4 6\", \"4 7\", \"4 8\", \"4 9\", \"1 2\", \"1 3\", \"1 4\", \"1 5\", \"1 6\", \"1 7\", \"1 8\", \"1 9\") == \"1\"\nassert solution(\"7 0\", \"7 1\", \"7 2\", \"7 3\", \"7 4\", \"7 5\", \"7 6\", \"7 7\", \"7 8\", \"7 9\", \"8 9\", \"9 8\", \"9 7\", \"9 6\", \"9 5\", \"9 4\", \"9 3\", \"9 2\") == \"0\"\nassert solution(\"3 1\", \"3 2\", \"3 3\", \"3 4\", \"3 5\", \"3 6\", \"3 7\", \"3 8\", \"3 9\", \"4 5\", \"4 6\", \"4 7\", \"4 8\", \"4 9\", \"5 6\", \"5 7\", \"5 8\", \"5 9\") == \"1\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 40\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"3\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"3 4\") == \"0\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"6\"\nassert solution(\"5\") == \"7\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4 1') == 18\nassert solution('3 2') == 10\nassert solution('3 2') == 40\nassert solution('3 2') == 0\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5\"\n\n\"\"\""
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"40\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input().strip()) == 44\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '40'\nprint('Example 1:')\nprint('Input : ')\nprint('stdin : ', end='')\nprint(stdin)\nprint('Exception :')\nprint('Output :')\nprint(str(solution(stdin)))\nprint()\n\nprint('Example 2:')\nprint('Input : ')\nprint('stdin : ', end='')\nprint(stdin)\nprint('Exception :')\nprint('Output :')\nprint(str(solution(stdin)))\nprint()\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == '5'\nassert solution(\"1 2 4\") == '4'\nassert solution(\"2 4 2 1\") == '2'\nassert solution(\"2 3 2\") == '2'\nassert solution(\"1 1 1\") == '1'\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"100\"\nassert solution(\"4 3\") == \"1000\"\nassert solution(\"5 3\") == \"1000\"\nassert solution(\"5 3\") == \"1000\"\nassert solution(\"2 3\") == \"1000\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4930\"\nassert solution(stdin) == \"4930\"\n\nassert solution(stdin) == \"4930\"\nassert solution(stdin) == \"4930\"\n\nassert solution(stdin) == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4930'\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4930\"\n\"\"\""
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4930'\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 4930\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin = \"20 40 60 80 100\"\n) == \"4930\"\nassert solution(\n    stdin = \"119 119 119 119 119\"\n) == \"4930\"\nassert solution(\n    stdin = \"119 119 119 119 119\"\n) == \"4930\"\nassert solution(\n    stdin = \"119 119 119 119 119\"\n) == \"4930\"\nassert solution(\n    stdin = \"119 119 119 119 119\"\n) == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4930\"\nassert solution(\"119 119 119 119 119\") == \"4930\"\nassert solution(\"1000 1000 1000 1000\") == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4930\"\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= m_1, m_2, m_3, m_4, m_5 <= 20\n1 <= w_1, w_2, w_3, w_4, w_5 <= 50\n1 <= h_s, h_u <= 20\n\n\n-----Bug Fixes-----\n1st line removed.\n\n2nd line removed.\n\n3rd line removed.\n\n4th line added.\n\n5th line added.\n\n\"\"\""
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"4930\"\nassert solution(\"1 0\") == \"4930\"\nassert solution(\"1 0 0\") == \"4930\"\nassert solution(\"1 0 1\") == \"4930\"\nassert solution(\"1 0 2\") == \"4930\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\n-----Constraints-----\n0 < n,m,L,R < 1000\n\n------Test Cases------\ntest.assert_equals(solution([2, 2]), 1)\ntest.assert_equals(solution([1, 1]), 2)\ntest.assert_equals(solution([1, 1, 1]), 2)\ntest.assert_equals(solution([1, 1, 2]), 2)\ntest."
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n\n\n-----Constraints-----\n0 <= stdin.length <= 5\n\n1 <= n,m,L,R\n1 <= L <= R\n1 <= n,m,L,R <= 10^9\n\n1 <= a[i,j] <= 99\n\n\"\"\""
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin=\"2 2 1 1\"\n) == \"2\"\nassert solution(\n    stdin=\"1 2 1 2\"\n) == \"1\"\nassert solution(\n    stdin=\"1 2 1 2\"\n) == \"2\"\nassert solution(\n    stdin=\"1 1 1 1\"\n) == \"1\"\nassert solution(\n    stdin=\"2 1 1 1\"\n) == \"2\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n\n-----Explanation-----\n\nThe only initial grid that satisfies the requirements is $a_{1,1}=a_{1,2}=a_{1,1}=1$, thus the answer should be $1$.\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 10^5\n0 \u2264 m \u2264 10^5\n0 \u2264 L \u2264 R.\n\n\n-----Time complexity-----\n\nThe time complexity of the above algorithm is O(n log n) where $n$ is the number of grid lines and $m$ is the number of rows.\n\n\n-----Space complexity-----\n\nThere are no constraints on the input, this is just to keep the same example as in the first example.\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"1 1 3\") == \"3\"\nassert solution(\"1 1 4\") == \"4\"\nassert solution(\"1 1 5\") == \"5\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"0\"\nassert solution(input) == \"1\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Possible\"\n\npass\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 3', '5 4', '3 5') == 'Impossible'\nassert solution('2 3', '1 2', '2 3') == 'Possible'\nassert solution('2 3', '1 2', '3 2') == 'Possible'\n\nprint('Pass' if solution(\"2 3\", \"5 4\", \"3 5\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"2 3\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution(\"2 3\", \"1 2\", \"3 2\") == 'Possible' else 'Fail')\nprint('Pass' if solution"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Possible\"\n\n----------Quick and dirty solution-------------------"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"Impossible\"\nassert solution(\"3 4\") == \"Possible\"\nassert solution(\"2 3\") == \"Possible\"\nassert solution(\"2 4\") == \"Possible\"\nassert solution(\"4 5\") == \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Possible\"\n\n------Example-------\nInput\n2 2\n2 10\n11 5\n9 4\n3 12\n\nOutput\nPossible\n\nInput\n3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\n------Example-------\nInput\n3 2\n2 4 5\n4 5 6\n3 6 7\n8 10 11\n\nOutput\nImpossible\n\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Possible\"\n\"\"\"\nn, m = map(int, stdin.split())\n\nA = []\nfor i in range(n):\n    A.append(list(map(int, stdin.split())))"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Possible\"\n\n\n-----Constraints-----\n\n1 <= n, m <= 10^5\n\n1 <= a_i \\leq b_i \\leq 10^9\n\n1 <= a_j \\leq b_j \\leq 10^9\n\n\n-----Time complexity-----\n\nSince each operation takes O(n) to compute, the overall complexity is O(n^3) (or O(n^2)) since we are doing three operations.\n\nSince each operation takes O(n) to compute, we will also calculate the complexity each operation takes O(n) to compute.\n\nConstraints:\n\n1 <= n <= 10^5\n\n1 <= m <= 10^5\n\n\"\"\"\nclass Solution:\n    def isIncreasing(self, matrix: List[List[int]]) -> bool:\n        m, n = len(matrix), len(matrix[0])\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] > matrix[i][j-1]:\n                    return False\n        return True\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Possible\"\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11, \"Should be 11\"\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 11\n\nInput\n3\n2 5 5\n\nOutput\n11\n\n\n'''"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(solution(a) + solution(a+b)) == 11\nassert solution(solution(a) + solution(a)) == 11\nassert solution(solution(a) + solution(a+b)) == 11\nassert solution(solution(a) + solution(a+b+c)) == 11\nassert solution(solution(a) + solution(a+b+c+d)) == 11\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"AaBbCc\") == \"AbCc\"\nassert solution(\"ABC\") == \"AB\"\nassert solution(\"ABCD\") == \"AB\"\nassert solution(\"ABBC\") == \"AAB\"\nassert solution(\"BBBB\") == \"BB\"\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"a\", \"b\", \"a\", \"c\"]) == \"aabcbcbcbcb\"\nassert solution([\"a\", \"b\"]) == \"aabbc\"\nassert solution([\"b\", \"c\", \"a\", \"a\"]) == \"bbabc\"\nassert solution([\"c\", \"a\", \"b\", \"c\", \"a\"]) == \"caa\"\nassert solution([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"a\", \"b\"]) == \"abbcc\"\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 11\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\na_i in {0, 1,..., n - 1}\n\nclass Solution:\n    def solve(self, A, B, C):\n        # write your code here\n        for i in range(len(A)):\n            if not A[i] in B and not B[A[i]] in C:\n                return A[i]\n        return A[i]\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 15\nassert solution(stdin) == 4\nassert solution(stdin) == 6\nassert solution(stdin) == 5\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 2) == 11\nassert solution(3, 1) == 3\nassert solution(1, 2) == 2\nassert solution(1, 1) == 1\nassert solution(1, 3) == 2\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"No solution\"\nassert solution(stdin), \"No solution\"\nassert solution(stdin), \"No solution\"\nassert solution(stdin), \"No solution\"\nassert solution(stdin), \"No solution\"\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"aacbccbacd\") == 11, \"11 is incorrect\"\nassert solution(\"abcabcabcabc\") == 11, \"11 is incorrect\"\nassert solution(\"abcdcdabcdcbaa\") == 11, \"11 is incorrect\""
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Known Bugs-----\n\nFor example: given n = 8, the decision is that a_1 = 2 + 2 + 3 + 3 + 3 + 4 + 4 = 35. Then (1) the problem with minimum difficulty a_1 can't be solved because Decoforces can't solve problems with a_1 <= a_2.\n\nAfter making the problem, (2) the problem with minimum difficulty a_1 can't be solved because Decoforces can't solve problems with a_1 <= a_2.\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^3\n1 \u2264 k \u2264 10^9\n\n\n-----Submissions-----\n\nSample Input\n\n3 3\n1 1 9\n2 2 6\n3 3 3\n3 3 3\n2 2 4\n\nSample Output\n\n0\nExplanation\n\nNo solution can be found.\n\n\n\"\"\"\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\nFor others he can solve problems on Decoforces.\n\nInput\n3 4\n10 1 2 3\n\nOutput\n1\n\n\n------Explanation-----\n\nIn this example, he has to solve problems 1 and 2. The only available are difficulties 5 and 6 on some other judge. Solving any of these will give Makes opportunity to solve problem 3.\n\n\n-----In Sample-----\n\nInput\n3 4\n10 1 2 3\n\nOutput\n0\n\n\n-----Explanation-----\n\nIn this example, he can solve problems 1 and 2.\n\n\n------Explanation-----\n\nIn this example, he can solve problems 1 and 2 on Decoforces.\n\n\n-----Explanation-----\n\nFor others he can solve problems on Decoforces.\n\n\n\"\"\""
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 3, 2) == 1\n\nassert solution(4, 20, 10) == 0\n\nassert solution(4, 10, 3) == 0\n\nInput\n\n3 4\n1 10\n\nOutput\n\n0\n\n-----Solution-----\n\n1\n2\n3\n4\n\n-----Sample Input-----\n\n3 4\n1 10\n\nOutput\n\n0\n-----Sample Output-----\n\n3\n\n\"\"\""
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 1 9\") == \"0\"\nassert solution(\"10 3 6 3\") == \"1\"\nassert solution(\"10 3 6 3\") == \"0\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2\", \"2\"]) == \"1\"\nassert solution([\"1\", \"4\", \"1\", \"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"1\"\nassert solution([\"1\", \"5\"]) == \"1\"\nassert solution([\"1\", \"2\", \"6\"]) == \"2\"\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\n\"\"\"\nn, k = map(int, input().split())\na_1, a_2, a_3, a_4 = map(int, input().split())\na_5 = a_1 + a_2 + a_3 + a_4\na_6 = a_1 * a_2 * a_3 * a_4\na_7 = a_1 / a_2 / a_3 / a_4\na_8 = a_1 ** a_2 ** a_3 ** a_4"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1') == '3'\nassert solution('1 9') == '3'\nassert solution('10') == '3'\nassert solution('2') == '6'\nassert solution('10 3') == '6'\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\n\n\"\"\""
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution(inp)) == '1 3 5'"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2 2 2'\nassert solution(stdin) == '2 2 2'\nassert solution(stdin) == '2 2 2'\nassert solution(stdin) == '2 2 2'\nassert solution(stdin) == '2 2 2'\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"2 2\"\nassert solution(\"5 5\") == \"2 2\"\nassert solution(\"6 6\") == \"2 2\"\nassert solution(\"7 7\") == \"2 3\"\nassert solution(\"10 10\") == \"2 2\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2 3 5'"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 10') == 2\nassert solution('100100') == 2\nassert solution('1000') == 3\nassert solution('-1 1') == 1\nassert solution('0') == 1\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2 2 2\"\nassert solution(input()) == \"2 2 3\"\nassert solution(input()) == \"2 2 3\"\nassert solution(input()) == \"2 2 3\"\nassert solution(input()) == \"2 2 3\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"1 2 3\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 2 3'\n\"\"\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 2 2\"\n\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"3 3 3\"\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'UP' or solution(stdin) == 'DOWN' or solution(stdin) == -1\n\n-----Constraints-----\n\n1 <= n <= 20\n0 <= a_{i} <= 15\n\n'''"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"UP\"\nassert solution(stdin) == \"DOWN\"\nassert solution(stdin) == \"DOWN\"\nassert solution(stdin) == \"UP\"\nassert solution(stdin) == \"UP\"\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'DOWN'\nassert solution(stdin) == 'UP'"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"UP\"\nassert solution(stdin) == \"DOWN\"\nassert solution(stdin) == -1\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"UP\" or solution(input()) == \"DOWN\" or solution(input()) == \"UNDEFINED\"\n\nprint(\"Sample Input:\")\nprint(\"5\")\nprint(\"3 4 5 6 7\")\nprint(\"17\")\nprint(\"8 11 13 14 15 14 13 12\")\nprint(\"3 1\")\nprint(\"2\")\nprint(\"-1\")\nprint(\"UNDEFINED\")\nprint(\"UNDEFINED\")\nprint(\"-1\")\nprint(\"UNDEFINED\")\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"UP\", \"no\"\n\n\n-----Constraints-----\n\n1 <= n <= 92\n\n\n-----Example 1-----\n\nInput\n1\n3 4 5 6 7\n\nOutput\nUP\n\nInput\n7\n12 13 14 15 14 13 12\n\nOutput\nDOWN\n\nInput\n1\n8\n\nOutput\n-1\n\n-----Note-----\n\nIn the first sample, the size of the visible part of the moon is 9, thus the answer is \"DOWN\".\n\nIn the second sample, the size of the visible part of the moon is 11, thus the answer is \"UP\".\n\nIn the third sample, the size of the visible part of the moon is 8, thus the answer is \"DOWN\".\n\n\n-----Example 2-----\n\nInput\n1\n1 1 1 1 1 1 1 1\n\nOutput\nDOWN\n\nInput\n1\n2 2 2 2 2 2 2\n\nOutput\nDOWN\n\n\"\"\""
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"DOWN\"\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"DOWN\"\n\nassert solution(stdin) == \"UP\"\n\nassert solution(stdin) == \"UP\"\n\nassert solution(stdin) == \"DOWN\"\n\nInput\n5\n3 4 5 6 7\n\nOutput\nDOWN\n\nInput\n7\n12 13 14 15 14 13 12\n\nOutput\nUP\n\nInput\n1\n8\n\nOutput\n-1\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"UP\", 'Expected \"UP\" got \"DOWN\"'\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"DOWN\"\nassert solution(input) == \"UP\"\nassert solution(input) == \"-\""
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a) == 'Yes'\nassert solution(a) == 'Yes'\nassert solution(a) == 'No'\nassert solution(a) == 'No'\n\n\nassert solution(abc) == 'Yes'\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"ab\") == \"No\"\nassert solution(\"aab\") == \"No\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"k\") == \"No\"\n\"\"\""
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"a\") == \"Yes\", \"Wrong answer\"\nassert solution(\"aeiou\") == \"No\", \"Wrong answer\"\nassert solution(\"b\") == \"Yes\", \"Wrong answer\"\nassert solution(\"c\") == \"No\", \"Wrong answer\"\nassert solution(\"ab\") == \"No\", \"Wrong answer\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"a\") == \"Yes\"\nassert solution(\"a\") == \"No\"\n\nassert solution(\"c\") == \"No\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aaeiou\") == \"Yes\"\nassert solution(\"aaeiou\") == \"No\"\nassert solution(\"aeiou\") == \"Yes\"\nassert solution(\"abc\") == \"Yes\"\nassert solution(\"bc\") == \"Yes\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abcde\") == \"Yes\"\nassert solution(\"aebcde\") == \"Yes\"\nassert solution(\"ca\") == \"No\"\nassert solution(\"aab\") == \"No\"\nassert solution(\"abc\") == \"Yes\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input() == \"Yes\") == \"Yes\"\nassert solution(input() == \"No\") == \"No\"\n\n\n\n------Test Cases-----\nInput:\na\nu\n\nOutput:\nYes\n\nInput:\nabc\nukm\n\nOutput:\nNo\n\nInput:\nakm\nua\n\nOutput:\nNo\n\n\n\"\"\"\nclass Solution:\n    def solve(self, s, t):\n        def check_vowels(s, t):\n            if s not in vowels and t not in vowels:\n                return False\n            if s in vowels and t in vowels:\n                return True\n            return False\n            \n        vowels = ['a', 'e', 'i', 'o', 'u']\n        \n        def convert_to_superhero(s):\n            if s not in vowels:\n                return s\n            else:\n                return t\n        \n        def find_superheroes(s):\n            superheroes = []\n            \n            # check if all letters in $s$ are vowels or not\n            for i in range(len(s)):\n                if s[i].isdigit() and s[i] in vowels:\n                    if check_vowels(s[i], s):\n                        superheroes.append(s[i])\n                elif s[i] in vowels:\n                    superheroes.append(s[i])\n            return superheroes\n        \n        def check_consonants(s, t):\n            if s in consonants:\n                if t not in consonants:\n                    return True\n            return False\n        \n        def find_superheroes(s):\n            superheroes = []\n            \n            # check if all letters in $s$ are consonants or not\n            for i in range(len(s)):\n                if s[i].isdigit() and s[i] not in vowels:\n                    if check_consonants(s[i], s):\n                        superheroes.append(s[i])\n                elif s[i] not in vowels:\n                    superheroes.append(s[i])\n            return superheroes\n        \n        superheroes = find_superheroes(s)\n        \n        def first_letter(s):\n            return s[0]\n        \n        def second_letter(s):\n            return s[1]\n        \n        def third_letter(s):\n            return s[2]\n        \n        def fourth_letter(s):\n            return s[3]\n        \n        def fifth_letter(s):\n            return s[4]\n        \n        \n        # all the letters are same\n        super = first_letter(s) + second_letter(s) + third_letter(s) + fourth_letter(s) + fifth_letter(s)\n        \n        # all the letters are different\n        super = third_letter(s) + second_letter(s) + third_letter(s) + fourth_letter(s) + fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s) + second_letter(s) + third_letter(s) + third_letter(s) + third_letter(s)\n        \n        # all the letters are different\n        super = fourth_letter(s) + fourth_letter(s) + fifth_letter(s) + fifth_letter(s)\n        \n        # all the letters are same\n        super = third_letter(s) + second_letter(s) + third_letter(s) + fourth_letter(s) + fifth_letter(s)\n        \n        # all the letters are different\n        super = fourth_letter(s) + fourth_letter(s) + third_letter(s) + fourth_letter(s)\n        \n        # all the letters are different\n        super = fifth_letter(s) + fifth_letter(s) + fifth_letter(s) + fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s) + second_letter(s) + second_letter(s)\n        \n        # all the letters are different\n        super = third_letter(s) + third_letter(s) + third_letter(s)\n        \n        # all the letters are different\n        super = fourth_letter(s) + fourth_letter(s)\n        \n        # all the letters are different\n        super = fifth_letter(s) + fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s) + second_letter(s) + second_letter(s)\n        \n        # all the letters are different\n        super = third_letter(s) + third_letter(s)\n        \n        # all the letters are different\n        super = fourth_letter(s) + fourth_letter(s)\n        \n        # all the letters are different\n        super = fifth_letter(s) + fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s) + second_letter(s) + second_letter(s)\n        \n        # all the letters are same\n        super = third_letter(s) + third_letter(s)\n        \n        # all the letters are same\n        super = fourth_letter(s)\n        \n        # all the letters are same\n        super = fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s)\n        \n        # all the letters are same\n        super = third_letter(s)\n        \n        # all the letters are same\n        super = fourth_letter(s)\n        \n        # all the letters are same\n        super = fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s)\n        \n        # all the letters are same\n        super = third_letter(s)\n        \n        # all the letters are same\n        super = fourth_letter(s)\n        \n        # all the letters are same\n        super = fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s)\n        \n        # all the letters are same\n        super = third_letter(s)\n        \n        # all the letters are same\n        super = fourth_letter(s)\n        \n        # all the letters are same\n        super = fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s)\n        \n        # all the letters are same\n        super = third_letter(s)\n        \n        # all the letters are same\n        super = fourth_letter(s)\n        \n        # all the letters are same\n        super = fifth_letter(s)\n        \n        # all the letters are same\n        super = second_letter(s)\n        \n        "
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"..B....\") == \"A\"\nassert solution(\"B\") == \"B\"\nassert solution(\"A\") == \"A\"\nassert solution(\"..B....\") == \"A\"\nassert solution(\"B\") == \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"A\"\nassert solution(input) == \"B\"\nassert solution(input) == \"A\"\nassert solution(input) == \"B\"\nassert solution(input) == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\".W.B.W..\") == \"A\"\nassert solution(\".W.B.W..\") == \"B\"\n\nassert solution(\".W.B.W..\") == \"B\"\nassert solution(\".B.W.W..\") == \"B\"\nassert solution(\".W.W.W..\") == \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == \"A\"\nassert solution(s) == \"B\"\nassert solution(s) == \"A\"\nassert solution(s) == \"B\"\nassert solution(s) == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"BBWWWWWWW\") == \"A\"\nassert solution(\"BBWWWWWWWW\") == \"A\"\nassert solution(\"WWWWWWWWWW\") == \"A\"\nassert solution(\"WWWWWWWWWW\") == \"A\"\nassert solution(\"WWWWWWWWWWW\") == \"B\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"B..\") == \"B\"\nassert solution(\"..B\") == \"A\"\nassert solution(\"B..W\") == \"A\"\nassert solution(\"B....\") == \"B\"\nassert solution(\"..W..\") == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('.') == 'A'\nassert solution('B') == 'B'\nassert solution('W') == 'W'\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\".B....B\") == \"A\"\nassert solution(\".W...W\") == \"B\"\nassert solution(\"...W....\") == \"B\"\nassert solution(\"...W.....\") == \"B\"\nassert solution(\"...W.....\") == \"W\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\".B.W.B.\") == \"B\"\nassert solution(\".B.W.W.\") == \"W\"\nassert solution(\".W.B.W.\") == \"B\"\nassert solution(\".W.B.W.\") == \"W\"\nassert solution(\".W.W.W.\") == \"W\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"A..B.W..\") == \"A\"\nassert solution(\"B..W..\") == \"B\"\nassert solution(\"W..B.W..\") == \"B\"\nassert solution(\"..B..W..\") == \"A\"\nassert solution(\"..W..B.W..\") == \"A\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1,2,3,4,5,6,7,8,9,10\") == \"3\"\nassert solution(\"3,4,5,6,7,8,9,10\") == \"3\"\nassert solution(\"2,2,2\") == \"1\"\nassert solution(\"2,2,3,4,5\") == \"3\"\nassert solution(\"2,2,2,2\") == \"2\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == 3\nassert solution(\"3\") == -1\nassert solution(\"4\") == -1"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, [1, 2, 3, 5, 7]) == 3\nassert solution(5, [1, 2, 3, 5, 7]) == -1\nassert solution(5, [4, 4, 4, 4, 4]) == -1\nassert solution(5, [1, 2, 3, 4, 5]) == 3\nassert solution(5, [1, 2, 3, 4, 5]) == 3\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '-1'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"), \"not implemented\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\nPassed"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"YES\"\nassert solution(\"NikitaAndString\") == \"NO\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"Ann_and_Slava\") == \"YES\"\nassert solution(\"Olya_and_Nikita\") == \"YES\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"YES\"\nassert solution(\"NikitaAndString\") == \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"YES\", \"Alex and broken contest doesn't contain the correct name\"\nassert solution(\"NikitaAndString\") == \"YES\", \"Nikita and string doesn't contain the correct name\"\nassert solution(\"Danil_and_Olya\") == \"YES\", \"Danil and olya doesn't contain the correct name\"\nassert solution(\"\") == \"YES\", \"Empty string doesn't contain the correct name\"\nassert solution(\"nikita_and_string\") == \"YES\", \"Nikita and string doesn't contain the correct name\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\", \"Failed to solve test case\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('Alex_and_broken_contest') == \"YES\"\nassert solution('NikitaAndString') == \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"Olya_and_Nikita_and_Danil_and_Alex_and_broken_contest\") == \"YES\"\nassert solution(\"Nikita_and_Danil_and_Olya_and_Alex_and_broken_contest\") == \"NO\"\nassert solution(\"Alex_and_broken_contest\") == \"YES\"\nassert solution(\"Nikita_and_Danil_and_Olya_and_Alex_and_broken_contest\") == \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"Alex_and_broken_contest\") == \"YES\"\nassert solution(\n    \"NikitaAndString\") == \"NO\"\nassert solution(\n    \"Danil_and_Olya\") == \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"YES\", \"problem was not from this contest.\"\nassert solution(\"NikitaAndString\") == \"NO\", \"problem was not from this contest.\""
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3, \"For stdin\"\nassert solution(stdin) == -1, \"For stdin\""
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\n-----------------------\nInput\n5\n\nOutput\n5\n\n-----------------------\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 6\n\nInput\n8\n\nOutput\n9\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin=\n    \"2 4 2\\n\"\n) == \"3\"\nassert solution(\n    stdin=\n    \"6 13 1\\n\"\n) == \"4\"\nassert solution(\n    stdin=\n    \"1 4 3\\n\"\n) == \"4\"\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\nExample 1:\n\nInput\n2 4 2\n\nOutput\n3\n\nExample 2:\n\nInput\n6 13 1\n\nOutput\n4\n\nExample 3:\n\nInput\n1 4 2\n\nOutput\n-1\n'''\n\nimport math\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    '2 4 2'\n) == '3'\nassert solution(\n    '6 13 1'\n) == '4'\nassert solution(\n    '1 4 3'\n) == '-1'\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == -1\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == -1\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.5\"\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin='4 5 3',\n    ) == '0'\n\nassert solution(\n    stdin='3 4 3',\n    ) == '-1'\n\nassert solution(\n    stdin='3 4 3',\n    ) == '0'\n'''"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(-1)\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"-1\"\n\"\"\""
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4 3\") == 0\nassert solution(\"3 4 4\") == -1\nassert solution(\"3 4 4\") == 0\nassert solution(\"3 4 6\") == 0\nassert solution(\"3 4 6\") == 0.5\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '-1'"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0.5\"\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"0.5\"\nassert solution(inp) == \"0\"\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin, inp):\n        pass\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n\"\"\"\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3, \"should be 3\"\n\nassert solution(stdin) == 2, \"should be 2\"\n\nassert solution(stdin) == 1, \"should be 1\"\n\nassert solution(stdin) == 0, \"should be 0\"\n'''\n\nfrom typing import Optional, List"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\n\"\"\""
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"2\"\nassert solution(\"0\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 3\") == \"3\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\n\nassert solution(stdin) == 2\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == '1'\nassert solution(2) == '1'\nassert solution(3) == '1'\nassert solution(4) == '1'\nassert solution(5) == '1'\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '3'\nassert solution(inp) == '2'\n\nassert solution(inp) == '1'\nassert solution(inp) == '0'\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == 'YES', \"wrong output\"\nassert solution(\"BOTTOMCODER\") == 'NO', \"wrong output\"\nassert solution(\"DECODEFORCES\") == 'YES', \"wrong output\"\nassert solution(\"DOGEFORCES\") == 'NO', \"wrong output\""
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"A0G0C0\") == \"YES\", \"solution() failed\"\nassert solution(\"A0G0C0\") == \"NO\", \"solution() failed\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('DECODEFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DOGEFORCES') == 'NO'"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"BOTTOMCODER\") == \"YES\"\nassert solution(\"DECODEFORCES\") == \"NO\"\nassert solution(\"DOGEFORCES\") == \"YES\"\nassert solution(\"B\") == \"NO\"\nassert solution(\"CODEFORCES\") == \"YES\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"BOTTOMCODER\") == \"NO\"\n\n\n-----Time Limit-----\n\nIf all test cases are under 10 seconds, how would you approach this problem?\n\nIf you could solve it in less than 10 seconds, where are you allowed?\n\nIf you could solve it in more than 10 seconds, where are you allowed?\n\n\n-----Constraints-----\n0 < stdin.length <= 100\nstdin consists of lowercase English letters.\nAll letters are in uppercase.\nAll words are consist of upper-case English letters.\n\n\"\"\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\n\n\nassert solution(\"BOTTOMCODER\") == \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(codewaitingforitforfors) == \"YES\"\nassert solution(bottomedocodeforfors) == \"NO\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"24\"\nassert solution(stdin) == \"36\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 4 2 1\") == \"2\"\nassert solution(\n    \"3 4 2\") == \"3\"\nassert solution(\n    \"2 3 2\") == \"4\"\nassert solution(\n    \"3 1 2\") == \"1\"\nassert solution(\n    \"4 3 3\") == \"3\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '18'\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '18'\n\n>>> def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return str(n * (n-1) * (n-2))\n    else:\n        return str(n * (n-1) * (n-3))\n\n\nassert solution(stdin) == '18'\nassert solution(stdin) == '6'\n\n\n------Explanation------\n\nWe have to iterate through the n-1 triangles. Since, we are to cut the polygon.\n\nThe second triangle is divided into two triangles. The first triangle is the triangle with vertex $1$ and the second triangle is the triangle with vertex $2$.\n\nThe third triangle is divided into two triangles. The first triangle is the triangle with vertex $3$ and the second triangle is the triangle with vertex $4$.\n\nThe fourth triangle is divided into three triangles. The first triangle is the triangle with vertex $2$ and the second triangle is the triangle with vertex $3$ and the third triangle is the triangle with vertex $4$.\n\nThe fifth triangle is divided into two triangles. The first triangle is the triangle with vertex $2$ and the second triangle is the triangle with vertex $3$ and the third triangle is the triangle with vertex $4$.\n\nTo save space, we need to keep track of the (i, j) pair of vertices of the current triangle, which are the next vertex of the current triangle.\n\nTo sum the intersection of the triangles, we need to keep track of the union of the triangles.\n\nTo find the total area of the triangle, we need to calculate the product of the vertexes in the triangle and the vertexes in the other triangle.\n\nThen, we need to calculate the difference between the union and the intersection of the two triangles.\n\nSo the total area of the triangle is the product of the squares of the vertexes of the triangles.\n\nWe keep track of the sums of the next vertexes in each triangle.\n\nSo, if the product of the two vertexes in the triangle and the next vertex in the triangle are equal, we have a triangle with the triangle.\n\nSo, we have to calculate the intersection of the two triangles.\n\nSo, the total area of the triangle is the product of the squares of the vertexes of the two triangles.\n\nWhen we are done with the triangles, the total area of the triangle is the product of the squares of the vertexes of the two triangles.\n\nThis is the triangle with the maximum total area.\n\nFinally, we have to calculate the difference between the union of the two triangles.\n\nSo, the difference between the union of the two triangles is the product of the vertexes in the triangle and the vertexes in the other triangle.\n\nWe have to return the minimum total area that a triangle with the minimum total area has.\n\nAssume that the triangles are rectangular.\n\nFor example, given:\n\ntriangles = [[1, 3], [1, 5], [1, 7], [2, 4], [2, 6], [2, 8], [3, 7], [3, 8], [4, 5]]\n\nThen, the minimum total area is 16.\n\nFor example, given:\n\ntriangles = [[1, 3], [1, 5], [1, 7], [2, 4], [2, 6], [2, 8], [3, 7], [3, 8], [4, 5]]\n\nThen, the minimum total area is 13.\n\n\"\"\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 18\n\n\"\"\""
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 1\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"18\"\nassert solution(\"0 3 3\") == \"3\"\nassert solution(\"1 4 1\") == \"6\"\nassert solution(\"0 4 1\") == \"6\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"18\"\n\n\n-----Constraints-----\n1 <= n <= 500\n\n------Time complexity-----\n\nO(n^2)\n\n\n------Synchronisation-----\n\nAccepted\n15,541\nWarnings\n3\n\nRuntime: 36 ms, faster than 62.98% of Python3 online submissions for Minimum Weight Polygon.\nMemory Usage: 13.7 MB, less than 76.40% of Python3 online submissions for Minimum Weight Polygon.\n\n\"\"\"\n\n\nclass Solution:\n    def minTriangleArea(self, n: int) -> float:\n        area = 0\n        for i in range(1, n):\n            area += (i + 1) ** 2 - i\n        return area\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 4) == 18\nassert solution(4, 3) == 12\nassert solution(1, 1) == 6\nassert solution(1, 2) == 4\nassert solution(0, 0) == 1\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '18'\n\"\"\"\nimport math"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == 17\nassert solution(4) == 4\nassert solution(10) == 17\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 17, 'The first line should be the number of books.'\n\nassert solution(stdin) == 4, 'The second line should be the number of books.'\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == 17, '1'\nassert solution(\"2\") == 18, '2'\nassert solution(\"3\") == 19, '3'\nassert solution(\"4\") == 20, '4'\nassert solution(\"5\") == 21, '5'\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4) == 11\n\nassert solution(4) == 4\n\nassert solution(4) == 2\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 17, \"incorrect output\"\n\"\"\""
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(13) == 17, \"test 1 failed\"\nassert solution(4) == 4, \"test 2 failed\"\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"6\"\nassert solution(\"7\") == \"7\"\nassert solution(\"16\") == \"9\"\nassert solution(\"5\") == \"1\"\nassert solution(\"2 4 5 6 7 8 9 11 13 14 15 16 17 19 20 21 22 23 24 25 26 27 28 29 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 210 210 211 212 213 214 215 216 217 218 219 220 220 221 222 223 224 225 226 227 228 229 230 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 308 309 310 311 313 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 328 329 329 330 330 331 331 332 333 334 333 335 336 337 336 338 339 340 341 342 343 345 347 347 346 349 349 350 351 351 355 355 357 357 358 359 359 360 361 361 366 366 367 368 369 370 371 372 373 374 375 375 376 377 378 379 380 380 381 383 384 385 386 387 388 389 390 391 392 392 393 413 414 414 415 415 416 416 417 418 419 420 421 421 423 423 431 441 442 443 442 443 454 454 455 455 454 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455 455"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == 17\nassert solution(4) == 4\nassert solution(5) == 5\nassert solution(6) == 4\nassert solution(7) == 3\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 11\n\ntest\n2\n3\ntest\n3\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"3 10\") == \"4\"\nassert solution(\"3 10\") == -1\nassert solution(\"3 10\") == -1\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 4 5 3\") == \"4\"\nassert solution(\"2 2 3 4 5\") == \"3\"\nassert solution(\"2 4 5 6 7\") == \"3\"\nassert solution(\"3 4 5 6 7\") == \"1\"\nassert solution(\"4 2 3 2\") == \"3\"\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1' or solution(stdin) == '-1'\n\nassert solution(stdin) == '2' or solution(stdin) == '-1'\n\nassert solution(stdin) == '4' or solution(stdin) == '-1'\n\nassert solution(stdin) == '6' or solution(stdin) == '-1'\n\nassert solution(stdin) == '4' or solution(stdin) == '-1'"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(solution()) == -1\n\n\n-----Explanation-----\n\nWe have two cars in the first example:   cnt_1(1) = 1\ncnt_2(1) = 2\ncnt_4(2) = 1\nThere is no solution for Bob, because Bob has all the same color and Alice is the winning color.\n\nWe have two cars in the second example:   cnt_2(2) = 1\ncnt_1(2) = 4\ncnt_4(4) = 2\nThe winning color is B, and the others are A.\n\nWe have three cars in the second example:   cnt_2(3) = 3\ncnt_1(3) = 5\ncnt_4(5) = 3\nThere is no solution for Bob, because Bob has all the same color and Alice is the winning color.\n\nWe have three cars in the third example:   cnt_2(3) = 4\ncnt_1(3) = 4\ncnt_4(5) = 2\nThe winning color is A, but Alice and Bob have different colors of the same car in their order of appearance.\n\nWe have three cars in the fourth example:   cnt_1(4) = 2\ncnt_1(4) = 5\ncnt_4(5) = 4\nThe winning color is A, but Alice and Bob have different colors of the same car in their order of appearance.\n\nWe have four cars in the fifth example:   cnt_1(4) = 4\ncnt_1(4) = 5\ncnt_1(5) = 6\ncnt_5(6) = 6\nThere is no solution for Bob, because Bob has all the same color and Alice is the winning color.\n\nWe have four cars in the sixth example:   cnt_1(5) = 2\ncnt_1(5) = 5\ncnt_1(6) = 5\ncnt_6(6) = 5\nThere is no solution for Bob, because Bob has all the same color and Alice is the winning color.\n\nWe have five cars in the seventh example:   cnt_1(5) = 5\ncnt_1(5) = 6\ncnt_1(6) = 5\ncnt_6(6) = 5\nThere is no solution for Bob, because Bob has all the same color and Alice is the winning color.\n\nWe have five cars in the eighth example:   cnt_1(6) = 4\ncnt_1(6) = 6\ncnt_1(7) = 6\ncnt_7(7) = 6\nThere is no solution for Bob, because Bob has all the same color and Alice is the winning color.\n\nWe have five cars in the ninth example:   cnt_1(7) = 4\ncnt_1(7) = 6\ncnt_1(8) = 6\ncnt_8(8) = 6\nThere is no solution for Bob, because Bob has all the same color and Alice is the winning color.\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 20\n1 <= A, B, and cnt_{i}(i) <= 10^6\n0 <= c_1(i) <= 10^6\n0 <= c_2(i) <= 10^6\n0 <= c_3(i) <= 10^6\n0 <= c_4(i) <= 10^6\ncnt_i(i) \u2265 cnt_1(i) for every i, and cnt_{i}(i) < cnt_4(i) for every i, and cnt_{i}(i) >= cnt_1(i) for every i.\n\nInput\n1 2\n\nOutput\n-1\n\n\n------Time complexity----\n\nTime complexity of below is O(n) because Bob can't travel to Alice if he has to buy and update Bob's cars to have his own color. So we can improve it to O(n).\n\nTime complexity of below is O(n) because Alice can't travel to Bob if he has to buy and update Bob's cars to have his own color. So we can improve it to O(n).\n\n\n------Space complexity----\n\nTime complexity of below is O(n) because Bob can't travel to Alice if he has to buy and update Bob's cars to have his own color. So we can improve it to O(n).\n\nTime complexity of below is O(n) because Alice can't travel to Bob if he has to buy and update Bob's cars to have his own color. So we can improve it to O(n).\n\n\n\"\"\"\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '4'\nassert solution(input()) == '-1'"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '4'\nassert solution(input()) == '-1'\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"5 2\") == \"4\"\nassert solution(\"3 10\") == \"1\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"2 3 5\") == \"3\"\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4') == '3'\nassert solution('2 1 4 2') == '1'\nassert solution('2 2 3 4 3') == '2'\nassert solution('2 2 3 5') == '2'\nassert solution('2 2 2 3') == '2'\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"11\") == \"YES\"\nassert solution(\"7\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"0\") == \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    line = \"2 4 3\",\n    stdin = \"\"\n) == \"NO\"\nassert solution(\n    line = \"2 4 3\",\n    stdin = \"0\"\n) == \"YES\"\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"10\"\n    ) == 'NO', \"NO\"\nassert solution(\n    \"1 4\"\n    ) == 'NO', \"NO\"\nassert solution(\n    \"1 4\"\n    ) == 'YES', \"YES\"\nassert solution(\n    \"3 4\"\n    ) == 'YES', \"YES\"\nassert solution(\n    \"3 3 2\"\n    ) == 'NO', \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == YES"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5 11) == 3\nassert solution(6 16) == 3\nassert solution(5) == 1\nassert solution(6) == 1\nassert solution(4) == 1\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100,000\n1 \u2264 S \u2264 10^9\n\"\"\"\n\nclass Solution:\n    \"\"\"\n    @param n: An integer\n    @param S: An integer\n    @return: An integer\n    \"\"\"\n    def coinChange(self, n, S):\n        if n == 0:\n            return 0\n        dp = [0] * (S + 1)\n        dp[0] = 1\n        for i in range(1, S + 1):\n            dp[i] = self.dfs(n - 1, i, dp)\n        return dp[S]\n\n    def dfs(self, n, i, dp):\n        if n == 0:\n            return 0\n        if i == 0:\n            return 1\n        if dp[i] == 0:\n            return 0\n        if i == 0:\n            return 1\n        dp[i] = 0\n        if i >= n:\n            return 0\n        if i <= 0:\n            return 1\n        for j in range(i, n):\n            dp[i] += self.dfs(n - 1, j, dp)\n        return dp[i]"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n\n\n\nExplanation\n\nThe set $11$ has coins of length $3$, and the set $16$ has coins of length $3$,\nthen you have to get a sum of $16$ (which is $3$ coins)\n\nThe set $4$ has coins of length $5$, the set $5$ has coins of length $5$, the set $6$ has coins of length $6$,\nthe set $6$ has coins of length $6$, and so on. So you get a sum of $13$ which is $5$ coins.\n\nThe set $4$ has coins of length $3$, the set $5$ has coins of length $3$, the set $6$ has coins of length $5$, \nand so on. So you get a sum of $15$ which is $5$ coins.\n\n\n\nConstraints\n\n\n\n1 <= stdin.length <= 10^4\n1 <= n <= 10^5\n-10^9 <= S <= 10^9\n\n\n\nFollow up: Could you write a solution that uses only O(1) extra space?\n\n\n-----Others-----\n\nConstraints\n\n\n\n1 <= coins, n <= 10^5\n\n\"\"\"\n\nimport sys\n\nn, S = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 11\") == 3\nassert solution(\"6 16\") == 3\nassert solution(\"5 1\") == 3\nassert solution(\"5 1 2\") == 3\nassert solution(\"5 1 3 4\") == 3\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\n\"\"\"\nfrom sys import stdin"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stderr) == \"abcba\", \"expected: 'abcba'\"\nassert solution(stderr) == \"ababca\", \"expected: 'ababca'\"\nassert solution(stderr) == \"abcaab\", \"expected: 'abcaab'\"\nassert solution(stderr) == \"abcaabcd\", \"expected: 'abcaabcd'\"\nassert solution(stderr) == \"abcaabcdefg\", \"expected: 'abcaabcdefg'\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"aabc\") == \"aabc\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abb\") == \"abb\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aba\") == \"abba\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"abcd\") == \"abcbd\"\nassert solution(\"abcde\") == \"abcdef\"\nassert solution(\"abcdh\") == \"abcdh\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(aabc) == \"abba\"\nassert solution(aabcd) == \"abcba\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aba\") == \"cba\"\nassert solution(\"abcd\") == \"bcd\"\nassert solution(\"abaa\") == \"aab\"\nassert solution(\"abca\") == \"aacc\"\nassert solution(\"abab\") == \"abac\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(st) == \"abcba\", \"error\"\nassert solution(st) == \"abccba\", \"error\"\nassert solution(st) == \"abbccba\", \"error\"\nassert solution(st) == \"abcba\", \"error\"\n\n\n-----Constraints-----\n1 \u2264 |s| \u2264 2\u00b710^5\n\n[input] string s\n\n[output] str\n\n\n[Time Limit] 4 seconds (py3)\n\n[input] string s\n\n[output] str\n\n[Time Limit] 8 seconds (py2)\n'''"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aabbc\") == \"aabbbcccc\"\nassert solution(\"ababcd\") == \"ababcdabab\"\nassert solution(\"abcd\") == \"aabcabc\"\nassert solution(\"abcdabab\") == \"abcdababcd\"\nassert solution(\"aabba\") == \"aabbaabc\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('aab') == 'abba'\nassert solution('abcd') == 'aabb'\nassert solution('abab') == 'abab'\nassert solution('abcdef') == 'cdefab'\nassert solution('abcdefghijklmnop') == 'edfghijklmnop'\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'aba'\n\n\n-----Constraints-----\n\n1 \u2264 |s| \u2264 2\u00b710^5\n\n\n-----Tutorial-----\n\nhttps://leetcode.com/problems/palindrome-permutation/discuss/865988/Python-Easy-to-read-my-solution-with-Python-Object-oriented-using-Time-and-Space\n\n\n\n\"\"\"\n\nclass Solution:\n    def minPalindrome(self, s: str) -> str:\n        res = s[::-1]\n        return \"\".join(sorted(res))\n        pass\n    pass\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aabcd\"), \"cbd\"\nassert solution(\"abccba\"), \"cbba\"\nassert solution(\"abccba\"), \"abbccba\"\nassert solution(\"abccba\"), \"abccba\"\nassert solution(\"aabcda\"), \"aabcda\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'White'\nassert solution(stdin) == 'Black'\n\"\"\""
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"rkbnrpppprkrrrrrrrrkrrkrrrrrrrkrrrrrrrrrkrrrrrrrrrrrkrrrkrrrrrrrrrkrrrrrrrrrrrrrkrrrrrrrrrkrrrkrrrkrrrrrrrkrrrrrrrkrrrrrrrrrkrrrrrrrrrrrrrrrkrrrkrrrrrrrrrrrrrrrrrrrrrrrkrrrrrrrrrrrrrrrrrrrrrrrrrkrrrrrrrrrrrrrrrrrrrrrkrrrrrrrrrrrrrkrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrkrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"White\"\nassert solution(stdin) == \"Black\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"White\" or \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'White'\nassert solution(stdin) == 'Black'\n\nassert solution(stdin) == 'Draw'\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"White\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('...QK...') == \"White\"\nassert solution('...rk...') == \"Black\"\nassert solution('rppppppr') == \"Draw\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('rnbqkbnr') == 'White'\nassert solution('pppppppp') == 'Black'\nassert solution('rppppppr') == 'Draw'\nassert solution('rkqb') == 'Black'\nassert solution('ppppppppr') == 'White'\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"rnbqkbnr\") == \"White\"\nassert solution(\"rppppppr\") == \"Black\"\nassert solution(\"kp\") == \"Draw\"\nassert solution(\"rk\") == \"Black\""
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"White\"\nassert solution(stdin) == \"Black\"\nassert solution(stdin) == \"Draw\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 0 0 1 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 3 2 3\"\nassert solution(stdin) == \"1 3 2 3\"\nassert solution(stdin) == \"1 3 2 3\"\nassert solution(stdin) == \"1 3 2 3\"\nassert solution(stdin) == \"1 3 2 3\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 95 96 97 98 99 100 101 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 221 221 222 223 224 225 226 227 228 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"9 3\") == \"1 3 2 3\"\nassert solution(\"999\") == -1\nassert solution(\"1000\") == \"3\"\nassert solution(\"100\") == \"3\"\nassert solution(\"100000\") == \"3\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 5 3 4 1 5 2\", \"1 3 4 2 1 2 3\", \"2 3 4 2 1 1 5\", \"3 4 5 4 1 1 3\", \"5 2 2 1 1 2 1\", \"1 2 1 1 3 2 1\", \"4 3 2 3 1 2 2\"]) == \"4 3 2 3 1 2 2\"\nassert solution([\"1 1\", \"1 0\", \"0 0\", \"0 1\", \"1 1\", \"1 1\"]) == \"0 1\"\nassert solution([\"1 4 3 4 5 5 5 6 7\", \"6 6 7\", \"7 6 7\", \"8 6 7\", \"9 7 7\", \"10 7 7\"]) == \"9 7 7\"\nassert solution([\"1 2\", \"1 0\", \"1 0\", \"0 0\", \"0 1\", \"1 1\"]) == \"0 1\"\nassert solution([\"1 1\", \"1 1\", \"1 0\", \"1 0\", \"0 0\", \"0 1\", \"1 1\"]) == \"0 1\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('000001010') == '0101010'\nassert solution('000101010') == '000101010'\nassert solution('11111111') == '11111111'\nassert solution('001111111') == '001111111'\nassert solution('000') == '000'\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input()\n    ) == input()\n    \n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 1 0 0 1 0 1 0 0 1 0 1 0 1 0 1 0 1 0 1 1') == '0 1 0 1 0 0'\nassert solution('1 2 3 4 5 6 7 8 9 10 10') == '10'\nassert solution('1 2 3 4 5 6 7 8 9 10') == '10'\nassert solution('2 1 3 2 2') == '1'\nassert solution('2 4') == '2'\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == \"0101\"\nassert solution(1) == \"0\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 111 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 223 224 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 5 1\") == \"2\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"11 2\"\n) == \"3\"\nassert solution(\n    \"11 -1 2\"\n) == \"4\"\nassert solution(\n    \"11 -1 2 3 4 5 6 7 8 9\"\n) == \"3\"\nassert solution(\n    \"11 -1 2 3 4 5 6 7 8 9 -1\"\n) == \"3\"\nassert solution(\n    \"11 -1 2 3 4 5 6 7 8 9 -1 2\"\n) == \"3\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n\"11 0 -1 -1 -1 -1 -1 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 -1 0 0 0 0 0 0 -1 0 0 0 -1 0 0 0 0 0 -1 0 0 0 0 -1 0 0 0 0 0 -1 0 0 0 -1 0 0 -1 0 0 -1 0 -1 0 0 -1 0 0 0 -1 0 0 0 -1 0 0 -1 0 0 -1 0 -1 0 -1 0 -1 0 -1 0 0 0 0 -1 0 0 0 0 -1 0 0 0 -1 0 0 0 -1 0 -1 0 0 -1 0 0 -1 0 -1 0 0 -1 0 -1 0 0 -1 0 -1 0 0 -1 0 -1 0 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -1 0 -"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\"11\",\n    \"-1 2\",\n    \"3\",\n    \"7 4\",\n    \"2 10\",\n    \"-1 2\"]) == \"3 7 4 2 10\"\n\nassert solution(\n    [\"11\",\n    \"9\",\n    \"8\",\n    \"5\",\n    \"4\",\n    \"1\"]) == \"1 9 8 5 4\"\n\nassert solution(\n    [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\n\nassert solution(\n    [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\n\nassert solution(\n    [\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\""
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == \"3\"\nassert solution(1) == \"s\"\nassert solution(2) == \"7 4\"\nassert solution(3) == \"2 10\"\nassert solution(4) == \"0 1\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) =='s'\nassert solution(stdin) == 'x_s'\nassert solution(stdin) == 'x_1 y_1'\nassert solution(stdin) == 'x_2 y_2'\nassert solution(stdin) =='s'\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"11\") == \"3\"\nassert solution(\"10\") == \"7\"\nassert solution(\"0\") == \"7\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"\"\"\n11\n-1 2\n\n5 4\n3 4\n-1 3\n\n-1 4\n-1 1\n-1 1\n\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n\n7 2\n-1 -1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n\n10 1\n-1 0\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1\n-1 1"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1\") == \"5\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 2 3\") == \"2\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '7 4'\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1') == '8'\nassert solution('4') == '54'\nassert solution('8') == '-1'\n\"\"\""
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10\") == \"6\"\nassert solution(\"10\") == \"10\"\nassert solution(\"10\") == \"16\"\nassert solution(\"10\") == \"20\"\nassert solution(\"10\") == \"54\"\n\n\n-----Time complexity-----\n\nTime complexity is O(1).\n\nSpace complexity is O(1).\n\nComplexity is O(n) for both the idea of making a hashmap.\n\n\"\"\"\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == 8\nassert solution(\"8\") == 54\nassert solution(\"54\") == -1\nassert solution(\"1 2 4 8 27 16 54\") == 2\nassert solution(\"1 3 9 27 16 54\") == 3\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 1\nassert solution(6) == 2\nassert solution(10) == -1\nassert solution(34) == -1\nassert solution(80) == 0\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == '1'\nassert solution(\"2\") == '5'\nassert solution(\"3\") == '5'\nassert solution(\"4\") == '10'\nassert solution(\"5\") == '10'\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '54'\nassert solution(inp) == '-1'\nassert solution(inp) == '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('8') == 8\nassert solution('10') == -1\nassert solution('54') == 54\nassert solution('10') == -1\nassert solution('54') == -1\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(10)\nassert solution(stdin) == str(-1)\nassert solution(stdin) == str(-1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1') == '8'\nassert solution('8') == '54'\nassert solution('10') == '-1'\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"54\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 0 4\") == \"7.25298806364175601379\"\nassert solution(\"6 0 4\") == \"0.00000000000000000000\"\nassert solution(\"11 0 5\") == \"0.00000000000000000000\"\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0,0,0,0,0) == 0\nassert solution(1,0,0,0,0) == 0\nassert solution(0,1,0,0,0) == 0\nassert solution(1,1,0,0,0) == 0\nassert solution(0,0,1,0,0) == 0\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution failed\"\nassert abs(solution(\"0 0 4\") - 7.25298806364175601379) < 10 ** -6, \"wrong answer\"\n\"\"\"\nimport math"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0, 0, 4, 1, -10**9) == 7.25298806364175601379\nassert solution(6, 4, 5, 1, -10**9) == 0.00000000000000000000\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '7.25298806364175601379'\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 0 1\") == \"0.00000000000000000000\"\nassert solution(\"0 0 3\") == \"0.00000000000000000000\"\nassert solution(\"0 0 3\") == \"0.00000000000000000000\"\nassert solution(\"0 0 3\") == \"0.00000000000000000000\"\nassert solution(\"0 0 3\") == \"0.00000000000000000000\"\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0 4\") == \"7.25298806364175601379\"\nassert solution(\"0 0 5\") == \"0.00000000000000000000\"\nassert solution(\"11 0 5\") == \"0.00000000000000000000\"\nassert solution(\"12 0 5\") == \"0.00000000000000000000\"\nassert solution(\"2 0 6\") == \"0.00000000000000000000\"\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0 0 4) == 7.25298806364175601379\nassert solution(6 0 4) == 0.00000000000000000000\nassert solution(11 0 5) == 0.00000000000000000000\nassert solution(\"exemplo.txt\") == \"14.33000004\"\nassert solution(\"exemplo2.txt\") == \"14.3333000004\"\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0 0 4') == '7.25298806364175601379'\nassert solution('0 0 5') == '0.00000000000000000000'\nassert solution('11 0 5') == '7.25298806364175601379'\nassert solution('11 0 1') == '5.000000000000000000000'\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n\n\"\"\"\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"4\") == \"1\"\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == '1'\n\nassert solution('5') == '2'\n\nassert solution('1') == '1'\n\nassert solution('5') == '3'\n\n------Examples-------\nInput\n1\n\nOutput\n1\n\nInput\n3\n\nOutput\n2\n\nExplanation\nThe player can do every operation in the first turn and choose the minimum value of $n$ from the first turn.\n\"\"\""
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 2 \"\n    ) == \"1\"\nassert solution(\n    \"1 1 \"\n    ) == \"2\"\nassert solution(\n    \"3 1 \"\n    ) == \"1\"\nassert solution(\n    \"3 9 \"\n    ) == \"0\"\nassert solution(\n    \"1 2 \"\n    ) == \"1\"\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(5) == 1\nassert solution(0) == 1\nassert solution(1) == 2\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"6\") == \"0\"\nassert solution(\"6\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 5\n\n\n-----Constraints-----\n0 <= n <= 10^3\n\n\n-----Elements of a Coding Problem-----\nThe program was written using only basic math and the implementation of the Coding Problem was written in \"NumPy\"\n\nAlgorithm:\n\nEliminate the subproblem for the first time.\nBinary Search for the given subproblem.\n\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\n\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\n\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nBinary Search for the given subproblem.\nB"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '1'"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == 1\nassert solution(1) == 0\nassert solution(3) == 3\nassert solution(12) == 1\nassert solution(2) == 1\n\n\n\n-----Constraints-----\n\n0 <= n <= 10^4\n\n0 < x <= 10^9\n\nn must be even\n\n-----Time limit-----\n1 second\n\n-----Memory limit-----\n256 MB\n\n-----Algorithm-----\n\nFor each test, you can use as many tests as needed, but they can be reduced to a single test to get the minimum number of operations.\n\nFor example, given 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256)"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n0 < stdin.length <= 100\n0 < p_2 < p_3 < p_i < 10^9\n2 <= a_1 < 10^9\n0 <= a_2 < 10^9\n0 < n <= 2*10^5\n1 <= p_i <= 10^4\n\nTime Limit: 600 ms\nSpace Limit: 100 kB\n\n-----Submissions-----\n1533\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"3\"\n\n-----Constraints-----\n0 < stdin.readline().strip() < 1000\n\nInput\n3\n1 1\n3 1 3\n\nOutput\n3\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"3\"\n\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\n\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 2 1 2 1 1 3 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 2 2 2 2 2 2 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 2 2 2 2 2 2 2 2 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == 3\n'''\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\n\nInput\n3\n1 1\n3 1 3\n\nOutput\n3\n\nInput\n3\n1 1\n3 1 3\n\nOutput\n4\n\"\"\"\n\nn = int(input())\np_2 = [int(i) for i in input().split()]\np_3 = [int(i) for i in input().split()]\np_4 = [int(i) for i in input().split()]"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(__file__) == \"12\"\nassert solution(\\\"\"\"\\\n3\n1 1\n3 1 2\n1 2 3\n1 3 2\n2 3 2\n2 3 1\n2 1 3\n1 3 4\n1 3 5\n\nOutput\n4\n\n\\\"\"\"\") == \"5\"\nassert solution(\\\"\"\"\\\n5\n1 1 1 1 1 1 1 1\n3 2 3 2 2 2 2 2\n4 4 4 4 4 4 4\n5 5 5 5 5 5 5\n\nOutput\n6\n\n\\\"\"\"\") == \"10\"\nassert solution(\\\"\"\"\\\n6\n1 2 2 2 2 2 2 2\n2 1 1 1 1 1 1 1\n3 3 3 3 3 3 3 3\n4 4 4 4 4 4 4 4\n5 5 5 5 5 5 5 5\n\nOutput\n8\n\n\\\"\"\"\") == \"12\"\nassert solution(\\\"\"\"\\\n5\n1 1 1 1 1 1 1 1\n3 2 3 2 2 2 2 2\n4 4 4 4 4 4 4\n5 5 5 5 5 5 5\n\nOutput\n5\n\n\\\"\"\"\") == \"7\"\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"treading\",\"trading\",\"trading\"]) == \"0\"\nassert solution([\"treading\",\"trading\",\"trading\"]) == \"1\"\nassert solution([\"treading\",\"trading\",\"trading\"]) == \"2\"\nassert solution([\"treading\",\"trading\",\"trading\"]) == \"3\"\nassert solution([\"treading\",\"trading\",\"trading\"]) == \"4\"\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('reading') == '1', 'incorrect'\nassert solution('trading') == '0', 'incorrect'\nassert solution('toy') == '2', 'incorrect'\nassert solution('try') == '2', 'incorrect'\nassert solution('sweet') == '2', 'incorrect'"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == \"1\"\nassert solution(5) == \"0\"\nassert solution(7) == \"2\"\nassert solution(3) == \"2\"\n\nassert solution(6) == \"2\"\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 1, \"Stdout: {}\".format(stdout)\nassert solution(3) == 1, \"Stdout: {}\".format(stdout)\nassert solution(1) == 0, \"Stdout: {}\".format(stdout)\n\"\"\""
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(7, \"reading\", \"trading\") == 1\nassert solution(5, \"sweet\", \"sheep\") == 0\nassert solution(3, \"toy\", \"try\") == 2\nassert solution(0, \"toy\", \"try\") == 0\n\n-----Constraints-----\n1 \u2264 n \u2264 100 000\n0 \u2264 s, t \u2264 10^4\n0 \u2264 s.length <= t.length <= 10^3\n\nTime Limit: 1 sec\nSpace Limit: 1GB\n\nNotes:\n\n- If the given words are in the same position as the given words, the answer is the number of distinct words.\n\n-----Algorithm 2-----\nIf word T is not obtained from the same word as word S, it can be transformed to word S by deleting one letter.\n\nIf word T is obtained from the same word as word S, it can be transformed to word S by deleting exactly one letter.\n\nIf word T is obtained from the same word as word S, it can be transformed to word T by deleting exactly one letter.\n\nFor example, if S = \"trading\", T = \"try\", and word T = \"try\", the algorithm would return 0.\n\n'''\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"reading\",\n    \"trading\"\n) == \"1\"\n\nassert solution(\n    \"reading\",\n    \"trading\",\n    \"toy\"\n) == \"2\"\n\nassert solution(\n    \"reading\",\n    \"trading\",\n    \"toy\",\n    \"try\"\n) == \"2\"\n\nassert solution(\n    \"reading\",\n    \"trading\",\n    \"toy\",\n    \"try\",\n    \"s\"), \"s\"\n\nassert solution(\n    \"sweet\",\n    \"sheep\"\n) == \"0\""
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\n\nprint(solution(\"reading\"), solution(\"trading\"), sep=\"\\n\")\nprint(solution(\"sweet\"), solution(\"sheep\"), sep=\"\\n\")\nprint(solution(\"toy\"), solution(\"try\"), sep=\"\\n\")\nprint(solution(\"toy\"), solution(\"troy\"), sep=\"\\n\")"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"93\"\nassert solution(\"1 2\") == \"5\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"3\"\nassert solution(\"1 5\") == \"3\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"93\"\n\n###### Test Case ######\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin.split(\"\\n\")\n    ) == \"93\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"93\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"90\"\nassert solution(stdin) == \"110\"\nassert solution(stdin) == \"110\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 1 7 5\") == \"5\"\nassert solution(\"1 3 1 7 5\") == \"5\"\nassert solution(\"1 3 2 7 5\") == \"5\"\nassert solution(\"1 1 1 1\") == \"5\"\nassert solution(\"0\") == \"5\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"93\"\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"93\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 5 0\") == \"93\"\nassert solution(\"1 4 3\") == \"93\"\nassert solution(\"1 3 2\") == \"93\"\nassert solution(\"2 2 5\") == \"93\"\nassert solution(\"1 6 0\") == \"93\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 4 5\") == 8\nassert solution(\"1 2\") == 5\nassert solution(\"5\") == 1\nassert solution(\"4\") == 4\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"93\"\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2 2\") == 3\nassert solution(\"5 0 1\") == 1\nassert solution(\"3 3 0 3 0\") == 0\nassert solution(\"3 3 0 3 0\") == 1\nassert solution(\"3 3 0 3 0\") == 0\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 6) == 2\nassert solution(6, 3) == 1\nassert solution(4, 6) == 0\nassert solution(2, 2) == 0\nassert solution(7, 7) == 1"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\n\nassert solution(input()) == '2'\n\nassert solution(input()) == '0'\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"1\"\nassert solution(\"3 0\") == \"0\"\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == 3\nassert solution(\"2 3\") == 2\nassert solution(\"3 2\") == 1\nassert solution(\"2 6\") == 0\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 4\") == 3\nassert solution(\"6 2\") == 2\nassert solution(\"3 0\") == 1\nassert solution(\"2 2\") == 0\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"6 2\") == 3\nassert solution(\"5 1\") == 1\nassert solution(\"3 0\") == 0\n\n>>> def solution(stdin: str) -> str:\n    pass\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\nInput\n5 6\n\nOutput\n2\n\nInput\n6 2\n\nOutput\n1\n\nInput\n3 2\n\nOutput\n0\n\n\n\"\"\""
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"117 3\") == 9\nassert solution(\"237 7\") == 9\nassert solution(\"15 2\") == 2\nassert solution(\"\") == 0\n\n\nExplanation\n\nPolycarp can buy 3 shovels and the sum is 1053 burles.\n\nWe can't buy fewer than 2 shovels without any change. So, we can't buy 2 or less shovels without any change.\n\nSo Polycarp can buy one shovel.\n\nPolycarp has to pay this sum without any change.\n\nWe can't buy any more than 2 shovels without any change. So Polycarp has to pay this sum without any change.\n\nIn the third example Polycarp has to buy 1 shovel.\n\nIn the fourth example Polycarp has to buy 2, and there is no shovel with denomination of 2, therefore he can't pay the sum without any change.\n\nIn the fifth example Polycarp has to buy 2 and there is no shovel with denomination of 2, therefore he can't buy the sum without any change.\n\nIn the sixth example Polycarp has to buy 3, and there are no shovels with denomination of 10 and hence he can't pay the sum without any change.\n\nSo Polycarp has to buy one shovel.\n\nIn the seventh example Polycarp has to buy 4, because he cannot buy any more than 4.\n\nSo Polycarp has to buy 2 and he can't pay the sum without any change.\n\nSo Polycarp has to buy 1 shovel.\n\nIn the eighth example Polycarp has to buy 2, and he can't buy any more than 2.\n\nSo Polycarp has to buy 1 shovel.\n\nSo Polycarp has to pay the sum without any change.\n\nSo Polycarp has to buy 1 shovel.\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"9 3\"), 9\nassert solution(\"237 7\"), 7\nassert solution(\"15 2\"), 2\nassert solution(\"17 1\"), 1"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '9'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '1'"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 10 5\") == \"1\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 2\") == \"2\"\nassert solution(\"5 3\") == \"3\"\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"117 3\") == 9\nassert solution(\"237 7\") == 2\nassert solution(\"15 2\") == 1\nassert solution(\"\") == 0\n\npass"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\n\nassert solution(\"237 7\") == \"2\"\nassert solution(\"15 2\") == \"2\"\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('117 3') == 9\nassert solution('237 7') == 9\nassert solution('15 2') == 2\nassert solution('9 2') == 1\nassert solution('97 29') == 7\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"117 3\"\n) == \"9\"\nassert solution(\n    \"237 7\"\n) == \"1\"\nassert solution(\n    \"15 2\"\n) == \"2\"\nassert solution(\n    \"10 2\"\n) == \"3\"\nassert solution(\n    \"10 2\"\n) == \"1\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"111222\") == \"YES\"\n\n\nExample 2:\n\nInput\n2 3\nXXX\nXXX\n\nOutput\nNO\n\n\nExample 3:\n\nInput\n2 3\n.X\nXX\n\nOutput\nNO\n\nExample 4:\n\nInput\n2 2\n.X\nXX\n\nOutput\nYES\n\n\nExample 5:\n\nInput\n5 5\n.....\n..X..\n.....\n.....\n.....\n\nOutput\nNO\n\n\n\n\nConstraints:\n\n1 <= n, m <= 500\n1 <= stdin.length <= 300\n\n\nFollow up:\n\nHow would you optimize your solution?\n\n\nConstraints:\n\n-1 <= n, m <= 500\n1 <= X <= 'X'\n\n\nPythonic\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n, m, input):\n        # index of first 'X' in 'input'\n        idx = input.find('.')\n\n        # loop through input and convert to string\n        input = ''.join(input[:idx] + input[idx+1:])\n\n        # 0 is corner, 1 is empty, 2 is filled, 3 is not empty, 4 is filled\n        corner = 0\n        empty = 1\n        filled = 2\n        not_empty = 3\n        not_filled = 4\n\n        # convert the corners to rows, cols, and dimentions\n        rows = n\n        cols = m\n        dim = n*m\n\n        # initialize the array\n        puzzle = [[empty for i in range(cols)] for j in range(rows)]\n\n        # fill the puzzle grid\n        for row in range(rows):\n            for col in range(cols):\n                if input[row*dim+col] == '.':\n                    puzzle[row][col] = not_empty\n                elif input[row*dim+col] == 'X':\n                    puzzle[row][col] = not_filled\n                elif input[row*dim+col] == '.':\n                    puzzle[row][col] = empty\n                else:\n                    puzzle[row][col] = not_filled\n\n        # print(f\"puzzle: {puzzle}\")\n        # print(f\"idx: {idx}\")\n        # print(f\"input: {input}\")\n        return puzzle == [[not_empty] * dim for row in range(n)]"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"111222\") == \"NO\"\nassert solution(\"111222\") == \"YES\"\nassert solution(\"111222\") == \"YES\"\nassert solution(\"111222\") == \"NO\"\nassert solution(\"111111\") == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"YES\"\n\nfor s in stdin:\n    print(\"\".join([s for s in s[1:]]))\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"NO\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"4 3\") == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"111222\") == \"YES\"\nassert solution(\"111222\") == \"NO\"\nassert solution(\"111222\") == \"YES\"\nassert solution(\"111222\") == \"NO\"\nassert solution(\"111222\") == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"111222\", \"111222\"]) == \"NO\"\nassert solution([\"111222\", \"111222\"]) == \"YES\"\nassert solution([\"111222\", \"111222\"]) == \"YES\"\nassert solution([\"111222\", \"111222\"]) == \"YES\"\nassert solution([\"111222\", \"111222\"]) == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3\",\n    \"X\",\n    \"X\") == \"NO\"\nassert solution(\n    \"5 5\",\n    \".X\",\n    \".X\") == \"NO\"\nassert solution(\n    \"5 5\",\n    \".X\",\n    \"X\") == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"111222\") == \"YES\"\nassert solution(\"111222\") == \"NO\"\nassert solution(\"5\") == \"NO\""
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1\\n1 1\\n1 2') == '2'\nassert solution('-1 -1\\n-1 3\\n4 3') == '3'\nassert solution('1 1\\n1 2\\n2 3') == '3'\nassert solution('1 1\\n1 2\\n2 3') == '2'\nassert solution('-1 -1\\n-1 -1\\n-1 -1') == '1'\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().split()) == \"1\"\nassert solution(input().split()) == \"2\"\nassert solution(input().split()) == \"3\"\nassert solution(input().split()) == \"4\"\nassert solution(input().split()) == \"0\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 200\n0 <= x_i, y_i <= 10^9\n\n------Time complexity analysis------\nTime complexity : O(N)\nSpace Complexity : O(1)\n\n------Auxiliary Space Complexity Analysis------\nTime complexity : O(N)\nSpace Complexity : O(1)\n\nRuntime: 32 ms (28.27%)\nMemory Usage: 14.4 MB (48.13%)\n\n-----References-----\nhttps://leetcode.com/problems/minimum-number-of-segments-in-polyline/discuss/44936/A-Python-solution-with-explanation\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2, 'incorrect answer'\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2, \"Solution function must return 2.\"\nassert solution(stdin) == 2, \"Solution function must return 2.\"\nassert solution(stdin) == 3, \"Solution function must return 3.\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n-10^9 < stdin[i] < 10^9\n\n\"\"\"\nclass Solution:\n    def find_min_segments(self, points: List[List[int]]) -> int:\n        x, y = 0, 0\n        l = len(points)\n        \n        if l % 2 == 1:\n            return 1\n        \n        for i in range(l // 2):\n            \n            x = x + points[i][0]\n            y = y + points[i][1]\n            \n            if x < 0 or y < 0 or x >= l or y >= l:\n                return 1\n        \n        return 2"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n0 \u2264 stdin.length <= 200\nstdin has the type: string\nstdin has the type: string\n\nTime Limit: 1 sec\nMemory Limit: 1M\n\n\n-----References-----\n[1] https://en.wikipedia.org/wiki/Polygon_2D#Formula\n[2] http://www.geeksforgeeks.org/polygon-coordinates-from-point-and-coordinates-for-polygon-2d-geometry-mathematics/\n[3] https://www.youtube.com/watch?v=tjmKKF-LItc\n[4] https://math.stackexchange.com/questions/480686/python-polyline-intersection-with-two-lines-in-geometry-polygon-2d-problem\n[5] https://stackoverflow.com/questions/5659493/polyline-intersection-with-two-lines-in-geometry-polygon-2d-problem\n[6] https://en.wikipedia.org/wiki/Polygon_2D#Intersection\n[7] https://en.wikipedia.org/wiki/Rim\n[8] https://stackoverflow.com/questions/13440444/minimum-number-of-intersections-between-two-polylines-in-geometry\n[9] https://stackoverflow.com/questions/3854644/polyline-intersection-with-two-lines-in-geometry-polygon-2d\n[10] https://www.geeksforgeeks.org/minimum-number-of-intersections-between-two-polylines-in-geometry-2d-pythagorean-theorem/\n[11] https://www.geeksforgeeks.org/minimum-number-of-intersections-between-two-polylines-in-geometry-3d/\n\"\"\"\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\")\"\nassert \"NO\" not in solution(\"((()(\")\nassert solution(\"))(()((\")\nassert solution(\")\"\nassert \"NO\" not in solution(\"(()()()()\")\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3,0') == 'YES'\nassert solution('1,3') == 'YES'\nassert solution('3,1') == 'NO'\n\n\n\n\n\n------IMP-------\n\nCreate a graph having k-regular undirected k-regular graphs, that contain at least one bridge,\nwhose degree is k, and that has at least one bridge. \n\n\n------IMP-------\n\nCreate a graph having at least one bridge, whose degree is k, and that has at least one bridge. \n\nassert solution('2,2') == 'NO'\nassert solution('1,2') == 'NO'\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"NO\", \"The constructed graph must be connected, the degrees of all vertices of the graph must be equal k\"\nassert solution(input) == \"YES\", \"Graph doesn't exist\"\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 1) == \"NO\"\nassert solution(1, 2) == \"NO\"\nassert solution(1, 3) == \"NO\"\nassert solution(2, 1) == \"YES\"\nassert solution(2, 2) == \"YES\"\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n\n1 \u2264 k \u2264 10^4\n1 \u2264 n, m \u2264 10^4\n\n--\n\nedge (u, v) = [a, b] \n(0 \u2264 a, b \u2264 n)\n\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"NO\"\nassert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"1 2 4\") == \"NO\"\nassert solution(\"1 2 4 5\") == \"YES\"\n\nassert solution(\"0 0 0 0 0\") == \"YES\"\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nInput\n1\n\nOutput\nNO\n2 1\n0 2\n1 0\n2 2\n\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\\\")\\\"\\\"\\\")\\\"\\\"\\\"\\\"\\\")\nInput\n2\n\nOutput\nNO\n2 2\n1 2\n3\nOutput\nNO\n3\n2\n1\n2\nOutput\nNO\n3\n2\n1\n2\n3\nOutput\nYES\n3\n2\n1\n2\nOutput\nYES\n3\n2\n1\n2\n3\nOutput\nYES\n3\n2\n1\n2\nOutput\nYES\n3\n2\n1\n2\nOutput\nNO\n3\n2\n1\nOutput\nNO\n2\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\nOutput\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n\n-----Example-----\n\nInput\n\n3\n\nOutput\nNO\n1 2\n3 2\n3 2\n\n-----Constraints-----\n\n1 <= k <= 100\n\n1 <= stdin.length <= 10^4\n\nstdin contains only digits 0-9, the digits are separated by a single space.\n\n\n-----Solution-----"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"codeforces\") == \"1\"\nassert solution(\"abacabadabacaba\") == \"0\"\nassert solution(\"baaab\") == \"1\"\nassert solution(\"ba\") == \"1\"\nassert solution(\"aaa\") == \"0\"\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('codeforces') == 1\nassert solution('aa') == 0\nassert solution('aa') == 0\nassert solution('aa') == 1\nassert solution('aa') == 0\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin=input,\n    expected_result=\n    \"1\",\n    input_=\"1 3 4 5 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 201 202 203 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 238 239 240 241 241 242 243 244 245 245 246 246 247 248 248 249 251 252 253 253 255 255 255 257 258 259 260 261 262 263 264 265 266 267 268 269 290 291 292 293 294 295 296 297 298 299 300 301 301 302 302 303 303 304 305 306 308 309 310 311 310 313 315 316 317 318 319 320 320 321 321 322 323 323 324 325 326 327 328 329 330 330 331 332 333 334 334 335 336 337 336 338 339 340 341 341 342 343 344 345 346 347 348 349 350 351 351 353 353 354 355 355 356 357 358 359 359 360 361 363 363 6 3637 6 6 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\n\n\n-----Constraints-----\n1 <= n, m <= 10^5\n\n0 <= l_i <= r_i <= n\n\n+\n\n0 <= stdin[j] <= k\n\n\n------Time complexity-------\n\nruntime: O(n^3)\n\nspace: O(n)\n\n\n------Algorithm-----\n\nTo store all results for queries[i][j] in a dictionary.\n\nThe key is the index of the query in the list of all possible queries.\n\nThe value is the number of occurrences of the query in the string.\n\nThis is a hashmap which contains all possible results for the key.\n\nTo count occurrences of the query in a substring.\n\ntime complexity: O(n)\n\nspace complexity: O(n)\n\nThe dict_n will contain all possible results for the index in the query.\n\nTo store all the results in a list.\n\ntime complexity: O(n)\n\nspace complexity: O(n)\n\nuse a queue for the hashmap.\n\nThis is a queue with a double-ended queue.\n\ntime complexity: O(n)\n\nspace complexity: O(n)\n\n--------------brute force implementation------------------\n\niterate over the all possible substrings.\n\nTime complexity: O(n)\n\nSpace complexity: O(n^2)\n\nThe first string will be processed as a dictionary.\n\nTime complexity: O(n)\n\nSpace complexity: O(n)\n\nadd all occurrences of the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nuse a queue for the dict.\n\nTime complexity: O(n)\n\nSpace complexity: O(n)\n\nUse two for loops to process the string.\n\nTime complexity: O(n)\n\nSpace complexity: O(n)\n\nuse a queue for the dict.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nuse a queue for the dict.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nuse a queue for the dict.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nuse a queue for the dict.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nuse a queue for the dict.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nuse a queue for the dict.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary.\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n)\n\nadd all the substrings to a dictionary."
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('for') == 4\nassert solution('codeforces') == 0\nassert solution('abcabab') == 0\nassert solution('aabbcddee') == 0\nassert solution('abacadaabcd') == 1\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100,\n1 \u2264 k \u2264 100,\n1 \u2264 d \u2264 k.\n\nAccepted\n218,855\nSubmissions\n9937 ms\nMemory Usage\n22.2 MB\n\n---Coding Style---\n\nGood try to solve the problem. In this problem, you need to find the total number of ways to make the given number n equal to the given number k.\n\nThe output is guaranteed to be less than 100,000,000.\n'''"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"3\"\n\nassert solution(inp) == \"3\"\n\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 3 2') == '3'\nassert solution('3 3 3') == '3'\nassert solution('4 3 2') == '6'\nassert solution('4 5 2') == '7'"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin=\n    \"3 3 2\"\n) == \"3\"\nassert solution(\n    stdin=\n    \"4 3 2\"\n) == \"3\"\nassert solution(\n    stdin=\n    \"4 5 2\"\n) == \"4\"\nassert solution(\n    stdin=\n    \"4 6 2\"\n) == \"2\"\nassert solution(\n    stdin=\n    \"4 7 2\"\n) == \"1\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0 1 0\") == \"1\"\nassert solution(\"1 0 1\") == \"2\"\nassert solution(\"1 0 2\") == \"3\"\nassert solution(\"2 0 1\") == \"3\"\nassert solution(\"2 0 2\") == \"4\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3 2\") == \"1\"\nassert solution(\"3 3 3\") == \"3\"\nassert solution(\"4 3 2\") == \"6\"\nassert solution(\"4 5 2\") == \"7\"\n\n\n[Challenge]\n\n1) Make it better by increasing the edge weights of the tree. \n\n\n2) Put in the code below the k-tree\u2019s edges in the form of a list, and use it to determine the weight of each edge of the k-tree. \n\"\"\"\n\n\nimport sys\nfrom collections import defaultdict\nfrom heapq import heapify, heappush, heappop\nfrom math import gcd\nfrom itertools import permutations"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 3\nprint(\"solution test passed\")\n\"\"\"\n\nfrom math import factorial\n\nn, k, d = map(int, input().split())"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['5', 'B', 'B', 'W', 'B', 'W', 'B', 'B', 'W', 'B', 'B', 'B', 'B']) == \"1\"\nassert solution(['5', 'B', 'B', 'W', 'W', 'W', 'B', 'W', 'W', 'W', 'W', 'W', 'B', 'W']) == \"3\"\nassert solution(['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1']) == \"1\"\nassert solution(['5', 'B', 'B', 'W', 'B', 'W', 'B', 'B', 'W', 'B', 'B', 'B', 'B', 'B']) == \"3\"\nassert solution(['3', 'B', 'W', 'W', 'B', 'W', 'B', 'B', 'W', 'B', 'B', 'B', 'B', 'B']) == \"1\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"BBW\"]) == \"W\"\nassert solution([\"BWBWB\"]) == \"BWB\"\nassert solution([\"BWBWBWBW\"]) == \"WBWB\"\nassert solution([\"WBBBBWWBWBBBW\"]) == \"BBWB\"\nassert solution([\"WWWW\"]) == \"W\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 5\") == \"BBW\"\nassert solution(\"3 2\") == \"WBBWW\"\nassert solution(\"4 1 1\") == \"BBBB\"\nassert solution(\"6 5\") == \"WW\"\nassert solution(\"13 4\") == \"BBWBBWBB\"\n\"\"\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2 1 1 1 1\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 2 1 1 1 1\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 4 0 0 0') == '0 1 1'\nassert solution('5 6 1 4 1') == '0 0 0 0 0'\nassert solution('5 1 2 2 2') == '0 0 0 0'\nassert solution('2 5 2 5 2') == '0 0 0'\nassert solution('1 0 1') == '0 0'\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(3) + str(1) + str(1) + str(1)\nassert solution(stdin) == str(2) + str(1) + str(1) + str(1)\nassert solution(stdin) == str(2) + str(1) + str(1) + str(1)\nassert solution(stdin) == str(3) + str(1) + str(1) + str(1)\nassert solution(stdin) == str(0)\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"BWBWBW\",\"BBBBWW\"]) == \"1 1 1\"\nassert solution([\"WBBBBWW\",\"BBBWBWW\"]) == \"1 1 1\"\nassert solution([\"BWBWBW\",\"WWWWWW\"]) == \"1 1 1\"\nassert solution([\"BBBWBWBWW\",\"BBBWBW\"]) == \"1 1 1\"\nassert solution([\"WBBBWBWWWW\",\"BBBBWW\"]) == \"1 1 1\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution((\"(()())(\")) == (\"(())()\"))\nassert solution((\"((()(()))\")) == (\"(()(()))\")\nassert solution((\"(())(()))()\")) == (\"(()())()\")\nassert solution((\"(()())((()()))\")) == (\"(()())()\")\nassert solution((\"(()())(((()(())))\") == \"()()()(\")\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\\\"8 4 5\\\") == \"(()()()())\\\", 'incorrect solution'\n\nassert solution(\\\"8 8 8\\\") == \"\"\nassert solution(\\\"(())()()\\\") == \"()()()\"\nassert solution(\\\")()((()()))\\\" == \"()((())\"\nassert solution(\\\"(()(()))\\\") == \"()()((())\""
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '()()'\nassert solution(input) == '(()()'\nassert solution(input) == '(()())'\n\n\"\"\"\n\nfrom itertools import combinations\n\n\nclass Solution:\n    def __init__(self):\n        self.st = []\n\n    def solution(self, stdin: str) -> str:\n        st = stdin.split()\n        self.st = []\n        for i in range(0, len(st)):\n            if len(st[i]) % 2 == 1:\n                st[i] += ')'\n            if st[i] in ['(', ')', ')', ')', '(']:\n                self.st.append(st[i])\n        self.st = [''.join(i) for i in list(combinations(self.st, len(self.st) // 2))]\n        print(self.st)\n        return ''.join(self.st)"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"(((())(())())()()))\") == \"()(()())()\"\nassert solution(\"((())(())())()()())\") == \"()()()(())()\"\nassert solution(\"((())(())())()(()))\") == \"()()()\"\nassert solution
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('(())()') == ')()()'\nassert solution('(())((()))') == '(())()'\nassert solution('(())((())') == '(()())'\nassert solution('((())()(())') == '(()())'\nassert solution('((())())(())') == '())()()'\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 4 5\") == \"(()())()\"\nassert solution(\"2 4 3\") == \"()()()\"\nassert solution(\"2 6\") == \"()()\"\nassert solution(\"2 8 8\") == \"()\"\nassert solution(\"2 8\") == \"()\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"()()()\"\n\n\"\"\""
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"()()\"\nassert solution(stdin) == \"()()\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"()()\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"()()\"\n\"\"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"(())()\") == \"()\"\nassert solution(\"(()())\") == \"\"\nassert solution(\"(()())()\") == \"\"\nassert solution(\"(())()()\") == \"\"\nassert solution(\"(()((())))\") == \"()()\"\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n> 100 Y\n< -100 Y\n> 55 N\n\n\"\"\") == \"Impossible\"\n\n\"\"\"\n\"\"\"\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"./task1.py\") == \"Impossible\"\n\n\"\"\""
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 < 2 + 2\") == \"yes\"\nassert solution(\"1 < 2\") == \"yes\"\nassert solution(\"< 3 = 4\") == \"no\"\nassert solution(\"< -3 = 1\") == \"no\"\nassert solution(\"1 = 1 + 1\") == \"no\"\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Impossible\"\nprint(solution(stdin))\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"> 0\") == \"Y\"\nassert solution(\"< 0\") == \"N\"\nassert solution(\"< 1\") == \"N\"\nassert solution(\"< 1\") == \"N\"\nassert solution(\"< 1\") == \"N\"\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"No\"\n\n\n-----Brute Force Method-----\n\nStart with a trivial set of numbers. Choose all even numbers that meet the condition by creating a set. The set is a set of numbers that are not\neven integers. Find any number that meets the condition by choosing all numbers from the set, i.e. from all even numbers. Return a number that meets the condition\nby choosing all odd numbers from the set and all even numbers from the set.\n\n-----O(n) time complexity-----\n\nA clever algorithm that uses brute force is called to solve this problem. To solve a problem, the program\n\n1. Get all even numbers from the set\n2. Find all odd numbers from the set\n3. Choose any number that meets the condition and add it to the set\n4. Find any odd number that does not meet the condition and add it to the set\n5. Return any odd number that does not meet the condition.\n\n-----O(1) memory complexity-----\n\nThe complexity of a brute force algorithm is O(n).\n\nThe program that solves the problem is called a combinatorial search problem (a search problem is a set of nodes that is a path from a source node to a destination node). \nTo prove that a number is a valid solution to a problem, we can calculate the number of odd numbers from all even numbers in the set,\nand we can get from any odd numbers in the set to any even numbers in the set.\n\nThere are no solutions if there are several odd numbers that meet the condition. If there is only one odd number that meets the condition, then it's a valid solution.\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\nimport itertools\nimport math\nfrom functools import reduce\nfrom operator import mul\n\nn = int(input())\nd = defaultdict(int)\n\nfor i in range(n):\n    temp = input().strip().split(' ')\n    x = int(temp[0])\n    y = int(temp[1])\n    d[x] += y\n    d[y] -= x\n\nodd_num = list(d.keys())\nodd_num.sort(reverse=True)\nodd_num_set = set(odd_num)\n\neven_num = []\nfor i in odd_num:\n    if i % 2 == 0:\n        even_num.append(i)\n\nodd_num.sort()\neven_num.sort(reverse=True)\nodd_num_set.update(even_num)\n\nfor i in odd_num_set:\n    if i % 2 == 1:\n        even_num.remove(i)\n\neven_num.sort()\nodd_num.sort(reverse=True)\nodd_num_set.update(even_num)\n\nodd_num = list(odd_num_set)\nodd_num.sort(reverse=True)\n\nfor i in odd_num:\n    if i % 2 == 0:\n        even_num.remove(i)\n\nodd_num.sort()\neven_num.sort(reverse=True)\nodd_num_set.update(even_num)\n\nfor i in odd_num_set:\n    if i % 2 == 1:\n        even_num.remove(i)\n\neven_num.sort()\nodd_num.sort(reverse=True)\nodd_num_set.update(even_num)\n\nprint(reduce(lambda x, y: x * y, odd_num))\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 'Impossible'\nassert solution(inp) == 'Impossible'\nassert solution(inp) == 'Impossible'\nassert solution(inp) == 'Impossible'\nassert solution(inp) == 'Impossible'\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Impossible'\n\"\"\"\n\nfrom sys import stdin\nimport re"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Impossible\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ABCABC\") == 5\nassert solution(\"ABCBACB\") == 4\nassert solution(\"ABCBACBB\") == 5\nassert solution(\"ABCBACBBAA\") == 5\nassert solution(\"ABCBACBBAAB\") == 4\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\",\"4\"]) == \"4\"\nassert solution([\"5\",\"3\"]) == \"5\"\nassert solution([\"5\",\"3\",\"3\"]) == \"4\"\n\n\n>>> import doctest\n>>> doctest.testmod(verbose=1)\nRunning doctests\n  1 items passed (3 tests)\n>>> doctest.testmod(verbose=True)\nTests finished with exit code 0\n>>>\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('ABCABC') == 3\nassert solution('AAABBB') == 5\nassert solution('BBAABB') == 5\nassert solution('ABABBA') == 6\nassert solution('AAABBBAABBB') == 7\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n\"\"\"\n\nimport math"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin\n    ) == 4\n\"\"\"\nimport math"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0, \"Returned wrong result.\"\nassert solution(stdin) == 0, \"Returned wrong result.\""
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5, \"Invalid Syntax\"\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABABAA\") == 1\nassert solution(\"AABBBA\") == 2\nassert solution(\"BBAABBBA\") == 4\nassert solution(\"BBBAAABBA\") == 5\nassert solution(\"AABBAABBAA\") == 4\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\n<pep8-fix>\n\n<pep8-fix>\n\n\n<editor-fold desc=\"Returned value\">\nThe \"locales\" variable is used to keep track of the number of characters in each of the given strings."
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"Failed to find an input that is a sum of at least two consecutive integers.\"\n\"\"\"\n\nimport math\n\nclass Solution:\n    def solution(self, stdin):\n        # TODO: write your code here\n        a = int(stdin[0])\n        b = int(stdin[1])\n        mod = 10**9+7\n        mod_dic = {}\n        for num in range(mod, mod*b, mod):\n            if num % a!= 0:\n                continue\n            num_mod = (num+mod)//b\n            if num_mod in mod_dic:\n                continue\n            mod_dic[num_mod] = num\n        ans = 0\n        for num in range(a, b, mod):\n            ans += num*mod_dic[num]\n        return str(ans)"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == ['L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', 'A', 'M', 'O', 'L', '"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin) == \"Zqdzyjfzvbhbxcqwgzaqsdjfgzbhbqwzaqdqwbaqbaaqbaaqgwvqbwbvbaqbzbaq\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(stdin) == \"Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Nil\"\nassert solution(input()) == \"Nil\"\nassert solution(input()) == \"Nil\"\nassert solution(input()) == \"Nil\"\nassert solution(input()) == \"Nil\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"Y\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Na Na Na\"\n\nassert solution(stdin) == \"Na Na Na\"\n\nassert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Adam Bob Bob Cpqepqwer Limak Adam Bob Adam\"\nassert solution(input()) == \"Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0, \"no\"\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0, \"solution() failed\"\nassert solution(stdin) == 3, \"solution() failed\"\nassert solution(stdin) == -1, \"solution() failed\"\nassert solution(stdin) == -1, \"solution() failed\"\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == -1\nassert solution(input()) == 0\nassert solution(input()) == 3\nassert solution(input()) == 3\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == -1\nassert solution(input()) == 0\n\n\n-----Constraints-----\n1 <= a, b <= 10^9\n\n------Memory Use-----\n24 ms (51.00%)\n\n------Time Limit-----\n30.000 ms (95.00%)\n\n------Coding Rules-----\nThe input will be given as a single line of input consisting of two space-separated integers a and b (1 \u2264 a, b \u2264 10^9). \n\"\"\"\n\nimport math\nimport sys\nimport time"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"15 20\") == 3\nassert solution(\"14 8\") == -1\nassert solution(\"6 6\") == 0\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 0\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 0\n\nPrint Solution\n\nExample 1:\n\nInput\n\n5 100 1\n0 1 2 1 2\n\nOutput\n\n101\n\nExplanation\n\nThe first dancer is to buy a white suit for the first from left to right and another white suit for the rightmost to left.\n\nThe second dancer has no suit to buy.\n\nThe third dancer is to buy a black suit for the first from left to right, and another black suit for the rightmost to left.\n\nThe second and third dancers are the same, but their white suits have different numbers of $c_i$.\n\nThe second and third dancers have no suit to buy.\n\nExample 2:\n\nInput\n\n3 12 1\n0 1 0\n\nOutput\n\n0\n\nExplanation\n\nThe first and second dancers have no suit to buy, because there is no other color for these.\n\nExample 3:\n\nInput\n\n3 12 12\n0 1 0 0\n\nOutput\n\n0\n\nExplanation\n\nThe first and second dancers have no suit to buy, because they can't change positions.\n\nExample 4:\n\nInput\n\n3 12 12\n0 1 0 0\n\nOutput\n\n0\n\nExplanation\n\nThe first and second dancers have no suit to buy, because they can't change positions.\n\nExample 5:\n\nInput\n\n3 12 12\n0 1 0 0\n\nOutput\n\n-1\n\nConstraints\n\n1 <= stdin.length <= 10^5\n1 <= $n$, $a$, $b$ < $1\\leqn$\n1 <= $c_i$ < $10^5$\n\n\"\"\""
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1, 'incorrect solution'\n\"\"\""
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 101\nassert solution(stdin) == -1\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n\n1 <= n, a, b <= 100\n\n1 <= c_i <= 3\n\nn \\leq a, b \\leq 100\n\n------Time Limit Exceeded------\n\n---Memory Limit Exceeded\n\n---Time Limit Exceeded---\n\n---Problems with Time Limit Exceeded---\n\n---Constraints with Time Limit Exceeded---\n\n------\n\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 10 12\") == -1\nassert solution(\"3 12 1\") == 0\nassert solution(\"3 12 0\") == 1\nassert solution(\"3 12\") == 0\nassert solution(\"3 12 1\") == 0\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == -1\nassert solution(\"1\") == 1\nassert solution(\"2\") == 0\nassert solution(\"3\") == 2\nassert solution(\"4\") == 2\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '-1'\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == [-1]\n\nassert solution(stdin) == [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"-1\"\nassert solution(\"10\") == \"b\"\nassert solution(\"20\") == \"w\"\nassert solution(\"30\") == \"bb\"\nassert solution(\"40\") == \"ww\"\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 'w'\nassert solution(2) == 'w'\nassert solution(3) == 'b'\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"bb\"\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == 'b\\nb\\nb\\nb\\nb\\nw\\nw\\n'\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == \"w\"\nassert solution(2) == \"w\"\nassert solution(3) == \"b\"\nassert solution(4) == \"w\"\nassert solution(5) == \"b\"\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1') == '1'\nassert solution('2') == 'bb'\nassert solution('3') == 'ww'\nassert solution('4') == 'bb'\nassert solution('5') == 'ww'\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10') == 10\nassert solution('12') == 6\nassert solution('0') == 0\nassert solution('1') == 1\nassert solution('10000') == 100\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"14\""
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(10) == 10\nassert solution(5) == 6\nassert solution(12) == 12\nassert solution(1) == 10\nassert solution(100) == 1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 6\nassert solution(input()) == 5\nassert solution(input()) == 10\nassert solution(input()) == 2\nassert solution(input()) == 1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 6\nassert solution(stdin) == 6\nassert solution(stdin) == 6\nassert solution(stdin) == 6\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4\"\n) == \"6\"\nassert solution(\n    \"20\"\n) == \"6\"\nassert solution(\n    \"30\"\n) == \"6\"\nassert solution(\n    \"4\"\n) == \"6\"\nassert solution(\n    \"4\"\n) == \"6\"\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10\") == 10\nassert solution(\"100\") == 100\nassert solution(\"5\") == 5\nassert solution(\"2\") == 2\nassert solution(\"4\") == 4\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input:\n        str\n    ) == \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n\nThe expected output for this input is as follows:\n\nNote that the answer is case-insensitive, and you can ignore the case of the first character of each string.\n\n-----Constraints-----\n\n1 <= n <= 1e5\n\n----90 <= n <= 1e5\n\n-----Time Limit: O(n) -----\n\n5 lines of code, where $n$ represents the number of chairs.\n\n-----Space Limit: O(1) -----\n\"\"\"\n\nn = int(stdin.strip())\nchairs = [int(i) for i in input().split()]"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\" or solution(stdin) == \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(12) == \"No\"\nassert solution(0) == \"No\"\nassert solution(1) == \"Yes\"\n\n\n-----Constraints-----\n1 <= n <= 1000\n\n\n-----Time Limit: 1.1 sec (PyPy 3.6.1)-----\n---Worst case---\n---Best case---\n---Average case---\n---All inputs are valid.\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\".10\"), \"incorrect input\"\n\nassert solution(\".1.1\"), \"incorrect input\"\n\nassert solution(\".1.0\"), \"incorrect input\"\n\nassert solution(\".0.1\"), \"incorrect input\"\n\nassert solution(\".1\"), \"incorrect input\""
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == 'Yes' or solution == 'No'\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"Yes\"\nprint(\"Yes\")\nassert solution(input) == \"No\"\nprint(\"No\")\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"101\") == \"Yes\"\nassert solution(\"10101\") == \"No\"\nassert solution(\"101010\") == \"No\"\nassert solution(\"10100110110001\") == \"Yes\"\nassert solution(\"100011011101110001110110010010001101\") == \"Yes\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 5\") == \"2 3 5 6 8\"\nassert solution(\"2 3 5 6 8\") == \"1 2 3 4 5\"\nassert solution(\"3 5 -2\") == \"2 3 5 6 8 -2\"\nassert solution(\"2 3 5 -2\") == \"1 2 3 4 -2\"\nassert solution(\"3 5 -3\") == \"2 3 5 6 8 -3\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5') == '5'\nassert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('1') == '0'\n\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= k <= 100\n\nSample Input\n\n5\n1 3 4 5\n\nSample Output\n\n2\n3 5\n\nExplanation\n\n1 = 1\n2 = 1 + 1 = 2\n3 = 1 + 2 = 2\n4 = 1 + 3 = 2\n5 = 1 + 4 = 3\n\"\"\"\nimport math\n\nimport sys"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 4\") == \"4 2 2 2 2 2 2 2 2 2\"\nassert solution(\"3 4 3\") == \"3 2 2 2 2 2 2 2 2 2 2\"\nassert solution
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\\n1\") == \"5\\n2\\n3\\n4\\n5\\n\"\nassert solution(\"3\\n1\") == \"5\\n2\\n3\\n4\\n\"\nassert solution(\"6\\n-1\") == \"6\\n5\\n7\\n8\\n\"\nassert solution(\"2\\n-2\") == \"5\\n1\\n4\\n\"\nassert solution(\"4\\n-2\") == \"1\\n2\\n4\\n5\\n\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 1 2\"\nassert solution(stdin) == \"1 2 1\"\nassert solution(stdin) == \"1 2 2\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input: \"5\") == \"5\"\nassert solution(\n    input: \"3\") == \"1\"\nassert solution(\n    input: \"5\") == \"4\"\nassert solution(\n    input: \"1\") == \"3\"\nassert solution(\n    input: \"2\") == \"1\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"1 2 4 5\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"2 3\") == \"1 3\"\nassert solution(\"3 2 4\") == \"3 4\"\nassert solution(\"3 2 2\") == \"4\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"4\", \"-2\"]) == \"2\"\nassert solution([\"1\", \"4\", \"3\", \"2\"]) == \"3\"\nassert solution([\"1\", \"4\", \"3\", \"2\", \"6\", \"8\", \"12\"]) == \"12\"\nassert solution([\"1\", \"4\", \"3\", \"2\", \"6\", \"8\", \"12\", \"15\"]) == \"15\"\nassert solution([\"1\", \"4\", \"3\", \"2\", \"6\", \"8\", \"12\", \"15\", \"18\"]) == \"18\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"5\",\n    [\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1\",\n        \"1"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '6'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 2 1\") == \"YES\"\nassert solution(\"3 1 1 1 1 99\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 1, 2, 1) == \"YES\"\nassert solution(2, 1, 1, 1) == \"YES\"\nassert solution(2, 2, 1, 1) == \"YES\"\nassert solution(1, 2, 3, 2) == \"NO\"\nassert solution(3, 2, 1, 3) == \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(3) == \"NO\"\nassert solution(4) == \"YES\"\nassert solution(5) == \"YES\"\n\nNotes\n\nInput strings can be of different lengths, e.g. input strings are:\n\ntwo-one\ntwo-two\nthree-three\nfour-four\n\nOutput string can be of any length, but must be a string.\n\nSample input\n\nThree three\nFour four\nFive five\nSample output\n\nYES\n\n\n-----Examples-----\nInput\n5\n2 3 2 1 2 2\n\nOutput\nNO\n\n\n-----Notes-----\n\nInput strings are of any length, but the answer is a string.\n\nSample input\n\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\nTwo three\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 1 1 1 1 99\", \"2 1 1 1 1 99\", \"3 1 1 1 1 99\", \"4 1 1 1 1 99\", \"5 1 1 1 1 99\", \"6 1 1 1 1 99\"]) == \"YES\"\nassert solution([\"1 1 1 1 1 99\", \"2 1 1 1 1 99\", \"3 1 1 1 1 99\", \"4 1 1 1 1 99\", \"5 1 1 1 1 99\", \"6 1 1 1 1 99\"]) == \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin=\"1 3 2 1 2 1\"\n) == \"YES\"\nassert solution(\n    stdin=\"1 1 1 1 1 99\"\n) == \"YES\"\nassert solution(\n    stdin=\"1 1 1 1 1 99\"\n) == \"NO\"\nassert solution(\n    stdin=\"1 1 1 1 1 99\"\n) == \"NO\"\nassert solution(\n    stdin=\"1 1 1 1 1 99\"\n) == \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7 4 3 2 4 5 1\") == \"YES\"\nassert solution(\"2 3 7\") == \"NO\"\nassert solution(\"2 3 1 1\") == \"NO\"\nassert solution(\"2 1 1 1\") == \"YES\""
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 50\n0 <= score[i] < 1000\n\n------Submissions-----\n3\n------Time limit exceeded------\n\n----Solved----\n\n---Success!---\n\"\"\"\nimport sys\nimport heapq"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"NO\"\nassert solution(0) == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\""
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 2, 3, 4, 6, 8, 9) == 5\nassert solution(100, 200, 10, 10, 100, 200, 100, 200, 200) == 7\nassert solution(100, 200, 1, 1, 100, 200, 1, 200, 200, 1) == 5\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n0 <= l, r <= stdin.length\n1 <= stdin.length <= 10^9\nstdin contains characters \u20190\u2019, \u20191\u2019, \u20192\u2019, \u20193\u2019, \u20194\u2019, \u20195\u2019, \u20196\u2019, \u20197\u2019, \u20198\u2019, \u20199\u2019.\n\n---Code---"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 5\n\n\n-----Examples-----\n\nInput 1:\n\n2\n\nOutput 1:\n\n7\n\nInput 2:\n\n6\n\nOutput 2:\n\n4\n\nInput 3:\n\n1\n\nOutput 3:\n\n1\n\nInput 4:\n\n0\n\nOutput 4:\n\n0\n\n-----Solution-----"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 10\") == \"7\"\nassert solution(\"100 200\") == \"5\"\nassert solution(\"1 2000000000\") == \"326\""
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '7'\n\n\n-----Time complexity-----\n\ntime O(\u221alN)\n\nTime O(\u221aN)\n\n< input >\n1 10\n\n< output >\n7\n\n< input >\n100 200\n\n< output >\n5\n\n< input >\n1 2000000000\n\n< output >\n326\n\n< input >\n100 200\n\n< output >\n\n\n5\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n\n100 200\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '5'\nassert solution(stdin) == '326'"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 7\n\n-----Quick Sort-----\n\nTo find the largest element from a list, we can write the following equation:\n\n\u2460Given a list, find the largest element from it.\n\u2461Loop through the list from the end to the front.\n\u2462If the element is larger than the current element, keep adding the current element.\n\u2463Repeat for each element in the list.\n\nPrint the last element of the sorted list."
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '7'\n\n-----Constraints-----\n1 <= stdin.length <= 100\nstdin.length \u2265 2\n1 <= l <= r\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\nclass Solution:\n    def twoIntegers(self, l: int, r: int) -> int:\n        s = str(l) + str(r)\n        if s == '1':\n            return 1\n        if s[-1] == '0':\n            return 0\n        return int(s[:-1]) * 2 + int(s[-1]) * 3\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 7\nassert solution(input()) == 5\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"7\""
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"(()(()()))\"\n) == \"0\"\n\nassert solution(\n    \"(())()(())\"\n) == \"0\"\n\nassert solution(\n    \"((()()))((())()()((())))()\"\n) == \"0\"\n\nassert solution(\n    \"(()())((()())(()()))((()())(()())(()()))()()\"\n) == \"0\"\n\nassert solution(\n    \"(())())(())(())(())()()()\"\n) == \"0\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 1) == 0\nassert solution(9, 11) == 4\nassert solution(5, 0) == 3\nassert solution(3, 2) == 1\nassert solution(3, 3) == 1\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"9 11\") == 0\nassert solution(\"5 0\") == 4\nassert solution(\"3 2\") == 2\nassert solution(\"3 1\") == 3\nassert solution(\"3 2\") == 3\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '4'"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 3\") == \"4\"\nassert solution(\"10 3 2\") == \"3\"\nassert solution(\"10 3 2 0\") == \"3\"\nassert solution(\"10 4 2\") == \"1\"\nassert solution(\"10 4 2 1\") == \"0\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"9 11\") == 4\nassert solution(\"5\") == 3\nassert solution(\"4\") == 2\nassert solution(\"3\") == 1\nassert solution(\"1\") == 0\n\"\"\""
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n1\u2264n\u226410^4\n1\u2264k\u226410^4\n1\u2264stdin[i]\u226410^9\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n5\n\nOutput\n3\n\nExplanation\n\nInput: n = 5, k = 3\n\nAction 1: put one candy into the box; eat one candy from the box; put three candies into the box; eat one candy from the box; put four candies into the box; eat one candy from the box; put five candies into the box.\nAction 2: put one candy into the box; put two candies into the box; eat one candy from the box; put three candies into the box; eat one candy from the box; put four candies into the box.\nAction 3: put one candy into the box; put one candy from the box; eat one candy from the box; put three candies into the box; eat one candy from the box; put four candies into the box.\nAction 4: put one candy into the box; put one candy from the box; eat one candy from the box; put one candy from the box; eat one candy from the box.\nAction 5: put one candy into the box; put one candy from the box; eat one candy from the box; put one candy from the box; eat one candy from the box.\nAction 6: put one candy into the box; put one candy from the box; eat one candy from the box; put one candy from the box; eat one candy from the box.\nAction 7: put one candy into the box; put one candy from the box; eat one candy from the box; put one candy from the box; eat one candy from the box.\nAction 8: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 9: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 10: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 11: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 12: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 13: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 14: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 15: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 16: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 17: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 18: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 19: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 20: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 21: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 22: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 23: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 24: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 25: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 26: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 27: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 28: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 29: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 30: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 31: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 32: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 33: put one candy into the box; put one candy from the box; eat one candy from the box; eat one candy from the box.\nAction 34: put one candy into the box; put one"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5' + '2' * 2 + '2' * 3) == 'YES'\nassert solution('3' + '2' * 3 + '2' * 2) == 'NO'\nassert solution('1' + '3' * 3) == 'NO'\nassert solution('3' + '1' * 2 + '1' * 3 + '3' * 2) == 'YES'\nassert solution('1' * 3 + '3' * 3 + '1' * 2) == 'NO'\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 'YES'\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= a_i <= 10^9\n\n\n-----Time complexity-----\nO(n) = n, n log n\n\nO(n) = n, n log n\n\nO(1) = 1, 1\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n'''\nclass Solution:\n    def triangle(self, s: int) -> str:\n        # Python3\n        # def solution(n,a):\n        #     return str(n*(n-1)/2) if a*(n-1)==n else str(a*(n-1))\n        # return solution(3,3)\n\n        # Method 2:\n        import math\n        x = 3\n        y = math.factorial(y)/(math.factorial(x)*math.factorial(y-x))\n        print(x,y)\n        return str(y*(y-1)/2) if x*(y-1)==y else str(x*(y-1))\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [1, 5, 3, 2, 4]) == \"YES\"\nassert solution(3, [4, 1, 2]) == \"NO\"\nassert solution(3, [1, 4, 5]) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,1,1,1) == \"NO\"\nassert solution(1,1,1,2) == \"YES\"\nassert solution(1,1,2,2) == \"YES\"\nassert solution(1,1,3,3) == \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,1,1,4,3,2,2) == \"NO\"\n\nassert solution(2,2,3,4,5,1,1) == \"NO\"\n\nassert solution(10,2,4,3,3,2,5) == \"NO\"\n\nInput\n1\n2 5 3 2 4\n\nOutput\nNO\n\nInput\n3\n3 4\n\nOutput\nYES\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= a_1, a_2,..., a_{n} <= 10^9\n\nA triangle consists of at most three line segments.\n\nimport math\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\",\"3\",\"2\",\"4\",\"1\"]) == \"NO\"\nassert solution([\"5\",\"3\",\"2\",\"4\",\"1\"]) == \"YES\"\nassert solution([\"5\",\"3\",\"2\",\"4\",\"1\"]) == \"YES\"\nassert solution([\"5\",\"3\",\"2\",\"4\",\"1\"]) == \"NO\"\nassert solution([\"5\",\"3\",\"2\",\"4\",\"1\"]) == \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(in_str) == \"YES\"\n\n\nassert solution(in_str) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= a_i <= 10^9\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"No\"\nassert solution(\"1 2 3 4 5 6 8\") == \"Yes\"\nassert solution(\"2 3 5 1 4 6 8\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"10\") == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 2) == \"Yes\", \"output: \"\nassert solution(4, 2) == \"No\", \"output: \"\nassert solution(1000, 1001) == \"No\", \"output: \"\nassert solution(1000, 10001) == \"Yes\", \"output: \"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('XCY'), 'Error'\nassert solution('XCP'), 'Error'\nassert solution('XXCRP'), 'Error'\nassert solution('XCRXC'), 'Error'\nassert solution('XCRXCRP'), 'Error'\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin, 1) == \"Yes\"\nassert solution(stdin, 2) == \"Yes\"\nassert solution(stdin, 3) == \"Yes\"\nassert solution(stdin, 4) == \"No\"\nassert solution(stdin, 5) == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"0 1 1\"\n) == \"Yes\"\nassert solution(\n    \"0 1\"\n) == \"No\"\nassert solution(\n    \"0 1 1 2\"\n) == \"No\"\nassert solution(\n    \"1 1\"\n) == \"No\"\nassert solution(\n    \"1 1 0\"\n) == \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(6, 3) == \"Yes\"\nassert solution(4, 2) == \"No\"\n\nassert solution(1000, 1000) == \"Yes\"\nassert solution(1000, 10) == \"No\"\n\nassert solution(1, 100) == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '5'\nassert solution(stdin) == '20'\nassert solution(stdin) == '2'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '20'\nassert solution(stdin) == '5'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 3') == '5'\nassert solution('3 1') == '20'\nassert solution('4 1') == '5'\nassert solution('2 4') == '2'\nassert solution('0 4') == '0'\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == 5\nassert solution(\"3 8\") == 20\nassert solution(\"2 2\") == 2\nassert solution(\"2 2\") == 0\nassert solution(\"2 2\") == 0\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '20'\n\"\"\""
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '20'\nassert solution(stdin) == '20'\nassert solution(stdin) == '20'\nassert solution(stdin) == '20'\nassert solution(stdin) == '20'\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"2 2\") == \"20\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '20'\n\n\"\"\"\nimport sys\n\nfrom random import randrange"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3\") == \"5\"\nassert solution(\"2 4\") == \"10\"\nassert solution(\"2 3\") == \"20\"\nassert solution(\"2 1\") == \"10\"\nassert solution(\"3 8\") == \"15\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 3\nassert solution(3) == 2\nassert solution(4) == 5\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"25\"\nassert solution(inp) == \"42\"\nassert solution(inp) == \"24\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Your solution must be a string.\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"25\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"24\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"25\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 4 5 6 7 8\") == \"25\"\nassert solution(\"8 8 7 6 5 4 3 2 1\") == \"1\"\nassert solution(\"8 7 6 5 4 3 2 1\") == \"1\"\nassert solution(\"4 1 3 7 5\") == \"25\"\nassert solution(\"8 1 3 7 5\") == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '25'\n\nprint('solution test passed!')"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(25)\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(in_1, in_2) == str(12)\n\n\n-----Constraints-----\n1 <= n <= 9\n1 <= m <= 9\n1 <= a_1, a_2 <= 9\na_1, a_2 <= 10^9\n1 <= b_1, b_2 <= 9\nb_1, b_2 <= 10^9\n\nInput Format\n\nThe first line contains a single integer n.\nThe second line contains m integers a_1, a_2,..., a_{n}.\n\nConstraints\n1 <= n <= 10^9\n1 <= m <= 10^9\na_1, a_2,..., a_{n} <= 10^9\nb_1, b_2,..., b_{m} <= 10^9\n\nOutput Format\n\nPrint the smallest positive integer.\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"4\", \"7\", \"1\"]) == \"2\"\nassert solution([\"4\", \"7\", \"1\", \"23\", \"60\"]) == \"3\"\nassert solution([\"4\", \"7\", \"1\", \"23\", \"60\", \"77\", \"36\"]) == \"3\"\nassert solution([\"4\", \"7\", \"1\", \"23\", \"60\", \"77\", \"36\", \"47\"]) == \"2\"\nassert solution([\"4\", \"7\", \"1\", \"23\", \"60\", \"77\", \"36\", \"47\", \"56\"]) == \"3\""
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2') == 2\nassert solution('4 3') == 1\nassert solution('7 1') == 2\nassert solution('4 4') == 4\nassert solution('7 2') == 3\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"3\"\nassert solution(\"2 4 4 5\") == \"2\"\nassert solution(\"1 2 3 4\") == \"1\"\nassert solution(\"1 2 3 4 6 5 9 10\") == \"9\"\nassert solution(\"1 2 3 4 7 6 5 9 10\") == \"7\"\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == solution(input) == solution(input)\n\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(f) == \"2\"\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 222') == '2'\nassert solution('4 190') == '2'\nassert solution('7 1') == '7'\nassert solution('7 2') == '7'\nassert solution('7 3') == '7'\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 2\nassert solution(4) == 4\nassert solution(7) == 7\nassert solution(5) == 2\nassert solution(6) == 6\n"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1' == '1') == 1\nassert solution('2' == '2') == 1\nassert solution('3' == '3') == 2\nassert solution('4' == '4') == 2\nassert solution('5' == '5') == 4\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(10) == 1\nassert solution(15) == 3\nassert solution(100) == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n\n\n---Part Two---\n\nThis task should write the answer to all questions of the same task. This is a variant of the task from the first part of the challenge.\n\nI've included the function `solution()` that returns the answer to the task. As of now, it only works for task 1. You can solve any task for part 2 also.\n\nTask\nThe task is to complete the function `solution()` and solve the task with a solution to all these questions. In the next task you will have to use this function to solve any part of the challenge.\n\nConstraints\nThere are three input variables of the form:\n$a$, $b$ (1 \\le b \\le 10^{10}), and $c$, $d$, $e$, and $f$, that are integers.\n\nInput Format\nThe first line contains the two integers, $a$ and $b$, separated by a single space.\nThe next line contains the integer, $c$, separated by a single space.\nThe next line contains the integer, $d$, separated by a single space.\nThe next line contains the integer, $e$, separated by a single space.\nThe next line contains the integer, $f$, separated by a single space.\n\n\nOutput Format\nThe output is printed on a separate line.\n\n\nSample Input\n\n1\n5 3\n2\n2\n2\n4\n5\n\nSample Output\n\n2\n2\n4\n\nExplanation\n\nIn the input line, there are two values a and b, and the input lines will be:\n$a = 1$, $b = 2$\n$a = 2$, $b = 2$\n$a = 2$\n$a = 4$\n$a = 5$\n\nIn the input lines, there are three numbers $a$ and $b$, for example $a = 5$ and $b = 2$, and $c = 3$ for example $c = 4$. If you need to solve the task, you will have to write the function `solution()` that returns the answer to the task. The function has one input line for the task, the second for $a$, the third for $b$, the fourth for $c$, and the fourth for $d$. The function should return one number.\n\nConstraints\nThere are three input variables of the form:\n$a$, $b$ (1 \\le b \\le 10^{10}), and $c$, $d$, $e$, and $f$, that are integers.\nThe output of the function is always a number.\n\n\nExample Input\n\n2\n4 4\n3 4\n4 4\n\nExample Output\n\n4\n4\n\n\nExplanation\n\nIn the input line, there are two values a and b, and the input lines will be:\n$a = 2$, $b = 4$\n$a = 4$, $b = 4$\n$a = 4$\n$a = 2$\n$a = 4$\n\nIn the input lines, there are three numbers $a$ and $b$, for example $a = 2$ and $b = 4$, and $c = 3$ for example $c = 4$. If you need to solve the task, you will have to write the function `solution()` that returns the answer to the task. The function has one input line for the task, the second for $a$, the third for $b$, the fourth for $c$, and the fourth for $d$. The function should return one number.\n\nIn the input lines, the solution will be:\n$a = 2$\n$a = 4$\n\n\n\n'''\n\nclass Solution:\n    # @param {string} nums\n    # @return {string}\n\n    def solve(self, nums):\n        s = set(nums)\n        n = len(nums)\n        for i in range(n):\n            for j in range(i+1, n):\n                t = nums[i] + nums[j]\n                if t in s:\n                    s.remove(t)\n                    s.add(nums[j])\n        return list(s)"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 8\nassert solution(stdin) == 16\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4\") == \"1\"\nassert solution(\"14\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"2\") == \"1\"\nassert solution(\"13\") == \"1\"\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 2\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 10^9\n\n----Examples----\nInput\n2\n\nOutput\n2\nInput\n2\n\nOutput\n2\n\n\n------Solution----\nInput\n\n10\n3\n1 2 2 5 2 3 1 1 5 1 1 4 3 4 1 3 3 5 4 3 4 1 1 1 2 1 1 4 1 1 3 3 3 3 4 3 3 4 3 3 4 3 3\n\n------Example 1------\nInput\n2\n1 2 2 3 2 3 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(10) == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2\\n1\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\n381\\n382\\n383\\n384\\n385\\n386\\n387\\n388\\n389\\n390\\n391\\n392\\n393\\n394\\n395\\n396\\n397\\n398\\n399\\n400\\n401\\n402\\n403\\n404\\n405\\n406\\n407\\n408\\n409\\n410\\n411\\n412\\n413\\n414\\n415\\n416\\n417\\n418\\n419\\n420\\n421\\n422\\n423\\n424\\n425\\n426\\n427\\n428\\n429\\n430\\n431\\n432\\n433\\n434\\n435\\n436\\n437\\n438\\n439\\n440\\n441\\n442\\n443\\n444\\n445\\n446\\n447\\n448\\n449\\n450\\n451\\n452\\n453\\n454\\n455\\n456\\n457\\n458\\n459\\n460\\n461\\n462\\n463\\n464\\n465\\n466\\n467\\n468\\n469\\n470\\n471\\n472\\n473\\n474\\n475\\n476\\n477\\n478\\n479\\n480\\n481\\n482\\n483\\n484\\n485\\n486\\n487\\n488\\n489\\n490\\n491\\n492\\n493\\n494\\n495\\n496\\n497\\n498\\n499\\n500\\n501\\n502\\n503\\n504\\n505\\n506\\n507\\n508\\n509\\n510\\n511\\n512\\n513\\n514\\n515\\n516\\n517\\n518\\n519\\n520\\n521\\n522\\n523\\n524\\n525\\n526\\n527\\n528\\n529\\n530\\n531\\n532\\n533\\n534\\n535\\n536\\n537\\n538\\n539\\n540\\n541\\n542\\n543\\n544\\n545\\n546\\n547\\n548\\n549\\n550\\n551\\n552\\n553\\n554\\n555\\n556\\n557\\n558\\n559\\n560\\n561\\n562\\n563"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\n\n\n\n(input):\n\nread the standard input from standard input (stdin)\n\nread the input string into a variable called stdin\n\nconvert stdin to a list of strings, and then return the string list\n\ntest if the input is a string and not a list of strings\n\ntest if the input is a list of strings and not a string\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list of strings and not a list of strings\n\ntest if the input is a list"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 0\nassert solution(4) == 1\nassert solution(3) == 2\nassert solution(2) == 0\nassert solution(1) == 1\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == 0\nassert solution(2) == 0"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n1 <= n <= 200 000\n0 <= i < n\n0 <= j < n\n0 <= type of bumper <= 5\n\n\n-----See also-----\nhttps://leetcode.com/problems/shuffle-the-bumpers/discuss/122635/Faster-Python-solution-by-partitioning-to-shuffle-the-bumpers-in-order-of-position-i-and-i-for-each-jump\n\"\"\"\n\nclass Solution:\n    def findNumberOfBumps(self, n: int) -> int:\n        count = 0\n        left = 1\n        right = n\n        while left <= right:\n            mid = left + (right-left) // 2\n            if type(mid) is not int:\n                count += 1\n                left = mid + 1\n            else:\n                right = mid - 1\n        return count"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 5\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"5\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"<<><\", \">\", \">\"]) == \"0\"\nassert solution([\"<<\", \"<\", \">\"]) == \"0\"\nassert solution([\"<\", \">\", \">\"]) == \"0\"\nassert solution([\">\"]) == \"0\"\nassert solution([\"<\"]) == \"0\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n\n1 \u2264 type of bumpers <> \"<\" and \">\"\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == 8, \"This test should have failed\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '9999'"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '8'\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 8"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '0'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, n: int, lst) -> int:\n        return sum(lst) // n\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 8"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"150000000\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"20000\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 8\n\"\"\""
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"47\", \"Problem 3\"\nassert solution(1) == \"3\", \"Problem 2\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"47\""
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"47\""
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 44\nassert solution(stdin) == 17\nassert solution(stdin) == 28\nassert solution(stdin) == 32\nassert solution(stdin) == 32\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(47)\nassert solution(stdin) == str(136542)\n\nassert solution(stdin) == str(44)\nassert solution(stdin) == str(11)\nassert solution(stdin) == str(44)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"47\"\nassert solution(stdin) == \"136542\""
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 47, \"The solution is incorrect\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(47)\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abcde') == '1007'\nassert solution('abcdeej') == '2422'\nassert solution('abcdabcdefij') == '3903'\nassert solution('abcdefghij') == '3767'\nassert solution('abcdefghijj') == '381'\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n'''\n2 3\n1 2\n2 2\n3 2\n'''\n) == 5\nassert solution(\n'''\n1 3\n3 1\n'''\n) == 5\nassert solution(\n'''\n1 5\n5 1\n'''\n) == 5\nassert solution(\n'''\n2 1\n2 1\n2 2\n2 3\n'''\n) == 5\nassert solution(\n'''\n3 1\n3 1\n3 3\n'''\n) == 3\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 5\") == \"2 3\"\nassert solution(\"5 4\") == \"2 3\"\nassert solution(\"2 2\") == \"2 3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"4 1\") == \"3\"\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 5\") == \"1\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"4 1\") == \"1\"\nassert solution(\"4 2\") == \"1\"\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 2"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2\",\"3\"]) == \"3\"\n\n\n------A------\n\n1\n\n2\n\n-----B-----\n\n3\n\n1\n\n-----C-----\n\n2\n\n1\n\n-----D-----\n\n3\n\n2\n\n-----E-----\n\n2\n\n\n\n-----D-----\n\n2\n\n2\n\n-----C-----\n\n2\n\n1\n\n-----E-----\n\n\n2\n\n1\n\n-----D-----\n\n2\n\n\n\n-----B-----\n\n1\n\n1\n\n-----C-----\n\n2\n\n\n\n-----C-----\n\n2\n\n1\n\n-----D-----\n\n\n\n------B------\n\n1\n\n1\n\n-----C-----\n\n2\n\n\n\n-----C-----\n\n1\n\n1\n\n-----D-----\n\n1\n\n2\n\n\n-----E-----\n\n1\n\n2\n\n\n-----B-----\n\n1\n\n1\n\n-----C-----\n\n1\n\n2\n\n\n-----C-----\n\n2\n\n2\n\n\n-----E-----\n\n2\n\n1\n\n-----B-----\n\n\n\n\"\"\"\n\nfrom typing import List"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nprint()\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 2"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\n\n\"\"\""
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('AXBYBXA') == 'NO'\nassert solution('BACFAB') == 'NO'\nassert solution('ABA') == 'YES'\nassert solution('AB') == 'YES'\nassert solution('ABC') == 'YES'\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"AB\") == \"NO\", \"String contains two non-overlapping substrings 'AB'\"\nassert solution(\"AB\") == \"NO\", \"String contains two non-overlapping substrings 'AB'\"\nassert solution(\"BA\") == \"YES\", \"String contains two non-overlapping substrings 'BA'\"\nassert solution(\"BA\") == \"YES\", \"String contains two non-overlapping substrings 'BA'\"\nassert solution(\"ABA\") == \"YES\", \"String contains two non-overlapping substrings 'ABA'\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ABA\") == \"NO\"\nassert solution(\"BACFAB\") == \"YES\""
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'YES'\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"ABA\"]) == \"YES\"\nassert solution([\"ABFAB\", \"ABFAC\", \"BA\"]) == \"YES\"\nassert solution([\"ABC\", \"ABA\", \"BACF\"]) == \"NO\"\nassert solution([\"ABC\", \"ABA\", \"BAC\"]) == \"NO\"\nassert solution([\"ABCD\"]) == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"AB\") == \"NO\", \"Yes\"\nassert solution(\"BA\") == \"YES\", \"No\"\nassert solution(\"ABC\") == \"NO\", \"Yes\"\nassert solution(\"AXBYBXA\") == \"YES\", \"No\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a) == \"YES\"\nassert solution(b) == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(ABA) == \"NO\"\nassert solution(BACFAB) == \"YES\"\nassert solution(AXBYBXA) == \"NO\""
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\nInput\nAbabcd\n\nOutput\nYES\n\nInput\nAbabcd\n\nOutput\nNO\n\nInput\nAbabcd\n\nOutput\nYES\n\nInput\nAbabcd\n\nOutput\nNO\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n        [\n        '1 2 3 4 5',\n        '1 5 1 3 3'\n    ]) == 'NO'\n\nassert solution(\n        [\n        '1 2 3 4 5',\n        '1 5 1 3 3'\n    ]) == 'YES'\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"1\",\"5\",\"4\",\"3\",\"1\",\"5\"]) == \"NO\"\nassert solution([\"1\",\"1\",\"2\",\"3\",\"2\",\"3\",\"4\",\"5\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"]) == \"YES\"\nassert solution([\"1\",\"3\",\"5\",\"6\",\"6\",\"1\",\"2\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"]) == \"NO\"\nassert solution([\"1\",\"3\",\"5\",\"6\",\"6\",\"1\",\"2\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"]) == \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5') == 'YES'\nassert solution('5') == 'NO'\nassert solution('5') == 'YES'\nassert solution('5') == 'YES'\nassert solution('5') == 'YES'\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('5 2') == 'YES'\nassert solution('5 1') == 'NO'\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 4 1 2\") == \"YES\"\nassert solution(\"5 5 5 5\") == \"YES\"\nassert solution(\"5 4 1 3\") == \"NO\"\nassert solution(\"5 2 4 3\") == \"YES\"\nassert solution(\"5 5 5 3\") == \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\n\nclass Node:\n    def __init__(self, x, next=None):\n        self.val = x\n        self.next = next\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 2 3 4 5\") == \"YES\"\nassert solution(\"5 5 3 2\") == \"YES\"\nassert solution(\"3 2 3 4 5\") == \"NO\"\nassert solution(\"6\") == \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1 1 3 3\") == \"YES\"\nassert solution(\"5 1 2 3 4 5\") == \"NO\""
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 3 2\") == \"YES\"\nassert solution(\"4 3 2\") == \"YES\"\nassert solution(\"5 4 3 2\") == \"NO\"\nassert solution(\"5 4 3 2\") == \"NO\"\nassert solution(\"5 4 3 2\") == \"NO\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3\"\n) == \"Yes\"\n\n\nassert solution(\n    \"2 1\"\n) == \"No\"\n\n\nassert solution(\n    \"3 2\"\n) == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 2') == 'No'\nassert solution('2 3') == 'No'\nassert solution('2 4') == 'No'\nassert solution('2 3 4') == 'No'\nassert solution('2 2') == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(r\"3 3\") == \"Yes\"\nassert solution(r\"2 1\") == \"No\"\nassert solution(r\"3 1\") == \"No\"\nassert solution(r\"-2 1\") == \"No\""
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 0 0') == 'No'\nassert solution('0 1 0') == 'No'\nassert solution('0 0 0') == 'Yes'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\nstdin: \"3 3\"\nstdin: \"0 0\"\nstdin: \"2 0\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstdin: \"3 1\"\nstdin: \"-2 1\"\nstdin: \"0 3\"\nstdin: \"2 2\"\nstd"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1, 1, 1, 0) == \"Yes\"\nassert solution(3, 3, 0, 0, 0) == \"No\"\nassert solution(2, 2, 2, 2, 0) == \"No\"\nassert solution(2, 1, 3, 2, 0) == \"No\"\nassert solution(2, 1, 1, 3, 1) == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 3\") == \"Yes\"\nassert solution(\"5 3\") == \"No\""
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"No\""
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 16\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n80 7 16 4 48\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n16 3\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4\n21 5 3 33\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 4\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1'\n\n\"\"\"\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == solution(input())\n\"\"\"\n\nfrom math import sqrt\n\nn = int(input())\n\nfor i in range(n):\n    a = int(input())\n    for j in range(a):\n        print(sqrt(j), end=' ')\n    print()\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == '16'\nassert solution('80') == '2'\nassert solution('21') == '2'\nassert solution('4') == '0'\nassert solution('1') == '0'"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5\\n80 7 16 4 48\\n\") == \"1 4\\n\"\nassert solution(\n    \"4\\n21 5 3 33\\n\") == \"3\\n4\\n\"\nassert solution(\n    \"4\\n21 5 3 33\\n\") == \"3\\n\"\nassert solution(\n    \"4\\n21 5 3 33\\n\") == \"1 4\"\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"16\"\n\n-----\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435-----\n\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_1, a_2,..., a_{n}.\n\n\n\n-----\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0435-----\n\n\u0412\u043e \u0432\u0442\u043e\u0440\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b a_1, a_2,..., a_{n}.\n\n\n-----\u0412\u044b\u0432\u043e\u0434-----\n\n\u0421\u0434\u0435\u043b\u0430\u0435\u0442 \u0432\u044b\u0432\u043e\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043e\u0442\u0440\u0438\u0446\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0435 \u0447\u0438\u0441\u043b\u043e r \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0438 r, \u043d\u0430 \u0442\u043e\u043c \u0432\u0441\u0435 \u0447\u0438\u0441\u043b\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u0438\u0442\u0441\u044f \u043d\u0430 r.\n\n\n\"\"\"\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2147483647\"\nassert solution(stdin) == \"2147483648\"\nassert solution(stdin) == \"2147483649\"\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '5'\n\n\n-----------------------------\n\u041e\u0442\u0432\u0435\u0442:\n5\n1 2 3 4 5\n\n-----------------------------\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"4\") == \"3\"\nassert solution(\"4 6\") == \"3\"\nassert solution(\"10 1\") == \"4\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"3 3\") == \"6\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"9\"\n\nassert solution(input()) == \"8\"\n\nassert solution(input()) == \"8\"\n\nassert solution(input()) == \"7\"\n\nassert solution(input()) == \"5\""
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n0 < stdin.length <= 1000\n0 < n, m < 10^4\n\nInput Constraints\n1\n\nOutput Constraints\n1\n\nExplanation\nThe input string has to be one of the following:\n\nAt the start, the number n is displayed on the first line of the input string.\nThe number m has to be displayed on the second line of the input string.\nThe first line of the input string contains two spaces separated by whitespaces.\nThe second line of the input string contains two whitespaces separated by whitespaces.\nThe last line of the input string contains two numbers separated by spaces.\n\nNote: The input is guaranteed to be a multiple of three.\n\nSample Input 0\n\n4 6\n\nSample Output 0\n\n3\n\nSample Explanation 0\n\nInput String\n\n4 6\n\nOutput String\n\n3\n\nInput String\n\n1 1\n\nOutput String\n\n2\n\n\n-----Constraints-----\n\n1 <= n, m <= 1000\n\n1 <= stdin.length <= 1000\n\n1 <= n, m <= 10^4\n\n1 <= n <= 10^4\n\n\n-----Idea-----\n\nIf the number n is not positive, then the device has to be broken.\nIf the device is broken, then the answer is 1.\nIf the number m is not positive, then the device has to be broken.\nIf the device is broken, then the answer is 0.\nIf the number m is not positive, then the device has to be broken.\nThen the number n is factored into two integers. If the number n is even, then the device has to be broken.\nIf the number m is even, then the device has to be broken.\nThen the number n is factored into two integers. If the number n is odd, then the device has to be broken.\nIf the number m is odd, then the device has to be broken.\nThen the number n is factored into two integers. If the number n is even, then the device has to be broken.\nIf the number m is even, then the device has to be broken.\nThen the number n is factored into two integers. If the number n is odd, then the device has to be broken.\nIn the first example, we always need to check if the device is broken.\nIn the second example, we always need to check if the device is broken.\n\ntime: O(1)\nspace: O(1)\n\nComplexity\n\nIt is guaranteed that solution(stdin) has a constant time execution complexity.\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        if '1' not in stdin:\n            return '1'\n        elif '1' not in stdin:\n            return '0'\n        else:\n            temp = [int(n) for n in stdin.split()]\n            if temp[0] == temp[1] or temp[0] == temp[2]:\n                return '0'\n            else:\n                return '1'\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\nprint(\"Example 1:\")\nprint(\"Input :\")\nprint(\"n = 4, m = 6\")\nprint(\"Output :\")\nprint(\"2\")\n\nprint(\"Example 2:\")\nprint(\"Input :\")\nprint(\"n = 10, m = 1\")\nprint(\"Output :\")\nprint(\"9\")\n\nprint(\"Example 3:\")\nprint(\"Input :\")\nprint(\"n = 10, m = 0\")\nprint(\"Output :\")\nprint(\"3\")\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 9\n\nassert solution(stdin) == 17\n\nassert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= m <= 10^4\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\n[output] string\n\n[tips] you can see that for input numbers n, m, you will have to check that the numbers n and m are positive, i.e. there are a minimum of 2 clicks needed in order to reach the number n.\n\n\n[example] Input\n\n2 6\n\nOutput\n\n2\n\n\n[example] Input\n\n4 1\n\nOutput\n\n0\n\n\n[example] Input\n\n10 4\n\nOutput\n\n1\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= m <= 10^4\n\n[input] integer n\n\n[output] integer\n\n[tips] you can see that the number n is a negative integer.\n\n\n[example] Input\n\n1\n\nOutput\n\n0\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 10') == '9'\nassert solution('1') == '1'\nassert solution('1000') == '1'\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == \"2\"\nassert solution(\"10 1\") == \"9\"\nassert solution(\"10\") == \"2\"\nassert solution(\"10 3\") == \"5\"\nassert solution(\"10 4\") == \"3\"\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\nn, *s = list(map(int, stdin.split()))\nprint(any(i < n for i in range(len(s)-1)))\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= stdin[i] < stdin[i+1] < 1 << 50\n\nA tree is a graph whose vertices are connected by an edge and no node connects itself.\n\nAll segments of a graph have a common endpoint, but they are not part of a single line.\n\"\"\""
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\\n2\\n1\\n3\\n5\\n6\\n\") == \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 10^4\n0 <= stdin[i] <= 1000\n1 <= l_i, r_i <= n\n\n5\n5 8"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1 3\", \"2 4\", \"5 7\", \"3 6\", \"6 10\"]) == \"YES\"\nassert solution([\"1 4\", \"2 8\", \"3 10\", \"5 7\", \"6 8\"]) == \"NO\"\nassert solution([\"5 3\", \"2 4\", \"3 9\", \"4 7\", \"5 10\"]) == \"NO\"\nassert solution([\"1 5\", \"2 3\", \"3 4\", \"4 5\", \"6 7\"]) == \"NO\"\nassert solution([\"1 5\", \"2 4\", \"3 9\", \"4 7\", \"5 10\"]) == \"YES\"\n\"\"\""
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\ntime complexity: O(n)\n\nspace complexity: O(1)\n\nProgrammer's solution:\n\"\"\"\n\n\nclass Solution:\n    def is_bst(self, node):\n        if node is None:\n            return True\n        if node.left is None and node.right is None:\n            return True\n        if node.left is None or node.left.val < node.val:\n            return self.is_bst(node.left)\n        if node.right is None or node.right.val < node.val:\n            return self.is_bst(node.right)\n        return True\n\n    def is_bst_recur(self, node, low, high):\n        if node is None:\n            return low == high\n        if node.val < low:\n            return self.is_bst_recur(node.right, low, high)\n        if node.val > high:\n            return self.is_bst_recur(node.left, low, high)\n        if node.val < low and node.val > high:\n            return self.is_bst_recur(node.right, low, high)\n        return True\n\n    def is_bst_iter(self, node, low, high):\n        while node is not None and node.val < low and node.val > high:\n            node = node.left\n        if node is None:\n            return low == high\n        if node.val < low:\n            return self.is_bst_iter(node.right, low, high)\n        if node.val > high:\n            return self.is_bst_iter(node.left, low, high)\n        return True\n\n    def is_bst_recur(self, node):\n        if node is None:\n            return True\n        if node.val < node.left.val and node.val < node.right.val:\n            return self.is_bst_recur(node.left)\n        if node.val > node.right.val and node.val > node.left.val:\n            return self.is_bst_recur(node.right)\n        return True\n\n    def is_bst_iter(self, node):\n        if node is None:\n            return True\n        if node.val < node.left.val and node.val < node.right.val:\n            return self.is_bst_iter(node.left)\n        if node.val > node.left.val and node.val > node.right.val:\n            return self.is_bst_iter(node.right)\n        return True\n\n    def is_bst_preorder(self, node):\n        if node is None:\n            return True\n        return self.is_bst_preorder(node.left) and self.is_bst_preorder(node.right) and self.is_bst(node)\n\n    def is_bst_inorder(self, node):\n        if node is None:\n            return True\n        if self.is_bst_inorder(node.left):\n            return self.is_bst(node.left)\n        if self.is_bst(node.right):\n            return self.is_bst(node.right)\n        return True\n\n    def is_bst_postorder(self, node):\n        if node is None:\n            return True\n        if self.is_bst_postorder(node.left):\n            return self.is_bst(node.left)\n        if self.is_bst(node.right):\n            return self.is_bst(node.right)\n        return True\n\n    def is_bst_preorder_post(self, node):\n        if node is None:\n            return True\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        return self.is_bst_preorder(node.left) and self.is_bst_postorder(node)\n\n    def is_bst_preorder_iter(self, node):\n        if node is None:\n            return True\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        return self.is_bst_preorder(node.left) and self.is_bst_postorder_iter(node)\n\n    def is_bst_postorder_iter(self, node):\n        if node is None:\n            return True\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        return self.is_bst_postorder_iter(node.left) and self.is_bst_postorder_iter(node)\n\n    def is_bst_preorder_iter_rec(self, node):\n        if node is None:\n            return True\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        if node.left:\n            node.left.pre = node\n        if node.right:\n            node.right.post = node\n        return self.is_bst_pre"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1000 200 1 1 1\") == 0\nassert solution(\"100 200 1 1 1\") == 3\nassert solution(\"100 200 1 1 1\") == 1\nassert solution(\"1 2 3 4 5\") == 1\nassert solution(\"1 1 1 1 1 1\") == 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 4\") == 3\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 4 2 3\") == \"3\"\nassert solution(\"1 5 4 3 2\") == \"3\"\nassert solution(\"1 99 99\") == \"0\"\nassert solution(\"1 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == 3\nassert solution(\"1 2 3 4 5\") == 0\nassert solution(\"1 3 5 4 6\") == 0\nassert solution(\"2 4 6 8\") == 1\nassert solution(\"1 5 10 20\") == 1\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 0\n\"\"\"\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input().strip()) == \"YES\", \"output must be YES\"\n\nTest Case Example\nInput\n5 2\nYNNNN\n\nOutput\nYES\n\nInput\n6 1\nYNNNNN\n\nOutput\nNO"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n[input]\n\nA sequence of one of three symbols \"Y\", \"N\" and \"?\".\n\n\n\n[output]\n\nPrint \"YES\" if Stepan's dissatisfaction can be exactly equal to k. Otherwise print \"NO\".\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100, 0 \u2264 k \u2264 n.\n\n\n-----Example 1 (input is correct)\n\nInput\n\n2\nYNNNY\n\nOutput\n\nYES\n\n\n-----Example 2 (input is incorrect)\n\nInput\n\n2\nYNNNN\n\nOutput\n\nNO\n\n\n-----Example 3 (input is incorrect)\n\nInput\n\n6\nYNNNNYNNN\n\nOutput\n\nNO\n\"\"\""
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nprint(\"The test case passed!\")\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nfrom collections import defaultdict"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5 2\", \"YNNY\"]) == \"YES\"\nassert solution([\"6 1\", \"????NN\"]) == \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin: str\n    ) == \"NO\"\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n0 <= stdin[i] <= 100\nstdin[0]!= \"Y\"\nstdin[1]!= \"N\"\nstdin[2]!= \"?\"\nstdin[3]!= \"Y\"\nstdin[4]!= \"N\"\nstdin[5]!= \"?\"\n\n\n-----Time complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"6 1\") == \"NO\""
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == \"8\"\nassert solution(\"4 2\") == \"3\"\nassert solution(\"5 2 2\") == \"2\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"3 4 5\") == \"4\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('A') == 7\nassert solution('A') == 8\nassert solution('A') == 9\nassert solution('A') == 6\nassert solution('A') == 5\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 4 2\") == \"8\"\nassert solution(\"5 5 3\") == \"13\"\nassert solution(\"5 5 5\") == \"13\"\nassert solution(\"5 5 6\") == \"6\"\nassert solution(\"4 4 5\") == \"8\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(A) == '8'\nassert solution(A) == '8'\nassert solution(A) == '8'\nassert solution(A) == '8'\nassert solution(A) == '8'\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()), \"The solution function must return a single string.\""
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"(Takahashi, Aoki)\") == \"8\"\nassert solution(\"((4), (6, 8))\") == \"8\"\nassert solution(\"((4), (6, 8))\") == \"8\"\nassert solution(\"((4), (6, 8))\") == \"8\"\nassert solution(\"((4), (6, 8))\") == \"8\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 4 2') == '8'\nassert solution('2 4 6 8') == '8'\nassert solution('4 4 2 4') == '6'\nassert solution('3 2 2 3') == '2'\nassert solution('4 2 3 4') == '6'\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"8\""
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 2 1\") == \"8\"\nassert solution(\"4 6 8\") == \"6\"\nassert solution(\"3 4 2\") == \"8\"\nassert solution(\"4 4 2\") == \"4\"\nassert solution(\"2 3 4\") == \"0\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        \"2 4 7\",\n        \"5 3 4 3\"\n    ]\n) == 6\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\") == \"YES\"\nassert solution(\"AABCAA\") == \"YES\"\nassert solution(\"AADCCAAB\") == \"NO\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\n\n-----Time complexity-----\n\nThe time complexity of the program is O(n*3).\n\n\n-----Algorithm-----\n\nO(n) to store the solution (i.e. the worst case)\nO(n) to store the worst case score of the solution (i.e. the total score of the solutions)\nO(n) to store the solution which can be improved\nO(n) to store the worst case score of the solution (i.e. the total score of the solutions)\nO(n) to store the solution which can be improved (i.e. the worst case score of the solution)\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 100,000\n\n\n-----User input validation-----\n\nThe test cases are read and validated.\n\n\n-----Output-----\n\nThe output should be indicated according to the order of the input, e.g. the worst case score for the worst case solution should be 0 (No solution), the best case score should be 1 (Yes solution), and the worst case score for the perfect case solution should be 2 (Yes solution).\n\n\n----Sample input----\n\n3\nBurunduk1 2526 2537\nBudAlNik 2084 2214\nsubscriber 2833 2749\n\nOutput\nYES\nInput\n3\nApplejack 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450\n\nOutput\nNO\nInput\n3\nApplejack's rating 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450\n\nOutput\nYES\nInput\n3\nApplejack's rating 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450\n\nOutput\nNO\nInput\n3\nApplejack's rating 2400 2400\nFluttershy 2390 2431\nPinkie_Pie -2500 -2450\n\n\n----Sample output----\n\nThe output should be indicated according to the order of the input, e.g. the worst case score for the worst case solution should be 0 (No solution), the best case score should be 1 (Yes solution), and the worst case score for the perfect case solution should be 2 (Yes solution).\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"YES\", \"Correct\"\nassert solution(\"1\") == \"YES\", \"Incorrect\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('Burunduk1 2526 2537') == 'YES'\nassert solution('BudAlNik 2084 2214') == 'NO'\nassert solution('subscriber 2833 2749') == 'NO'"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES', 'Your code should pass'\n\n\nassert solution(stdin) == 'NO', 'Your code should fail'\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"/images/codeforces.jpg\") == \"YES\"\nassert solution(\"/images/subscriber.jpg\") == \"YES\"\nassert solution(\"/images/BudAlNik.jpg\") == \"YES\"\nassert solution(\"/images/applejack.jpg\") == \"NO\"\n\n\n-------------------\nimport math\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 30\nstdin.length <= 100\n1 <= s <= 2^{100}\n\n\n-----Time Limit: 1 sec (O(n)) -----\n\nSample Input 1:\n100000000\nSample Output 1:\n4\n\n\nSample Input 2:\n101\nSample Output 2:\n3\n\n\n-----Time Limit: 10 sec (O(n)) -----\n\nSample Input 3:\n10100\nSample Output 3:\n2\n\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(100000000_2) == 4\nassert solution(101_2) == 3\nassert solution(10100) == 2\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Known Issues-----\n\nThe input is not correct. For example:\n\n\nThe first input line contains an integer $k$ and a binary number $s$.\n\nThe second input line contains $k$ and a binary number $s$.\n\nThe third input line contains $k$ and a binary number $s$.\n\nThe fourth input line contains $k$ and a binary number $s$.\n\nThe fifth input line contains $k$ and a binary number $s$.\n\nIn the fifth input line, there is a missing value in the first input line.\n\nIn the sixth input line, there is a missing value in the second input line.\n\nIn the seventh input line, there is a missing value in the third input line.\n\nIn the eighth input line, there is a missing value in the fourth input line.\n\nIn the ninth input line, there is a missing value in the fifth input line.\n\nIn the tenth input line, there is a missing value in the sixth input line.\n\nIn the eleventh input line, there is a missing value in the seventh input line.\n\nIn the eleventh input line, there is a missing value in the eighth input line.\n\n\n-----Constraints-----\n\n1 \u2264 k \u2264 10^4.\n\n1 \u2264 s \u2264 2^50.\n\n\n-----Time Limit: 1.000 seconds (py3)-----\n\nSample Input:\n\n1\n101\n10100\n\nSample Output:\n\n4\n\nExplanation:\n\nFor $k = 10$, the first input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the second input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the third input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the fourth input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the fifth input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the sixth input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the seventh input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the eighth input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the ninth input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the tenth input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the eleventh input line contains $s$ and a binary number $s$.\n\nFor $k = 10$, the eleventh input line contains $s$ and a binary number $s$.\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1000') == '1'\nassert solution('101_1') == '2'\nassert solution('1_1') == '4'\nassert solution('2_1') == '4'\nassert solution('3_1') == '1'\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 \u2264 stdin.length \u2264 200\n\n1 \u2264 stdin[i] \u2264 100\n\n\n-----Time Limit: 30 seconds.-----\n\n'''\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n\n1 \u2264 s \u2264 2^{100}\n\n\n-----Time Limit: 1 sec (py3)\n\nSample Input 1:\n\n2\n\nSample Output 1:\n\n4\n\n\n-----Time Limit: 1 sec (py3)\n\nSample Input 2:\n\n1\n\nSample Output 2:\n\n1\n\n\n-----Time Limit: 1 sec (py3)\n\nSample Input 3:\n\n101\n\nSample Output 3:\n\n3\n\n-----Time Limit: 1 sec (py3)\n\nSample Input 4:\n\n10100\n\nSample Output 4:\n\n2\n\n\n-----Time Limit: 1 sec (py3)\n\n-----\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\n'''"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n'''\n\nimport math\nimport sys\nimport os\nimport pathlib"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 3 4\"\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\n\n-----Constraints-----\n1 <= n <= 10^3\n1 <= m <= 10^5\n0 <= a[i] <= 1\n0 <= stdin[i] <= 1\n\n-----Performance-----\nPerformance beats 74% of submissions.\n'''"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 m \u2264 20\n1 \u2264 a_i \u2264 1\na_i = 1\n\n1 \u2264 a_i \u2264 1\na_i = 1\n\n1 \u2264 a_i \u2264 1\na_i = 1\n\n1 \u2264 a_i \u2264 1\na_i = 1\n\n1 \u2264 a_i \u2264 1\na_i = 1\n\n1 \u2264 a_i \u2264 1\na_i = 1\n\n1 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1\n\n2 \u2264 a_i \u2264 1\na_i = 1"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\nExplanation\nIn this sample solution, the matrix b is given by the first line of the input. So, we have 3 lines of code. The first line contains integers a_1, a_2,..., a_m. Each of the i-th line contains integers a_{i} (0 \u2264 a_{ij} \u2264 1), i.e., a_{i} is the i-th row of the matrix b.\n\nThe second line contains integers c_1, c_2,..., c_m. Each of the i-th lines contains integers a_{i} = c_{i} \u2212 c_{i} + c_{i} + c_{i}\u2212c_{i}\u2212c_{i}+c_{i}.\n\nThen, we find the mirroring operation a = c_1 \u2212 c_{i} + c_{i}\u2212c_{i}+c_{i}\u2212c_{i}\u2212c_{i}\u2212c_{i}+c_{i}. We have a = [a_{i+1} - a_{i}]^{-1} * [a_{i-1} + a_{i}]^{-1} * a_{i} - a_{i} + a_{i}]^{-1}\n\nThen, we have the minimum number of rows of the matrix b, which contains all the elements of b, in reverse order.\n\"\"\"\n\n\nimport sys"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Bonus-----\n\nInput\n\n10 5\n0 0 0 0 0 0 0 0\n0 1 1 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 1 1 1 1 1 1\n0 0 0 0 0 0 0 0\n\nOutput\n\n14\n\nInput\n\n15 3\n1 0 1 0 0 0\n0 1 0 1 0 0\n0 0 1 1 0 1\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n\nOutput\n\n5\n\nInput\n\n15 3\n1 0 0 0 0 0\n1 1 1 1 1 1\n0 0 1 1 1 1\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n0 0 0 0 0 0\n\nOutput\n\n10\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n\nSolution 2:\n\nstdin = input()\nstdin = stdin.split()\nn, m = int(stdin[0]), int(stdin[1])\na = [[int(i) for i in input().split()] for _ in range(n)]"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1 2\n1"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1') == 1, \"1\"\nassert solution('2') == 2, \"2\"\nassert solution('3') == 2, \"3\"\nassert solution('4') == 3, \"4\"\nassert solution('5') == 3, \"5\"\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution == 7\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 2, \"Expected 2, got: \" + str(2)\nassert solution(6) == 1, \"Expected 1, got: \" + str(1)\nassert solution(7) == 3, \"Expected 3, got: \" + str(3)\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 10^5\nl_{i} \u2264 r_{i} \u2264 10^9"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2') == '2'\nassert solution('5') == '3'\nassert solution('6') == '1'"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"solution() returned false\"\n\n\"\"\""
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\nimport sys"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n0 < n, k < 10^5\n\n\"\"\"\nn = int(input())\ntable_size = int(input())\nformula_size = int(input())\ntables = []\nformulas = []\n\nfor i in range(1, n+1):\n    tables.append(input())\n\nfor i in range(1, n):\n    formulas.append(input())\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES'\n\n-----Brute Force-----\n\nInput\n6 5\n4 4\n1 2 2\n\nOutput\nYES\n\nInput\n6 5\n4 4\n1 2 2\n\nOutput\nNO\n\nInput\n6 5\n4 4\n1 2 2\n\nOutput\nNO\n\nInput\n6 5\n4 4\n1 2 2\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nInput\n1 2\n5 6\n2 2\n\nOutput\nNO\n\nInput\n2 2\n5 6\n2 2\n\nOutput\nNO\n\nInput\n2 3\n5 6\n2 3\n\nOutput\nNO\n\n\"\"\"\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n0 < n, k < 10^4\n0 < x_i < 10^6\n0 < y_i < 10^6\n\n0 < y_1 < y_i\n0 < y_2 < y_i\n\n0 < x_1 < x_i\n0 < x_2 < x_i\n\n-----Time Limit-----\n\nO(n)\n\nO(n^2)\n\nO(n^2)\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 1) == \"YES\"\nassert solution(1, 2) == \"YES\"\nassert solution(1, 3) == \"NO\"\nassert solution(1, 4) == \"NO\"\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n, k <= 10^5\n\n1 <= x_i <= 10^6\n\n1 <= y_i <= 10^6\n\nConstraints\n\n1 <= n <= 2 \\times 10^5\n\n1 <= x_1, x_2, \\dots, x_n <= 10^6\n\n\n------Time complexity----\n---O(n)---\n\n---O(n^2)---\n---O(n!)---\n\n---O(n!)---\n---O(n!)---\n\n\n\"\"\""
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"YES\"\nassert solution(\"3 5\") == \"YES\"\nassert solution(\"4 1\") == \"NO\"\nassert solution(\"4 1 10 1\") == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= k <= 10^6\n\n-----Side-effects-----\n\nCorrectness of output depends on the input.\n\nTime Limit: 1 sec\nMemory Limit: 32 MB\n\n\n-----Others----\n\nSubmissions have been submitted to SA on https://www.codewars.com/kata/530d9b5c83c8d3c738c77\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"100\") == \"Yes\"\nassert solution(\"10000\") == \"No\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"5\") == \"Yes\"\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 1,000,000\n0 \u2264 stdin[i] \u2264 1,000,000\nstdin[i]!=?\nstdin.length <= 1,000,000\nstdin[i]!= 0\n\n-10000 \u2264 a_0, a_{n}, a_{i} <= 10 000\n\n0 \u2264 k \u2264 10 000\n\nSample Input\n4 5\n?\n1\n?\n1\n?\n\nSample Output\nYes\n\nExplanation\nAfter 3 moves, the polynomial is the following:\nP(1) = 1\nP(2) = 1\nP(3) = 2\nP(4) = 2\nP(5) = 2\nP(6) = 1\nP(7) = 1\nP(8) = 1\nP(9) = 1\nP(10) = 0\n\n\"\"\"\n\nn, k = map(int, input().split())\np = list(map(int, input().split()))\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nInput\n5\n-1000\n-1000\n-2000\n-1000\n\nOutput\nNo\nInput\n5\n-1000\n-1000\n-2000\n-1000\n\nOutput\nNo\n\"\"\"\n\n\n\nimport math\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-----Constraints-----\n0 <= n, k <= 100 000\n\n\n-----Tests-----\n>>> stdin = '2 100'\n>>> solution(stdin) == \"Yes\"\nTrue\n\n>>> stdin = '4 5'\n>>> solution(stdin) == \"Yes\"\nTrue\n\n>>> stdin = '?'\n>>> solution(stdin) == \"No\"\nTrue\n\n'''\n\nimport math\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 -1???\") == \"No\"\nassert solution(\"1 2 -1???\") == \"Yes\"\nassert solution(\"1 2 -1???\") == \"Yes\"\nassert solution(\"1 2 -1???\") == \"No\"\nassert solution(\"1 2 -1???\") == \"No\"\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\nclass Solution:\n    def is_promo_valid(self,n,K,a,b):\n        p = [a,b]\n        if K%2==0:\n            if n<=p[0]:\n                if K%2==0:\n                    if n+K-1<p[1]:\n                        return True\n                    else:\n                        return False\n                else:\n                    if n+K-2<p[1]:\n                        return True\n                    else:\n                        return False\n            else:\n                if K%2==0:\n                    if n+K-1<p[1]:\n                        return True\n                    else:\n                        return False\n                else:\n                    if n+K-2<p[1]:\n                        return True\n                    else:\n                        return False\n        else:\n            if n<=p[1]:\n                if K%2==0:\n                    if n+K-1<p[0]:\n                        return True\n                    else:\n                        return False\n                else:\n                    if n+K-2<p[0]:\n                        return True\n                    else:\n                        return False\n            else:\n                if K%2==0:\n                    if n+K-1<p[0]:\n                        return True\n                    else:\n                        return False\n                else:\n                    if n+K-2<p[0]:\n                        return True\n                    else:\n                        return False\n\n    def is_promo_valid_multi(self,n,K,a,b):\n        if n==0:\n            return True\n        if n==1:\n            return self.is_promo_valid(n-1,K,a,b)\n        if n==2:\n            return self.is_promo_valid(n-2,K,a,b)\n\n        if n==3:\n            return self.is_promo_valid(n-3,K,a,b)\n        \n        if n==4:\n            return self.is_promo_valid(n-4,K,a,b)\n        \n        if n==5:\n            return self.is_promo_valid(n-5,K,a,b)\n        \n        if n==6:\n            return self.is_promo_valid(n-6,K,a,b)\n        \n        if n==7:\n            return self.is_promo_valid(n-7,K,a,b)\n\n        if n==8:\n            return self.is_promo_valid(n-8,K,a,b)\n        \n        if n==9:\n            return self.is_promo_valid(n-9,K,a,b)\n\n        if n==10:\n            return self.is_promo_valid(n-10,K,a,b)\n        \n        if n==11:\n            return self.is_promo_valid(n-11,K,a,b)\n        \n        if n==12:\n            return self.is_promo_valid(n-12,K,a,b)\n\n        if n==13:\n            return self.is_promo_valid(n-13,K,a,b)\n        \n        if n==14:\n            return self.is_promo_valid(n-14,K,a,b)\n\n        if n==15:\n            return self.is_promo_valid(n-15,K,a,b)\n        \n        if n==16:\n            return self.is_promo_valid(n-16,K,a,b)\n        \n        if n==17:\n            return self.is_promo_valid(n-17,K,a,b)\n        \n        if n==18:\n            return self.is_promo_valid(n-18,K,a,b)\n        \n        if n==19:\n            return self.is_promo_valid(n-19,K,a,b)\n        \n        if n==20:\n            return self.is_promo_valid(n-20,K,a,b)\n        \n        if n==21:\n            return self.is_promo_valid(n-21,K,a,b)\n        \n        if n==22:\n            return self.is_promo_valid(n-22,K,a,b)\n        \n        if n==23:\n            return self.is_promo_valid(n-23,K,a,b)\n        \n        if n==24:\n            return self.is_promo_valid(n-24,K,a,b)\n        \n        if n==25:\n            return self.is_promo_valid(n-25,K,a,b)\n        \n        if n==26:\n            return self.is_promo_valid(n-26,K,a,b)\n        \n        if n==27:\n            return self.is_promo_valid(n-27,K,a,b)\n        \n        if n==28:\n            return self.is_promo_valid(n-28,K,a,b)\n        \n        if n==29:\n            return self.is_promo_valid(n-29,K,a,b)\n        \n        if n==30:\n            return self.is_promo_valid(n-30,K,a,b)\n        \n        if n==31:\n            return self.is_promo_valid(n-31,K,a,b)\n        \n        if n==32:\n            return self.is_promo_valid(n-32,K,a,b)\n        \n        if n==33:\n            return self.is_promo_valid(n-33,K,a,b)\n        \n        if n==34:\n            return self.is_promo_valid(n-34,K,a,b)\n        \n        if n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"8191\"\nassert solution(stdin) == \"8192\""
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"8191\"\n\nassert solution(stdin) == \"8191\"\n\nassert solution(stdin) == \"8191\""
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 15\nassert solution(stdin) == 16"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 15\nassert solution(stdin) == 16\n\nassert solution(stdin) == 8191\nassert solution(stdin) == 8192\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\", \"\") == \"\", \"Empty stdin expected.\"\nassert solution(\"\", \"1\") == \"1\", \"Single character expected.\"\nassert solution(\"1\") == \"1\", \"Single character expected.\"\nassert solution(\"10\") == \"10\", \"Single character expected.\"\nassert solution(\"20\") == \"20\", \"Single character expected.\"\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"15\") == \"6\"\nassert solution(\"8192\") == \"8191\"\nassert solution(\"20\") == \"15\"\nassert solution(\"1\") == \"6\"\nassert solution(\"8\") == \"8\"\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('14') == 6\nassert solution('20') == 6\nassert solution('8192') == 15\nassert solution('8193') == 16\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\n\"\"\""
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"24 0\") == 2\nassert solution(\"24 1\") == 3\nassert solution(\"24 -1\") == 4\nassert solution(\"24 1\") == 2\nassert solution(\"24 -7\") == -1"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n\n\"\"\""
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"24 0\") == 2\nassert solution(\"24 1\") == 3\nassert solution(\"24 -1\") == 4\nassert solution(\"24 -7\") == 2\nassert solution(\"4 -7\") == -1\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\nNote: For reference, $p$ is represented as a string that has all numbers from 1 to 100, but only counts the digits of $p$ (no repeats or spaces) (e.g., 7 digits = 3 digits in $0^p$).\n\nApproach:\n\nTo count the binary numbers, we need to iterate over the whole $n$ binary numbers in the problem: $n = (n^2) + (n^3) + (n^4) +... + (2^n)$, where $n \\in {1, 2^9, 10^9}$.\n\nWe can also iterate over the summands of $n$ and get the answer as follows: $ans = n^4 + n^3 + n^2 + n$\n\nThe sum of $n$ would be: $2^n + 2^n^2 + 2^n^3 + 2^n^4$.\n\nFor example, if $n = 2^2 + 2^3 + 2^4$, $ans = 2^4$.\n\nAnother way to solve this problem is to use a set of $n$ to represent numbers $2^n$: $2^n = 2^n ^ 2, 2^n = 2^n ^ 4, 2^n = 2^n ^ 3$, and then to get the number $2^n$ without the set, we need to convert the set to a set of $n^2$: $2^n = 2^(2^n-1)$.\n\nTo do this, we need to take $n$ as a set and to iterate over it, let's take the set as follows: $p = set()$\n\nTo get the total number of set $p$, we need to count the total number of $p$ as $2^(n-1)$, and then take its complement, $2^(n-1) - 2^(n-1) = 2^(n-1) - 2^(n-1)$: $2^(n-1) = 2^(n-2) - 2^(n-2) = 2^(n-3) - 2^(n-3) = 2^(n-4) - 2^(n-4) = 2^(n-5) - 2^(n-5) = 2^(n-6) - 2^(n-6) = 2^(n-7) - 2^(n-7) = 2^(n-8) - 2^(n-8) = 2^(n-9) - 2^(n-9) = 2^(n-10) - 2^(n-10) = 2^(n-11) - 2^(n-11) = 2^(n-12) - 2^(n-12) =... + 2^(n-12)$.\n\nWe can see that $2^(n-1) = 2^(n-2) - 2^(n-2) = 2^(n-3) - 2^(n-3) = 2^(n-4) - 2^(n-4) = 2^(n-5) - 2^(n-5) = 2^(n-6) - 2^(n-6) = 2^(n-7) - 2^(n-7) = 2^(n-8) - 2^(n-8) = 2^(n-9) - 2^(n-9) = 2^(n-10) - 2^(n-10) = 2^(n-11) - 2^(n-11) = 2^(n-12) - 2^(n-12) = 2^(n-13) - 2^(n-13) = 2^(n-14) - 2^(n-14) = 2^(n-15) - 2^(n-15) = 2^(n-16) - 2^(n-16) = 2^(n-17) - 2^(n-17) = 2^(n-18) - 2^(n-18) = 2^(n-19) - 2^(n-19) = 2^(n-20) - 2^(n-20) =... + 2^(n-20)$.\n\nWe can verify that $2^(n-1) = 2^(n-2) - 2^(n-2) = 2^(n-3) - 2^(n-3) = 2^(n-4) - 2^(n-4) = 2^(n-5) - 2^(n-5) = 2^(n-6) - 2^(n-6) = 2^(n-7) - 2^(n-7) = 2^(n-8) - 2^(n-8) = 2^(n-9) - 2^(n-9) = 2^(n-10) - 2^(n-10) = 2^(n-11) - 2^(n-11) = 2^(n-12) - 2^(n-12) = 2^(n-13) - 2^(n-13) = 2^(n-14) - 2^(n-14) = 2^(n-15) - 2^(n-15) = 2^(n-16) - 2^(n-16) = 2^(n-17) - 2^(n-17) = 2^(n-18) - 2^(n-18) = 2^(n-19) - 2^(n-19) = 2^(n-20) - 2^(n-20) = 2^(n-21) - 2^(n-21) = 2^(n-22) - 2^(n-22) = 2^(n-23) - 2^(n-23) = 2^(n-24) - 2^"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == -1\n\nassert solution(1) == 3\n\nassert solution(2) == 1\n\nassert solution(3) == 2\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 -1\") == \"4\"\nassert solution(\"24 1\") == \"0\"\nassert solution(\"24 -7\") == \"2\"\nassert solution(\"4 -7\") == \"0\"\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"24 0\") == \"2\"\nassert solution(\"24 1\") == \"3\"\nassert solution(\"24 -1\") == \"2\"\nassert solution(\"4\") == \"0\"\n\nassert solution(\"4 -7\") == \"0\"\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"24\") == 2\nassert solution(\"-1\") == -1\n\n\n'''\nimport sys\ninput = sys.stdin.readline\n\nN = int(input())\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    '24 0'\n) == '2'\nassert solution(\n    '24 1'\n) == '3'\nassert solution(\n    '24 -1'\n) == '-1'\nassert solution(\n    '4 -7'\n) == '2'\nassert solution(\n    '4 1'\n) == '-1'\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10028\"\n\nassert solution(stdin) == \"10101\"\nassert solution(stdin) == \"1010\"\nassert solution(stdin) == \"00069\"\n\nassert solution(stdin) == \"00\"\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"10028\", \"5, 3\"\nassert solution(\"3 2\") == \"100\", \"3 2\"\nassert solution(\"1 1\") == \"0\", \"1 1\"\nassert solution(\"1\") == \"0\", \"1\"\nassert solution(\"\") == \"0\", \"0\""
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10028\n\n\n-----Constraints-----\n1 <= n <= 3 * 10^5\n0 <= k <= n\nS >= 1\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n\n-----Code-----\n\nwhile stdin\n\nint n\nint k\nint stdin\nwhile (n >= 0 && k >= 0 && n >= k)\n    n = n - (k - 1)\n    stdin = stdin + str(n)\n    k -= 1\nend while\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10028\nassert solution(stdin) == 100\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10028\n\n\n-----Constraints-----\n0\n0\n\nSubmissions\n1\n\n-----Constraints-----\n0\n\nSubmissions\n1\n\n-----Constraints-----\n1\n\nSubmissions\n3\n\n-----Constraints-----\n2\n\nSubmissions\n3\n\n-----Constraints-----\n3\n\nSubmissions\n1\n\n-----Constraints-----\n\n\"\"\""
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\"), \"You have to enter numbers which are exactly digits and the size of the number is at least 2.\"\nassert solution(\"3 2\"), \"You have to enter numbers which are exactly digits and the size of the number is at least 2.\"\nassert solution(\"1 1\"), \"You have to enter numbers which are exactly digits and the size of the number is at least 2.\"\nassert solution(\"0\"), \"You have to enter numbers which are exactly digits and the size of the number is at least 2.\"\nassert solution(\"2\"), \"You have to enter numbers which are exactly digits and the size of the number is at least 2.\"\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\") == 10028\nassert solution(\"3 2\") == 100\nassert solution(\"1 1\") == 0\nassert solution(\"1\") == 0\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0101\") == \"1000\"\nassert solution(\"010101\") == \"0001\"\nassert solution(\"0101011\") == \"000101\"\nassert solution(\"00010101\") == \"0001\"\nassert solution(\"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10028\"\nassert solution(stdin) == \"10029\"\nassert solution(stdin) == \"10030\"\nassert solution(stdin) == \"10100\"\nassert solution(stdin) == \"10101\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\n\n\n-----Constraints-----\n\n1 <= cnt_1, cnt_2 <= 10^9\n1 <= cnt_1, cnt_2 <= 10^9\n2 <= x < y < 10^4\n1 <= cnt_1 + cnt_2 <= 10^9\nno integer is repeated and in the list\nno integer is repeated but not in the list\nno integer can be repeated more than once\n\nInput Format\n\nThe first line contains a single integer, n, denoting the number of friends.\nThe next n lines contains n integers each of which is separated by a single space.\n\nConstraints\n\nOutput Format\n\nPrint the minimum number v.\n\nSample Input\n\n2\n2\n1 4 3\nSample Output\n\n4\n\"\"\""
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 1, 2, 3) == 5\nassert solution(1, 3, 2, 3) == 4\n\n\n-----Constraints-----\n1 <= cnt_1, cnt_2 < 10^9; cnt_1 + cnt_2 \u2264 10^9; 2 \u2264 x < y \u2264 3\u00b710^4\n\nA prime number is a natural number greater than 1 that is divisible by any prime number, but not necessarily by itself.\n\nTime Limit: 1 sec\nMemory Limit: 256 MB\n\nPublic Properties\n\u2022    cnt_1 < cnt_2\n\u2022    x % cnt_1 == 0 or x % cnt_2 == 0\n\u2022    cnt_1 + cnt_2 == 1\n\u2022    x == y\n\u2022    y!= x\n\u2022    x % y == 0\n\u2022    x % y!= 0\n\n\nPublic Methods\npublic bool is_prime(int x) {\n    return x % 2 == 0;\n}\npublic int is_prime(int x) {\n    return is_prime(x)!= is_prime(x % 2);\n}\npublic int get_prime_sum(int cnt_1, int cnt_2) {\n    return (cnt_1 + cnt_2) * get_prime_sum(cnt_1, cnt_2);\n}\npublic int get_prime_sum_multi(int cnt_1, int cnt_2, int cnt_3, int cnt_4) {\n    return (cnt_1 + cnt_2 + cnt_3 + cnt_4) * get_prime_sum(cnt_1, cnt_2) * get_prime_sum(cnt_3, cnt_4) * get_prime_sum(cnt_1, cnt_4)\n}\npublic int get_prime_sum_multi2(int cnt_1, int cnt_2, int cnt_3, int cnt_4, int cnt_5) {\n    return (cnt_1 + cnt_2 + cnt_3 + cnt_4 + cnt_5) * get_prime_sum(cnt_1, cnt_2) * get_prime_sum(cnt_3, cnt_4) * get_prime_sum(cnt_5, cnt_4) * get_prime_sum(cnt_1, cnt_5)\n}\n\npublic int get_prime_sum_multi3(int cnt_1, int cnt_2, int cnt_3, int cnt_4, int cnt_5, int cnt_6) {\n    return (cnt_1 + cnt_2 + cnt_3 + cnt_4 + cnt_5 + cnt_6) * get_prime_sum(cnt_1, cnt_2) * get_prime_sum(cnt_3, cnt_4) * get_prime_sum(cnt_5, cnt_6) * get_prime_sum(cnt_1, cnt_6)\n}\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n\n\n-----Constraints-----\n\n1 \u2264 cnt_1, cnt_2 \u2264 10^9\n1 \u2264 cnt_1 \u2264 cnt_2 \u2264 3 \u00b7 10^4\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, 1, 2, 3) == 5\nassert solution(3, 3, 2, 1) == 4\nassert solution(1, 2, 4, 1) == 4\nassert solution(1, 2, 3, 2) == 1\nassert solution(3, 3, 4, 3) == 1\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, [1, 2, 3]) == 5\nassert solution(1, [1, 2, 3]) == 4\nassert solution(2, [1, 3, 5]) == 4\nassert solution(3, [1, 2, 3]) == 5\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2\") == \"4\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"1 4\") == \"1\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1, 2, 3, 4, 5) == 4, \"1 is not a prime number\"\nassert solution(3, 3, 1, 2, 4, 5) == 4, \"3 is not a prime number\"\nassert solution(2, 1, 2, 4, 5, 3) == 4, \"2 is not a prime number\"\nassert solution(1, 1, 1, 1, 1, 1) == 1, \"1 is not a prime number\"\n\npass\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 4) == 4\nassert solution(1, 2, 3, 4) == 5\n\nassert solution(1, 2, 3, 5, 6) == 4\nassert solution(1, 2, 3, 5, 6) == 6\nassert solution(2, 3, 4, 5, 6) == 4\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2, 3, 4) == 4\nassert solution(1, 2, 3, 2) == 2\nassert solution(2, 3, 2) == 1\nassert solution(1, 1, 1) == 1\nassert solution(1, 1, 1) == 1\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3 1'\nassert solution(input()) == '1 1'\n\n-----Notes-----\nThe only valid number of moves is the fact that at every time step he is in the current cell.\nThe speed vector has at most 2**n where n is the number of berry bushes.\n    dx, dy = map(int, stdin.split())\n    return dx + dy * 2\n\nThe bear eats the raspberry from all the bushes he has in the current cell.\nThe bear moves from cell (sx, sy) to cell (((sx + dx)\u00a0mod\u00a0n) + 1, ((sy + dy)\u00a0mod\u00a0n) + 1).\nThe current speed is changed by k. The angle is defined as (dx, dy).\nThe bear moves from cell (sx, sy) to cell (((sx + dx)\u00a0mod\u00a0n) + 1, ((sy + dy)\u00a0mod\u00a0n) + 1).\nThe angle is defined as (dx, dy).\n\"\"\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3 1\"\nassert solution(input()) == \"3 1\"\nassert solution(input()) == \"3 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\nassert solution(\"0 0 0 0 0 0\") == \"0 0 0 0 0\"\nassert solution(\"0 -1 0 -1 0 -1\") == \"0 0 0 0 0\"\nassert solution(\"1\") == \"3 1\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 1\"\n\nhttps://stackoverflow.com/questions/17791220/how-to-determine-a-given-position-in-a-matrix-with-numpy-python\nhttps://numpy.org/doc/stable/reference/generated/numpy.transpose.html\nhttps://stackoverflow.com/questions/26262558/matrix-transposition-with-numpy-array\nhttps://stackoverflow.com/questions/28348620/python-implementation-of-vector-to-vector-transpose-transpose-matrix-transpose\nhttps://stackoverflow.com/questions/19364049/matrix-transposition-transpose-transposed-matrix-transpose-transposed-matrix-transpose-numpy\nhttps://stackoverflow.com/questions/27697074/how-to-do-the-transpose-on-a-matrix-with-numpy\nhttps://www.youtube.com/watch?v=0mUW2P-E2A&feature=youtu.be\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\nassert solution(\"1 1 1 -1 -1 0\") == \"1 0\"\nassert solution(\"1 0\") == \"0\""
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\nassert solution(\"0 0 1 -1 -1 2\") == \"0 0\"\nassert solution(\"1 -1 -1 2 -1\") == \"-1\"\nassert solution(\"3 0 0 0\") == \"0\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"9\""
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nassert solution(\"??????FGHIJKLMNOPQRSTUVWXYZ\") == '??????FGHIJKLMNOPQRSTUVWXYZ'\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\") == 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == 'AABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\n\n------Test Cases-----\nSample case 1:\nInput:\nABCDEFGHIJKLMNOPQRSTUVWXYS\nOutput:\n-1\nInput:\nABCDEFGHIJKLMNOPQRSTUVWXZ\nOutput:\n-1\n\"\"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\")\") == \"A\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXY?TUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYS\"\nassert solution(\"\") == \"0\"\nassert solution(\"????\") == \"0\"\nassert solution(\"??\") == \"0\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(stdin) == \"ABCDEFGHIJKLMNOPQRSTUVWXYS\"\nassert solution(stdin) == \"ABCDEFRTWELQRZTUVWX\"\nassert solution(stdin) == \"ABABCDEFGHIJKLMNOPQRSTUVWX\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\", \"Error\"\n\n\"\"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYS\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"AABCDEFGHIJKLMNOPQRSTUVW??M\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\nassert solution(\"\") == \"0\"\nassert solution(\"?\") == \"0\"\nassert solution(\"c\") == \"c\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"-1\"\nassert solution(\"AabcDEFghIJKLMNOPQRSTUVW?\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYS\"\nassert solution(\"ABCABC\") == \"-1\"\nassert solution(\"E\") == \"-1\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nassert solution(stdin) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nassert solution(stdin) == 'WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO'\nassert solution(stdin) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nExplanation\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of apples. The second line contains n integers w_1, w_2,..., w_{n} (w_{i} = 100 or w_{i} = 200), where w_{i} is the weight of the i-th apple.\n\nThe third line contains n integers s_1, s_2,..., s_{n} (s_{i} = 100 or s_{i} = 200), where s_{i} is the weight of the i-th apple.\n\n\n\nInput\n\n3\n100 200 100\n1 5 50\n\nOutput\nYES\nYES\n\nInput\n\n3\n100 200 100\n1 2\n\nOutput\nNO\n\n\n\n-----Solution-----\n\nIn a single line print \"YES\" (without the quotes) if it is possible to divide all the apples between his friends. Otherwise print \"NO\" (without the quotes).\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n\nTime Limit: 1 sec\n\nExample\n\nExample 1:\n\nInput\n\n3\n100 200 100\n1 5 50\n\nOutput\n\nYES\n\nInput\n\n3\n100 200 100\n1 2\n\nOutput\n\nNO\n\nExample 2:\n\nInput\n\n4\n100 100 100 100\n1 2 3 4 5\n\nOutput\n\nNO\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n\nTime Limit: 1 sec\n\nExample 3:\n\nInput\n\n2\n100 100 100\n1 2\n\nOutput\n\nNO\n\nExample 4:\n\nInput\n\n3\n100 200 100\n1 2\n\nOutput\n\nNO\n\n\n-----Solution-----\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of apples. The second line contains n integers w_1, w_2,..., w_{n} (w_{i} = 100 or w_{i} = 200), where w_{i} is the weight of the i-th apple.\n\nThe third line contains n integers s_1, s_2,..., s_{n} (s_{i} = 100 or s_{i} = 200), where s_{i} is the weight of the i-th apple.\n\nThe fourth line contains n integers s_1, s_2,..., s_{n} (s_{i} = 100 or s_{i} = 200), where s_{i} is the weight of the i-th apple.\n\nThe fifth line contains n integers s_1, s_2,..., s_{n} (s_{i} = 100 or s_{i} = 200), where s_{i} is the weight of the i-th apple.\n\nThe sixth line contains n integers s_1, s_2,..., s_{n} (s_{i} = 100 or s_{i} = 200), where s_{i} is the weight of the i-th apple.\n\nThe seventh line contains n integers s_1, s_2,..., s_{n} (s_{i} = 100 or s_{i} = 200), where s_{i} is the weight of the i-th apple.\n\nThe eighth line contains n integers s_1, s_2,..., s_{n} (s_{i} = 100 or s_{i} = 200), where s_{i} is the weight of the i-th apple.\n\nThe ninth line contains n integers s_1, s_2,..., s_{n} (s_{i} = 100 or s_{i} = 200), where s_{i} is the weight of the i-th apple.\n\nIn all other lines, you give two integers s_1 and s_2, s_{n}, s_1 <= s_2, and you give two integers s_1 and s_2, s_{n}, s_{i} <= s_2, where s_{i} < s_{n}.\n\nThe weight of a apple is the sum of the weights of the given apples.\n\nConstraints:\n\n1 \u2264 n \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n1 \u2264 s_1, s_2, s_{n} \u2264 100\n\n\n\"\"\"\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nfrom itertools import product"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['5', '1', '2', '3', '4', '5']) == 'YES','solution() error'\nassert solution(['2', '1', '2', '3', '4', '5']) == 'YES','solution() error'\nassert solution(['1', '1', '1', '1']) == 'NO','solution() error'\nassert solution(['1', '2', '1', '1']) == 'NO','solution() error'\nassert solution(['1', '2', '1', '1', '1']) == 'NO','solution() error'\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\n        \"100 200 100\",\n        \"100 200 100\",\n        \"100 200 100\"\n    ]\n) == \"YES\"\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n0 < stdin[i] < 10^6\n0 < w_1, w_2,..., w_{n} < 100\nstdin = \"3\"\n\n-----Time Complexity-----\nO(n) - the time needed for every apple (i.e. w_i) to split a group of friends.\nO(n) - the time needed for splitting each group of friends into k groups, and then k * (k+1) / 2 = n times.\nO(n) - the time needed for splitting each group of friends into k groups and then divide all the apples in the group k times and then divide the apples by the number of k times.\nO(1) - the time complexity of splitting each group of friends into k groups and then divide all the apples in the group k times and then divide the apples by the number of k times.\nO(n) - the time complexity of splitting each group of friends into k groups and then divide all the apples in the group k times and then divide the apples by the number of k times.\nO(n) - the time complexity of splitting each group of friends into k groups and then divide all the apples in the group k times and then divide the apples by the number of k times.\nO(n) - the time complexity of splitting each group of friends into k groups and then divide all the apples in the group k times and then divide the apples by the number of k times.\nO(1) - the time complexity of splitting each group of friends into k groups and then divide all the apples in the group k times and then divide the apples by the number of k times.\n\n\n-----SAMPLE TEST CASES-----\n\nSample Input 1:\n3\n100 200 100\nSample Output 1:\nYES\n\nSample Input 2:\n4\n100 100 100 200\nSample Output 2:\nNO\n\n\n-----SAMPLE TESTS-----\n\nInput\n3\n100 200 100\n\nOutput\nYES\n\nInput\n4\n100 100 100 200\n\nOutput\nNO\n\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nYES\n\nInput\n2\n100 100 100 100\n\nOutput\nNO\n\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nNO\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nNO\n\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nNO\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nNO\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nNO\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nYES\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nYES\n\n-----SAMPLE TESTS-----\n\nInput\n2\n100 100 100 100\n\nOutput\nYES\n\n-----SAMPLE TESTS-----\n\nInput\n1\n100 100 100 100\n\nOutput\nNO\n\n-----SAMPLE TESTS-----\n\nInput\n2\n100 100 100 100\n\nOutput\nNO\n\n\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3 10 200 100\") == \"YES\"\nassert solution(\"3 3 20 200\") == \"NO\"\n\npass\n--- Nguyen Hanh Nguyen ---"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, [100, 200, 100]) == \"YES\"\nassert solution(4, [100, 100, 100, 200]) == \"NO\""
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '12'\nassert solution(stdin) == '18'\nassert solution(stdin) == '5'\nassert solution(stdin) == '16'\nassert solution(stdin) == '11'\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12, \"Not answer\"\nassert solution(stdin) == \"Not answer\", \"Wrong output\"\n\n-----Test-----\nprint(solution(\"01010\"))\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"24\"\nassert solution(stdin) == \"52\"\nassert solution(stdin) == \"36\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"001100\") == 5, \"Correct\"\nassert solution(\"0010100\") == 12, \"Correct\"\nassert solution(\"0010100\") == 2, \"Correct\"\nassert solution(\"011101\") == 18, \"Correct\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == 37\n\n-----Constraints-----\n\n1 <= n <= 105\n1 <= m <= 105\n1 <= floor[i] <= 105\n0 <= floor[i] <= 105\nfloor[i] <= floor[i + 1]\n\n-----Time Limit Exceeded-----\n\nIf you have used up all your time, your solution would still work.\n\n\"\"\"\n\nn, m = map(int, input().split())\n\nstudents = []\nstudents_rooms = []\n\nfor _ in range(n):\n    students.append(list(map(int, input().split())))\n\nfor _ in range(m):\n    students_rooms.append(list(map(int, input().split())))\n\nstudents.sort(key=lambda x: (x[0], x[1]))\nstudents_rooms.sort(key=lambda x: (x[0], x[1]))\n\nleft = 0\nright = m - 1"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"10\", \"000\", \"000\", \"000\"]) == \"5\"\nassert solution([\"10\", \"000\", \"000\", \"000\", \"000\"]) == \"12\"\nassert solution([\"10\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\"]) == \"5\"\nassert solution([\"10\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\"]) == \"12\"\n\nassert solution([\"10\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\", \"000\"]) == \"5\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"5\"\nassert solution(\"3 4\") == \"12\"\nassert solution(\"4 3\") == \"18\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == \"5\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('11111101') == '1'\nassert solution('100010001') == '3'\nassert solution('110011001') == '2'\nassert solution('000100011') == '2'\nassert solution('10100100') == '4'\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4\\n1\\n2\\n3\\n4\\n5\\n6\\n7\\n8\\n9\\n10\\n11\\n12\\n13\\n14\\n15\\n16\\n17\\n18\\n19\\n20\\n21\\n22\\n23\\n24\\n25\\n26\\n27\\n28\\n29\\n30\\n31\\n32\\n33\\n34\\n35\\n36\\n37\\n38\\n39\\n40\\n41\\n42\\n43\\n44\\n45\\n46\\n47\\n48\\n49\\n50\\n51\\n52\\n53\\n54\\n55\\n56\\n57\\n58\\n59\\n60\\n61\\n62\\n63\\n64\\n65\\n66\\n67\\n68\\n69\\n70\\n71\\n72\\n73\\n74\\n75\\n76\\n77\\n78\\n79\\n80\\n81\\n82\\n83\\n84\\n85\\n86\\n87\\n88\\n89\\n90\\n91\\n92\\n93\\n94\\n95\\n96\\n97\\n98\\n99\\n100\\n101\\n102\\n103\\n104\\n105\\n106\\n107\\n108\\n109\\n110\\n111\\n112\\n113\\n114\\n115\\n116\\n117\\n118\\n119\\n120\\n121\\n122\\n123\\n124\\n125\\n126\\n127\\n128\\n129\\n130\\n131\\n132\\n133\\n134\\n135\\n136\\n137\\n138\\n139\\n140\\n141\\n142\\n143\\n144\\n145\\n146\\n147\\n148\\n149\\n150\\n151\\n152\\n153\\n154\\n155\\n156\\n157\\n158\\n159\\n160\\n161\\n162\\n163\\n164\\n165\\n166\\n167\\n168\\n169\\n170\\n171\\n172\\n173\\n174\\n175\\n176\\n177\\n178\\n179\\n180\\n181\\n182\\n183\\n184\\n185\\n186\\n187\\n188\\n189\\n190\\n191\\n192\\n193\\n194\\n195\\n196\\n197\\n198\\n199\\n200\\n201\\n202\\n203\\n204\\n205\\n206\\n207\\n208\\n209\\n210\\n211\\n212\\n213\\n214\\n215\\n216\\n217\\n218\\n219\\n220\\n221\\n222\\n223\\n224\\n225\\n226\\n227\\n228\\n229\\n230\\n231\\n232\\n233\\n234\\n235\\n236\\n237\\n238\\n239\\n240\\n241\\n242\\n243\\n244\\n245\\n246\\n247\\n248\\n249\\n250\\n251\\n252\\n253\\n254\\n255\\n256\\n257\\n258\\n259\\n260\\n261\\n262\\n263\\n264\\n265\\n266\\n267\\n268\\n269\\n270\\n271\\n272\\n273\\n274\\n275\\n276\\n277\\n278\\n279\\n280\\n281\\n282\\n283\\n284\\n285\\n286\\n287\\n288\\n289\\n290\\n291\\n292\\n293\\n294\\n295\\n296\\n297\\n298\\n299\\n300\\n301\\n302\\n303\\n304\\n305\\n306\\n307\\n308\\n309\\n310\\n311\\n312\\n313\\n314\\n315\\n316\\n317\\n318\\n319\\n320\\n321\\n322\\n323\\n324\\n325\\n326\\n327\\n328\\n329\\n330\\n331\\n332\\n333\\n334\\n335\\n336\\n337\\n338\\n339\\n340\\n341\\n342\\n343\\n344\\n345\\n346\\n347\\n348\\n349\\n350\\n351\\n352\\n353\\n354\\n355\\n356\\n357\\n358\\n359\\n360\\n361\\n362\\n363\\n364\\n365\\n366\\n367\\n368\\n369\\n370\\n371\\n372\\n373\\n374\\n375\\n376\\n377\\n378\\n379\\n380\\"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"4 2 4 10 \") == \"3\"\nassert solution(\n    \"4 1 1 1 1 1 1 \") == \"2\"\nassert solution(\n    \"4 1 1 1 1 1 1 \") == \"4\"\nassert solution(\n    \"4 1 1 1 1 1 1 \") == \"2\"\nassert solution(\n    \"4 1 1 1 1 1 1 \") == \"4\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5\n    1 2 3 2 10\n    1 3 4 3 3\n    ) == \"3\"\nassert solution(\n    \"4\"\n    1\n    2\n    ) == \"3\"\nassert solution(\n    \"7\"\n    1\n    2\n    ) == \"3\"\nassert solution(\n    \"7\"\n    1\n    2\n    ) == \"3\"\nassert solution(\n    \"6\"\n    1\n    2\n    ) == \"3\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1 3 1 1\") == 3\nassert solution(\"2 1 2 3\") == 2\nassert solution(\"2 2 3 4 1\") == 3\nassert solution(\"2 2 2 2 2\") == 2\nassert solution(\"3 4 3 2\") == 2\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 3 9 5') == '3'\nassert solution('1 4 6 2') == '1'\nassert solution('2 5 7 6') == '2'\nassert solution('2 7 4 6') == '2'\nassert solution('1 3 2 6') == '2'\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nprint(\"solution test passed!\")"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n\n1 2\n1 3 4\n1 4 5\n1 6 7\n1 7 8\n\"\"\") == \"\"\n\n\n\"\"\"\nThere's a strange thing: we don't know exactly how to set up the mouse trap, but there is a huge amount of it's cost, so we need to keep going for now.\n\nBurgess is too short, and we need to get the mouse to keep going. Because it doesn't have enough room to run it to the next second, we'll have to keep going: we can only get to the next second.\n\nThen we have to keep going: we can only get to the next second.\n\nOnce we get to the next second, we have to wait for the next second.\n\nI only know what the reason for this is that the mouse hasn't stopped at the end of the meeting. There are two reasons for this:\n\n    1. The mouse never gets in the room with a mouse trap.\n\n    2. The mouse starts running, but the machine still runs to the next second.\n\nThere's no reason to go to the next second when the mouse starts, because it would be too short, and the machine starts running to the next second.\n\nBut what about the other reasons? There is also a huge reason, that the mouse hasn't stopped at the end of the meeting.\n\nFor example, in the first example we can get rid of the mice, because the mouse never stops at the end of the meeting. Because the mouse hasn't stopped at the end of the meeting, there is a huge problem: the mouse starts in room $1$, which makes the machine start to run to the next second.\n\nWe know that the mouse never stops, because the mouse has stopped at the end of the meeting.\n\nIn the second example, we have to get rid of the mice, because the mouse hasn't stopped at the end of the meeting.\n\nBut the mouse hasn't started, because the machine still runs to the next second.\n\nSo we have to keep going: we can only get to the next second.\n\nThe reason for this is that the mouse hasn't stopped at the end of the meeting, because the machine hasn't stopped at the end of the meeting.\n\nThis means we have to wait for the next second.\n\nSince we have to wait for the next second, there is a huge problem that the mouse never stops, because the machine hasn't stopped at the end of the meeting.\n\nAgain, what about the other reasons?\n\nWe have to wait for the next second.\n\nSo we have to wait for the next second.\n\nBecause the machine has to run to the next second, we have to wait for the next second.\n\nFor example, in the second example, we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nWe have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nWe have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the machine hasn't stopped at the end of the meeting.\n\nSo we have to wait for the next second because the mouse hasn't stopped at the end of the meeting.\n\nSo we have to"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '3'\n\nassert solution(inp) == '10'\n\nassert solution(inp) == '9'\n\nassert solution(inp) == '10'\n\nassert solution(inp) == '4'"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin)!= 3\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\nExample 2:\n\nInput\n5 2 -5\n\nOutput\n3\n\nInput\n5 1 3\n\nOutput\n4\n\nInput\n5 1 6\n\nOutput\n4\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= a <= n\n-100 <= b <= 100\n\n--------SOLUTION-----------\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"6 -5 3 -5 -5 -5 2\") == 3\nassert solution(\"5 2 -5 3\") == 3\nassert solution(\"2 3 -5\") == 2\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 1000\n0 \u2264 stdin[i] \u2264 100\n0 \u2264 a \u2264 n\n-100 \u2264 b \u2264 100\na!= b\nn!= 1\n-100 \u2264 stdin[i] \u2264 100\nstdin is a valid input\n\n\n------Time Complexity-----\n0 (n!)\nO(n)\n\n\n------Space Complexity-----\nO(n)\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 1, 1, -100, -100, -100) == 1\nassert solution(0, -1, 1, -100, -100, -100) == -1\nassert solution(2, 0, 1, -100, -100, -100) == 2\nassert solution(2, 2, 1, -100, -100, -100) == 2\nassert solution(0, 3, 1, -100, -100, -100) == -1\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 2 -5\") == \"3\"\nassert solution(\"3 2 7\") == \"3\"\n\n\n\n------Example------------------\nInput\n\n5 2 3\n\nOutput\n2\n\n------------------\nInput\n\n3 2 7\n\nOutput\n3\n---------------------\n\n------------------\n\nInput\n\n5 3 -5\n\nOutput\n1\n\n---------------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n1\n\n\n-----------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n2\n\n\n-----------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n3\n\n\n-----------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n1\n\n\n-----------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n0\n\n\n-----------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n0\n\n\n-----------------\n\n------------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n0\n\n\n-----------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n0\n\n\n-----------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n0\n\n\n-----------------\n\n------------------\nInput\n\n5 3 2\n\nOutput\n0\n-----------------\n\n------------------\n\"\"\"\n\nimport math"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\u201c6 2 -5\u201d) == 3\nassert solution(\u201c5 1 3\u201d) == 4\nassert solution(\u201c3 2 7\u201d) == 3\n\n\n-----IMPORTS-----\n\nimport math\nimport sys"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n\n\n-----Time Limit-----\n\n1 second\n\n\n-----Access log-----\n\n0 1\n\n1 2\n\n\n-----Tips-----\n\nHelp Vasya clarify how to solve this problem.\nhttps://www.geeksforgeeks.org/helper-function-to-print-the-number-of-the-entrance-at-the-end-of-his-walk/\n\"\"\""
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 5 -5\") == \"3\"\nassert solution(\"3 2 -5\") == \"3\"\nassert solution(\"3 1 3\") == \"4\"\nassert solution(\"3 1 3\") == \"3\"\nassert solution(\"3 1 -5\") == \"3\"\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 5\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= a <= n\n\n-100 <= b <= 100\n\n\n-----Side Note-----\n\nThe input is case-sensitive.\n\n'''"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\nExplanation\nThere are three ways to travel the yard using the standard way of approach:\n\nThe first way is using basic integer arithmetic: a = 0, b = 0, and c = 1.\n\nHere, Vasya will be at entrance a and he will be at the end of his walk.\n\n\nInput\n6 2 -5\n\nOutput\n3\n\nInput\n5 1 3\n\nOutput\n3\n\nInput\n5 1 2\n\nOutput\n3\n\nInput\n5 1 2\n\nOutput\n3\n\nInput\n5 5 -5\n\nOutput\n3\n\nInput\n5 5 1\n\nOutput\n4\n\nInput\n3 2 7\n\nOutput\n3\n\n-----Note-----\n\nThe second way is using extended arithmetic. \na = 0, b = 0, and c = -1.\n\nHere, Vasya will be at entrance a and he will be at the end of his walk.\n\n\"\"\""
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n'''\n\nimport math"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 8 4 2 1 4 7 10 2\"), \"7 8 4 2 1 4 7 10 2\"\nassert solution(\"5 5 -1 -1 -1 -1 -1 -1\"), \"5 5 -1 -1 -1 -1 -1 -1\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\"), \"0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"\"), \"0 0 0 0 0 0 0 0 0 0\"\nassert solution(\"7 8 4 2 1 4 7 10 2\"), \"3\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(3)\n\"\"\""
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,5) == 5\nassert solution(3,1) == 1\n\n\n-----Constraints-----\n\n1 <= n, k <= 10^5\n\n\n-----Time complexity-----\n\nFor each test case, there will be a total of n lines in the input string.\n\nFor each test case, there will be a total of n lines in the string.\n\nTime Limit: O(n*log(k))\n\nSpace Limit: O(k)\n\nNote: We only use set to keep the results in the function.\n\n\"\"\"\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4, 2) == 5\nassert solution(8, 1) == 5\nassert solution(4, 2) == 2\nassert solution(8, 2) == 2\nassert solution(4, 2) == 2\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"a\",\"b\"]) == \"a\"\nassert solution([\"a\",\"b\",\"a\",\"b\"]) == \"b\"\nassert solution([\"a\",\"b\",\"a\",\"b\",\"a\"]) == \"b\"\nassert solution([\"a\",\"a\",\"b\",\"b\",\"a\"]) == \"b\"\nassert solution([\"a\",\"b\",\"a\",\"b\",\"b\"]) == \"b\"\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"solution() does not return correct string.\""
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 7\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aaaa\") == \"5\"\nassert solution(\"aab\") == \"5\"\nassert solution(\"a\") == \"5\"\nassert solution(\"b\") == \"5\"\nassert solution(\"aaa\") == \"5\"\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= k <= n\nAll the letters of the string are upper case.\n\ntime limit per testcase = O(n)\nspace limit per testcase = O(1)"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Constraints-----\n0 < n < 100\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\nInput\n2\n50 60 50\n\nOutput\n1 2\n\n\n'''"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, 100, 50, 50, 51, 25, 99, 25, 100, 25) == '0 2 1'\nassert solution(3, 100, 50, 50, 51, 25, 99, 25, 100, 25) == '1 2 2'\nassert solution(2, 100, 50, 50, 51, 25, 99, 25, 100, 25) == '1 1 2'\nassert solution(2, 100, 50, 50, 51, 25, 99, 25, 100, 25) == '2 2 1'\nassert solution(3, 100, 50, 50, 51, 25, 99, 25, 100, 25) == '2 2 1'\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3') == '2'\nassert solution('2') == '1'\nassert solution('4') == '3'\nassert solution('0') == '0'\nassert solution('1') == '0'\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4') == '0 0 1 4'\n\nassert solution('2 2 2 1 1') == '1 2'\n\nassert solution('2 2 1 2') == '2 2'\n\nassert solution('2 3 2 2') == '2 3 2'\n\nassert solution('3 3 3 3') == '3 3'"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '0'\nassert solution(2) == '0'\nassert solution(3) == '0'\nassert solution(4) == '0'\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '1 2'\n\nassert solution(stdin) == '1 1 2'\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 1\"), \"1\"\nassert solution(\"1 1\"), \"1\"\nassert solution(\"1 3\"), \"1\"\nassert solution(\"2 3\"), \"3\"\nassert solution(\"3 2\"), \"2\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1.5\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 3 3 5\"\n) == \"1.25\"\nassert solution(\n    \"1 3 3 5\"\n) == \"2.000000000000\"\nassert solution(\n    \"1 4 4 4\"\n) == \"1.500000000000\"\nassert solution(\n    \"1 4 4 4\"\n) == \"2.000000000000\"\nassert solution(\n    \"1 1 1\"\n) == \"1.500000000000\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1.500000000000'\n\nassert solution(stdin) == '1.500000000000'\n\nassert solution(stdin) == '1.500000000000'\n\nassert solution(stdin) == '1.500000000000'\n\nassert solution(stdin) == '1.500000000000'"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1.5\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1.5\nassert solution(stdin) == 1\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1.500000000000\"\n\n\n-----Examples-----\nInput\n1\n\nOutput\n1.0000000000000000\n\nInput\n2\n\nOutput\n1.0000000000000000\n\n\n-----Notes-----\nThe input is a file that contains a single line, the number of JOE's opponents.\nThe output is the maximum prize (in dollars) JOE could have.\n\nIf you don't know how to solve a problem, you can check your solutions with the help of the solution function.\n\n\n-----Examples-----\nInput\n3\n\nOutput\n1.000000000000\n\nInput\n4\n\nOutput\n1.000000000000\n\nInput\n2\n\nOutput\n1.000000000000\n\n\n\n-----Notes-----\n\nIn the second example, the best scenario would be: one contestant fails at the first question, the other fails at the next one. The total reward will be $\\displaystyle \\frac{1}{2} + \\frac{1}{1} = 1.5$ dollars.\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1.500000000000'\nassert solution(stdin) == '1.000000000000'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1.500000000000'\n\n\n------Constraints----\n1 <= stdin.length <= 50\n0 <= stdin[i] <= 10^5\n\n------Time Limit---------\n1 second\n\"\"\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1.500000000000\"\nassert solution(\"3\") == \"1.500000000000\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"1.000000000000\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.25\"\nassert solution(stdin) == \"1.75\"\nassert solution(stdin) == \"1.25\"\nassert solution(stdin) == \"1.375\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1.500000000000'\nassert solution(stdin) == '1.000000000000000000'\nassert solution(stdin) == '1.000000000000000000'\nassert solution(stdin) == '1.000000000000000000'\nassert solution(stdin) == '1.000000000000000000'\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == '3'\nassert solution(9) == '2 3 5'\nassert solution(2) == '1 2'\nassert solution(3) == '2 3'\nassert solution(4) == '1'\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == str(max(map(int, input().split())))\nassert solution(input()) == str(sum(map(int, input().split())))\nassert solution(input()) == str(max(map(int, input().split())))\nassert solution(input()) == str(max(map(int, input().split())))\nassert solution(input()) == str(max(map(int, input().split())))"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 2, \"5\"\nassert solution(9) == 3, \"3 5 1\"\nassert solution(2) == 1, \"2\"\nassert solution(1) == 2, \"1\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 3 2\") == 3\nassert solution(\"2\") == 3\nassert solution(\"2 3\") == 3\nassert solution(\"3 5 1\") == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5') == '3'\nassert solution('9') == '2'\nassert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5') == '2 3'\nassert solution('9') == '1 2'\nassert solution('10') == '1 2 2'\nassert solution('100') == '1 2 3 4 5 6 7 8 9'\nassert solution('1000') == '2'\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin) == 9, \"The function does not work\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Input-----\n\nThe only line contains positive integer n (1 \u2264 n \u2264 1000) \u2014 number of candies Santa Class wants to get.\n\n\n-----Output-----\n\nPrint the maximum of all the integers in the input array.\n\n\n-----Examples-----\nInput\n2\n\nOutput\n1\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need to satisfy the property that if the subarray of k is non-empty, the first element in the subarray is the maximum of the subarray k itself.\n\n\n-----Searching the maximum of an integer in a list-----\n\nThe maximum integer k of the list that you need"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 23456789\n\"\"\"\nn, m = map(int, input().split())\nprint(2**m * n)\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,2) == 0\nassert solution(987654321,0) == 2\nassert solution(98765432,2) == 42\nassert solution(123456789,123456789) == 987654321\n\"\"\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()), \"0\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"4\") == \"0\"\nassert solution(\"987654321\") == \"23456789\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 0\nassert solution(\"5\") == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 10\nassert solution(1) == 0\nassert solution(98765432) == 23456789\nassert solution(987654321) == 23456789\nassert solution(98765456) == 23456789\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '0'\nassert solution(input()) == '23456789'\n\"\"\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"23456789\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\n\n-----Constraints-----\n1 <= stdin.length <= 10^8\n1 <= n, m <= 10^8\n\n2\n\n=====User input\n2\n\n=====Output\n3\n\n2\n\n=====Example 1\n2\n\n3\n\n=====Example 2\n2\n\n1\n\n=====Example 3\n5\n\n1\n\n=====Example 4\n5\n\n3\n\n=====Output explanation\nSolution:\n\n>>> def solution(stdin: str) -> str:\n    pass\n\n\n>>> assert solution(stdin) == 10\n\n>>> assert solution(stdin) == 0\n\n>>> assert solution(stdin) == 0\n\n>>> assert solution(stdin) == 0\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '23456789'\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"werd\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin, 5) == \"werd\"\nassert solution(stdin, 4) == \"word\"\nassert solution(stdin, 5) == \"aaeaa\"\nassert solution(stdin, 4) == \"a\"\nassert solution(stdin, 2) == \"weird\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"werd\"\nassert solution(stdin) == \"word\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"aaeaa\"\nassert solution(stdin) == \"aaeaa\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'weird'\nassert solution(stdin) == 'word'\nassert solution(stdin) == 'aaeaa'\nassert solution(stdin) == 'aa'\nassert solution(stdin) == 'a'\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == 'werd'\n\n\nInput\n5\nwirdweird\n\nOutput\nwirdwird\n\nassert solution == 'wirdweird'\n\nInput\n4\nword\n\nOutput\nword\n\nassert solution == 'word'\n\nInput\n5\naaeaaaeaa\n\nOutput\naaaeaaaeaa\n\nassert solution == 'aaaeaaaeaa'\n\nInput\n4\nwirdweird\n\nOutput\nwirdweird\n\nassert solution == 'wirdweird'\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'werd'\nassert solution(stdin) == 'word'\n\nassert solution(stdin) == 'aaeaa'\nassert solution(stdin) == 'aaa'\n\nassert solution(stdin) == 'weird'\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, \"weird\") == \"werd\"\nassert solution(4, \"word\") == \"word\"\nassert solution(5, \"aaeaa\") == \"aaeaa\"\nassert solution(5, \"aaeaa\") == \"aaeaa\"\nassert solution(5, \"aaaeaa\") == \"aaaeaa\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, \"weird\") == \"werd\"\nassert solution(4, \"word\") == \"word\"\nassert solution(5, \"aaeaa\") == \"aaeaa\"\nassert solution(5, \"aaaeaa\") == \"aaeaa\"\nassert solution(5, \"aa\") == \"a\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, \"weird\"), \"The first line of code is incorrect\"\nassert solution(5, \"word\"), \"The second line of code is incorrect\"\nassert solution(4, \"aaeaa\"), \"The third line of code is incorrect\"\nassert solution(5, \"aaeaa\"), \"The fourth line of code is incorrect\"\nassert solution(4, \"weird\"), \"The fifth line of code is incorrect\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin[1:]\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('11 3 10', '*..*..*.') == '2'\nassert solution('6 2 3', '*.*') == '4'\nassert solution('3 2 3', '*..') == '7'\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\nstdin.length <= n\nstdin.length <= n\n\n+stdin.length*n <= 10^5\nstdin.length*2 <= n\nstdin.length <= 10\n\nA character is a duplicate of the same character.\nA character is a duplicate of the same character in the alphabet.\n\n\"\"\""
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"*.\", \"*.\", \"*.\", \".\", \".\"]) == \"1\"\nassert solution([\"*.\", \"*.\", \".\", \".\", \"*.\"]) == \"0\"\nassert solution([\".\", \".\", \".\", \".\", \"*.\"]) == \"0\"\nassert solution([\"*.\", \".\", \"*\", \".\", \"*.\"]) == \"1\"\nassert solution([\"*.\", \".\", \"*\", \".\", \"*.\"]) == \"3\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3 4\") == \"1\"\nassert solution(\"3 6 4\") == \"2\"\nassert solution(\"11 10 4\") == \"3\"\nassert solution(\"11 6 3\") == \"2\"\nassert solution(\"11 10 4 2\") == \"2\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2 3\") == \"2\"\nassert solution(\"6 2 3\") == \"3\"\nassert solution(\"11 3 10\") == \"10\"\nassert solution(\"3 2 3\") == \"0\"\nassert solution(\"3 2 3\") == \"0\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"JYXZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"JYXZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"JYXZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"JYXZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"JYXZ\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n1 <= n <= 100\n\n0 <= a, b <= 1,000,000\n\n1 <= * <= 10^5\n\n-----Submissions-----\n\nSample Input\n\n5 1 1\n*...*\n\nSample Output\n\n0\n\nExplanation\n\nThe number of student-programmers and the number of student-athletes are both odd and there are $1 + 2$ seats.\n\nSo no student-programmer is sitting next to the student-programmer.\n\nThe number of student-programmers and the number of student-athletes are even.\n\nSo there is only one seat occupied.\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '7'\nassert solution(stdin) == '0'\n\nTime Limit:\n1 minute\n\nSpace Limit:\n100,000\n\n\"\"\"\n\nclass Solution:\n    def largestNumber(self, nums: str) -> str:\n        n = len(nums)\n        nums = list(map(str, nums))\n        res = ''\n        for i in range(n):\n            tmp = ''\n            for j in range(n):\n                if j == n - 1 or i == n - 1:\n                    tmp += nums[j]\n                else:\n                    if nums[j]!= '.' and nums[j]!= '*':\n                        tmp += nums[j]\n                    else:\n                        tmp += str(int(nums[j]) + int(nums[j + 1]))\n            res = max(res, int(tmp))\n        return str(res)"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    '''\n    13\n    '''\n    ) == '''NO\n    '''\n'''\n'''\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp := inp.split()) == \"NO\"\nassert solution(inp := inp.split()) == \"NO\"\nassert solution(inp := inp.split()) == \"NO\"\nassert solution(inp := inp.split()) == \"NO\"\nassert solution(inp := inp.split()) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(input())) == \"NO\" or solution(str(input())) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"19\") == \"1 8\"\nassert solution(\"16\") == \"NO\"\nassert solution(\"0\") == \"NO\"\nassert solution(\"1\") == \"1 8\"\nassert solution(\"\") == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 5\") == \"1 8\"\n\n\n'''\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"NO\"\nInput\n16\n\nOutput\n2 4\n\nassert solution(input()) == \"NO\"\nInput\n16\n\nOutput\n2 4\n\nassert solution(input()) == \"NO\"\nInput\n16\n\nOutput\n2 4\n\nassert solution(input()) == \"NO\"\nInput\n16\n\nOutput\n2 4\n\nassert solution(input()) == \"NO\"\nInput\n16\n\nOutput\n2 4"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(14) == \"NO\"\nassert solution(19) == \"1 8\"\nassert solution(15) == \"NO\"\nassert solution(14) == \"1 8\"\nassert solution(10) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('19') == '1 8'\nassert solution('16') == 'NO'\nassert solution('24') == 'NO'\nassert solution('32') == 'NO'\nassert solution('12') == 'NO'\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test_cases[0]) == \"0\"\nassert solution(test_cases[1]) == \"1\"\nassert solution(test_cases[2]) == \"0\"\nassert solution(test_cases[3]) == \"1\"\nassert solution(test_cases[4]) == \"0\"\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == 0\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == 2\nassert solution(\"1 2 2\") == -1\nassert solution(\"3 5\") == 3\nassert solution(\"3 5 3\") == 3\nassert solution(\"1 2 5\") == 2\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"-1\""
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 4 5 6 8\") == \"1 2\"\n\nassert solution(\"2 5 3 6 8\") == \"-1\"\n\nassert solution(\"2 3 4 4\") == \"-1\"\n\nassert solution(\"2 5 1 1\") == \"1 2\"\n\nassert solution(\"2 3 5 2\") == \"1\""
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\n\nprint(solution(stdin))\n\n\"\"\")\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input().strip()\n    ) == \"2\"\n\nTime complexity: O(n^2)\n\nSpace complexity: O(n^2)\n\n\"\"\""
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"27\") == \"3\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == \"1\"\nassert solution(4) == \"2\"\nassert solution(27) == \"3 9 9\"\n\"\"\""
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin,\n    map(int, input().split())\n) == str(\n    sum(\n        int(i) for i in input().split()\n    )\n)\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"9 9 9\"\n\nassert solution(stdin) == \"9 9 9\""
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"3 9\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"28\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\n\nassert solution(stdin) == '1 2'\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"5 1 1 1\"\nassert solution(\"3\") == \"3 2\"\nassert solution(\"7\") == \"7 9 9\"\nassert solution(\"10101\") == \"7 4 9 1\"\nassert solution(\"101001\") == \"7 4 9 1\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"83 14\"\nassert solution(stdin) == \"1 1 2\"\nassert solution(stdin) == \"1 1 2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('a2 3 4') == '3 2 2'\nassert solution('2 2 1 3') == '3'\nassert solution('3 2 2 1') == '2'\nassert solution('a2 3 4 5') == '3'\nassert solution('a2 3 4 6') == '3'\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2, 'Your code is wrong'\nassert solution(stdin) == 2, 'Your code is wrong'\nassert solution(stdin) == 2, 'Your code is wrong'\nassert solution(stdin) == 2, 'Your code is wrong'\nassert solution(stdin) == 2, 'Your code is wrong'\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution == \"3\"\nassert solution == \"2\"\nassert solution == \"2\"\nassert solution == \"1\"\nassert solution == \"3\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '3'\nassert solution(input) == '2'\nassert solution(input) == '1'\nassert solution(input) == '2'\nassert solution(input) == '1'\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3') == '3 2'\nassert solution('2 2') == '2 1 2'\nassert solution('2') == '2'\nassert solution('2 2 2') == '2 2 2 2'\nassert solution('2 3') == '3 2'\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\n        [1, 2, 3, 4, 5],\n        [6, 7, 8, 9, 10],\n    ]\n) == '2'\nassert solution(\n    [\n        [10, 20, 50, 100, 200],\n        [100, 1000, 2000, 10000, 20000],\n    ]\n) == '1'\nassert solution(\n    [\n        [50, 100, 200, 10000, 20000],\n        [10, 10, 10, 10, 10],\n    ]\n) == '2'\nassert solution(\n    [\n        [100, 1000, 2000, 10000, 20000],\n        [10, 10, 10, 10, 10],\n    ]\n) == '3'\nassert solution(\n    [\n        [20, 30, 40, 50, 60],\n        [10, 10, 10, 10, 10],\n    ]\n) == '3'\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 3') == '3 2'\nassert solution('3 3 4') == '3 4'\nassert solution('5 5') == '5 5'\nassert solution('6 6') == '6 6'\nassert solution('7 7') == '7 7'\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10011\") == \"666\"\nassert solution(\"100011001\") == \"8\"\nassert solution(\"010110100\") == \"8\"\nassert solution(\"101011\") == \"121\"\nassert solution(\"111_2\") == \"4\"\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3) == '1'\nassert solution(9996) == '496'\nassert solution(5) == '5'\nassert solution(92) == '92'\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(496)\nassert solution(stdin) == str(1)\n\nNote: The algorithm is based on the theory of GCD.\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 1\nassert solution(992) == 497\nassert solution(1) == 1\nassert solution(0) == 1\nassert solution(1234) == 1350\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '496'\nassert solution(stdin) == '11111'\nassert solution(stdin) == '1111000'\nassert solution(stdin) == '111110000'\nassert solution(stdin) == '111110000_2'\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(123) == 1\nassert solution(7) == 7\nassert solution(1) == 1\nassert solution(0) == 1\nassert solution(42) == 11\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 1\nassert solution(6) == 4\nassert solution(3) == 4\nassert solution(7) == 14\nassert solution(8) == 48\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '496'\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"11_2\") == \"1\"\nassert solution(\"1110_2\") == \"6_10\"\nassert solution(\"12_2\") == \"120_10\"\nassert solution(\"123_2\") == \"240_10\"\nassert solution(\"12345_2\") == \"456_10\"\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 1\n\n\n------Constraints-----\n1 <= n <= 10^5\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n3\n\nOutput\n4\nExample 2:\n\nInput\n2\n\nOutput\n0\nExplanation: n = 3\n2 = 2 * 2 * 2 = 4.\nThe greatest divisor of n is 2.\n\n\n------My Answer-----\n\nimport math"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 194 195 196 196 197 198 199 200 201 202 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 238 239 240 241 242 243 244 245 246 247 248 249 251 252 253 253 254 255 256 257 258 259 259 260 261 262 263 264 263 265 266 267 268 269 270 271 272 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 301 302 301 304 302 304 305 306 308 308 309 310 311 311 313 314 315 316 317 318 319 320 321 321 322 323 324 325 326 327 327 328 329 329 330 330 331 331 332 333 333 334 334 335 336 337 336 338 339 341 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 355 356 357 358 359 360 361 360 361 361 366 367 366 369 366 369 366 369 366 369 366 369 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366 369 366"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input().split()) == '100'\nassert solution(input().split()) == '100'\nassert solution(input().split()) == '0'\nassert solution(input().split()) == '0'\nassert solution(input().split()) == '0'\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    inp: str\n) == \"4\"\n\"\"\""
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\nprint(\"Example 1:\")"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '16'\n\"\"\"\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '8'\nassert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 6\") == \"4\"\nassert solution(\"2 0\") == \"0\"\nassert solution(\"19 7\") == \"998\"\nassert solution(\"1000\") == \"10000\"\nassert solution(\"99\") == \"9\"\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"8\""
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(17)\n\"\"\""
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nInput\n5 4\n1 2 3 1 5 1\n\nOutput\n2\n\nInput\n6 4\n2 3 4 1 2 3\n\nOutput\n5\n\nInput\n6 5\n1 1 1 1 1 1\n\nOutput\n2\n\nInput\n6 6\n
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n\nInput\n5 3\n1 3 1 4 2\n\nOutput\n3\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\"\"\""
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 1\") == \"4\"\nassert solution(\"10 2\") == \"6\"\nassert solution(\"10 3\") == \"2\"\nassert solution(\"10 4\") == \"4\"\nassert solution(\"10 5\") == \"6\"\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin = \"5 2\"\n) == \"4\"\nassert solution(\n    stdin = \"6 4\"\n) == \"6\"\n\n----------------------\nExplanation\n\nFor the following sample, the number of children is even, so the last child is the last child. \n\nInput\n5 2\n1 3 1 4 2\n\nOutput\n4\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\n'''"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == 4\nassert solution(\"6 4\") == 6\nassert solution(\"6 4\") == 6\nassert solution(\"5 4\") == 6\nassert solution(\"5 5\") == 0\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2\") == 4\nassert solution(\"6 4\") == 6\nassert solution(\"6\") == 6\nassert solution(\"3\") == 2\nassert solution(\"1 1\") == 1\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 1 1 1') == 1\nassert solution('2 2 2 2') == 1\nassert solution('3 3 3 3') == 2\nassert solution('4 4 4 4') == 4\nassert solution('5 5 5 5') == 5\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 1 4 2') == '4'\nassert solution('1 2 3 1 4 2') == '4'\nassert solution('1 2 3 1 4 2') == '2'\nassert solution('1 2 3 1 4 2') == '2'\nassert solution('1 2 3 1 4 2') == '2'\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10 2') == '4'\nassert solution('4 5') == '6'\nassert solution('5 2 3 4') == '6'\nassert solution('5 2 4 2 3') == '6'\nassert solution('6 4 1 2 3') == '6'\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == 4\nassert solution(\"6 4\") == 6\nassert solution(\"7 4\") == 7"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"125\") == 3\nassert solution(\"43\") == 5\nassert solution(\"1000000000\") == 10000000\n\n\n-----Constraints-----\n\n1 <= n <= 10^9\n\n\n-----Time Limit Preemption-----\n\nSince this problem is a medium, you should consider using only a single line of code.\n\n\"\"\"\nclass Solution:\n    def findMin(self, nums: List[int]) -> int:\n        \"\"\"\n        solution of comment\n        \"\"\"\n        \n        #return min(nums)\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return nums[left]"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1000000000\") == 3\nassert solution(\"43\") == 5\nassert solution(\"1000000000 10\") == 10\nassert solution(\"1000000000 20\") == 20\nassert solution(\"1000000000 5\") == 10\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 5\nassert solution(stdin) == 1\nassert solution(stdin) == 10000000\n\n\n-----Constraints-----\n1 <= n <= 10^6\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n---Constraints---\n50\n\n\n---Test Inputs---\n\nInput\n125\n\nOutput\n3\n\nInput\n43\n\nOutput\n5\n\nInput\n1000000000\n\nOutput\n10000000\n\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"10000000\"\nassert solution(stdin) == \"10000000\"\nassert solution(stdin) == \"10000000\"\nassert solution(stdin) == \"10000000\"\nassert solution(stdin) == \"10000000\"\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(3)\nassert solution(stdin) == str(10000000)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == 3\nassert solution(\"30000000\") == 6\nassert solution(\"1000000000\") == 100\nassert solution(\"5\") == 1\nassert solution(\"125\") == 3\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == \"0\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 4\") == \"6\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 4\nassert solution(5) == 0\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(s) == \"328\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 328\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 6\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 1) == 0\nassert solution(1, 2) == 0\nassert solution(1, 3) == 0\nassert solution(1, 4) == 0\nassert solution(2, 1) == 2\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '6'\nassert solution(stdin) == '328'\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n1 \u2264 n \u2264 10^4\n1 \u2264 k \u2264 n\n\n------Time Complexity---\nO(n^k)\n\nO(n^k)\n\n------Memory Complexity---\nO(n^k)\n\nclass Solution:\n    def countPermutation(self, n: int, k: int) -> str:\n        d = {}\n        def dfs(i, n):\n            if i == n:\n                res =''.join(list(map(str, d)))\n                return res\n            else:\n                if i in d:\n                    return d[i]\n                else:\n                    d[i] =''.join(list(map(str, dfbs(i, n))))\n                    return d[i]\n        return''.join(dfs(1, n))\n\n\"\"\"\"\n3 3\n2 2\n2 3\n2 1\n1 2\n2 1\n1 3\n\n3 3\n4 4\n3 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n4 4\n\n3\n3 3\n3 3\n3 3\n3 3\n3 3\n3 3\n3 3\n3 3\n3 3\n\n\"\"\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 0\nassert solution(2) == 2\nassert solution(3) == 4\nassert solution(4) == 6\nassert solution(7) == 328\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input('2')) == '0'\nassert solution(input('4')) == '0'\nassert solution(input('7')) == '0'\nassert solution(input('0')) == '1'\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin),'solution(stdin) returned false'\nassert solution(stdin),'solution(stdin) returned false'"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 11\n\nassert solution(1) == 0\nassert solution(4) == -1\nassert solution(3) == -1\nassert solution(4) == -1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 'O') == 4, 'This'\nassert solution(2, 'R') == 1, 'This'\nassert solution(3, 'O') == 4, 'This'\nassert solution(4, 'R') == 1, 'This'\nassert solution(5, 'R') == 1, 'This'\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Error in input\"\n\"\"\""
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 3 4 1 6') == '11'\nassert solution('5 3 2 3 4 7 5 4 5 6') == '-1'\nassert solution('11 5') == '-1'\nassert solution('11 5') == -1\nassert solution('11 5') == 11\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 2\nassert solution(\"5\") == 4\nassert solution(\"4\") == 0\nassert solution(\"5\") == -1\n\n\n------ Test ------\n\nprint(\"Input :\", str(input().split()))\nprint(\"Output :\", solution(input().split()))"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 11\n'''\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"11\"\nassert solution(input) == \"5\"\nassert solution(input) == \"11\"\nassert solution(input) == \"5\"\nassert solution(input) == \"11\"\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"11\"\nassert solution(input()) == \"-1\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"11\"\n\n\n------Code-------\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"YES\"\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin = '2 3 1'\n) == 'YES'\nassert solution(\n    stdin = '2 3 2'\n) == 'NO'\n\n\"\"\""
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"YES\"\nassert solution(\"2 3 1\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 3 1\") == \"NO\"\nassert solution(\"3 2 3 1\") == \"YES\""
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n9 4\n2 3 4\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n0 \u2264 p, q \u2264 10^18\n2 \u2264 n \u2264 90\n\n-----Examples-----\nInput\n2 3\n1 3\n2 3 1\n\nOutput\nNO\n\nInput\n2 3\n1 3\n1 2 1\n\nOutput\nNO\n\n\n-----Discussion-----\n\nGiven, \"height\" is always a fraction of \"height\". Assuming that we have a continued fraction, let's take the first, i.e. $a_{1}$, and the \"next\" number, $a_{2}$, to be $a_{i + 1}$ for $i = 1,..., n$, and also $a_{i}$, to be $a_{i + 1} + \\frac{1}{a_{i + 1}}$.\nWe then follow these continued fractions for $a_{i}$ and $a_{i + 1}$.\n\nTherefore, the continued fraction for $a_{i}$ is $a_{i} + \\frac{1}{a_{i + 1}}$, and the continued fraction for $a_{i + 1}$ is $a_{i + 1} + \\frac{1}{a_{i + 1}} + \\frac{1}{a_{i}}$.\nWe check that, given $a_{i}$, we have:\n\n$1 + \\frac{1}{a_{i + 1}}$\n\n$a_{i}$ and $a_{i + 1}$ are NOT equal.\n\nThere is no solution for $a_{1}$, because we are a fraction of $a_{1}$.\n\nThere is no solution for $a_{2}$, because we are a fraction of $a_{2}$.\n\"\"\"\n\n\n\nfrom math import sqrt, factorial, floor\nfrom collections import Counter\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 4 1\"\n) == \"YES\"\nassert solution(\n    \"3 2 3 1\"\n) == \"NO\"\nassert solution(\n    \"3 2 3 1\"\n) == \"NO\"\nassert solution(\n    \"4 2 3 1\"\n) == \"YES\"\nassert solution(\n    \"5 3 5\"\n) == \"YES\"\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n        '|||+||=||'\n    ) == 'Impossible'\nassert solution(\n        '||||||+||=||'\n    ) == 'Impossible'\nassert solution(\n        '|+||+||=||'\n    ) == 'Impossible'\nassert solution(\n        '|+||+||=||'\n    ) == 'Impossible'\nassert solution(\n        '||||||+||=||'\n    ) == 'Impossible'\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(\"1 + 2 - 3 + 4\") == \"Impossible\"\nassert solution(\"2 * 3 - 4 + 1\") == \"Impossible\"\nassert solution(\"1 + 1 * 2 + 1\") == \"Impossible\"\nassert solution(\"1 + 1 * 2 + 1 + 1 + 1\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'Impossible', \"output is not correct\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"Impossible\"\n\nassert solution(inp) == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7+1=3\") == \"2\"\nassert solution(\"7+0=3\") == \"3\"\nassert solution(\"7+-4\") == \"2\"\nassert solution(\"7+4=3\") == \"3\"\nassert solution(\"7+-9\") == \"3\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"++|||\") == \"Impossible\"\nassert solution(\"||+||\") == \"Impossible\"\nassert solution(\"||+||||\") == \"Impossible\"\nassert solution(\"|+||||\") == \"Impossible\"\nassert solution(\"|||+||\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('|||+||=||') == 'Impossible'\nassert solution('||||+||=||||||') == 'Impossible'\nassert solution('||||||+||||||') == 'Impossible'\nassert solution('||||||+||||||') == 'Impossible'\nassert solution('||+||=||||||') == 'Impossible'\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2+2*2\") == \"Impossible\"\nassert solution(\"2+2*2\") == \"Impossible\"\nassert solution(\"+2+2*2\") == \"Impossible\"\nassert solution(\"+2+2*2\") == \"Impossible\"\nassert solution(\"+2+2*2\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"+\"\n) == \"Impossible\"\nassert solution(\n    \"|+\"\n) == \"Impossible\"\nassert solution(\n    \"|+|\"\n) == \"Impossible\"\nassert solution(\n    \"|+||\"\n) == \"Impossible\"\nassert solution(\n    \"|+|+\"\n) == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '3'\n\n----------------------------------------------------------------------------------------------------------------------------------------\n\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2 2\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 4\"\nassert solution(input()) == \"2 5\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '2'\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"2\"\nprint(\"solution test passed\")"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == 2\nassert solution(\"4 5\") == 0\nassert solution(\"6 7\") == 1\nassert solution(\"8 9\") == 2\nassert solution(\"10 11\") == 4\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"2\"\nassert solution([\"1\", \"3\", \"2\"]) == \"2\"\nassert solution([\"1\", \"3\", \"2\", \"4\", \"5\"]) == \"4\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"2\"\nassert solution([\"1\", \"3\", \"2\", \"4\", \"6\"]) == \"3\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 8\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 2 3 4\") == \"1 2 2 3 4\"\nassert solution(\"5 6 7 8 9\") == \"4 6 7 8 9\"\nassert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"2\""
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"0 1\") == \"1 2\"\nassert solution(\"0 3\") == \"1 1\"\nassert solution(\"0 4\") == \"1 2\"\nassert solution(\"0 6\") == \"1 1\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\\n-1 0\\n0 3\\n2 -1\\nUU\\nDR\") == \"1 2 0 0 3 3 2 0 1\"\nassert solution(\"3\\n-1 0\\n0 3\\n2 -1\\nUU\\nDR\") == \"2 1 0 0 3 3 2 0 1\"\nassert solution(\"3\\n-1 0\\n0 3\\n2 -1\\nUU\\nDR\") == \"1 2 0 0 3 3 2 0 1\"\nassert solution(\"3\\n-1 0\\n0 3\\n2 -1\\nUU\\nDR\") == \"1 2 0 0 3 3 2 0 1\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 5 2\") == \"LL\"\nassert solution(\"2 1 0\") == \"RL\"\nassert solution(\"2 4 1\") == \"LL\"\nassert solution(\"1 3 1\") == \"UL\"\nassert solution(\"1 1 2\") == \"DR\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"-1 2 3\"\nassert solution(\"1 -1 0\") == \"1\"\nassert solution(\"1 -1 1\") == \"0\"\nassert solution(\"1 -1 2\") == \"0\"\nassert solution(\"1 -1 3\") == \"0\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"0 1\") == \"2\"\nassert solution(\"0 1 0 0 0\") == \"-1\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\") == \"L\"\nassert solution(\"1 - 1\") == \"-1\"\nassert solution(\"2 - 1 - -1\") == \"-1\"\nassert solution(\"2 - -1 - 1\") == \"-1\"\nassert solution(\"2 - 1 - 1\") == \"-1\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3 4 5 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"0 3\") == \"2\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"-1 0 0 0 0\") == \"1\"\nassert solution(\"L U D R\") == \"2\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\"), \"Wrong output\"\nassert solution(\"2\") == \"-1\", \"Wrong output\"\nassert solution(\"\") == \"2\", \"Wrong output\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 'a**b'\nassert solution(7) == '***a***b'\nassert solution(13) == '***gmg***'"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"a***b\"\n\n\nassert solution(input()) == \"***gmg\"\n\n\nassert solution(input()) == \"***\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"a***b\", \"Pass\"\n\"\"\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"a***b\", \"Your solution does not look like it should be.\"\n\nassert solution(stdin) == \"a***b\", \"Your solution does not look like it should be.\"\n\nassert solution(stdin) == \"***a\", \"Your solution does not look like it should be.\"\n\nassert solution(stdin) == \"***a\", \"Your solution does not look like it should be.\"\n\nassert solution(stdin) == \"a***b\", \"Your solution does not look like it should be.\""
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, [\"aogogob\"]) == \"a***b\"\nassert solution(9, [\"aogogob\", \"ogogo\", \"ogogog\", \"gmg\"]) == \"***gmg***\"\nassert solution(1, [\"aogogob\", \"ogog\", \"og\", \"og\", \"og\", \"og\"]) == \"a***b\"\nassert solution(1, [\"aogob\", \"ogog\", \"og\", \"og\"]) == \"a***b\"\nassert solution(1, [\"aogob\", \"og\", \"og\", \"og\"]) == \"a***b\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"Not implemented!\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aogogob\") == \"***b\", \"First string is not an interview\"\nassert solution(\"aogogob\") == \"***b\", \"Second string is not an interview\"\nassert solution(\"aogogob\") == \"***b\", \"Third string is not an interview\"\nassert solution(\"aogogob\") == \"***b\", \"Fourth string is not an interview\"\nassert solution(\"aogogob\") == \"***b\", \"Fifth string is not an interview\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"a***b\"\nassert solution(stdin) == \"***gmg***\"\n\nInput\n9\naogogob\n\nOutput\na***b\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"aogogob\") == \"a***b\", \"First sample\"\nassert solution(\"aogogob\") == \"***b\", \"Second sample\"\nassert solution(\"aogogob\") == \"***\", \"Third sample\"\nassert solution(\"aogogob\") == \"a***b\", \"Fourth sample\"\nassert solution(\"aogogob\") == \"a***b\", \"Fifth sample\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aogogob\") == \"a***b\"\nassert solution(\"aogogob\") == \"a***b***\"\nassert solution(\"aogogob\") == \"***gmg***\"\nassert solution(\"aogogob\") == \"a***b***\"\nassert solution(\"aogogob\") == \"***gmg***\"\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 7\") == \"18\"\nassert solution(\"4 8\") == \"22\"\nassert solution(\"4 4\") == \"16\"\nassert solution(\"4 4 4\") == \"0\"\nassert solution(\"4 2\") == \"12\"\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '293839360', 'The expected value is 293839360'\n\nassert solution(stdin) == '35301868', 'The expected value is 35301868'\n\nassert solution(stdin) == '35301868', 'The expected value is 35301868'\n\n-----See Also-----\nhttps://www.geeksforgeeks.org/max-product-of-two-prime-divisors/\nhttps://www.youtube.com/watch?v=7Uth8k0iCXI\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 2\") == \"2\"\nassert solution(\"947 987654321987654321\") == \"593574252\"\nassert solution(\"-999\") == \"0\"\nassert solution(\"00\") == \"0\"\nassert solution(\"10\") == \"0\"\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '593574252'\nassert solution(stdin) == '2947757500'\nassert solution(stdin) == '2948477500'\nassert solution(stdin) == '2949477500'\nassert solution(stdin) == '2950477500'\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"363165664\"\nassert solution(stdin) == \"593574252\"\nassert solution(stdin) == \"0x9c2e9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c9c"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"593574252\"\nassert solution(stdin) == \"593574252\"\nassert solution(stdin) == \"593574252\"\nassert solution(stdin) == \"593574252\"\nassert solution(stdin) == \"593574252\"\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '593574252'\nassert solution(stdin) == '593574252'\nassert solution(stdin) == '593574252'\nassert solution(stdin) == '593574252'\nassert solution(stdin) == '593574252'\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3231\") == \"2147483647\"\nassert solution(\"2147483648\") == \"2147483647\"\nassert solution(\"2147483649\") == \"2147483647\"\nassert solution(\"947 987654321987654321\") == \"593574252\"\n\nprint(\"The answer is correct!\")\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == answer\n\"\"\"\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"2008\"\nassert solution(stdin) == \"13726\"\nassert solution(stdin) == \"347\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2 8\") == \"3 2 8\"\nassert solution(\"1 2 -18\") == \"1 2 -18\"\nassert solution(\"2 2 -1\") == \"1 2 -1\"\nassert solution(\"2 2 -1\") == \"1 2 -1\"\nassert solution(\"2 2 -1\") == \"1 2 -1\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '64'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"31 337 967\""
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 -18') == \"4\"\nassert solution('1 2 -1') == \"0\"\nassert solution('2 2 -1') == \"0\"\nassert solution('2 2 -18') == \"0\"\nassert solution('2 2 -23') == \"0\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"708\"\nassert solution(stdin) == \"12708\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '31 337 967'\nassert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 43\n\"\"\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\n\n-----Constraints-----\n\n1 \u2264 a_{i} \u2264 6\n\n2 \u2264 N \u2264 2^24\n\n\n-----Problems-----\n\nInput\n2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\n\nOutput\nYES\n\nInput\n5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 6 3 6 3\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"NO\"\n\n'''\nInput = open(\"input.txt\", \"r\").read()\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\nInput\n1 1 1 1 1 1 1\n\nOutput\nYES\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nimport math"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 'NO'\nassert solution(input) == 'YES'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n-----Constraints-----\n0 < stdin.length <= 1000\n0 < a_{i} < 6\n\n-----Time Limit (C-50)-----\ntime limit exceeded\n\n\n-----Performance-----\n- Space complexity: O(1)\n- Time complexity: O(n^3)\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\n\n\n-----Side-effects-----\n\nWe are given a sequence of 24 numbers. It can be solved by rotating all numbers from 1 to 6.\n\nFor example, if given sequence is 1, 3, 6, 12, 24, 3, 4, 12, 36, 3, 6, 2, 5, 1, 6, 5, 6, 4, 5, 6, 1, 6, 3, 6, 6, 3, 2, 2, 1, 5, 6, 4, 6, 3, 2, 6, 2, 2, 6, 2, 6, 6, 3, 6, 5, 6, 5, 5, 5, 4, 4, 3, 1, 6, 5, 6, 4, 5, 6, 6, 4, 2, 6, 3, 6, 2, 3, 6, 5, 6, 6, 2, 6, 1, 6, 5, 6, 4, 3, 6, 2, 6, 1, 6, 3, 6, 6, 3, 6, 6, 3, 6, 1, 6, 6, 6, 3, 6, 6, 6, 1, 6, 5, 6, 6, 2, 1, 6, 5, 6, 6, 6, 6, 2, 6, 5, 6, 5, 6, 5, 6, 1, 5, 6, 6, 6, 6, 6, 2, 6, 6, 2, 6, 6, 6, 6, 6, 5, 6, 6, 6, 5, 6, 1, 6, 5, 6, 6, 6, 6, 6, 1, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_case) == YES\nassert solution(test_case) == NO\n\n\"\"\"\nimport itertools\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1' ) == '0'\nassert solution('2' ) == '1'\nassert solution('3' ) == '1'\nassert solution('4' ) == '0'\nassert solution('5' ) == '1'\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"238 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"8\"\nassert solution(\"329 19913 19900\") == \"8\"\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('239 10880 9889'), '0'\nassert solution('26 7258 6123'), '2'\nassert solution('493 8000 8000'), '24'\nassert solution('101 6800 6500'), '0'\nassert solution('329 19913 19900'), '8'\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('239') == 2\nassert solution('26') == 0\nassert solution('493') == 0\nassert solution('101') == 0\nassert solution('329') == 0\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '24'\nassert solution(stdin) == '8'"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"9,25,36,50,10,5,49,21,27,27,29,15,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"8\"\nassert solution(\"101 6800 6500\") == \"24\"\nassert solution(\"329 19913 19900\") == \"8\"\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('239 10880 9889') == 2\nassert solution('26 7258 6123') == 0\nassert solution('493 8000 8000') == 8\nassert solution('101 6800 6500') == 4\nassert solution('329 19913 19900') == 2\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"1\"\n\n-----Constraints-----\n1 <= n <= 100\n1 <= a, b, c <= 100\n\n-----Time Limit-----\nO(mn)\n\n-----Space Limit-----\nO(n)"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == 0\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == 0\nassert solution(\"2\") == 3\nassert solution(\"3\") == 1\nassert solution(\"5\") == 1\n\n\n\n\"\"\""
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(3)\n\nassert solution(stdin) == str(0)\n\nassert solution(stdin) == str(0)\n\nassert solution(stdin) == str(0)\n\n\n-----Problem-----\n\nGiven an integer n and a number of times that each of a few hosts can visit a house in a given year.\n\nThe function should return an integer representing the minimum distance to be fed a meal for the given year.\n\nFor the given year, the minimum distance to be fed a meal must be at least 5 years.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 distance between Rabbit's and Owl's houses.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 distance between Rabbit's and Eeyore's houses.\n\n-----Output-----\n\nOutput one integer, which represents the minimum distance to be fed a meal for the given year.\n\n\n-----Examples-----\nInput\n3\n2\n3\n1\n\nOutput\n3\n\nInput\n1\n2\n3\n5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case the optimal path for Winnie is the following: first have a meal in Rabbit's house, then in Owl's house, then in Eeyore's house. Thus he will pass the distance 2 + 1 = 3.\n\nIn the second test case Winnie has a meal in Rabbit's house and that is for him. So he doesn't have to walk anywhere at all.\n\nIn the third test case Winnie has a meal in Rabbit's house and that is for him. So he doesn't have to walk anywhere at all.\n\nFor the given year, the minimum distance to be fed a meal for the given year is at least 5 years.\n\n\n-----Problem-----\n\nGiven an integer n and a number of times that each of a few hosts can visit a house in a given year.\n\nThe function should return an integer representing the minimum distance to be fed a meal for the given year.\n\nFor the given year, the minimum distance to be fed a meal must be at least 5 years.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\n-----Output-----\n\nOutput one integer, which represents the minimum distance to be fed a meal for the given year.\n\n\n-----Examples-----\nInput\n3\n2\n3\n1\n\nOutput\n3\n\nInput\n1\n2\n3\n5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case the optimal path for Winnie is the following: first have a meal in Rabbit's house, then in Owl's house, then in Eeyore's house. Thus he will pass the distance 2 + 1 = 3.\n\nIn the second test case Winnie has a meal in Rabbit's house and that is for him. So he doesn't have to walk anywhere at all.\n\nIn the third test case Winnie has a meal in Rabbit's house and that is for him. So he doesn't have to walk anywhere at all.\n\nFor the given year, the minimum distance to be fed a meal for the given year is at least 5 years.\n\n\n-----Problem-----\n\nGiven an integer n and a number of times that each of a few hosts can visit a house in a given year.\n\nThe function should return an integer representing the minimum distance to be fed a meal for the given year.\n\nFor the given year, the minimum distance to be fed a meal must be at least 5 years.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\n-----Output-----\n\nOutput one integer, which represents the minimum distance to be fed a meal for the given year.\n\n\n-----Examples-----\nInput\n3\n2\n3\n1\n\nOutput\n3\n\nInput\n1\n2\n3\n5\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first test case the optimal path for Winnie is the following: first have a meal in Rabbit's house, then in Owl's house, then in Eeyore's house. Thus he will pass the distance 2 + 1 = 3.\n\nIn the second test case Winnie has a meal in Rabbit's house and that is for him. So he doesn't have to walk anywhere at all.\n\nIn the third test case Winnie has a meal in Rabbit's house and that is for him. So he doesn't have to walk anywhere at all.\n\nFor the given year, the minimum distance to be fed a meal for the given year is at least 5 years.\n\n\n-----Problem-----\n\nGiven an integer n and a number of times that each of a few hosts can visit a house in a given year.\n\nThe function should return an integer representing the minimum distance to be fed a meal for the given year.\n\nFor the given year, the minimum distance to be fed a meal must be at least 5 years.\n\n\n-----Input-----\n\nFirst line contains an integer n (1 \u2264 n \u2264 100)\u00a0\u2014 number of visits.\n\nSecond line contains an integer a (1 \u2264 a \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\nThird line contains an integer b (1 \u2264 b \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\nFourth line contains an integer c (1 \u2264 c \u2264 100)\u00a0\u2014 number of times a person can visit a house.\n\n-----Output-----\n\nOutput one integer, which represents the minimum distance to be fed a meal for the given year.\n\n\n-----Examples-----\nInput\n3\n2\n3\n1\n\nOutput\n3\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\nInput\n2\n3\n1\n\nOutput\n3\n\nInput\n1\n2\n3\n5\n\nOutput\n0\n\nInput\n3\n5\n\nOutput\n3\n\nInput\n1\n5\n2\n4\n\nOutput\n0\n\nInput\n1\n5\n3\n\nOutput\n1\n\nInput\n1\n5\n2\n4\n\nOutput\n0\n\nInput\n1\n5\n3\n\nOutput\n1\n\nInput\n1\n2\n1\n\nOutput\n0\n\nInput\n1\n2\n3\n\nOutput\n0\n\n\"\"\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == 3\nassert solution(\"2\") == 5\nassert solution(\"3\") == 0\nassert solution(\"5\") == 1\n\n-----Constraints-----\n\n1 \u2264 a, b, c \u2264 100\n\n\n-----Time Limit: O(mn) where m is the number of visited paths and n is the number of times he has visited each pair of houses.\n\n1 \u2264 stdin.length \u2264 10^3\n0 \u2264 stdin.length \u2264 10^6\n0 \u2264 stdin[i] \u2264 100\n\"\"\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0, 0, 0) == 0, \"The path should be 0.\"\nassert solution(1, 1, 1) == 0, \"The path should be 0.\"\nassert solution(2, 2, 2) == 1, \"The path should be 1.\"\nassert solution(3, 3, 3) == 2, \"The path should be 2.\"\nassert solution(4, 4, 4) == 3, \"The path should be 3.\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 1 1\",\n    \"2\",\n    \"1\"\n) == \"0\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\nInput\n1\n1\n1\n\nOutput\n0\n\nInput\n1\n3\n0\n\nOutput\n0\n\n-----Solution-----"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('7 1 4') == '6'\nassert solution('30 20 10') == '20'\nassert solution('30 20 10') == '20'\nassert solution('30 20 10') == '20'\nassert solution('30 20 10') == '20'\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '20'\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"6 3\", \"30 2\", \"20 20\", \"30 20\", \"30 20\"]) == \"20\"\nassert solution([\"6 3\", \"30 2\", \"20 20\", \"30 20\", \"30 20\"]) == \"4\"\nassert solution([\"6 3\", \"30 2\", \"20 20\", \"30 20\", \"30 20\"]) == \"3\""
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n\"\"\""
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 20\n\"\"\""
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= x_1 <= 100\n1 <= x_2 <= 100\n1 <= x_3 <= 100\n\n----Examples----\n\nInput 1:\n\n4 6\n\nOutput 1:\n\n6\n\nInput 2:\n\n10 20\n\nOutput 2:\n\n6\n\n\"\"\""
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(7 1 4) == 6\n\n\n-----Constraints-----\n1 \u2264 stdin.length <= 8\n1 \u2264 x_1, x_2, x_3 \u2264 100\n\nThe two friends go together, with friends at most two at a time.\n\n\n'''"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '12'\n'''"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"70\", \"72\", \"43\"]) == \"6\"\nassert solution([\"70\", \"72\", \"30\"]) == \"14\"\nassert solution([\"70\", \"72\", \"32\"]) == \"12\"\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\"\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 4 3 7') == 0\nassert solution('2 228') == 2\nassert solution('3 7') == -1\n\"\"\""
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == 1\nassert solution(\"2\") == 0\nassert solution(\"7\") == -1\nassert solution(\"5\") == 0\n\n\n-----Constraints-----\n\n1 <= n <= 100000\n1 <= a_1, a_2,..., a_{n} <= 100000\n0 <= x <= 100000\n\n\n-----Time complexity-----\n\nTime O(n)\n\n\nTime O(n)\n\nTime O(n)\n\nTime O(n)\n\nTime O(n)\n\n\"\"\"\nclass Solution:\n    def solve(self, n: int, x: int) -> int:\n        \n        def count(l, r):\n            count = 0\n            while l <= r:\n                if l & 1:\n                    count += 1\n                    l += 1\n                if r & 1:\n                    r -= 1\n                if l & 2 == 1:\n                    l -= 1\n                if r & 2 == 1:\n                    r -= 1\n            return count\n            \n        n = n + 1\n        x = x - 1\n        \n        if n > 1:\n            if x > 0:\n                return count(1, x) + count(2, x) + count(3, x) - count(4, x) - count(5, x)\n            else:\n                return count(1, x) + count(2, x) - count(3, x)\n        else:\n            if x > 0:\n                return count(1, x)\n            else:\n                return count(1, x)\n        \n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n'''\nclass Solution:\n    def minOperations(self, nums: List[int], x: int) -> int:\n        if len(nums) < 2:\n            return -1\n        \n        def find_set(nums, idx):\n            if nums[idx]!= idx:\n                nums[idx] = find_set(nums, nums[idx])\n            return nums[idx]\n        \n        count = [0] * (len(nums) + 1)\n        count[0] = 1\n        for i in range(1, len(nums) + 1):\n            if i - x < 0:\n                count[i] = count[i - x]\n            else:\n                count[i] = count[i - x] + count[i - x + 1]\n        \n        return count[-1]"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5,7) == 1\nassert solution(2,3) == 1\nassert solution(1,2) == 1\nassert solution(2,2) == 1\nassert solution(3,2) == 1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, 7) == 0\nassert solution(4, 3) == 2\nassert solution(5, 1) == -1\n\"\"\""
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 5, 1, \"1\") == 1\nassert solution(2, 3, 1, \"1\") == -1\nassert solution(3, 3, 2, \"1\") == 1\nassert solution(4, 7, 1, \"1\") == 0\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input() == '0') == '0'\nassert solution(input() == '1') == '1'\nassert solution(input() == '2') == '0'\nassert solution(input() == '3') == '1'\nassert solution(input() == '4') == '0'\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['3 2', '* 2', '*', '*', '*', '*', '*']) == 'NO'\nassert solution(['5 6', '..**..', '..*...', '..*...', '*', '*', '*']) == 'YES'\nassert solution(['5 6', '..**..', '..*...', '..*...', '*', '*', '*']) == 'NO'\nassert solution(['*', '*', '*', '*', '*', '*', '*']) == 'NO'\nassert solution(['**', '*', '*', '*', '*', '*', '*']) == 'NO'\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 6\\n.*****\\n.*****\\n.*****\\n.*****\\n.*****\\n..*...\\n*..*...\\n..*...*\\n*...*...\\n*...*...\\n...*...*\\n...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\\n*...*...*\") == \"YES\"\n\n\"ABC\"\n\"XD\"\n\"A\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n\"*\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('.') == 'YES'\nassert solution('..') == 'NO'\nassert solution('...') == 'NO'\nassert solution('*..') == 'NO'\nassert solution('*...') == 'YES'\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 6') == 'YES'\nassert solution('3 7') == 'NO'\nassert solution('7 7') == 'NO'"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin: str,\n    h: int,\n    w: int,\n    s: str\n) == \"YES\"\nassert solution(\n    stdin: str,\n    h: int,\n    w: int,\n    s: str,\n    s = \"*\"\n) == \"NO\"\nassert solution(\n    stdin: str,\n    h: int,\n    w: int,\n    s: str,\n    s = \"*.*\"\n) == \"NO\"\nassert solution(\n    stdin: str,\n    h: int,\n    w: int,\n    s: str,\n    s = \"*\"\n) == \"YES\"\nassert solution(\n    stdin: str,\n    h: int,\n    w: int,\n    s: str,\n    s = \"*.*\"\n) == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= h, w <= 500\n0 <= s.length <= 100\n\n-100 <= s[i] <= 100\n\n-----Tips-----\n-Use str.split() to split s into a list of strings.\n\nTime: O(n)\nSpace: O(h)\n'''"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n\n1 <= h, w <= 500\n\n------Time Limit Exceeded------\nInput\n\na=1\n\nOutput\n\nYES\n\n------Time Limit Exceeded------\nInput\n\na=3\n\nOutput\n\nNO\n\n------Time Limit Exceeded------\nInput\n\na=6\n\nOutput\n\nNO\n\n------Time Limit Exceeded------\nInput\n\na=8\n\nOutput\n\nNO\n\n\n------Note-----\n\nInput\n\n2 1\n.......\n..*..\n..*..\n..*..\n....*..\n..*..\n..*..\n..*..\n.***.\n..*..\n\nOutput\n\nNO\n\n------Note-----\n\nInput\n\n2 3\n.......\n...*...\n..****.\n...*..\n....*..\n..*..\n..*..\n.*.....\n\nOutput\n\nNO\n\n------Note-----\n\nInput\n\n1 2\n..*..\n..*..\n.*..*.\n..*..\n..*..\n\nOutput\n\nNO\n\n------Note-----\n\nInput\n\n3 10\n..........\n..*.......\n.*.******.\n..*.......\n..........\n\nOutput\n\nNO\n\nInput\n\n5 6\n..**..\n..**..\n******\n..**..\n..**..\n..**..\n..*.....\n..*.....\n.......*..\n.......*..\n.......*..\n......*..\n.****.*..\n.****.*..\n\nOutput\n\nNO\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input()\n) == 'YES'\n\nassert solution(\n    input()\n) == 'NO'\n\n\n\n-----Example-----\n\nInput\n10 3\n..*..\n..*...\n.****.\n..*...\n..*...\n.......\n..*....\n..*..*..\n...*...\n....*...\n\nOutput\nYES\n\nInput\n13 9\n..**..\n..**..\n******\n..**..\n..**..\n..*....\n..*..*..\n\nOutput\nNO\n\nInput\n13 6\n..*..\n******\n.****.\n..*..*..\n..*....\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'NO'"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin=\n    \"3 1 2\"\n) == \"YES\""
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 2 2\") == \"NO\"\nassert solution(\"1 1 2 3 4\") == \"YES\"\nassert solution(\"1 1 2 4 3\") == \"YES\"\nassert solution(\"1 3 3 3 3\") == \"YES\"\nassert solution(\"1 3 3 2 3\") == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == \"NO\" or solution == \"YES\", \"incorrect output\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 1 2') == 'YES'\nassert solution('3 3 3') == 'YES'\nassert solution('3 3') == 'NO'\nassert solution('0 0 0 0 0 0 0 0 0 0') == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\" or solution(stdin) == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0, \"solution() should print '0' when called with incorrect parameters.\"\n\"\"\""
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\", \"8\", \"3\", \"1\", \"2\"]) == \"1\"\nassert solution([\"4\", \"5\", \"2\", \"1\", \"2\", \"3\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"2\", \"2\", \"2\", \"2\"]) == \"2\"\nassert solution([\"5\", \"5\", \"1\", \"1\", \"1\"]) == \"2\"\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Correct implementation of solution\"\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 0\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ABDC\") == \"Impossible\"\nassert solution(\"ABCDEF\") == \"Impossible\"\nassert solution(\"ABC\") == \"Impossible\"\nassert solution(\"XYXAYZ\") == \"Impossible\"\nassert solution(\"A\") == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Impossible\""
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YXWVUTGHIJKLMNOPQRSGTUVWXYZ\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\nassert solution(\"ABYOJKLOKMNOPRSTWXYZ\") == \"Impossible\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YXWVUTGHIJKLMNOPQRSGTUVWXYZ\"\nassert solution(\"ABYOJKLOKMNOPRSTWXYZ\") == \"YXWVUTGHIJKLMNOPQRSGTUVWXYZ\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == \"Impossible\"\n\n\nExplanation\n\nWe have the following grid: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nA sequence of tiles is called a path if each tile in the sequence is adjacent to the tile which follows it (except for the last tile in the sequence, which of course has no successor). In this example, \"ABC\" is a path, and so is \"KXWIHIJK\". \"MAB\" is not a path because 'M' is not adjacent to 'A'. A single tile can be used more than once by a path (though the tile cannot occupy two consecutive places in the path because no tile is adjacent to itself).\n\nWe are given a string s which consists of 27 upper-case English letters. Each English letter occurs at least once in s. Find a grid that contains a path whose tiles, viewed in the order that the path visits them, form the string s. If there is no solution, print \"Impossible\" (without the quotes).\n\nInput\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nOutput\nYXWVUTGHIJKLMNOPQRSTUVWXYZ\nZABCDEFSRQPON\n\nExplanation\n\nWe have the following grid: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nA sequence of tiles is called a path if each tile in the sequence is adjacent to the tile which follows it (except for the last tile in the sequence, which of course has no successor). In this example, \"ABC\" is a path, and so is \"KXWIHIJK\". \"MAB\" is not a path because 'M' is not adjacent to 'A'. A single tile can be used more than once by a path (though the tile cannot occupy two consecutive places in the path because no tile is adjacent to itself).\n\nWe are given a string s which consists of 27 upper-case English letters. Each English letter occurs at least once in s. Find a grid that contains a path whose tiles, viewed in the order that the path visits them, form the string s. If there is no solution, print \"Impossible\" (without the quotes).\n\nInput\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n\nOutput\nYXWVUTGHIJKLMNOPQRSTUVWXYZ\nZABCDEFSRQPON\n\n\nExample 1:\n\nInput: s = \"AABCD\"\nOutput: \"AB\"\nExplanation: \"A\" and \"B\" are adjacent if they share a side or a corner, and \"C\" is not adjacent to \"A\".\nExample 2:\n\nInput: s = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nOutput: \"XYZ\"\nExplanation: \"XYZ\" and \"ABC\" are adjacent if they share a side or a corner, and \"Z\" is not adjacent to \"XYZ\".\nExample 3:\n\nInput: s = \"JKLF\"\nOutput: \"KJL\"\nExplanation: \"KJL\" and \"JKL\" are adjacent if they share a side or a corner, and \"J\" is not adjacent to \"K\".\nExample 4:\n\nInput: s = \"ABC\"\nOutput: \"ABC\"\nExplanation: \"ABC\" and \"A\" are adjacent if they share a side or a corner, and \"B\" is not adjacent to \"A\".\nExample 5:\n\nInput: s = \"ZZXWXY\"\nOutput: \"WXWXX\"\nExplanation: \"WXWXX\" and \"ZZW\" are adjacent if they share a side or a corner, and \"X\" is not adjacent to \"WXWXX\".\nExample 6:\n\nInput: s = \"AC\"\nOutput: \"A\"\nExplanation: \"A\" and \"C\" are adjacent if they share a side or a corner, and \"X\" is not adjacent to \"A\".\nExample 7:\n\nInput: s = \"ASDFASDF\"\nOutput: \"A\"\nExplanation: \"A\" and \"D\" are adjacent if they share a side or a corner, and \"S\" is not adjacent to \"A\".\n\n\"\"\"\n\nclass Solution:\n    def path(self,grid,row,col,direction,res):\n        if row<len(grid):\n            if col<len(grid[0]):\n                if grid[row][col]==direction:\n                    res+=grid[row][col]\n                    self.path(grid,row+1,col,direction,res)\n                    self.path(grid,row,col+1,direction,res)\n                    self.path(grid,row,col-1,direction,res)\n                    self.path(grid,row-1,col,direction,res)\n                    self.path(grid,row,col,direction,res)\n                    return\n        else:\n            if col<len(grid[0]):\n                if grid[row][col]==direction:\n                    res+=grid[row][col]\n                    self.path(grid,row,col,direction,res)\n                    self.path(grid,row-1,col,direction,res)\n                    self.path(grid,row,col+1,direction,res)\n                    return\n            else:\n                if grid[row][col]==direction:\n                    res+=grid[row][col]\n                    self.path(grid,row,col,direction,res)\n                    return\n                    \n        \n    def findPath(self,s):\n        grid=[]\n        for i in range(len(s)):\n            grid.append([])\n            for j in range(len(s[0])):\n                grid[i].append(s[i][j])\n        \n        self.path(grid,0,0,0,0)\n        \n        return grid"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Impossible\"\nassert solution(input) == \"Impossible\"\nassert solution(input) == \"Impossible\"\nassert solution(input) == \"Impossible\"\nassert solution(input) == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Impossible\""
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\") == \"YXWVUTGHIJKLM\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\") == \"Impossible\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\".,..\") == \"Impossible\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"YXWVUTGHIJKLMNOPQRSGTUVWXYZ\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"ZABCDEFSRQPON\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == \"Impossible\"\nassert solution(s) == \"Impossible\""
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '<'\n\n-----Constraints-----\n1 <= stdin.length <= 60\n1 <= stdin[i] <= 10^9\n\nInput Format\n\nThe first line contains an integer $x$, the size of the first array $a$.\nThe second line contains an integer $y$, the size of the second array $b$.\n\nConstraints\n\n\n\nOutput Format\n\nPrint one line: the string '=' (without quotes).\n\n\nSample Input\n\n10\n3\n10\n2\n\nSample Output\n\n=\n\n\nSample Explanation\n\nThe result should be '='.\n\n\"\"\"\nimport math"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '>'\n\n\n-----Examples-----\nInput\n5 8\n\nOutput\n>\n\nInput\n10 3\n\nOutput\n<\n\n\nInput\n6 6\n\nOutput\n=\n\n\n-----Note-----\n\nIn the first example $5^8 = 5 \\cdot 5 \\cdot 5 \\cdot 5 \\cdot 5 \\cdot 5 \\cdot 5 = 390625$. So you should print '>'.\n\nIn the second example $10^3 = 1000 < 3^{10} = 59049$.\n\nIn the third example $6^6 = 46656 = 6^6$.\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5^8\") == \">\", \"Your solution is not correct!\"\n\n\n\n-----Constraints-----\n0 \u2264 x, y \u2264 1,000,000\n\n-----Time Limit-----\n1 minute\n\n\n-----Attempting to solve this problem before that time limit has elapsed is not an option. Please contact your mentor and write an appropriate error message if you do not know what you are doing.\n\n-----Constraints for slow machines-----\n\n0 \u2264 x, y \u2264 1,000,000\n\nx = 1 < y < 10,000\n\n1 \u2264 x, y \u2264 1,000,000\n\nx = 10^9\n\n-1 \u2264 x, y \u2264 1,000,000\n\nx = 1\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input() == '>') == '>'\nassert solution(input() == '=') == '='\n\n\"\"\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\"\") == \">\"\nassert solution(\"\") == \"=\"\nassert solution(\"3\") == \"=\"\nassert solution(\"9\") == \"<\"\nassert solution(\"6\") == \"<=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '<'\nassert solution(stdin) == '='\nassert solution(stdin) == '>'\nassert solution(stdin) == '='"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 2 1\") == \"1 2 1\"\nassert solution(\"1 2 1 2\") == \"1 2 2 2\"\nassert solution(\"1 2 1 1 1\") == \"1 2 2 1 1\"\nassert solution(\"2 5\") == \"2 5\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == \">\"\nassert solution(\"10 3\") == \"=\"\nassert solution(\"6 6\") == \"=\nassert solution(\"4 6656\") == \"<\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5^8\") == \">=\"\nassert solution(\"10^3\") == \"<\"\nassert solution(\"6^6\") == \"=\"\nassert solution(\"10^6\") == \"<\"\nassert solution(\"32768\") == \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '<'\nassert solution(input()) == '>'\nassert solution(input()) == '='\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\"), 3\nassert solution(\"1 1\"), 5\nassert solution(\"2 2\"), 2\nassert solution(\"2 2\"), 1\nassert solution(\"2 2\"), 1\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 3\"\n) == 3, \"Solution failed\"\nassert solution(\n    \"2 1\"\n) == 5, \"Solution failed\"\nassert solution(\n    \"2 2\"\n) == 2, \"Solution failed\"\nassert solution(\n    \"2 2\"\n) == 2, \"Solution failed\"\nassert solution(\n    \"3 1\"\n) == 3, \"Solution failed\"\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1') == '5'\nassert solution('2 2') == '3'\nassert solution('3') == '3'\nassert solution('4') == '1'\nassert solution('5') == '2'\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 1') == 3\nassert solution('2 1') == 5\nassert solution('2 2') == 2\nassert solution('2 3') == 2\nassert solution('3 1') == 3\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1') == 3\nassert solution('1 1') == 3\nassert solution('2 2') == 3\nassert solution('1 1') == 1\nassert solution('2 2') == 2\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n\n-----Examples-----\nTest 1:\nInput\n1 2\n\nOutput\n3\n\nTest 2:\nInput\n1 2\n\nOutput\n2\n\nTest 3:\nInput\n2 1\n\nOutput\n2\n\nTest 4:\nInput\n2 1\n\nOutput\n1\n\nTest 5:\nInput\n2 1\n\nOutput\n1\n\n------Solution-----\nTest case 1:\nInput: 1 1\nOutput: 3\nTest case 2:\nInput: 2 1\nOutput: 1\nTest case 3:\nInput: 2 2\nOutput: 5\nTest case 4:\nInput: 1 1\nOutput: 2\nTest case 5:\nInput: 1 1\nOutput: 2\nTest case 6:\nInput: 1 2\nOutput: 1\nTest case 7:\nInput: 1 2\nOutput: 2\nTest case 8:\nInput: 1 2\nOutput: 1\nTest case 9:\nInput: 2 1\nOutput: 0\nTest case 10:\nInput: 2 1\nOutput: 1\nTest case 11:\nInput: 2 2\nOutput: 1\nTest case 12:\nInput: 2 1\nOutput: 2\nTest case 13:\nInput: 2 2\nOutput: 2\nTest case 14:\nInput: 2 2\nOutput: 1\nTest case 15:\nInput: 1 2\nOutput: 2\nTest case 16:\nInput: 1 1\nOutput: 0\nTest case 17:\nInput: 2 2\nOutput: 0\nTest case 18:\nInput: 1 2\nOutput: 1\nTest case 19:\nInput: 1 2\nOutput: 2\nTest case 20:\nInput: 2 1\nOutput: 1\nTest case 21:\nInput: 2 1\nOutput: 0\nTest case 22:\nInput: 1 2\nOutput: 1\nTest case 23:\nInput: 1 1\nOutput: 0\nTest case 24:\nInput: 2 2\nOutput: 0\nTest case 25:\nInput: 2 2\nOutput: 2\nTest case 26:\nInput: 2 1\nOutput: 1\nTest case 27:\nInput: 1 2\nOutput: 2\nTest case 28:\nInput: 1 2\nOutput: 2\nTest case 29:\nInput: 2 1\nOutput: 1\nTest case 30:\nInput: 1 2\nOutput: 0\nTest case 31:\nInput: 1 1\nOutput: 0\nTest case 32:\nInput: 2 2\nOutput: 1\nTest case 33:\nInput: 2 1\nOutput: 2\nTest case 34:\nInput: 2 1\nOutput: 1\nTest case 35:\nInput: 1 2\nOutput: 2\nTest case 36:\nInput: 1 1\nOutput: 0\nTest case 37:\nInput: 2 2\nOutput: 2\nTest case 38:\nInput: 2 2\nOutput: 2\nTest case 39:\nInput: 2 2\nOutput: 1\nTest case 40:\nInput: 1 2\nOutput: 2\nTest case 41:\nInput: 1 1\nOutput: 1\nTest case 42:\nInput: 2 2\nOutput: 0\nTest case 43:\nInput: 2 2\nOutput: 1\nTest case 44:\nInput: 2 2\nOutput: 2\nTest case 45:\nInput: 1 1\nOutput: 0\nTest case 46:\nInput: 1 2\nOutput: 1\nTest case 47:\nInput: 1 2\nOutput: 2\nTest case 48:\nInput: 2 1\nOutput: 1\nTest case 49:\nInput: 2 1\nOutput: 0\nTest case 50:\nInput: 2 2\nOutput: 0\nTest case 51:\nInput: 1 1\nOutput: 2\nTest case 52:\nInput: 1 1\nOutput: 2\nTest case 53:\nInput: 2 2\nOutput: 2\nTest case 54:\nInput: 2 2\nOutput: 1\nTest case 55:\nInput: 1 2\nOutput: 0\nTest case 56:\nInput: 2 1\nOutput: 1\nTest case 57:\nInput: 2 2\nOutput: 1\nTest case 58:\nInput: 1 1\nOutput: 1\nTest case 59:\nInput: 1 2\nOutput: 2\nTest case 60:\nInput: 2 2\nOutput: 2\nTest case 61:\nInput: 2 1\nOutput: 1\nTest case 62:\nInput: 2 2\nOutput: 2\nTest case 63:\nInput: 1 1\nOutput: 2\nTest case 64:\nInput: 2 2\nOutput: 0\nTest case 65:\nInput: 1 1\nOutput: 1\nTest case 66:\nInput: 2 2\nOutput: 2\nTest case 67:\nInput: 2 2\nOutput: 0\nTest case 68:\nInput: 1 1\nOutput: 0\nTest case 69:\nInput: 2 2\nOutput: 2\nTest case 70:\nInput: 2 2\nOutput: 1\nTest case 71:\nInput: 1 1\nOutput: 0\nTest case 72:\nInput: 1 1\nOutput: 1\nTest case 73:\nInput: 1 2\nOutput: 1\nTest case 74:\nInput: 1 2\nOutput: 0\nTest case 75:\nInput: 2 2\nOutput: 0\nTest case 76:\nInput: 2 2\nOutput: 2\nTest case 77:\nInput: 2 2\nOutput: 1\nTest case 78:\nInput: 1 1\nOutput: 2\nTest case 79:\nInput: 1 1\nOutput: 1\nTest case 80:\nInput: 2 2\nOutput: 2\nTest case 81:\nInput: 2 2\nOutput: 1\nTest case 82:\nInput: 2 2\nOutput: 0\nTest case 83:\nInput: 1 1\nOutput: 0\nTest case 84:\nInput: 1 1\nOutput: 1\nTest case 85:\nInput: 1 1\nOutput: 1\nTest case 86:\nInput: 2 2\nOutput: 2\nTest case 87:\nInput: 2 2\nOutput: 2\nTest case 88:\nInput: 2 2\nOutput: 1\nTest case 89:\nInput: 2 2\nOutput: 2\nTest case 90:\nInput: 1 1\nOutput: 0\nTest case 91:\nInput: 1 1\nOutput: 0\nTest case 92:\nInput: 2 2\nOutput: 1\nTest case 93:\nInput: 2 2\nOutput: 1\nTest case 94:\nInput: 1 1\nOutput: 2\nTest case 95:\nInput: 1 1\nOutput: 1\nTest case 96:\nInput: 1 2\nOutput: 0\nTest case 97:\nInput: 1 2\nOutput: 1\nTest case 98:\nInput: 2 2\nOutput: 2\nTest case 99:\nInput: 1 1\nOutput: 2\nTest case 100:\nInput: 1 1\nOutput: 2\nTest case 101:\nInput: 2 2\nOutput: 2\nTest case 102:\nInput: 2 2\nOutput: 1\nTest case 103:\nInput: 1 1\nOutput: 0\nTest case 104:\nInput: 1 1\nOutput: 1\nTest case 105:\nInput: 2 2\nOutput: 2\nTest case 106:\nInput: 2 2\nOutput: 2\nTest case 107:\nInput: 1 1\nOutput: 1\nTest case 108:\nInput: 1 1\nOutput: 0\nTest case 109:\nInput: 2 2\nOutput: 2\nTest case 110:\nInput: 1 1\nOutput: 0\nTest case 111:\nInput: 2 2\nOutput: 1\nTest case 112:\nInput: 2 2\nOutput: 0\nTest case 113:\nInput: 1 1\nOutput: 1\nTest case 114:\nInput: 1 1"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Error\""
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n    [\"1 1\", \"1 1\"],\n    [\"1 2\", \"1 3\"],\n    [\"1 4\", \"1 5\"],\n    [\"2 1\", \"2 2\"]\n    ]\n) == \"3\"\n\nassert solution(\n    [\n    [\"3 3\", \"4 4\", \"5 5\"],\n    [\"1 1\", \"2 2\", \"3 3\"]\n    ]\n) == \"3\"\n\nassert solution(\n    [\n    [\"2 2\", \"3 3\"],\n    [\"1 1\", \"1 1\"]\n    ]\n) == \"1\"\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '26'"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    input=\n    \"7 3 7 3 20\"\n) == \"26\"\nassert solution(\n    input=\n    \"7 9 3 1 8\"\n) == \"28\"\nassert solution(\n    input=\n    \"10 10 10 10 10\"\n) == \"20\"\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10 10 10 10 10') == '20'\nassert solution('1 3 3 3') == '8'\nassert solution('1 1 0') == '1'\nassert solution('1 7') == '2'\nassert solution('10 10 10 10 10') == '26'\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 3 7 3 20\") == 26\nassert solution(\"7 9 3 1 8\") == 28\nassert solution(\"10 10 10 10 10\") == 20\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 20\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input()\n    ) == '20'\n\nassert solution(\n    input()\n    ) == '26'\n\nassert solution(\n    input()\n    ) == '26'\n\nassert solution(\n    input()\n    ) == '17'\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7 3 7 3 20\") == 26\nassert solution(\"7 9 3 1 8\") == 28\nassert solution(\"10 10 10 10 10\") == 40\nassert solution(\"10 10 10 10 10\") == 40\nassert solution(\"10 10 10 10 10\") == 40"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\n\nassert solution(stdin) == 26\n\n\"\"\""
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '20'\nassert solution(input('7')) == '28'\nassert solution(input('10')) == '28'\nassert solution(input('10 10 10 10 10')) == '46'\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"26\"\n\n'''\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 10\"), \"The first problem: the optimal way to achieve this is the walk to the third checkpoints (distance is 12 - 10 = 2) and then proceed to the second one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\"\n\nassert solution(\"2 0\"), \"The second problem: the optimal way to achieve this is the walk to the third checkpoints (distance is 12 - 10 = 2) and then proceed to the second one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\"\n\nassert solution(\"5 0\"), \"The third problem: the optimal way to achieve this is the walk to the third checkpoints (distance is 12 - 10 = 2) and then proceed to the second one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\"\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 10\") == \"7\"\nassert solution(\"2 0\") == \"10\"\nassert solution(\"5 0\") == \"0\""
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12\n\nclass Solution:\n    def min_distance(self, x_1: int, x_2: int, x_3: int, x_4: int, x_5: int, x_6: int, x_7: int, x_8: int, x_9: int, x_10: int) -> str:\n        def dist(a, b):\n            return abs(a - b)\n        def walk(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10):\n            a = x_1\n            b = x_2\n            c = x_3\n            d = x_4\n            e = x_5\n            f = x_6\n            g = x_7\n            h = x_8\n            i = x_9\n            j = x_10\n            return min(dist(a,b), dist(c,d), dist(e,f), dist(g,h), dist(i,j))\n        return str(walk(x_1, x_2, x_3, x_4, x_5, x_6, x_7, x_8, x_9, x_10))"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '7'\nassert solution(inp) == '10'\nassert solution(inp) == '0'\nassert solution(inp) == '0'\nassert solution(inp) == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 10 1 7 12 0\"\n) == 7\nassert solution(\n    \"2 0 11 -10 0 0 1000 0 0\"\n) == 10\nassert solution(\n    \"5 0 0 0 0 1000 0 0 0\"\n) == 0\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1\nassert solution(110) == 10\nassert solution(4) == -1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 1\nassert solution(4) == -1\nassert solution(1) == 1\nassert solution(110) == 10\nassert solution(110) == 10"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(123) == -1"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == -1\nassert solution(110) == 10\nassert solution(4) == -1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == -1\nassert solution(\"110\") == 10\nassert solution(\"4\") == -1\n\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 100,000, 000,000,000,000\n\n\n-----Alternatives-----\n\nIf you are not sure how to solve the question, you can get it by hand:\n\ninput:\n5\n\noutput:\n-1\n\n\n\n-----Tutorial-----\n\nIf you are not sure how to solve the problem, you can get it by hand:\n\nimport math\nprint(\"input:\", end=\"\")\nn = int(input())\nprint(\"output:\", end=\"\")\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == -1\nassert solution(10) == 10\nassert solution(4) == -1\n\n\n-----Note-----\n\nThe smallest positive integer root of the given equation x = 1 is -1. \n\nFor example, with 5 as input, the smallest positive integer root of the given equation x = 1 is -1.\n\nAll the valid cases of such cases are tested.\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^18\n\n\n-----Elements of input file for testing-----\n\nThe first line contains an integer n, the number of equations.\n\nThe next line contains an integer m, the number of input lines.\n\nThe last line contains a single string line containing an integer n, the equation to test.\n\nThe next n lines contains the line of strings, where the integers in the string are in decimal notation.\n\nThe last line contains a single string line containing a string in the range [0, 10^18], where the integer is a positive integer.\n\nThe first line contains an integer n, the number of input lines.\n\nThe second line contains an integer m, the number of input lines.\n\nThe last line contains a single string line containing an integer n, the equation to test.\n\nConstraints\n1 \u2264 n \u2264 100\n1 \u2264 m \u2264 10^18\n1 \u2264 t \u2264 n\n1 \u2264 a, b, c \u2264 10^18\n1 \u2264 s(x) \u2264 n^2\n1 \u2264 s(x) \u2264 n\n\nSample Input\n\n1\n1\n1\n2\n1\n1\n1\n2\n3\n1\n1\n2\n3\n3\n4\n1\n1\n2\n3\n4\n5\n\nSample Output\n\n1\n3\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 m \u2264 10^18\n1 \u2264 t \u2264 n\n1 \u2264 a, b, c \u2264 10^18\n1 \u2264 s(x) \u2264 n^2\n1 \u2264 s(x) \u2264 n\n\n\"\"\"\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 1, \"Cannot solve the equation\"\nassert solution(2) == 2, \"Cannot solve the equation\"\nassert solution(3) == -1, \"Cannot solve the equation\"\nassert solution(10000) == 10, \"Cannot solve the equation\"\n\n\"\"\""
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '10'\nassert solution(stdin) == -1"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"00:00\"\nassert solution(stdin) == \"01:00\"\nassert solution(stdin) == \"23:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"00:06\"\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 9\nstdin contains the input and output string in the same order as they are given.\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '00:06'\nassert solution(input) == '00:00'\nassert solution(input) == '23:00'\nassert solution(input) == '00:01'\n\n\n-----Constraints-----\n\n1 <= t <= 60\n\n\n------Time Limit (Wall Clock Time)-----\nTime limit: 60 seconds\n\n------Space Limit (RAM Usage)-----\nTime limit: 80,000\n\n\n-----Problems-----\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\nMedium\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:02\") == \"00:02\"\nassert solution(\"23:00\") == \"00:01\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"05:50\", \"05:44\", \"01:00\"]) == \"00:06\", \"Incorrect format\"\nassert solution([\"00:00\"]) == \"00:00\", \"Incorrect format\"\nassert solution([\"00:00\", \"00:01\", \"00:02\", \"00:03\"]) == \"23:00\", \"Incorrect format\"\nassert solution([\"00:01\", \"00:00\", \"00:01\", \"00:01\", \"00:01\"]) == \"00:01\", \"Incorrect format\"\nassert solution([\"00:01\", \"00:00\"]) == \"00:00\", \"Incorrect format\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:02\") == \"00:02\"\nassert solution(\"00:03\") == \"00:03\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '00:06'\nassert solution(stdin) == '00:00'\nassert solution(stdin) == '23:00'\n\n\n-----Constraints-----\n1 <= stdin.length <= 200\n0 <= t < 10^4\n0 <= s < 10^9\n\nTime Limit: 1 second\n\nA Python Dictionary should store a dictionary of integers where the keys are hours, and the values are the integers in the same format. The values must be integers.\n\n\n-----Followup-----\n\nThe default input for this challenge is the standard input of the input of the previous two questions. So, you should input the default values of s and t as follows:\n\ns = \"00:02\"\nt = \"00:03\""
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:02\") == \"00:02\"\nassert solution(\"00:03\") == \"00:03\"\nassert solution(\"00:04\") == \"00:04\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"00:06\") == \"00:06\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"01:00\") == \"00:01\"\nassert solution(\"23:00\") == \"23:00\"\n\n\n\n-----Constraints-----\n\n1 <= t <= 60\n1 <= s <= 60\n\n\n-----Time Limit: 1 minute -----\n\"\"\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"01:00\") == \"00:00\"\nassert solution(\"01:00:00\") == \"00:00:00\"\nassert solution(\"00:00:00\") == \"00:00:00\"\nassert solution(\"01:00:00:00\") == \"00:00:00:00\"\nassert solution(\"00:00:00:00\") == \"00:00:00:00\"\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 1000\n1 \u2264 a_i \u2264 10^9\n1 \u2264 l, r \u2264 n\na_i!= 0\na_l < a_r\n\"\"\""
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\n\n\n-----Basic idea:\n1. For every input line, the number of elements in a subsegment is a permutation of the elements of a given subsegment.\n2. The subsegment is not necessarily of the same size as the main subsegment\n3. The main subsegment is at least in the same position as the subsegment.\n4. Subsegment is not necessarily in increasing order of its numbers.\n5. There are some subsegments whose arithmetic mean is $|a_1 + a_2+...+a_n|/2$\n6. The subsegment is a subsegment of the main subsegment\n\nTime: O(n!)\nSpace: O(n)\n'''"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n'''\n\n\n\nclass Solution:\n    def subsegmentSum(self, a: List[int]) -> str:\n        pass\n        # pass\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n1 <= n <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n3 6\n6 1 6 6 0\n\nInput 2:\n4\n5 4 5 4 5\n\nInput 3:\n5\n6 1 6 6 0\n\nInput 4:\n2\n5 6 0 0 0\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2 3 4 2 2\n\nOutput 1:\n2\n\n\n\nOutput 2:\n2\n\n\n\n-----Example-----\nInput\n3\n6 1 6 6 0\n\nOutput\n3\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 200\n1 <= n <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n4\n5 4 5 4 5\n\nInput 2:\n4\n5 4 5 4 5\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n3\n\n\n\n-----Example-----\nInput\n4\n6 2 1 2 2\n\nOutput\n3\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 200\n1 <= n <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n4\n5 4 5 4 5\n\nInput 2:\n4\n5 4 5 4 5\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n3\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 200\n1 <= n <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n3\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 200\n1 <= n <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n1\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 10^9\n\neg.\n\nInput 1:\n2\n5 3 4 2 2\n\nInput 2:\n3\n6 5 6 0 0\n\nInput 3:\n2\n5 6 0 0 0\n\nInput 4:\n2\n5 3 4 2 2\n\nInput 5:\n3\n6 5 6 0 0\n\nInput 6:\n4\n5 2 1 4 4\n\nInput 7:\n2\n5 6 0 0 0\n\nOutput 1:\n2\n\n\n\nOutput 2:\n2\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= a_i <= 10"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n'''\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test_case) == 8, 'Test case does not pass'\nassert solution(input) == 7, 'Test case does not pass'\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n-10^9 <= a[i] <= 10^9\n\n------Time complexity--------\nBest and worst case is O(n) for standard input.\n\n\"\"\""
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 2\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n0 <= a_i < 10^9\n\n------Basic------\n\nTime Limit: 40 ms\n\nMemory Limit: 2048 MB\n\n------Coding------\n\nTime Limit: 25 ms\n\nMemory Limit: 1320 MB\n\n------Submissions------\n\nSubmissions 2.11 MiB/step\n\"\"\""
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1, \"incorrect answer\"\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(\"3 3 0\") == \"4\"\nassert solution(\"3 2 1\") == \"3\"\nassert solution(\"3 3 0\") == \"3\"\nassert solution(\"3 4 2\") == \"3\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 2\") == \"1\"\nassert solution(\"3 2 1\") == \"2\"\nassert solution(\"3 3 1\") == \"3\"\nassert solution(\"3 3 2\") == \"4\"\nassert solution(\"2 3 2\") == \"4\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\n-----Constraints-----\n\n1 <= k <= n <= 200,000, 0 <= n, m <= 2000,000\n\n\n-----Time Limit 2 seconds.-----\nclass TimeLimit:\n    def __init__(self, seconds):\n        self.seconds = seconds\n    def __call__(self, *args, **kwargs):\n        pass\n\n@TimeLimit(seconds=1)\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 1\"), \"I'm stuck\"\nassert solution(\"3 3 3\"), \"I'm stuck\"\nassert solution(\"2 3 1\"), \"I'm stuck\"\nassert solution(\"4 3 1\"), \"I'm stuck\"\nassert solution(\"3 3 0\"), \"I'm stuck\""
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 0 0 0 0\") == \"3\"\n\nassert solution(\"1 1 0 0\") == \"1\"\nassert solution(\"2 1 1 0\") == \"3\"\nassert solution(\"2 2 2 2\") == \"5\"\nassert solution(\"3 0 0 0 0\") == \"12\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('aabb' == 'abab') == 2\nassert solution('abbaaabbabab') == 6\nassert solution('abababbabaa') == 7\nassert solution('abababbabbab') == 9\nassert solution('aaabbababab') == 17\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(4)\n\n-----Constraints-----\n\n0\n\n0 \u2264 stdin.length \u2264 100\nstdin.length \u2264 200\nstdin.length \u2264 200\nstdin.length \u2264 1000\nstdin.length \u2264 1000\nstdin.length \u2264 100\nstdin.length \u2264 100\nstdin.length \u2264 100\nstdin.length \u2264 100\nstdin.length \u2264 100\nstdin.length \u2264 100\nstdin.length\nstdin.length \u2264 100\nstdin.length \u2264 1\nstdin.length < m\nstdin.length < k\nstdin.length < n\nstdin.length < 100\nstdin.length < 100\n\n'''\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4') == '3'\n\n\n-----Constraints-----\n0 < stdin.length < 500\n1 <= n,m <= 100\n1 <= k <= 100\n1 <= stdin.length <= 1000\n1 <= Color1[i],Color2[i] <= 1000\nstdin contains unique input strings of two integers $n,m$ and $k$\n2 <= k <= 100\n\nInput is guaranteed to be the input of the function, as well as the expected output.\nInput will be printed on a single line.\n\nRestriction: There are at least $k$ unique colors in the input.\n\"\"\"\n\nfrom typing import List\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1 0') == '2'\nassert solution('1 0 0') == '3'\nassert solution('0 0 0') == '4'\nassert solution('1 0 1') == '5'\nassert solution('0 0 1') == '6'\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1\"\n\nInput\n3 2 1\n\nOutput\n3\n\nInput\n3 2 1\n\nOutput\n6\n\nExplanation\n\nWe can get one way for $k=0$, since $k=0$, the color of every brick is the same, and the second color is different from the color of the first brick. Thus, it is possible to color the bricks with a different color in each of the two ways.\n\nNote that the colors in every color's buckets are distinct.\n\nWe can get $k=1$, since there are only two ways to color the bricks that differ, since the same color is different from the color of the first brick.\n\"\"\"\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 'YES', '1'\nassert solution(2) == 'NO', '2'\nassert solution(3) == 'YES', '3'\nassert solution(4) == 'NO', '4'\nassert solution(5) == 'YES', '5'\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1234) == 'YES'\nassert solution(441231) == 'NO'"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"YES\""
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\""
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Quickly II-----"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n\nn = int(stdin.strip())\nmagic_number = '1' * n\nprint(bool(int(magic_number)))"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1234') == 'YES', \"n is not a magic number\"\nassert solution('1234') == 'NO', \"n is not a magic number\"\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"123456\") == \"YES\"\nassert solution(\"111111\") == \"NO\""
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"30000\") == \"YES\"\nassert solution(\"98000\") == \"YES\"\nassert solution(\"2341\") == \"NO\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 7 1 3 2 2\") == \"2\"\nassert solution(\"5 5 2 3 1 1\") == \"Poor Inna and pony!\"\nassert solution(\"5 5 2 3 1 1\") == \"Poor Inna and pony!\"\nassert solution(\"3 2\") == \"Poor Inna and pony!\"\nassert solution(\"4\") == \"Poor Inna and pony!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()), \"Poor Inna and pony!\"\nassert solution(input()), \"Poor Inna and pony!\"\nassert solution(input()), \"Poor Inna and pony!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 5 2 3 2 2\") == \"2\"\nassert solution(\"5 5 3 1 1 1\") == \"Poor Inna and pony!\"\nassert solution(\"5 5 3 1 1 1\") == \"Poor Inna and pony!\"\nassert solution(\"5 5 2 3 2 2\") == \"Poor Inna and pony!\"\nassert solution(\"5 5 2 3 2 2\") == \"Poor Inna and pony!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Poor Inna and pony!\"\nassert solution(stdin) == \"Poor Inna and pony!\"\nassert solution(stdin) == \"Poor Inna and pony!\"\nassert solution(stdin) == \"Poor Inna and pony!\"\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n1 <= stdin[i].length <= 10^6\n1 <= stdin[i][j] <= 10^6\n1 <= a, b \u2264 10^6\n\n-----Time Limit: O(N * M) where N is the number of rows and M is the number of columns. You can assume that the chessboard is square.\n\n\"\"\"\n\nclass Solution:\n    def minimumMoves(self, n, m, i, j, a, b):\n        return (abs(i - a) + abs(j - b))"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Poor Inna and pony!\"\n\n\n-----Advanced-----\n\nAs you can see, Dima and Inna can move the candy anywhere. That means you need to write a function to get the minimum number of moves needed to get the candy.\n\nHe had to do this by putting a candy anywhere in the chessboard to be a tile. He then can move it to any position as long as it is not blocked by another tile. \n\nThe task is to find the minimum number of moves required to get the candy. \n\nNotice that Dima and Inna can move the candy anywhere and can move the candy in any position. \n\nDima has to move the candy to a position in the middle of the chessboard. It should make a move in one square to the left and one square to the right. \n\nThe same idea applies to Inna.\n\nDima has to move the candy to a position in the middle of the chessboard. It should move the candy in the middle of the chessboard. It should make a move in one square to the left and one square to the right. \n\nInna has to move the candy to a position in the middle of the chessboard. It should move the candy in the middle of the chessboard. It should move the candy in the middle of the chessboard. It should make a move in one square to the left and one square to the right. \n\nDima and Inna can move the candy anywhere in the chessboard.\n\"\"\"\n\nimport sys"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"Poor Inna and pony!\nInput\n5 7 1 3 2 2\n\nOutput\n3\nInput\n5 5 2 3 1 1\nOutput\nPoor Inna and pony!\nExplanation\nInna and the pony can move the candy to position (1 + 2, 3 + 2) = (3, 5), from there they can move it to positions (3 - 2, 5 + 2) = (1, 7) and (3 + 2, 5 + 2) = (5, 7). These positions correspond to the corner squares of the chess board. Thus, the answer to the test sample equals two.\nExplanation\nInna and the pony can move the candy to position (1 + 2, 3 + 2) = (3, 5), from there they can move it to positions (3 - 2, 5 + 2) = (1, 7) and (3 + 2, 5 + 2) = (5, 7). These positions correspond to the corner squares of the chess board. Thus, the answer to the test sample equals two.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\n\nInput\n5 7 1 3 2 2\n\nOutput\n2\n\nInput\n5 5 2 3 1 1\nOutput\nPoor Inna and pony!\nExplanation\nInna and the pony can move the candy to position (1 + 2, 3 + 2) = (3, 5), from there they can move it to positions (3 - 2, 5 + 2) = (1, 7) and (3 + 2, 5 + 2) = (5, 7). These positions correspond to the corner squares of the chess board. Thus, the answer to the test sample equals two.\nExplanation\nInna and the pony can move the candy to position (1 + 2, 3 + 2) = (3, 5), from there they can move it to positions (3 - 2, 5 + 2) = (1, 7) and (3 + 2, 5 + 2) = (5, 7). These positions correspond to the corner squares of the chess board. Thus, the answer to the test sample equals two.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not get the candy on the board.\nInna and the pony can not"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'Poor Inna and pony!'\n\nInput\n5 5 2 3 2 2\n\nOutput\nPoor Inna and pony!\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 500\n1 <= n, m <= 10^6\n1 <= a, b <= 10^6\n0 <= i < n\n0 <= j < m\n\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Poor Inna and pony!\"\n\nSample Tests\nInput\n5 7 1 3 2 2\n\nOutput\n2\n\nInput\n5 5 2 3 1 1\n\nOutput\nPoor Inna and pony!\n\n'''\n\nclass Solution:\n    def candy(self, board: List[List[int]]) -> int:\n        if not board or not board[0]:\n            return 0\n        for i in range(len(board)):\n            for j in range(len(board[i])):\n                if board[i][j] == 2:\n                    board[i][j] = board[i][j] + 1\n                    board[i][j] = min(board[i][j], board[i][j - 1] + 1)\n        for i in range(1, len(board)):\n            for j in range(1, len(board[i])):\n                if board[i][j] == 2:\n                    board[i][j] = board[i][j] + 1\n                    board[i][j] = min(board[i][j], board[i - 1][j] + 1)\n        return sum(board[-1])\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Poor Inna and pony!','solution should print poor Inna and pony!'\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= m <= 10^6\n1 <= i <= n\n1 <= j <= m\na, b = 1 <= a <= 10^6\n\n--------\n\"\"\"\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"]) == \"5\"\nassert solution([\"a\", \"b\", \"c\"]) == \"1\"\nassert solution([\"aa\"]) == \"2\"\nassert solution([\"a\", \"a\"]) == \"1\"\nassert solution([\"aa\", \"ab\"]) == \"3\"\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"s = 8\")\nprint(\"Exception :\")\nprint(\"4\")\n\nprint(\"Output :\")\nprint(\"4\")\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(8, \"abcdefghijklmnopqrstuvwxyz\") == \"4\"\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n\"\"\"\nimport sys\n\nn = int(input())\nlst = list(map(str, input().split()))\nwhile n:\n    if n & 1:\n        lst[n-1] = 'a' + lst[n-1]\n    else:\n        lst[n-1] = 'b' + lst[n-1]\n    n >>= 1\nsys.stdout.write(str(len(lst)))\nsys.stdout.write(lst[0])\nfor i in range(1, n):\n    lst[i] = lst[i][1:] + lst[i][0]\nprint(lst[0])\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 4\n\n\"\"\""
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == '4'\nassert solution(s) == '3'\nassert solution(s) == '5'"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"bacabcab\") == 4\nassert solution(\"bacabcab\") == 3\nassert solution(\"bcda\") == 3\nassert solution(\"abc\") == 3\nassert solution(\"aaabb\") == 2\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(4, \"bcabcab\") == 3\nassert solution(4, \"bacabcab\") == 1\nassert solution(6, \"abbbbb\") == 5\nassert solution(6, \"abbbbb\") == 4\nassert solution(7, \"abbbbb\") == 3\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"bacabcab\") == \"4\"\nassert solution(\"babababababab\") == \"3\"\nassert solution(\"abcabcdababcd\") == \"5\"\nassert solution(\"ababababababab\") == \"3\"\nassert solution(\"abcabcdababcd\") == \"5\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12, \"solution fails\"\n\"\"\"\n\nfrom heapq import *"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 4 100 6 0 300\") == \"3 4 10\"\nassert solution(\"5 3 100 6 0 300\") == \"3 1 5\"\nassert solution(\"5 2 0 300 1 100\") == \"2 1 3\"\nassert solution(\"5 1 300 1 100\") == \"1 1 3\"\nassert solution(\"5 0 300 1 100\") == \"1 3 5\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"3 1 2 3 4\") == \"6\"\nassert solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 238 239 240 241 240 242 244 245 246 246 247 248 249 250 251 252 253 253 255 255 257 257 258 259 259 260 261 261 262 263 263 264 265 266 267 268 269 270 271 272 274 275 275 276 277 277 278 279 280 281 282 283 284 285 286 287 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 301 302 304 305 306 308 309 310 311 313 313 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 328 329 329 330 330 331 332 333 333 334 334 335 336 337 338 339 341 342 343 344 345 346 347 348 349 349 350 351 351 352 353 354 355 355 356 357 358 359 360 361 361 363 363 364 365 366 365 367 366 367 368 369 370 371 371 372 373 374 375 375 376 377 378 379 380 379 379 380 379 379 379 380 379 379 380 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379 379"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n\"\"\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4200'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 7\nassert solution(input().split()) == 7\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 4 0\") == \"7\"\nassert solution(\"5 4 3\") == \"7\"\nassert solution(\"5 4 1\") == \"7\"\nassert solution(\"5 4 2\") == \"7\""
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '7'\n\n'''\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"4 2 4\", \"3 4\", \"1 1\", \"1 1\"]) == \"7\"\nassert solution([\"5 4 0\", \"1 2\", \"3 1\", \"3 1\"]) == \"7\"\n\n\nassert solution([\"5 4 0\", \"1 2\", \"3 1\", \"3 1\"]) == \"7\"\nassert solution([\"5 4 0\", \"1 2\", \"3 1\", \"3 1\"]) == \"8\"\n\n\nassert solution([\"1 0\", \"0 1\", \"1 1\"]) == \"8\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"5\"\nassert solution(\"4 1\") == \"8\"\nassert solution(\"1 1\") == \"7\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '7'\n\nInput\n4 2 4\n3 4\n1 1\n\nOutput\n7\nassert solution(stdin) == '7'\n\n\"\"\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 2 4\") == \"8\"\nassert solution(\"5 4 0\") == \"7\"\nassert solution(\"5 4 0\") == \"7\"\nassert solution(\"5 4 0\") == \"7\"\nassert solution(\"1 1\") == \"7\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 4\\n5 0\\n6 1\\n8 0\\n7 2\") == \"8\"\nassert solution(\"1 2 4\\n5 0\\n6 1\\n7 2\") == \"7\"\nassert solution(\"1 2 4\\n5 0\\n6 1\\n7 2\") == \"7\"\nassert solution(\"1 2 4\\n5 0\\n6 1\\n7 2\") == \"7\"\nassert solution(\"1 2 4\\n5 0\\n6 1\\n7 2\") == \"7\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"4 2 4\"\n    \"3 4\"\n    \"1 1\"\n) == 7\n\nassert solution(\n    \"5 4 0\"\n    \"1 2\"\n    \"3 1\"\n) == 7\n\nassert solution(\n    \"5 4 0\"\n    \"1 2\"\n    \"3 1\"\n) == 7\n\nassert solution(\n    \"5 4 0\"\n    \"3 1\"\n    \"1 1\"\n) == 7"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 2 4\") == \"7\"\nassert solution(\"5 4 0\") == \"7\"\nassert solution(\"5 4 2\") == \"7\"\nassert solution(\"5 4 3\") == \"7\"\nassert solution(\"5 4 4\") == \"7\"\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n        \"5 5\",\n        \"1 1\"\n    ]) == 5\n\nassert solution(\n    [\n        \"2 3\",\n        \"3 6\"\n    ]) == 2\n\nassert solution(\n    [\n        \"6 6\",\n        \"1 1\"\n    ]) == 1\n\nassert solution(\n    [\n        \"10 6\",\n        \"1 1\"\n    ]) == 1\n\n'''\n\n\nclass Solution:\n    def solve(self, stdin, stdout):\n        x = int(stdin.strip())\n        n = int(stdin.strip())\n        table = [str(i) for i in range(1, n + 1)]\n        nums = [int(num) for num in stdin.strip().split()]\n\n        def search(x):\n            s = 0\n            for i in range(len(nums)):\n                s += nums[i] * (2 ** i)\n            s += x\n            if s < 0:\n                return -1\n            elif s == x:\n                return 1\n            elif s > x:\n                return 0\n        for i in range(1, n + 1):\n            if search(i) == 0:\n                table[i] = \"B\"\n            elif search(i) == 1:\n                table[i] = \"D\"\n            else:\n                table[i] = \"F\"\n        for i in range(1, n + 1):\n            if table[i] == \"D\":\n                print(table[i])\n                stdout.write(str(table[i]) + \" \")\n                table[i] = \"B\"\n            elif table[i] == \"B\":\n                print(table[i])\n                stdout.write(str(table[i]) + \" \")\n                table[i] = \"D\"\n            elif table[i] == \"F\":\n                print(table[i])\n                stdout.write(str(table[i]) + \" \")\n                table[i] = \"F\"\n            else:\n                pass\n        stdout.write(\"\\n\")\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin, n, x):\n        return self.count_occurrence(stdin, n, x)\n    \n    def count_occurrence(self, str1, n, x):\n        k = 0\n        for i in range(n):\n            for j in range(n):\n                if str1[i] == str1[j] and (i+j)%2 == 1:\n                    k += 1\n        return k\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 4 10 11 12'), '2'\nassert solution('5 8 8'), '1'\nassert solution('6'), '0'\nassert solution('3'), '0'\nassert solution('3 2 4 2'), '2'\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n7\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n\"\"\") == \"4\"\nassert solution(\"\"\"\n6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n6\n\"\"\") == \"0\"\nassert solution(\"\"\"\n7\n\"\"\") == \"1\"\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n\n------Time complexity analysis---------\n\n1) The time complexity of the solution is O(n log n).\n2) The time complexity of the code is O(n).\n3) The time complexity of the output is O(n).\n4) The time complexity of the if-else statement is O(1).\n\n\n------Auxiliary space analysis---------\n\n1) The time complexity is O(n).\n2) The number of cells is O(1).\n\n\n------Problems and other references----------\n\n[Image]\nhttps://www.hackerrank.com/challenges/counting-elements/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=arrays\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n\n---Sample test case 1---\n\nInput\n5\n\nOutput\n0\n\n----Sample test case 2---\n\nInput\n3\n\nOutput\n0\n\n----Sample test case 3---\n\nInput\n8\n\nOutput\n0\n\n----Sample test case 4---\n\nInput\n5\n\nOutput\n4\n\n----Sample test case 5---\n\nInput\n11\n\nOutput\n1\n\n----Sample test case 6---\n\nInput\n5\n\nOutput\n0\n\n----Sample test case 7---\n\nInput\n17\n\nOutput\n0\n\n----Sample test case 8---\n\nInput\n2\n\nOutput\n0\n\n----Sample test case 9---\n\nInput\n4\n\nOutput\n1\n\n----Sample test case 10---\n\nInput\n5\n\nOutput\n3\n\n----Sample test case 11---\n\nInput\n10\n\nOutput\n0\n\n----Sample test case 12---\n\nInput\n19\n\nOutput\n3\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= x <= 10^9\n\n------Solution-----\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 5"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin=\"\"\"\n    10 5\n    \"\"\".strip()) == \"2\"\n    \n    assert solution(\n    stdin=\"\"\"\n    1 3\n    \"\"\".strip()) == \"1\"\n    \n    assert solution(\n    stdin=\"\"\"\n    2 3\n    \"\"\".strip()) == \"0\"\n    \n    assert solution(\n    stdin=\"\"\"\n    5 2\n    \"\"\".strip()) == \"2\"\n    \n    assert solution(\n    stdin=\"\"\"\n    0 1\n    \"\"\".strip()) == \"0\"\n    \n    "
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, 3) == \"java\"\nassert solution(6, 6) == \"python\"\nassert solution(5, 2) == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"java\"\nassert solution(\"2\") == \"python\"\nassert solution(\"3\") == \"phphp\"\nassert solution(\"4\") == \"java\"\nassert solution(\"5\") == \"python\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(innokentiy) == \"java\"\nassert solution(innokentiy) == \"python\"\nassert solution(innokentiy) == \"phphp\"\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"java\"\nassert solution(stdin) == \"python\"\nassert solution(stdin) == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"java\") == \"phphp\"\nassert solution(\"python\") == \"java\"\nassert solution(\"java\") == \"java\"\nassert solution(\"java\") == \"java\"\nassert solution(\"java\") == \"java\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"java\"\nassert solution(\"2 3 4 5 6\") == \"phphp\"\nassert solution(\"1 1 2 2 1 2 2 2 2 2 2 2 2 2 2 1\") == \"python\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(instr) == \"java\"\nassert solution(instr) == \"python\"\nassert solution(instr) == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4 3') == 'java'\nassert solution('6 6') == 'python'\nassert solution('5 2') == 'phphp'\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"Innokentiy wants java\") == \"java\"\nassert solution(\"Innokentiy wants python\") == \"python\"\nassert solution(\"Innokentiy wants phphp\") == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"python\") == \"phphp\"\nassert solution(\"java\") == \"python\"\nassert solution(\"jargon\") == \"phphp\"\nassert solution(\"jargonn\") == \"phphp\"\n"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1, \"Error\"\n\nassert solution(stdin) == 1, \"Error\"\n\n\"\"\""
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n\n\n-----My solution-----\n\nstdin:\n2 2 4 5\n\nstdin:\n2 1 2 4\n\nstdin:\n2 2\n\nstdin:\n2 4\n\nstdin:\n2 1\n\nstdin:\n2 4\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1\n\nstdin:\n2 1"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(1)\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^9\n0 <= stdin[i] < 10^9\n\n------Subroutines------"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 200\n\n1 <= n <= 20\n\n2 <= stdin[i] <= 10^9\n\nThe second line contains n symbols \"L\" and \"R\". If the i-th symbol equals \"L\", then the i-th particle will move to the left, otherwise the i-th symbol equals \"R\" and the i-th particle will move to the right.\n\nThe third line contains the sequence of pairwise distinct even integers x_1, x_2,..., x_{n} (0 \u2264 x_{i} \u2264 10^9)\u00a0\u2014 the coordinates of particles in the order from the left to the right. It is guaranteed that the coordinates of particles are given in the increasing order.\n\nConstraints\n\nstdin.length <= 20\n\nstdin[i] <= 10^9\n\n2 <= stdin.length <= 1000\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n\nstdin[i]!= 'L'\n\nstdin[i]!= 'R'\n"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n\"\"\""
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n\n\n-----Constraints-----\n\n1 <= n <= 10^9\n1 <= stdin.length <= 10^5\nstdin and stdin[i] and stdin[i+1] contain non-negative integers.\n\n\n-----User input-----\n\nThe first line contains the positive integer n (1 \u2264 n \u2264 200 000)\u00a0\u2014 the number of particles. \n\nThe second line contains n symbols \"L\" and \"R\". If the i-th symbol equals \"L\", then the i-th particle will move to the left, otherwise the i-th symbol equals \"R\" and the i-th particle will move to the right.\n\nThe third line contains the sequence of pairwise distinct even integers x_1, x_2,..., x_{n} (0 \u2264 x_{i} \u2264 10^9)\u00a0\u2014 the coordinates of particles in the order from the left to the right. It is guaranteed that the coordinates of particles are given in the increasing order. \n\n\n-----Advanced-----\n\nNote: If there are no collisions, then the time of the first explosion will be at 1 and the time of the second explosion will be 1. \n\n\n-----Algorithm-----\n\n1. Create an array of particles with length as n.\n2. Create a 2D array of size n x n of integers [0, 10^9].\n3. For each particle, find the position of it and the smallest possible distance to it.\n4. For each particle, create a list of all possible x coordinates.\n5. From the list of possible x coordinates, find the smallest possible x coordinate of the smallest possible x coordinate.\n6. Create a 2D array of size n x n of integers [0, 10^9].\n7. For each particle, find the position of it and the smallest possible distance to it.\n8. For each particle, create a list of all possible y coordinates.\n9. From the list of possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n10. Create an array of n x n of integers [0, 10^9].\n11. For each particle, find the position of it and the smallest possible distance to it.\n12. For each particle, create a list of all possible x coordinates.\n13. For each particle, create a list of all possible y coordinates.\n14. From the list of all possible x coordinates, find the smallest possible x coordinate of the smallest possible x coordinate.\n15. Create a 2D array of size n x n of integers [0, 10^9].\n16. For each particle, find the position of it and the smallest possible distance to it.\n17. For each particle, create a list of all possible y coordinates.\n18. For each particle, create a list of all possible x coordinates.\n19. From the list of all possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n20. Create a 2D array of size n x n of integers [0, 10^9].\n21. For each particle, find the position of it and the smallest possible distance to it.\n22. For each particle, create a list of all possible x coordinates.\n23. For each particle, create a list of all possible y coordinates.\n24. From the list of all possible x coordinates, find the smallest possible x coordinate of the smallest possible x coordinate.\n25. Create a 2D array of size n x n of integers [0, 10^9].\n26. For each particle, find the position of it and the smallest possible distance to it.\n27. For each particle, create a list of all possible y coordinates.\n28. For each particle, create a list of all possible x coordinates.\n29. From the list of all possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n30. Create a 2D array of size n x n of integers [0, 10^9].\n31. For each particle, find the position of it and the smallest possible distance to it.\n32. For each particle, create a list of all possible x coordinates.\n33. For each particle, create a list of all possible y coordinates.\n34. From the list of all possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n35. Create a 2D array of size n x n of integers [0, 10^9].\n36. For each particle, find the position of it and the smallest possible distance to it.\n37. For each particle, create a list of all possible x coordinates.\n38. For each particle, create a list of all possible y coordinates.\n39. From the list of all possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n40. Create a 2D array of size n x n of integers [0, 10^9].\n41. For each particle, find the position of it and the smallest possible distance to it.\n42. For each particle, create a list of all possible x coordinates.\n43. For each particle, create a list of all possible y coordinates.\n44. From the list of all possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n45. Create a 2D array of size n x n of integers [0, 10^9].\n46. For each particle, find the position of it and the smallest possible distance to it.\n47. For each particle, create a list of all possible x coordinates.\n48. For each particle, create a list of all possible y coordinates.\n49. From the list of all possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n50. Create a 2D array of size n x n of integers [0, 10^9].\n51. For each particle, find the position of it and the smallest possible distance to it.\n52. For each particle, create a list of all possible x coordinates.\n53. For each particle, create a list of all possible y coordinates.\n54. From the list of all possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n55. Create a 2D array of size n x n of integers [0, 10^9].\n56. For each particle, find the position of it and the smallest possible distance to it.\n57. For each particle, create a list of all possible x coordinates.\n58. For each particle, create a list of all possible y coordinates.\n59. From the list of all possible y coordinates, find the smallest possible y coordinate of the smallest possible y coordinate.\n\n\nOutput\nOutputs a single line indicating the number of collisions"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3') == 1\n\n\n\n-----My Solution-----"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == -1\n\n\"\"\"\nimport math\n\nn = int(input())\n\nlist_std = [list(map(int, input().split())) for _ in range(n)]"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 1\nassert solution(4) == -1\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"56\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\n\nclass Solution:\n    def maxArea(self, height: List[int]) -> int:\n        def check_same_side(h1, h2, h3):\n            if (h1 > h2):\n                return False\n            if (h2 > h3):\n                return False\n            if (h1 > h2):\n                return True\n            if (h1 > h3):\n                return False\n            return False\n        \n        def check_same_side_rec(h1, h2, h3):\n            if (h1 > h2):\n                return False\n            if (h2 > h3):\n                return False\n            if (h1 > h2):\n                return True\n            if (h1 > h3):\n                return False\n            if (h1 == h2 and h2 == h3):\n                return True\n            return False\n        \n        for i in range(len(height) - 1):\n            for j in range(i + 1, len(height)):\n                h = min(height[i], height[j])\n                if (check_same_side(h, h, h)):\n                    continue\n                if (check_same_side_rec(h, h, h)):\n                    continue\n                if (check_same_side_rec(h, h, height[j])):\n                    continue\n                if (check_same_side_rec(h, height[j], height[j])):\n                    continue\n                if (check_same_side_rec(h, height[i], height[j])):\n                    continue\n                if (check_same_side_rec(height[i], height[j], height[j])):\n                    continue\n                if (check_same_side_rec(height[i], height[j], height[i])):\n                    continue\n                return h\n        return 0"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"\"\"\n    3 2\n    1 2\n    2 1\n    \"\"\") == \"5\"\n\n    #assert solution(\n    #    \"\"\"\n    #    3 2\n    #    1 2\n    #    \"\"\") == \"8\"\n    #assert solution(\n    #    \"\"\"\n    #    3 2\n    #    1 2\n    #    \"\"\") == \"1\"\n\n    #assert solution(\n    #    \"\"\"\n    #    3 2\n    #    1 2\n    #    \"\"\") == \"8\"\n    #assert solution(\n    #    \"\"\"\n    #    3 2\n    #    1 2\n    #    \"\"\") == \"0\"\n\n    "
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"56\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\nassert solution(stdin) == '56'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"4\"\n\nassert solution(input) == \"56\"\n\nassert solution(input) == \"0\"\n\n--------Examples-----\nInput\n4 10 10\n2 3\n1 1\n5 10\n9 11\n\nOutput\n0\n\nInput\n3 10 10\n6 6\n7 7\n20 5\n\nOutput\n56\n\nInput\n3 10 10\n6 6\n7 7\n20 5\n\nOutput\n56\n\n----Tags----\n\nacademy.math.ifelleg.com\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '56'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"56\"\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\nassert solution(stdin) == 6\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 2\n\nassert solution(input()) == 1\n\nassert solution(input()) == 3\n\nassert solution(input()) == 2\n\nassert solution(input()) == 2"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3\\n2\\n0\\n0\\n0\\n0') == '0\\n0'\nassert solution('3\\n2\\n2\\n2\\n2\\n1') == '1'\nassert solution('3\\n2\\n0\\n0\\n0\\n0\\n0') == '0'\nassert solution('3\\n2\\n0\\n0\\n0') == '0'\nassert solution('3\\n2\\n0\\n0') == '0'\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 1\"\n\n\n-----Solution-----\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0 3\"\nassert solution(stdin) == \"0 3\"\nassert solution(stdin) == \"0 3\"\nassert solution(stdin) == \"0 3\"\nassert solution(stdin) == \"0 3\"\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 2) == '0 0'\nassert solution(4, 0) == '0 0'\nassert solution(4, 1) == '0 0'\nassert solution(4, 2) == '0 0'\nassert solution(4, 3) == '0 0'\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 1\"\n\"\"\""
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"216\"\nassert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"8888888888\"\nassert solution(stdin) == \"88888888\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '387420489'\nassert solution(stdin) == '387420489'\nassert solution(stdin) == '387420489'\nassert solution(stdin) == '387420489'\nassert solution(stdin) == '387420489'\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(7) == 387420489\nassert solution(1000000000) == 7\nassert solution(9) == 13\nassert solution(10000) == 121629\nassert solution(9000000000000) == 13\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1000000000) == 387420489\n\nassert solution(7) == 216\n\nassert solution(999999999) == 387420489\n\nassert solution(1) == 7\n\nassert solution(3) == 3\n\n-----Basic Cases-----\nInput: 1\nOutput: 1\nInput: 2\nOutput: 3\nInput: 3\nOutput: 6\nInput: 5\nOutput: 12\nInput: 1\nOutput: 1\nInput: 7\nOutput: 35\nInput: 2\nOutput: 21\nInput: 7\nOutput: 31\nInput: 4\nOutput: 27\nInput: 3\nOutput: 21\nInput: 2\nOutput: 1\nInput: 8\nOutput: 8\nInput: 9\nOutput: 33\nInput: 6\nOutput: 18\nInput: 1\nOutput: 1\nInput: 4\nOutput: 5\nInput: 2\nOutput: 5\nInput: 3\nOutput: 7\nInput: 4\nOutput: 2\nInput: 7\nOutput: 15\nInput: 12\nOutput: 11\nInput: 10\nOutput: 12\nInput: 9\nOutput: 12\nInput: 4\nOutput: 7\nInput: 2\nOutput: 8\nInput: 3\nOutput: 2\nInput: 2\nOutput: 1\nInput: 6\nOutput: 0\nInput: 3\nOutput: 1\nInput: 4\nOutput: 1\nInput: 2\nOutput: 0\nInput: 4\nOutput: 1\nInput: 5\nOutput: 0\nInput: 1\nOutput: 0\nInput: 2\nOutput: 1\nInput: 1\nOutput: 0\n\n-----Advanced Cases-----\nInput: 15\nOutput: 25\nInput: 13\nOutput: 25\nInput: 9\nOutput: 12\nInput: 1\nOutput: 2\nInput: 7\nOutput: 7\nInput: 5\nOutput: 4\nInput: 3\nOutput: 3\nInput: 2\nOutput: 0\nInput: 7\nOutput: 1\nInput: 4\nOutput: 1\nInput: 3\nOutput: 1\nInput: 2\nOutput: 2\nInput: 1\nOutput: 0\nInput: 4\nOutput: 2\nInput: 7\nOutput: 4\nInput: 1\nOutput: 2\nInput: 2\nOutput: 2\nInput: 5\nOutput: 2\nInput: 1\nOutput: 3\nInput: 2\nOutput: 3\nInput: 3\nOutput: 1\nInput: 2\nOutput: 1\nInput: 2\nOutput: 0\nInput: 2\nInput: 1\nOutput: 0\nInput: 5\nOutput: 3\nInput: 2\nOutput: 2\nInput: 1\nOutput: 1\nInput: 5\nOutput: 1\nInput: 4\nOutput: 1\nInput: 3\nOutput: 1\nInput: 2\nOutput: 0\nInput: 1\nOutput: 0\nInput: 4\nOutput: 0\nInput: 2\nOutput: 0\nInput: 1\nOutput: 0\nInput: 3\nOutput: 0\nInput: 5\nOutput: 0\nInput: 2\nOutput: 0\nInput: 1\nOutput: 0\nInput: 4\nOutput: 0\nInput: 3\nOutput: 2\nInput: 4\nOutput: 3\nInput: 1\nOutput: 1\nInput: 1\nOutput: 1\nInput: 1\nOutput: 0\nInput: 1\nInput: 4\nOutput: 0\nInput: 2\nInput: 1\nOutput: 0\nInput: 2\nInput: 2\nInput: 2\nInput: 1\nOutput: 0\nInput: 1\nInput: 2\nInput: 3\nOutput: 0\nInput: 1\nInput: 1\nInput: 1\nOutput: 1\nInput: 2\nInput: 0\nInput: 2\nInput: 3\nInput: 1\nOutput: 1\nInput: 2\nInput: 0\nInput: 2\nInput: 2\nInput: 3\nOutput: 1\nInput: 2\nInput: 1\nInput: 2\nInput: 1\nInput: 1\nInput: 1\nOutput: 1\nInput: 1\nInput: 1\nOutput: 0\nInput: 1\nInput: 0\nInput: 1\nInput: 2\nOutput: 0\nInput: 2\nInput: 2\nInput: 3\nOutput: 1\nInput: 2\nInput: 1\nInput: 1\nInput: 1\nOutput: 1\nInput: 2\nInput: 1\nInput: 2\nInput: 2\nInput: 2\nInput: 1\nOutput: 0\nInput: 1\nInput: 2\nInput: 3\nOutput: 1\nInput: 1\nInput: 2\nInput: 0\nInput: 1\nInput: 2\nInput: 2\nInput: 2\nInput: 1\nOutput: 0\nInput: 1\nInput: 3\nOutput: 0\nInput: 1\nInput: 1\nInput: 2\nOutput: 0\nInput: 2\nInput: 2\nInput: 1\nOutput: 1\nInput: 3\nOutput: 1\nInput: 2\nInput: 0\nOutput: 1\nInput: 1\nInput: 0\nInput: 2\nInput: 1\nOutput: 0\nInput: 3\nInput: 3\nOutput: 3\nInput: 2\nInput: 0\nInput: 1\nOutput: 1\nInput: 0\nInput: 2\nOutput: 1\nInput: 1\nInput: 0\nOutput: 2\nInput: 0\nInput: 2\nInput: 1\nOutput: 0\nInput: 1\nInput: 2\nOutput: 1\nInput: 3\nOutput: 1\nInput: 3\nOutput: 2\nInput: 2\nInput: 2\nInput: 3\nOutput: 0\nInput: 1\nInput: 1\nInput: 1\nInput: 3\nOutput: 1\nInput: 3\nInput: 2\nOutput: 1\nInput: 1\nInput: 2\nOutput: 0\nInput: 1\nInput: 0\nInput: 1\nInput: 1\nOutput: 0\nInput: 1\nInput: 2\nOutput: 0\nInput: 0\nInput: 1\nOutput: 2\nInput: 1\nInput: 3\nOutput: 1\nInput: 2\nInput: 1\nOutput: 2\nInput: 2\nInput: 3\nOutput: 1\nInput: 1\nInput: 3\nOutput: 1\nInput: 2\nInput: 0\nInput: 0\nInput: 1\nOutput: 0\nInput: 2\nInput: 1\nInput: 3\nOutput: 0\nInput: 0\nInput: 2\nInput: 1\nOutput: 1\nInput: 1\nInput: 2\nOutput: 0\nInput: 0\nInput: 0\nInput: 2\nOutput: 2\nInput: 2\nInput: 3\nOutput: 1\nInput: 0\nInput: 1\nInput: 0\nOutput: 2\nInput: 0\nInput: 2\nOutput: 1\nInput: 0\nInput: 0\nInput: 1\nOutput: 1\nInput: 2\nOutput: 0\nInput: 0\nInput: 2\nInput: 2\nInput: 0\nOutput: 0\nInput: 2\nInput: 2\nOutput: 0\nInput: 1\nInput: 2\nOutput: 1\nInput: 0\nInput: 1\nOutput: 1\nInput: 0\nInput: 2\nOutput: 1\nInput: 1\nOutput: 0\nInput: 1\nInput: 1\nOutput: 1\nInput: 1\nOutput: 0\nInput: 0\nInput: 0\nOutput: 2\nInput: 2\nInput: 0\nInput: 1\nInput: 0\nOutput: 0\nInput: 0\nInput: 1\nOutput: 0\nInput: 1\nInput: 1\nInput: 2\nOutput: 0\nInput: 1\nInput: 1\nInput: 1\nOutput: 0\nInput: 1\nInput: 0\nInput: 1\nInput: 0\nOutput: 1\nInput: 0\nInput: 0\nInput: 0\nOutput: 1\nInput: 0\nInput: 1\nOutput: 0\nInput: 0\nInput: 2\nOutput: 1\nInput: 2\nInput: 0\nInput: 0\nInput: 1\nOutput: 0\nInput: 1\nInput: 1\nOutput: 0\nInput: 1\nInput: 0\nInput:"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"387420489\""
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"387420489\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"999999999\"\nassert solution(input()) == \"1000000000\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1000000000\") == \"387420489\"\nassert solution(\"2\") == \"7\"\nassert solution(\"7\") == \"7\"\nassert solution(\"999\") == \"999999999\"\nassert solution
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"216\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"9999999\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"9\") == \"387420489\"\nassert solution(\"9\") == \"387420489\"\nassert solution(\"9\") == \"387420489\"\nassert solution(\"9\") == \"387420489\"\nassert solution(\"9\") == \"387420489\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"3947758241\"\nassert solution(stdin) == \"4768157986\"\nassert solution(stdin) == \"774680982\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"5\"\nassert solution(inp) == \"5\"\n\n\n-----Do not edit the code below this line---\n\"\"\""
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n'''"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 1 1 5 1'), '1'\nassert solution('1 1 1 5 1'), '2'\nassert solution('1 1 1 5 1'), '2'\nassert solution('1 1 1 5 1'), '2'\nassert solution('1 1 1 5 1'), '2'\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 2 3 2 2') == '5'\nassert solution('2 2 3 2 3') == '4'"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\""
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"aabcaa\"]) == 1\nassert solution([\"aab\"]) == 2\nassert solution([\"aab\", \"ba\"]) == 1\nassert solution([\"aab\", \"aa\"]) == 0\nassert solution([\"aab\", \"aa\", \"ab\", \"ba\"]) == 2\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(aabcaa) == 1, \"It should be 1 as 1 operation\"\nassert solution(aabcaa) == 2, \"It should be 2 as 1 operation\"\nassert solution(aabcaa) == 4, \"It should be 4 as 2 operations\"\nassert solution(aabcaa) == 9, \"It should be 9 as 2 operations\"\nassert solution(aabcaa) == 0, \"It should be 0 as 1 operation\"\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(aabb) == 2\nassert solution(aabcaa) == 1\nassert solution(aacb) == 0\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(aabb) == 2, 'Expected 2'\nassert solution(aabcaa) == 1, 'Expected 1'\n\n\n\nExplanation\nThere are two operations: \n\ndelete leftmost point of each color\ndelete middle point from left\ndelete middle point from right\ndeleted points should be:\n\n[a, b, c]\n[aa, bb, cc]\nIf we delete the middle point of color a, then the middle point of color b will also be deleted.\n[a, aa, bb, cc]\n[aa, aa, aa, bb, cc]\n[aa, aa, aa, aa, bb, cc]\n[aa, aa, aa, aa, aa, bb, cc]\n[aa, aa, aa, aa, aa, aa, bb, cc]\n[aa, aa, aa, aa, aa, aa, aa, bb, cc]\n\n\n\nOutput\nOutput one line containing an integer - the number of operations which can be performed on the given set of points until there are no more points to delete.\n\n\"\"\"\nfrom collections import defaultdict\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aabcaa\") == 2\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def numPoints(self, points: List[List[int]]) -> int:\n        pass\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\nassert solution(\"aabcaa\") == 2\nassert solution(\"aabcaa\") == 2\nassert solution(\"aabcaa\") == 2\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\nstdin: str = \"1 1 1 1 1\") == \"1\"\nassert solution(stdin: str = \"5\") == \"4\"\nassert solution(\nstdin: str = \"3 3 3 1 3 2\") == \"1\"\nassert solution(\nstdin: str = \"3 3 3 3 4\") == \"2\"\nassert solution(\nstdin: str = \"6\") == \"1\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\n\n\"\"\"\n\n\nclass Solution:\n    def __init__(self, n: int):\n        self.n = n\n\n    def min_dist(self, a: list[int], n: int) -> int:\n        self.n = n\n        res = 0\n        for i in range(1, self.n + 1):\n            c = 1\n            for j in range(1, self.n + 1):\n                if a[i] == a[j]:\n                    c += 1\n                else:\n                    break\n            res = max(res, c)\n        return res\n\n    def min_dist_2(self, a: list[int], n: int) -> int:\n        self.n = n\n        res = 0\n        for i in range(1, self.n + 1):\n            c = 1\n            for j in range(1, self.n + 1):\n                if a[i] == a[j]:\n                    c += 1\n                else:\n                    break\n            res = max(res, c)\n        return res\n\n    def min_dist_3(self, a: list[int], n: int) -> int:\n        self.n = n\n        res = 0\n        for i in range(1, self.n + 1):\n            c = 0\n            for j in range(1, self.n + 1):\n                if a[i] == a[j]:\n                    c += 1\n                else:\n                    break\n            if c < 2:\n                res = max(res, c)\n        return res\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4, 1, 1, 1) == 4\nassert solution(5, 1, 3, 1) == 2\nassert solution(6, 1, 3, 1) == 1\nassert solution(4, 1, 2, 1) == 1\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 5 5 4 4 4\"\n) == \"2\"\nassert solution(\n    \"5 5 5 1 2 3 4 5\"\n) == \"1\"\nassert solution(\n    \"5 3 3 1 1 3\"\n) == \"3\"\nassert solution(\n    \"6 6 6 6 6 6 6\"\n) == \"3\"\nassert solution(\n    \"6 5 3 3 3 3\"\n) == \"3\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"solution() failed\"\nassert solution(stdin) == 2, \"solution() failed\"\n\n\"\"\""
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"1 3 2\"\nassert solution(\"6 2 3\") == \"2\"\nassert solution(\"6 5 3\") == \"2\"\nassert solution(\"6 6 4 3\") == \"1\"\nassert solution(\"1 1 1 1\") == \"0\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 3 2\") == \"2\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 3 3 1 3\") == \"1\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n\n\n-----Time complexity-----\n1. For the number of elements in array a, we initialize n to be 1. We update n to be 1 until we have some elements of a, then we initialize n to be 2. At each iteration we update the n of elements of a[i] to be the minimal possible of i, if it is pairwise distinct, then we update the n of elements of a[j] to be the minimal possible of j, and so on.\n2. After we have been working with all possible elements, we update the n of pairs of indices by following the principle described in the second part.\n3. For each subset of indices we update the n of pairs of indices by following the principle described in the third part.\n4. We update the n of pairs of indices by following the principle described in the fourth part.\n\n6. We add a spare point of 2 to the n, so n = 2, and we update the n of indices by following the principle described in the fifth part.\n\n\"\"\"\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '0'\nassert solution(2) == '1'\nassert solution(3) == '1'\nassert solution(4) == '1'\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\""
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(a) == '5'\nassert solution(b) == '3'\nassert solution(c) == '4'\nassert solution(d) == '2'\nassert solution(e) == '5'\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == solution(out)\n\nprint(solution(inp))\n\n'''"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['4', '3', '4', '3']) == 2, 'incorrect'\nassert solution(['4', '3', '4', '3']) == 4, 'incorrect'\nassert solution(['4', '3', '4', '3']) == 4, 'incorrect'\nassert solution(['4', '3', '4', '3']) == 4, 'incorrect'\nassert solution(['4', '3', '4', '3']) == 4, 'incorrect'\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\") == 1\nassert solution(\"3\") == 3\nassert solution(\"2\") == 1\nassert solution(\"1\") == 2\nassert solution(\"0\") == 2\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == 2\nassert solution(\"4 3\") == 3\nassert solution(\"5 4\") == 4\nassert solution(\"6 7\") == 5\n\n\nExplanation\n\nShiro is hungry, he can eat the pizza with minimum of straight cuts and cut it to 2 slices. She wants to cut the pizza with minimum of straight cuts, she will cut the slices to 2 pieces and he will eat the pizza with minimum of straight cuts.\n\nHe wants to cut the pizza with minimum of straight cuts.\n\n---Input---\n\n3\n\nOutput\n2\n\n---Output---\n\n2\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"5\") == 2\nassert solution(\"4\") == 5\nassert solution(\"4\") == 4\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2230) == 2230\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n\n-----Elements of a Coding Challenge-----\n\nInput\n\n10\n\nOutput\n\n2230\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n\n-----Examples-----\nInput\n\n10\n\nOutput\n\n2230\n\n\"\"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2230\n\nassert solution(stdin) == 22\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == -10000\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2230\n\nassert solution(stdin) == 2230\n\nassert solution(stdin) == 2230\n\nassert solution(stdin) == 2230\n\nassert solution(stdin) == 2230"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2230\") == 2230\nassert solution(\"-10\") == -10\nassert solution(\"-100003\") == 0\n\nprint(\"The maximum state of the bank account that Ilya can get is\", max(map(int, str(max(map(int, stdin.split()))))))\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('-10') == 0\nassert solution('-10000') == -10000\nassert solution('-0') == 0\nassert solution('-123') == -12\nassert solution('123') == -123\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"(1 2)\"\n) == 2230\n\nassert solution(\n    \"123\"\n) == 2230\n\nassert solution(\n    \"100003\"\n) == 2230\n\nassert solution(\n    \"13\"\n) == 2230\n\nassert solution(\n    \"(1)\"\n) == 2230"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2230'\nassert solution(stdin) == '-100003'\nassert solution(stdin) == '-10000'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2230\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10000\"\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2230\n\nassert solution(\"-123\") == -123\n\nassert solution(\"-00001\") == 0\n\nassert solution(\"-1234567890\") == -1234567890\n\n\"\"\"\n\nclass Solution:\n    def maxBalance(self, n: int) -> int:\n        lst = []\n        if n < 0:\n            return 0\n        if n == 0:\n            return 0\n        for i in range(1, n + 1):\n            if self.isBalanced(i):\n                lst.append(i)\n        return max(lst)\n\n    def isBalanced(self, num: int) -> bool:\n        if num == 0:\n            return False\n        if num == 1:\n            return True\n        if self.isBalanced(num // 2):\n            return True\n        if self.isBalanced(3 * num + 1):\n            return True\n        if self.isBalanced(5 * num + 2):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input() == '2230') == 2230\nassert solution(input() == '-10') == -10\nassert solution(input() == '-100003') == -100003\nassert solution(input() == '-10000') == 0\nassert solution(input() == '0') == 0\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'cw'\nassert solution(stdin) == 'undefined'\nassert solution(stdin) == 'ccw'\n\"\"\""
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"cw\"\nassert solution(\"^ >\") == \"undefined\"\nassert solution(\"< ^ >\") == \"undefined\"\nassert solution(\"v v\") == \"ccw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ >\") == \"ccw\"\nassert solution(\"< ^ <\") == \"cw\"\nassert solution(\"> ^\") == \"cw\"\nassert solution(\"< ^ >\") == \"cw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1 1 3 4 5 6 7 8 9 10 11') == 'cw'\nassert solution('1 1 1 1') == 'undefined'\nassert solution('2 1 1 3 4 5 6 7 8 9 10 11') == 'ccw'\nassert solution('3 4 5 6 7 8 9 10 11 12 13 14 15') == 'undefined'\nassert solution('1') == 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('> v') == 'cw'\nassert solution('< v') == 'ccw'\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"< ^ v 6\") == \"ccw\"\nassert solution(\"< ^ v 6\") == \"undefined\"\nassert solution(\"< ^ v 6\") == \"cw\"\nassert solution(\"< ^ v 6\") == \"undefined\"\nassert solution(\"< ^ v 6\") == \"ccw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"< ^\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"v >\") == \"undefined\"\nassert solution(\"v >\") == \"undefined\"\nassert solution(\"v >\") == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ >\") == \"cw\"\nassert solution(\"< ^\") == \"ccw\"\nassert solution(\"^ v\") == \"cw\"\nassert solution(\"< ^\") == \"cw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'cw'\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"v> ^\"), \"No direction\"\nassert solution(\"v> ^\"), \"Clockwise\"\nassert solution(\"< ^\"), \"Counter-clockwise\"\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 4, 'Wrong output'\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"L.R..L..\") == 0\nassert solution(\"R....R\") == 4\nassert solution(\"R...LR..L..\") == 0\nassert solution(\"LR..L..R..\") == 4\nassert solution(\"R..L..R..L..\") == 0\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"R\", \"L\", \"L\"]) == 2\nassert solution([\"R\", \"R\", \"R\", \"R\", \"R\"]) == 1\nassert solution([\"R\", \"R\", \"R\", \"R\", \"R\", \"R\"]) == 2\nassert solution([\"L\", \"L\", \"R\", \"R\", \"R\", \"R\"]) == 4\nassert solution([\"R\", \"R\", \"R\", \"R\", \"R\", \"R\"]) == 3\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"..R..\") == 2\nassert solution(\".R..\") == 3\nassert solution(\"..R..L.\") == 1\nassert solution(\"..R..L..\") == 3\nassert solution(\"R..L..\") == 2\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(4)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('...L.R..R..') == '0'\nassert solution('...L.R.L..L..') == '1'\nassert solution('...LR..L..') == '4'\nassert solution('...LR..R..L..') == '1'\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"solution is not defined for stdin\"\n\nprint(\"solution test passed\")\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"3 3\"\nassert solution(\"3 3 2 3\") == \"3 3 2 3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"3 1 2 4\"\n\"\"\""
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 2 1' or solution(readAll(stdin)) == '3 1 2 3 4' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 2 1' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 1 2 3 4' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 1 2 3 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 4' or solution(readAll(stdin)) == '3 3 1 2' or solution(readAll(stdin)) == '3 1 2 3' or solution(readAll(stdin)) == '3 3 1 2' or solution(read"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == -1\n\nassert solution(input) == [-1]\n\nassert solution(input) == [-1, -1]\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3 1 2 4'\n\n\n-----Example-----\nInput\n4 5\n2 3 1 4 4\n\nOutput\n3 1 2 4 \n\nInput\n3 3\n3 1 2\n\nOutput\n-1\n\"\"\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 3 1 2\"\nassert solution(stdin) == \"3 3 1 2\"\nassert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 3 1 2\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3 1 2 4'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 3 1\"\nassert solution(stdin) == \"3 3 2\"\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input=\n    str(stdin)\n) == str(-1)\nassert solution(\n    input=\n    str(stdin)\n) == str(-1)\nassert solution(\n    input=\n    str(stdin)\n) == str(-1)\nassert solution(\n    input=\n    str(stdin)\n) == str(-1)\nassert solution(\n    input=\n    str(stdin)\n) == str(-1)\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution) == '3 1 2 4'\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3104\"\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 9190\nassert solution(input()) == 3104"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2000000000000000\""
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1990) == 9190\nassert solution(300) == 300\nassert solution(1034) == 3104\nassert solution(9090000078001234) == 9907000008001234\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '9907000008001234'\nassert solution(stdin) == '9190'\nassert solution(stdin) == '9190'\nassert solution(stdin) == '3104'\nassert solution(stdin) == '3000'\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1990 1) == 990, 'not a valid solution'\nassert solution(300 0) == 300, 'not a valid solution'\nassert solution(1034 2) == 1034, 'not a valid solution'\nassert solution(9090000078001234) == 9907000008001234, 'not a valid solution'"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 3104\n\"\"\""
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '200002008001234'\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3104, 'Incorrect answer'\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 9190\nassert solution(input()) == 3104\n\"\"\"\n\nimport sys"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4q3') == '5'\nassert solution('5') == '5'\nassert solution('4q3-') == '5'\nassert solution('3d6-') == '-4'\nassert solution('3d1-') == '-4'\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"1 2\"\nassert solution(\"7 4\") == \"7 6\"\nassert solution(\"5 4 4 4 4\") == \"5 3\"\nassert solution(\"3 2 2 3 4 1 2\") == \"5\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"836 624 412 200\") == 12\nassert solution(\"1 334 667 1000\") == 1333\nassert solution(\"\") == 42"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, \"4\") == 4, 'incorrect input'\nassert solution(2, \"4\") == 7, 'incorrect input'\nassert solution(5, \"2\") == 14, 'incorrect input'\nassert solution(2, \"2\") == 5, 'incorrect input'\nassert solution(4, \"3\") == 10, 'incorrect input'\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-12'\nassert solution(stdin) == '-1333'\nassert solution(stdin) == '-12'\nassert solution(stdin) == '-12'\nassert solution(stdin) == '-12'\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '42'\n\n\n-----Sample Input-----\n\nsample input\n836 624 412 200\n\nsample output\n42\n\n-----Sample Output-----\n\n>>> 0\n>>> 0\n>>> 42\n>>> 42\n>>> 42\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\", \"8\", \"7\", \"6\", \"4\", \"3\", \"2\", \"1\"]) == \"42\"\nassert solution([\"4\", \"3\", \"2\", \"1\", \"5\"]) == \"42\"\nassert solution([\"5\", \"7\", \"5\", \"2\"]) == \"42\"\nassert solution([\"5\", \"6\", \"7\", \"7\", \"7\", \"4\"]) == \"42\"\nassert solution([\"10\", \"50\", \"75\", \"10\", \"40\", \"20\"]) == \"42\"\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"42\" or solution(stdin) == \"42\" or solution(stdin) == \"42\" or solution(stdin) == \"42\" or solution(stdin) == \"42\" or solution(stdin) == \"42\"\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-12'"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"7\n836 624 412 200\n1 334 667 1000\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n\"\"\") == \"1\"\nassert solution(\"\"\"\n\"\"\") == \"1\"\nassert solution(\"\"\"\n1\n2\n\"\"\") == \"3\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\n\"\"\""
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == '4'\nassert solution('3') == '4'\nassert solution('3 1') == '4'\nassert solution('3 1 1') == '4'\nassert solution('3 1 2') == '4'\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().strip())\n\ncolors = []\nfor _ in range(n):\n    c = stdin.readline().strip().split()\n    c = [c[0], c[1], c[2], c[3], c[4]]\n    colors.append(c)\n\ncolors.sort(key=lambda x: [x[0], x[1]])"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 4\nassert solution(input()) == 2\nassert solution(input()) == 1\nassert solution(input()) == 4\nassert solution(input()) == 2\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 4\nassert solution(4) == 1\nassert solution(5) == 4\nassert solution(7) == 4\nassert solution(12) == 4\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4\n\n\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 3 9') == '1 2 R'\nassert solution('3 3 1') == '1 2 L'\nassert solution('1 3 2') == '1 2 L'\nassert solution('2 4 4') == '1 2 R'\nassert solution('3 3 24') == '1 2 R'\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4 3 9') == '2 2 L'\nassert solution('4 3 24') == '4 3 R'\nassert solution('2 4 4') == '1 2 R'"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"L\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"L\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"1 2 R\"\nassert solution(inp) == \"1 2 L\"\nassert solution(inp) == \"1 2\"\nassert solution(inp) == \"1 3\"\nassert solution(inp) == \"2 2\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"2\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"3\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"4\", \"4\", \"4\", \"4\", \"4\", \"4\"]) == \"4\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4 3\") == \"4 2 R\"\nassert solution(\"1 4 2\") == \"1 2 R\"\nassert solution(\"2 4 4\") == \"2 2 R\"\nassert solution(\"2 4 3\") == \"2 2 L\"\nassert solution(\"2 4 5\") == \"1 1 L\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"R\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"R\"\nassert solution(input()) == \"L\"\nassert solution(input()) == \"S\"\nassert solution(input()) == \"L\"\nassert solution(input()) == \"R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"R\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'L'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'L'\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"B\"\nassert solution(\"2\") == \"B\"\nassert solution(\"3\") == \"B\"\nassert solution(\"4\") == \"B\"\nassert solution(\"5\") == \"B\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'GRG'\nassert solution(stdin) == 'BR'\nassert solution(stdin) == 'G'\nassert solution(stdin) == 'B'\nassert solution(stdin) == 'G'\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"G\"\n\"\"\""
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"GGRR\"\n\n\"\"\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"BGRBBRBBR\"\nassert solution(stdin) == \"GRGBGBG\"\nassert solution(stdin) == \"GRGBGBG\"\nassert solution(stdin) == \"GRGGRGRGR\"\nassert solution(stdin) == \"BRBRBRBRBR\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"RFBGB\") == \"GRG\"\nassert solution(\"GGGBR\") == \"BR\"\nassert solution(\"RFBG\") == \"B\"\nassert solution(\"RGGBB\") == \"G\"\nassert solution(\"RGBBBR\") == \"BR\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3,[\"R\", \"G\", \"B\"]) == \"B\"\nassert solution(5,[\"BBBBB\", \"RRBBB\", \"RRRBBB\", \"RRRRBBB\", \"RRRRRBBB\"]) == \"BR\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('RGBGBRR') == 'BBBBB'\nassert solution('RBGB') == 'GRGGRGRGRG'\nassert solution('RBRRRR') == 'BR'\nassert solution('RGRGBBGRR') == 'BGR'\nassert solution('RRRBRR') == 'GR'\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == \"RBRGGBB\"\nassert solution(2) == \"GRRGRR\"\nassert solution(3) == \"BBB\"\nassert solution(4) == \"BB\"\nassert solution(5) == \"GR\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"G\"\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n-----Constraints-----\n1 <= n <= 30\n1 <= u_{i}, v_{i} <= n\n1 <= x_{i}, y_{i} <= 10^18\n\n------IMPLEMENTATION-----\nimport math"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"YES\"\n\"\"\""
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\n\n-----Sample 1-----\n\nInput\n5\n1 2\n1 3\n2 4\n3 5\nOutput\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\nInput\n3\n1 2\n2 3\n3 4\nOutput\nNO\n\nInput\n3\n1 2\n2 3\n3 4\nOutput\nNO\n\nInput\n3\n1 2\n1 3\n2 4\nOutput\nNO\n\n-----Note-----\n\nIn the first sample one of the possible positions of tree is: [Image]\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 4) == \"YES\"\nassert solution(5, 3) == \"NO\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= u_i, v_i < n\n-10^18 < u_i, v_i < 10^18\n\n\"\"\""
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aabbabda\") == \"YES\"\nassert solution(\"aabbabddcdda\") == \"YES\"\nassert solution(\"abcdeff\") == \"NO\"\nassert solution(\"abcdeff\") == \"NO\"\nassert solution(\"abcdeff\") == \"NO\"\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\", \"The code failed\"\nassert solution(stdin) == \"NO\", \"The code failed\"\n\n-----Time complexity-----\n\nO(n) for n = number of vertices in the tree and O(log n) for the log of n\n\nO(n) for n = number of edges in the tree and O(log n) for the log of n\n\nO(n) for n = number of vertices in the tree and O(log n) for the log of n\n\n\n-----Space Complexity-----\n\nO(1)\n\n-------Solutions---------------------\n\nInput:\n\n2\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nOutput:\n\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n\nExplanation:\n\nStandard input format:\n\nThe first line contains an integer n, the number of vertices of the graph.\n\nThe next n lines contains an integer u_{i}, v_{i} where u_{i} and v_{i} are integers in range [1, n].\n\nThe next n lines contains n integers x_{i}, y_{i} where x_{i} and y_{i} are integers in range [1, 10^18]\n\nInput\n\n6\n1 2\n2 3\n2 4\n2 5\n2 6\n3 6\n3 7\nOutput:\n\nNO\n\nInput\n\n4\n1 2\n2 3\n2 4\n2 5\n2 6\n3 7\nOutput:\n\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n\nExplanation:\n\nStandard input format:\n\nThe first line contains an integer n, the number of vertices of the graph.\n\nThe next n lines contains an integer u_{i}, v_{i} where u_{i} and v_{i} are integers in range [1, n].\n\nThe next n lines contains n integers x_{i}, y_{i} where x_{i} and y_{i} are integers in range [1, 10^18]\n\nInput:\n\n1\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nOutput:\n\nNO\n\nInput:\n\n2\n1 2\n2 3\n2 4\n2 5\n3 6\n3 7\nOutput:\n\nNO\n\nInput:\n\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nOutput:\n\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n\nExplanation:\n\nStandard input format:\n\nThe first line contains an integer n, the number of vertices of the graph.\n\nThe next n lines contains an integer u_{i}, v_{i} where u_{i} and v_{i} are integers in range [1, n].\n\nThe next n lines contains n integers x_{i}, y_{i} where x_{i} and y_{i} are integers in range [1, 10^18]\n\nInput:\n\n4\n1 2\n1 3\n2 4\n2 5\n3 6\n3 7\nOutput:\n\nNO\n\nInput:\n\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\nOutput:\n\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n\nExplanation:\n\nStandard input format:\n\nThe first line contains an integer n, the number of vertices of the graph.\n\nThe next n lines contains an integer u_{i}, v_{i} where u_{i} and v_{i} are integers in range [1, n].\n\nThe next n lines contains n integers x_{i}, y_{i} where x_{i} and y_{i} are integers in range [1, 10^18]\n\nInput:\n\n1 2\n1 3\n1 4\n2 5\n3 6\n3 7\nOutput:\n\nNO\n\nInput:\n\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\nOutput:\n\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n-1 1\n0 2\n1 2\n1 -1\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\nassert solution(\"2 5\") == \"NO\"\nassert solution(\"3 6\") == \"YES\"\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 210 211 212 213 214 215 216 217 218 219 220 220 221 221 222 223 224 225 226 227 228 229 230 231 231 232 233 233 234 235 236 237 237 238 239 240 241 242 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Brute Force-----"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\n\nprint(\"NO\")\n\nprint(\"--- %s seconds ---\" % (time.time() - start_time))"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 3') == '7'\nassert solution('1 5') == '105'\nassert solution('1 8') == '761141116'\nassert solution('1 99999999999') == '761141116'\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\",\"3\",\"5\",\"7\",\"9\",\"6\",\"8\",\"10\",\"12\",\"14\",\"16\",\"18\"]) == \"105\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\"]) == \"7\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\"]) == \"28\"\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(105)\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 3\",\n    \"5 14\") == 7\n\nassert solution(\n    \"5 14\",\n    \"88005553535 99999999999\") == 105\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(sys.stdin.readline().split()) == \"761141116\"\nassert solution(sys.stdin.readline().split()) == \"95329832735\"\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '105'\nassert solution(inp) == '761141116'\nassert solution(inp) == '7'\nassert solution(inp) == '88005553535'\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '77'\nassert solution(stdin) == '95'\nassert solution(stdin) == '118'\nassert solution(stdin) == '767'\nassert solution(stdin) == '989'\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"5 14\") == \"105\"\nassert solution(\"88005553535 99999999999\") == \"761141116\"\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"]) == \"761141116\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"]) == \"71114\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"]) == \"95251914\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"]) == \"19075\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"]) == \"547\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"Yes\"\n\n\nTime: O(n)\n\"\"\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"01100010110\") == \"Yes\"\nassert solution(\"01100010110\") == \"No\"\nassert solution(\"001001101000\") == \"No\"\nassert solution(\"0010111011101100\") == \"No\"\nassert solution(\"0010111011101100\") == \"Yes\""
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"No\"\n\"\"\""
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"1 1 0 0 100 1000\") == \"No\"\nassert solution(\"1 1 1 0\") == \"No\"\nassert solution(\"1 1 0 1 0 0\") == \"Yes\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"0 1 1 1 1 0\n0 0 0 0 1000 1000\n0 1 0 1 1000 1000\n0 0 1 0 1000 1000\n1 0 1 0 1000 1000\n0 1 0 1 1000 1000\n0 1 1 1 1000 1000\n\"\"\") == \"Yes\"\nassert solution(\"\"\"1 1 1 1 1 0\n0 0 0 0 1000 1000\n0 1 0 1 1000 1000\n1 0 1 0 1000 1000\n0 0 1 0 1000 1000\n0 1 0 1 1000 1000\n1 0 1 0 1000 1000\n1 0 1 0 1000 1000\n1 1 1 1 1000 1000\n0 0 0 0 1000 1000\n\"\"\") == \"No\""
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 50\n1 <= a_i, b_i, c_i <= 10^9\n0 <= stdin[i] <= 10^9\n0 <= angle < 90\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n\n-----Tags-----\nMath\n\n\n-----Subtags-----\nProgramming\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\nExample 1:\n\nInput\n\n2 2\n1 1 2\n\nOutput\n\n2\nExplanation\n\nPolycarp has sequence length three, and has a common ratio k = 3.\nThe subsequences of length three are (1, 2) and (3, 2), whose common ratio k = 3, so they form a geometric progression with common ratio 3.\n\nThe subsequence can be chosen, so we return 4.\n\"\"\""
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '6'\nassert solution(stdin) == '16'\nassert solution(stdin) == '64'\nassert solution(stdin) == '123'\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 20\n\n\n-----Side Effect-----\n\nTime complexity: O(n log k)\nSpace Complexity: O(n)\n\nclass Solution:\n    def polycarp(self, n: int, k: int) -> str:\n        if n == 1:\n            return str(k)\n        if n == 2:\n            return str(k ** 2)\n        if n == 3:\n            return str(k ** 2 + k)\n        if n == 4:\n            return str(k ** 3)\n\n        # \u51fa\u73b0\u5c11\u4e8e\u7b49\u4e8e3\u7684\u60c5\u51b5\uff0c\u7b49\u4e8e\u53ef\u80fd\u662f\u4e00\u4e2a\u63a8\u51fa\u6765\u7684\n        for i in range(2, k + 1):\n            if i % 2 == 1:\n                continue\n            # \u4ecei-1\u81f3i-2\u4e2a\u63a8\u51fa\u6765\uff0c\u4e24\u4e2a\u53d6\u4e00\u534a\n            divisors = self.polycarp(n - 1, k - i)\n            for j in range(1, i + 1):\n                divisors += str(i - j) + \" \"\n            divisors += str(n - i)\n            divisors += str(i)\n            divisors += str(n - 1)\n            divisors += \" \"\n            divisors += str(i)\n            divisors += str(n - 1)\n            divisors += str(n - 2)\n            divisors += \" \"\n            divisors += str(n - 3)\n            divisors += str(n - 2)\n            divisors += \" \"\n            divisors += str(n - 1)\n            divisors += \" \"\n            divisors += str(n - 2)\n            divisors += \" \"\n            divisors += str(n - 3)\n            divisors += \" \"\n            divisors += str(n - 4)\n            divisors += str(n - 3)\n            divisors += \" \"\n            divisors += str(n - 4)\n            divisors += \" \"\n            divisors += str(n - 5)\n            divisors += \" \"\n            divisors += str(n - 4)\n            divisors += \" \"\n            divisors += str(n - 5)\n            divisors += \" \"\n            divisors += str(n - 5)\n            divisors += \" \"\n            divisors += str(n - 6)\n            divisors += \" \"\n            divisors += str(n - 5)\n            divisors += \" \"\n            divisors += str(n - 6)\n            divisors += \" \"\n            divisors += str(n - 6)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 6)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            divisors += \" \"\n            divisors += str(n - 7)\n            "
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input() for _ in range(input())) == \"4\"\n\"\"\""
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1,1,4) == 4\nassert solution(3,1,4) == 1\nassert solution(3,3,2) == 4\nassert solution(3,2,1) == 1\nassert solution(7,3,2) == 3\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10 3') == '3'\nassert solution('4 1') == '1'\nassert solution('10 3') == '4'\nassert solution('10 3') == '3'\nassert solution('10 3') == '3'\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4, \"Your solution does not work.\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 k \u2264 1\u00b710^6\n1 \u2264 a_i \u2264 100\n\n\n-----Time complexity-----\n\nO(n) to compute n+1 pairs of integers.\n\nO(n*k) to calculate n+1 pairs of numbers.\n\nO(n) to sort all numbers.\n\nO(n) to store the results.\n\nO(n) to calculate the elements of the sequence.\n\nO(n) to store the indexes of the elements of the sequence.\n\nO(n) to calculate the probability of generating the number of such subsequences.\n\nO(n) to calculate the length of a subsequence of length three.\n\nO(n) to calculate the length of a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n) to calculate the number of sequences in a subsequence of length three.\n\nO(n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 1 1\") == 5\nassert solution(\"2 3 3\") == 26\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"27\"\n\"\"\""
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 2') == '27'\nassert solution('0 0') == '0'\nassert solution('0 1') == '0'\nassert solution('3 2') == '27'\nassert solution('5 5') == '27'\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 1\") == 27\nassert solution(\"3 0 3\") == 26\nassert solution(\"4 5\") == 24\nassert solution(\"6 1\") == 25\nassert solution(\"7 11\") == 25\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 27\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 27, \"Output should be 27\"\nassert solution(stdin) == \"27\", \"Output should be '27'\"\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 2, 1) == 27\nassert solution(3, 3, 1) == 26\nassert solution(3, 3, 3) == 26\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input().strip()) == 27, 'Expected 27 but got:'+ str(solution(input().strip()))\nassert solution(input().strip()) == 26, 'Expected 26 but got:'+ str(solution(input().strip()))\n\"\"\""
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 27, 'Invalid result'\n\n### More examples of solution\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\nassert solution(stdin) == \"DLLLL\"\nassert solution(stdin) == \"DDLL\"\nassert solution(stdin) == \"DLLL\"\nassert solution(stdin) == \"DLLLRR\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'IMPOSSIBLE'\nassert solution(stdin) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 'IMPOSSIBLE'\nassert solution(2) == 'DLRU'\nassert solution(3) == 'L'\nassert solution(4) == 'U'\nassert solution(5) == 'D'\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n\nassert solution(\"DDLRU\") == \"DLDDLLLRRRUURU\"\n\nassert solution(\"XXXX\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'IMPOSSIBLE'\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"..\") == \"IMPOSSIBLE\"\nassert solution(\"X.\") == \"IMPOSSIBLE\"\nassert solution(\"..X\") == \"IMPOSSIBLE\"\nassert solution(\"...X\") == \"IMPOSSIBLE\"\nassert solution(\"*..\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"IMPOSSIBLE\"\nassert solution(input) == \"DLDDLLLRRRUURU\"\nassert solution(input) == \"IMPOSSIBLE\"\nassert solution(input) == \"DLLRULRULU\"\nassert solution(input) == \"DLLRULRULU\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\n        [\".\", \".\", \".\"],\n        [\".\", \".\", \".\"],\n        [\".\", \".\", \".\"]\n    ]) == \"RLUDDLLRLUR\"\n\nassert solution(\n    [\n        [\".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"]\n    ]) == \"IMPOSSIBLE\"\n\nassert solution(\n    [\n        [\".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"]\n    ]) == \"IMPOSSIBLE\"\n\nassert solution(\n    [\n        [\".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\"]\n    ]) == \"IMPOSSIBLE\"\n\nassert solution(\n    [\n        [\".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\"],\n        [\".\", \".\", \".\", \".\", \".\", \".\"]\n    ]) == \"IMPOSSIBLE\""
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 'DLRU', \"incorrect output\"\nassert solution(input) == 'IMPOSSIBLE', \"incorrect output\"\nassert solution(input) == '', \"incorrect output\"\nassert solution(input) == '', \"incorrect output\"\n\"\"\"\nn, m, k = map(int, input().split())\npuzzle = list(input().split(' '))"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n\nassert solution(stdin) == \"DLDDLLLRRRUURU\"\n\n\n-----Advanced-----\n\nInstead of implementing the solution using a dictionary, you can implement your own lexicographically minimal way to solve a robot's cycle in a Pythonic way. \n\nConsider that the first line contains one integer n, m and k (1 \u2264 n, m \u2264 1000, 1 \u2264 k \u2264 10^6) \u2014 the size of the maze and the length of the cycle. \n\nEach of the following n lines contains m symbols \u2014 the description of the maze. If the symbol equals to \".\" the current cell is empty. If the symbol equals to \"*\" the current cell is occupied by an obstacle. If the symbol equals to \"X\" then initially the Robot is in this cell and it is empty. It is guaranteed that the symbol \"X\" is found in the maze exactly once. \n\n\n-----Input-----\n\nThe first line contains an integer n and m, separated by a space, which denotes the number of rows and columns of the maze. \n\nThe next n lines contains m symbols \u2014 the description of the maze. If the symbol equals to \".\" the current cell is empty. If the symbol equals to \"*\" the current cell is occupied by an obstacle. If the symbol equals to \"X\" then initially the Robot is in the empty cell. It is guaranteed that the symbol \"X\" is found in the maze exactly once. \n\n\n-----Output-----\n\nPrint the lexicographically minimal Robot's way with the length exactly k, which starts and ends in the cell where initially Robot is. If there is no such way, print \"IMPOSSIBLE\"(without quotes).\n\n\n-----Examples-----\nInput\n3 3 3\n.**\nX..\n\nOutput\nRL\n\nInput\n5 6 9\n..***.\n*...X.\n..*...\n..*.**\n....*.\n\nOutput\nDLDDLLLRRRUURU\n\nInput\n3 3 4\n***\n*X*\n***\n\nOutput\nIMPOSSIBLE\n\n\n-----Note-----\n\nIn the first sample two cyclic ways for the Robot with the length 2 exist \u2014 \"UD\" and \"RL\". The second cycle is lexicographically less. \n\nIn the second sample the Robot should move in the following way: down, left, down, down, left, left, left, right, right, right, up, up, right, up. \n\nIn the third sample the Robot can't move to the neighboring cells, because they are occupied by obstacles.\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 7\") == 2\nassert solution(\"1000000000000 1\") == 2\nassert solution(\"1000000000000 10000000001\") == 6\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input() for _ in range(0,int(input()))) == '1'"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 1') == 2\nassert solution('10 7') == 6\nassert solution('1000000000000 1') == 1\nassert solution('1000000000000 10') == 1\nassert solution('1000000000000 1.000000000000') == 1\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '1'\nassert solution(stdin) == '6'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\""
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"10\"\nassert solution(\"5\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1000000000000 1') == '2'\nassert solution('1000000000000 1') == '2'\nassert solution('1000000000000 1') == '2'\nassert solution('1000000000000 1') == '2'\nassert solution('1000000000000 1') == '2'\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n\n[Time Limit Exceeded]\nRuntime: 20 ms\nMemory Usage: 12.5 MB\n\n[Bug Report]\n\n[Warning]\nTime limit exceeded.\nThe input is invalid.\nThe given input was invalid.\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == 2\nassert solution(\"10 7\") == 2\nassert solution(\"1000000000000 1\") == 0\nassert solution(\"1000000000000 1000000000000\") == 6\n\n\n-----Constraints-----\n\n1 \u2264 stdin.length <= 100\n1 \u2264 stdin[i] <= 10^12\n\"\"\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 4 3\"\n\nassert solution(stdin) == \"5 4 2 3 1\"\n\nassert solution(stdin) == \"1 4 3 4\"\n\nassert solution(stdin) == \"5 4 5 3 1\"\n\nassert solution(stdin) == \"1 2 3 4\""
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 1 4 3 2 4 5\") == \"1 2 3 4 5 5 1 4 3 2 4\"\n\n\n\"\"\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\") == \"1 1 3\"\nassert solution(\"3 4 4\") == \"3 4 1\"\nassert solution(\"1 1 2 4\") == \"1 2 4 1\"\nassert solution(\"1 4 3 4\") == \"1 4 3 1\"\nassert solution(\"1 3 3 4 3\") == \"1 3 3 4\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1 2 3 4 5'\nassert solution(stdin) == '5 4 2 3 1'\n\n\"\"\""
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5 4 5 3 1\"\n\nassert solution(stdin) == \"1 4 3 4\"\n\nassert solution(stdin) == \"1 2 5 4\"\n\nassert solution(stdin) == \"1 2 3 4\"\n\nassert solution(stdin) == \"1 3 2 5\""
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\n\"\"\""
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == '1 2 3 4'\nassert solution(6) == '1 2 3 5 4 6'\nassert solution(4) == '4 4 2 3 1'\nassert solution(3) == '1 3 4 2'\nassert solution(2) == '2 3 1 4'\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == \"1 2 3 4\"\nassert solution(4) == \"1 4 3 4\"\nassert solution(3) == \"1 4 5 3\"\nassert solution(2) == \"1 2 5 4\""
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == \"1\"\nassert solution(1) == \"3\"\nassert solution(2) == \"5\"\nassert solution(3) == \"4\"\nassert solution(4) == \"2\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 2 3 4 3\"\nassert solution(stdin) == \"1 2 5 4 5\"\nassert solution(stdin) == \"5 4 2 3 1\"\nassert solution(stdin) == \"1 2 5 4 5\"\n\n\nTime Complexity\n\nThe time complexity of the solution function is O(n^2), where n is the length of the permutation.\nThe space complexity of the solution function is O(n), where n is the length of the permutation.\n\nFor example, if we see that the permutation \"p_1, p_2,..., p_{n} of integers from 1 to n\" has a length of 7 in the first line and n = 4 in the second line, and n = 3 in the third line, then the time complexity of solution is O(7*n^2).\n\nThe space complexity of the solution function is O(n), where n is the length of the permutation.\n\nIn this question, you have a permutation p_1, p_2,..., p_{n} of integers from 1 to n, where each integer is between 1 and n, and it satisfies the constraints.\n\nAnswer\nSolution to the question.\n\nSolution"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1 2\"\nassert solution(stdin) == \"2 3 4\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4 1 2\"\nassert solution(stdin) == \"1 1 2\"\nassert solution(stdin) == \"1 3 1\"\nassert solution(stdin) == \"3 3 1\"\nassert solution(stdin) == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 3 1\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 3 4\"\nassert solution(stdin) == \"1 4 2\"\nassert solution(stdin) == \"2 4 1\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 1 2 3\"\nassert solution(stdin) == \"1 1 2 4\"\nassert solution(stdin) == \"2 1 4\"\nassert solution(stdin) == \"2 1 2\"\nassert solution(stdin) == \"4 1 3\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n\n\"\"\"\nclass Solution:\n    def solve(self, stdin):\n        n, a = map(int, stdin.split())\n        a = a % 360\n\n        def calc_angle(n, a):\n            angle = (180 - a) % 360\n            return n * angle / 360\n\n        def dfs(n, a):\n            if n > n // 2:\n                return\n            if n == n // 2:\n                if a > a // 2:\n                    return\n\n            dfs(n + 1, calc_angle(n, a))\n            dfs(n + 2, calc_angle(n, a))\n\n        dfs(1, a)\n\n        return str(n)\n\n\nprint(Solution().solve(\"4 67\"))\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 15\\n' +\n               '4 67\\n' +\n               '4 68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '67\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n               '68\\n' +\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n        stdin) == \"4 1 3\"\nassert solution(\n        stdin) == \"2 1 3\"\nassert solution(\n        stdin) == \"1 3 4\"\nassert solution(\n        stdin) == \"2 4 1\"\nassert solution(\n        stdin) == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 15) == '1 2 3'\nassert solution(4, 67) == '1 2 3'\nassert solution(4, 68) == '1 3 4'\nassert solution(4, 69) == '1 4 2'\nassert solution(4, 70) == '4 2 1'\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin = \"3 15\"\n) == \"1 2 3\"\nassert solution(\n    stdin = \"4 67\"\n) == \"2 1 3\"\nassert solution(\n    stdin = \"4 68\"\n) == \"4 1 2\"\nassert solution(\n    stdin = \"4 69\"\n) == \"1 3 1\"\nassert solution(\n    stdin = \"4 70\"\n) == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2 1 3'\nassert solution(stdin) == '1 3 4'\nassert solution(stdin) == '3 2 4'\nassert solution(stdin) == '2 1 4'\nassert solution(stdin) == '2 4 3'\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 'YES'\nassert solution(inp) == 'NO'\n\"\"\""
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == \"YES\", \"FAILED\"\nassert solution(\"1\") == \"NO\", \"FAILED\"\nassert solution(\"4\") == \"YES\", \"FAILED\"\nassert solution(\"20\") == \"YES\", \"FAILED\"\nassert solution(\"60\") == \"NO\", \"FAILED\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(string) == \"YES\""
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == 'YES'\nassert solution(0) == 'NO'\nassert solution(1) == 'YES'\nassert solution(1) == 'NO'\nassert solution(2) == 'YES'\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"YES\"\n\nassert solution(input) == \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"NO\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"NO\""
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2 2 2\") == \"2\"\nassert solution(\"5 5 3 3\") == \"3\"\nassert solution(\"5 5 3 3\") == \"2\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 3 6 3') == '3'\nassert solution('3 1 5 6') == '2'\nassert solution('8 3 3 2') == '3'\nassert solution('8 3 3 2') == '3'\nassert solution('8 3 3 2') == '3'\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"8\""
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 3 2\") == \"2\"\nassert solution(\"3 1 5 6\") == \"3\"\nassert solution(\"8 3 3 2\") == \"2\"\nassert solution(\"2 3 10 4\") == \"3\"\nassert solution(\"2 3 10 4\") == \"3\""
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"2 2 3 3 3\") == \"2\"\nassert solution(\"8 8 5 4 4\") == \"3\"\nassert solution(\"8 8 7 4 4\") == \"3\"\nassert solution(\"1 7 5 6 7\") == \"3\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 6\") == 2"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2 3\") == \"3\"\nassert solution(\"2 3 6\") == \"6\"\nassert solution(\"2 3 10 4\") == \"4\"\nassert solution(\"2 3 5 10\") == \"7\"\nassert solution(\"2 3 4 1\") == \"1\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 2 3 1') == '2'\nassert solution('5 3 3 5') == '3'\nassert solution('8 1 3 6') == '3'\nassert solution('2 1 1 10') == '1'\nassert solution('2 3 10 4') == '3'\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 5) == \"1\"\nassert solution(6, 3) == \"2\"\nassert solution(99, 3) == \"4\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 3000\n1 <= x <= 10^12\n1 <= y <= 10^12\n\n\n-----Time Limit-----\nO(n)\n\n\n-----Space Limit-----\nO(n)\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"f(0,0)\"\nassert solution(inp) == \"f(0,1)\"\nassert solution(inp) == \"f(0,2)\"\nassert solution(inp) == \"f(0,3)\"\nassert solution(inp) == \"f(0,4)\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('10 10') == '1'\nassert solution('100 10') == '0'\nassert solution('20 20') == '0'\nassert solution('1000') == '1'\nassert solution('2000') == '0'\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n\nInput\n3 5\n\nOutput\n2\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"3\", \"5\"]) == \"1\"\nassert solution([\"6\", \"3\"]) == \"1\"\nassert solution([\"6\", \"3\", \"5\"]) == \"1\"\nassert solution([\"6\", \"3\", \"5\", \"4\", \"3\"]) == \"2\"\nassert solution([\"1\"]) == \"1\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 5) == \"0\"\nassert solution(6, 3) == \"1\"\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 200\n1 <= stdin[i] <= 10^6\n    \n\n-----Time complexity-----\ntime O(n)\n\ntime O(n)\nspace O(n)\n\nRuntime: 32 ms, faster than 92.69% of Python3 online submissions for Number Theory.\nMemory Usage: 13.8 MB, less than 64.15% of Python3 online submissions for Number Theory.\n\n\n-----Constraints-----\n    *\n\nThe constraints are:\n1 <= stdin[i] <= 10^5\n    *\n\nTime: 32 ms\nSpace: O(1)\n\n-----Good luck!-----\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 5\") == 1 + (2 + 0) * (1 + (2 + 1) * 0)\nassert solution(\n    \"6 3\") == 1 + (2 + 0) * (1 + (2 + 1) * 1)\nassert solution(\n    \"6 7\") == 1 + (2 + 0) * (1 + (2 + 1) * 2)\nassert solution(\n    \"4 5\") == 1 + (1 + 2) * (1 + (1 + 2) * 3)\nassert solution(\n    \"6 6\") == 1 + (2 + 0) * (1 + (2 + 1) * 4)\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    '3 5 -1 2 -1 6') == \"Yes\"\nassert solution(\n    '3 1 -1 2 -1 6') == \"No\"\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3 -1 -1 4 2\") == \"Yes\"\nassert solution(\"2 3 1 -1 4 5\") == \"No\"\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n\n'''"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, -1, 2, 4) == 'Yes'\nassert solution(1, -1, 2, 5) == 'Yes'\nassert solution(2, -1, 2, 4) == 'No'\nassert solution(2, -1, 2, 5) == 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,3,3,5,4,2) == 'No'\nassert solution(1,1,-1,-1,1,2,1,1,1) == 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\""
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"Yes\"\nassert solution(\"1 6 -1 4\") == \"No\"\nassert solution(\"1 6 -1 4 5\") == \"No\"\nassert solution(\"1 1 -1 1 -1 2 -1 4 -1 6 4 -1 8 -1 10 -1 12 -1 14 -1 16 -1 18 -1 22 -1 24 -1 26 -1 28 -1 30 -1 32 -1 34 -1 36 -1 38 -1 40 -1 42 -1 44 -1 46 -1 48 -1 50 -1 52 -1 54 -1 56 -1 58 -1 60 -1 62 -1 64 -1 66 -1 68 -1 70 -1 72 -1 74 -1 76 -1 78 -1 80 -1 82 -1 84 -1 86 -1 88 -1 90 -1 92 -1 94 -1 96 -1 98 -1 100 -1 102 -1 104 -1 106 -1 108 -1 110 -1 112 -1 114 -1 116 -1 118 -1 120 -1 122 -1 124 -1 126 -1 128 -1 130 -1 132 -1 134 -1 136 -1 138 -1 140 -1 142 -1 144 -1 146 -1 148 -1 150 -1 152 -1 154 -1 156 -1 158 -1 160 -1 162 -1 164 -1 166 -1 168 -1 170 -1 172 -1 174 -1 176 -1 178 -1 180 -1 182 -1 184 -1 186 -1 188 -1 190 -1 192 -1 194 -1 196 -1 198 -1 200 -1 202 -1 204 -1 206 -1 208 -1 210 -1 212 -1 214 -1 216 -1 218 -1 220 -1 222 -1 224 -1 226 -1 228 -1 230 -1 232 -1 234 -1 236 -1 238 -1 240 -1 242 -1 244 -1 246 -1 248 -1 250 -1 252 -1 254 -1 256 -1 258 -1 260 -1 262 -1 264 -1 266 -1 268 -1 270 -1 272 -1 274 -1 276 -1 278 -1 280 -1 282 -1 284 -1 286 -1 288 -1 290 -1 292 -1 294 -1 296 -1 298 -1 300 -1 302 -1 304 -1 306 -1 308 -1 310 -1 312 -1 313 -1 314 -1 316 -1 318 -1 320 -1 322 -1 324 -1 326 -1 328 -1 330 -1 332 -1 334 -1 336 -1 338 -1 340 -1 342 -1 344 -1 346 -1 348 -1 350 -1 352 -1 354 -1 356 -1 358 -1 360 -1 362 -1 363 -1 364 -1 366 -1 368 -1 370 -1 372 -1 374 -1 376 -1 378 -1 380 -1 382 -1 384 -1 386 -1 388 -1 390 -1 392 -1 396 -1 398 -1 400 -1 402 -1 404 -1 408 -1 410 -1 412 -1 414 -1 416 -1 418 -1 420 -1 422 -1 425 -1 428 -1 430 -1 432 -1 434 -1 436 -1 438 -1 440 -1 442 -1 454 -1 456 -1 458 -1 470 -1 472 -1 474 -1 476 -1 478 -1 480 -1 482 -1 484 -1 486 -1 488 -1 490 -1492 +\n\ntest = {\n    \"5 4\": True,\n    \"1 3\": False,\n    \"6 2\": True,\n    \"2 1\": True,\n    \"3 1\": True,\n    \"4 1\": True,\n    \"5 1\": False,\n    \"6 1\": True,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": True,\n    \"6 1\": True,\n    \"1 3\": False,\n    \"4 1\": True,\n    \"5 1\": True,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": True,\n    \"5 1\": False,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": True,\n    \"5 1\": False,\n    \"6 1\": True,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": True,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": True,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": True,\n    \"5 1\": True,\n    \"6 1\": True,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": True,\n    \"6 1\": True,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": True,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": True,\n    \"5 1\": True,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": True,\n    \"5 1\": True,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": True,\n    \"6 1\": True,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \"6 1\": True,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \"6 1\": False,\n    \"1 3\": False,\n    \"4 1\": False,\n    \"5 1\": False,\n    \""
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\\\"\\\"\\\"\n8 1\n1 -1 4\n1 -1 6\n\n3 2\n-1 1 4\n-1 1 6\n\n8 3\n-1 -1 2\n-1 -1 3\n-1 -1 4\n-1 -1 5\n-1 -1 6\n\n5 4\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n6 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n7 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n8 4\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n9 4\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n10 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n11 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n12 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n13 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n14 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n15 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n16 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n17 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n18 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n19 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n20 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n21 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n22 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n23 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n24 5\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n-1 -1 -1\n\n25 5\n-1 -1 -1\n-1 -1 -1\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\n--Your solution--\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"ugly\"\n\n\"\"\""
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0\") == \"respectable\"\nassert solution(\"0 0 1\") == \"ugly\"\nassert solution(\"0 0 2\") == \"ugly\"\nassert solution(\"1 0\") == \"ugly\"\nassert solution(\"1 0 1\") == \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('0 0') == \"respectable\"\nassert solution('0 0') == \"ugly\"\nassert solution('0 0') == \"ugly\""
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0 0 0 0 0) == \"respectable\"\nassert solution(0 1 0 0) == \"respectable\"\nassert solution(0 2 0 0 0) == \"ugly\"\nassert solution(1 0 0 0 0) == \"ugly\"\nassert solution(1 1 0 0 0) == \"ugly\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"respectable\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 0 0\") == \"respectable\"\nassert solution(\"0 0 1\") == \"ugly\"\nassert solution(\"0 0 2\") == \"ugly\"\nassert solution(\"1 0 0\") == \"ugly\"\nassert solution(\"1 0 1\") == \"ugly\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 'NO'\nassert solution(5) == 'YES'\n\n\n-----Goals-----\n\n- Do not use any nested for-loops. Use a stack and a queue instead.\n- You can use the variables in the for-loop to keep track of the values that we will be able to do.\n- Do not use any variables, constants, or nested loops.\n\n\"\"\"\n\nT = int(input())\nfor case in range(T):\n    n, d = list(map(int, input().split()))\n    days = d / n\n    day = int(input())\n    print(f\"YES\" if days < day else f\"NO\")"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 1') == 'NO'\nassert solution('1 1') == 'YES'\nassert solution('5 1') == 'YES'\nassert solution('5 11') == 'YES'\nassert solution('5 5') == 'NO'\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3') == 'YES'\nassert solution('4') == 'YES'\nassert solution('5') == 'YES'\nassert solution('5') == 'NO'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 6\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"3 8\") == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\""
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n[\n  [\"1\", \"1\"],\n  [\"1\", \"2\"],\n  [\"1\", \"3\"]\n]) == \"NO\"\n\"\"\""
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('99999') == '-1'\nassert solution('-100') == '-1'\nassert solution('123') == '-1'\nassert solution('1000') == '1000'\nassert solution('1111') == '-1'\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0123456789\") == 7"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4) == 7\nassert solution(17) == -1\nassert solution(1234) == 123456789\nassert solution(0) == -1\nassert solution(\"a\") == -1\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == -1\nassert solution(6) == -1\nassert solution(8080) == -1\nassert solution(123) == -1\nassert solution(\"22\") == -1\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == -1\n\n\nOutput:\n462\nExplanation:\n\nThis loop is constrained to look for a positive integer n >= 10, and that n is a perfect number.\n\nThe first line of the input has the integer k.\n\nThe second line has k numbers in the decimal representation of the number. The numbers are separated by spaces. For example, one of the digits 5 through 9 is represented as 5, 6, and so on, and the digits are separated by spaces.\n\n\n---CODE---\n\nk = int(stdin.readline().strip())\nn = 1\n\nwhile n <= k:\n    for i in str(n):\n        print(i, end=\" \")\n    print()\n    n = n + 1\n\nprint(n)"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 462\nassert solution(6) == 8080\n\n\nInput\n5\n\nOutput\n-1\n\"\"\""
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2') == -1, \"String is incorrect\"\nassert solution('6') == 8080, \"String is incorrect\"\nassert solution('1') == -1, \"String is incorrect\"\nassert solution('0') == -1, \"String is incorrect\"\nassert solution('-1') == -1, \"String is incorrect\"\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(9) == -1"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == -1\nassert solution(5) == 0\nassert solution(10) == 7\nassert solution(10000000000) == -1\nassert solution(10000000000001) == -1\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(7) == 8080\nassert solution(1) == -1\nassert solution(8) == -1\nassert solution(5) == -1\nassert solution(22) == -1\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin,\n    (int(l) for l in input().split())\n) == stdin.replace('?', '?').replace('.', '*').replace('*', '?')"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4, \"There are only two solutions\"\nassert solution(stdin) == 4, \"There are two solutions\"\nassert solution(stdin) == 3, \"There are no solution\"\nassert solution(stdin) == 1, \"There are only one solution\"\nassert solution(stdin) == 1, \"There are only one solution\"\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('a', 'b') == 'a'\nassert solution('ab', 'ab') == 'ab'\nassert solution('abc', 'abc') == 'abc'\nassert solution('abcdefghijklmnopqrstuvwxyz', 'abc') == 'abcdefghijklmnopqrstuvwxyz'\nassert solution('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"abcdefghijklm\", \"\") == \"xyz\"\nassert solution(\"abcdefghijklm\", \"y\") == \"xyz\"\nassert solution(\"abcdefghijklm\", \"ab\") == \"xyz\"\nassert solution(\"abcdefghijklm\", \"abc\") == \"xyz\"\nassert solution(\"abcdefghijklm\", \"abc\") == \"xyz\"\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 5\nassert solution(stdin) == 6\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 12"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 5\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"5 2 3\") == \"3 4\"\nassert solution(\"8 2 3\") == \"2 4\"\nassert solution(\"8 8 2\") == \"8\"\nassert solution(\"8 5\") == \"1\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\n\"\"\""
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 d \u2264 n - 1\n1 \u2264 h \u2264 d - 1\n\n\"\"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input().strip()) == \"5 4 -1\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"8\") == \"1 2\"\nassert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"8 5 2\") == \"4 8\"\nassert solution(\"8 7\") == \"-1\"\n\nThe first test case is a simple example of the input.\n\nThe input should be a string containing only digits (numbers from 1 to n).\n\n>>> import sys\n>>> input = sys.stdin.readline\n>>> n, d, h = map(int, input().strip().split())\n>>> print(\"-1\" if n-1 > h else \"-\")\n\n>>> assert solution(\"8\") == \"1 2\"\n>>> assert solution(\"8 4\") == \"1 3\"\n>>> assert solution(\"8 5\") == \"3 4\"\n>>> assert solution(\"8 7\") == \"7 8\"\n>>> assert solution(\"8 9\") == \"2 3\"\n>>> assert solution(\"8 10\") == \"3 6\"\n>>> assert solution(\"9\") == \"2 1\"\n\nNotes:\n\nThe input could be any string.\n\"\"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 8\") == \"4 8\"\nassert solution(\"4 3\") == \"-1\"\nassert solution(\"1 3\") == \"1 3\"\nassert solution(\"2 2\") == \"-1\"\nassert solution(\"6 1\") == \"6 1\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"4 8\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"3 5\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"Expected solution\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\" or solution(stdin) == \"-1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 2\") == \"1 2\"\nassert solution(\"8 5 2\") == \"3 4\"\nassert solution(\"8 4 2\") == \"3 8\"\nassert solution(\"8 4 2\") == \"8 8\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n0 <= n <= 100\n0 <= d <= n - 1\n1 <= h <= n - 1\n\n-----Time Limit-----\n0 < stdin.length < 10^5\n\n-----Solutions-----\n44\n175\n------------------------------\n29\n------------------------------\n\n\n\"\"\"\n\n\n\nclass Solution:\n    def shortestPath(self, n: int, d: int, h: int) -> str:\n        \n        \n        def next(x):\n            if x == n:\n                return '-'\n            if x == 0:\n                return '0'\n            if x == 1:\n                return '1'\n            \n        def path_gen(x):\n            \n            if x == n-1:\n                return [(x, '-')]\n            \n            if x == 0:\n                return path_gen(x+1)\n            \n            if x == 1:\n                return [(x, '0')]\n            \n            if x == n-2:\n                return path_gen(x+2)\n            \n            return [(x, next(x))] + path_gen(x+1)\n            \n        \n        \n        \n        \n        if n == 0:\n            return '-'\n        if n == 1:\n            return '0'\n        if n == 2:\n            return '1'\n        if n == 3:\n            return '3'\n        if n == 4:\n            return '4'\n        if n == 5:\n            return '5'\n        \n        \n        \n        \n        \n        path = []\n        for i in range(n):\n            path.append(i+1)\n            if i == 0:\n                path.append(i+1)\n            if i == 1:\n                path.append(i+1)\n            if i == 2:\n                path.append(i+1)\n            if i == 3:\n                path.append(i+1)\n            if i == 4:\n                path.append(i+1)\n            if i == 5:\n                path.append(i+1)\n            \n        path = path_gen(0)\n        \n        print(path)\n        \n        \n        visited = {}\n        \n        result = [0, 0, 0]\n        \n        def dfs(start_x):\n            if start_x not in visited:\n                visited[start_x] = 1\n                result[0] = start_x\n                dfs(start_x)\n            \n            if result[0] == start_x:\n                return result\n            \n            for i in range(1, n+1):\n                if visited[i] == 1:\n                    continue\n                if path[start_x] == i:\n                    visited[i] = 1\n                    dfs(i)\n                    visited[i] = 0\n        \n        dfs(0)\n        \n        print(result)\n        \n        \n        \n        return''.join(str(i) for i in result)\n            \n            \n        \n        \n        \n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3.2429391'\n'''\n\nimport unittest\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1.0000000'\n\nassert solution(stdin) == '3.2429391'\n\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '3.2429391'\n\nassert solution(stdin) == '3.2429391'\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 100 1\") == \"1.0000000\"\nassert solution(\"6 100 1\") == \"2.0000000\"\nassert solution(\"6 100 1\") == \"3.2429391\""
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"2.6341056\"\nassert solution(\"6 1\") == \"0.0\"\nassert solution(\"100 100\") == \"0.023\"\nassert solution(\"100\") == \"0.023\"\nassert solution(\"\") == \"0.0\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 5\") == \"1.0000000\"\nassert solution(\"6 1\") == \"1.0000000\"\nassert solution(\"3 1\") == \"3.2429391\"\n\n\n\n\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1.0000000'\nassert solution(stdin) == '3.2429391'\nassert solution(stdin) == '3.2429391'\nassert solution(stdin) == '3.2429391'\nassert solution(stdin) == '3.2429391'\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1,1) == \"1\"\nassert solution(2,2) == \"2\"\nassert solution(3,3) == \"4\"\nassert solution(4,5) == \"6\"\nassert solution(6,1) == \"1\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n34\n34\n\"\"\") == \"6.4641016\"\nassert solution(\"\"\"\n34\n\n35\n\"\"\") == \"6.4641016\"\nassert solution(\"\"\"\n34\n35\n\"\"\") == \"6.4641016\"\nassert solution(\"\"\"\n43\n\"\"\") == \"3.2429391\"\nassert solution(\"\"\"\n123\n\"\"\") == \"3.2429391\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '3.2429391'\nassert solution(inp) == '3.2429391'\nassert solution(inp) == '3.2429391'\nassert solution(inp) == '3.2429391'\nassert solution(inp) == '3.2429391'\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"3\",\"1\"]\n) == \"1.0000000\"\nassert solution(\n    [\"3\",\"1\",\"1\"]\n) == \"6.4641016\"\nassert solution(\n    [\"3\",\"1\",\"1\",\"3\"]\n) == \"6.4641016\"\nassert solution(\n    [\"6\",\"100\",\"100\",\"100\"]\n) == \"3.2429391\"\nassert solution(\n    [\"6\",\"100\",\"100\",\"100\",\"100\"]\n) == \"3.2429391\"\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '119.4'\n\"\"\"\n\nimport math"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"119.4\"\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"50.0\"\n\nInput\n199\n60\n40\n\nOutput\n119.4\n\nInput\n199\n100\n50\n\nOutput\n50.0\n\nassert solution(stdin) == \"50.0\"\n\nInput\n199\n60\n60\n\nOutput\n50.0\n\"\"\""
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '119.4'"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '119.4'\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '119.4'\n\nInput\n100\n50\n40\n\nOutput\n149.68\n\nInput\n199\n50\n60\n\nOutput\n93.87\n\n\"\"\""
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '119.4'\n\"\"\"\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"59\"\n\"\"\"\nfrom typing import List\n\n\nclass Solution:\n    def minimumMeetingDis(self, start: int, end: int, meeting: List[List[int]]) -> str:\n        visited = set()\n        result = []\n        min_dis = 0\n        for meeting_no, meeting_time in meeting:\n            if meeting_no not in visited:\n                visited.add(meeting_no)\n                visited.add(meeting_no + meeting_time)\n                result.append(meeting_no + meeting_time)\n                if meeting_no + meeting_time > end:\n                    min_dis = min(min_dis, abs(meeting_no + meeting_time - end))\n        return str(min_dis)\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(119.4)"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '119.4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '8'\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2014\") == \"2015\"\nassert solution(\"2015\") == \"2016\"\nassert solution(\"2015\") == \"2016\"\nassert solution(\"2014\") == \"2050\"\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2015\"\n\"\"\"\n\n\nclass Solution:\n    def __init__(self):\n        self.defines = {}\n\n    def _is_member(self, group, year):\n        for member in group:\n            if member >= year:\n                return True\n        return False\n\n    def _join_groups(self, group, year):\n        for member in group:\n            self.defines[member] = year\n        return [self.defines[member] for member in group]\n\n    def _calculate_group_year(self, group):\n        return sum(self._join_groups(group, group[0]) + self._join_groups(group, group[-1]))\n\n    def solution(self, stdin: str) -> str:\n        groups = [line.strip().split() for line in stdin.split('\\n')]\n\n        for group in groups:\n            if group[0] not in self.defines:\n                raise ValueError\n            group_year = self._calculate_group_year(group)\n            if not self._is_member(group, group_year):\n                continue\n            self._join_groups(group, group_year)\n        return ''.join([str(year) for year in sorted(self.defines.values())])\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2015\"\nassert solution(stdin) == \"2015\"\n\n\n-----Constraints-----\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 5) \u2014 the number of groups which Igor joined.\n\nThe next line contains n distinct integers a_1, a_2,..., a_{n} (2010 \u2264 a_{i} \u2264 2100) \u2014 years of student's university entrance for each group in which Igor is the member.\n\nIt is guaranteed that the input data is correct and the answer always exists. Groups are given randomly.\n\n[output]\n\nPrint the year of Igor's university entrance.\n\n[constraints]\n\n0 \u2264 n \u2264 100000\n0 \u2264 a_1, a_2,..., a_{n} \u2264 3 000 000 000 000\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2\\n3\\n3\\n1\\n2\\n2\\n1\\n3\\n5\\n1\\n1\\n3\\n3\\n3\\n1\\n2\\n5\\n2\\n3\\n1\\n3\\n1\\n1\\n2\\n5\\n2\\n3\\n5\\n1\\n1\\n3\\n3\\n1\\n3\\n1\\n2\\n1\\n5\\n5\\n3\\n2\\n1\\n3\\n5\\n2\\n3\\n3\\n2\\n3\\n3\\n3\\n1\\n3\\n2\\n5\\n5\\n2\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n5\\n5\\n3\\n3\\n5\\n2\\n5\\n1\\n3\\n1\\n5\\n5\\n3\\n3\\n1\\n1\\n3\\n3\\n1\\n2\\n1\\n2\\n3\\n1\\n5\\n1\\n1\\n1\\n2\\n2\\n3\\n1\\n3\\n2\\n1\\n1\\n3\\n1\\n3\\n3\\n2\\n1\\n1\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n3\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n3\\n1\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n3\\n1\\n2\\n1\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n2\\n1\\n1\\n1\\n1\\n2\\n3\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2015\"\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2015\""
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2015\"\nassert solution(stdin) == \"2050\"\n\n\"\"\""
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 1 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2015\"\n\n\"\"\"\n\nfrom collections import defaultdict\n\n\nclass Solution:\n    def __init__(self):\n        self.dict = defaultdict(set)\n\n    def get_time(self, year):\n        # print(\"Year:\", year)\n        # self.dict[year].add(self.get_student(year))\n        # self.dict[year].add(self.get_student(year) + year)\n        # print(\"Result:\", self.dict[year])\n        return len(self.dict[year])\n\n    def solution(self, stdin: str) -> str:\n        \"\"\"\n        :param stdin:\n        :return:\n        \"\"\"\n        year = 0\n        student_list = list(stdin.split(' '))\n        for i in student_list:\n            year += self.get_time(int(i))\n        print(year)\n        return str(year)\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"2014\", \"2015\", \"2015\", \"2016\"]) == \"2015\"\nassert solution([\"2015\", \"2015\", \"2016\"]) == \"2015\"\nassert solution([\"2015\", \"2017\", \"2016\"]) == \"2015\"\nassert solution([\"2014\", \"2016\"]) == \"2015\"\nassert solution([\"2015\", \"2017\", \"2016\"]) == \"2015\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\nassert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\nassert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"Yes\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"2\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\nassert solution(\"4\") == \"Yes\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n------Examples------\n\nTestcase 1:\n\nInput\n5\nCY??Y\n\nOutput\nYes\n\nTestcase 2:\n\nInput\n3\n
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"CYCMY\") == \"Yes\"\nassert solution(\"CYC??\") == \"No\"\nassert solution(\"M\") == \"Yes\"\nassert solution(\"Y\") == \"No\"\nassert solution(\"?\") == \"No\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n\nimport sys\nsys.setrecursionlimit(10**6)\n\nn = int(input())\ns = input()"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 72900\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '72900'\nassert solution(stdin) == '317451037'\n\"\"\""
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"317451037\"\n\nprint('Example 1:')\nprint('Input : ')\nprint('5 1 2 5 3')\nprint('Output : ')\nprint('72900')\nprint('Exception :')\nprint('61785')\n\n\nprint('Example 2:')\nprint('Input : ')\nprint('17 97 41 37 11')\nprint('Output : ')\nprint('317451037')\nprint('Exception :')\nprint('100991')\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"317451037\"\nassert solution(input()) == \"317451037\"\nassert solution(input()) == \"317451037\"\nassert solution(input()) == \"317451037\"\nassert solution(input()) == \"317451037\"\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input() == \"72900\")\nassert solution(input() == \"317451037\")\nassert solution(input()) == \"317451037\"\n\n'''\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"317451037\"\n\nprint('Example 1:')\nprint('Input : ')\nprint('5 1 2 5 3')\nprint('Output :')\nprint('72900')\nprint('Exception :')\nprint('72900')\n\nprint('Example 2:')\nprint('Input : ')\nprint('17 97 41 37 11')\nprint('Output :')\nprint('317451037')\nprint('Exception :')\nprint('317451037')\n\nprint('Example 3:')\nprint('Input : ')\nprint('16 94 46 23')\nprint('Output :')\nprint('2')\nprint('Exception :')\nprint('2')\n\nprint('Example 4:')\nprint('Input : ')\nprint('97 33 14 12')\nprint('Output :')\nprint('2')\nprint('Exception :')\nprint('2')\n\nprint('Example 5:')\nprint('Input : ')\nprint('84 49 2')\nprint('Output :')\nprint('127')\nprint('Exception :')\nprint('127')\n\nimport math"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '317451037'\nassert solution(stdin) == '317451037'\nassert solution(stdin) == '317451037'\nassert solution(stdin) == '317451037'\nassert solution(stdin) == '317451037'\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '317451037'\n\n-----Constraints-----\n0 \u2264 n \u2264 10^18\n\n1 \u2264 f_{1} \u2264 10^{18}\n\n2 \u2264 f_{2} \u2264 10^{9}\n\n3 \u2264 f_{3} \u2264 10^{9}\n\n4 \u2264 c \u2264 10^{9}\n\n-----Time Limit: 1 min\n-----Memory Limit: 256MB\n\nclass Solution:\n    def __init__(self, stdin):\n        self.stdin = stdin\n\n    def solution(self):\n        pass"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"317451037\"\nassert solution(stdin) == \"72900\"\nassert solution(stdin) == \"22\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '317451037'\n\"\"\"\n\nfrom imports import *\n\nclass Solution:\n    def _solution(self, n, f1, f2, f3, c):\n        \"\"\"\n        In the next few lines, we represent $f_{n} \\bmod (10^{9} + 7)$.\n        Note that $f_{1} \\bmod (10^{9} + 7)$ is a form of a function\n        that divides $f_{1} \\bmod (10^{9} + 7)$ by $10^{9} + 7$ in order\n        to satisfy the problem of integer division.\n\n        \"\"\"\n        def modular_inverse(a, p):\n            \"\"\"\n            Calculate modular inverse of $a$ mod $p$\n\n            In order to obtain the modular inverse, $a^\\infty_{p} = 1_p$\n\n            \"\"\"\n            m, n = p, a\n            while m % 2 == 0:\n                m //= 2\n                n, r = r, n\n            while n % 2 == 1:\n                n //= 2\n                r, d = d, r\n            s = 0\n            while r!= 1:\n                q = n // r\n                s += q * (s ** 2 + 1) * (r ** d)\n                n, r = r, n % r\n            if s == 1:\n                s = 0\n            return s % n\n        d = modular_inverse(c, n)\n        return f'{f1}{d}{f2}{d}{f3}'"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"xx\"\nassert solution(stdin) == \"xx\"\nassert solution(stdin) == \"xx\"\nassert solution(stdin) == \"xx\"\nassert solution(stdin) == \"xx\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"abab\"\nassert solution(stdin) == \"abab\"\nassert solution(stdin) == \"abab\"\nassert solution(stdin) == \"abab\"\nassert solution(stdin) == \"abab\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(input()) == \"ababcd\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(input()) == \"xyzabcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('tab') == 'tabbat'\nassert solution('oo') == 'ox'\nassert solution('abab') == 'abab'\nassert solution('baba') == 'baba'\nassert solution('abcd') == 'abcd'\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"tababbat\"\nassert solution(stdin) == \"tab\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"hello\"\nassert solution(stdin) == \"codef\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('') == ''\nassert solution('a') == 'a'\nassert solution('aab') == 'ab'\nassert solution('abab') == 'abab'\nassert solution('abab') == 'ababa'\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"tab\") == \"tab\"\nassert solution(\"one\") == \"one\"\nassert solution(\"bat\") == \"battab\"\nassert solution(\"hello\") == \"hello\"\nassert solution(\"codef\") == \"codef\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == '0'\n\n\n---End of Submissions---\n11.07.20.\n\n---Constraints---\n0 \u2264 n, m \u2264 30\n0 \u2264 stdin.length \u2264 100\n\n------Time complexity-----\nO(n * m)\n\n------Space complexity-----\nO(n + m)\n\n\"\"\"\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> str:\n        longest = ''\n        for i in range(len(s)):\n            left = self.helper(s, i, i)\n            right = self.helper(s, i, i + 1)\n            for j in range(left, right):\n                if s[j]!= s[j - left]:\n                    break\n                else:\n                    if len(longest) < len(s[j]):\n                        longest = s[j]\n        return longest\n        \n    def helper(self, s, left, right):\n        while left >= 0 and right < len(s) and s[left] == s[right]:\n            left -= 1\n            right += 1\n        return right - left - 1\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 1\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(3) == 3\nassert solution(6) == 6\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'abba'\nassert solution(stdin) == 'babba'\nassert solution(stdin) == 'bbaab'\nassert solution(stdin) == 'bba'\nassert solution(stdin) == 'ab'\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == '1'\nassert solution(5) == '6'\nassert solution(10) == '10'\nassert solution(25) == '30'\nassert solution(35) == '50'\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1000000000 1000000000 1000000000\"\n\nInput\n4\n3 1 2 4 5\n\nOutput\n2\n\nInput\n2\n9 2 3 1 4\n\nOutput\n3\n\nInput\n5\n1 5 2 4 3\n\nOutput\n2\n\nInput\n5\n3 1 2 4 5 6 7 8 9 10\n\nOutput\n2\n\nInput\n3\n5 1000000000 1000000000 1000000000\n\nOutput\n3\n\nInput\n5\n
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1999982505\"\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"1\"\nassert solution(123) == \"1-1\"\nassert solution(5677) == \"1-2-2\"\nassert solution(99) == \"1-2-1\"\nassert solution(12345678) == \"1-2-3-3\"\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '298411'\n\n\"\"\""
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n\"\"\""
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(n, a) == \"1\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i \\le 10^9\n\nTime Limit: 10^4 s\nSpace Limit: 10^4\n\n\n-----Example 1-----\n\nInput\n4\n1 2 3 4\n\nOutput\n3\n\nExplanation\n\nInput: n = 4, a = [1, 2, 3, 4]\n\nOutput: [1, 2, 3, 4]\n\n\n-----Example 2-----\n\nInput\n5\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n8\n\nExplanation\n\nInput: n = 5, a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nOutput: [1, 2, 3, 4, 8, 10]\n\n\n-----Note-----\n\nIn the example above, the reordering is followed by multiplying each item by $1,000,000,000,000$ to get the desired power sequence.\n\nThe new items are multiplied by $100,000,000,000$ to get the desired cost.\n\n\"\"\""
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1999982505'\n\nInput\n3\n1\n1 3 2\n\nOutput\n1\n\nInput\n3\n1 3 2\n\nOutput\n2\n\nInput\n1\n2\n2\n\nOutput\n2\n\nInput\n1\n1 2\n2\n\nOutput\n1\n\nInput\n1\n1 2\n3\n\nOutput\n1\n\nInput\n1\n3\n2\n3\n\nOutput\n1\n\"\"\"\nfrom itertools import permutations\n\n\nn = int(input())\na = list(map(int, input().split()))\na = sorted(a)"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2009725000\"\nassert solution(input()) == \"1020000000000000000000000\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"3\"\nassert solution(\"0\") == \"1\"\nassert solution(\"10\") == \"2\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 2\n\n-----Constraints-----\n\n1 <= t <= 100\nn <= 10^5\n\n0 <= a_1, a_2, \\dots, a_n <= 10^9\n\n\n-----Time complexity-----\n\nFor each operation $i = 1$, $n$ times, $a_{i} \\leq a_{i+1}$ is a bit expensive.\nWe need to store $a_{i}+a_{i+1}$ in a hash table.\n\nWe can store $a_{i}+a_{i+1}$ in a hash table.\n\nTo save space in the hash table, we need to store $n$ in an array that is at most 10^12.\n\nIn order to get a runtime of $n = 2^12$, we need to save $n^2$ in a hash table.\n\nThe table will be at most $10^12$ millions.\n\n1 <= n <= 10^5\n\n2 <= t <= 100\n\"\"\""
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"1\"\nassert solution([\"1\", \"3\", \"7\"]) == \"2\"\nassert solution([\"1\", \"4\", \"1\"]) == \"3\"\nassert solution([\"1\", \"4\", \"1\"]) == \"4\"\nassert solution([\"1\", \"4\", \"1\"]) == \"4\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == 1, '1'\nassert solution('2') == 1, '1'\nassert solution('3') == 1, '1'\nassert solution('4') == 1, '1'\nassert solution('5') == 1, '1'\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 1, \"length of solution(0)\"\nassert solution(1) == 1, \"length of solution(1)\"\nassert solution(2) == 2, \"length of solution(2)\"\nassert solution(3) == 2, \"length of solution(3)\"\nassert solution(4) == 2, \"length of solution(4)\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"4\", \"2\", \"1\", \"3\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"0\"]) == \"0\"\nassert solution([\"2\", \"2\", \"3\", \"2\", \"0\"]) == \"1\"\nassert solution([\"2\", \"1\", \"0\", \"2\", \"0\"]) == \"2\"\nassert solution([\"3\", \"3\", \"3\", \"0\", \"3\"]) == \"3\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 7 4 3 2') == '1'\nassert solution('2 2 2 2') == '2'\nassert solution('2 3 3 3') == '3'\nassert solution('0 2 1 1') == '2'\nassert solution('1 0 2 2') == '2'\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"3\"\nassert solution(\"a\") == \"4\"\nassert solution(\"1a\") == \"3\"\nassert solution(\"aab\") == \"2\"\nassert solution(\"abd\") == \"3\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3 2\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\", \"0 0\"]) == \"NIE\"\nassert solution([\"2 3\", \"7 7\", \"7 7\", \"7 10\", \"10 7\", \"10 10\", \"10 10\", \"10 10\", \"10 10\"]) == \"TAK\"\n"
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NIE\"\n\n-----Constraints-----\n0 <= n <= 10^5\n0 <= m <= 10^6\n\n\"\"\""
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 2 3 4 5 6 7 8 9 10\"]) == \"NIE\"\nassert solution([\"1 2 3 4 5 6 7 8 9 10\"]) == \"TAK\"\nassert solution([\"1 2 3 4 5 6 7 8 9 10\"]) == \"TAK\"\nassert solution([\"1 2 3 4 5 6 7 8 9 10\"]) == \"TAK\"\nassert solution([\"1 2 3 4 5 6 7 8 9 10\"]) == \"TAK\"\n"
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"NIE\"\nassert solution(\"2 3\") == \"TAK\"\nassert solution(\"2 3 4 5 6\") == \"TAK\"\nassert solution(\"0 0 0\") == \"TAK\"\nassert solution(\"0 0 0 0\") == \"TAK\"\n"
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NIE\"\n\nassert solution(stdin) == \"TAK\"\n'''\n\nfrom sys import stdin\n"
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"TAK\"\n\"\"\""
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2) == \"NIE\", \"incorrect output\"\nassert solution(2, 3) == \"TAK\", \"incorrect output\"\nassert solution(1, 3) == \"TAK\", \"incorrect output\"\n"
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2\") == \"NIE\"\nassert solution(\"2 3\") == \"NIE\"\nassert solution(\"2 3 7 7 10\") == \"TAK\"\nassert solution(\"3 2 7 7 10\") == \"TAK\"\nassert solution
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\n        [\"3\", \"0\", \"0\", \"0\", \"0\"],\n        [\"2\", \"7\", \"7\", \"7\", \"10\"],\n        [\"2\", \"3\", \"3\", \"7\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\"]\n    ]\n) == \"NIE\"\nassert solution(\n    [\n        [\"3\", \"7\", \"1\"],\n        [\"7\", \"10\", \"1\"],\n        [\"1\", \"2\", \"1\"]\n    ]\n) == \"TAK\"\nassert solution(\n    [\n        [\"2\", \"1\", \"1\", \"0\", \"0\"],\n        [\"2\", \"1\", \"0\", \"0\", \"0\"],\n        [\"2\", \"1\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\"]\n    ]\n) == \"NIE\"\nassert solution(\n    [\n        [\"3\", \"7\", \"1\"],\n        [\"7\", \"10\", \"1\"],\n        [\"1\", \"2\", \"1\"]\n    ]\n) == \"TAK\"\nassert solution(\n    [\n        [\"2\", \"1\", \"1\", \"0\", \"0\"],\n        [\"2\", \"1\", \"0\", \"0\", \"0\"],\n        [\"2\", \"1\", \"0\", \"0\", \"0\"],\n        [\"0\", \"0\", \"0\", \"0\", \"0\"]\n    ]\n) == \"NIE\"\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1 or solution(stdin) == 10"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(contest) == 10\n\n-----Examples-----\nInput:\ncontest\ns\nt\n\nOutput:\n3\n\nExplanation:\nContest contains s's and t's (the first 9 characters in s' = contestcontestcontest...).\nThe minimum integer is 3.\n\"\"\"\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n\"\"\"\nimport re\n\nfrom utils import timed\n\n\n@timed\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 10\n\n--------\n\nTest cases\nSample Input\ns\nt\n\nSample Output\n10\n\nExplanation\nFor the given input, the minimum integer i satisfying the above conditions is 10.\n\nSample Input\ncontest\nson\n\nSample Output\n-1\n\nExplanation\nNo valid information exists.\n\"\"\"\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"12\") == -1\nassert solution(\"10\") == -1\nassert solution(\"11\") == -1\nassert solution(\"1112\") == 10\nassert solution(\"10a12\") == -1\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\n\"\"\"\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 10\n'''\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('s', 't') == 10\nassert solution('s', 'p') == 10\nassert solution('s', 'r') == 10\nassert solution('s', 'n') == 10\nassert solution('s', 'u') == 10\n"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['3 1', '3 4', '4 1', '4 3', '3 2', '1 2', '2 3', '1 3', '2 4']) == 'YES'\nassert solution(['3 3', '1 1', '3 3', '2 3', '3 3', '2 1', '1 3', '1 2', '1 3', '2 2', '3 2', '3 3', '2 3', '3 3', '2 3', '1 3', '3 2', '3 4', '3 2', '1 1', '1 4', '3 3', '1 1', '1 2', '3 3', '3 2', '3 2', '3 3', '2 2', '1 2', '1 3', '2 1', '1 1', '3 2', '3 2', '3 2', '3 3', '3 2', '3 3', '2 3', '3 2', '2 3', '3 2', '3 2', '2 3', '2 3', '3 2', '3 2', '3 2', '1 2', '3 2', '2 3', '3 3', '2 3', '2 2', '2 3', '2 3', '3 2', '3 2', '3 3', '3 2', '1 2', '1 3', '3 2', '1 2', '3 2', '1 2', '2 3', '1 3', '3 2', '2 2', '2 3', '3 2', '2 3', '2 3', '2 3', '2 3', '3 2', '2 3', '3 2', '2 3', '3 2', '2 3', '3 2', '2 3', '2 3', '3 2', '3 2', '1 3', '3 2', '1 2', '3 2', '3 2', '3 2', '1 2', '1 3', '3 2', '3 2', '1 3', '3 2', '2 3', '3 2', '1 2', '1 3', '3 2', '1 2', '3 2', '1 3', '3 2', '2 3', '3 2', '1 3', '2 3', '3 2', '3 2', '2 3', '1 2', '3 3', '3 2', '1 2', '1 3', '1 2', '2 3', '1 3', '2 2', '3 3', '3 2', '2 3', '2 3', '3 2', '1 3', '1 3', '3 2', '2 3', '3 2', '2 3', '3 3', '3 2', '2 3', '3 3', '3 2', '1 2', '3 2', '3 3', '3 3', '3 2', '1 3', '3 2', '1 2', '3 2', '1 2', '1 3', '3 2', '3 2', '1 2', '1 3', '3 2', '1 2', '3 2', '3 2', '1 3', '3 2', '1 2', '1 3', '3 2', '1 2', '1 3', '1 2', '3 2', '3 2', '3 2', '1 2', '1 3', '3 2', '3 2', '1 3', '3 2', '3 2', '1 3', '3 2', '3 2', '1 2', '3 2', '1 3', '1 3', '1 2', '1 3', '3 2', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '3 2', '1 3', '3 2', '3 2', '1 2', '3 2', '3 2', '1 2', '3 2', '3 2', '3 2', '1 2', '1 3', '1 3', '1 2', '3 2', '3 2', '3 2', '3 2', '1 3', '1 3', '1 2', '1 3', '1 2', '3 2', '1 3', '1 2', '1 3', '3 2', '1 2', '1 3', '3 2', '1 2', '3 2', '1 3', '1 2', '1 3', '3 2', '3 2', '1 2', '1 3', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '3 2', '1 3', '3 2', '3 2', '1 2', '1 3', '1 2', '1 3', '1 2', '3 2', '1 3', '3 2', '1 2', '1 3', '3 2', '1 3', '1 2', '1 3', '3 2', '1 2', '1 3', '3 2', '1 2', '1 3', '1 2', '3 2', '1 3', '3 2', '1 2', '1 3', '1 2', '3 2', '3 2', '3 2', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '3 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '3 2', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '3 2', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1 2', '1 3', '1"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 3') == \"YES\"\nassert solution('4 3') == \"NO\"\nassert solution('4 4') == \"NO\"\nassert solution('10 4') == \"YES\"\nassert solution('3 2') == \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n\n [Note]\nThe first and the second line are not separated by a space. It is meant to be separated by a colon.\n\n[Constraints]\n1 \u2264 n \u2264 105\n0 \u2264 m \u2264 100\n0 \u2264 a_{i}, b_{i} \u2264 n\n\n[Example]\nInput:\n4 3\n1 3\n3 4\n1 4\n\nOutput:\nYES\n\n[Constraints]\n1 \u2264 n \u2264 105\n0 \u2264 m \u2264 100\n0 \u2264 a_{i}, b_{i} \u2264 n\n\n[Input]\n3 2\n1 2\n2 3\n\nOutput:\nNO\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 3 4\") == \"NO\"\nassert solution(\"1 4 1\") == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n0 <= m <= 10^4\n-109 <= a_i, b_i <= n\na_i!= b_i\n1 <= a_i, b_i <= n\na_i!= b_i\na_{i}!= b_{i}\n\n-----Time Limit-----\n\nO(n*m)\n\n\n-----Submissions-----\n\nConcept\n\nYou are given two networks (an integer a and b) of two distinct nodes. Two nodes are friends if they are adjacent to each other (i.e. are not friends).\n\nYou are asked to help Limak to check if two networks are reasonable. In the first problem, we represent the network as follows:\n\nThe nodes are numbered 1, 2,..., n.\nIf a is friends with b, we write:\n\na is friends with b\nIf b is friends with a, we write:\n\nb is friends with a\n\nAfter obtaining a friend that makes the network reasonable, we print the reason for that.\n\nInput\n\nThe first input line contains an integer n, the number of nodes, followed by n space separated integers a_i, b_i,..., b_i.\n\nOutput\n\nPrint \"YES\" if the networks are reasonable, otherwise print \"NO\".\n\nConstraints\n\n1 <= n <= 10^4\n-109 <= a_i, b_i <= n\n-109 <= a_{i} <= b_{i} <= n\na_i!= b_i\na_i!= b_i\n\n--\n\nimport math\nimport sys"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\"\n\n[Explanation]\n    You need to sort the given list in ascending order, so that members that appear more than once in the list can remain sorted.\n    The numbers in the list are stored in the ascending order of the friends.\n\n[Constraints]\n\n[input]\n\n[output]\n\n[output]\n\n[complexity]\n\nO(n + m) where n is the number of members and m is the number of pairs\n\n[time limit]\n1 second\n\n[memory limit]\n15 million\n\n[Bug tickets]\n\n[submissions]\n\n[implementation]\n\n'''"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 4 5 6') == 'NO'\nassert solution('1 1 2 4 5') == 'NO'\nassert solution('1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 249 250 251 252 253 254 255 255 256 257 258 259 260 261 262 263 264 274 275 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 308 309 311 310 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 330 331 332 333 334 334 336 337 336 338 339 340 341 342 343 344 345 346 347 348 349 350 351 351 353 354 355 355 356 357 358 359 360 361 360 361 366 366 367 368 369 370 371 372 373 374 374 376 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380 379 380"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1\") == \"NO\", \"The first line of the input is incorrectly formatted\"\nassert solution(\"2 3\") == \"NO\", \"The second line of the input is incorrectly formatted\"\nassert solution(\"3 4\") == \"NO\", \"The third line of the input is incorrectly formatted\"\nassert solution(\"4 5\") == \"YES\", \"The fourth line of the input is incorrectly formatted\"\nassert solution(\"1 3\") == \"YES\", \"The first line of the input is incorrectly formatted\"\n"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 3\") == \"NO\"\nassert solution(\"4 4\") == \"NO\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"3 3\") == \"NO\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"BONUS\") == \"BONUS\"\n\nassert solution(\"BONUS\") == \"BONUS\"\n\nassert solution(\"BONUS\") == \"BONUS\"\n\nassert solution(\"BONUS\") == \"BONUS\"\n\nassert solution(\"BONUS\") == \"BONUS\""
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"X\") == \"X\"\nassert solution(\"A\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"Z\") == \"Z\"\nassert solution(\"H\") == \"h\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"AabbccDDDcDDDeeeeeeeeeeeDDD\") == \"AAAAbbddddddddddddddddDDD\"\nassert solution(\"ABCDabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"\") == \"\"\nassert solution(\"aabbccDDDcDDDeeeeeeeeeeeDDD\") == \"aaaaaaaaaaaaaaaaaaaaaaaaa\"\n\"\"\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"ABAB\") == \"AbABAB\"\nassert solution(\"a\") == \"a\"\nassert solution(\"ABABDCBA\") == \"ABACABDCBA\"\nassert solution(\"ABC\") == \"ABC\"\nassert solution(\"aABAB\") == \"ABAB\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('one two three four five six seven eight nine') == 'FVV'\nassert solution('one two three four five six seven eight nine') == 'FGV'\nassert solution('two three four five six seven eight nine') == 'TWWF'\nassert solution('one two three four five six seven eight nine') == 'FGV'\nassert solution('one two three four five six seven eight nine') == 'TWWF'\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"STDIN: Yes\") == \"YEsDFgGS\"\nassert solution(\"STDIN: No\") == \"NO\"\nassert solution(\"NON\") == \"NOn\"\nassert solution(\"Bla\\tBla\") == \"BlaBla\"\nassert solution(\"LAVo\\tLAVo\") == \"LAVoLAVo\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"Hello\") == \"Hello\"\nassert solution(\"Hi\") == \"Hi\"\nassert solution(\"HiHello\") == \"HiHello\"\nassert solution(\"HelloThere\") == \"HelloThere\"\nassert solution(\"HelloThereHowIsIt\") == \"HelloThereHowIsIt\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"bef12\", \"bef12\", \"bef12\", \"bef12\"]) == \"bef12\"\nassert solution(\n    [\"be\", \"e\", \"f\", \"g\", \"f\", \"f\", \"f\", \"f\", \"g\"]) == \"f\"\nassert solution(\n    [\"ba\", \"bb\", \"bc\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\"]) == \"bb\"\nassert solution(\n    [\"be\", \"e\", \"f\", \"g\", \"f\", \"f\", \"f\", \"f\", \"f\", \"g\"]) == \"g\"\nassert solution(\n    [\"ba\", \"bb\", \"bc\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\", \"bb\"]) == \"g\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\") == \"\", \"incorrect return value\"\nassert solution(\"g\") == \"p\", \"incorrect return value\"\nassert solution(\"g\") == \"f\", \"incorrect return value\"\nassert solution(\"g\") == \"g\", \"incorrect return value\"\nassert solution(\"g\") == \"f\", \"incorrect return value\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"FEDCABA\") == \"ABCED\"\nassert solution(\"FEDCABA\") == \"ABCEAF\"\nassert solution(\"FEDCABA\") == \"ABDCBA\"\n\n\n-----Discussion-----\nYou are given a string with letters and digits. You need to add or remove digits and letters to the end of the string.\n\nThe first line of the input contains an integer n.\nThe second line contains n space separated integers.\n\nThe last line of the input contains a string S.\n\nA string S consists of only lowercase English letters, digits and spaces.\n\n\n\nInput Format\nThe first line contains an integer, n.\nThe next n lines contain an integer array consisting of n space separated integers.\n\n\nConstraints\n1\u2264n\u226410^5\n0\u2264S[i]\u226410^5\n\n\nOutput Format\nOutput the required string.\n\nSample Input\n\n6\n5\n1 4 2 3 5\nSample Output\n\n2 3 5 4 5\n\n\n\nConstraints\n\n\nSample Input\n\n4\n1 2 3 4 5\nSample Output\n\n1 2 3 4 5\n\n\n\nSample Input\n\n9\n8 12 9 2 3 4 5 6 7 8\nSample Output\n\n1 2 3 4 5 6 7 8 9 10 11 12\n\"\"\""
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0111\") == \"First\"\nassert solution(\"0001\") == \"Second\"\nassert solution(\"11001\") == \"First\"\nassert solution(\"1001\") == \"Second\"\nassert solution(\"11010\") == \"First\"\n"
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, \"0111\") == \"First\"\nassert solution(3, \"0001\") == \"Second\"\nassert solution(3, \"110100\") == \"Second\"\nassert solution(3, \"110010\") == \"First\"\nassert solution(3, \"110000\") == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"First\""
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"First\"\n\nassert solution(stdin) == \"Second\"\n\nassert solution(stdin) == \"First\"\n\nassert solution(stdin) == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"00011100\") == \"First\"\nassert solution(\"00011110\") == \"Second\"\nassert solution(\"11101010\") == \"First\"\nassert solution(\"11100011\") == \"Second\"\nassert solution(\"110101011000111010101110010110001\") == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'First'\nassert solution(stdin) == 'Second'\nassert solution(stdin) == 'Second'\nassert solution(stdin) == 'Second'\nassert solution(stdin) == 'Second'\n"
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0111\") == \"First\"\nassert solution(\"110110\") == \"Second\"\nassert solution(\"000101\") == \"First\"\nassert solution(\"0001100\") == \"First\"\nassert solution(\"10000101\") == \"Second\"\n"
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Draw\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\""
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0111\") == \"First\"\nassert solution(\"0001\") == \"Second\"\nassert solution(\"110110\") == \"First\"\nassert solution(\"00101101\") == \"Second\"\nassert solution(\"111111\") == \"First\"\n"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2\\n-10\\n1\\n-10\\n2\\n1\\n-10\\n5\\n2\\n2\\n4\\n3\\n3\\n1\\n5\\n-5\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10\\n-10"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(6) == 2\nassert solution(3) == 3\nassert solution(7) == 5"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '10'\nassert solution(stdin) == '-10'\n"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2 1 0 -1\") == \"3\"\nassert solution(\"3 3 -1 0 -1\") == \"3\"\nassert solution(\"7 3 0 0 0 0 -1\") == \"7\"\nassert solution(\"4 -1 1 1 1 1 1 1 1\") == \"4\"\nassert solution(\"4 2 1 0 0 0 1\") == \"2\"\n"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 3 5 7 4 3 5 6\"\n    ) == \"3 5 7 4 3 5 6\"\n\nassert solution(\n    \"2 6 7 8 7 7 7 7\"\n    ) == \"7\"\n\nassert solution(\n    \"1 7 9 3\"\n    ) == \"9\"\n\nassert solution(\n    \"1 7 9 3\"\n    ) == \"8\"\n\nassert solution(\n    \"2 3 5\"\n    ) == \"5\""
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 -10 -9 -10 -9 -9 -9\n-1 1 1 0 0 -1\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-1 1 1 0 0 -1\n-1 1 1 0 0 -1\n-1 1 1 0 0 -1\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -9\n-10 -10 -9 -10 -9 -9 -"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '34'\nassert solution(input) == '35'\nassert solution(input) == '30'\nassert solution(input) == '35'\nassert solution(input) == '30'\n"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"zeus\") == \"35\"\nassert solution(\"map\") == \"34\"\nassert solution(\"ares\") == \"34\"\nassert solution(\"are\") == \"34\"\nassert solution(\"\") == \"0\""
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('zeus') == 18, 'Wrong answer'\nassert solution('map') == 35, 'Wrong answer'\nassert solution('ares') == 34, 'Wrong answer'\n"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"zeus\", \"map\", \"ares\"]) == \"35\"\nassert solution([\"zeus\", \"map\", \"ares\", \"map\"]) == \"34\"\nassert solution([\"zeus\", \"map\", \"ares\", \"map\", \"map\"]) == \"35\"\nassert solution([\"zeus\", \"map\", \"map\", \"map\", \"map\"]) == \"35\"\nassert solution([\"zeus\", \"map\", \"map\", \"map\", \"map\", \"map\"]) == \"35\"\n"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 18\n\n-----Constraints-----\n1 <= stdin.length <= 100\nstdin consists of only lowercase English letters.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        # Write your code here\n        words = stdin.split()\n        num = 0\n        while len(words) > 0:\n            if words[0] == \"a\":\n                words.pop(0)\n                num += 1\n            elif words[0] == \"z\":\n                words.pop(0)\n                words.append(\"e\")\n                num += 1\n            elif words[0] == \"e\":\n                words.pop(0)\n                words.append(\"u\")\n                num += 1\n            elif words[0] == \"u\":\n                words.pop(0)\n                words.append(\"s\")\n                num += 1\n            elif words[0] == \"s\":\n                words.pop(0)\n                words.append(\"z\")\n                num += 1\n            else:\n                raise ValueError(\"Bad Input\")\n        if num == 0:\n            return 0\n        else:\n            return num"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"zeus\") == \"5\"\nassert solution(\"map\") == \"35\"\nassert solution(\"ares\") == \"34\"\nassert solution(\"gesle\") == \"26\"\nassert solution(\"das\") == \"3\"\n"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"zeus\") == 18\nassert solution(\"map\") == 35\nassert solution(\"ares\") == 34\nassert solution(\"szz\") == 0\nassert solution(\"asdf\") == -1\n"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"zeus\") == \"18\"\nassert solution(\"map\") == \"35\"\nassert solution(\"ares\") == \"34\"\nassert solution(\"zes\") == \"36\"\n"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('zeus') =='map'\nassert solution('map') == '35'\nassert solution('ares') == '34'\nassert solution('are') == '34'\nassert solution('ares') == '35'\n"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('zeus') == 18\nassert solution('map') == 35\nassert solution('ares') == 34\nassert solution('zxc') == 35\n\n\n\"\"\"\n\nimport re\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input() == \"0 4\") == 0, \"First case\"\nassert solution(input() == \"4 4\") == 0, \"Second case\"\nassert solution(input() == \"5 9\") == 4, \"Third case\"\nassert solution(input() == \"5 9\") == 9, \"Fourth case\"\nassert solution(input() == \"0 4\") == 1, \"Fifth case\"\n"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution()), \"No\"\n"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == '0 4'\nassert solution('3') == '0'\nassert solution('6') == '0'\nassert solution('7') == '0'\nassert solution('25') == '0'"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 0'"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0 4'\n"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1 1 2 1 3 4 5 6 5 8 7\") == 0, \"There is a problem in the first input.\"\nassert solution(\"1 1 2\") == 4, \"There is a problem in the second input.\"\nassert solution(\"2 2 5 4 7 8 9 10 10\") == 9, \"There is a problem in the third input.\"\nassert solution(\"3 1 2 3 4 5 6 7 8 9 10\") == 5, \"There is a problem in the fourth input.\"\nassert solution(\"3 6 5 7 8 9 10 12 13 15\") == 11, \"There is a problem in the fifth input.\"\n"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"3\\\") == 1\nassert solution(\\\"6\\\") == 4\nassert solution(\\\"7\\\") == 6\nassert solution(\\\"9\\\") == 25\nassert solution(\\\"89\\\") == 100\n"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0 4\"\n\nassert solution(stdin) == \"5 9\""
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\", \"6\", \"7\", \"25\"]) == \"4\"\nassert solution([\"6\", \"9\"]) == \"4\"\nassert solution([\"1\", \"5\"]) == \"4\"\nassert solution([\"3\", \"1\"]) == \"4\"\nassert solution([\"2\", \"6\"]) == \"4\"\n"
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"BGGGBG\"\n"
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"BGBGBG\") == \"BGGBG\"\nassert solution(\n    \"BGBGGB\") == \"BGGBG\"\nassert solution(\n    \"GGBGBG\") == \"GGGB\"\nassert solution(\n    \"GGGBGB\") == \"GGGB\""
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"GGGB\"\n\n------Examples-----\nThe first problem consists of a student sitting in the canteen until she leaves. \n\nInput\n5 1\nGGGB\n\nOutput\nGGGB\n\nInput\n4 1\nBGGBG\n\nOutput\nGGBGB\n\n------Examples-----\nThe first problem consists of a student sitting in the canteen until she leaves. \n\nInput\n5 3\nBGGBG\n\nOutput\nGGGB\n\nInput\n5 2\nBGGBG\n\nOutput\nGGBGB\n\nInput\n4 1\nGGGB\n\nOutput\nGGBGB\n\nInput\n4 1\nBGGBG\n\nOutput\nGGBGB\n\nInput\n4 1\nGGBGB\n\nOutput\nGGGB\n\nInput\n4 1\nGGGB\n\nOutput\nGGGB\n\nInput\n4 1\nBGGBG\n\nOutput\nGGGB\n\nInput\n4 1\nGGBGB\n\nOutput\nGGGB\n\n-----Solution-----\nThe solution is as follows. One position has a girl standing on the first position, and the other position has a boy standing on the second position. The way to transform each position is as follows. If a boy is standing on the i-th position, then the i-th character of string s will be \"B\" if it is the i-th position. If a girl is standing on the i-th position, then the i-th character of string s will be \"G\" if it is the (i + 1)-th position. \n\n\"\"\""
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('GGGB'), 'GGGB'\nassert solution('BGGB'), 'BGGB'"
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == \"GGGB\"\n"
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"BBGGBG\") == \"GGBGB\"\nassert solution(\"BBGGRGGBB\") == \"GGRGGRG\"\nassert solution(\"BBGGRBG\") == \"GGRBG\"\nassert solution(\"BBGGRBGB\") == \"GGRBGB\"\nassert solution
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"GGGB\"\nassert solution(stdin) == \"GGBGB\"\nassert solution(stdin) == \"GGBG\"\nassert solution(stdin) == \"BGGB\"\nassert solution(stdin) == \"GGGB\"\n"
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('{1 2 3 4 5 6 7 8 9 10}') == 'GGGB'\nassert solution('{B G G B G B G B G}') == 'B G G'\nassert solution('{
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'GBGGB'\nassert solution(stdin) == 'GGGB'\nassert solution(stdin) == 'BGGB'\n"
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"BGGBG\", \"The answer is incorrect\"\n"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1 1') == '1'\nassert solution('1 1 2') == '1'\nassert solution('1 2 1') == '2'\nassert solution('1 2 2') == '3'\nassert solution('1 3 1') == '3'\n"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"6\"]) == \"3\"\nassert solution([\"1\",\"2\",\"3\",\"6\"]) == \"3\"\nassert solution([\"1\",\"2\",\"3\",\"6\"]) == \"6\"\nassert solution([\"1\",\"2\",\"3\",\"6\"]) == \"16\"\n"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 1\") == \"3\"\nassert solution(\"6 2\") == \"875000008\"\nassert solution(\"60 5\") == \"237178099\"\n\nPass\n\nRuntime: 32 ms, faster than 45.03% of Python3 online submissions for S-Box Decomposition.\nMemory Usage: 18.5 MB, less than 98.66% of Python3 online submissions for S-Box Decomposition.\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n, k):\n        p, q = 1, 1\n        while n:\n            if n % 10**p == 0:\n                if q % 10**q == 0:\n                    n = n/10**q\n                else:\n                    n = n/10**q\n            else:\n                if q % 10**q == 0:\n                    n = n/10**q\n                else:\n                    n = n/10**q\n            p, q = p + 1, q + 1\n        return str(p) + str(q)"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '375000008'\nassert solution(stdin) == '237178099'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"875000008\"\nassert solution(stdin) == \"237178099\"\nassert solution(stdin) == \"15\""
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6, 1) == 3\nassert solution(6, 2) == 7\nassert solution(6, 3) == 24\nassert solution(6, 4) == 36\nassert solution(6, 5) == 45\n"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '9'\nassert solution(stdin) == '2'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('6 1') == '3'\nassert solution('6 2') == '11'\nassert solution('60 5') == '8'\nassert solution('60 6') == '6'\nassert solution('60 7') == '15'"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == str(3)\nassert solution(input()) == str(7)\nassert solution(input()) == str(237178099)\n"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"101\"\nassert solution(\"4 8\") == \"110110110101\"\nassert solution(\"4 10\") == \"11011011011011\"\nassert solution(\"1 5\") == \"11111011011011011\"\n"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(str(0) + \"0\" + str(1)) == str(0)\nassert solution(str(1) + \"0\" + str(0)) == str(1)\nassert solution(str(0) + \"0\" + str(0)) == str(-1)\n"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 101\nassert solution(4) == 110110110110101\nassert solution(8) == 1101101101101101"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 4\",\n    \"3 0 3 0\"\n    ), \"1 1 0 0 0 0 1\"\nassert solution(\n    \"1 1 0 0 0 0 1\",\n    \"0 0 0 0 0 0 1\"\n    ), \"1 1 1 0 0 0 0\"\nassert solution(\n    \"1 3 0 0 0 0 1\",\n    \"3 3 0 0 0 0 1\"\n    ), \"1 1 0 0 0 0 1\"\nassert solution(\n    \"1 1 0 0 0 0 1\",\n    \"3 2 0 0 0 0 1\"\n    ), \"1 1 1 0 0 0 1\"\nassert solution(\n    \"1 4\",\n    \"3 0 3 0\"\n    ), \"1 1 0 0 0 0 1\"\n"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1010110110101\""
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1110110110101'"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4') == '1010110110110101'\nassert solution('4') == '10101101101101001'\nassert solution('4') == '10101101101101001'\nassert solution('4') == '-1'\nassert solution('4') == -1\n"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"18 2\") == \"3 6 9\", \"Bad input\"\nassert solution(\"9 10\") == \"0 0 9\", \"Bad input\"\nassert solution(\"1000000000000 5\") == \"0 0 9\", \"Bad input\"\nassert solution(\"1000000000000 499999999999\") == \"83333333333 416666666665 500000000002\", \"Bad input\"\nassert solution(\"1000000000000 499999999999 1000000000000 5\") == \"0 0 9\", \"Bad input\"\n"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(14) == 9\nassert solution(123) == 83333333333\nassert solution(100000) == 0\nassert solution(100000500) == 83333333333\nassert solution(1231234) == 3\n"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 499999999999 500000000000\"\n\"\"\""
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 6 9\"\nassert solution(stdin) == \"0 0 9\"\nassert solution(stdin) == \"83333333333 416666666665 500000000002\"\n"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 499999999999 500000000000\"\n\n-----Constraints-----\n1 <= n <= 10^12\n1 <= k <= 10^12\n\"\"\"\nimport sys\nfrom itertools import combinations\n\nn, k = map(int, input().split())\nnumber_of_students = int(input())\n\nstudents_dict = {}\n\nfor _ in range(number_of_students):\n    student, *_ = map(int, input().split())\n    if student not in students_dict:\n        students_dict[student] = 1\n    else:\n        students_dict[student] += 1\n\nstudents_dict = sorted(students_dict.items(), key=lambda x: x[1], reverse=True)\n\nn_students = len(students_dict)"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1000000000000 5\") == \"3 6 9\"\nassert solution(\"9 10\") == \"0 0 9\"\nassert solution(\"1000000000000 499999999999\") == \"1 499999999999 500000000000\"\nassert solution(\"1000000000000 499999999999\") == \"1000000000000 499999999999\"\nassert solution(\"1000000000000 499999999999\") == \"1000000000000 499999999999\"\n"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"18\", \"2\"]) == \"3\"\nassert solution([\"9\", \"10\"]) == \"3\"\nassert solution([\"1\", \"1000000000000\"]) == \"3\"\nassert solution([\"1000000000000\", \"1000000000000\"]) == \"0\"\nassert solution([\"1000000000000\", \"1000000000000\", \"1000000000000\"]) == \"0\"\n"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"3 6 9\"\nassert solution(\"1 1\") == \"1 3 6\"\nassert solution(\"1 9\") == \"0 0 9\"\nassert solution(\"0 5\") == \"1 4666666665\""
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(lines.get().strip()) == \"3\"\nassert solution(lines.get().strip()) == \"6\"\nassert solution(lines.get().strip()) == \"9\"\nassert solution(lines.get().strip()) == \"0\"\n"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3 6 9'\nassert solution(stdin) == '9 10'\nassert solution(stdin) == '83333333333 416666666665 500000000002'\n"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(stdin)) == 'YES'\nassert solution(str(stdin)) == 'NO'\n"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input(\"Invalid Input\")) == \"NO\""
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----My Solution-----\n\nInstead of using str(x)[::-1] it's possible to build a string to satisfy the same requirements as input.\n\nBut the reason for the brute force is that the string to build can be obtained directly from the first and last index of the input string.\n\n\n-----Correct Answer-----"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nExplanation\nProblem:\n\nExample 1:\n\nInput\n321\n\nOutput\nNO\n\nInput\n3110\n\nOutput\nNO\n\nExample 2:\n\nInput\n100\n\nOutput\nYES\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n\n------Time complexity-------\nO(n^2)\n\n------Space complexity-------\nO(1)\n\n\n------Time complexity-------\nO(n)\n\n------Space complexity-------\nO(1)\n\n'''\n"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\n\n\n-----Code-----"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7\") == 1\nassert solution(\"10\") == 2\nassert solution(\"100\") == 2\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 2500\n1 <= stdin[i] <= 25\n\n\n-----Time Limit-----\nFor caution:  this is not necessarily the best solution because it is not a complete forest\n\nclass Solution:\n    def xoranges(self, s: str) -> int:\n        a = s.count('a')\n        b = s.count('b')\n        c = s.count('c')\n        d = s.count('d')\n        e = s.count('e')\n        f = s.count('f')\n        g = s.count('g')\n        h = s.count('h')\n        i = s.count('i')\n        j = s.count('j')\n        k = s.count('k')\n        l = s.count('l')\n        m = s.count('m')\n        n = s.count('n')\n        o = s.count('o')\n        p = s.count('p')\n        q = s.count('q')\n        r = s.count('r')\n        s = s.count('s')\n        t = s.count('t')\n        u = s.count('u')\n        v = s.count('v')\n        w = s.count('w')\n        x = s.count('x')\n        y = s.count('y')\n        z = s.count('z')\n        i = s.count('i')\n        j = s.count('j')\n        k = s.count('k')\n        l = s.count('l')\n        m = s.count('m')\n        n = s.count('n')\n        o = s.count('o')\n        p = s.count('p')\n        q = s.count('q')\n        r = s.count('r')\n        s = s.count('s')\n        t = s.count('t')\n        u = s.count('u')\n        v = s.count('v')\n        w = s.count('w')\n        x = s.count('x')\n        y = s.count('y')\n        z = s.count('z')\n\n        return ((a+b+c)+(d+e+f+g)+(h+i+j+k+l+m+n+o+p+q+r+s+t+u+v+w)+(x+y+z))\n\n-----Time complexity-----\nO(n^2)\n\nO(n)\n\n\n\n-----Space Complexity-----\nO(1)"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(6) == 1\nassert solution(10) == 2\n\n--------------------------------------------------------------------------------------\nThe only xorangles in the second sample are (5, 2, 2), (2, 2, 4), (2, 3, 3), (3, 3, 5), (5, 3, 2), (3, 2, 4).\n\nBecause the xor-sum of the first xorangles is 1, the non-degenerate triangle is (5, 2, 2) and we count the first triangle as 2.\n\nThe xor-sum of the second triangle is 0, since the non-degenerate triangle has no xorangles.\n\nThe non-degenerate triangle is (5, 2, 2).\n\nThe xor-sum of the triangle is 0, because the non-degenerate triangle has one xorangle of order 2.\n\nThe non-degenerate triangle is (5, 2, 2).\n\nInput\n\nSample Input\n\n3\n\nSample Output\n\n2\n\nExplanation\n\nThe only xorangles in the second sample are (5, 2, 2), (2, 2, 4), (2, 3, 3), (3, 3, 5), (5, 3, 2), (3, 2, 4).\n\n---> xor(5, 2, 2) = 0, because the xor of 5 and 2 is 0.\n\n---> xor(5, 2, 3) = 0, because the xor of 5 and 3 is 0.\n\n---> xor(5, 3, 3) = 0, because the xor of 5 and 3 is 0.\n\n---> xor(5, 3, 2) = 0, because the xor of 5 and 2 is 0.\n\n---> xor(5, 2, 4) = 0, because the xor of 5 and 4 is 0.\n\n---> xor(5, 2, 2) = 0, because the xor of 5 and 2 is 0.\n\n---> xor(5, 2, 1) = 0, because the xor of 5 and 1 is 0.\n\n---> xor(5, 1, 1) = 0, because the xor of 5 and 1 is 0.\n\n---> xor(5, 1, 2) = 0, because the xor of 5 and 2 is 0.\n\n---> xor(5, 1, 3) = 0, because the xor of 5 and 3 is 0.\n\n---> xor(5, 1, 4) = 0, because the xor of 5 and 4 is 0.\n\n---> xor(5, 1, 2) = 0, because the xor of 5 and 2 is 0.\n\n---> xor(5, 1, 1) = 0, because the xor of 5 and 1 is 0.\n\n---> xor(5, 1, 0) = 0, because the xor of 5 and 0 is 0.\n\n---> xor(5, 0, 0) = 0, because the xor of 5 and 0 is 0.\n\n---> xor(5, 0, 1) = 0, because the xor of 5 and 1 is 0.\n\n---> xor(5, 0, 2) = 0, because the xor of 5 and 2 is 0.\n\n---> xor(5, 0, 3) = 0, because the xor of 5 and 3 is 0.\n\n---> xor(5, 0, 4) = 0, because the xor of 5 and 4 is 0.\n\n---> xor(5, 0, 2) = 0, because the xor of 5 and 2 is 0.\n\n---> xor(5, 0, 1) = 0, because the xor of 5 and 1 is 0.\n\n---> xor(5, 0, 0) = 0, because the xor of 5 and 0 is 0.\n\n---> xor(5, 0, -1) = 0, because the xor of 5 and -1 is 0.\n\n---> xor(5, -1, 0) = 0, because the xor of 5 and -1 is 0.\n\n---> xor(5, -1, 1) = 0, because the xor of 5 and -1 is 0.\n\n---> xor(5, -1, 2) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -1, 3) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -1, 4) = 0, because the xor of 5 and -4 is 0.\n\n---> xor(5, -1, 2) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -1, 1) = 0, because the xor of 5 and -1 is 0.\n\n---> xor(5, -1, 0) = 0, because the xor of 5 and -1 is 0.\n\n---> xor(5, -1, -1) = 0, because the xor of 5 and -1 is 0.\n\n---> xor(5, -1, -2) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, 0) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, 1) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, 2) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, 3) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, 4) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, 2) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, 1) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, 0) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, -1) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, -2) = 0, because the xor of 5 and -2 is 0.\n\n---> xor(5, -2, -3) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -3, 0) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -3, 1) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -3, 2) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -3, 3) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -3, 4) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -3, 2) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -3, 1) = 0, because the xor of 5 and -3 is 0.\n\n---> xor(5, -3, 0) = 0, because the xor"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp := [6]) == 1\nassert solution(inp := [10]) == 2\nassert solution(inp := [11, 12, 13]) == 0\nassert solution(inp := [1, 2, 3]) == 0\nassert solution(inp := [1, 2, 3, 4]) == 1\n"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 1\nassert solution(inp) == 2\n\n----Examples----\nInput\n5\n\nOutput\n4\n\n\"\"\"\n\nimport sys\n\nsys.setrecursionlimit(100000)\n\nn = int(sys.stdin.readline())\n\nc_map = []\n\nfor i in range(n):\n    c_map.append(list(map(int, sys.stdin.readline().split())))\n\nresult = []\n"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2) == 1, \"Error\"\nassert solution(1, 2) == 0, \"Error\"\n\"\"\""
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n\n-----Constraints-----\n1 <= stdin.length <= 2500\n\nCONSTRAINTS\n1 <= n <= 5000\n\n\n-----Time Complexity-----\nO(n^3)\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 1\n\n\n-----Constraints-----\n\n0 < n < 10^6\n\n\n------Time complexity------\nEasy\n\nA: O(2^n), where n is the size of the input.\nB: O(n)\n\n\n------Space Complexity------\nEasy\n\nA: O(n)\n\nB: O(n)\n\n\n------Algorithm-----\n\nThe approach relies on the fact that there are n+2 distinct xorangles in the given input. The 2nd solution would be to reduce the number of distinct xorangles for n to the least possible. To do this, we'll find a set of distinct xorangles in the input by looking at the smallest xorangle and going through the set to see if the smallest is (3, 5, 6). In the process we will create a set of distinct xorangles for the smallest set.\n\nTo do this, we'll use binary search. Starting with the smallest set and moving down, we'll go through each of the elements in the smallest set and see if we can satisfy them.\n\nThen we'll take the index of the smallest xor. We'll use the answer from the previous iteration to increment the answer and decrement the index.\n\nWe'll use a set of all distinct xorangles as a set of valid combinations.\nWe'll then count the number of valid combinations.\nWe'll continue moving down the set of valid combinations until we're left with the number of distinct combinations.\n\nWe'll keep a count of the number of distinct combinations as a variable.\n\nNOTE: Only include the answer when it is needed.\n\nInput\n\nThe input consists of a string of n lines (where n is the number of integers).\n\nOutput\n\nPrint the answer to the problem.\n\"\"\"\nclass Solution:\n    def xorSum(self, n: int) -> int:\n        def find(nums: list[int], x: int) -> int:\n            if len(nums) == 1:\n                return nums.index(x)\n            else:\n                return find(nums[1:], x) + find(nums[:1], x)\n        \n        def get_ans(xor: int) -> int:\n            return xor & xor ^ xor\n        \n        # no solution possible\n        if n == 0:\n            return 0\n        \n        if n <= 1:\n            return 1\n        \n        xor = 0\n        # find the largest xor in the set\n        for i in range(n):\n            xor = get_ans(xor)\n        \n        # find the xor of the set\n        xor_sum = 0\n        for i in range(n):\n            xor_sum = get_ans(xor_sum)\n        \n        # the answer is the xor of the xor_sum + the largest xor\n        return xor_sum + (find(nums, xor_sum) - find(nums, xor))\n"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nThe second sample test shows you the solution:\n\n[Image]\n\nAfter the first visit of cell (0, 0) the ice on the first cell is cracked and the ice from cell (0, 2) becomes cracked.\n"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n    print(\"\\n[Test Result]\")\n    print(\"Yes\\n\")\n\n\nExplanation\n\nInput:\nn = 4\nm = 6\nX...XX.\n.X..X.\n......\n1 6\n2 2\n\nOutput:\nYES\n\nInput:\nn = 5\nm = 4\n..X.\n.X..X.\n......\n2 2\n1 6\n\nOutput:\nNO\n\n\nInput:\nn = 4\nm = 5\nX.XX.\n.XX..X.\n......\n2 2\n1 6\n\nOutput:\nNO\n\n\nInput:\nn = 3\nm = 3\nX...XX.\n.X..\n......\n1 2\n\nOutput:\nYES\n'''"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Explanation-----\n\nIn the second sample, the first line has a string \"..X.X.X.\" in the middle. Let's skip this line. Let's skip the line containing \"..X.X.X.\", because we want to skip it twice.\n\nInput\n4 7\n.X..\nX...X..\nX......\n2 2\n1 6\n\nOutput\nNO\n\nThis is the solution.\n\n\"\"\""
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('.') == '.'\nassert solution('X') == 'X'\nassert solution('....') == '.'\nassert solution('X.X.X') == 'X'\nassert solution('...X') == '.'\n"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"YES\"\n\n\n-----Constraints-----\n\n1 \u2264 n, m \u2264 100\n\n\n-----Sample Tests-----\ninput:\n4 6\n.XX..\n...XX.\n.X..X.\n......\n1 6\n2 2\n\noutput:\nYES\n\ninput:\n4 7\n.X..\n...X\nX.X.\n.XX..\n.XX..\n.X..X.\n...X.\n.XX..\n2 2\n\noutput:\nNO\n\ninput:\n4 2\n.X.\n...X\nX.X.\n.X..X.\n...X.\n.X..X.\n.X..X.\n.X..X.\n1 1\n\noutput:\nNO\n\n\n\"\"\""
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 3 3 2 2') == \"0\"\nassert solution('5 2') == \"4\"\nassert solution('5 4') == \"0\"\nassert solution('3 3 3 3') == \"1\"\nassert solution('5 4 1 2') == \"2\"\n"
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"5\""
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n'''\n5 2\n1 4\n2 5\n''') == '2'\n"
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 2) == 3\n\"\"\""
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"1\"\n\n    pass"
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\n\"\"\"\n"
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('') == '0'\nassert solution('a') == '1'\nassert solution('ab') == '2'\nassert solution('abc') == '1'\nassert solution('abcd') == '3'\n"
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    [\n        [1,1],\n        [2,1],\n        [3,1],\n        [1,2],\n        [2,3]\n    ]\n) == \"1\"\n\nprint(\"Sample Input:\")\nprint(\n    \"[1,1]\"\n)\nprint(\n    \"[2,1]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,2]\"\n)\nprint(\n    \"[2,3]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,4]\"\n)\nprint(\n    \"[4,1]\"\n)\nprint(\n    \"[2,5]\"\n)\nprint(\n    \"[5,1]\"\n)\nprint(\n    \"[3,5]\"\n)\nprint(\n    \"[4,4]\"\n)\nprint(\n    \"[1,3]\"\n)\nprint(\n    \"[3,3]\"\n)\nassert solution(\n    [\n        [1,1],\n        [2,1],\n        [3,1],\n        [1,2],\n        [2,3]\n    ]\n) == \"1\"\n\nprint(\"Sample Output:\")\nprint(\n    \"[1,1]\"\n)\nprint(\n    \"[2,1]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,2]\"\n)\nprint(\n    \"[2,3]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,4]\"\n)\nprint(\n    \"[4,1]\"\n)\nprint(\n    \"[2,5]\"\n)\nprint(\n    \"[5,1]\"\n)\nprint(\n    \"[3,5]\"\n)\nprint(\n    \"[4,4]\"\n)\nprint(\n    \"[1,3]\"\n)\nprint(\n    \"[3,3]\"\n)\nassert solution(\n    [\n        [1,1],\n        [2,1],\n        [3,1],\n        [1,2],\n        [2,3]\n    ]\n) == \"1\"\n\nprint(\"Sample Input:\")\nprint(\n    \"[1,1]\"\n)\nprint(\n    \"[2,1]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,2]\"\n)\nprint(\n    \"[2,3]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,4]\"\n)\nprint(\n    \"[4,1]\"\n)\nprint(\n    \"[2,5]\"\n)\nprint(\n    \"[5,1]\"\n)\nprint(\n    \"[3,5]\"\n)\nprint(\n    \"[4,4]\"\n)\nprint(\n    \"[1,3]\"\n)\nprint(\n    \"[3,3]\"\n)\nassert solution(\n    [\n        [1,1],\n        [2,1],\n        [3,1],\n        [1,2],\n        [2,3]\n    ]\n) == \"1\"\n\nprint(\"Sample Output:\")\nprint(\n    \"[1,1]\"\n)\nprint(\n    \"[2,1]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,2]\"\n)\nprint(\n    \"[2,3]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,4]\"\n)\nprint(\n    \"[4,1]\"\n)\nprint(\n    \"[2,5]\"\n)\nprint(\n    \"[5,1]\"\n)\nprint(\n    \"[3,5]\"\n)\nprint(\n    \"[4,4]\"\n)\nprint(\n    \"[1,3]\"\n)\nprint(\n    \"[3,3]\"\n)\nassert solution(\n    [\n        [1,1],\n        [2,1],\n        [3,1],\n        [1,2],\n        [2,3]\n    ]\n) == \"1\"\n\nprint(\"Sample Input:\")\nprint(\n    \"[1,1]\"\n)\nprint(\n    \"[2,1]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,2]\"\n)\nprint(\n    \"[2,3]\"\n)\nprint(\n    \"[3,1]\"\n)\nprint(\n    \"[1,4]\"\n)\nprint(\n    \"[4,1]\"\n)\nprint(\n    \"[2,5]\"\n)\nprint(\n    \"[5,1]\"\n)\nprint(\n    \"[3,5]\"\n)\nprint(\n    \"[4,4]\"\n)\nprint(\n    \"[1,3]\"\n)\nprint(\n    \"[3,3]\"\n)\n"
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5,2,4,5,1,4,2) == 1\nassert solution(5,2,4,5,1,4,1) == 0\nassert solution(5,2,3,5,1,2,3) == 2\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"first\", \"Second winner\"\nassert solution(\"-1\") == \"first\", \"Second winner\"\nassert solution(\"-2\") == \"second\", \"Second winner\"\nassert solution(\"3\") == \"first\", \"Second winner\"\nassert solution(\"4\") == \"second\", \"Second winner\"\n"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5') =='second'\nassert solution('3') == 'first'\n\nInput\n2\n3\n-3\n-4\n\nOutput\nsecond\n\nInput\n2\n-1\n-2\n3\n\nOutput\nfirst\n'''\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"second\"\nassert solution(stdin) == \"first\"\n\nassert solution(stdin)!= \"first\"\nassert solution(stdin)!= \"second\"\n\nassert solution(stdin)!= \"second\"\n"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"second\"\n'''\nimport sys\n\nt = int(sys.stdin.readline())\n\nfor _ in range(t):\n    stdin = sys.stdin.readline()\n    x = int(stdin.split()[0])\n    y = int(stdin.split()[1])\n\n    print(x,y)\n"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"second\"\nassert solution(stdin) == \"first\"\n\n\"\"\"\nn = int(stdin.readline().rstrip())\na = list(map(int,stdin.readline().split()))\nv = sorted(a,reverse=True)\nprint(v[-1])\n"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == \"second\""
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"second\"\n\nassert solution(input()) == \"first\"\n\n\"\"\"\n"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"first\"\nassert solution(stdin) == \"second\"\n\n--------------------------------------------------"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == 'first'\nassert solution('-3') =='second'\nassert solution('5') == 'first'\n\n\n-----IMPORTANT-----\n\nAll my submissions were presented on the official wiki page. I will not attempt to replicate your implementation of the approach.\nI only have two types of test cases to show that, one of them is the correct answer. When it is correct, the other one should be more clever and concise.\n\nHowever, this approach does not work for 1 argument cases.\n\nWhich of them do you think you should use?\n\nWhy should I use the correct solution?\n\nWhy should you use the incorrect solution?\n\nWhat are you sure of?\n\nWhat problem is there to solve?\n\n\"\"\""
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 1 1\") == \"first\"\nassert solution(\"3 -1 -1 -1 1\") == \"second\"\nassert solution(\"3 2 -1 -1\") == \"first\"\nassert solution(\"1 -1 -1 -1 -1 -1\") == \"second\"\nassert solution(\"1 1\") == \"first\"\n\n\"\"\""
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'NO'\n\"\"\"\n"
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\"abcdefghijklm\", \"qwe123\"]\n) == \"NO\"\n\nassert solution(\n    [\"qwe123\", \"abcdefghijklm\", \"qwe123\"]\n) == \"YES\"\n\nassert solution(\n    [\"edcba\", \"abcd\", \"cdca\"]\n) == \"NO\"\n\nassert solution(\n    [\"a\", \"aa\", \"aaaa\", \"aaa\", \"aaaaaaaa\", \"aaaaaaaaaaaa\"]\n) == \"YES\"\n"
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nprint('PASS')\n\"\"\"\nclass Solution:\n    def solution(self, stdin):\n        text = stdin.split()\n        n = int(text[0])\n        string = text[1]\n        string = list(string)\n        for i in range(n):\n            string[i] = string[i].replace('a', '2')\n            string[i] = string[i].replace('b', '4')\n            string[i] = string[i].replace('c', '6')\n            string[i] = string[i].replace('d', '8')\n            string[i] = string[i].replace('e', '10')\n            string[i] = string[i].replace('f', '12')\n            string[i] = string[i].replace('g', '14')\n            string[i] = string[i].replace('h', '16')\n            string[i] = string[i].replace('i', '18')\n            string[i] = string[i].replace('j', '20')\n            string[i] = string[i].replace('k', '22')\n            string[i] = string[i].replace('l', '24')\n            string[i] = string[i].replace('m', '26')\n            string[i] = string[i].replace('n', '28')\n            string[i] = string[i].replace('o', '30')\n            string[i] = string[i].replace('p', '32')\n            string[i] = string[i].replace('q', '34')\n            string[i] = string[i].replace('r', '36')\n            string[i] = string[i].replace('s', '38')\n            string[i] = string[i].replace('t', '40')\n        string = ''.join(string)\n        if string == string[::-1]:\n            return \"YES\"\n        else:\n            return \"NO\"\n\ninp = sys.stdin.readline\n\nT = int(inp().strip())\nfor _ in range(T):\n    n = int(inp().strip())\n    string = ''.join(inp().strip()[1:-1])\n    print(solution(string))\n"
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abc') == 'YES'\nassert solution('abcdef') == 'YES'\nassert solution('abcd') == 'NO'\nassert solution('abcde') == 'NO'\nassert solution('abcd') == 'NO'\n"
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abccba\") == \"YES\"\nassert solution(\"bcbbcb\") == \"NO\"\nassert solution(\"cf\") == \"NO\"\nassert solution(\"adfa\") == \"NO\"\nassert solution(\"ml\") == \"YES\"\n"
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\""
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aaabbb\") == \"YES\"\nassert solution(\"bbbca\") == \"YES\"\nassert solution(\"aaa\") == \"YES\"\nassert solution(\"abccba\") == \"NO\"\nassert solution(\"cfabb\") == \"YES\"\n"
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\n\n----FAILURES----"
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'ayd'"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"ayd\"\nassert solution(stdin) == \"ayd\"\nassert solution(stdin) == \"ayd\"\n\nfor t in range(int(input())):\n    stdin, stdout = input().split()\n    t = int(stdin)\n    stdout = stdout.lower()\n    for i in range(1, len(stdout)):\n        if stdout[i-1] == \"d\" and stdout[i] == \"e\" and stdout[i+1] == \"f\":\n            stdout = stdout[0:i] + \"a\" + stdout[i:]\n            break\n    print(stdout)\n"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"ayd\"\n"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abc\") == \"ayd\"\nassert solution(\"xyc\") == \"c\"\nassert solution(\"cab\") == \"c\"\nassert solution(\"cbc\") == \"b\"\nassert solution(\"cbcac\") == \"b\"\n"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"xyc\") == \"ayd\"\nassert solution(\"abc\") == \"-1\""
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"abc\") == \"ayd\"\nassert solution(\"abc\") == -1\nassert solution(\"xyc\") == \"ayd\"\nassert solution(\"xyc\") == -1\n\n\"\"\"\n"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"ayd\"\nassert solution(stdin) == -1\n"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('abcd') == 'abd'\nassert solution('abcd') == -1\nassert solution('xyz') == -1\nassert solution('abc') == -1\nassert solution('xyx') == -1\n"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abc') == 'xyc', 'xyc'\nassert solution('xy') == 'cd', 'cd'\nassert solution('ab') == 'ac', 'ac'\nassert solution('abc') == 'ayd', 'ayd'"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"ayd\""
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"ab\"\n) == \"YES\"\nassert solution(\n    \"abc\"\n) == \"YES\"\nassert solution(\n    \"ab\"\n) == \"NO\"\nassert solution(\n    \"aab\"\n) == \"NO\"\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('abc') == 'YES'\nassert solution('abc') == 'NO'\nassert solution('abc') == 'YES'\nassert solution('abc') == 'NO'\nassert solution('ab') == 'YES'\n"
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 s.length \u2264 20\ns contains lowercase English letters, all the others are bad.\n\nTime Limit: 1 second\n\nExample:\n\nInput:\n\n5\nabc\na?a?a*\n4\nabcde\nabcd\nabcde\nabcde\naabc\n\nOutput:\n\nYES\nNO\nYES\n\n\n\n-----Side-effects-----\n\nRecursive solution is tested on a few lines. \n\n\n-----Time complexity-----\n\nAs usual, the recursive function takes log(n) time.\n\nFor i:\n\ni = 0\nwhile i < n:\n    i += 1\n    if i % 2 == 0:\n        pass\n    else:\n        pass\n    if i % 2 == 1:\n        pass\n    else:\n        pass\n    if i % 3 == 0:\n        pass\n    else:\n        pass\n    if i % 3 == 1:\n        pass\n    else:\n        pass\n    if i % 3 == 2:\n        pass\n    else:\n        pass\n\nIn the recursive function, the time complexity is ~n^2, because it only takes log(n) time.\n\nConstant-time solution is tested on two lines.\n\n\n-----Memory usage-----\n\nSince a certain amount of memory is allocated for recursive function, it's called as long as it's not used too often.\n\nIn this case, we assume that the recursive function is not only called when it's called, and not when it is called in the opposite order (since the recursive function is used in the opposite order).\n\nSo, if we assume that the recursive function is called in the opposite order, we can use a large number of memory.\n\nIn other words, we assume that we can call the function in the opposite order, and can use the larger number of memory.\n\nIn general, the recursive function will be called in the opposite order.\n\nIn Python, a call to the recursive function is called as follows:"
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"a?a?a*\") == \"NO\"\nassert solution(\"abcabcabc\") == \"NO\"\nassert solution(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ab\") == \"YES\"\nassert solution(\"a?a\") == \"YES\"\nassert solution(\"aab\") == \"YES\"\nassert solution(\"aabc\") == \"NO\"\nassert solution(\"a\") == \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"YES\""
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ab\") == \"NO\"\nassert solution(\"ab\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"abca\") == \"YES\"\nassert solution(\"a\") == \"NO\"\n"
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('abc') == 'NO', \"incorrect answer\"\nassert solution('abcc') == 'YES', \"incorrect answer\"\nassert solution('abda') == 'NO', \"incorrect answer\"\nassert solution('abbb') == 'NO', \"incorrect answer\"\nassert solution('abacaba') == 'YES', \"incorrect answer\"\n"
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 15\"\n\"\"\"\n\nimport time\n\nn, k = map(int, input().split())\n\npassword = input()\n\npassword_list = list(map(str, input().split()))\n\nfor password in password_list:\n    if len(password) > k:\n        print(time.time() - time.time(seconds=5))\n    elif len(password) == k:\n        print(time.time() - time.time(seconds=5))\n    elif len(password) < k:\n        print(time.time() - time.time(seconds=2))\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 2') == '3'\nassert solution('4 100') == '3'\nassert solution('4 100') == '2'\nassert solution('4 100') == '2'\nassert solution('4 100') == '2'\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1\") == \"3\"\nassert solution(\"4 100\") == \"3\"\nassert solution(\"4 100\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1 15'\nassert solution(stdin) == '3 4'\n\n\n\"\"\"\n\nclass Solution:\n    def maxSecond(self, time: int, n: int, m: int) -> int:\n        \n        #time\n        # n and m\n        \n        #return the n and m value\n        # that is, it takes at most m seconds to enter\n        # all n passwords\n        \n        #tried first\n        #tried second\n        \n        #return the best\n        #answer if it is not exist\n        \n        #return the best if it is exist\n        #but if it is not exist, it take less seconds\n        \n        \n        #question\n        #you need to find the index of the n passwords\n        #and then iterate over them to find the answer\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        #tried first\n        #tried second\n        \n        #return the best\n        #answer if it is not exist\n        \n        #return the best if it is exist\n        #but if it is not exist, it take less seconds\n        \n        #question\n        #you need to find the index of the n passwords\n        #and then iterate over them to find the answer\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        #return the best\n        #answer if it is not exist\n        \n        #return the best if it is exist\n        #but if it is not exist, it take less seconds\n        \n        #question\n        #you need to find the index of the n passwords\n        #and then iterate over them to find the answer\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        #return the best\n        #answer if it is not exist\n        \n        #return the best if it is exist\n        #but if it is not exist, it take less seconds\n        \n        \n        #question\n        #you need to find the index of the n passwords\n        #and then iterate over them to find the answer\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        #return the best\n        #answer if it is not exist\n        \n        #return the best if it is exist\n        #but if it is not exist, it take less seconds\n        \n        \n        #question\n        #you need to find the index of the n passwords\n        #and then iterate over them to find the answer\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        #return the best\n        #answer if it is not exist\n        \n        #return the best if it is exist\n        #but if it is not exist, it take less seconds\n        \n        \n        #question\n        #you need to find the index of the n passwords\n        #and then iterate over them to find the answer\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return the n and m value\n        # that is, it takes at most m seconds to enter\n        \n        #return the best\n        #answer if it is not exist\n        \n        #return the best if it is exist\n        #but if it is not exist, it take less seconds\n        \n        \n        #question\n        #you need to find the index of the n passwords\n        #and then iterate over them to find the answer\n        \n        \n        #time\n        # time(n)\n        #time(m)\n        #time(n, m)\n        \n        #n <= m <= n * m\n        \n        # return"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"Error\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 15\""
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"time\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 15\"\n"
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Second'\nassert solution(stdin) == 'Second'\n\n\n\nassert solution(stdin) == 'First'\nassert solution(stdin) == 'First'\n\n\"\"\""
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"First\""
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\n"
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Second\"\n\n-----Constraints-----\n1 <= n <= 10^6\n\n1 <= a_i <= 10^9\n\n-----Time Limit-----\n1 sec\n\n-----Memory Limit-----\n15 MB\n\n--- Nguyen Van Duc ---\n\"\"\"\n"
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == \"Second\"\nassert solution(10) == \"First\"\nassert solution(0) == \"First\""
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Second\"\n\n\"\"\""
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"First\"\n\nassert solution(stdin) == \"Second\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 3000\n0 <= stdin[i] <= 10^9\n\n-----Submissions-----\n\nApproaches\nO(N) | O(N)\n\nApproach:\nCreate an array that can be turned into a subsequence of length N.\nThen make two players move this subsequence in sequence by removing from the array it.\nThen remove it from the array.\n\nO(N) | O(1)\n\nApproach:\nMake two players move subsequence of length N.\nThen remove it from array.\nFinally, repeat the process again.\n\n\n\n\nConstraints:\n1 <= n <= 10^6\n\n2 <= stdin.length <= 10^6\n\n1 <= a_1, a_2,..., a_{n} <= 10^9\n\n\n-----Examples-----\nInput\n4\n1 3 2 3\n\nOutput\nSecond\n\nInput\n1\n1 2 3 4 5 6\n\nOutput\nSecond\n\n\n-----Note-----\n\nIn first sample, only the first player can not make a move.\nIn second, the second player can not make a move.\nIn third, the third player can not make a move.\nIn fourth, only the second player can make a move.\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^6\n1 <= a_1, a_2,..., a_{n} <= 10^9\n\n\n-----Solution-----\n\n1.1 The solution can be simplified.\n\n2.2 The solution can be simplified to have only one move.\n\n3.3 The solution can be simplified to have only two moves.\n\n\"\"\""
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 'First'\nassert solution(2) == 'Second'\n\n'''"
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"Second\" or solution(input) == \"First\"\n"
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 2, \"expected 1 row, got: \" + str(5)\nassert solution(8) == 8, \"expected 8 rows, got: \" + str(8)\nassert solution(999999) == 1, \"expected 1 row, got: \" + str(999999)\nassert solution(1) == 1, \"expected 1 column, got: \" + str(1)"
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"8 8\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"999 1001\""
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(12) == 2\nassert solution(1220) == 2\nassert solution(12500) == 2\nassert solution(12345) == 5\nassert solution(123456) == 8\n"
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"8 4\"\nassert solution(input) == \"8 8\"\nassert solution(input) == \"1 5\"\nassert solution(input) == \"999 1001\""
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"8 8\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"999 1001\"\n\"\"\""
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8 + 2 * 8\n"
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 1, \"5\"\nassert solution(5) == 4, \"5\"\nassert solution(999999) == 1, \"999999\"\nassert solution(999999) == 2, \"999999\"\nassert solution(10000) == 1, \"10000\"\n"
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == (\"2 4\", \"8\", \"1 5\")\nassert solution(stdin) == (\"8 8\", \"1 5\")\nassert solution(stdin) == (\"999 1001\", \"\")\n"
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 2, \"Not 5\"\nassert solution(999) == 8, \"Not 999\"\nassert solution(999999) == 1, \"Not 9991\"\nassert solution(0) == 4, \"Not 0\"\nassert solution(1) == 5, \"Not 1\"\n"
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == {\n    \"1\": 1,\n    \"5\": 5,\n    \"5\": 5,\n    \"4\": 4,\n    \"4\": 4,\n    \"4\": 4,\n    \"3\": 3,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"3\": 3,\n    \"5\": 5,\n    \"5\": 5,\n    \"4\": 4,\n    \"4\": 4,\n    \"4\": 4,\n    \"3\": 3,\n    \"4\": 4,\n    \"4\": 4,\n    \"3\": 3,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \"1\": 1,\n    \""
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0Lil\") == \"Yes\"\nassert solution(\"La0\") == \"No\"\nassert solution(\"2a0\") == \"No\"\nassert solution(\"1a0\") == \"Yes\"\nassert solution(\"La1\") == \"No\"\n"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3_wat') == 'Yes'\nassert solution('001_wat') == 'No'\nassert solution('00000_wat') == 'No'\nassert solution('00_wat') == 'Yes'\nassert solution('00_wat') == 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Yes'\n\n\n-----Sample Input-----\n\n4\n10\n0\n4\n0\n0\n0\n0\n\nSample Output\nYes\n\n-----Sample Output-----\n\n4\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n5\n10\n2\n0\n2\n0\n0\n0\n0\n0\n0\n0\n\nSample Output\nNo\n\n-----Sample Output-----\n\n2\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n1\n10\n2\n2\n0\n0\n0\n0\n0\n0\n0\n0\n\nSample Output\nNo\n\n-----Sample Output-----\n\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n3\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Output-----\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Input-----\n\n1\n10\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Sample Output-----\n\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('_wat') == 'Yes', 'No'\nassert solution('_wat') == 'No', 'No'\nassert solution('La0') == 'No', 'No'\nassert solution('La0') == 'Yes', 'Yes'\nassert solution('La0') == 'No', 'No'\n"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'Yes'\n"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"No\"\n"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\"\"\"\n"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5\\n1 2 3 4\\n-1 2\\n3 4\\n-1 4\\n1 5\\n3 6\\n-1 4\\n2 4\\n3 7\\n-1 3\\n1 7\\n4 7\\n-1 5\\n5 8\\n-1 8\\n6 7\\n-1 9\\n1 8\\n4 7\\n-1 7\\n1 8\\n-1 9\\n1 8\\n-1 7\\n-1 8\\n7 8\\n-1 9\\n3 7\\n-1 8\\n4 7\\n-1 8\\n1 8\\n-1 9\\n1 8\\n-1 9\\n1 8\\n-1 8\\n-1 9\\n1 8\\n-1 9\\n-1 9\\n1 8\\n-1 9\\n1 8\\n-1 9\\n-1 9\\n1 8\\n-1 9\\n1 8\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1 9\\n-1"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 4 0 0 -2 -2 0 0\") == \"Yes\"\nassert solution(\"5 5 7 6 -2 -2 -2 -2 -2 0\") == \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\"\"\""
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('', '', '') == 'Yes'\nassert solution('', '', '') == 'No'\nassert solution('', '', '') == 'No'\nassert solution('', '', '') == 'No'\nassert solution('', '', '') == 'No'\n"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\n\nprint(\"Example 1:\")\nprint(\"Input :\")\nprint(\"stdin : 3\")\nprint(\"Output :\")\nprint(\"Yes\")\n\nprint(\"Example 2:\")\nprint(\"Input :\")\nprint(\"stdin : -1 0 3 0 2 -5 -1\")\nprint(\"Output :\")\nprint(\"Yes\")\n\nprint(\"Example 3:\")\nprint(\"Input :\")\nprint(\"stdin : 1000000000 0 0 0 0\")\nprint(\"Output :\")\nprint(\"No\")"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\\n5\\n5\\n5\\n5\") == \"Yes\"\nassert solution(\"5\\n5\\n-1\\n-2\\n-3\\n-5\\n-4\\n-4\\n-2\\n-2\\n-2\\n-2\\n-2\") == \"No\"\n\n'''\n"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"5\") == \"No\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10') == 'Yes'\nassert solution('5') == 'Yes'\nassert solution('15') == 'No'\nassert solution('1') == 'No'\nassert solution('10000') == 'No'"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"5\") == \"No\"\n"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 5) == 2\nassert solution(2, 2) == 2\nassert solution(2, 5) == 2\nassert solution(9, 4) == 11\nassert solution(9, 5) == 2\n"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n\nA single string $a$ has no intersection and it is a substring of $a$ which has non-empty intersection.\n\nA single string $b$ has no intersection and it is a substring of $b$ which has non-empty intersection.\n\nA single string $s$ has no intersection and it is a substring of $s$.\n\nTwo strings $a$ and $b$ have non-empty intersection, i.e. there exists at least one integer $x$, such that $l_1 \\leq x \\leq r_1$ and $l_2 \\leq x \\leq r_2$;  the string $a[l_1, r_1] + b[l_2, r_2] = a_{l_1} a_{l_1 + 1} \\ldots a_{r_1} b_{l_2} b_{l_2 + 1} \\ldots b_{r_2}$.\n\nThe set $x$ which satisfies the intersecting conditions is a partition of $n \\times m \\times k \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n + m + k) \\times (n +"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(9, \"aabbaa\"), \"Error 1\"\nassert solution(9, \"aabbaa\"), \"Error 2\"\nassert solution(5, \"aabbaa\"), \"Error 3\"\nassert solution(5, \"aaaaa\"), \"Error 4\"\nassert solution(4, \"abcabcabc\"), \"Error 5\"\n"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\n>>> # Execution Time\n>>> # Runtime: 472 ms, faster than 23.20% of Python3 online submissions for Counting Numbers in a String.\n"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"11\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 12\nassert solution(stdin) == 13\nassert solution(stdin) == 14\nassert solution(stdin) == 15\n"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5\") == 4\nassert solution(\"2 2 3 4\") == 3\nassert solution(\"5 6 7 8 9 10\") == 11\nassert solution(\"2 3 4 5\") == 2\nassert solution(\"3 4 5 6 7 8 9 10\") == 11\n\n----Quick Solution-----\n\nstdin = stdin.split()\nn, m = int(stdin[0]), int(stdin[1])\na, b = stdin[2], stdin[3]"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11, \"11 should be equal to solution(stdin)\"\n\n\"\"\"\n"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 1,000,000, 1,000,000, 1\n1 \u2264 m \u2264 10^4\n\n-----Time Limit-----\n3.09s\n\n-----Space Limit-----\n4K\n\"\"\""
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a) == \"4\"\nassert solution(b) == \"11\"\nassert solution(c) == \"2\"\nassert solution(d) == \"1\"\nassert solution(e) == \"1\"\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, [\"099999\", \"0099999\", \"99999\", \"999999\", \"110001\", \"110001\", \"110001\"]) == \"2\"\nassert solution(3, [\"111111\", \"111111\", \"111111\", \"111111\", \"111111\", \"111111\", \"111111\"]) == \"2\"\nassert solution(3, [\"100\", \"100\", \"100\", \"100\", \"100\", \"100\", \"100\"]) == \"1\"\nassert solution(3, [\"111111\", \"111111\", \"111111\", \"111111\", \"111111\", \"111111\", \"111111\"]) == \"2\"\nassert solution(3, [\"1010101\", \"1010101\", \"1010101\", \"1010101\", \"1010101\", \"1010101\", \"1010101\"]) == \"3\"\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"0\"\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0000') == '1'\nassert solution('10001') == '2'\nassert solution('10011') == '3'\nassert solution('110000') == '0'\nassert solution('1111') == '1'\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin=input\n) == \"0\"\n\n\n-----Notes-----\n\nPseudocode:\n\nFor every prompt, we check if the prompt is already typed, if not, we check if the prompt is \"definitely\" valid.\nFor all the promocodes, we check if the prompt is \"definitely\" valid and if it is, we check if all the promocodes typed are valid.\n\nWhen we check if a prompt is valid, we check if the prompt is \"definitely\" valid, or if it is not, we check if at least 1 mistake is left in the prompt.\nThe minimum mistake can be obtained by checking if any of the promocodes typed at least 1 mistake is \"definitely\" valid, but it is not \"definitely\".\n\nOn the other hand, if we check for all the promocodes typed, the minimum mistake is obtained by checking if all the promocodes typed are valid.\n\"\"\""
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 2\nassert solution(2) == 2\nassert solution(1) == 1\nassert solution(0) == 0\n\n\nassert solution(1) == 1\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(12) == 0\nassert solution(1) == 0\nassert solution(2) == 2\nassert solution(4) == 3\nassert solution(3) == 2\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 0"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(9) == \"0\"\nassert solution(3) == 0\nassert solution(6) == 1\nassert solution(2) == 2\n\n\n-----Tip-----\nIn the first sample, the input file contains only a single line, the promocode typed. The input file can contain more than one line.\n\nIn the second sample, the input file contains multiple promocodes, each separated by only one space. The input file can contain multiple lines, and the promocode typed is one of the following:\n\n's' : the string is not a valid promocode.\n'0' : the string is empty.\n'1' : the string consists of only digits.\n'2' : the string consists of only characters.\n'3' : the string consists of only special characters.\n'4' : the string consists of only digits and special characters.\n'5' : the string consists of only characters.\n'6' : the string consists of only special characters.\n'7' : the string consists of only digits.\n'8' : the string consists of only special characters.\n'9' : the string consists of only digits.\n\nThe program should print the maximal k (naturally, not exceeding the length of the promocode), such that any promocode can be uniquely identified if it is typed with at most k mistakes.\n\"\"\"\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\nassert solution(stdin) == '7'\n\nassert solution(stdin) == '16'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin.split(\"\\n\")\n) == \"0\"\nassert solution(\n    stdin.split(\"\\n\")\n) == \"15\"\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 -2 1 3 -4\", \"1 2\", \"4 5\", \"3 4\", \"1 4\", \"1 1\"]) == \"7\"\nassert solution([\"1 -2 1 3 -4\", \"1 2\", \"4 5\", \"3 4\", \"1 4\", \"1 1\"]) == \"16\"\n\nassert solution([\"1 -2 1 3 -4\", \"1 -2\", \"1 2\", \"4 5\", \"3 4\", \"1 4\", \"1 1\"]) == \"0\"\n\n-------------------------------\nInput\n4 3\n1 2 3 4\n1 3\n2 4\n1 1\n\nOutput\n7\n\nInput\n2 3\n-1 -2\n1 1\n1 2\n1 3\n\nOutput\n0\n\n-------------------------------\nInput\n4 2\n1 2 3 4\n1 3\n2 4\n1 1\n\nOutput\n0\n\nInput\n2 2\n-1 -2\n1 1\n1 2\n1 3\n\nOutput\n0\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"7\"\n\"\"\""
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5 4\", \"1 -2 1 3 -4\", \"1 2\", \"4 5\", \"3 4\", \"1 4\", \"1 1\"]) == \"7\"\nassert solution([\"4 3\", \"1 2\", \"1 4\", \"2 4\", \"2 1\", \"3 4\", \"1 1\"]) == \"16\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nTime Limit:\u00a030 seconds\n\n\"\"\"\n\nclass Solution:\n    def maxSumSubarray(self, nums, m):\n        answer = 0\n        cur = 0\n        \n        for i in range(len(nums)):\n            cur += nums[i]\n            \n            if cur > m:\n                cur = 0\n                \n            answer = max(answer, cur)\n        \n        return answer"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n\"\"\"\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"16\"\n\n\n\"\"\"\n\nclass Solution:\n    def gardenShopping(self, stdin, n, m, arr):\n        res = [0]*n\n        \n        flower = []\n        for i in range(m):\n            flower.append(list(map(int, list(stdin[i]))))\n        \n        \n        def dfs(flower,path,n):\n            if len(path) == n:\n                res[flower[path[-1]][1]] = max(res[flower[path[-1]][1]]+flower[path[-1]][0],res[flower[path[-1]][1]])\n                return\n            for i in range(len(flower[path[-1]])):\n                if flower[path[-1]][i] == -1:\n                    continue\n                if flower[path[-1]][i] not in path:\n                    path.append(flower[path[-1]][i])\n                    dfs(flower,path,n)\n                    path.pop()\n                    flower[path[-1]][i] = -1\n                else:\n                    flower[path[-1]][i] -= 1\n        \n        dfs(flower, [], n)\n        return max(res)\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"], \"1 2 3 4 5\") == \"7\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"], \"1 3 2\") == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"], \"1 2 3 4 5\") == \"16\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"], \"1 1 2 3 4 5\") == \"0\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\"], \"1 1\") == \"0\"\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == solution(input())\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 44\nassert solution(input()) == 22"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4444\nassert solution(stdin) == 22\nassert solution(stdin) == 22\nassert solution(stdin) == 22\nassert solution(stdin) == 22\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '33'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\nassert solution(input()) == '1'\nassert solution(input()) == '11'\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(26) == 22\nassert solution(5) == 22\nassert solution(8) == 22\nassert solution(1) == 1\nassert solution(2) == 2\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(514) == 22\nassert solution(5837) == 16\nassert solution(23233) == 127\nassert solution(8243) == 8\nassert solution(9593723) == 9593723\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 22\n\nInput\n100\n\nOutput\n199\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 44\nassert solution(input) == 22\nassert solution(input) == 44\nassert solution(input) == 22\nassert solution(input) == 44\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4545) == 22\nassert solution(4545) == 4444\nassert solution(1111) == 1234\nassert solution(23) == 1223\nassert solution(100) == 100\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1\"\n) == 1\nassert solution(\n    \"2\"\n) == 1\nassert solution(\n    \"3\"\n) == 2\nassert solution(\n    \"4\"\n) == 2\nassert solution(\n    \"5\"\n) == 1\n"
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1234) == 22\nassert solution(28182819) == 3\nassert solution(567865) == 7\nassert solution(88888888) == 5\nassert solution(81) == 9\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 2, 2) == 4\nassert solution(4, 10, 2) == -1\nassert solution(1, 10, 2) == -1\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 4 8\"\nassert solution(stdin) == \"1 2 4 4\"\nassert solution(stdin) == \"1 2 4 5\"\nassert solution(stdin) == \"1 2 4 6\"\nassert solution(stdin) == \"1 2 4 7\"\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"1 2 4 8 7\"\nassert solution(stdin) == \"1 4 7\"\nassert solution(stdin) == \"2 3 4\"\nassert solution(stdin) == \"2 4 5\"\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 221 222 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 238 239 240 241 240 242 243 244 245 245 246 247 248 249 250 251 252 253 253 255 255 256 257 259 259 270 280 281 282 283 284 285 286 287 287 288 289 289 290 291 291 293 294 295 296 297 298 299 300 301 301 302 302 303 303 304 305 306 308 309 310 311 310 312 313 314 315 316 317 318 319 320 320 321 321 322 323 324 325 326 347 347 349 350 351 351 352 353 354 355 356 357 358 359 360 361 361 363 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 661 6"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0 3') == '-1'\nassert solution('0 1') == '-1'\nassert solution('4 4') == '-1'\nassert solution('1 1') == '-1'\nassert solution('1 2') == '-1'\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 5 4 6\") == \"2 4 5 6\"\nassert solution(\"2 1 2\") == \"2\"\nassert solution(\"2 1 2 3 4 5 6 7 8 9 10\") == \"-1\"\nassert solution(\"2 3 2 3\") == \"0\"\n\nassert solution(\"1 1 2 3 4 5 6 7 8 9 10\") == \"1 2 4 5 6 8 9 10\"\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 2, 5) == 1\nassert solution(2, 4, 5) == 2\nassert solution(5, 2, 2) == -1"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 10 2\") == \"1 2 4 8\"\nassert solution(\"2 4 5\") == \"-1\"\n\n-----Time complexity-----\nThe complexity of the above program is O(n*l*k).\n\nComplexity of the above program is O(n*l*k).\n\nThe overall complexity of the above program is O(n*l*k).\n\nTime complexity: O(n*l*k)\nComplexity: O(n*l*k)\n\n---Constraints---\n\n1 \u2264 l \u2264 r \u2264 10^18, 2 \u2264 k \u2264 10^9.\n\"\"\""
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == \"0\"\nassert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"3\"\nassert solution(4) == \"4\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3 5\"]) == \"NO\"\nassert solution([\"3 7\"]) == \"YES\"\nassert solution([\"3 6\"]) == \"YES\"\nassert solution([\"3 4\"]) == \"NO\"\nassert solution([\"3 0\"]) == \"YES\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\""
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,5) == \"YES\"\nassert solution(1,7) == \"NO\"\n\nassert solution(1,2) == \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == 'YES', '0'\nassert solution(1) == 'NO', '1'\nassert solution(2) == 'NO', '2'\nassert solution(3) == 'NO', '3'\nassert solution(4) == 'NO', '4'\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input().split()\n) == \"YES\"\nassert solution(\n    input().split()\n) == \"NO\"\nassert solution(\n    input().split()\n) == \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"NO\"\nassert solution(\"2 6\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 7\") == \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 4) == \"YES\"\nassert solution(6, 5) == \"NO\"\nassert solution(7, 5) == \"NO\"\nassert solution(3, 2) == \"NO\"\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"11111\"\nassert solution(input) == \"12111\"\nassert solution(input) == \"111111\"\nassert solution(input) == \"112233\"\nassert solution(input) == \"11121\"\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"122\"\n\"\"\""
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"112\""
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '112' or solution(input()) == '121' or solution(input()) == '122' or solution(input()) == '211' or solution(input()) == '212' or solution(input()) == '221'\n\nThe following ways to paint the blocks satisfy the conditions: 112, 121, 122, 221, 212, and 231. Here, digits represent the colors of the blocks.\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 3 1\",\n    2,\n    3,\n    \"1 2\"\n    ), \"12\"\n    assert solution(\n    \"2 3 4\",\n    2,\n    3,\n    \"4 1\"\n    ), \"3\"\n    assert solution(\n    \"2 3 6\",\n    2,\n    3,\n    \"6 1\"\n    ), \"0\"\n    assert solution(\n    \"2 3 7\",\n    2,\n    3,\n    \"7 1\"\n    ), \"3\"\n    assert solution(\n    \"2 3 9\",\n    2,\n    3,\n    \"9 1\"\n    ), \"0\"\n    "
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"112\") == \"59\"\nassert solution(\"121\") == \"122\"\nassert solution(\"122\") == \"121\"\nassert solution(\"211\") == \"221\"\nassert solution(\"211\") == \"221\"\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"225\"\nassert solution(s) == \"2\"\nassert solution(s) == \"12\"\nassert solution(s) == \"111\"\nassert solution(s) == \"1101\"\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution(stdin)) == '6'\nassert solution(solution(stdin)) == '112'\nassert solution(solution(stdin)) == '121'\nassert solution(solution(stdin)) == '122'\nassert solution(solution(stdin)) == '211'\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"6\""
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"{0, 1, 2}\") == \"112\"\nassert solution(\"{1, 2}\") == \"121\"\nassert solution(\"{0, 3, 4, 5}\") == \"121\"\nassert solution(\"{0, 4, 5}\") == \"221\"\nassert solution(\"{0, 1, 2, 3}\") == \"226\"\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"2 0\") == \"1 1\"\nassert solution(\"2 1\") == \"1 1\"\nassert solution(\"1 2\") == \"1 1\"\nassert solution(\"0 1\") == \"1 1\"\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('a_0 a_1') == 'b_0'\nassert solution('a_0 a_1 a_2 a_3 a_4') == 'b_0 a_1 a_2 a_3 a_4'\nassert solution('a_0 a_1 a_2 a_3 a_4 a_5') == 'b_0 a_1 a_2 a_3 a_4 a_5'\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2 1\"\nassert solution(input) == \"0 1\"\n\nInput 1:\np = 2\na_0 = 3\na_1 = 5\n\nOutput 1:\n1 1\n\"\"\"\n\nfrom typing import Iterable\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1 1'\nassert solution(stdin) == '1 2'\nassert solution(stdin) == '2 1'\nassert solution(stdin) == '2 2'\nassert solution(stdin) == '2 3'\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 0\") == \"1 1\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"3 1\") == \"0 1 + 1\"\nassert solution(\"4 1\") == \"0 1 + 2 + 1\"\nassert solution(\"5 1\") == \"0 1 + 3 + 1 + 1\"\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 1 2\"\nassert solution(\"5\") == \"1 1 5 2 3 4\"\nassert solution(\"7\") == \"1 1 7 4 9 2\"\nassert solution(\"10\") == \"1 1 10 9 13 5\"\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '1 1'\n\"\"\""
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 0'), '1'\nassert solution('2 1'), '2'\nassert solution('1 1'), '1'\nassert solution('3 2'), '3'\nassert solution('4 3'), '3'\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 0\"\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"1 1\"\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(Input=3, Input=4) == 8\n\"\"\""
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"R...\") == \"0\"\nassert solution(\"SS...\") == \"0\"\nassert solution(\"S.\") == \"0\"\nassert solution(\"Ss.\") == \"0\"\nassert solution(\"Ss.\") == \"0\"\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(a) == \"8\"\nassert solution(a) == \"20\"\nassert solution(a) == \"5\"\nassert solution(a) == \"2\"\nassert solution(a) == \"6\"\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution) == 8\n\"\"\""
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('...') == '8'\n\"\"\"\nimport sys"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"8\"\n\"\"\"\nfrom collections import Counter\nimport itertools\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['S...', 'S...', 'S...']) == '8'\n\nassert solution(['...S.', '...S.', '...S.']) == '8'\n\nassert solution(['.', '.', '.']) == '8'\n\nassert solution(['S', 'S', 'S']) == '8'\n\nassert solution(['S', '.', '.']) == '8'"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"3 4\", \"...\", \"...\", \"....\", \"S\"]) == \"8\"\n\n    pass\n\nassert solution(\n    [\"3 4.5\", \"...\", \"...\", \"...\", \"S\"]) == \"3\"\n\n    pass\n\nassert solution(\n    [\"3 4\", \"....\", \"...\", \"....\", \"S\"]) == \"3\"\n\n    pass\n\nassert solution(\n    [\"3 4\", \"S.........\", \".....\", \".....\", \"..S..\", \"S\"]) == \"3\"\n\n    pass\n\nassert solution(\n    [\"3 4\", \"S...\", \"...\", \"...\", \"S\"]) == \"8\"\n\n    pass"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3,4) == 8\nassert solution(1,1) == 1\nassert solution(1,2) == 1\nassert solution(1,3) == 1\nassert solution(1,4) == 1\n"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == '1'\nassert solution(input()) == '7'\nassert solution(input()) == '10'"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4 1 7') == 2\nassert solution('4 1 7') == 2\nassert solution('4 1 7') == -2\nassert solution('4 1 7') == -2\nassert solution('4 1 7') == 1\n"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, [1, 5, 10]) == 2\nassert solution(1, [1]) == -2\nassert solution(1, [1, 2]) == 1\nassert solution(1, [1, 3, 2]) == -1\nassert solution(2, [10, 5, 4, 3]) == 2\n"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 0\nassert solution(1) == -1\nassert solution(2) == -2\nassert solution(3) == 1\nassert solution(4) == -2\n"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 7\nassert solution(stdin) == 10\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin = \"\"\"\n6\n4 5 3 6\n7 1 10 4 5 3 2\n10 10 5 9 4 3 2\n\"\"\") == \"\"\"\n2\n-2\n\n2\n-2\n\n2\n-2\n\n2\n-2\n\"\"\"\nassert solution(\n    stdin = \"\"\"\n3\n4 1 7\n\nOutput\n-1\n\n\"\"\") == \"0\"\nassert solution(\n    stdin = \"\"\"\n1\n10\n\nOutput\n1\n\n\"\"\") == \"3\"\nassert solution(\n    stdin = \"\"\"\n1\n7\n\nOutput\n7\n\n\"\"\") == \"2\"\n"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input: str\n) == 1\nassert solution(\n    input: str\n) == 0\nassert solution(\n    input: str\n) == 2\nassert solution(\n    input: str\n) == -1\n"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 1, \"Your answer is not correct!\"\n"
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input()\n) == str(\n    -1\n)\n\nInput\n3\n5 1 8\n\nOutput\n0\n\"\"\"\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'NO'"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"NO\"\nassert solution(\"1 3\") == \"YES\"\n\"\"\""
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2,4) == \"YES\""
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"4\"]) == \"3\"\nassert solution([\"10\", \"11\"]) == \"9\"\nassert solution([\"9\", \"9\", \"9\"]) == \"9\"\nassert solution([\"900000000000000009\", \"900000000000000029\"]) == \"900000000000000009\"\nassert solution([\"900000000000000009\", \"90000000000000001\", \"900000000000000009\", \"900000000000000021\"]) == \"900000000000000009\"\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"900000000000000009 900000000000000029\"\nassert solution(stdin) == \"900000000000000009 90000000000000001 900000000000000021\"\nassert solution(stdin) == \"900000000000000009 900000000000000029 900000000000000009 900000000000000021\"\nassert solution(stdin) == \"900000000000000009 900000000000000029 900000000000000021\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"900000000000000009 900000000000000029\"\n\n\"\"\"\n\nfrom utils import time_limit\n\n@time_limit(60)\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 4') == '2 3 4'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'\nassert solution('900000000000000009 900000000000000029') == '900000000000000009 900000000000000010 900000000000000021'"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \n    ) == -1\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 4\",\n    \"10 11\",\n    \"900000000000000009 900000000000000029\",\n    \"900000000000000029\",\n    \"900000000000000009 90000000000000001\",\n    \"900000000000000009 900000000000000021\") == \"900000000000000009 900000000000000021\"\nassert solution(\n    \"10 11\",\n    \"900000000000000009 900000000000000029\",\n    \"900000000000000009 90000000000000001\",\n    \"900000000000000009 900000000000000021\",\n    \"900000000000000009 90000000000000011\") == \"900000000000000009 90000000000000011\"\nassert solution(\n    \"900000000000000009 90000000000000001\",\n    \"900000000000000009 90000000000000001\",\n    \"900000000000000009 900000000000000021\",\n    \"900000000000000009 90000000000000001\") == \"900000000000000009 90000000000000001\"\nassert solution(\n    \"900000000000000009 900000000000000021\",\n    \"900000000000000009 900000000000000029\",\n    \"900000000000000009 90000000000000001\",\n    \"900000000000000009 90000000000000001\") == \"900000000000000009 90000000000000001\"\nassert solution(\n    \"900000000000000009 90000000000000011\",\n    \"900000000000000009 90000000000000011\",\n    \"900000000000000009 90000000000000011\",\n    \"900000000000000009 90000000000000011\") == \"900000000000000009 90000000000000011\"\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 4') == '3 4'\nassert solution('10 11') == '9 3 4'\nassert solution('900000000000000009 900000000000000029') == '9 3 4'\nassert solution('900000000000000029') == '9 3 4'"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2 4) == \"2 3 4\"\nassert solution(10 11) == \"900000000000000009 900000000000000029 90000000000000001\"\nassert solution(900000000000000009 900000000000000029 90000000000000001) == \"-1\"\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '900000000000000009 900000000000000029'\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"1 2\") == \"YES\"\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(int(stdin),int(stdin)) == 'NO'"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'YES'\n\n\n-----------------\n\nimport sys\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 'YES'\nassert solution(2) == 'NO'\n\nassert solution(3) == 'YES'\nassert solution(4) == 'NO'\n\nassert solution(5) == 'NO'\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"Passed\"\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 4') == 'YES', 'incorrect'\nassert solution('3 4') == 'NO', 'incorrect'"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"3\", \"4\", \"2\"]) == \"YES\"\nassert solution([\"5\", \"2\", \"4\", \"3\"]) == \"NO\"\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"YES\""
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 24\nassert solution(stdin) == 9\n\"\"\""
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), 'The maximum number of ornaments that can be used is'\n\nassert solution(\"1 1 1\"), \"There is only one ornament\"\n\nassert solution(\"3 3 4 4\"), \"There are two ornaments\"\n\nassert solution(\"2 2 2\"), \"There are four ornaments\"\n\nassert solution(\"7 7 7\"), \"There are five ornaments\""
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"24\"\n\nPass\nTime limit exceeded\n\nExample:\n\nInput\n5 2\n3\nInput\n2 2\nOutput\n6\n'''\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"24\"\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == answer\n\n\"\"\"\n\nclass Solution:\n    def maxNumberOfYellows(self, yellow: int, blue: int, red: int) -> int:\n        #answer\n        if yellow + blue + red == 0:\n            return 0\n        \n        max_yellow, max_blue, max_red = 0, 0, 0\n        \n        if yellow > blue:\n            yellow, blue = blue, yellow\n            max_blue += 1\n        elif blue > red:\n            blue, red = red, blue\n            max_yellow += 1\n        \n        if yellow + blue == 0:\n            return max_blue\n        if blue + red == 0:\n            return max_yellow\n        \n        return max_yellow if yellow + blue + red < max_yellow + max_blue else max_blue + max_yellow + max_red\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input=\n    \"8 13 9\"\n) == \"24\"\n\nassert solution(\n    input=\n    \"13 3 6\"\n) == \"9\"\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 9\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\nstdin.length is always even\nstdin is an anagram of the input\nstdin is guaranteed to be unique\n0 <= y, b, r <= 100\n0 <= x <= 10^4\n'''"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"9\"\nassert solution(input) == \"9\"\nassert solution(input) == \"8\"\nassert solution(input) == \"9\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '24'\nassert solution(stdin) == '9'\n\n'''"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(in_str) == str(4)\n\nassert solution(in_str='') == str(0)\n\nassert solution(in_str='2 3 3') == str(3)\n\nassert solution(in_str='2 3 3 3 3') == str(6)\n\nassert solution(in_str
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 2\n\nassert solution(input()) == 2\n\nassert solution(input()) == 2\n\nassert solution(input()) == 2\n\nassert solution(input()) == 2\n\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4, 'incorrect'\n\n\n-----Bugfix-----\n\nSince the number of balloons of each color do not match, the solutions will be incorrect.\n\nYou have to solve it without any other sorting algorithm, you must solve it with both sorting algorithms.\n\n\"\"\""
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"rggrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\n\n\n-----Time complexity-----\n\nTime complexity: O(r + g + b) for each input. Time complexity: O(r + g + b) for each input.\n\n-----Space complexity-----\n\nTime complexity: O(1) since we don't need to store the answer in memory.\n\n-----Algorithm complexity-----\n\nTime complexity: O(n) for each algorithm.\n\n-----Implementation-----\n\n[1] https://www.youtube.com/watch?v=vw-MvNkCqY\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, 4, 3) == 4\n\n\n------Test Cases------\n\nInput 1:\n4 4 1\n\nOutput 1:\n1\n\nInput 2:\n2 3 3\n\nOutput 2:\n2\n\nInput 3:\n1 1 1\n\nOutput 3:\n3\n\n------Test Case End------\n\"\"\"\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"3\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"3\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"3\"]) == \"3\""
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(4)\n\nassert solution(stdin) == str(2)\n\nassert solution(stdin) == str(2)\n\nassert solution(stdin) == str(2)\n\nassert solution(stdin) == str(2)"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"1 1 1\", \"2 3 3\", \"3 4 4\", \"4 5 5\", \"5 6 6\", \"6 7 7\", \"7 8 8\", \"8 9 9\"]) == \"4\"\nassert solution(\n    [\"2 3 3\", \"3 4 4\", \"4 5 5\", \"5 6 6\", \"6 7 7\", \"7 8 8\", \"8 9 9\"]) == \"1\"\nassert solution(\n    [\"4 1 1\", \"4 2 3\", \"4 3 4\", \"5 4 5\", \"5 6 6\", \"6 7 7\", \"7 8 8\", \"8 9 9\"]) == \"2\""
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == 5\nassert solution(\"2\") == 6\nassert solution(\"1\") == 0\nassert solution(\"3\") == 3\nassert solution(\"4\") == 7\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 8\nassert solution(stdin) == 5\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(n,a) == 5, \"Not the answer\"\n\"\"\""
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 2) == 8\nassert solution(2, 3) == 5\nassert solution(3, 0) == 1"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 9\") == \"5\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 9 2 3\") == \"3\"\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n1 <= n <= 10^5\n1 <= a_1, a_2,..., a_{n} <= 10^6\n1 <= x_1, x_2,..., x_{n-1} <= 9^6\n\nTime Limit: 60 seconds\nMemory Limit: 64 MB\n\n\n-----Submission-----\n\nfrom bisect import bisect_left, bisect_right"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, [2, 3, 9]) == 8\nassert solution(2, [2, 3, 9]) == 5\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '5'\n\nassert solution(input().split(' ')) == '8'\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5,3) == 8\nassert solution(2,1) == 5\nassert solution(1,1) == 1\nassert solution(0,0) == 0\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 20\nassert solution(2) == 680\nassert solution(3) == 3\nassert solution(4) == 2\nassert solution(5) == 3\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 20\nassert solution(2) == 680\nassert solution(3) == 28\n\n\n-----Constraints-----\n0 < n < 10^5\n\n\n-----Tests-----\n>>> import sys\n>>> sys.setrecursionlimit(100000)\n>>> def test(title, exp, sol):\n    print('-=' * 30)\n    print('{:>20} | {:^20} | {:^20}'.format(title, exp, sol))\n    print('-=' * 30)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10 ^ 9 + 7\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 7\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"1\"\nassert solution(4) == \"1\"\nassert solution(5) == \"1\"\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, 5) == 60\nassert solution(3, 5) == 8\nassert solution(6, 3) == 36\n\n\n------Constraints------\n1 <= n <= 10^5\n\n-----Time Limit-----\nO(logn)\n\n-----Space Limit-----\nO(logn)\n\n------Tags-----\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 20\nassert solution(2) == 680\nassert solution(3) == 738\nassert solution(4) == 2381\nassert solution(5) == 3780\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '20'\nassert solution(input()) == '680'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"20\"\n'''\n\nimport sys"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 20\n\n\n-----Constraints-----\n1 \u2264 n \u2264 10^5\n\nInput Format\n\nThe first line contains two space-separated integers n and k.\n\n\nOutput Format\n\nPrint a single integer, representing the number of ways that Tanya can be satisfied by distributing coins to all gnomes in a circle.\n\n\nSample Input\n\n1\n\n2\n\nSample Output\n\n683\nExplanation\n\nThe gnomes in a circle have 3n coins, a pair of coins numbered 0 and 1, and a triplet whose two coins differ by 2 and are in the circle.\n\n\n------Code Start Here------\nimport math\nimport sys\n\nn = int(input())\n\na = [int(i) for i in input().split()]\n\nn = a[0]\n\nk = a[1]"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2, \"aab\") == 1\nassert solution(4, \"kaakikapo\") == 2\n\n\n-----Constraints-----\n1 <= n <= 1000000\n\n\n------Time complexity-------\nSpace complexity: O(1)\n\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"aa\",\"bb\",\"aaaaa\"]) == 2\nassert solution([\"aa\",\"bb\"]) == 2\nassert solution([\"aab\",\"aba\"]) == 1\nassert solution([\"aab\",\"aba\",\"abc\"]) == 2\nassert solution([\"abb\",\"aaab\"]) == 0\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\") == -1\nassert solution(\"aab\") == 0\nassert solution(\"abc\") == 1\nassert solution(\"aabccc\") == 0\nassert solution(\"aac\") == 2\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 1\nassert solution(4) == 2\nassert solution(5) == 0\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str) == 1\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n\n0 \u2264 s.length \u2264 1000\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 0\nassert solution(input()) == 1\nassert solution(input()) == -1\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == 5\n\n-----Constraints-----\n\n1 \u2264 n \u2264 1000000\n\n1 \u2264 s length <= 10000\n\nSample I/O:\n\nLine 1:\n\ns = \"abk\"\n\nLine 2:\n\ns = \"koko\"\n\nSample Output:\n\n2\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 1000000\n\nSample I/O:\n\nLine 1:\n\ns = \"k\"\n\nLine 2:\n\ns = \"km\"\n\nSample Output:\n\n0\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 'aa') == 1\nassert solution(3, 'koko') == 2\n\n\n---Solutions---\n\na: 3\nk: 3\n\na: 3\nb: 4\nk: 4\n\na: 3\nb: 5\nk: 5\n\"\"\"\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == -1, 'failed'\n\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= stdin.length <= 1000\nstdin.length <= 1000\nstdin is a valid string consisting only of lowercase English letters.\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 6\") == \"Vladik\"\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Vladik\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Vladik\"\nassert solution(stdin) == \"Valera\"\nassert solution(stdin) == \"Vladik\"\nassert solution(stdin) == \"Valera\"\n\n[Warning]\nSpecial characters in stdin are not supported.\n\n[Bug]\nreturn \"Vladik\" for a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        \"\"\"\n        :type stdin: str\n        :rtype: str\n        \"\"\"\n        answer = \"\"\n        for i in range(int(len(stdin)/2), 0, -1):\n            a = int(stdin[:i])\n            b = int(stdin[i:])\n            answer += \"Valera\"\n            if a == b:\n                answer += \"Vladik\"\n            else:\n                answer += \"Valera\"\n                if a + b == 2:\n                    answer += \"Vladik\"\n                else:\n                    answer += \"Vladik\"\n                    if a + b == 3:\n                        answer += \"Vladik\"\n                    else:\n                        answer += \"Vladik\"\n                        if a + b == 4:\n                            answer += \"Vladik\"\n                        else:\n                            answer += \"Vladik\"\n                            if a + b == 5:\n                                answer += \"Vladik\"\n                            else:\n                                answer += \"Vladik\"\n                                if a + b == 6:\n                                    answer += \"Vladik\"\n                                else:\n                                    answer += \"Vladik\"\n                                    if a + b == 7:\n                                        answer += \"Vladik\"\n                                    else:\n                                        answer += \"Vladik\"\n                                        if a + b == 8:\n                                            answer += \"Vladik\"\n                                        else:\n                                            answer += \"Vladik\"\n                                            if a + b == 9:\n                                                answer += \"Vladik\"\n                                            else:\n                                                answer += \"Vladik\"\n                                                if a + b == 10:\n                                                    answer += \"Vladik\"\n                                                else:\n                                                    answer += \"Vladik\"\n                                                    if a + b == 11:\n                                                        answer += \"Vladik\"\n                                                    else:\n                                                        answer += \"Vladik\"\n                                                        if a + b == 12:\n                                                            answer += \"Vladik\"\n                                                        else:\n                                                            answer += \"Vladik\"\n                                                            if a + b == 13:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 14:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 15:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 16:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 17:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 18:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 19:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 20:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 21:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 22:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 23:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 24:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 25:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 26:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 27:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 28:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 29:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 30:\n                                                                answer += \"Vladik\"\n                                                            else:\n                                                                answer += \"Vladik\"\n                                                            if a + b == 31:\n                                                                answer += \"V"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 6\") == \"Valera\"\nassert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 6\") == \"Valera\"\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1') == 'Vladik\u2019\u2019'\nassert solution('7 6') == 'Valera\u2019\u2019'\nassert solution('5 7') == 'Vladik\u2019\u2019'\nassert solution('1 1') == 'Vladik\u2019\u2019'\nassert solution('5 7') == 'Vladik\u2019\u2019'\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Vladik'\nassert solution(stdin) == 'Valera'\nassert solution(stdin) == 'Vladik'\nassert solution(stdin) == 'Valera'\nassert solution(stdin) == 'Vladik'\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 5\") == \"Vladik\u2019\u2019\"\nassert solution(\"1 2\") == \"Vladik\"\nassert solution(\"1 1\") == \"Vladik\"\nassert solution(\"7 7\") == \"Vladik\"\nassert solution(\"7 6\") == \"Vladik\"\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Vladik\"\n\n\nassert solution(stdin) == \"Valera\"\n\n\nassert solution(stdin) == \"Vladik\"\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Valera\"\n\n\"\"\""
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"7 6\") == \"Vladik\"\nassert solution(\"7 6 9\") == \"Vladik\"\nassert solution(\"4 5 4\") == \"Valera\"\nassert solution(\"1 7 3\") == \"Vladik\"\nassert solution(\"3 7 2\") == \"Valera\"\n"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \":(\"\nassert solution(input()) == \":(()\"\nassert solution(input()) == \"(((()))\"\nassert solution(input()) == \"(((()))\"\nassert solution(input()) == \"((())())\"\n"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \":(\", \"Second sample:\\n\" + stdin\nassert solution(stdin) == \":(\" + \")(\" + \")\", \"Second sample:\\n\" + stdin + \"\\n\"\nassert solution(stdin) == \":(\" + \")\" + \")\" + \")\"\n\n###\n"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \":(\", \"Error\"\n'''"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n(\n(\n(\n))\n\n)\n\npass\n\nassert solution(\n(\n(\n(\n))\n\n)\n\npass\n\nassert solution(\n(\n(\n(\n))\n\n)\n\npass\n\nassert solution(\n(\n(\n(\n))\n\n)\n\npass\n\nassert solution(\n(\n(\n(\n))\n\n)\n\npass"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \":(\", \"Invalid Input\"\n"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\")(())()\") == \"(())\"\n\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.string=[]\n    def solution(self,stdin:str)->str:\n        for i in stdin:\n            self.string.append(i)\n        l=len(self.string)\n        if l==0:\n            return \"\"\n        return \"(\"+self.string[0]+\")\"+\"(\"+self.string[1]+\")\"+self.string[2]+self.string[3]+self.string[4]+self.string[5]+self.string[6]+self.string[7]+self.string[8]+self.string[9]+self.string[10]+self.string[11]+self.string[12]+self.string[13]+self.string[14]+self.string[15]+self.string[16]+self.string[17]+self.string[18]+self.string[19]+self.string[20]+self.string[21]+self.string[22]+self.string[23]+self.string[24]+self.string[25]+self.string[26]+self.string[27]+self.string[28]+self.string[29]+self.string[30]+self.string[31]+self.string[32]+self.string[33]+self.string[34]+self.string[35]+self.string[36]+self.string[37]+self.string[38]+self.string[39]+self.string[40]+self.string[41]+self.string[42]+self.string[43]+self.string[44]+self.string[45]+self.string[46]+self.string[47]+self.string[48]+self.string[49]+self.string[50]+self.string[51]+self.string[52]+self.string[53]+self.string[54]+self.string[55]+self.string[56]+self.string[57]+self.string[58]+self.string[59]+self.string[60]+self.string[61]+self.string[62]+self.string[63]+self.string[64]+self.string[65]+self.string[66]+self.string[67]+self.string[68]+self.string[69]+self.string[70]+self.string[71]+self.string[72]+self.string[73]+self.string[74]+self.string[75]+self.string[76]+self.string[77]+self.string[78]+self.string[79]+self.string[80]+self.string[81]+self.string[82]+self.string[83]+self.string[84]+self.string[85]+self.string[86]+self.string[87]+self.string[88]+self.string[89]+self.string[90]+self.string[91]+self.string[92]+self.string[93]+self.string[94]+self.string[95]+self.string[96]+self.string[97]+self.string[98]+self.string[99]+self.string[100]+self.string[101]+self.string[102]+self.string[103]+self.string[104]+self.string[105]+self.string[106]+self.string[107]+self.string[108]+self.string[109]+self.string[110]+self.string[111]+self.string[112]+self.string[113]+self.string[114]+self.string[115]+self.string[116]+self.string[117]+self.string[118]+self.string[119]+self.string[120]+self.string[121]+self.string[122]+self.string[123]+self.string[124]+self.string[125]+self.string[126]+self.string[127]+self.string[128]+self.string[129]+self.string[130]+self.string[131]+self.string[132]+self.string[133]+self.string[134]+self.string[135]+self.string[136]+self.string[137]+self.string[138]+self.string[139]+self.string[140]+self.string[141]+self.string[142]+self.string[143]+self.string[144]+self.string[145]+self.string[146]+self.string[147]+self.string[148]+self.string[149]+self.string[150]+self.string[151]+self.string[152]+self.string[153]+self.string[154]+self.string[155]+self.string[156]+self.string[157]+self.string[158]+self.string[159]+self.string[160]+self.string[161]+self.string[162]+self.string[163]+self.string[164]+self.string[165]+self.string[166]+self.string[167]+self.string[168]+self.string[169]+self.string[170]+self.string[171]+self.string[172]+self.string[173]+self.string[174]+self.string[175]+self.string[176]+self.string[177]+self.string[178]+self.string[179]+self.string[180]+self.string[181]+self.string[182]+self.string[183]+self.string[184]+self.string[185]+self.string[186]+self.string[187]+self.string[188]+self.string[189]+self.string[190]+self.string[191]+self.string[192]+self.string[193]+self.string[194]+self.string[195]+self.string[196]+self.string[197]+self.string[198]+self.string[199]+self.string[200]+self.string[201]+self.string[202]+self.string[203]+self.string[204]+self.string[205]+self.string[206]+self.string[207]+self.string[208]+self.string[209]+self.string[210]+self.string[211]+self.string[212]+self.string[213]+self.string[214]+self.string[215]+self.string[216]+self.string[217]+self.string[218]+self.string[219]+self.string[220]+self.string[221]+"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\".(($1,$2,$3,$4,$5,$6,$7))\") == \"())()()()((((())(()()((())))\"\nassert solution(\".(($1,$2,$3,$4,$5,$6,$7))\") == \"(((()()()()((()))\"\nassert solution(\".(($1,$2,$3,$4,$5,$6,$7))\") == \"()())()()((((())(()()((())))\"\nassert solution(\".(($1,$2,$3,$4,$5,$6,$7))\") == \"()(())()()((((())(()()((()))\"\nassert solution(\".(($1,$2,$3,$4,$5,$6,$7))\") == \"()((((())(()()((())))\"\n"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \":(\", \"Second sample: \" + str(stdin) + \"!= '\" + solution(stdin) + \"'\"\n\n\n\"\"\"\nclass Solution:\n    def __init__(self):\n        self.op = {\n            \"*\": \"*\",\n            \"+\": \"+\",\n            \"(\": \")\",\n            \")\": \"(\"\n        }\n    \n    def transform(self, s):\n        stack = []\n        i = 0\n        while i < len(s):\n            if s[i] in self.op:\n                if len(stack) == 0 or self.op[s[i]] == stack[-1]:\n                    stack.append(s[i])\n                else:\n                    while len(stack) > 0 and self.op[stack[-1]] >= self.op[s[i]]:\n                        stack.pop()\n                    stack.append(s[i])\n            elif s[i] == \")\":\n                while len(stack) > 0 and stack[-1]!= \"(\":\n                    stack.pop()\n                stack.pop()\n            else:\n                while len(stack) > 0 and self.op[stack[-1]] >= self.op[s[i]]:\n                    stack.pop()\n                stack.append(s[i])\n            i += 1\n        return \"\".join(stack)\n            \n    def isValid(self, s: str) -> bool:\n        for i in range(len(s)):\n            if s[i] == \"(\":\n                self.op[s[i]] = \"(\"\n            elif s[i] == \")\":\n                self.op[s[i]] = \")\"\n            else:\n                self.op[s[i]] = s[i]\n        return self.transform(s) == s\n        \n        "
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \":(\"\nassert solution(input()) == \":(()\"\nassert solution(input()) == \":((())\"\nassert solution(input()) == \":((())\"\nassert solution(input()) == \":((())\"\n"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"(\", \")\"]) == \":((\"\n\nExplanation\nThe example 1 is from the second sample. It's a valid solution because the original string is not a valid parenthesis sequence, and the new string is not a valid parenthesis sequence.\n\nThe explanation for the second sample is shown below.\n\nInput:\n6\n(?\n\nOutput:\n:(\n\nInput:\n10\n(???(???(?\n\nOutput:\n:(\n\n\n-----Note-----\n\nThe new sequence should be of the type of the original sequence.\n\n-----Constraints-----\n\n0 <= s.length <= 3 * 10^4\ns[i] is either \"?\", \"(\", \")\", or a letter.\ns.length is a positive integer.\n\nThe string s consists of only the following characters: \"(\", \")\", \"?\", \"*\", \")\"\".\n\nThe length of the first string will be less than or equal to 10^4.\nThe length of the second string will be less than or equal to 10^4.\n\n\n-----Constraints-----\n\n1 <= s.length <= 10^4\ns[i] is either \"?\", \"(\", \")\", or a letter.\ns.length is a positive integer.\n\nThere will not be any empty string.\n\"\"\"\n\n\nclass Solution:\n    def convertToTitle(self, n: int) -> str:\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n\n        if n == 0:\n            return \"\"\n\n        s = str(n)\n        stack = []\n\n        for c in s:\n            if c.isalpha():\n                if c == \"A\":\n                    stack.append(\"Z\")\n                elif c == \"B\":\n                    stack.append(\"a\")\n                elif c == \"C\":\n                    stack.append(\"c\")\n                elif c == \"D\":\n                    stack.append(\"d\")\n                elif c == \"E\":\n                    stack.append(\"e\")\n                elif c == \"F\":\n                    stack.append(\"f\")\n                elif c == \"G\":\n                    stack.append(\"g\")\n                elif c == \"H\":\n                    stack.append(\"h\")\n                elif c == \"I\":\n                    stack.append(\"i\")\n                elif c == \"J\":\n                    stack.append(\"j\")\n                elif c == \"K\":\n                    stack.append(\"k\")\n                elif c == \"L\":\n                    stack.append(\"l\")\n                elif c == \"M\":\n                    stack.append(\"m\")\n                elif c == \"N\":\n                    stack.append(\"n\")\n                elif c == \"O\":\n                    stack.append(\"o\")\n                elif c == \"P\":\n                    stack.append(\"p\")\n                elif c == \"Q\":\n                    stack.append(\"q\")\n                elif c == \"R\":\n                    stack.append(\"r\")\n                elif c == \"S\":\n                    stack.append(\"s\")\n                elif c == \"T\":\n                    stack.append(\"t\")\n                elif c == \"U\":\n                    stack.append(\"u\")\n                elif c == \"V\":\n                    stack.append(\"v\")\n                elif c == \"W\":\n                    stack.append(\"w\")\n                elif c == \"X\":\n                    stack.append(\"x\")\n                elif c == \"Y\":\n                    stack.append(\"y\")\n                elif c == \"Z\":\n                    stack.append(\"z\")\n            else:\n                if c == \"-\":\n                    stack.append(\"-\")\n                elif c == \"+\":\n                    stack.append(\"+\")\n\n        return \"\".join(stack)\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == str(2)\n\n\"\"\""
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 10') == '3'\nassert solution('2 20') == '2'\nassert solution('0') == '0'\nassert solution('1') == '1'\n\n\n\n----Notes----\n\nIt's a valid polynomial when coefficient of the polynomial equals one.\n'''"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\n\n\n-----Example 1-----\n\nInput\n3 4\n10 -9 -3 5\n\nOutput\n1\n\nInput\n3 4\n10 -9 -3 5\n\nOutput\n0\n\nInput\n2 20\n14 -7 19\n\nOutput\n0\n\n\n-----Example 2-----\n\nInput\n3 12\n10 -9 -3 5\n\nOutput\n2\n\nInput\n3 20\n14 -7 19\n\nOutput\n0\n\n\n-----Example 3-----\n\nInput\n3 20\n10 -9 -3 5\n\nOutput\n0\n\n\n-----Explanation-----\n\nLimak cannot change one coefficient in three ways.\nHe can set a_0 = 10, a_1 =  - 9, and Q(x) =  - 10 - 9x - 3x^2 + 5x^3.\n\nLimak can change one coefficient in three ways:  He can set a_2 =  - 8, and Q(x) = 10 - 9x - 8x^2 + 5x^3.\n\nLimak can change one coefficient in three ways:  He can set a_1 =  - 19, and Q(x) = 10 - 19x - 3x^2 + 5x^3.\n\nLimak can change one coefficient in three ways:  He can set a_0 =  - 19, and Q(x) = 10 - 38 - 12 + 40 = 0.\n\nIn the third sample, we are given the same polynomial. In the fourth sample, we are given the same polynomial.\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 1000000000') == '1'\nassert solution('2 20') == '2'\nassert solution('0') == '0'\nassert solution('2') == '1'\nassert solution('12') == '0'\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\nTime Limit: 0.1s\n\nSpace Limit: 0.1k\n\nNote: Each input has an upper limit of 10^9.\n'''\nimport math"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"2 2 2 1 1 1 1\") == \"0\"\nassert solution(\"7\") == \"3\"\nassert solution(\"3 2 2\") == \"3\"\nassert solution(\"3 4 3\") == \"3\"\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"3 4 4\\\") == 3\nassert solution(\\\"3 2 2\\\") == 0\nassert solution(\\\"1 4 5 2 3 4\\\") == 0\nassert solution(\\\"2 1 2\\\") == 1\nassert solution(\\\"2 2 3\\\") == 2\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('7') == 3\nassert solution('5') == 1\nassert solution('4') == 0\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"2 2 1 2\") == \"1\"\nassert solution(\"2 2 1 4\") == \"1\"\nassert solution(\"1 1 2 1\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n'''"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 1 3 7 5\"), '5'\nassert solution(\"1 4 5\"), '1'\nassert solution(\"1 5\"), '0'\nassert solution(\"5 4\"), '3'\nassert solution(\"1 0\"), '0'\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 0 0 2 2 1 2 2 1 1 1 0\"\n) == \"3\"\nassert solution(\n    \"0 1 1 0 1 0 0 1 0 0 1 0 0\"\n) == \"9\"\nassert solution(\n    \"0 0 0 0 1 1 1 1 1 0 1 0 0 1 0\"\n) == \"1\"\nassert solution(\n    \"0 1 1 2 1 2 1 1 1 0 0 0 0\"\n) == \"3\"\nassert solution(\n    \"0 0 0 0 1 1 1 1 1 0 0 0 0 0\"\n) == \"3\"\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 5 5\") == 6\nassert solution
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 5 5\") == 13\nassert solution(\"6 6 6\") == 8\nassert solution(\"9 9 9\") == 2\nassert solution(\"9 10 10\") == 2\nassert solution(\"5 10 10\") == 2\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2 2) == 5\nassert solution(0 3) == 13\nassert solution(8 4) == 7\nassert solution(1 0) == 1\nassert solution(2 4) == 4\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 1 5 5\",\"1 3 3 1\",\"1 2 2 2\",\"1 4 4 4\"]) == 13\nassert solution([\"1 0 0 0\",\"1 0 0 0\",\"1 1 0 0\",\"1 1 0 0\"]) == 3\nassert solution([\"1 1 0 0\",\"1 1 0 0\",\"1 1 1 0\",\"1 1 1 0\",\"1 1 1 0\",\"1 1 1 0\",\"1 1 1 1\",\"1 1 1 1\"]) == 12\nassert solution([\"1 0 0 0\",\"1 0 0 0\",\"1 1 0 0\",\"1 1 1 0\"]) == 1\nassert solution([\"1 1 1 1\",\"1 1 1 1\",\"1 1 1 1\",\"1 1 1 1\",\"1 1 1 1\",\"1 1 1 1\",\"1 1 1 1\",\"1 1 1 1\"]) == 4\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 13\nassert solution(inp) == 13\nassert solution(inp) == 13\nassert solution(inp) == 13\nassert solution(inp) == 13\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 13, \"incorrect output\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= $a_x$, $a_y$ <= 10^6\n1 <= $b_x$, $b_y$ <= 10^6\n1 <= $c_x$, $c_y$ <= 10^6\n\n\n-----Time complexity-----\n\nO(N) for all N in the range $0, 1000$\n\n\nO(1) for each N in the range $0, 1000$\n\n\nNote: the time complexity of solution is O(N) for the worst case. The best case of this problem is O(N).\n\n\n------Logic------\n\ninvalid chessboard\n\ninvalid checks\n\nforking\n\nfind valid queen\n\nforking\n\nforking\n\ninvalid queens\n\nfind valid queens\n\nfind valid queens\n\nforking\n\nfind valid queens\n\nfind valid queens\n\nking is not threatened\n\na queen is threatened\n\nb king is threatened\n\nking has not been threatened\n\nking is threatened\n\na queen is threatened\n\nking is threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened\n\nalice has been threatened"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2') == 'YES'\nassert solution('2 1') == 'NO'\n\"\"\"\n"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('8') == 'NO'\nassert solution('8') == 'NO'\n\n-----Constraints-----\n\n1 <= n <= 100\n0 <= a_x < n\n0 <= a_y < n\n0 <= b_x < n\n0 <= b_y < n\n0 <= c_x < n\n0 <= c_y < n\n0 <= diag_x < n\n0 <= diag_y < n\n\n-----Sample Input-----\n\n5\n3 4\n1 3\n4 3\n\nSample Output\n\nNO\n\"\"\"\n\nimport sys\nimport time\n\nfrom queue import PriorityQueue\n"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(solution_input) == 'YES'\n\n\n-----Constraints-----\n1 <= n <= 100\n0 <= a_x, a_y <= n\n0 <= b_x, b_y <= n\n\n-----Time Limit-----\n1 minute\n\nSample Tests\n>>> solution('4')\n'YES'\n>>> solution('7')\n'NO'\n'''"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"1 6\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 3\") == \"YES\"\n"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"8\") == \"YES\"\nassert solution(\"8\") == \"NO\"\n\nassert solution(\"8\") == \"NO\"\n\nassert solution(\"8\") == \"NO\"\n"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('8') == 'YES'\nassert solution('8') == 'NO'\nassert solution('8') == 'NO'\n\n\n[1]"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('8') == 'YES'\nassert solution('8') == 'NO'\nassert solution('8') == 'NO'\nassert solution('8') == 'NO'\nassert solution('8') == 'NO'\n"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"5 1\") == \"NO\""
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n(\n    (((3, 13), (7, 77))\n)) == (1001)\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(test) == \"3\"\nassert solution(test2) == \"13\"\nassert solution(test3) == \"35\"\nassert solution(test4) == \"77\"\nassert solution(test5) == \"16\"\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a = [1,2,3,4,5]) == 10\nassert solution(a = [1,1,1,1,1]) == 1\nassert solution(a = [1,1,1,1,1]) == 1\nassert solution(a = [1,1,1,1,1]) == 1\nassert solution(a = [2,1,1,1]) == 2\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == 1\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 1001\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input: \"7 5 3 4 10 13 15 8 12\"\n) == 18\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(list(map(int,input().split()))) == 1001\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"your code does not exist\"\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2, 5, 6) == 4\nassert solution(6, 8, 2, 3) == 12\nassert solution(10, 4, 8, 1) == 6\nassert solution(1, 1, 5, 7) == 1\nassert solution(1000, 100, 1000, 100) == 1000\n\n-----Constraints-----\n1\n1\n\nTime Limit: 1 sec\n\nSample Input\n\n2\n10 3 7\nSample Output\n\n1000\nExplanation\n\nWe want the LCM of 10 and 3, 8 and 7.\n\n\"\"\""
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 3') == '5'\nassert solution('2 3 4') == '3'\nassert solution('1 5') == '0'\nassert solution('1 2') == '0'\nassert solution('1 3') == '1'\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '500000000'\nassert solution(stdin
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('0 1 0 0 0 0 0 0') == '0'\nassert solution('2 1 1 0 1 0 0 0') == '1'\nassert solution('2 3 2 0 1 1 0 0') == '3'\nassert solution('2 2 2 2 2 2 2 2 2') == '2'\nassert solution('2 2 2 2 2 2 2 2 2') == '3'\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == '0'\n\n-----Constraints-----\n0 < k < 10^9\n0 < n <= 100\n0 < a_i < b_i < 10^9\n\nTime Limit: 1 sec\nMemory Limit: 1 MB\n\nAccepted\n295,994\nSubmissions\n189,318\n\nSubmissions (high)\n285,306\nSubmissions (low)\n123,945\n\nExplanation\nIn the second example, we are able to fill one basket completely.\n\nIn the third example, we can't fill any basket completely because there are less than $5$ berries in each shrub.\n\nIn the fourth example, we can't put all the red berries into baskets.\n\n\"\"\""
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\n\nassert solution(stdin) == 500000000\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n0 <= n <= 500\n0 <= k <= 10^9\n\n-----Time Limit Exceeded-----\nEnter \"h\" to take input as h\n\n'''"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 3\") == \"3\"\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 5 1 2 3\"), \"2\"\nassert solution(\"1 3 1 2 4\"), \"1\"\nassert solution(\"1 2 1\"), \"1\"\nassert solution(\"2 2\"), \"2\"\nassert solution(\"2 2 2 2 2\"), \"2\"\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '8549'\nassert solution(input()) == '8549.5'\nassert solution(input()) == '8549.5e2'\nassert solution(input()) == '8549e2'\nassert solution(input()) == '8549e3'\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '8549'"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"8549\"\nassert solution(stdin) == \"8549\"\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"8.549e2\") == \"854.9\"\nassert solution(\"8.549e3\") == \"8549\"\nassert solution(\"0.33e0\") == \"0.33\"\nassert solution(\"0.33e-1\") == \"0.3\"\nassert solution(\"0.34e0\") == \"0.34\"\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(eval(stdin))\nassert solution(stdin) == str(eval(stdin))\nassert solution(stdin) == str(eval(stdin))\nassert solution(stdin) == str(eval(stdin))\nassert solution(stdin) == str(eval(stdin))\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == \"8549\"\nassert solution(s) == \"8549\"\nassert solution(s) == \"85.0\"\nassert solution(s) == \"85.0\"\nassert solution(s) == \"85.0\"\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '8549'\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(8.549e2) == '854.9', \"wrong stdin\"\nassert solution(8.549e3) == '8549', \"wrong stdin\"\nassert solution(0.33e0) == '0.33', \"wrong stdin\"\nassert solution(0.33e1) == '0.33', \"wrong stdin\"\nassert solution(0.33e2) == '0.33', \"wrong stdin\"\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0.33e0\") == \"8549\"\nassert solution(\"0.33e3\") == \"8549\"\nassert solution(\"8.54e-2\") == \"8549\"\nassert solution(\"0.33e0\") == \"8549\"\nassert solution(\"0.33e-2\") == \"8549\"\n"
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0.33e0\") == \"8549\"\nassert solution(\"0.33e1\") == \"8549\"\nassert solution(\"0.33e2\") == \"8549\"\nassert solution(\"0.33e3\") == \"8549\"\nassert solution(\"0.33e4\") == \"8549\"\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"8\"\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 8\n\"\"\"\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\") == \"8\"\nassert solution(\"2 4 5 1 3\") == \"8\"\nassert solution(\"3 4 -10 -8 8\") == \"8\"\nassert solution(\"3 4 -10 -8 -8\") == \"8\"\nassert solution(\"4 3 5\") == \"8\"\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '8'\n'''\nimport collections\n\nN, K = map(int, input().split())\n\nP1 = list(map(int, input().split()))\nP2 = list(map(int, input().split()))\n\nP1 = set(P1)\nP2 = set(P2)\n\nP1 = P1.difference(P2)\nP2 = P2.difference(P1)"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"8\"\nassert solution(\"2 4 5 1 3\") == \"8\"\nassert solution(\"3 4 -10 -8 8\") == \"8\"\nassert solution(\"4 4 -10 -8 8\") == \"8\"\nassert solution(\"5 2\") == \"8\"\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(8)\n\"\"\"\nclass Solution:\n    def solve(self, N, K):\n        square = 1\n        \n        while square <= N:\n            square *= 2\n        \n        while square > 0:\n            square -= 2\n        \n        return str(square)\n\"\"\"\nclass Solution:\n    def solve(self, N, K):\n        def move(board, square):\n            tmp = board[square]\n            board[square] = board[square-1]\n            board[square-1] = tmp\n        def is_legal(board, square):\n            return board[square] == 'P'\n        \n        def move_to(board, square, destination, op):\n            board[destination] = board[square]\n            board[square] = op\n        \n        def swap(board, dest, op):\n            if op == 'U':\n                board[dest] = board[dest-1]\n                board[dest-1] = op\n            elif op == 'D':\n                board[dest] = board[dest+1]\n                board[dest+1] = op\n            elif op == 'R':\n                board[dest] = board[dest-2]\n                board[dest-2] = op\n            elif op == 'L':\n                board[dest] = board[dest+2]\n                board[dest+2] = op\n                \n        def move_from(board, dest, op):\n            if op == 'U':\n                board[dest] = op\n            elif op == 'D':\n                board[dest-1] = op\n            elif op == 'R':\n                board[dest-2] = op\n            elif op == 'L':\n                board[dest+1] = op\n                \n        def remove_square(board, square):\n            board[square] =''\n            \n        def move_back(board, dest, op):\n            board[dest] = op\n            \n        def solve(board, square, destination, op):\n            if is_legal(board, square):\n                if is_legal(board, destination):\n                    move(board, destination)\n                    remove_square(board, destination)\n                    solve(board, destination, destination, op)\n                    remove_square(board, destination)\n                    move(board, destination)\n                    \n                else:\n                    return 'illegal'\n            else:\n                return 'illegal'\n        \n        def solve_with_solution(board, square, destination, op):\n            if is_legal(board, destination):\n                move_to(board, destination, destination, op)\n                solve(board, destination, destination, op)\n                move_from(board, destination, op)\n                remove_square(board, destination)\n                \n            else:\n                return 'illegal'\n        \n        board = [''for _ in range(N)]\n        solution = solve(board, square, 0, 'U')\n        \n        for i in range(K):\n            solution = solution.replace(' ', '')\n            solution = solution +''\n        \n        return solution"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '8'\nassert solution(inp) == '8'\nassert solution(inp) == '8'\nassert solution(inp) == '8'\nassert solution(inp) == '8'\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"8\"\nassert solution(\"3 4 5\") == \"8\"\nassert solution(\"2 -10 -8 8\") == \"8\"\nassert solution(\"3 4 -10 -8 8\") == \"8\"\nassert solution(\"4 3\") == \"8\"\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"8\"\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"8\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 2 2\") == \"2 2\"\nassert solution(\"2 3 4\") == \"3 4\"\nassert solution(\"1 1 1\") == \"1 1\"\nassert solution(\"2 2 2\") == \"2 2\"\nassert solution(\"1 3 10\") == \"1 3 10\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"YES\"\nassert solution(2) == \"YES\"\nassert solution(3) == \"NO\"\nassert solution(4) == \"NO\"\nassert solution(5) == \"NO\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\" or solution(stdin) == \"NO\"\n\n\nInput\n3 4 5\n1 2 1\n2 3 3\n2 4 2\n2 5 1\n\nOutput\nYES\nNO\n\nInput\n3 3 5\n1 1 1\n1 1 5\n\nOutput\nYES\nNO\n\nInput\n2 2 5\n1 1 1\n1 1 2\n\nOutput\nNO\nNO\n\nInput\n2 3 1\n1 1 1\n1 1 2\n\nOutput\nNO\nYES\n\"\"\""
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, 2) == \"YES\"\nassert solution(3, 2) == \"NO\"\nassert solution(3, 2) == \"NO\"\nassert solution(3, 2) == \"NO\"\nassert solution(2, 3) == \"YES\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\" or solution(stdin) == \"NO\""
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == ['3', '5', '5', '3', '3', '3', '3', '3', '3']\nassert solution == ['2', '1', '2', '1', '1', '1', '1', '1', '1']\nassert solution == ['2', '1', '2', '1', '1', '1', '1', '1', '1']"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"4 3\"\nassert solution(stdin) == \"4 5 5\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 1 1\"\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == (\n    3\n    + (\n    1 * 2\n    + 1 * 2\n    + 1 * 2\n    + 1 * 2\n    + 1 * 2\n    + 1 * 2\n    + 1 * 2\n    + 1 * 2\n    + 1 * 2\n    + 1 * 2\n)\n\n[input]\n\nThe first line of input contains an integer,.\n\nThe second line of input contains an array of strings,.\n\nOutput\n\n.\n\nSample Input\n\n3\n1 2 3\n2 1 2\n1 1 1\n\nSample Output\n\n3\n2\n1\n1\n\nExplanation\n\nOne of the operations is used to form a path to the maximum possible answer. A path contains a single vertex, and there is no edge between it and the first leaf, so it will consist of a single vertex.\n\nExample 1:\n\nInput:\n\n3\n1 2\n1 3\n2 4\n2 5\n\nOutput:\n\n3\n2\n2\n3\n4\n\nExplanation:\n\nWe can construct a path from root to leaf 1, so we can safely remove leaf 1 from the tree.\n\nExample 2:\n\nInput:\n\n5\n1 2 3 4 5\n1 3 1\n1 5\n\nOutput:\n\n3\n2\n2\n3\n4\n5\n\nExplanation:\n\nWe can form a path from root to leaf 1, and remove leaf 1 from the tree.\n\nExample 3:\n\nInput:\n\n4\n1 2 3\n1 4\n1 5\n\nOutput:\n\n3\n2\n2\n3\n4\n5\n\nExplanation:\n\nWe can form a path from root to leaf 1, and remove leaf 1 from the tree.\n\nExample 4:\n\nInput:\n\n2\n1 2\n1 4\n2 3\n\nOutput:\n\n2\n2\n2\n\nExplanation:\n\nWe can form a path from root to leaf 1, and remove leaf 1 from the tree.\n\nExample 5:\n\nInput:\n\n3\n1 2 3\n1 2 3\n2 4\n\nOutput:\n\n3\n2\n2\n\nExplanation:\n\nWe can form a path from root to leaf 1, and remove leaf 1 from the tree.\n\nExample 6:\n\nInput:\n\n5\n1 2 3 4\n1 2 3\n1 4\n1 5\n\nOutput:\n\n5\n2\n2\n2\n3\n4\n4\n\nExplanation:\n\nWe can form a path from root to leaf 1, and remove leaf 1 from the tree.\n\nConstraints:\n\n1 <= stdin.length <= 500\n1 <= n <= 10^4\n1 <= a_{i}, b_{i} <= n\n1 <= c_{i} <= n\n\n\"\"\""
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '9'\nassert solution(stdin) == '3 3 3'\nassert solution(stdin) == '4 3 3'\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 2\", \"1 3\", \"2 4\", \"2 5\"]) == \"3 3 1 1 3 1 1 3 3\"\nassert solution([\"1 1\"]) == \"1 1\"\nassert solution([\"2 3\", \"3 3\", \"4 4\", \"4 5\"]) == \"1 3 2 1 3 3 3\"\nassert solution([\"3 4\", \"4 5\", \"3 5\", \"3 6\", \"4 6\", \"4 7\", \"6 7\", \"7 4\", \"7 5\"]) == \"3 4 3 3 4 3 4\"\nassert solution([\"1 3\", \"1 5\", \"1 7\", \"2 4\", \"2 6\", \"2 7\", \"3 4\", \"3 6\", \"3 8\", \"3 9\", \"4 9\", \"4 10\", \"4 11\", \"4 12\", \"4 13\", \"4 14\", \"5 16\", \"5 17\", \"5 18\", \"5 19\", \"5 20\", \"5 21\", \"5 22\", \"5 23\", \"5 24\", \"5 25\", \"5 26\", \"5 27\", \"5 28\", \"5 29\", \"6 10\", \"6 11\", \"6 12\", \"6 13\", \"6 14\", \"6 15\", \"7 16\", \"7 17\", \"7 18\", \"7 19\", \"7 20\", \"7 21\", \"7 22\", \"7 23\", \"7 24\", \"7 25\", \"7 26\", \"7 27\", \"7 28\", \"7 29\", \"7 30\", \"7 31\", \"8 10\", \"8 11\", \"8 12\", \"8 13\", \"8 14\", \"8 15\", \"8 16\", \"8 17\", \"8 18\", \"8 19\", \"8 20\", \"8 21\", \"8 22\", \"8 23\", \"8 24\", \"8 25\", \"8 26\", \"8 27\", \"8 28\", \"8 29\", \"8 30\", \"8 31\", \"9 10\", \"9 11\", \"9 12\", \"9 13\", \"9 14\", \"9 15\", \"9 16\", \"9 17\", \"9 18\", \"9 19\", \"9 20\", \"9 21\", \"9 22\", \"9 23\", \"9 24\", \"9 25\", \"9 26\", \"9 27\", \"9 28\", \"9 29\", \"9 30\", \"9 31\", \"10 11\", \"10 12\", \"10 13\", \"10 14\", \"10 15\", \"10 16\", \"10 17\", \"10 18\", \"10 19\", \"10 20\", \"10 21\", \"10 22\", \"10 23\", \"10 24\", \"10 25\", \"10 26\", \"10 27\", \"10 28\", \"10 29\", \"10 30\", \"10 31\", \"11 12\", \"11 13\", \"11 14\", \"11 15\", \"11 16\", \"11 17\", \"11 18\", \"11 19\", \"11 20\", \"11 21\", \"11 22\", \"11 23\", \"11 24\", \"11 25\", \"11 26\", \"11 27\", \"11 28\", \"11 29\", \"11 30\", \"11 31\", \"12 12\", \"12 13\", \"12 14\", \"12 15\", \"12 16\", \"12 17\", \"12 18\", \"12 19\", \"12 20\", \"12 21\", \"12 22\", \"12 23\", \"12 24\", \"12 25\", \"12 26\", \"12 27\", \"12 28\", \"12 29\", \"12 30\", \"12 31\", \"13 12\", \"13 13\", \"13 14\", \"13 15\", \"13 16\", \"13 17\", \"13 18\", \"13 19\", \"13 20\", \"13 21\", \"13 22\", \"13 23\", \"13 24\", \"13 25\", \"13 26\", \"13 27\", \"13 28\", \"13 29\", \"13 30\", \"13 31\", \"14 12\", \"14 13\", \"14 14\", \"14 15\", \"14 16\", \"14 17\", \"14 18\", \"14 19\", \"14 20\", \"14 21\", \"14 22\", \"14 23\", \"14 24\", \"14 25\", \"14 26\", \"14 27\", \"14 28\", \"14 29\", \"14 30\", \"14 31\", \"15 12\", \"15 13\", \"15 14\", \"15 15\", \"15 16\", \"15 17\", \"15 18\", \"15 19\", \"15 20\", \"15 21\", \"15 22\", \"15 23\", \"15 24\", \"15 25\", \"15 26\", \"15 27\", \"15 28\", \"15 29\", \"15 30\", \"15 31\", \"16 12\", \"16 13\", \"16 14\", \"16 15\", \"16 16\", \"16 17\", \"16 18\", \"16 19\", \"16 20\", \"16 21\", \"16 22\", \"16 23\", \"16 24\", \"16 25\", \"16 26\", \"16 27\", \"16 28\", \"16 29\", \"16 30\", \"16 31\", \"17 12\", \"17 13\", \"17 14\", \"17 15\", \"17 16\", \"17 17\", \"17 18\", \"17 19\", \"17 20\", \"17 21\", \"17 22\", \"17 23\", \"17 24\", \"17 25\", \"17 26\", \"17 27\", \"17 28\", \"17 29\", \"17 30\", \"17 31\", \"18 12\", \"18 13\", \"18 14\", \"18 15\", \"18 16\", \"18 17\", \"18 18\", \"18 19\", \"18 20\", \"18 21\", \"18 22\", \"18 23\", \"18 24\", \"18 25\", \"18 26\", \"18 27\", \"18 28\", \"18 29\", \"18 30\", \"18 31\"])"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 0 0 0 0 1 0 0 0\") == \"1\"\nassert solution(\"1 1 0 0 0 0 1 0 0 1\") == \"1 0 1\"\nassert solution(\"1 1 0 0 0 0 1 0 0 1 0\") == \"1 2 1 3 4\"\nassert solution(\"1 1 0 0 0 0 1 0 0 1 0 1\") == \"1 2 1 3\"\nassert solution(\"1 1 0 0 0 0 1 0 0 1 0 0 0\") == \"1 3\"\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 200,\n1 \u2264 a_i \u2264 10^9,\n1 \u2264 t_i \u2264 10^5\n\ntime\nO(n^2)\n\nSpace\nO(n)\n\n1\n1\n2\n2\n2\n3\n3\n3\n3\n\nn=5, a=3, t=6\n\nn=5, a=3, t=5\n\nn=5, a=3, t=4\n\nn=5, a=3, t=4\n\nn=5, a=3, t=4\n\nn=5, a=3, t=5\n\nn=5, a=3, t=4\n\nn=5, a=3, t=3\n\nn=5, a=3, t=2\n\nn=5, a=3, t=2\n\nn=5, a=3, t=1\n\nn=5, a=3, t=0\n\n\n-----Time complexity-----\n\nThe time complexity of this program is O(n^2)\n\nFor example, the time complexity of solution(input()) is O(n^2) and the total number of solutions is (n^2 - 1) / 2 = 5.\n\nIn this case, there are 10 solutions to the problem, and it takes 14 seconds to solve.\n\nIn other words, it takes O(n^2) and has a total of 5 solutions.\n\nIn this case, there are 1 solution to the problem.\n\n\n\n-----Space complexity-----\n\nThe space complexity of this program is O(n)\n\nThe space complexity of solution(input()) is O(1)\n\nIt takes 1 second to solve.\n\nThe space complexity of the program is O(n)\n\nIn this case, the space complexity is O(n).\n\n\n\n-----Brute Force-----\n\nThe brute force method runs in O(n^2) and it takes O(n) seconds to solve.\n\nFor the purpose of this method, the time complexity of the brute force method is O(n^2)\n\nThe brute force method takes O(n^2) and has a total of 9 solutions.\n\nFor the purpose of this method, the space complexity of the brute force method is O(n)\n\nBrute Force method is also O(n)\n\nIn this case, brute force takes O(n) and has a total of 3 solutions.\n\nBrute Force method takes O(n^2) and has a total of 5 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 6 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 7 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 8 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 9 solutions.\n\nBrute Force method takes O(n) and has a total of 10 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 10 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 11 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 12 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 13 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 14 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 15 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 16 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 17 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 18 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 19 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 20 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 21 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 22 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 23 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 24 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 25 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 26 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 27 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 28 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 29 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 30 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 31 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 32 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 33 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 34 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 35 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 36 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 37 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 38 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 39 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 40 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 41 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 42 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 43 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 44 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 45 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 46 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 47 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 48 solutions.\n\nIn this case, brute force takes O(n^2) and has a total of 49 solutions"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"6\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\""
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\nprint('solution has been passed.')\n\nprint('There are no solution in this test.')\n\"\"\"\nn = int(input())\na = list(map(int,input().split()))\nt = int(input())\nstdin = [x for x in input().split()]"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0, 'incorrect output'\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 20\n1 <= n <= 200\n1 <= a_i <= 10^9\n1 <= t_i <= 10^5\n\n2\n\n----My input--------------------------\n\n3\n5 5 5 1\n3 7 9 7 8\n\n2\n4 5\n5\n\n-----My output-------------------------------\n\n3\n\n\n-----My input--------------------------\n\n3\n5 2 5 7 5\n\n0\n6\n\n-----My output-------------------------------\n\n0\n\n\n\"\"\"\nimport numpy as np"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3 7 9 7 8\") == 5, \"true\"\nassert solution(\"5 3 7 9 7 8\") == 5, \"false\"\nassert solution(\"5 4 5 7 5\") == 4, \"true\"\nassert solution(\"5 6 7 5 7\") == 0, \"false\"\n\nInput\n5\n1 2 3 4 5\n1 1 1 1 1\n\nOutput\n6\n\nInput\n5\n1 2 3 4 5\n1 1 1 1 1\n\nOutput\n0\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= t_i <= 10^5\n\nTime Limit: 1 sec\n\n-----SAMPLE 1-----\ninput\n5\n3 7 9 7 8\n5 2 5 7 5\n\noutput\n6\n\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 2-----\ninput\n5\n3 7 9 7 8\n5 2 5 7 5\n\noutput\n0\n\n-----SAMPLE 3-----\ninput\n5\n3 2 2 2 2\n5 2 5 7 5\n\noutput\n0\n\n-----SAMPLE 4-----\ninput\n5\n3 4 2 2 2\n5 2 5 7 5\n\noutput\n0\n\n-----SAMPLE 5-----\ninput\n5\n3 7 9 7 8\n5 2 5 7 5\n\noutput\n6\n\n-----SAMPLE 6-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 7-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 8-----\ninput\n5\n3 7 9 7 8\n5 2 5 7 5\n\noutput\n0\n\n-----SAMPLE 9-----\ninput\n5\n3 7 9 7 8\n5 2 5 7 5\n\noutput\n6\n\n-----SAMPLE 10-----\ninput\n5\n3 7 9 7 8\n5 2 5 7 5\n\noutput\n0\n\n-----SAMPLE 11-----\ninput\n5\n3 7 9 7 8\n5 2 5 7 5\n\noutput\n0\n\n-----SAMPLE 12-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 13-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 14-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 15-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 16-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 17-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 18-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 19-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 20-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 21-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 22-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 23-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 24-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 25-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 26-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 27-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 28-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 29-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 30-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 31-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 32-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 33-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 34-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 35-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 36-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 37-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 38-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 39-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 40-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 41-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 42-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 43-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 44-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 45-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 46-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 47-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 48-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 49-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 50-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 51-----\ninput\n5\n1 2 3 4 5\n1 1 1 1 1\n\noutput\n0\n\n-----SAMPLE 52-----\ninput\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '6'\nassert solution(stdin) == '7'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\n\nExplanation\n\nInput:\n\nInput is given as follows:\n\nSTDIN      Method\n-----     --------\n<stdin>    read\n5       select category=3\n7       select category=7\n9       select category=9\n7       select category=7\n8       select category=8\n8       select category=8\n\nOutput:\n\n5\n0\n\nExplanation\n\nThe example below shows the program.\n\n\nExample 1:\n\nInput:\n\nInput is given as follows:\n\nSTDIN      Method\n-----     --------\n<stdin>    read\n5       select category=3\n7       select category=7\n9       select category=9\n7       select category=7\n8       select category=8\n\nOutput:\n\n3\n0\n\nExplanation:\n\nThe program will find the news categories with the same number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nExplanation:\n\nThe second type has two news categories, which will take 6 seconds.\n\nExplanation:\n\nThe category 2 has a different number of publications.\n\n\nExample 2:\n\nInput:\n\nInput is given as follows:\n\nSTDIN      Method\n-----     --------\n<stdin>    read\n5       select category=3\n7       select category=7\n9       select category=9\n7       select category=7\n8       select category=8\n8       select category=8\n\nOutput:\n\n8\n0\n\nExplanation:\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\n\nExample 3:\n\nInput:\n\nInput is given as follows:\n\nSTDIN      Method\n-----     --------\n<stdin>    read\n5       select category=3\n7       select category=7\n9       select category=9\n7       select category=7\n8       select category=8\n8       select category=8\n\nOutput:\n\n5\n0\n\nExplanation:\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\n\nExample 4:\n\nInput:\n\nInput is given as follows:\n\nSTDIN      Method\n-----     --------\n<stdin>    read\n5       select category=3\n7       select category=7\n9       select category=9\n7       select category=7\n8       select category=8\n8       select category=8\n\nOutput:\n\n0\n\nExplanation:\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\n\nExample 5:\n\nInput:\n\nInput is given as follows:\n\nSTDIN      Method\n-----     --------\n<stdin>    read\n5       select category=3\n7       select category=7\n9       select category=9\n7       select category=7\n8       select category=8\n8       select category=8\n\nOutput:\n\n5\n0\n\nExplanation:\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nExplanation:\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\nThe program will find the news categories which the second type has a different number of publications.\n\n\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        st_i = 0\n        ed_i = 0\n        n = int(stdin.strip())\n        a_i = []\n        while st_i < n:\n            l = stdin.strip().split(' ')\n            if len(l) >= 3:\n                a_i.append(l[1])\n                a_i.append(l[2])\n            else:\n                a_i.append(l[1])\n            st_i += 1\n        a_i.sort()\n        if len(a_i) > n:\n            a_i = a_i[:n]\n\n        min_time = 100000000\n        for i in range(n):\n            b = a_i[i]\n            if b == '':\n                continue\n            i = a_i.index(b)\n            # print(a_i)\n            # print(b)\n            a = len(a_i)\n            if a_i[i]!= b:\n                a = 0\n                b = a_i[i]\n            # print(a)\n            # print(b)\n            time = a_i[i]\n            print(time)\n            print(a)\n            print(b)\n            # print(time)\n            print(a_i)\n            # print(b_i)\n            if time < min_time:\n                min_time = time\n        if min_time == 100000000:\n            return ''\n        if min_time == 0:\n            return ''\n        return min_time"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"\n
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == correct(input())\n\nAssume that $n$ is an integer and that $s$ is a string. \n\nTest case 1:\n\nInput:\n4\n()()\n\nOutput:\n5\n8\n\nTest case 2:\n\nInput:\n6\n()()())(()()\n\nOutput:\n5\n10\n\nTest case 3:\n\nInput:\n2\n)()()\n\nOutput:\n0\n\nTest case 4:\n\nInput:\n())()\n\nOutput:\n0\n\nTest case 5:\n\nInput:\n(()()()())(()\n\nOutput:\n0\n\nTest case 6:\n\nInput:\n((()()())(()))\n\nOutput:\n0\n\n-----Constraints-----\n\n1 <= n <= 500\n\n0 <= k < n\n\nTest case 7:\n\nInput:\n(((()()()))())(((())())()()()((())))()\n\nOutput:\n0\n\"\"\"\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\n\n\"\"\""
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('((()())(())'  == '()())')\nassert solution(')(())()') == '(())()'\nassert solution('(()(())' == '()((())')\nassert solution('((())())') == '((())'\nassert solution('((()))'  == '(()()'\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"()(()())()\""
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"((()())))()\") == \"()()()\"\nassert solution(\"((()()))\") == \"()()()\"\nassert solutionn\n\"\"\"\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == correct\n\nassert solution(\"((()))\") == correct\n\nassert solution(\"(()())(((()))\") == correct\n\nassert solution(\"))(())\") == correct\n\nassert solution(\"(()))()((\") == correct"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"()()()\") == \"()()()\"\nassert solution(\"(()())\") == \"((())()\"\nassert solution(\"()((())\") == \"(()(()()()))\"\nassert solution(\"((())()\") == \"(((()()()))\"\nassert solution(\"(()())\") == \"()(())\"\n"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"()()()()()\"\nassert solution(stdin) == \"((()()())()())\"\nassert solution(stdin) == \"()((()())()())\"\nassert solution(stdin) == \"()()((()()())\"\nassert solution(stdin) == \"()((())()())\"\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('Hello_Vasya(and_Petya)__bye_(and_OK)') == '5 4'\nassert solution('_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__') == '2 6'\nassert solution('(LoooonG)__shOrt__(LoooonG)') == '5 2'\n\n\n-----Bonus-----\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return str(len(max(set(stdin.replace('_',' ').replace('__',' ').split(' ')), key=len)))\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('_Hello_Vasya(and_Petya)__bye_(and_OK)') == 5\nassert solution('_a_(b___c)__de_f(g_)__h__i(j_k_l)m__') == 2\nassert solution('(LoooonG)__shOrt__(LoooonG)') == 2\nassert solution('(___)') == 0\nassert solution('(___)') == 0\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5 2\"\n\nassert solution(stdin) == \"5 0\"\n\nassert solution(stdin) == \"0 0\"\n\nassert solution(stdin) == \"0 0\"\n\nassert solution(stdin) == \"0 0\""
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0 0'\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5 4\"\nassert solution(stdin) == \"0 0\""
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(sys.stdin.readline()) == str(0)\nassert solution(sys.stdin.readline()) == str(0)\n\n\nassert solution(sys.stdin.readline()) == str(0)\nassert solution(sys.stdin.readline()) == str(0)\n\nassert solution(sys.stdin.readline()) == str(0)\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5 4\"\nassert solution(input()) == \"5 2\"\nassert solution(input()) == \"0 0\"\n\"\"\""
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"5 2\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"0\""
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"Hello\", \"Vasya\", \"and\", \"Petya\", \"bye\", \"and\", \"OK\"]) == \"5 2\"\nassert solution([\"__\", \"__\", \"and\", \"__\", \"__\"]) == \"0 0\"\nassert solution([\"\")) == \"0 0\"\nassert solution([\"_\"]) == \"0 0\"\nassert solution([\"\"]) == \"0 0\"\n"
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"_Hello_Vasya(and_Petya)__bye_(and_OK)\") == 5\nassert solution(\"_a_(_b___c)__de_f(g_)__h__i(j_k_l)m__\") == 2\nassert solution(\"(___)\") == 0"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('a1 b2 c3 d4 e5 f6 g7 h8 i9 j9 k10 l10 m11 n12 o13 p14 q15 r16 s17 t17 v18 w19 t20 t21 u20 u21 v21 w21 t21 u21 w21 t21 u21 w21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21 t21 u21 v21"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n\nInput\n5 5\n1 3 3 4 5 2\n3 3\n\nOutput\n4\n\nInput\n1 2\n1\n\nOutput\n2\n\n\"\"\"\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str(input())) == str(int(input()) % 998244353)\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        6,\n        3,\n        2,\n        10,\n        20,\n        20,\n        30,\n        30,\n        30\n    ]) == 7\nassert solution(\n    [\n        12,\n        10,\n        20,\n        20,\n        25,\n        30,\n        30,\n        30\n    ]) == 2\nassert solution(\n    [\n        8,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1\n    ]) == 0\nassert solution(\n    [\n        8,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1,\n        1\n    ]) == 7\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1, \"The answer is wrong\""
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"No\"\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"2 3 1\") == \"0\"\nassert solution(\"2 4 4\") == \"0\"\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 9') == '0'\nassert solution('4 1808') == '1'\nassert solution('49 1808') == '0'\nassert solution('49 1808') == '6'\nassert solution('4 9') == '3'\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1020') == '0'\nassert solution('210') == '1'\nassert solution('1510') == '1'\nassert solution('5809') == '1'\nassert solution('102') == '1'\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 1) == 0\nassert solution(2, 2) == 1\nassert solution(49, 1808) == 35701\nassert solution(49, 1808) == 88816\nassert solution(49, 1808) == 73212\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 3') == '0'\nassert solution('2 3') == '0'\nassert solution('49 1808') == '6'\nassert solution('49 1808') == '359087121'\n\"\"\""
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"0\"\nassert solution(\"2 3\") == \"6\"\nassert solution(\"49 1808\") == \"359087121\"\nassert solution(\"\") == \"0\"\n\"\"\""
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n-----Constraints-----\n\n1 <= n <= 500\n1 <= k <= n^2\n\nSample Input\n1 1\n\nSample Output\n0\n\nExplanation\nThe same coloring as the input, but that contains a rectangle of the single color, consisting of $1$ tile.\n\nSince there are no rectangles of the single color, no colorings of the board of size $2 \\times 2$ are suitable.\n\"\"\""
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4 2 3 2') == '3'\nassert solution('2 3 1 3') == '0'\nassert solution('3 3 1 3') == '0'\nassert solution('4 4 4 4') == '0'\nassert solution('0 0 3 0 0 0') == '1'\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\n-----Constraints-----\n\n1 <= k <= 1000\n1 <= n <= 500\n\nTime Limit: 1 second\n\n1 <= stdin.length <= 3000\n\n1 <= stdin[i] <= 1<<20\n\n-----Examples-----\nInput\n2 3\n\nOutput\n6\n\nInput\n49 1808\n\nOutput\n359087121\n\n\n\n-----Note-----\n\nBoard of size $1 \\times 1$ is either a single black tile or a single white tile. Both of them include a rectangle of a single color, consisting of $1$ tile.\n\nHere are the beautiful colorings of a board of size $2 \\times 2$ that don't include rectangles of a single color, consisting of at least $3$ tiles: [Image] \n\nThe rest of beautiful colorings of a board of size $2 \\times 2$ are the following: [Image]\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"359087121\"\n\n\n------Good luck!------\n\n\"\"\""
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == 26, 'incorrect answer'\nassert solution(\n    \"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == 5, 'incorrect answer'\nassert solution(\n    \"5 2\\n1 7\\n1 9\\n1 5\\n\") == 2, 'incorrect answer'\nassert solution(\n    \"5 3\\n1 9\\n1 7\\n2 6\\n2 5\\n3 1\\n\") == 2, 'incorrect answer'\nassert solution(\n    \"5 1\\n1 9\\n1 7\\n1 5\\n\") == 5, 'incorrect answer'\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), 'incorrect solution'\n\"\"\"\n\nN, K = map(int, stdin.split())\nt_1, d_1 = map(int, stdin.split())\nt_2, d_2 = map(int, stdin.split())\n\nt_1 -= (K * (t_1 - 1)) // 2\nt_2 -= (K * (t_2 - 1)) // 2\n\nvariety_bonus = 1\nd_2_minus_t_2 = d_2 - t_2\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"26\"\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"26\"\n\"\"\""
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"26\"\nassert solution(\"1 9\") == \"26\"\nassert solution(\"1 7\") == \"7\"\nassert solution(\"2 6\") == \"5\"\nassert solution(\"2 5\") == \"4\"\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 9', [1, 9]) == 22\nassert solution('1 7', [1, 7]) == 22\nassert solution('2 6', [2, 6]) == 10\nassert solution('2 5', [2, 5]) == 10\nassert solution('3 1', [3, 1]) == 10\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"26\""
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"26\"\n\"\"\""
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"26\"\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"25\"\n\"\"\""
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"10\""
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 0\") == 5\nassert solution(\"2 4 2\") == 3\nassert solution(\"1 3 4\") == 2\nassert solution(\"4 5 7\") == 10\nassert solution(\"3 4 -1 -1\") == 0\n\"\"\"\n\nimport math"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '5'\nassert solution('2 5 -5') == '5'\nassert solution('3 -5 -5') == '5'\nassert solution('4 -5 -5') == '5'\nassert solution('5 -5 -5') == '5'\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '10.000000000000000000000000000000000000000000000000'\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 2 0 0 1 -1 -1 -1 1 0 1\") == \"12\"\nassert solution(\"0 0 0 0 0 0 1 1 -1 -1 1 1 1\") == \"6\"\nassert solution(\"2 2 2 2 2 2 2 2 2 2 2 2 2\") == \"12\"\nassert solution(\"4 4 2 3 0 0 1 -1 -1 -1 1 1 1\") == \"17\"\nassert solution(\"2 2 2 2 2 2 2 2 2 2 2 2 2 2\") == \"12\"\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"10\"\n\n\"\"\"\n\nN = int(input())\nx_1, y_1 = map(int, input().split())\nx_2, y_2 = map(int, input().split())\n\nx_N, y_N = map(int, input().split())\n\nanswer = abs(abs(x_1) + abs(y_1) - abs(x_2) - abs(y_2))"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"10\"\nassert solution(input) == \"10\"\nassert solution(input) == \"10\"\nassert solution(input) == \"10\"\nassert solution(input) == \"10\"\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4\\n-5\\n2\\n5\\n0') == '10'\nassert solution('-4\\n-3\\n-2\\n-1\\n-2\\n0') == '9'\nassert solution('4\\n5\\n-4\\n-5\\n0') == '11'\nassert solution('0\\n-2\\n-5\\n0') == '5'"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\",\"0\",\"10\"]) == \"10\"\nassert solution([\"1\",\"5\",\"-5\",\"-5\",\"-5\"]) == \"-5\"\nassert solution([\"-5\",\"-5\",\"-5\",\"-5\",\"-5\"]) == \"-5\"\nassert solution([\"5\",\"5\",\"0\",\"0\",\"0\"]) == \"5\"\nassert solution([\"-5\",\"-5\",\"-5\",\"-5\",\"-5\"]) == \"5\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution({\"1?AA\": 2}) == 100\nassert solution({\"1?AA\": 3}) == 33\nassert solution({\"1?AA\": 4}) == 73\nassert solution({\"1?AA\": 5}) == 81\nassert solution({\"1?AA\": 6}) == 106\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 100\n\"\"\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"??JGJ9\"), \"Unknown\"\n\n\nInput\n1?JGJ9\n\nOutput\n4\n\n\"\"\"\n\nimport sys\nimport copy\nimport collections\n\nclass Solution:\n    def __init__(self, code: str, hint: str):\n        self.code = code\n        self.hint = hint\n        self.c = collections.defaultdict(int)\n        self.i = collections.defaultdict(int)\n        for c in self.code:\n            self.c[c] += 1\n            self.i[c] += 1\n        self.d = collections.defaultdict(int)\n\n    def solve(self) -> int:\n        for c in self.code:\n            for s in range(self.c[c]):\n                self.d[c] += 1\n\n        for c in self.code:\n            self.d[c] -= 1\n            for i in range(self.i[c]):\n                self.c[c] -= 1\n                self.d[c] -= 1\n        \n        return sum(self.d.values())"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('?JGJ9') == \"?\"\nassert solution('?JGJ9?JGJ9') == \"?\"\nassert solution('?JGJ9?JGJ9?JGJ9') == \"?\"\nassert solution('?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9') == \"?\"\nassert solution('?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9?JGJ9') == \"?\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"JGJ9\") == \"56669\"\nassert solution(\"5666\") == \"00111\"\nassert solution(\"4567\") == \"00111\"\nassert solution(\"23\") == \"11\"\nassert solution(\"0911\") == \"9\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 100\n\"\"\""
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1?AA\") == \"81\"\nassert solution(\"0?AA\") == \"100\"\nassert solution(\"1?AAA\") == \"111\"\nassert solution(\"0?AAA\") == \"111\"\nassert solution(\"1?A11\") == \"111\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"?JGJ9\"), \"The hint doesn't match any safes\"\nassert solution(\"?JGJ9\"), \"The hint doesn't match any safes\"\nassert solution(\"?JGJ9\"), \"The hint doesn't match any safes\"\nassert solution(\"?JGJ9\"), \"The hint doesn't match any safes\"\nassert solution(\"?JGJ9\"), \"The hint doesn't match any safes\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('?JGJ9') == '56669', \"The hint doesn't match the pattern\"\nassert solution('JGJ9') == '56669', \"The hint doesn't match the pattern\"\nassert solution('JGJ9') == '12666', \"The hint doesn't match the pattern\"\nassert solution('JGJ9') == '1000000000', \"The hint doesn't match the pattern\"\nassert solution('JGJ9') == '1100000001', \"The hint doesn't match the pattern\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"?JGJ9\"), \"Invalid hint: must contain digits only\"\nassert solution(\"12319\"), \"Invalid hint: must contain digits only\"\nassert solution(\"50\"), \"Invalid hint: must contain digits only\"\nassert solution(\"AJ\"), \"Invalid hint: must contain digits only\"\nassert solution(\"JGJ9\"), \"Invalid hint: must contain digits only\"\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\", \"2\", \"1\", \"4\", \"5\", \"6\", \"8\", \"7\", \"9\", \"6\", \"3\", \"2\", \"4\", \"6\", \"5\", \"8\", \"7\", \"9\", \"3\", \"4\", \"2\", \"6\", \"5\", \"8\", \"2\", \"1\", \"7\", \"3\", \"1\", \"2\", \"4\", \"6\", \"8\", \"2\", \"1\", \"4\", \"7\", \"2\", \"6\", \"8\", \"5\", \"9\", \"4\", \"7\", \"1\", \"3\", \"2\", \"3\", \"7\", \"8\", \"5\", \"2\", \"4\", \"6\", \"8\", \"2\", \"2\", \"4\", \"3\", \"5\", \"8\", \"2\", \"2\", \"1\", \"7\", \"1\", \"9\", \"2\", \"3\", \"5\", \"1\", \"6\", \"7\", \"6\", \"8\", \"7\", \"9\", \"2\", \"2\", \"3\", \"4\", \"7\", \"2\", \"1\", \"3\", \"2\", \"2\", \"6\", \"5\", \"8\", \"5\", \"6\", \"9\", \"7\", \"3\", \"4\", \"1\", \"8\", \"3\", \"4\", \"2\", \"4\", \"2\", \"6\", \"3\", \"9\", \"7\", \"8\", \"2\", \"6\", \"3\", \"2\", \"3\", \"1\", \"7\", \"9\", \"3\", \"8\", \"4\", \"2\", \"3\", \"5\", \"7\", \"6\", \"1\", \"3\", \"1\", \"5\", \"2\", \"3\", \"4\", \"6\", \"8\", \"6\", \"4\", \"5\", \"9\", \"7\", \"6\", \"8\", \"1\", \"7\", \"1\", \"9\", \"6\", \"7\", \"2\", \"2\", \"3\", \"2\", \"4\", \"6\", \"1\", \"8\", \"2\", \"2\", \"1\", \"1\", \"6\", \"5\", \"7\", \"3\", \"2\", \"3\", \"2\", \"7\", \"1\", \"4\", \"2\", \"7\", \"8\", \"1\", \"7\", \"2\", \"3\", \"2\", \"6\", \"4\", \"2\", \"1\", \"1\", \"2\", \"1\", \"4\", \"5\", \"6\", \"8\", \"4\", \"5\", \"8\", \"8\", \"2\", \"2\", \"2\", \"5\", \"5\", \"8\", \"3\", \"1\", \"7\", \"4\", \"1\", \"6\", \"4\", \"5\", \"1\", \"4\", \"3\", \"4\", \"7\", \"6\", \"8\", \"7\", \"2\", \"4\", \"3\", \"9\", \"1\", \"4\", \"3\", \"7\", \"2\", \"2\", \"5\", \"8\", \"2\", \"3\", \"1\", \"4\", \"1\", \"7\", \"9\", \"1\", \"3\", \"2\", \"7\", \"9\", \"8\", \"3\", \"6\", \"2\", \"6\", \"8\", \"1\", \"5\", \"3\", \"4\", \"2\", \"5\", \"9\", \"3\", \"4\", \"1\", \"6\", \"3\", \"7\", \"8\", \"7\", \"3\", \"9\", \"3\", \"6\", \"2\", \"8\", \"2\", \"3\", \"2\", \"2\", \"5\", \"9\", \"7\", \"3\", \"5\", \"4\", \"2\", \"1\", \"8\", \"3\", \"5\", \"9\", \"5\", \"6\", \"8\", \"5\", \"7\", \"2\", \"5\", \"2\", \"9\", \"2\", \"8\", \"5\", \"1\", \"2\", \"7\", \"2\", \"4\", \"1\", \"2\", \"3\", \"2\", \"4\", \"8\", \"1\", \"4\", \"6\", \"8\", \"2\", \"3\", \"6\", \"9\", \"7\", \"1\", \"4\", \"2\", \"4\", \"6\", \"2\", \"6\", \"5\", \"2\", \"1\", \"6\", \"2\", \"1\", \"3\", \"2\", \"2\", \"6\", \"2\", \"4\", \"3\", \"5\", \"1\", \"3\", \"2\", \"1\", \"3\", \"1\", \"2\", \"5\", \"8\", \"2\", \"8\", \"2\", \"5\", \"3\", \"4\", \"2\", \"3\", \"4\", \"3\", \"7\", \"1\", \"2\", \"1\", \"5\", \"3\", \"3\", \"7\", \"4\", \"1\", \"1\", \"6\", \"1\", \"2\", \"3\", \"4\", \"2\", \"3\", \"2\", \"3\", \"3\", \"6\", \"5\", \"3\", \"7\", \"3\", \"2\", \"5\", \"1\", \"5\", \"7\", \"5\", \"4\", \"1\", \"3\", \"2\", \"4\", \"3\", \"1\", \"1\", \"5\", \"7\", \"2\", \"7\", \"3\", \"4\", \"2\", \"1\", \"3\", \"7\", \"1\", \"3\", \"1\", \"2\", \"2\", \"5\", \"9\", \"3\", \"3\", \"4\", \"2\", \"2\", \"1\", \"6\", \"1\", \"4\", \"4\", \"2\", \"2\", \"6\", \"2\", \"2\", \"5\", \"9\", \"4\", \"2\", \"5\", \"5\", \"1\", \"4\", \"7\", \"4\", \"6\", \"8\", \"2\", \"5\", \"3\", \"5\", \"1\", \"7\", \"2\", \"4\", \"4\", \"1\", \"3\", \"2\", \"5\", \"1\", \"4\", \"6\", \"1\", \"1\", \"5\", \"3\", \"1\", \"5\", \"4\", \"3\", \"6\", \"7\", \"6\", \"1\", \"3\", \"1\", \"3\", \"6\", \"3\", \"7\", \"1\", \"1\", \"2\", \"5\", \"7\", \"3\", \"3\", \"7\", \"1\", \"2\", \"5\", \"6\", \"2\", \"1\", \"3\", \"4\", \"2\", \"1\", \"1\", \"3\", \"3\", \"2\", \"4\", \""
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 2 2 3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4 5 6 3 2 1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 5\nassert solution(4) == 2\nassert solution(2) == 2"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(3)\n\nassert solution(stdin) == str(2)\n\nassert solution(stdin) == str(0)\n\nassert solution(stdin) == str(0)"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"2\", \"3\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"3\"\nassert solution([\"1\", \"2\", \"4\", \"3\"]) == \"1\"\nassert solution([\"2\", \"4\", \"6\", \"3\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"6\"]) == \"2\"\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 5 1 4 2 3 1\") == \"3 1\"\nassert solution(\"5 3 6 1 4 2\") == \"3 1\"\nassert solution(\"1 2 3 3 4 5\") == \"3 1\"\n\n\n\"\"\"\n\nimport itertools\nimport math"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n\"\"\""
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4 2 2 3') == '2'\nassert solution('6 8 4 6 7 1 6 3 4 5') == '3'\nassert solution('10') == '3'\nassert solution('6 8 4 6 7 1 9 3 10 5') == '0'\nassert solution('10 20 40 30 20 30') == '3'\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 20\nprint(solution(stdin))"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 6') == '1 2 3 4 5 6'\nassert solution('1 3 4 5 6') == '1 3 4 5 6'\nassert solution('1 3') == '1 3'\nassert solution('1 4') == '1 3'\nassert solution('1 5') == '1 3'\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"35\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"The problem is not correct.\"\nassert solution(stdin), \"The problem is not correct.\"\nassert solution(stdin), \"The problem is not correct.\"\nassert solution(stdin), \"The problem is not correct.\"\nassert solution(stdin), \"The problem is not correct.\"\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == [\"20\", \"1\", \"3\", \"4\"]\nassert solution(stdin) == [\"35\", \"1\", \"3\", \"5\"]\nassert solution(stdin) == [\"35\", \"1\", \"3\", \"6\"]\nassert solution(stdin) == [\"35\", \"1\", \"3\", \"6\"]\nassert solution(stdin) == [\"35\", \"1\", \"3\", \"6\"]\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"35\"\nassert solution(inp) == \"1 3 4 \nassert solution(inp) == \"2 3 4 6 \nassert solution(inp) == \"1 2 3\"\nassert solution(inp) == \"1 2 3 4\"\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 5 4 10 20 40 100\") == \"20\"\nassert solution(\"1 3 4 5 6 7 8 9 10\") == \"3\"\nassert solution
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"35\"\n\"\"\""
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\n\nInput\n4\n\nOutput\n0\n\"\"\"\n\nfrom math import log10\n\nn = int(input())\n\nfor i in range(1,n+1):\n    a = int(log10(i))\n    b = i**a\n    if a*b == i:\n        print(i)\n        print(b)\n    else:\n        print(0)\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4) == 8\nassert solution(6) == 28\nassert solution(2) == 0\nassert solution(0) == 0\nInput\n5\n\nOutput\n10\n\"\"\""
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 8\nassert solution(1) == 0\nassert solution(2) == 28\nassert solution(7) == 0\nassert solution(1) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == 0\nassert solution(5) == 1\nassert solution(8) == 4\nassert solution(6) == -8\nassert solution(10) == 7\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == 0\nassert solution(2) == 2\nassert solution(1) == 2\nassert solution(8) == 0\nassert solution(16) == 1\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 8, \"expected 8, got\"\n\"\"\""
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == str(max(map(int,str(input()).split())))\nassert solution(input('5')) == str(max(map(int,str(input()).split())))\nassert solution(input('12')) == str(max(map(int,str(input()).split())))\nassert solution(input('256')) == str(max(map(int,str(input()).split())))\nassert solution(input('9999')) == str(max(map(int,str(input()).split())))\n\n'''\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == 1\nassert solution(5) == 2\nassert solution(10) == 2\nassert solution(1) == 0\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == 0\nassert solution(5) == 5\nassert solution(6) == 0\nassert solution(7) == 8\nassert solution(8) == 28\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == 8\nassert solution(6) == 28\nassert solution(2) == 0"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"2\"\nassert solution(\"3 5\") == \"1\"\nassert solution(\"3 6\") == \"2\"\nassert solution(\"3 7\") == \"2\"\nassert solution(\"3 8\") == \"2\"\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 3') == '2'\nassert solution('1 1 1 2 1') == '1'\nassert solution('1 5 6') == '3'\nassert solution('5 6 2') == '1'\nassert solution('6 3 2') == '1'\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n\nExplanation\n\nSolution 1:\n\nInput:\n3 3\n1 2 3\n2 3 1\n1 2 1\n\nOutput:\n2"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 3 2\"\n) == \"2\"\nassert solution(\n    \"3 4 1\"\n) == \"1\"\nassert solution(\n    \"3 5 5\"\n) == \"4\"\nassert solution(\n    \"3 1 1\"\n) == \"1\"\nassert solution(\n    \"3 2 2\"\n) == \"1\"\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n0 < n, m < 10^5\n1 <= n, m <= 100\n0 < j < n\n0 <= a_ij < 10^9\n\nTime Limit: 10^9\nSpace Limit: 1e6\n\n-----Submission Detail-----\n1480.195%\n\n'''\n\nn, m = map(int, input().strip().split())\na = [list(map(int, input().strip().split())) for _ in range(m)]"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 3') == '1'\nassert solution('4 4') == '2'\nassert solution('5 1 6') == '2'\nassert solution('2 2 2') == '1'\nassert solution('10 10 3') == '4'\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 1\nassert solution(stdin) == 2\n\nassert solution(stdin) == 3\nassert solution(stdin) == 2\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\nn, m = map(int, input().split())\n\nvote_list = []\n\nfor i in range(n):\n    vote_list.append(int(input()))\n\nanswer = 0\n\nfor i in range(m):\n    candidate_list = []\n    count = 0\n    for j in range(n):\n        if vote_list[j] in candidate_list:\n            count += 1\n            candidate_list.remove(vote_list[j])\n    if len(candidate_list) == 0:\n        answer += 1\n    else:\n        answer += count\n        answer += len(candidate_list)\n        candidate_list.sort()\n        for j in range(len(candidate_list)):\n            vote_list[j] += 1\n\nprint(answer)"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"3 4 5 1 5\") == \"2\"\nassert solution(\"3 4 5 1 6 7 8 9 10\") == \"2\"\nassert solution(\"3 4 5 10\") == \"1\"\nassert solution(\"3 4 5 10 15 15 15 15\") == \"2\"\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"3 4 5 2 6 10 7 11\"\n) == \"5\"\nassert solution(\n    \"3 4 5 1 4 9 10 7 11\"\n) == \"-1\"\n\n\n------Constraints------\n1 <= n <= 100\n0 <= m <= 100\n1 <= a_i, b_i <= 100\n\n------SAMPLE CASE-------\nInput\n\n2\n2 3 2\n2 1 3\n\nOutput\n\n1\n\n------SAMPLE CASE-------\nInput\n\n1 2\n5 2 4\n3 4 6\n\nOutput\n\n-1\n------SAMPLE CASE-------\nInput\n\n2\n1 4\n1\n3\n\nOutput\n\n5\n\n------SAMPLE CASE-------\nInput\n\n2\n1 5\n3 4\n1 2\n\nOutput\n\n5\n\n------SAMPLE CASE-------\nInput\n\n2\n1 2\n1\n1\n\nOutput\n\n-1\n\n------SAMPLE CASE-------\nInput\n\n1\n1\n0 1\n1\n0\n\nOutput\n\n0\n\n-----SAMPLE CASE-------\nInput\n\n2\n1 2\n1\n1\n3\n\nOutput\n\n1\n\n------SAMPLE CASE-------\nInput\n\n1\n1\n0 1\n2\n\nOutput\n\n0\n\n-----SAMPLE CASE-------\nInput\n\n2\n1 3\n1\n1\n3\n\nOutput\n\n-1\n\n-----SAMPLE CASE-------\nInput\n\n1\n1\n0 1\n2\n1\n\nOutput\n\n2\n\n-----SAMPLE CASE-------\nInput\n\n2\n2 3 2\n2 1 3\n\nOutput\n\n-1\n\n-----SAMPLE CASE-------\nInput\n\n2\n2 1\n1\n2\n\nOutput\n\n2\n\n-----SAMPLE CASE-------\nInput\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36\n\nOutput\n\n0\n\n------SAMPLE CASE-------\nInput\n\n1\n1\n0 1\n1\n1\n1\n1\n1\n\nOutput\n\n0\n\n------SAMPLE CASE-------\nInput\n\n2\n1 4\n1\n1\n2\n1\n\nOutput\n\n0\n\n------SAMPLE CASE-------\nInput\n\n2\n1 1\n1\n1\n1\n1\n1\n\nOutput\n\n-1\n\"\"\""
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3 5 2 4 8 9 6 10 7 11\") == \"2\"\nassert solution(\"1 4 5 3 6 10 7 11\") == \"4\"\nassert solution(\"1 3 4 5 6\") == \"4\"\nassert solution(\"4 2 5 6 10 7 11\") == \"4\"\nassert solution(\"1 1 2 3 4\") == \"4\"\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 2 3 4 5 6 7 8 9 10\", \"1 4 5 2 3 4 7 6 8 9 10\", \"1 3 2 3 3 4 5 2 3 4 5 6 9 8 7 10\", \"1 7 3 7 7 9 7 2 3 2 3 7 4 5 10 8 10 3 2 3 5 9 7 9 6 3 4 9\", \"1 4 5 2 3 4 7 6 8 9 10\", \"1 3 2 3 3 4 5 2 3 4 5 6 7 8 9 10\"]) == \"5\"\nassert solution([\"1 2 3 4 5 6 7 8 9 10\", \"1 4 5 2 3 4 7 6 8 9 10\", \"1 3 2 3 3 4 5 2 3 4 5 6 7 8 9 10\", \"1 7 3 7 7 9 7 2 3 2 3 7 4 5 10 8 10 3 2 3 5 9 7 9 6 3 4 9\", \"1 4 5 2 3 4 7 6 8 9 10\", \"1 3 2 3 3 4 5 2 3 4 5 6 7 8 9 10\"]) == \"5\""
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '5'"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 5 3') == '5'\nassert solution('3 4 6') == '-1'\nassert solution('3 4 5') == '0'\nassert solution('3 8 9 6 7 11') == '-1'\nassert solution('3 8 9 6 7 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"../../input.txt\") == \"5\"\n\"\"\"\n\nimport sys\nimport re\nimport math"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1 2\") == \"5\"\nassert solution(\"5 2 4\") == \"6\"\nassert solution(\"5 3 4\") == \"5\"\nassert solution(\"5 4 5\") == \"-1\"\nassert solution(\"4 4 3\") == \"6\"\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"4 8 7 10 11\"\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Day is not the same for the first year\"\nassert solution(stdin), \"Day is not the same for the second year\"\nassert solution(stdin), \"Day is not the same for the third year\"\nassert solution(stdin), \"Day is not the same for the fourth year\"\nassert solution(stdin), \"Day is not the same for the fifth year\""
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2016') == '2044'\nassert solution('2000') == '2028'\nassert solution('50501') == '50507'\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2044'\n\n\n-----Note-----\n\nHere, we have created a pattern to match only the number of days in the year. Then we will compare the pattern with the number of days.\n\nFor example, 01.00.000 indicates that the pattern is 000.0.00.000. A pattern of 00.000.000 indicates that we have 00.000.000 days.\n\nThe year is in the year 10,000,000, and we have 4 days.\n\nHere, we are interested in calculating the number of days for the year.\n\n\n---------Solution-----"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2044'\nassert solution(stdin) == '2028'\nassert solution(stdin) == '50507'"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1000\") == \"2044\"\nassert solution(\"2000\") == \"2028\"\nassert solution(\"50501\") == \"50507\""
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2044\"\nassert solution(stdin) == \"2035\"\nassert solution(stdin) == \"2045\"\nassert solution(stdin) == \"2030\"\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2020\") == \"2044\"\nassert solution(\"35\") == \"2047\"\nassert solution(\"00\") == \"00\"\nassert solution(\"1\") == \"1\"\nassert solution(\"20\") == \"20\"\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2015\") == \"2044\"\nassert solution(\"2014\") == \"2044\"\nassert solution(\"2004\") == \"2029\"\nassert solution(\"2003\") == \"2029\"\nassert solution(\"2001\") == \"2029\"\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2044\", \"Invalid stdin\"\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(2044)\n\nprint('Example 1:')\nprint('Input : ')\nprint('stdin : ')\nprint('Output : ')\nprint('2044')\nprint('Exception :')\nprint('2044')\nassert solution(stdin) == str(2044)\n\nprint('Example 2:')\nprint('Input : ')\nprint('stdin : ')\nprint('Output : ')\nprint('2028')\nprint('Exception :')\nprint('2028')\nassert solution(stdin) == str(2028)\n\nprint('Example 3:')\nprint('Input : ')\nprint('stdin : ')\nprint('Output : ')\nprint('50507')\nprint('Exception :')\nprint('50507')\nassert solution(stdin) == str(50507)\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 29\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1900:01:01\") == 50768\nassert solution(\"1996:03:09\") == 1579\nassert solution(\"1991:11:12\") == 773\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1900:01:01\", \"2038:12:31\", \"1996:03:09\", \"1991:11:12\"]) == '50768'\nassert solution([\"2000:01:01\", \"2000:02:01\"]) == '1579'\nassert solution([\"2000:01:01\", \"2000:02:02\"]) == '16'\nassert solution([\"2001:01:01\", \"2001:02:02\"]) == '0'"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1998:00:00\") == \"50768\"\nassert solution(\"1995:04:29\") == \"1579\"\nassert solution(\"1995:04:29\") == \"50768\"\n\"\"\""
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input() == '50768')\nassert solution(input() == '1579')\nassert solution(input() == '2921')\nassert solution(input() == '2028')\nassert solution(input() == '2025')\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin\n    ) == \"50768\"\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1998:03:09\") == \"1579\"\nassert solution(\"1996:03:09\") == \"50768\"\nassert solution(\"1998:03:11\") == \"50768\"\nassert solution(\"1998:03:14\") == \"50768\"\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2001:02:03\") == 50768, \"Problem 1\"\nassert solution(\"2003:02:03\") == 1579, \"Problem 2\"\nassert solution(\"2003:02:03\") == 50768, \"Problem 3\"\nassert solution(\"2001:02:03\") == 1579, \"Problem 4\"\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0, 0, 0, 0, 0) == 1579\n\"\"\"\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2003:01:01\") == \"50768\"\nassert solution(\"1997:03:09\") == \"1579\"\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"1 2\"\nassert solution(\"6 4\") == \"2 3\"\nassert solution(\"6 7\") == \"3 4\"\nassert solution(\"6 4 3\") == \"4 5\"\nassert solution(\"6 4 4\") == \"4 4\"\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"3 5\") == \"5\"\nassert solution(\"3 6\") == \"6\"\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n\n'''\n\nfrom sys import stdin, stdout\nimport time"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '5'\nassert solution(input()) == '6'\nassert solution(input()) == '7'\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '7'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"\\\"\\\"\") == \"1\"\nassert solution(\\\"\\\"\\\"\") == \"2\"\nassert solution(\\\"\\\"\\\"\") == \"3\"\nassert solution(\\\"\\\"\\\"\") == \"4\"\nassert solution(\\\"\\\"\\\"\") == \"5\"\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"7\"\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1\"\n\nNote that the first and second lines are equivalent to the minimum time required to scare all humans in cities being attacked. Also, the time needed for Super M is always the minimum time needed to scare all humans in a city being attacked.\n\n\"\"\"\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n\n\"\"\"\n\nimport sys\nimport math\n\nn,x = map(int,input().split())\narr = [int(x) for x in input().split()]"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '-1'"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5, \"incorrect output\"\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 5\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2) == 5\n\nassert solution(6, 2) == 4\n\nassert solution(2, 2) == 0\n\nassert solution(5, 2) == -1\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n\n\n\nassert solution(stdin) == -1\n\n\"\"\""
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(4, 5) == 5\nassert solution(3, 2) == -1"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 4\") == \"5\"\nassert solution(\"3 1 5\") == \"5\"\nassert solution(\"5 6 1\") == \"5\"\n\nPrint solution(stdin.readline())\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"eye\"\nassert solution(stdin) == \"reviver\"\nassert solution(stdin) == \"ev\"\nassert solution(stdin) == \"ev\"\nassert solution(stdin) == \"ev\"\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(revive) == \"eye\"\nassert solution(ee) == \"reviver\"\nassert solution(kitayuta) == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"revive\") == \"eye\"\nassert solution(\"ee\") == \"NA\"\nassert solution(\"kitayuta\") == \"NA\""
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"kitayuta\"\n\nassert solution(\"ev\") == \"ev\"\n\nassert solution(\"rec\") == \"rec\"\n\nassert solution(\"aev\") == \"aev\"\n\nassert solution(\"rre\") == \"rre\""
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"eye\"\n\"\"\""
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"revive\") == \"reviver\", \"Should be reviver\"\nassert solution(\"ee\") == \"eye\", \"Should be eye\"\nassert solution(\"kitayuta\") == \"NA\", \"Should be NA\""
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"eye\"\n\n\nassert solution(stdin) == \"kitayuta\""
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s = \"revive\") == \"eye\"\nassert solution(s = \"ee\") == \"eye\"\nassert solution(s = \"kitayuta\") == \"NA\"\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"revive\") == \"reviver\"\nassert solution(\"ee\") == \"eye\"\nassert solution(\"kitayuta\") == \"NA\"\nassert solution(\"tet\") == \"tet\"\nassert solution(\"coppie\") == \"tet\"\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(revive) =='reviver'\nassert solution(ee) == 'eye'\nassert solution(kitayuta) == 'NA'\nassert solution(test) == 'testset'\nassert solution(noon) == 'noon'\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1\"\nassert solution(\"101\") == \"2\"\nassert solution(\"5\") == \"9\"\nassert solution(\"99\") == \"2\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 2\") == \"3\"\nassert solution(\"3 3\") == \"4\"\nassert solution(\"3 2\") == \"5\"\nassert solution(\"1 2\") == \"3\""
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3' + '4') == '2'\nassert solution('101' + '99') == '9'\nassert solution('5' + '10') == '9'\nassert solution('101') == '2'\nassert solution('101') == '2'\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"1\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"101 100\") == \"2\"\nassert solution(\"5 100\") == \"9\"\nassert solution(\"101 99\") == \"1\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3') == '2'\nassert solution('101') == '2'\nassert solution('5') == '2'\nassert solution('99') == '1'\nassert solution('99') == '0'\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 4) == 2\nassert solution(101, 99) == 9\nassert solution(5, 10) == 2\nassert solution(101, 99) == 8\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '11'\nassert solution(stdin) == '19'\nassert solution(stdin) == '10'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"11\"\nassert solution(input()) == \"20\""
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input().split(\"\\n\")) == str(11)\n\n-----Original-----"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 11\n\"\"\"\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11, \"output is not correct\"\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"11\"\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"100\"\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3') == 11,'stdin: \"{}\"'.format(stdin)\nassert solution('33 27') == 3,'stdin: \"{}\"'.format(stdin)\nassert solution('6 10') == 6,'stdin: \"{}\"'.format(stdin)\nassert solution('5 6') == 5,'stdin: \"{}\"'.format(stdin)\nassert solution('100 200') == 10,'stdin: \"{}\"'.format(stdin)\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == 11\nassert solution(\"33 27\") == 20\nassert solution(\"6 10\") == 11\nassert solution(\"5 6\") == 3\nassert solution(\"100 200\") == 11\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 5 10\") == \"11\"\n\nassert solution(\n    \"3 5 10\") == \"3\"\n\nassert solution(\n    \"3 5 10\") == \"1\"\n\nassert solution(\n    \"3 5 10\") == \"5\"\n\nassert solution(\n    \"3 5 10\") == \"1\""
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'Adams'\nassert solution(input()) == 'Van Buren'\nassert solution(input()) == 'Harding'\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Harding\"\nassert solution(stdin) == \"Van Buren\"\nassert solution(stdin) == \"Adams\"\nassert solution(stdin) == \"A\"\nassert solution(stdin) == \"A\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"Adams\"\nassert solution(input()) == \"Van Buren\"\nassert solution(input()) == \"Harding\"\nassert solution(input()) == \"Harding\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"5\\\"), \\\"Adams\\\"\nassert solution(\\\"10\\\"), \\\"Van Buren\\\"\nassert solution(\\\"4\\\"), \\\"Harding\\\"\nassert solution(\\\"6\\\"), \\\"Harding\\\"\nassert solution(\\\"8\\\"), \\\"Harding\\\"\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == 'Adams'\nassert solution(8) == 'Van Buren'\nassert solution(29) == 'Harding'\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1') == '1'\nassert solution('5') == '7'\nassert solution('8') == '8'\nassert solution('29') == '29'\nassert solution('Harding') == 'Harding'\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'Harding'\nassert solution(input()) == 'Van Buren'"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(main(read_string('input.txt'))) == 'Harding'\nassert solution(main(read_string('input.txt'))) == 'Adams'\n\n\n-----Discussion-----\nA very naive recursive solution (using stack) is obviously a bad implementation. This one\nis more clever than the naive approach.\n\nThe stack is a stack of the string you have just traversed.\n\nEach time you pop a new string from the stack, the stack is pushed the current string\nuntil it is a valid input.\nIf you remove the current string, you'll have to add it back.\nIf you remove a character, you'll have to check if it's valid.\nIf you remove a character, you'll have to check if the stack is empty.\n\nIf you add a character to the stack, you'll have to check if the stack is empty.\nA valid input will be a string that is a valid character for indexing.\nThis will allow you to write your solution in one line of code.\n\nThe time complexity of the stack is O(n).\nThe space complexity of the stack is O(n).\n\"\"\""
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == 'A'\nassert solution(8) == 'AA'\nassert solution(29) == 'AAAAA'\nassert solution(29) == 'AAAB'\nassert solution(29) == 'AAAB'\n"
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"Adams\"\nassert solution(\"8\") == \"Van Buren\"\nassert solution(\"29\") == \"Harding\"\n\"\"\""
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0, 0, 0, 0, 0) == 0, \"solution failed\"\n\nassert solution(3, 6, 9, 0, 0) == 4, \"solution failed\"\n\nassert solution(3, 4, 4, 4, 4) == 4, \"solution failed\"\n\nassert solution(3, 3, 3, 3, 3) == 4, \"solution failed\"\n\nassert solution(0, 0, 0, 2, 0) == 0, \"solution failed\"\n\n\"\"\""
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\n\"\"\""
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"4\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10, \"Failed\"\n\"\"\""
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n\"\"\"\n\nimport math\n\nfrom collections import defaultdict\nfrom itertools import combinations, product\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '6'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= r, g, b <= 10^9\n\n\n-----Time Complexity-----\n\nTime: O(n)\n\n\n-----Space Complexity-----\n\nn is the size of stdin, so O(n) space is the size of the string.\n\n\"\"\"\nclass Solution:\n    def maxNumberOfBouquets(self, flowerbed: List[int]) -> str:\n        # write your code here\n        \n        # find the max number of bouquets\n        res = 0\n        for i in range(len(flowerbed)):\n            if flowerbed[i]:\n                if flowerbed[i] == 0:\n                    res += 1\n                    flowerbed[i] = 1\n                if flowerbed[i] == 1:\n                    res += 3\n                    flowerbed[i] = 2\n                if flowerbed[i] == 2:\n                    res += 4\n                    flowerbed[i] = 1\n                if flowerbed[i] == 3:\n                    res += 5\n                    flowerbed[i] = 4\n                if flowerbed[i] == 4:\n                    res += 6\n                    flowerbed[i] = 3\n                if flowerbed[i] == 5:\n                    res += 7\n                    flowerbed[i] = 5\n                if flowerbed[i] == 6:\n                    res += 8\n                    flowerbed[i] = 6\n                if flowerbed[i] == 7:\n                    res += 9\n                    flowerbed[i] = 7\n        return str(res)\n        \n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(5) == 6"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 0 0') == '1'\nassert solution('2 0 2') == '2'\nassert solution('2 0 2') == '3'\nassert solution('2 0 0') == '1'\nassert solution('2 0 0') == '2'\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0 0 0') == '6'\nassert solution('1 0 0') == '6'\nassert solution('3 3 3') == '6'\nassert solution('0') == '0'\nassert solution('3') == '3'\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 1, 1, 1) == 1\nassert solution(3, 5, -6, -5) == 4\n\nassert solution(3, 5, -6, -5) == 4\n\nassert solution(1, 1, 1, 1) == 1\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, [1, 1, 1, 1, 1]) == \"1\"\nassert solution(3, [-2, 0, -5]) == \"4\"\nassert solution(3, [-3, -1, 0]) == \"0\"\nassert solution(3, [-3, -2, 0, 1]) == \"0\"\nassert solution(4, [0, -5, 0, 0, 0]) == \"0\"\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 1\nassert solution(3) == 2\nassert solution(4) == 4"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\n\n\"\"\""
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"invalid stdin\"\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nprint(\"You are a genius.\")\n"
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, [1, 1, 1, 1, 1]) == 1\nassert solution(3, [-6,-5,1]) == 4"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1000 1000 1 1\") == \"Tie\"\nassert solution(\"1500 1000 176 177\") == \"Misha\"\nassert solution(\"1500 1000 1 1\") == \"Vasya\"\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Misha\"\n\"\"\"\n\nimport math\nfrom collections import Counter\n\nn = int(input())"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Tie\"\n\nExplanation\nThe first line contains integers a, b, c, d (250 \u2264 a, b \u2264 3500, 0 \u2264 c, d \u2264 180). \n\nOn a single line, the output is \"Vasya\" (without the quotes).\n\nThe second line contains integers p, q, r (0 \u2264 p \u2264 250, 0 \u2264 q \u2264 250, 0 \u2264 r \u2264 180). \n\nThe output is \"Misha\" (without the quotes).\n\nThe third line contains integers t, v (0 \u2264 t \u2264 1). \n\nThe output is \"Tie\".\n\nA random number is generated and the next number is checked. A number is divisible by 250, as shown on the output.\n\nNote that the first and the last are same numbers.\n\nFollow up: Check if the solution function is correct to solve the problem. It should be written as a function (overloading the same code) that takes exactly two arguments: the number of days left in the contest and the time the contest was finished, and returns either \"Tie\", \"Tie\" or \"Misha\" (both of which are guaranteed to be true).\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 500\n0 <= stdin[i] <= 2^250\n1 <= b, c, d <= 180\n\n0 <= p, q, r <= 100\n0 <= t \u2264 100\n\n\"\"\""
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1', '2') == 'Vasya'\nassert solution('1', '3') == 'Misha'\nassert solution('2', '1') == 'Misha'\nassert solution('2', '3') == 'Vasya'\nassert solution('2', '4') == 'Vasya'\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"Misha\"\nassert solution(\"1 1\") == \"Vasya\"\nassert solution(\"1 7\") == \"Vasya\"\nassert solution(\"2 6\") == \"Misha\"\nassert solution(\"2 1\") == \"Vasya\"\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Misha\"\nassert solution(stdin) == \"Vasya\"\nassert solution(stdin) == \"Tie\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin = \"500 1000 20 30\") == \"Vasya\"\nassert solution(\n    stdin = \"1000 1000 1 1\") == \"Misha\"\nassert solution(\n    stdin = \"1500 1000 176 177\") == \"Tie\""
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Misha\"\nassert solution(\"1500 1000 176 177\") == \"Tie\"\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Misha\"\nassert solution(\"1500 1000 176 177\") == \"Misha\"\nassert solution(\"1000 1000 1 1\") == \"Misha\"\nassert solution(\"1000 1000 1 1\") == \"Misha\"\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"500 1000 20 30\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Misha\"\nassert solution(\"1500 1000 176 177\") == \"Vasya\"\nassert solution(\"1000 1000 1 1\") == \"Tie\"\n\n\n-----Tests-----\n>>> import doctest\n>>> doctest.testmod(verbose=False)\nTestResults(failed=0, attempted=4)\n>>> \"Misha\"\n\n>>> doctest.testmod(verbose=True)\nTrying:\n  stdin.write(...)\n  stdin.write(1)\nTrying:\n  stdin.write(1)\nExpecting:\n  None\n1\nDone\n\nTrying:\n  stdin.write(1)\n  stdin.write(250)\nTrying:\n  stdin.write(250)\nExpecting:\n  250\nDone\n\nTrying:\n  stdin.write(25)\n  stdin.write(13)\nTrying:\n  stdin.write(13)\nExpecting:\n  250\nDone\n\nTrying:\n  stdin.write(3)\n  stdin.write(19)\nTrying:\n  stdin.write(19)\nExpecting:\n  300\nDone\n\nTrying:\n  stdin.write(10)\n  stdin.write(31)\nTrying:\n  stdin.write(31)\nExpecting:\n  300\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(32)\nTrying:\n  stdin.write(32)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(13)\nTrying:\n  stdin.write(13)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(1000)\n  stdin.write(280)\nTrying:\n  stdin.write(280)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(1000)\n  stdin.write(178)\nTrying:\n  stdin.write(178)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(15000)\n  stdin.write(176)\nTrying:\n  stdin.write(176)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(3)\n  stdin.write(2)\nTrying:\n  stdin.write(2)\nExpecting:\n  250\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(1)\nTrying:\n  stdin.write(1)\nExpecting:\n  300\nDone\n\nTrying:\n  stdin.write(10)\n  stdin.write(30)\nTrying:\n  stdin.write(30)\nExpecting:\n  300\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(50)\nTrying:\n  stdin.write(20)\nExpecting:\n  300\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(10)\nTrying:\n  stdin.write(20)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(50)\nTrying:\n  stdin.write(10)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(20)\nTrying:\n  stdin.write(20)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(25)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(30)\nTrying:\n  stdin.write(30)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(25)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(50)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(25)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(25)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(30)\nTrying:\n  stdin.write(30)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(50)\nTrying:\n  stdin.write(20)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(50)\nTrying:\n  stdin.write(20)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(50)\nTrying:\n  stdin.write(20)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(25)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(20)\nTrying:\n  stdin.write(20)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(25)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(30)\nTrying:\n  stdin.write(30)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(30)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(25)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n\nTrying:\n  stdin.write(50)\n  stdin.write(50)\nTrying:\n  stdin.write(25)\nExpecting:\n  500\nDone\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3.914213562373095\"\nassert solution(stdin) == \"5.0 5.0 10.0\"\nassert solution(stdin) == \"1.0 1.0 1.0\"\nassert solution(stdin) == \"2.0 2.0 2.0\"\nassert solution(stdin) == \"2.0 2.0 2.0\"\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Fifa and Fafa\"\n\"\"\"\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3.914213562373095'"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\",\"5\",\"3\",\"3\",\"1\"]) == \"3.914213562373095\"\nassert solution([\"1\",\"5\",\"3\",\"3\",\"1\"]) == \"5.0\"\nassert solution([\"1\",\"5\",\"3\",\"3\",\"1\"]) == \"3.0\"\nassert solution([\"1\",\"5\",\"3\",\"3\",\"1\"]) == \"0.0\"\nassert solution([\"1\",\"5\",\"3\",\"3\",\"1\"]) == \"0.0\"\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3.7677669529663684 3.7677669529663684 3.914213562373095\"\n\"\"\""
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 3 3 1 1') == '3.7677669529663684 3.7677669529663684 3.914213562373095', 'incorrect'\nassert solution('10 5 5 5 15') == '5.0 10.0 10.0', 'incorrect'\nassert solution('10 5 5 15') == '10.0 10.0 10.0', 'incorrect'\nassert solution('10 5 15') == '10.0 10.0 10.0', 'incorrect'"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '5.0 10.0'\nassert solution(input()) == '5.0 10.0'\nassert solution(input()) == '5.0 10.0'\nassert solution(input()) == '5.0 10.0'\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1') == '3'\nassert solution('2') == '5'\nassert solution('3') == '5.0'\nassert solution('4') == '3.8'\nassert solution('5') == '3.7677669529663684'\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 3 3 1 1') == '3.7677669529663684 3.7677669529663684 3.914213562373095'\nassert solution('10 5 5 5 15') == '5.0 5.0 10.0'\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3.7677669529663684 3.7677669529663684 3.914213562373095'\n\n\n-----Searching-----\n\nTwo-dimensional arrays of size R (rows) x (columns) and A (rows) x (columns) are given. The two-dimensional array A is square and its size is equal to the number of rows x number of columns.\n\nThe position of a position p in the matrix is called an access point and, at each stage, either the access point itself or the access point one side of the access point (H or V) is reached.\n\nThe access point can be reached on the fixed line passing through the center of the access point and having its orientation fixed (vertical).\n\nSince the fixed line is the diagonal, the access point also needs to be in the fixed line (one side of the access point).\n\nIn other words, if the fixed line is horizontal, it should be perpendicular to the fixed line (vertical).\n\nFor example, the access point P, P = A[0, 0], A[1, 1], A[2, 2], A[3, 3] (because the fixed line is vertical), the access point H is at the first position (P, 0), and the access point V is at the second position (P, 1).\n\n-----Input-----\n\nThe first line of the input contains only one integer, N.\n\nThe next N lines contains 2 integers, x_1, y_1, x_2, y_2.\n\nThe third line contains a single integer, R.\n\n-----Output-----\n\nPrint a single integer, P where P is the access point.\n\n-----Searching-----\n\nWrite a function solution(stdin: str) that takes a string of the format 'x_1 y_1 x_2 y_2' and returns the access point of the square matrix A which has a circle of radius R.\n\nThe square matrix is a two-dimensional array of integers, represented as a 2D array where each row is a two-dimensional array of integers. For example, the square matrix, A, represents the following matrix:\n\n[[1, 2, 3, 4],\n [5, 6, 7, 8],\n [9, 10, 11, 12]]\n\nThe matrix A has a circle of radius 10^6.\n\nFor example, if we choose 2 columns of rows and 3 rows of columns, we have a square matrix of dimensions 10^6\u00d710^6 and 8\u00d78\u00d78.\n\nFor example, in the first line, the square matrix has a circle of radius 2^6.\n\nFor example, the third line has a circle of radius 3^6.\n\nFor example, the fourth line has a circle of radius 4^6.\n\nFor example, the fifth line has a circle of radius 5^6.\n\nFor example, the sixth line has a circle of radius 6^6.\n\nFor example, the seventh line has a circle of radius 7^6.\n\nFor example, the eighth line has a circle of radius 8^6.\n\nFor example, the ninth line has a circle of radius 9^6.\n\nFor example, the tenth line has a circle of radius 10^6.\n\nFor example, the eleventh line has a circle of radius 11^6.\n\nFor example, the twelfth line has a circle of radius 12^6.\n\nFor example, the thirteenth line has a circle of radius 13^6.\n\nFor example, the fourteenth line has a circle of radius 14^6.\n\nFor example, the fifteenth line has a circle of radius 15^6.\n\nFor example, the seventeenth line has a circle of radius 16^6.\n\nFor example, the eighteenth line has a circle of radius 17^6.\n\nFor example, the nineteenth line has a circle of radius 18^6.\n\nFor example, the twentieth line has a circle of radius 19^6.\n\nFor example, the twentieth line has a circle of radius 20^6.\n\nFor example, the twentieth line has a circle of radius 21^6.\n\nFor example, the twentieth line has a circle of radius 22^6.\n\nThe access point on the fixed line (horizontal or vertical) has a fixed orientation and that orientation can be taken as a parameter. For example, if the fixed line is horizontal, the access point has orientation fixed (vertical).\n\nIn other words, if the fixed line is horizontal, the access point has orientation fixed (vertical).\n\nWrite a function solution(stdin: str) that takes as parameters the access point (H or V) and the fixed line (horizontal or vertical) and returns the access point of the square matrix A which has a circle of radius R.\n\nThe square matrix is a two-dimensional array of integers, represented as a 2D array where each row is a two-dimensional array of integers. For example, the square matrix, A, represents the following matrix:\n\n[[1, 2, 3, 4],\n [5, 6, 7, 8],\n [9, 10, 11, 12]]\n\nThe matrix A has a circle of radius 10^6.\n\nFor example, the matrix A has a circle of radius 2^6.\n\nFor example, the matrix A has a circle of radius 3^6.\n\nFor example, the matrix A has a circle of radius 4^6.\n\nFor example, the matrix A has a circle of radius 5^6.\n\nFor example, the matrix A has a circle of radius 6^6.\n\nFor example, the matrix A has a circle of radius 7^6.\n\nFor example, the matrix A has a circle of radius 8^6.\n\nFor example, the matrix A has a circle of radius 9^6.\n\nFor example, the matrix A has a circle of radius 10^6.\n\nFor example, the matrix A has a circle of radius 11^6.\n\nFor example, the matrix A has a circle of radius 12^6.\n\nFor example, the matrix A has a circle of radius 13^6.\n\nFor example, the matrix A has a circle of radius 14^6.\n\nFor example, the matrix A has a circle of radius 15^6.\n\nFor example, the matrix A has a circle of radius 16^6.\n\nFor example, the matrix A has a circle of radius 17^6.\n\nFor example, the matrix A has a circle of radius 18^6.\n\nFor example, the matrix A has a circle of radius 19^6.\n\nFor example, the matrix A has a circle of radius 20^6.\n\nFor example, the matrix A has a circle of radius 21^6.\n\nFor example, the matrix A has a circle of radius 22^6.\n\nFor example, the matrix A has a circle of radius 23^6.\n\nFor example, the matrix A has a circle of radius 24^6.\n\nFor example, the matrix A has a circle"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"32\"\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(32)\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"24\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2019 993244853\") == \"1\"\nassert solution(\"2020 437122297\") == \"2\"\nassert solution(\"2019 437122297\") == \"3\"\nassert solution(\"2020 437122297\") == \"4\"\nassert solution(\"2020 437122297\") == \"5\"\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"[4, 5, 3, 1, 2]\") == \"4\"\nassert solution(\"[1, 3, 2]\") == \"6\"\nassert solution(\"[3, 2, 1]\") == \"6\"\nassert solution(\"[1, 1, 2]\") == \"5\"\nassert solution(\"[2, 3, 1]\") == \"5\"\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('[3,1,2]'), 'Should be [2,3,1] or [1,2,3]'\nassert solution('[1,2,3]'), 'Should be [1,3,2] or [2,1,3]'\nassert solution('[3,2,1]'), 'Should be [3,1,2]'\nassert solution('[3,1,2]'), 'Should be [3,2,1]'\nassert solution('[1,2,3]'), 'Should be [1,2,3]'\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2019 98354925\") == \"6\"\nassert solution(\"2020 437122297\") == \"32\"\nassert solution(\"2019 439553037\") == \"24\"\nassert solution(\"2019 83686518\") == \"17\"\nassert solution(\"2019 83686519\") == \"32\"\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 993244853\"\n) == 6\n\n\n\"\"\""
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == solution(stdin[::-1])\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == 2\nassert solution(\"5 4\") == 1\nassert solution(\"2 2\") == 1\nassert solution(\"6 1\") == 2\n\n\"\"\""
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\n\n\"\"\"\nfrom typing import Dict"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '1'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"./input_1567/input_1567.txt\") == \"1\"\n\n\"\"\""
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"No\"\n\n\"\"\" \u041e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u0442\u0440\u043e\u043a\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043d\u0430\u043c \u043f\u0440\u0438\u0448\u043b\u043e \u043d\u0430 \u0432\u0445\u043e\u0434, \u043f\u0440\u0438\u0448\u043b\u043e \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n.\n\n\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0447\u0438\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u0434\u0430\u0440\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0412\u0430\u0441\u0435\u0439 \u043f\u043e \u043c\u0435\u0441\u044f\u0446\u0443. \u041f\u0440\u0438 \u0432\u0432\u043e\u0434\u0435 \u0432\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e 5. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0432\u0441\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0442 \u0432 \u043c\u0435\u0441\u044f\u0446\u0435, \u0432 \u0442\u0435\u043a\u0443\u0449\u0435\u043c \u043c\u0435\u0441\u044f\u0446\u0435 \u043f\u0440\u0438\u0441\u0432\u043e\u0438\u0442\u0441\u044f \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u0439\u0441\u044f \u043e\u0446\u0435\u043d\u043a\u0438.\n\"\"\"\n\nn = int(input())\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"incorrect input\"\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"xooox\"\"\") == \"YES\"\nassert solution(\"\"\"xoooxx\"\"\") == \"NO\"\n\nassert solution(\"\"\"xoooxxpxooxoooxxpxxooxx\"\"\") == \"YES\"\nassert solution(\"\"\"xoooxxpxoxoxoxoxoxxoxxoox\"\"\") == \"NO\"\n\nassert solution(\"\"\"xoooxx\"\"\" ) == \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('xoxoxoxoxoxoxoxoxoxoxoxoxoxox') == 'YES'\nassert solution('xqwxqxqxqxqxqxqxqxqxqxqxq') == 'NO'\nassert solution('wjmqjmqjmqjmjmjmqmjmqmjmjm') == 'NO'\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\", \"solution should return YES\""
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"x\" \"o\") == \"NO\"\nassert solution(\"x\" \"x\") == \"YES\"\nassert solution(\"w\" \"r\") == \"YES\"\nassert solution(\"w\" \"s\") == \"NO\"\nassert solution(\"w\" \"w\") == \"NO\"\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\", \"solution should return YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\",'solution() should return \"YES\" for the first case.'\nassert solution(stdin) == \"NO\",'solution() should return \"NO\" for the first case.'\n\n----------------------Input:\n3\nxooox\noxoxo\nsoxoo\noxoxo\nxooox\n\n----------------------Output:\nYES\n\n----------------------Input:\n2\nxoox\noxoxo\n\n----------------------Output:\nNO\n\n----------------------Input:\n2\nxpx\npxp\nxpe\n\n----------------------Output:\nNO\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aabbc\") == \"YES\"\nassert solution(\"abc\") == \"NO\"\nassert solution(\"abca\") == \"NO\"\nassert solution(\"abca\") == \"YES\"\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"2 2\"\nassert solution(\"2 4\") == \"1 2\"\n\nassert solution(\"5 1\") == \"1 1\""
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1 2\"\nassert solution(\"1 5\") == \"1 5\"\nassert solution(\"2 4\") == \"2 4\"\nassert solution(\"2 4\") == \"2 3\"\nassert solution(\"2 2\") == \"2 2\"\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2 2\"\n\"\"\"\nimport sys\nimport math\n\ninput = sys.stdin.readline"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"2 2\"\n\n\"\"\"\n\nclass Solution:\n    def solution(self, n, m):\n        pass"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '2'\nassert solution('5') == '2'\nassert solution('6') == '2'\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"2 2\"\nassert solution(inp) == \"3 1\"\nassert solution(inp) == \"3 4\"\nassert solution(inp) == \"3 7\"\nassert solution(inp) == \"3 10\""
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 1\"\n\"\"\"\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2 4) == 2 1\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2 1\"\n\npass\n\"\"\""
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 2) == 2\nassert solution(5, 4) == 3\nassert solution(5, 1) == 1"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"-2.500000000000000\"\nassert solution(\"3 2\") == \"7.000000000000000\"\n\n\n\"\"\"\nfor i in range(int(input())):\n    n,m=input().split()\n    n,m=map(int,input().split())\n    ans=[]\n    l=[]\n    for i in range(n):\n        a,b=input().split()\n        ans.append(int(a)*int(b))\n    ans.sort()\n    for j in range(m):\n        a,b=input().split()\n        l.append(int(a)*int(b))\n    a=0\n    for i in range(m):\n        a+=ans[i]\n    a=a/m\n    ans.sort()\n    b=0\n    for i in range(m):\n        b+=ans[i]\n    b=b/m\n    ans.sort()\n    print(ans[int(m/2)]-a+b)\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 3\") == 7.0, \"Test failed\"\nassert solution(\"1 3 -1 3 -3 2\") == 4.0, \"Test failed\"\nassert solution(\"1 3 2\") == 2.0, \"Test failed\"\nassert solution(\"3 3 2 -1 -1 -1 -2 -1 -2 -2\") == 2.0, \"Test failed\"\nassert solution(\"1 3 2\") == 3.0, \"Test failed\"\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-2.500000000000000'\nassert solution(stdin) == '7.000000000000000'\nassert solution(stdin) == '8.000000000000000'\nassert solution(stdin) == '2.500000000000000'\nassert solution(stdin) == '8.000000000000000'\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"3 -4\"\nassert solution(\"2 3 -1 0\") == \"3 1\"\nassert solution(\"2 3 -1\") == \"-1\"\nassert solution(\"2 3 -1 0\") == \"1 -1\"\nassert solution(\"2 3 -1\") == \"1 0\"\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1.000000000000000000000000000000'"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1.5\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '-2.500000000000000'\n\n>>> 12\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7.000000000000000\n\nInput\n3 2\n-1 3\n0 0\n-1 -4\n\nOutput\n7.000000000000000\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert Solution().solution(stdin) == 7.000000000000000\n\nassert Solution().solution(stdin) == 7.000000000000000\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7.000000000000000\"\n'''\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '7.000000000000000'\n\"\"\"\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 1 7 5 9 5 2 3 10\"\n) == \"YES\"\nassert solution(\n    \"5 5 5 3 9 3 6 5\"\n) == \"NO\"\nassert solution(\n    \"2 3 3 3 2 3\"\n) == \"NO\"\nassert solution(\n    \"1 1 1 1 1\"\n) == \"YES\""
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 3) == \"YES\"\nassert solution(2, 6) == \"YES\"\nassert solution(7, 14) == \"YES\"\nassert solution(5, 3) == \"YES\"\nassert solution(5, 1) == \"YES\"\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport math\n\nfrom collections import Counter\n\n\nclass Solution:\n    def check(self, numbers, k):\n        for i in numbers:\n            if not 1 <= k - i <= math.sqrt(k) + 1:\n                return False\n        return True\n\n    def get_subsets(self, nums, k):\n        return set(\n            [\n                list(range(i * k, i * k + k))\n                for i in range(1, len(nums) + 1, 1)\n                if self.check(nums[i: i * k + k], k)\n            ]\n        )\n\n    def nCr(self, n, r):\n        return math.factorial(n) // (math.factorial(n - r) * math.factorial(r))\n\n    def num_partitions(self, k):\n        n, n_list = len(nums), Counter(nums)\n        if not 1 <= k - n_list[k] <= math.sqrt(k) + 1:\n            return 0\n\n        return (\n            len(\n                list(self.get_subsets(nums[: n], k))\n                + list(self.get_subsets(nums[n * k:], k))\n            )\n            // n_list[k]\n        )\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input(\"No Solution\")) == \"NO\"\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2, 2, 2) == \"inf\"\nassert solution(2, 3, 2) == \"1\"\n\n-----Output-----\n\ninf\n"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3 3\") == \"inf\"\n\n\n-----My Solution-----"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 2 2\") == \"inf\"\nassert solution(\"2 3 3\") == \"4\"\nassert solution(\"2 4 5\") == \"10\"\nassert solution(\"4 4 3\") == \"1\"\nassert solution(\"5 5 5\") == \"8\"\n"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"inf\"\n\"\"\"\n"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2 2 2) == \"inf\"\nassert solution(2 3 3) == \"inf\"\nassert solution(2 4 5) == \"inf\"\nassert solution(3 4 6) == \"inf\"\nassert solution(3 5 7) == \"inf\"\n"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n\n1 2\n1 3\n1 2 3\n2 1 1\n2 2 3\n3 1 1\n3 3 3\n\n5\n2 4\n2 5\n2 4 5\n3 4 5\n4 5 3\n5 4 3\n5 4 5\n\n1 2\n2 3\n3 2\n\n1 2\n2 3\n3 2\n3 2 3\n\n\"\"\"\n) == \"5\"\n\"\"\"\n\n2\n2 3\n3 2\n3 2 3\n\n1 2\n1 2\n1 2 3\n1 2 3 4\n1 2 3 5\n1 2 3\n1 2\n\n1 3\n1 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3\n1 3\n1 3\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3 5\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n1 3 3\n"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2 2\") == \"inf\"\nassert solution(\"2 3 3\") == \"2\"\nassert solution(\"2 4 4\") == \"3\"\nassert solution(\"2 5 5\") == \"1\"\nassert solution(\"3 2 2\") == \"inf\"\n"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"inf\"\n'''"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 3\") == \"1\"\nassert solution(\"1 2 3 3 2\") == \"1\"\nassert solution(\"1 2 2\") == \"inf\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"inf\" or solution(input()) == \"1\""
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1 2 4 2 6 8 7 3 10 5\"\n) == 3\n\nassert solution(\n    \"2 2 4 1 2 1 1 1 1\"\n) == 4\n\nassert solution(\n    \"1 1\"\n) == 2\n\nassert solution(\n    \"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n) == 21\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n\"\"\"\nimport math\n\nn, m = map(int, input().split())\ns = [list(map(int, input().split())) for i in range(n)]"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['2','2','3']) == '10'\nassert solution(['2','3','4']) == '0'\nassert solution(['2','4','3','1']) == '0'\nassert solution(['1','1','1','2']) == '3'\nassert solution(['1','2','3']) == '0'\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 15\n\"\"\"\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3'), '2'\nassert solution('3 2'), '3'\nassert solution('4 10'), '3'\nassert solution('1 2'), '1'\nassert solution('2 3'), '0'"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 0\nassert solution(inp) == 10\nassert solution(inp) == 10\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\"\nimport sys\nimport math\ninput = sys.stdin.readline\n\nN = int(input().strip())\nA = list(map(int, input().strip().split()))"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\nprint(\"The answer is {}\".format(solution(stdin)))\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\""
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1,2,3,4,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 7 2 5 3 4 7 4 2 2 3 3\") == \"1\"\nassert solution(\"3 2 4 1 2 3 2 3 3 4 4 5\") == \"2\"\nassert solution(\"3 2 4 1 2 3 2 3 3 4 4 5\") == \"4\"\nassert solution(\"5\") == \"4\"\nassert solution(\"5 1 2 3 4 4 5\") == \"4\"\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"4\"\nassert solution(input) == \"2\"\nassert solution(input) == \"4\"\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '2'\n\"\"\"\nclass Solution:\n    def solution(self, input):\n        #code here\n        pass\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"15 2\") == \"25\"\nassert solution(\"15 1\") == \"25\"\nassert solution(\"15 1\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"25\"\nassert solution(\"10 1\") == \"25\"\nassert solution(\"1\") == \"1\"\nassert solution(\"15 1\") == \"25\"\nassert solution(\"2\") == \"10\"\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"1\",\"4\",\"3\",\"7\",\"2\",\"6\",\"8\",\"5\",\"9\",\"10\",\"12\",\"12\",\"5\",\"6\",\"16\"]) == 55, \"incorrect\"\nassert solution([\"3\",\"4\",\"2\"]) == -1, \"incorrect\"\nassert solution([\"8\",\"7\",\"5\",\"3\",\"4\",\"5\",\"6\",\"2\",\"1\",\"9\",\"10\",\"11\",\"12\",\"13\",\"15\"]) == 62, \"incorrect\"\nassert solution([\"12\",\"1\"]) == -1, \"incorrect\"\nassert solution([\"12\",\"1\",\"2\"]) == -1, \"incorrect\"\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 1 0 1\") == 0\nassert solution(\"0 1 0 2\") == 0\nassert solution(\"1 1 1 1\") == 0\nassert solution(\"1 1 1 2\") == 0\nassert solution(\"1 1 1 3\") == 0\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    [\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n        [\"1\", \"3\", \"5\", \"7\", \"9\", \"10\"],\n    ]\n) == \"10\"\nassert solution(\n    [\n        [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"],\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n        [\"1\", \"3\", \"5\", \"7\", \"9\", \"10\"],\n        [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"],\n    ]\n) == \"15\"\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('', '', '', '', '') == ''\nassert solution('1', '1', '', '1', '') == -1\nassert solution('10', '10', '', '1', '') == 2\nassert solution('11', '1', '', '1', '') == 0\nassert solution('15', '1', '', '1', '') == 1\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1,3,10,1,1) == 5, 'OK'\nassert solution(2,3,10,2,2) == -1, 'OK'\nassert solution(3,3,10,1,3) == 25, 'OK'\nassert solution(3,3,10,2,4) == 25, 'OK'\nassert solution(3,3,10,2,5) == 25, 'OK'\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"25\"\n\n-----Test Input-----\n2 4\n1 3\n2 3\n1 2\n3 2\n2 2\n1 1\n\n-----Test Output-----\n2\n\nWe can unlock all the boxes by purchasing the first and second keys, at the cost of 25 yen, which is the minimum cost required.\n\n-----Sample Input-----\n2 3\n1 3\n1 1\n15 1\n2 2\n2 2\n1 2\n3 3\n1 3\n\n-----Sample Output-----\n25\n\nWe can unlock all the boxes by purchasing the first and second keys, at the cost of 25 yen, which is the minimum cost required.\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == str(25)"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 25, \"brute force failed\"\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3+5*7+8*4) == 303\nassert solution(2+3*5) == 25\nassert solution(3*4*5) == 60\n\"\"\"\nclass Solution:\n    def solution(self,s):\n        signs = []\n        signs.append(\"+\")\n        signs.append(\"*\")\n        i = 0\n        answer = \"\"\n        while i < len(s):\n            if s[i] == \"*\":\n                answer += \"(\"\n                while i < len(s) and s[i] == s[i+1]:\n                    i += 1\n                sign = s[i+1]\n                answer += sign\n                while i < len(s) and s[i]!= \"*\":\n                    sign = s[i]\n                    i += 1\n                    answer += sign\n                answer += \")\"\n                i += 2\n            else:\n                while i < len(s) and s[i] in signs:\n                    i += 1\n                answer += s[i]\n                i += 1\n        return answer"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3 + 5 * 7 + 8 * 4) == '303', 'Expected 3 + 5 * 7 + 8 * 4 = 303, but got {}'.format(solution(3 + 5 * 7 + 8 * 4))\nassert solution(2 + 3 * 5) == '25', 'Expected 2 + 3 * 5 = 25, but got {}'.format(solution(2 + 3 * 5))\nassert solution(3 * 4 * 5) == '60', 'Expected 3 * 4 * 5 = 60, but got {}'.format(solution(3 * 4 * 5))\n\n\"\"\""
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3+5*7+8*4\") == \"303\"\nassert solution(\"2+3*5\") == \"25\"\nassert solution(\"3*4*5\") == \"60\"\nassert solution(\"3+3*2\") == \"3\"\nassert solution(\"3+2\") == \"3\"\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3+5*7+8*4) == '303'\nassert solution(2+3*5) == '25'\nassert solution(3*4*5) == '60'\nassert solution(3) == '0'\nassert solution(999) == '0'\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(303)\nassert solution(stdin) == str(60)\nassert solution(stdin) == str(25)\nassert solution(stdin) == str(60)\nassert solution(stdin) == str(25)\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '303'\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1+1\") == \"3\"\nassert solution(\"2+3\") == \"6\"\nassert solution(\"3*5\") == \"11\"\nassert solution(\"3+5\") == \"25\"\nassert solution(\"2*5\") == \"100\"\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3+5*7+8*4') == '303'\nassert solution('2+3*5') == '25'\nassert solution('3*4*5') == '60'\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    '3+5*7+8*4') == '303'\nassert solution(\n    '2+3*5') == '25'\nassert solution(\n    '3*4*5') == '60'\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"AC|T\", \"L\", \"F\", \"T\", \"T\", \"T\"]) == \"XYZ|ABC\"\nassert solution([\"|\",\"ABC\",\"|\",\"ABC\",\"|\",\"ABC\"]) == \"XYZ|ABC\"\nassert solution([\"F\",\"T\",\"F\",\"T\",\"T\",\"T\"]) == \"XYZ|ABC\"\nassert solution([\"XYZ\",\"XYZ\"]) == \"XYZ|XYZ\"\nassert solution([\"|\",\"XYZ\",\"|\",\"XYZ\",\"|\",\"XYZ\"]) == \"XYZ|XYZ\"\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"AC|T\") == \"AC|TL\"\nassert solution(\"|ABC\") == \"XYZ\"\nassert solution(\"ABC\") == \"XYZ\"\nassert solution(\"ABC|\") == \"XYZ|ABC\"\nassert solution(\"ABC|\") == \"XYZ|ABC\"\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(list(map(str, input()))) == 'Impossible'\nassert solution(list(map(str, input()))) == '|XYZ|ABC'\nassert solution(list(map(str, input()))) == 'XYZ|ABC'\n\n##############################################################################################################################################################################\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Impossible'\nprint(stdin)"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Impossible\"\n\n-----Constraints-----\n0 <= stdin.length <= 1000\n0 <= stdin[i] <= 10^6\n\n\"\"\"\n\nfrom collections import defaultdict\n\nimport math\n\ninput = \"AC|T\"\noutput = \"AC|TL\""
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"ABC\",\"T\",\"F\",\"T\",\"D\",\"T\",\"\"]) == \"XYZ\"\nassert solution([\"ABC\",\"T\",\"T\",\"D\",\"T\",\"T\",\"\"]) == \"XYZ\"\nassert solution([\"ABC\",\"T\",\"T\",\"D\",\"T\",\"T\",\"\"]) == \"XYZ\"\nassert solution([\"ABC\",\"T\",\"T\",\"D\",\"T\",\"T\",\"\"]) == \"XYZ\"\nassert solution([\"ABC\",\"T\",\"T\",\"T\",\"T\",\"T\",\"\"]) == \"XYZ\"\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Impossible\"\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3 1'\nassert solution(stdin) == '7'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0,0,0,0,0,0,0,0,0,0) == 3\nassert solution(0,0,0,0,0,0,0,0,0,0) == 7\nassert solution(5,4,3,0,0,0,0,0,0,0) == 3\nassert solution(5,4,3,0,0,0,0,0,0,0) == 1\nassert solution(5,4,3,0,0,0,0,0,0,0) == 3\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3 1\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"0\""
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 4 3\") == 3, \"stdin\"\nassert solution(\"6 8 2\") == 2, \"stdin\"\nassert solution(\"7 0\") == 0, \"stdin\"\nassert solution(\"-1 0\") == 0, \"stdin\"\nassert solution(\"-2 0\") == 0, \"stdin\"\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5\", \"4\", \"3\"]) == \"3\"\nassert solution([\"6\", \"8\"]) == \"1\"\nassert solution([\"0\", \"1\"]) == \"0\"\nassert solution([\"3\", \"2\"]) == \"0\"\nassert solution([\"3\", \"4\"]) == \"0\"\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 1\", \"0 1\", \"2 1\", \"3 2\"]) == \"0 1\"\nassert solution([\"1 2\", \"1 2\", \"2 2\", \"1 1\"]) == \"0 1\"\nassert solution([\"3 3\", \"1 2\", \"2 3\", \"3 2\"]) == \"3 2\"\nassert solution([\"3 2\", \"3 2\", \"2 3\", \"2 2\"]) == \"3 2\"\nassert solution([\"2 3\", \"2 2\", \"2 1\", \"1 3\"]) == \"3 2\"\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"7 0\""
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7 0'\nassert solution(stdin) == '3 1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 3\", \"7 8 2\") == 3\nassert solution(\"6 8 2\", \"8\") == 2\nassert solution(\"6 8 2\", \"7\") == 3\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"0 0 0 0 -1000 1000 0 0\"\n    ) == \"3\"\n\nassert solution(\n    \"0 0 0 0 1\"\n    ) == \"3\"\n\nassert solution(\n    \"0 0 0 0 0\"\n    ) == \"3\"\n\n\n    pass\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3\"\n\n\n-----Constraints-----\n0 < stdin.length < 20000\n-1000 <= x_1, x_2, y_1, y_2 <= 1000\n-1000 <= stdin.length <= 1000\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n\n-----Time complexity-----\n\nA path of length $n$ is composed of $n$ integers, $n$ ints must be unique.\n\nWe can split the path into $n$ integer parts, each separated by $n$ integers.\n\nIt's guaranteed that there are a total of $n$ such paths and that all integers in $n$ integers lie on the same line.\n\n\n-----Space complexity-----\n\nThere are $n$ integer parts, $n$ integers and $n$ integers in the line.\n\nSo $n$ lines in total contain at most $n$ lines.\n\n\n-----Constraints-----\n\n1 \u2264 stdin.length <= 10\n-1000 \u2264 x_1, x_2, y_1, y_2 \u2264 1000\n-1000 \u2264 stdin.length \u2264 1000\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n\n-----Time complexity-----\n\nA path of length $n$ is composed of $n$ integers, $n$ ints must be unique.\n\nWe can split the path into $n$ integer parts, each separated by $n$ integers.\n\nIt's guaranteed that there are a total of $n$ such paths and that all integers in $n$ integers lie on the same line.\n\n\n-----Space complexity-----\n\nThere are $n$ integer parts, $n$ integers in the line.\n\nSo $n$ lines in total contain at most $n$ lines.\n\n\n-----Constraints-----\n\n1 \u2264 stdin.length <= 10\n-1000 \u2264 x_1, x_2, y_1, y_2 \u2264 1000\n-1000 \u2264 stdin.length \u2264 1000\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in the range [1, 10]\n\n[ ] Possible output format\nstdout.length in the range [1, 1000]\n\n[ ] Possible input format\nstdin.length in"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0 0 0 0) == 3\nassert solution(1 0 0 0) == 1\nassert solution(0 1 1 1) == 1\nassert solution(1 0 1 1) == 2\nassert solution(0 0 1 1) == 2\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 0 0\") == \"3\"\nassert solution(\"1 0 0\") == \"1 -1 1\"\nassert solution(\"0 1 0\") == \"1 1 -1\"\nassert solution(\"1 1 0\") == \"1 1 1\"\nassert solution(\"0 0 1\") == \"0 -1 1\"\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0 0 0 0') == '3'\nassert solution('1 0 0 1') == '1 -1'\nassert solution('0 1 0 0') == '2 1'\n\"\"\"\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0 0 0') == '3'\nassert solution('1 0 0') == '1'\nassert solution('0 1 0') == '1'\nassert solution('1 1 0') == '1'\nassert solution('0 0 1') == '3'\n\n\"\"\""
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin),'solution() does not return \"True\" for input'\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0, [0,0]) == '3'\nassert solution(1, [0,0]) == '-1'\nassert solution(2, [0,0]) == '1'\nassert solution(3, [0,0]) == '1 1'"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= a_1, a_2,..., a_{n} <= 100\n\"\"\""
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 2 3 -4 -5 -6 5 -5 -6 -7 6') == '3 5 3'\nassert solution('5 0 -1 100 -1 0') == '1 2 3 -4 -5 -6 5 -5 -6 -7 6'\nassert solution('1 -1 100 -1 0') == '1 2 3 -4 -5 -6 5 -5 -6 -7 6'\n\nInput\n2\n2 2\n\nOutput\n2\n"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 7 0') == '3'\nassert solution('3 5 7') == '3 5'\nassert solution('3 6 7') == '3'\nassert solution('3 0 7') == '0'\nassert solution('3 4 5') == '0'\n"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\n\n------Test Cases-----\n\nInput\n\n3\n0 -1 100 -1 0\nOutput\n1\n3 \n\n\nInput\n\n10\n0 -1 100 -1 0\nOutput\n0\n3 \n\n\n-----Solution-----\n\nOutput\n\n1\n0\n3\n\n\"\"\"\n"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, [1, 2, 3]) == [1, 3, 3, 3]\nassert solution(1, [1, 3, -4, -5, -6, 5]) == [3, 1, 1, 1, 1, 1]\nassert solution(0, [-1, 100, -1]) == [1, 1, 1, 1, 1, 1]\nassert solution(1, [1, 2, 3]) == [1, 2, 3, 3, 3]\nassert solution(1, [1, 3, -4, -5, -6, 5]) == [1, 3, 3, 3, 3]\n"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\nInput\n10\n1 -1 -1 0 -1 -1 0 -1 0 0\n\nOutput\n0\n\"\"\"\n\nimport os\nimport sys\n"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '1 3 5 -4 -5 -6 5 -5 -6 -7 6'\n\nPass #1 solution\n"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n\n-----Problem-----\n\nThere are two ways to sort the reports into the three folders:  1 2 3 | | -4 5 | | -5 -6 5 -5 -6 -7 6 \n\nIn the third sample you can put all five reports in three folders: 1 2 3 | | -4 5 | | -5 -6 5 | -5 -6 -7 6 \n\nIn the fourth sample you can put all five reports in two folders:  1 2 3 | | -4 5 | | -5 -6 5 | -5 -6 -7 6 \n\nIn the fifth sample you can put all five reports in one folder:  1 2 3 | | -4 5 | | -5 -6 5 | -5 -6 -7 6 \n\nHere you can find the minimum number of folders.\n\nInput\n\n1 2 3 -4 -5 -6 5 -5 -6 -7 6\n\nOutput\n\n3\n\n\"\"\"\n"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 -1 100 -1 0\") == 3\nassert solution(\"1 2 3 -4 -5 -6 5 -5 -6 -7 6\") == 3\n\n\n\n\"\"\""
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= k <= 2^{n - 1} - 1\n1 <= n <= 10^5\n\n-----Time Limit-----\nYou are allowed to use only O(k) extra memory and the time limit given by your O(1) extra memory.\n\n\n-----Example 1: Input= \"3 2\"\n\nOutput= \"2\"\n\nExplanation= We generate the sequence [1, 2, 1, 3, 1, 2, 1, 4, 1, 2, 1, 3, 1, 2, 1], with the minimum positive integer, 2.\n\n\n-----Example 2: Input= \"4 8\"\n\nOutput= \"4\"\n\nExplanation= We generate the sequence [1, 2, 1, 3, 1, 2, 1, 4, 1, 2, 1, 3, 1, 2, 1], with the minimum positive integer, 4.\n\n\n-----Constraints:-----\n\n1 <= k <= 2^{n - 1} - 1\n1 <= n <= 10^5\n\nSample Input-\n\nInput\n\nSample Output-\n\nExplanation\n\nExample 1:\n\nInput:\n\n3 2\nSample Output:\n\n2\n\nExplanation:\n\nSample Input:\n\n4 8\nSample Output:\n\n4\n\n\nclass Solution:\n    def nextGreaterElements(self, nums: List[int]) -> List[int]:\n        if len(nums) == 1:\n            return [1]\n        \n        left, right = 0, 1\n        \n        # Iterate over the array\n        for right, num in enumerate(nums, 1):\n            # If we have found the correct element\n            if num < nums[right - 1]:\n                # Set the left variable equal to the\n                # right variable minus 1\n                left = right - 1\n                # Set the right variable equal to the\n                # right variable plus 1\n                right = right + 1\n                # Increment the left variable\n                # by 1.\n                nums[left] = nums[right]\n                # Decrement the right variable by 1.\n                nums[right] = num\n        \n        # In this example, we have achieved the solution\n        # and we return the array after removing the\n        # elements which we did not find.\n        return [num for num in nums[left + 1:] if num > nums[left]]\n        \n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,2) == 2\nassert solution(4,8) == 4\nassert solution(4,8) == 4\nassert solution(4,10) == 4\nassert solution(2,2) == 1\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 3\n\n-----Constraints-----\n\n1 \u2264 n \u2264 50\n1 \u2264 k \u2264 2^{n} - 1\n\nSample Tests\n---------------\n\n>>> import doctest\n>>> doctest.testmod()\n\nOutput:\n    [1, 2, 1, 3, 1, 2, 1, 4, 1, 2, 1, 3, 1, 2, 1, 3]\n    Explanation:\n    In the sample the obtained sequence is [1, 2, 1, 3, 1, 2, 1, 4, 1, 2, 1, 3, 1, 2, 1].\n    The number on the eighth position is 4.\n\n>>> import doctest\n>>> doctest.testmod()\n\nOutput:\n    [1, 2, 1, 3, 1, 2, 1, 4, 1, 2, 1, 3, 1, 2, 1, 3]\n    Explanation:\n    In the sample the obtained sequence is [1, 2, 1, 3, 1, 2, 1, 4, 1, 2, 1, 3, 1, 2, 1].\n    The number on the eighth position is 3.\n\"\"\"\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 2) == 2\nassert solution(4, 8) == 4\nassert solution(12, 2) == 2\nassert solution(20, 4) == 4"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"3 2\")\nprint(\"Exception :\")\nprint(\"2\")\nprint(\"Output :\")\nprint(\"2\")\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"4 8\")\nprint(\"Exception :\")\nprint(\"4\")\nprint(\"Output :\")\nprint(\"4\")\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"3 2 5\")\nprint(\"Exception :\")\nprint(\"5\")\nprint(\"Output :\")\nprint(\"5\")\n\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"2 2\")\nprint(\"Exception :\")\nprint(\"1\")\nprint(\"Output :\")\nprint(\"1\")\n\nprint(\"Example 5:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"2 2\")\nprint(\"Exception :\")\nprint(\"4\")\nprint(\"Output :\")\nprint(\"4\")\n\nprint(\"Example 6:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"3 5\")\nprint(\"Exception :\")\nprint(\"5\")\nprint(\"Output :\")\nprint(\"5\")\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 5'), 6\nassert solution('4 4'), 5\nassert solution('3 3'), 5\nassert solution('4 4'), 6\nassert solution('3 5'), 7\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 5') == '6'\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 6\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"5\""
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"5\"\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"5\"\nassert solution(\"4 4\") == \"5\"\nassert solution(\"5\") == \"\""
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"The function should return a single line of integers.\"\nassert solution(stdin), \"The function should return a single line of integers.\"\nassert solution(stdin), \"The function should return a single line of integers.\""
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(6)\n'''\n\nimport sys"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\")((\")\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\\\"\\\"\\\"\na = stdin.readline().strip()\nb = stdin.readline().strip()\nm = stdin.readline().strip()\nn = len(a)\nk = len(b)\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 3, 1, 2) == 11\nassert solution(1, 5, 4, 5) == 7\nassert solution(1, 5, 3, 2) == 4\nassert solution(3, 3, 1, 1) == 1\nassert solution(7, 3, 5, 3) == 4\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5.00000000000000000000\", 'Expected \"5.00000000000000000000\", but got {}'.format(solution(stdin))\n\nassert solution(stdin) == \"11.00000000000000000000\", 'Expected \"11.00000000000000000000\", but got {}'.format(solution(stdin))\n\nassert solution(stdin) == \"5.00000000000000000000\", 'Expected \"5.00000000000000000000\", but got {}'.format(solution(stdin))\n\nassert solution(stdin) == \"11.00000000000000000000\", 'Expected \"11.00000000000000000000\", but got {}'.format(solution(stdin))\n\n-----Constraints-----\n1 <= n, k, m <= 10^5\n-10^6 <= a_i <= 10^6\n\n-----Time Limit Exceeded-----\nThe input consists of two lines.\n\nThe first line contains only integers $n$, $k$ and $m$ ($1 \\le n \\le 10^{5}$, $1 \\le k \\le 10^{5}$, $1 \\le m \\le 10^{7}$)\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^{6}$)\n\nAt most, $m$ operations can be performed.\n\nInput\n\nFirst line contains only integers $n$, $k$ and $m$ ($1 \\le n \\le 10^{5}$, $1 \\le k \\le 10^{5}$, $1 \\le m \\le 10^{7}$)\n\nSecond line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($1 \\le a_i \\le 10^{6}$)\n\nConstraints\n\n1 <= n, k, m <= 10^6\n\nOutput\n\n$n \\le n \\le 10^6$\n$k \\le k \\le 10^5$\n$m \\le m \\le 10^7$\n\nExplanation\n\nInput is already checked, so just remove unnecessary leading spaces.\n\n1. Find the maximum average power of the superheroes and its power.\n2. Remove the first element from the array, as it will be used as a starting point for the second operation.\n3. Decrease the second element by $2$.\n4. Increase the third element by $2$ each.\n\nExample 1:\n\nInput\n\n2 4 6\n4 7\n\nOutput\n\n11.00000000000000000000\n\nExplanation:\n\n(1) Remove the first element from the array, and\n(2) Decrease the second element by $2$.\n(3) Increase the third element by $2$ each.\n(4) Decrease the fourth element by $2$ each.\n\nExample 2:\n\nInput\n\n4 2 6\n1 3 2 3\n\nOutput\n\n5.00000000000000000000\n\nExplanation:\n\n(1) Remove the first element from the array, and\n(2) Decrease the second element by $2$.\n(3) Increase the third element by $2$ each.\n(4) Decrease the fourth element by $2$ each.\n(5) Decrease the fourth element by $2$ each.\n(6) Increase the third element by $2$ each.\n(7) Increase the third element by $2$ each.\n(8) Increase the third element by $2$ each.\n(9) Increase the third element by $2$ each.\n(10) Increase the third element by $2$ each.\n(11) Increase the third element by $2$ each.\n(12) Increase the third element by $2$ each.\n(13) Increase the third element by $2$ each.\n(14) Increase the third element by $2$ each.\n(15) Increase the third element by $2$ each.\n(16) Increase the third element by $2$ each.\n(17) Increase the third element by $2$ each.\n(18) Increase the third element by $2$ each.\n(19) Increase the third element by $2$ each.\n(20) Increase the third element by $2$ each.\n(21) Increase the third element by $2$ each.\n(22) Increase the third element by $2$ each.\n(23) Increase the third element by $2$ each.\n(24) Increase the third element by $2$ each.\n(25) Increase the third element by $2$ each.\n(26) Increase the third element by $2$ each.\n(27) Increase the third element by $2$ each.\n(28) Increase the third element by $2$ each.\n(29) Increase the third element by $2$ each.\n(30) Increase the third element by $2$ each.\n(31) Increase the third element by $2$ each.\n(32) Increase the third element by $2$ each.\n(33) Increase the third element by $2$ each.\n(34) Increase the third element by $2$ each.\n(35) Increase the third element by $2$ each.\n(36) Increase the third element by $2$ each.\n(37) Increase the third element by $2$ each.\n(38) Increase the third element by $2$ each.\n(39) Increase the third element by $2$ each.\n(40) Increase the third element by $2$ each.\n(41) Increase the third element by $2$ each.\n(42) Increase the third element by $2$ each.\n(43) Increase the third element by $2$ each.\n(44) Increase the third element by $2$ each.\n(45) Increase the third element by $2$ each.\n(46) Increase the third element by $2$ each.\n(47) Increase the third element by $2$ each.\n(48) Increase the third element by $2$ each.\n(49) Increase the third element by $2$ each.\n(50) Increase the third element by $2$ each.\n(51) Increase the third element by $2$ each.\n(52) Increase the third element by $2$ each.\n(53) Increase the third element by $2$ each.\n(54) Increase the third element by $2$ each.\n(55) Increase the third element by $2$ each.\n(56) Increase the third element by $2$ each.\n(57) Increase the third element by $2$ each.\n(58) Increase the third element by $2$ each.\n(59) Increase the third element by $2$ each.\n(60) Increase the third element by $2$ each.\n(61) Increase the third element by $2$"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"solution does not work\"\n\nTest cases\nTest case #1\n\nInput\n1 4 6\n\nOutput\n11.00000000000000000000\n\nTest case #2\n\nInput\n1 4 6\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n1 <= k <= 10^5\n0 <= a_1, a_2, \\ldots, a_n <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 6\n1 3 2 3\n\nOutput\n5.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= a_1, a_2, \\ldots, a_n <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\nInput\n4 3 2\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n\n-----Constraints-----\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= a_1, a_2, \\ldots, a_n <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= n <= 10^5\n0 <= k <= 10^5\n1 <= stdin.length <= 10^6\n0 <= stdin.length <= 10^6\n\n-----Examples-----\nInput\n4 4 6\n4 7\n\nOutput\n11.00000000000000000000\n\nInput\n4 2 3\n1 2 2 3\n\nOutput\n5.00000000000000000000\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5.00000000000000000000'\nassert solution(stdin) == '5.00000000000000000000'\nassert solution(stdin) == '5.00000000000000000000'\nassert solution(stdin) == '5.00000000000000000000'\nassert solution(stdin) == '5.00000000000000000000'\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5.00000000000000000000, 'incorrect answer'\n\"\"\"\nfrom math import factorial\n\nn, k, m = map(int, input().split())\n\nresult = factorial(n) / factorial(n - k) / factorial(n - (k + m))"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\n\n-----Searching the largest possible power with an infinite number of operations-----"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"5.00000000000000000000\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= k <= 10^7\n0 <= a_i <= 10^6\na_i = a_i <= 10^6"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"-3\"\nassert solution(4) == \"2\"\nassert solution(0) == \"0\"\nassert solution(1) == \"0\"\nassert solution(2) == \"-1\"\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^10\n0 \u2264 stdin.length \u2264 10^5\n\n\n----->>> Good Luck <<<\n\"\"\"\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == -1\nassert solution(4) == -1\nassert solution(5) == -3"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\n\n\n-----Notes-----\n\nN! means n! \u00d7 (n \u2212 1)!\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\nprint(\"The answer is correct.\")\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\n\n\n-----Constraints-----\n0 <= n <= 10^15\n\n\n-----Time complexity-----\nO(n)\n\n\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 2\nassert solution(4) == -3\n\n\n\"\"\""
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, [\"1 0 0 0 0 0 0 1 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\"]) == \"3\"\nassert solution(5, [\"1 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\"]) == \"2\"\nassert solution(7, [\"1 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\"]) == \"3\"\nassert solution(1, [\"0 1 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\", \"0 0 0 0 0 0 0 0 0 0 0 0 0\"]) == \"3\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3 2 0\", \"0 1 2 0 1\", \"0 1 0 1 0\"]) == \"3\"\nassert solution([\"5 3 1\", \"4 2 2 3\", \"0 2 1 0 5\"]) == \"5\"\nassert solution([\"5 3 1\", \"0 2 0 1 0\", \"0 1 0 1 0\"]) == \"1\"\nassert solution([\"5 3 0\", \"0 0 0 1 0\", \"0 0 1 0 1\", \"0 0 0 1 1\"]) == \"5\"\nassert solution([\"5 0 1\", \"0 0 0 1 1\", \"0 1 0 1 0\", \"0 1 1 0 1\"]) == \"5\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    2 0 0 0 0 0\n    0 1 1 1 0\n    0 1 0 0 0\n    0 0 1 0 1\n    0 0 1 1 0\n    0 0 0 0 0\n    \"\"\"\n    ) == \"1\"\n    assert solution(\n    \"\"\"\n    4\n    0 0 1\n    0 0 0\n    0 1 0\n    1 0 0\n    1 1 0\n    2 1 0\n    2 0 1\n    \"\"\"\n    ) == \"1\"\n    assert solution(\n    \"\"\"\n    3 0 0 0 0 0\n    0 1 0 1 0\n    0 0 0 0 0\n    1 0 0 1 0\n    1 0 0 0 0\n    0 0 1 0 1\n    0 0 0 0 0\n    \"\"\"\n    ) == \"2\"\n    assert solution(\n    \"\"\"\n    1 0 0 0 0 0\n    1 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n    \"\"\"\n    ) == \"3\"\n    assert solution(\n    \"\"\"\n    2 0 0 0 0 0\n    0 1 0 1 0\n    0 0 0 0 0\n    0 1 0 1 0\n    0 0 0 0 0\n    0 0 0 0 0\n    0 0 0 0 0\n    \"\"\"\n    ) == \"3\"\n    "
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\nassert solution(stdin) == str(5)\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3\\n0 2 0\\n') == '1\\n'\nassert solution('5\\n0 3 1 0 5 2 6\\n') == '3\\n'\nassert solution('7\\n0 3 1 0 5 2 6\\n') == '2\\n'\nassert solution('7\\n0 3 1 0 5 2 6\\n') == '2\\n'\nassert solution('7\\n0 3 1 0 5 2 6\\n') == '5\\n'\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 2\nassert solution(7) == 2\nassert solution(8) == 3\nassert solution(10) == 3\n\n\nprint(\"Correct Answer: \", solution(input()))\nprint(\"Incorrect Answer: \", solution(input()))\n"
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 0\") == \"1\"\nassert solution(\"1 2 0 5 2\") == \"1\"\nassert solution(\"1 2 0 5 3\") == \"3\"\nassert solution(\"1 2 0 5 4\") == \"3\"\nassert solution(\"1 2 0 5 3 6\") == \"3\"\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, \"abcd\") == \"abca\"\nassert solution(5, \"abcda\") == \"abca\"\nassert solution(4, \"abca\") == \"abca\"\nassert solution(5, \"abcda\") == \"abca\"\nassert solution(4, \"abca\") == \"abca\"\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"aa\"\nassert solution(input()) == \"abca\"\nassert solution(input()) == \"abda\"\nassert solution(input()) == \"bcda\"\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= s.length <= n\ns.length <= n\ns_1, s_2,..., s_n are all lowercase Latin letters.\ns contains only lowercase letters.\n\nCONSTRAINTS:\n1 <= k <= n\nk <= 10^5\n1 <= n <= 10^5\n\"\"\""
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"aa\"\n\n\n-----Examples-----\nInput\n3\naaa\naa\nOutput\naa\n\nInput\n5\nabcda\naa\nOutput\nabca\n\n\n\n-----Note-----\n\nIn the first example you can remove any character of $s$ to obtain the string \"aa\".\n\nIn the second example \"abca\" < \"abcd\" < \"abcda\" < \"abda\" < \"acda\" < \"bcda\".\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"aa\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abca\") == \"abca\"\nassert solution(\"abcda\") == \"abca\"\nassert solution(\"abcda\") == \"abcda\"\nassert solution(\"abda\") == \"abcda\"\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"abca\") == \"abca\", \"Expected 'abca', but got '\" + solution(\"abca\") + \"'\"\nassert solution(\"abcda\") == \"abcda\", \"Expected 'abcda', but got '\" + solution(\"abcda\") + \"'\"\nassert solution(\"aaaa\") == \"aaaa\", \"Expected 'aaaa', but got '\" + solution(\"aaaa\") + \"'\"\nassert solution(\"ab\") == \"ab\", \"Expected 'ab', but got '\" + solution(\"ab\") + \"'\"\nassert solution(\"\") == \"\", \"Expected empty string, but got '\" + solution(\"\") + \"'\"\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['a','b','c','d','e','f','g','h']) == 'a'\nassert solution(['aa','bc','aa']) == 'bc'\nassert solution(['abc','a','ba','aa','bb','a','c','bb','ab','b','a','b','a','b','c','ab']) == 'ab'\nassert solution(['abcd','abca']) == 'abca'\nassert solution(['aaaa','a','a','a']) == 'a'\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aaa\") == \"aa\"\nassert solution(\"abca\") == \"abca\"\nassert solution(\"abcda\") == \"abca\"\nassert solution(\"abda\") == \"aa\"\nassert solution(\"abcda\") == \"aa\"\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"pqr\") == \"pqr\"\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == \"aa\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n1 <= s.length <= 10^5\n\n\n------Time complexity--------\n\nTime: O(N^3)\n\nSpace: O(N)\n\n\"\"\"\n\nclass Solution:\n    def smallestString(self, s: str) -> str:\n        def replace_num(string):\n            return string.replace(\"0\",\"1\").replace(\"1\",\"0\").replace(\"1\",\"1\").replace(\"2\",\"2\").replace(\"2\",\"4\").replace(\"3\",\"6\").replace(\"3\",\"9\")\n        def insert_num(s):\n            s=replace_num(s)\n            s=s.replace(\"0\",\"1\").replace(\"1\",\"0\").replace(\"1\",\"1\").replace(\"2\",\"2\").replace(\"2\",\"4\").replace(\"3\",\"6\").replace(\"3\",\"9\")\n            return s\n        n=len(s)\n        for i in range(n-1):\n            s=insert_num(s)\n        return s"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(24)\n\nOutput\n24\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 64\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '64'\n\nassert solution(stdin) == '24'\n\n\n-----Constraints-----\n1 <= n <= 50\n\n0 <= a_i <= 2^{50}\n\nAccepted\n8\n\nSubmissions\n4\n\nPackages\nPYSTEMS\nPYTHON_PROBABILITY\n\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"24\"\n\n\n-----Constraints-----\n\n1 <= n <= 500\n0 <= k <= 50\n\n\"\"\"\n\nn,k = map(int, input().split())\na = list(map(int, input().split()))\nans = 0\n\nfor i in range(n):\n    ans = ans + a[i] * i\nprint(ans)"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 24\n\nhttps://www.geeksforgeeks.org/maximum-beauty-of-shelves-for-a-new-office-in-python/\n\n\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"24\"\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '24'\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 24\n\"\"\""
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('10 4') == '24'\nassert solution('7 3') == '64'\n\"\"\"\n\nimport math\n\nn = int(input())\nk = int(input())"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"24\"\nprint(solution(stdin))\n-----Sample Input-----\n\n1 3\n14 28 1 7 13 15 29 2 31\n\nOutput\n72\n\"\"\"\n\nimport sys\nimport itertools"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '11'\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 11, \"Unable to determine the minimum waiting time.\"\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"12\"\nassert solution(\"3 2 1\") == \"11\"\nassert solution(\"3 3 3\") == \"4\"\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '11'\nassert solution(stdin) == '4'\nassert solution(stdin) == '13'\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11, \"The function should return a string.\"\n\nTest\nassert solution(stdin) == 4, \"The function should return a string.\"\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3\") == \"11\"\nassert solution(\"3 2 1\") == \"10\"\nassert solution(\"2 1 3\") == \"12\"\nassert solution(\"3 3 1\") == \"1\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 11, \"Wrong output\"\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2 3\") == 11\nassert solution(\"3 2 3\") == 13\nassert solution(\"3 2 3\") == 12\nassert solution(\"2 2 1\") == 4\nassert solution(\"2 2 2\") == 2\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == 12\nassert solution(\"3 2 3\") == 11\nassert solution(\"3 2 1\") == 4\nassert solution(\"2\") == 2\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"\"1 2 3\n3 2 1\n3 2 2 3\n1 1 1 1\n1 1 1 1\n1 1 1 1\"\"\") == \"11\"\nassert solution(\"\"\"1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\"\"\") == \"11\"\nassert solution(\"\"\"1 3\n3 2 1\n3 2 2 3\n1 1 1 1\n1 1 1 1\n1 1 1 1\"\"\") == \"4\"\nassert solution(\"\"\"1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1\n1 1"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == '3 2 3 2 3 2 3 3 3 3 3'\nassert solution(10) == '3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2 2\"\nassert solution(input()) == \"2 2\"\nassert solution(input()) == \"2 2\"\nassert solution(input()) == \"2 2\"\nassert solution(input()) == \"2 2\"\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2 3 3 3 3'\nassert solution(stdin) == '2 3 3 3 3 3'\nassert solution(stdin) == '2 3 3 3 3 3 3'\nassert solution(stdin) == '2 3 3 3 3 3 3'\nassert solution(stdin) == '2 3 3 3 3 3 3'\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 2 2 3 3 3\"\n\n\n------Test------\n\nassert solution(stdin) == \"0 1 1 0 3 4 5 2 3 7 0\"\nassert solution(stdin) == \"0 1 1 0 3 4 5 2 3 7 0\"\nassert solution(stdin) == \"0 1 1 0 3 4 5 2 3 7 0\"\n\n\n-----Time complexity-----\n\nSince there is a time limit for the function, the function should run in O(n) for n = 5, 6, 7, 8, 9, and 10. There are only 5 calls to the function.\n\nSince there is a time limit for the function, it is not guaranteed that the function runs in O(n) for n = 5, 6, 7, 8, 9, and 10.\n\nSince there is only n calls, and each function only takes O(n) for n = 5, 6, 7, 8, 9, and 10.\n\n[1] https://blog.csdn.net/qq_58309877/article/details/86587672\n\n\n----Code----\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        def subProblem(s, n, m):\n            if n < m:\n                return s[:m] + s[m:]\n            else:\n                if s[n] == '0':\n                    return s\n                else:\n                    return s[:n] + '1' + subProblem(s, n+1, m) + '0'\n        \n        return subProblem(stdin, 0, len(stdin)-1)\n\n\n-----Test-----\n\nassert Solution().solution(stdin) == '1 1 0 0'\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1 1\") == \"1 2 1\"\nassert solution(\"2 0 0\") == \"1 2 0\"\nassert solution(\"1 1\") == \"1 2\"\nassert solution(\"0 0\") == \"1 2\"\nassert solution(\"0 0 0\") == \"1 2 0\"\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"0\"]) == \"0 2 3 4 5 6 6 8 2\"\nassert solution([\"6\"]) == \"1\"\nassert solution([\"2\", \"3\", \"4\"]) == \"3 2 3 4\"\nassert solution([\"0\"]) == \"1\"\nassert solution([\"0\"]) == \"1\"\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_case), \"No solution\"\nassert solution(test_case) == str(6)\n\"\"\"\n\nimport sys\nfrom heapq import heappop, heappush, heapify\n\nfrom collections import deque\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Example-----\nInput\n2\n3 8\n1 1 2 3 4 5\n4 5\n0 1 2 3 4\n0 1 2 3\n\nOutput\nNO\nYES\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2\", \"3\", \"8\"]) == \"YES\"\nassert solution([\"5\", \"1\", \"2\", \"4\", \"0\"]) == \"NO\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 8\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1 2 5\", \"2 5 1\", \"4 4\", \"0 1 2 3\"]) == \"YES\"\nassert solution([\"1 2 5\", \"2 5 1\", \"4 4\", \"0 1 2 3\", \"1 1 0 1\"]) == \"NO\"\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3,5) == 10\nassert solution(3,8) == 12\nassert solution(3,10) == 12\nassert solution(3,13) == 12\nassert solution(3,15) == 12\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '12'\nassert solution(stdin) == '12'\nassert solution(stdin) == '12'\nassert solution(stdin) == '12'\nassert solution(stdin) == '12'\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == \"0\"\nassert solution(2) == \"6\"\nassert solution(3) == \"9\"\nassert solution(4) == \"12\"\nassert solution(5) == \"16\"\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 5 1\") == \"12\"\nassert solution(\"1 8\") == \"12\"\nassert solution(\"2 4\") == \"12\"\nassert solution(\"2 4 5 8 10\") == \"15\"\nassert solution(\"3 4 3\") == \"15\"\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == \"12\"\nassert solution(5) == \"10\"\nassert solution(8) == \"12\"\n\n\n\n-----Comment-----\n\nWhen Orac wants you to tell me a number $x\\cdot y\\cdot z\\cdot a$ (i.e. $x\\cdot y\\cdot z$), You are asked to calculate a value for $x\\cdot y\\cdot z\\cdot a$\n\nHow often does Orac change $x\\cdot y\\cdot z\\cdot a$?\n\nFor example, if Orac asked you to calculate $x\\cdot y\\cdot z\\cdot a$, the answer will be $2$, because Orac changed $x\\cdot y\\cdot z\\cdot a$ (once!) at least once.\n\nIf Orac asked for some numbers, Orac decided to keep asking for new numbers until all the numbers have been calculated.\n\nIf Orac asked for some numbers, Orac decided to keep asking for new numbers until all the numbers have been calculated.\n\nOrac asked to ask for numbers for a certain amount of time.\n\nOrac asked to give a new value for $x\\cdot y\\cdot z\\cdot a$. Orac asked that new value is $2$, because Orac changed $x\\cdot y\\cdot z\\cdot a$ (once!) at least once.\n\nThis new value is then used in the next query.\n\n\n-----Constraints-----\n\n1 <= $n\\le 10^6$\n\n\n\n-----Example Execution-----\n\nInput\n3\n5 1\n8 2\n3 4\n\nOutput\n10\n12\n\n'''\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"17\"\nassert solution(stdin) == \"19\"\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"12\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"12\"\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 5) == 10\nassert solution(3, 8) == 12\nassert solution(3, 10) == 12\nassert solution(3, 13) == 13\nassert solution(3, 15) == 13\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"12\"\nassert solution(3) == \"12\"\nassert solution(4) == \"12\"\nassert solution(5) == \"12\"\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Possible\"\n\n-----Notes-----\n\nTo solve this problem, we use the function $gcd($a, b)$ to return the greatest common divisor of $a$ and $b$ to avoid infinitely recursion. We define the graph $G = (V, E)$ such that for every edge $(v, u)$ there is an edge $(v, u)$ from $1 to $n$, if $GCD(v, u) = 1$, then $GCD(v, u) = 1$. The vertices are numbered from $1$ to $|V|$. The edges $a$-edges $b$ are constructed such that they connect two vertices $1$ to $n$.\n\nWe define $G = (V, E)$ such that $V$ is a connected component, and $E$ is a set of all edges $(a, b)$ such that $(a, b)$ can be partitioned into two vertices $a$ and $b$ and $GCD(a, b) = 1$.\n\nWe use the following formula:\n\n1) $GCD(a, b) = 1$\n2) $a \\leq b$\n3) $a \\neq b$\n4) $a \\neq b$\n5) $b \\leq a$\n6) $b \\leq a$\n\nIt turns out that the vertices $1$, $2$ and $3$ are connected with an edge $(a, b)$, but there are no edges $(a, b)$ in the graph $G$.\n\nTo avoid infinite recursion, we use a graph with no edges $E$ and $1$ and $2$ and $3$ respectively.\n\nWe define $G = (V, E)$ such that for every edge $(v, u)$ there is an edge $(v, u)$ from $1 to $n$, if $GCD(v, u) = 1$, then $GCD(v, u) = 1$.\n\nTo solve this problem, we use the function $gcd($a, b)$ to return the greatest common divisor of $a$ and $b$ to avoid infinite recursion. We define the graph $G = (V, E)$ such that for every edge $(v, u)$ there is an edge $(v, u)$ from $1 to $n$, if $GCD(v, u) = 1$, then $GCD(v, u) = 1$.\n\nWe use the following formula:\n\n1) $GCD(a, b) = 1$\n2) $a \\leq b$\n3) $a \\neq b$\n4) $a \\neq b$\n5) $b \\leq a$\n6) $b \\leq a$\n\nIt turns out that the vertices $1$, $2$ and $3$ are connected with an edge $(a, b)$, but there are no edges $(a, b)$ in the graph $G$.\n\nWe need to know the minimum spanning tree of the graph $G$ such that it is a rooted tree.\n\nIn other words, we have the following utility function:\n\nfor each $v \\in V$ find all the vertices $v$ that form an edge $(a, b)$ and add it to a set of vertices $v$ (the root vertex)\n\nwe need to find the minimum spanning tree of the graph $G$ such that it is a rooted tree.\n\nThe minimum spanning tree is a set of vertices $v$ that form an edge $(a, b)$, and are not a root.\n\nAfter this set of vertices $v$ is a spanning tree we need to create a new tree $T$ of $v$ that is the same as the spanning tree of $G$.\n\nFinally, for each $u \\in U$ find all the vertices $u$ that form an edge $(a, b)$, and add it to a set of vertices $u$ (the root vertex)\n\nIn other words, we need to find the minimum spanning tree of the graph $G$ such that it is a rooted tree.\n\nNote: we assume that the graph $G$ is a rooted tree.\n\nInput\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 10^5$) \u2014 the number of vertices and the number of edges.\n\n\n\nOutput\n\nIf there exists no valid graph with the given number of vertices and edges then output \"Impossible\".\n\nOtherwise print the answer in the following format:\n\nThe first line should contain the word \"Possible\".\n\nThe $i$-th of the next $m$ lines should contain the $i$-th edge $(v_i, u_i)$ of the resulting graph ($1 \\le v_i, u_i \\le n, v_i \\neq u_i$). For each pair $(v, u)$ there can be no more pairs $(v, u)$ or $(u, v)$. The vertices are numbered from $1$ to $|V|$.\n\nIf there are multiple answers then print any of them.\n\n\n\nExamples\n\nInput\n\n5 6\n\nOutput\n\nImpossible\n\nInput\n\n10 10\n\nOutput\n\nImpossible\n\nInput\n\n1 2\n\nOutput\n\nImpossible\n\n\n\n-----Note-----\n\nHere is the representation of the graph from the first example: [Image]\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Impossible\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Impossible\"\n\"\"\""
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Impossible\"\n\"\"\""
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Impossible'\n\n\n-----Solution-----"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Possible\"\n\n\"\"\"\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Impossible\"\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 20\n0 <= stdin[i].length <= 20\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n[input]\n\n(string)\n\n\n[output]\n\n(string)\n\n\"\"\""
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin, 2, 5) == \"Possible\"\nassert solution(stdin, 3, 5) == \"Possible\"\nassert solution(stdin, 2, 12) == \"Possible\"\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= n <= 10^5\n0 <= m <= 10^5\n1 <= v <= n\n0 <= u <= n\n-10^7 <= v_i, u_i, v_j <= 10^7\n\n[Time Limit] 2 seconds per test\n[Memory Limit] 128MB\n\nclass Graph:\n    def __init__(self, size):\n        self.graph = {}\n        for vertex in range(size):\n            self.graph[vertex] = []\n\n    def add_edge(self, vertex1: int, vertex2: int, weight: int):\n        self.graph[vertex1].append((vertex2, weight))\n\n    def get_weight(self, vertex1: int, vertex2: int):\n        for edge in self.graph[vertex1]:\n            if edge[0] == vertex2:\n                return edge[1]\n        return -1\n\n    def get_all_neighbours(self, vertex):\n        return self.graph[vertex]"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Impossible'\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n1 <= n, m <= 10^5\n\n1 <= V <= n\n\n1 <= E <= 10^5\n\nConstraints\n0 < V < n\n0 < E < 10^5\n\nA graph is connected if there exists no self-loops or multiple edges.\n\n[input]\n\nThe first line contains a single integer $n$ denoting the number of vertices and edges.\n\nThe next $m$ lines contains $n$ space separated integers $V, E$.\n\n\n[output]\n\nOutput a string which is a graph with $n$ vertices and $m$ edges such that the graph contains no self-loops or multiple edges.\n\n\n[Example]\n\nInput\n\n3\n\nOutput\n\nImpossible\n\nInput\n\n2\n\nOutput\n\nImpossible\n\nInput\n\n1\n\nOutput\n\nImpossible\n"
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"WIN\"\n\"\"\""
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'WIN'\n\n\n\n\"\"\""
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 1') == 'WIN'\nassert solution('4 1') == 'WIN'\nassert solution('8 1') == 'WIN'\nassert solution('1 2') == 'WIN'\nassert solution('3 1') == 'WIN'\n"
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"WIN\"\n\nassert solution(stdin) == \"LOSE\"\n\n\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n     .\n      "
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"WIN\", \"No solutions\"\nassert solution(\"12 4\") == \"WIN\", \"No solutions\"\nassert solution(\"12 8\") == \"WIN\", \"No solutions\"\nassert solution(\"12 10\") == \"WIN\", \"No solutions\"\nassert solution(\"12 12\") == \"WIN\", \"No solutions\"\n"
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 1\"\n) == \"WIN\"\nassert solution(\n    \"12 2\"\n) == \"WIN\"\nassert solution(\n    \"1 1\"\n) == \"WIN\"\nassert solution(\n    \"1 2\"\n) == \"LOSE\"\n\n\"\"\""
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 1') == 'WIN'\nassert solution('12 2') == 'LOSE'"
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == \"WIN\"\nassert solution(\"3 1\") == \"LOSE\"\nassert solution(\"3 2\") == \"WIN\"\n"
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"WIN\"\n"
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"WIN\"\n'''\n\nimport sys\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"YES\""
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"YES\"\nassert solution(\"3 5\") == \"NO\""
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \"YES\"\nassert solution(\"5 4\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 3' == 'YES') == 'YES'\nassert solution('5 4' == 'NO') == 'NO'\n\nNote:\n\nN is always between 1 and 100.\n\n2 <= N <= 1000\n0 <= stdin.length <= 10^4\nstdin contains only lower-case English letters.\n\"\"\"\nfrom typing import List"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4\") == \"YES\"\nassert solution(\"5 3\") == \"NO\"\nassert solution(\"5 2\") == \"NO\"\nassert solution(\"5 1\") == \"NO\""
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"YES\"\nassert solution(\"5 4\\n1 0 0 0 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\") == \"NO\"\nassert solution(\"5 2\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"NO\"\nassert solution(\"5 3\\n0 0 0 0 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\\n0 1 1 1 1\") == \"YES\"\nassert solution(\"5 4\\n0 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\\n1 1 1 1 1\") == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"3\", \"2\"]) == \"YES\"\nassert solution([\"5\", \"4\"]) == \"NO\"\n"
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n\n\n-----Solution-----\n\nIn the first test Amr can learn all 4 instruments.\n\nIn the second test other possible solutions are: {2, 3, 5} or {3, 4, 5}.\n\nIn the third test Amr doesn't have enough time to learn the only presented instrument.\n"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"6\"\n\n\"\"\"\nimport sys\n\nn, k = map(int, sys.stdin.readline().split())\n\nlist_1 = []\nlist_2 = []\n\nfor i in range(k):\n    list_1.append(int(input()))\n\nfor j in range(k, n):\n    list_2.append(int(input()))\n\nlist_1.sort()\nlist_2.sort()"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3 2 1 2\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 7\") == \"1 2 3 4\"\nassert solution(\"5 6\") == \"0\"\nassert solution(\"1 3\") == \"0\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 4\") == \"0\"\n"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 1 2\") == \"3 2\"\nassert solution(\"1 3 1 2\") == \"3 2\"\nassert solution(\"1 3 1 1\") == \"3 2\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"4 2\") == \"3\"\n"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4'\n\nassert solution(stdin) == '1 2 3 4'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '1 3 4'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n\nInput\n4 10\n4 3 1 2\n\nOutput\n4\n1 2 3 4\nInput\n1 3\n4\n\nOutput\n0\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10 000,\n0 \u2264 k \u2264 10 000\n\"\"\"\n"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 1\") == \"3 2\"\nassert solution(\"3 3 1 2\") == \"3 2\"\nassert solution(\"3 3 1 3\") == \"3 2\"\nassert solution(\"3 3 1 4\") == \"3 2\"\nassert solution(\"3 3 1 5\") == \"3 2\"\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\nprint(\"Sample Tests:\")\nprint(\"Expected: YES\")\nprint(\"Actual:    \", solution(\"2 2 2 1 1\"))\nprint(\"Expected: NO\")\nprint(\"Actual:    \", solution(\"3 3 3 1 1 0 0 0 1 0 0 0 1 0 0 0 1 0 0 0 0 1\"))\nprint(\"Expected: NO\")\nprint(\"Actual:    \", solution(\"7\"))\nprint(\"Expected: YES\")\nprint(\"Actual:    \", solution(\"5\"))\nprint(\"Expected: NO\")\nprint(\"Actual:    \", solution(\"8\"))\nprint(\"Expected: YES\")\nprint(\"Actual:    \", solution(\"9\"))"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 0 0 0 1 1 0 0 0') == 'NO'\nassert solution('1 2 0 0 1 1 1 0 0 0') == 'YES'\nassert solution('1 2 0 0 1 1 1 1') == 'YES'\nassert solution('1 2 0 0 1 1 1 0') == 'NO'\nassert solution('1 2 0 0 1 1 1 1') == 'NO'\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"YES\"\nassert solution(9) == \"NO\""
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\"\"\"\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10\") == \"YES\", \"Number 10 should be string\"\nassert solution(\"5\") == \"NO\", \"Number 5 should be string\"\nassert solution(\"8\") == \"YES\", \"Number 8 should be string\"\nassert solution(\"9\") == \"YES\", \"Number 9 should be string\"\nassert solution(\"7\") == \"NO\", \"Number 7 should be string\""
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"NO\"\nassert solution(inp) == \"YES\"\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a) == \"YES\"\nassert solution(b) == \"NO\"\nassert solution(c) == \"YES\"\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1 1\",\"2 3\",\"3 5\",\"5 4\",\"4 5\",\"6 7\",\"6 5\",\"7 6\",\"7 4\",\"7 7\"]) == \"0 0 0 0 0 2 3\"\nassert solution([\"1 1\",\"2 3\",\"3 5\",\"5 4\",\"4 5\",\"6 7\",\"6 5\",\"7 6\",\"7 4\",\"7 7\"]) == \"0 1 1 2 3\"\nassert solution([\"1 1\",\"2 3\",\"3 5\",\"5 4\",\"4 5\",\"6 7\",\"6 5\",\"7 6\",\"7 4\",\"7 7\"]) == \"0 0 0 0 0 2 3\""
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7 15\") == \"0 0 0 0 0 2 3 \"\nassert solution(\"5 100\") == \"0 1 1 2 3 \"\nassert solution(\"5 100\") == \"1 2 3 \"\nassert solution(\"5 100\") == \"2 3 \"\nassert solution(\"5 100\") == \"3 \"\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 2 3 4 5 6 7\", \"5 100\"]) == \"0 0 0 0 0 2 3\"\nassert solution([\"1 2 3 4 5 6 7\", \"80 40 40 40 40 60\"]) == \"0 1 1 2 3\"\nassert solution([\"1 2 3 4 5 6 7\", \"80 40 40 40 40 60\"]) == \"0 1 1 2 3\"\nassert solution([\"1 2 3 4 5 6 7\", \"80 40 40 40 40 60\"]) == \"0 1 1 2 3\"\nassert solution([\"1 2 3 4 5 6 7\", \"80 40 40 40 40 60\"]) == \"0 1 1 2 3\"\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 4 10 5\") == \"0 0 0 0 0\"\nassert solution(\"1 4 10 20\") == \"1 1 1 0 0\"\nassert solution(\"1 4 20 40 60\") == \"1 1 1 0 0\"\nassert solution(\"5 100 100\") == \"0 1 1 2 3\"\nassert solution(\"100\") == \"0 0 0 0 0\"\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 20\", 10, 1) == 3\nassert solution(\"20\", 4, 1) == 2\nassert solution(\"20\", 4, 2) == 0\nassert solution(\"20\", 4, 3) == 0\n\n\n-----Bonus-----\n\nThe bonus is that it is possible to reuse a variable, $i$-th student, from the next list, $i$-th student, until some other variable $i$-th student. This variable is not used anymore after the last iteration.\n\nThe bonus also means that it is possible to reuse a variable, $i$-th student, from the next list, $i$-th student, until some other variable $i$-th student. This variable is used only after the last iteration.\n\n\n-----Algorithm-----\n\nWe initialize an empty array to store the answer. Each student will be processed only once. If we get the answer, we update the answer to its minimum value. \n\nWe use a dynamic programming algorithm to solve the problem. First, we use a recurrence relation to solve the problem: $t_i$ = t_{i-1} + t_{i-1}$ and $i$-th student must pass the exam until $t_{i-1}$+1 minutes. In other words, $t_i$= $t_{i-1}$+1 minutes. We start from $i$-th student, and for each student $i$-th student:"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5 0 0 0 0 2 3'\nassert solution(stdin) == '0 0 0 0 0 2 3'\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= t_i <= 100\n\n---Time---\nO(T*M*n)\n\"\"\""
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 3 2 4 5 6 7') == '0 0 0 0 0 2 3'\nassert solution('5 1 1 1 1') == '0 0 0 0 0 2 3'\nassert solution('5 1 1 1 2') == '0 1 1 1 2'\nassert solution('5 1 1 1 3') == '1 1 1 1 3'\nassert solution('5 1 1 1 4') == '1 1 1 1 4'\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\n\n-----Constraints-----\n0 \u2264 n \u2264 100\n0 \u2264 x \u2264 100\n\n0 \u2264 x \u2264 n\n'''"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, [3, 4, 5]) == 2\nassert solution(1, [1, 2, 3, 4, 5]) == 0\nassert solution(5, [2, 1, 3, 6, 5]) == 1\nassert solution(1, [1, 2, 3, 4, 5]) == 0\n\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def minOperations(self, n: int, x: int) -> int:\n        \n        self.min = sys.maxsize\n        self.s = 0\n        self.dp = [1] * n\n        self.dfs(n, 0, x)\n        return self.s\n    \n    def dfs(self, n, i, x):\n        if i == n:\n            self.s = min(self.s, self.min)\n            return\n        \n        for j in range(len(self.dp)):\n            if self.dp[j] == -1:\n                continue\n            if self.dp[j] == x - 1:\n                self.s = min(self.s, self.min)\n                continue\n            self.dp[j] = min(self.dp[j] + 1, self.dp[j] + 1 if self.dp[j] + 1 <= self.min else self.min)\n            self.dfs(n, i + 1, x)\n            self.dp[j] = -1\n            \n        \n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\n\nInput\n5 3\n0 4 5 6 7\n\nOutput\n2\n\nInput\n1 0\n0\n\nOutput\n1\n\nInput\n5 0\n1 2 3 4 5\n\nOutput\n0\n\n'''\n\nimport sys\n\ns = sys.stdin.readline().strip()\nn = int(s)\n\nset_num = [int(s) for s in sys.stdin.readline().strip().split()]\nprint(max(set_num))"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, 3) == 0\nassert solution(1, 0) == 1\nassert solution(5, 5) == 0\nassert solution(1, 1) == 0\nassert solution(1, 2) == 1\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\n\"\"\""
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"5 0\") == \"0\"\nassert solution(\"0\") == \"1\"\nassert solution(\"0 2 3 4 5\") == \"0\"\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2 5) == '3 0 3'\nassert solution(2 4) == '2 1 3'\nassert solution(2) == '2'\nassert solution(1) == '1'\nassert solution(3) == '1 1'\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\", \"4\"]) == \"2\"\nassert solution([\"2\", \"5\"]) == \"1\"\nassert solution([\"3\", \"3\", \"1\", \"2\"]) == \"2\"\nassert solution([\"3\", \"3\", \"3\", \"2\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"1\", \"4\", \"2\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 0 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"0 1 3\"\n\n---CODE---\n\nimport sys\nsys.setrecursionlimit(10**6)\ninput = sys.stdin.readline"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['2','5','3','5','1','2','2','3','3','4','2']) == '0 1 3'\nassert solution(['2','5','3','5','1','2','2','3','3','4','2', '4']) == '2 1 3'\nassert solution(['1','2','2','1','4','4','2','4','2','3','3','2']) == '3 4 2'\nassert solution(['1','2','2','1','4','4','2','4','2','3','3','2','4']) == '5 5 1'\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"\n\\\"\\\"\\\"\n\\\"\\\"\\\"\n\\\"\\\"\\\"\n\\\"\\\"\\\"\n\\\"\\\"\\\"\n\\\"\\\"\\\"\n\npass"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    def dice(self, n: int) -> int:\n        ans = 1\n        for i in range(1, n + 1):\n            ans += math.floor(math.sqrt(math.pow(i, 2) - 2 * i))\n        return ans\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2\",\"4\",\"2\"]) == 3\nassert solution([\"3\",\"3\",\"4\",\"2\",\"1\",\"2\"]) == 2\nassert solution([\"1\",\"1\",\"5\",\"1\",\"4\",\"1\"]) == 0\nassert solution([\"1\",\"1\",\"2\",\"1\",\"2\",\"2\"]) == 1\nassert solution([\"2\",\"1\",\"2\",\"1\",\"2\",\"3\"]) == 2\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 5\") == 2\nassert solution(\"2 4\") == 2\nassert solution(\"2 1 3\") == 2\nassert solution(\"2 4\") == 1\nassert solution(\"2 4\") == 2\n"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2 1 3'\nassert solution(stdin) == '2 3'\nassert solution(stdin) == '1 3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\n\n\n'''"
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2,5) == 2\nassert solution(2,4) == 2\nassert solution(2,3) == 1\nassert solution(2,6) == 0\nassert solution(3,6) == 0\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 of week\") == 52\nassert solution(\"2 of week\") == 11\nassert solution(\"3 of week\") == 11\nassert solution(\"4 of week\") == 52\nassert solution(\"5 of week\") == 52\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"52\"\n\nassert solution(stdin) == \"11\"\n\"\"\""
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"4\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"2 1 2\") == \"3\"\nassert solution(\"1 2 1\") == \"0\"\nassert solution(\"1 2 2\") == \"2\"\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == answer, \"incorrect answer\""
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 of week') == '52'\nassert solution('30 of month') == '11'\nassert solution('5 of week') == '52'\nassert solution('3 of month') == '11'\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 52\nassert solution(stdin) == 52\nassert solution(stdin) == 52\nassert solution(stdin) == 52\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 1) == 52\nassert solution(30, 1) == 11\n\n-----Constraints-----\n1 \u2264 stdin.length \u2264 40\nstdin.length = 1\n\nConstraints\n1 \u2264 stdin[i] \u2264 7\nstdin[i] \u2264 stdin.length\nstdin[i] = 1, 2, 3, or 4\nstdin.length = 6\n\n[input] string stdin\n\n[output] string\n\nSample Input\n\n4 of week\n\nSample Output\n\n52\nSample Input\n\n30 of month\n\nSample Output\n\n11\nSample Input\n\n4 of month\n\nSample Output\n\n11\n\n-----Solution-----"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"52\"\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 4\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"52\"\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"NO\" or solution(inp) == \"YES\"\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), 'incorrect return value'\n\"\"\"\n\nimport unittest\nfrom math import log2\n\n\nclass Solution:\n    def __init__(self):\n        self.cache = {}\n\n    def can_meet_stair(self, n: int, d: int) -> bool:\n        if n in self.cache:\n            return self.cache[n]\n\n        self.cache[n] = (n + d) % n == 0\n        self.cache[n + d] = True\n        return True\n\n    def can_meet_stair_2(self, n: int, d: int) -> bool:\n        if n in self.cache:\n            return self.cache[n]\n\n        if n == 0:\n            self.cache[n] = (n + d) % n == 0\n            return True\n\n        self.cache[n] = (n + d) % n == 0\n        if self.can_meet_stair(n - d, d):\n            return True\n        self.cache[n] = (n + d) % n == 0\n        if self.can_meet_stair(n + d, d):\n            return True\n\n        self.cache[n] = (n + d) % n == 0\n        if self.can_meet_stair(n - d, d):\n            return True\n        return False\n\n    def can_meet_stair_3(self, n: int, d: int) -> bool:\n        if n in self.cache:\n            return self.cache[n]\n\n        self.cache[n] = (n + d) % n == 0\n        if self.can_meet_stair(n - d, d):\n            return True\n        if n + d == n:\n            self.cache[n] = (n + d) % n == 0\n            return True\n\n        if n + d == n - d:\n            self.cache[n] = (n + d) % n == 0\n            return True\n\n        self.cache[n] = (n + d) % n == 0\n        if self.can_meet_stair(n, d):\n            return True\n        return False\n\n    def can_meet_stair_4(self, n: int, d: int) -> bool:\n        if n == 0:\n            self.cache[n] = True\n            return True\n\n        self.cache[n] = False\n\n        if n + d == n:\n            self.cache[n] = True\n            return True\n\n        if n + d == n - d:\n            self.cache[n] = True\n            return True\n\n        if n + d == n - d - d:\n            self.cache[n] = True\n            return True\n\n        self.cache[n] = False\n        if self.can_meet_stair(n - d, d):\n            return True\n        if self.can_meet_stair(n, d):\n            return True\n        return False\n\n    def can_meet_stair_5(self, n: int, d: int) -> bool:\n        if n == 0:\n            return False\n\n        if n in self.cache:\n            return self.cache[n]\n\n        if n + d == n:\n            return True\n\n        if n + d == n - d:\n            return True\n\n        if n + d == n - d - d:\n            return True\n\n        self.cache[n] = False\n        if self.can_meet_stair(n - d, d):\n            return True\n        if self.can_meet_stair(n, d):\n            return True\n        return False\n\n    def can_meet_stair_6(self, n: int, d: int) -> bool:\n        if n == 0:\n            return False\n\n        if n in self.cache:\n            return self.cache[n]\n\n        if n + d == n:\n            return True\n\n        if n + d == n - d:\n            return True\n\n        if n + d == n - d - d:\n            return True\n\n        self.cache[n] = False\n        if self.can_meet_stair(n - d, d):\n            return True\n        if self.can_meet_stair(n, d):\n            return True\n        return False\n\n    def can_meet_stair_7(self, n: int, d: int) -> bool:\n        if n == 0:\n            return False\n\n        if n in self.cache:\n            return self.cache[n]\n\n        if n + d == n:\n            return True\n\n        if n + d == n - d:\n            return True\n\n        if n + d == n - d - d:\n            return True\n\n        self.cache[n] = False\n        if self.can_meet_stair(n - d, d):\n            return True\n        if self.can_meet_stair(n, d):\n            return True\n        return False\n\n\nclass TestSolution(unittest.TestCase):\n    def test_1(self):\n        solution = Solution()\n        self.assertEqual(True, solution.can_meet_stair(10, 5))\n\n    def test_2(self):\n        solution = Solution()\n        self.assertEqual(False, solution.can_meet_stair(10, 5))\n\n    def test_3(self):\n        solution = Solution()\n        self.assertEqual(True, solution.can_meet_stair(5, 1))\n\n    def test_4(self):\n        solution = Solution()\n        self.assertEqual(True, solution.can_meet_stair(5, 3))\n\n    def test_5(self):\n        solution = Solution()\n        self."
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n------Constraints-----\n0 < stdin.length <= 3000\n0 < stdin[i] <= 10^9\n0 < d_1 < n\n0 < d_2 < m < n\n\n\"\"\""
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 4 8 3 6\") == \"YES\"\nassert solution(\"2 4 5 7 9\") == \"NO\"\nassert solution(\"2 4 7\") == \"NO\"\nassert solution(\"2 4 8\") == \"NO\"\nassert solution(\"2 3 5 7 9\") == \"YES\"\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 \u2264 n, m \u2264 10^4\n0 \u2264 d_1, d_2,..., d_{m} < n\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"\"\"6\n5 2 5\"\"\"\n) == \"5\"\nassert solution(\n    \"\"\"6\n2 3 2\"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"2 2\"\"\"\n) == \"2\"\nassert solution(\n    \"\"\"1 1 1 1 1 1 1 1 1 1\"\"\"\n) == \"1\"\nassert solution(\n    \"\"\"1 3 1 2 3 3 3 2 3 2 2 2 1 1 1 3 1 1 3 3 1 3 2 3 2 3 2 2 3 2 3 2 3 2 2 3 2 2 2 3 2 2 2 3 2 2 3 2 2 3 2 3 2 2 3 2 3 2 2 3 2 3 2 2 2 3 2 2 2 3 2 2 3 2 2 3 2 3 2 2 3 2 2 3 2 3 2 2 3 2 3 2 2 2 3 2 2 2 3 2 3 2 2 3 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 3 2 2 3 2 2 2 3 2 2 3 2 2 3 2 2 3 2 2 2 3 2 2 2 3 2 2 3 2 2 2 3 2 2 3 2 2 3 2 2 2 3 2 2 2 3 2 2 3 2 2 3 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 2 3 2 2"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"{\\\"x\\\": 3, \\\"y\\\": 1, \\\"p\\\": 1, \\\"q\\\": 10}\\\".encode() == b\"10\\\".decode()\"\n) == \"4\"\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 1 2\") == \"1\"\nassert solution(\"7 14 3 8\") == \"4\"\nassert solution(\"20 70 2 7\") == \"4\"\nassert solution(\"5 6 1 1\") == \"4\"\nassert solution(\"5 7 1 2\") == \"2\"\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '4'\nassert solution(stdin) == '10'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-2'\n\n-----Bonus-----\n\nBonus\n\nHere is a more basic example:\n\nInput:\n3\n3 2 1 7\n3 2 1 3\n3 2 1 2\n\nOutput:\n2\n\nExplanation:\n\n4 / 2 = 1 / 2 and 3 / 7 = 3 / 7\n\nAll the solutions are correct, with p / q being the smallest number of submissions.\n\n\n\"\"\""
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\n\n\n-----Brute Force Approach-----\n\nTo find the most frequent rational number you are able to make, use a brute force approach. In the Brute Force Approach, you can use either the Python search object or the O(n) linear approach. The O(n) linear approach is the most common approach. In this case, you can find the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number. You will iterate over the integers in the range 0;1, so that you can find the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number. This can be implemented as a sliding window on the integers.\n\nLogic:\n\nWe have to find the minimum number of submissions that you have to make if you want your success rate to be equal to your favorite rational number.\n\nIn order to find the smallest number of submissions you have to make, we will use a sliding window approach.\n\nWe will keep track of the minimum number of submissions that you have to make if you want your success rate to be equal to your favorite rational number.\n\nWe will keep track of the minimum number of submissions that you have to make if you want your success rate to be equal to your favorite rational number.\n\nAfter we have found the smallest number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nAfter we have found the smallest number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nWe will keep track of the minimum number of submissions that you have to make if you want your success rate to be equal to your favorite rational number.\n\nAfter we have found the smallest number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nAfter we have found the smallest number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nWhen we have been able to find the minimum number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nAfter we have found the minimum number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nWhen we have been able to find the smallest number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nWhen we have been able to find the minimum number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nAfter we have found the smallest number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nWe will keep track of the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nWe will keep track of the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nAfter we have found the smallest number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\nAfter we have found the smallest number of submissions you have to make, we will remove the smallest number of submissions you have to make if you want your success rate to be equal to your favorite rational number.\n\n...\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(10)\nassert solution(stdin) == str(-1)\nassert solution(stdin) == str(4)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(-1)\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0' or solution(stdin) == '-1'\n\n\n-----Constraints-----\n\n1 \u2264 t \u2264 1000\n0 \u2264 x \u2264 10^9\n0 \u2264 p \u2264 q \u2264 10^9\n0 < y < 100\n0 < q < 100\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n\nInput:\n3\n3 10 1 2\n7 14 3 8\n20 70 2 7\n5 6 1 1\n\nOutput:\n3\n9\n0\n\n\n-----Constraints-----\n\n1 \u2264 t \u2264 1000\n0 \u2264 x \u2264 10^9\n0 \u2264 p \u2264 q \u2264 10^9\n0 < y < 100\n0 < q < 100\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Sample 1-----\n\nInput:\n4\n3 10 1 2\n7 14 3 8\n20 70 2 7\n5 6 1 1\n\nOutput:\n4\n10\n0\n\n\n-----Sample 2-----\n\nInput:\n1\n5\n3\n1\n1\n2\n1\n\nOutput:\n0\n-1\n\"\"\""
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n\n1 \u2264 t \u2264 10^5\n0 \u2264 x \u2264 10^9\n0 \u2264 y \u2264 10^9\n0 \u2264 p \u2264 q\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"././files/input.txt\") == \"250\"\nassert solution(\"././files/input.txt\") == \"0\"\nassert solution(\"././files/input.txt\") == \"0\"\nassert solution(\"././files/input.txt\") == \"0\"\nassert solution(\"././files/input.txt\") == \"0\"\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"OVERFLOW!!!\", 'The result does not match expected result.'\nassert solution(input()) == '161', 'The result does not match expected result.'\nassert solution(input()) == '0', 'The result does not match expected result.'\n\n\n-----Edited by Demi.Mervin-----\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input()\n) == 'Overflow!!!'\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"add\") == \"add\"\nassert solution(\"for 3 4 6 7 8 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 210 210 211 212 212 213 214 215 216 217 218 219 220 220 221 222 223 224 225 226 227 228 229 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 253 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 290 291 292 293 294 295 296 297 298 299 299 300 301 302 303 303 304 305 306 308 309 310 311 313 315 316 317 318 319 320 321 322 323 323 324 325 326 347 348 349 350 351 351 352 353 354 355 356 357 358 359 360 361 366 369 370 371 372 373 373 374 375 375 376 377 378 379 380 380 390 393 394 395 396 396 399 399 400 401 400 402 400 403 404 405 406 407 406 408 409 410 411 411 412 413 414 414 414 415 415 416 416 417 418 419 420 421 420 422 422 423 423 424 425 426 427 428 429 430 430 431 431 431 440 440 441 440 442 441 441 442 449 450 451 451 452 458 459 459 460 460 461 461 461 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 462 4"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4) == 'EXPLAINITON', \"WRONG OUTPUT\"\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == \"OVERFLOW!!!\", \"0 should not be equal to 'OVERFLOW!!!'\"\nassert solution(1) == \"0\", \"1 should not be equal to '0'\"\nassert solution(2) == \"0\", \"2 should not be equal to '0'\"\nassert solution(3) == \"0\", \"3 should not be equal to '0'\"\nassert solution(4) == \"0\", \"4 should not be equal to '0'\"\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\")'(\") == \"\")\", '\"(\")\"\\'(\"(\")\\'(\")\\'(\"(\")'\")\"()\\'(\"(\".'()\"')\"'()'(\"(\"\n\nassert solution
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(in_str) == \"OVERFLOW!!!\"\n\"\"\""
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == \"1\"\nassert solution(10) == \"14\"\nassert solution(9) == \"3\"\nassert solution(8) == \"0\"\nassert solution(8) == \"11\"\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"for 10\", \"for 10\", \"add\"]) == \"OVERFLOW!!!\"\nassert solution([\"for 10\", \"for 10\", \"add\", \"for 10\", \"end\"]) == \"161\"\nassert solution([\"for 99\", \"add\", \"for 99\", \"end\"]) == \"0\""
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ee\") == 2\nassert solution(\"z\") == 0\nassert solution(\"0ay1\") == 2\nassert solution(\"0ay2\") == 0\nassert solution(\"0ay3\") == 0\n"
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0ay1\") == 2\n\n\n-----Constraints-----\n0 <= s.length <= 50\ns contains only lowercase English letters.\n\n\"\"\""
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\""
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == 2\nassert solution(input) == \"0\"\nassert solution(input) == 0\n"
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0ay1\") == 0\nassert solution(\"z\") == 2\nassert solution(\"0ay\") == 0\nassert solution(\"y\") == 2\nassert solution(\"z1\") == 2\n"
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\n"
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n'''"
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0ay1\") == 2\nassert solution(\"z\") == 0\nassert solution(\"z\") == 2\nassert solution(\"\") == 0\n"
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('ee') == 2\nassert solution('z') == 0\nassert solution('0ay1') == 2\n\n\nassert solution('0ay2') == 1\nassert solution('0ay3') == 2\n"
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4\") == \"100\"\nassert solution(\"7\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"5\") == \"2\"\nassert solution(\"3\") == \"0\"\n"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n\n0 <= n <= 1000\n-10^9 <= x_i, y_i <= 10^9\nx_i \\le y_i\nx_i \\le n\nx_i, y_i \\neq 0\nx_i, y_i \\neq 0\n\n------Time Limit--------\n\nO(n^4)\n\n\n------Coding Rules------\n\nO(n^2)\n\"\"\"\nimport math\n\nt = int(input())"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n\n\"\"\"\n\nimport math\n\nn = int(input())\n\nx, y = map(int, input().split())\n\nx_i = int(math.sqrt(x))\ny_i = int(math.sqrt(y))\n\nx_i, y_i = abs(x_i), abs(y_i)"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4\") == \"100\"\nassert solution(\"7\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 1 1 1\"]) == \"1\"\nassert solution([\"1 1 1 1\", \"0 1 1 0\"]) == \"1\"\nassert solution([\"1 1 1 1\", \"0 1 1 0\", \"0 -1 -1 -1\"]) == \"3\"\nassert solution([\"1 0 0\", \"0 1 1\", \"0 1 1\", \"0 -1 -1 -1\", \"0 -1 -1 -1\"]) == \"4\"\nassert solution([\"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\"]) == \"1\"\n"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == -1\nassert solution(input()) == 100\nassert solution(input()) == 100\n"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"100\"\n\"\"\"\n"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\n\n\"\"\""
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\u201c123\u201d) == \u201c123\u201d\nassert solution(\u201c12345\u201d) == \u201c12345\u201d\nassert solution(\u201c123456\u201d) == \u201c123\u201d\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == ['1 4', '2 5', '6 3']\nassert solution(stdin) == ['3 1', '4 2']\nassert solution(stdin) == ['1 2']\nassert solution(stdin) == ['1 3', '2 4']\nassert solution(stdin) == ['1 3', '2 4']\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 4\") == [\"1 4\", \"1 3\", \"2 4\", \"2 3\", \"3 2\", \"3 1\"]\nassert solution(\"1 4 5 6\") == [\"1 4 5 6\"]\nassert solution(\"1 2 3 4\") == [\"1 2 3 4\"]\nassert solution(\"1 3 4 5 6\") == [\"1 3 4 5 6\"]\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2 1\"\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 4\"\nassert solution(input()) == \"1 4\"\nassert solution(input()) == \"1 4\""
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"LLRLLL\"), \"No solution\"\nassert solution(\"RRLL\"), \"No solution\"\nassert solution(\"LLRLLL\"), \"No solution\"\nassert solution(\"RRLL\"), \"No solution\"\nassert solution(\"LLRLLL\"), \"No solution\"\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == solution(input().split())\n\n\n-----Time complexity-----\n\nTime: O(n)\nSpace: O(n)\n\n-----Algorithm-----\n\nCreate a variable that stores the student numbers in the first line.\nCreate a variable that stores the number of students at the second line.\nSwap the first number with the second number.\nCompare the new values.\nRepeat until there are no two numbers that are not equal.\nRepeat until there are two numbers that are not equal.\n\nNOTE: If a number is not equal to another number, it won't be counted.\n\n\"\"\"\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"3 1\"\nassert solution(\"2 1\") == \"1 2\"\nassert solution(\"3 4\") == \"4 2\"\nassert solution(\"4 1\") == \"1 4\"\nassert solution(\"4 2\") == \"2 4\"\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2 4'\n\nassert solution(input()) == '5 3'\n\nassert solution(input()) == '3 5'\n\nassert solution(input()) == '1 5'\n\nprint('Example 1:')\nprint('Input : ')\nprint('stdin :')\nprint('4')\nprint('Output :')\nprint('1 1')\n\nprint('Example 2:')\nprint('Input : ')\nprint('stdin :')\nprint('4')\nprint('Output :')\nprint('3 1')\n\nprint('Example 3:')\nprint('Input : ')\nprint('stdin :')\nprint('4')\nprint('Output :')\nprint('1 2')\n\nprint('Example 4:')\nprint('Input : ')\nprint('stdin :')\nprint('4')\nprint('Output :')\nprint('3 5')\n\nprint('Example 5:')\nprint('Input : ')\nprint('stdin :')\nprint('4')\nprint('Output :')\nprint('1 4')\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 30\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 3) == 30\nassert solution(1, 1) == 0\nassert solution(2, 2) == 0\nassert solution(2, 1) == 0\nassert solution(3, 0) == 0\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0, 0) == 30\nassert solution(10, 1) == 25\nassert solution(2, 3) == 0\nassert solution(1, 1) == 1\nassert solution(1000, 1) == 0\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == \"30\"\n\n\n-----Constraints-----\n0 \u2264 m \u2264 100, 0 \u2264 b \u2264 10000\n\n\n------Time complexity-----\nBest Case: O(n)\nWorst Case: O(m)\nSpace Complexity: O(1)\n\n------Efficiency-----\nO(mn)\n\n\"\"\""
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 1\") == \"30\"\n\nassert solution(\"0 0\") == \"30\"\n\nassert solution(\"2 2\") == \"25\"\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"30\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(test) == '30'\nassert solution(input) == '25'\nassert solution(input2) == '25'\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 5) == 30\nassert solution(2, 3) == 25\nassert solution(2, 1) == 1\nassert solution(1, 1) == 0\nassert solution(3, 2) == 1\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2') == '30'\nassert solution('1 2 3') == '30'\nassert solution('3 3 1 2') == '1'\nassert solution('5') == '0'\nassert solution('9 2 3 1') == '6'\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"30\"\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 50\n\n\n------Time complexity-----\nO(m * n) in worst case\nO(m * n) in best case\n\n------Space complexity-----\nO(m * n)\n\n------Bit Manipulation-----\n\n1. When a leaf node is given, the tree should be colored.\n2. If the node belongs to a tree, it should be colored as green.\n3. Otherwise, it should be colored as red.\n\nSolution:\n'''"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '79'\n\n-----My Solution-----\n\n\uc911\ucca9 recursion \ud558\uace0 \uc2f6\uc740 \ubb38\uc81c\ub97c \ucc3e\uc544\ubcf4\uc790.\n\ucc38\uace0\ub85c \ub2e4\uc2dc \ud480\uc5b4\ubcf4\uc790! \n\nclass Solution:\n    def countVisitedCells(self, n: int, t: List[int]) -> int:\n        pass\n\nprint(Solution().countVisitedCells(n,t))\n"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '39'\n"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"39\"\n\npass\n'''"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(79)\n\"\"\""
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input().strip().split(\" \")\n) == \"6\"\nassert solution(\n    input().strip().split(\" \")\n) == \"6\"\nassert solution(\n    input().strip().split(\" \")\n) == \"6\"\nassert solution(\n    input().strip().split(\" \")\n) == \"6\"\nassert solution(\n    input().strip().split(\" \")\n) == \"6\"\n"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == \"39\"\nassert solution(5) == \"85\"\nassert solution(5) == \"3\"\nassert solution(1) == \"3\"\nassert solution(4) == \"5\"\n"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2 2 3\") == 11\nassert solution(\"1 1 1 1 3\") == 6\nassert solution(\"6 3 1 1 4\") == 23\nassert solution(\"0 0 0 0 0\") == 0\nassert solution(\"1 1 0 0 0\") == 1\n"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"17\"\nassert solution(input) == \"12345\"\nassert solution(input) == \"123456789\"\nassert solution(input) == \"1234567890\"\n"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"47\"\nassert solution(stdin) == \"85\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"YES\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"NOPYOUSNOWY\") == \"NO\"\nassert solution(\"HILBERTO\") == \"YES\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"YO\") == \"NO\""
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"AABBCC\") == \"YES\"\nassert solution(\"ABBCC\") == \"YES\"\nassert solution(\"ABABCC\") == \"NO\"\nassert solution(\"ABCABC\") == \"NO\"\nassert solution(\"ABCDCDC\") == \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"YES\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"NO\"\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'YES', 'incorrect'\nassert solution(input('incorrect')) == 'NO', 'incorrect'\n\n'''\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        # do not modify the lines below \ud83d\udc47\n        \n        # modified this:\n        pass\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('A') == 'YES'\nassert solution('W') == 'NO'\nassert solution('ABA') == 'NO'\nassert solution('ABC') == 'YES'\nassert solution('ABCDCDC') == 'YES'\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"YES\"\nassert solution(\"AI\") == \"YES\"\n"
    }
]