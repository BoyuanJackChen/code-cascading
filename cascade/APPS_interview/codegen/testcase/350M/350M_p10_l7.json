[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 4\n\n\nInput\n|[a:b:|]\n\nOutput\n4\n\nInput\n|][a:b:|]\n\nOutput\n-1\n\n\n-----Explanation-----\n\nInput: s = \"abcccba\"\ns = \"bcacbcaa\"\ns = \"acccba\"\ns = \"baacba\"\ns = \"bca\"\ns = \"cba\"\ns = \"cbc\"\ns = \"cba\"\ns = \"bcc\"\ns = \"cba\"\ns = \"bcba\"\ns = \"cbbbbaa\"\ns = \"ccba\"\ns = \"ccbcbbaa\"\ns = \"caccbbaa\"\ns = \"caccbbaa\"\ns = \"caccbbaa\"\ns = \"caccbbaa\"\ns = \"caccbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"cacbbaa\"\ns = \"cacbbaa\"\ns = \"cacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"cabacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caacbbaa\"\ns = \"caac"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"a:b:|\") == -1\nassert solution(\"a|b|:|:|\") == 4\nassert solution(\"a||b||:|:|\") == -1\nassert solution(\"a|||b||:|:|\") == -1\nassert solution(\"a|||b|:|:|\") == 4\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == -1\nassert solution(input()) == 4\nassert solution(input()) == 7\nassert solution(input()) == -1\nassert solution(input()) == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"s:ss\") == 2, \"Test case failed\"\nassert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abcabc\") == 4\nassert solution(\"abcb\") == -1\nassert solution(\"aabc\") == 5\nassert solution(\"aabc\") == 4\nassert solution(\"aabc\") == 0\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(':::::') == '4'\nassert solution('>>>>') == '-1'\nassert solution('aaa') == '-1'\nassert solution('aa') == '4'\nassert solution('bb') == '-1'\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"a:b:|\") == 4\n\nassert solution(\"a:b:;\") == 0\n\nassert solution(\"a:b:||\") == 0\n\nassert solution(\"a:b|:\") == 0\n\nassert solution(\"a|:b:\") == 0"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution({\"[a:b|]\": 4, \":\": 3, \"|\": 2}) == 4\nassert solution({\"a:b|\": 1, \"|\": 2}) == 1\nassert solution({\"a\": \"b\", \"|\": 1, \"|\": 2}) == -1\nassert solution({\"a\": \"b\": 1, \"|\": 2}) == 4\nassert solution({\"[a:b|]:\": 1, \":\": 2}) == -1\n"
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\":||:\") == -1, \"Unable to find an accordion by removing some characters from $s$, print $-1$. Otherwise print maximum possible length of the resulting accordion.\"\n\"\"\""
    },
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"(:;{)\") == -1\nassert solution(\"(a:b:|:\") == 4\nassert solution(\"(:;{|:)\") == -1\nassert solution(\"(a:b:;)\") == -1\nassert solution(\"(a:b:;|:)\") == 4\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(99)\nassert solution(stdin) == str(499)\nassert solution(stdin) == str(48)\nassert solution(stdin) == str(97)"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '99'\nassert solution(input()) == '999'\nassert solution(input()) == '99999'\nassert solution(input()) == '9999'\nassert solution(input()) == '999999'\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"99\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"499\"\nassert solution(stdin) == \"25\"\nassert solution(stdin) == \"99\"\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 99\n\"\"\"\nclass Solution:\n    def __init__(self, max: int):\n        self.max = max\n    def solve(self, x: int) -> str:\n        pass\n\n\"\"\"\n\n-----Time Complexity-----\n\nA time complexity of O(n) is a sign of, in which the number of digits is constant and in which there are n! significant digits, thus O(n) is a time complexity of O(n!).\n\nA time complexity of O(n^2) is a time complexity of O(n^2).\n\n---Worst Case---\n\nIf your solution takes too long, you can define a buffer, to calculate the right answer later.\n\nTime complexity O(n^2).\n\nThis is the typical case, where the process takes 0s to run.\n\n---Best Case---\n\nThe process takes O(n^2).\n\nTime complexity O(n^2).\n\nThe process is also O(n^2).\n\"\"\"\n\nclass Solution:\n    def solve(self, x: int) -> str:\n        pass\n\nassert Solution(2147483647).solve(x) == 2147483647"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"499\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"521\"\nassert solution(stdin) == \"125\"\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(100) == 99\nassert solution(48) == 499\nassert solution(521) == 499\nassert solution(0) == -1\nassert solution(\"\") == -1\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"100\") == \"100\"\nassert solution(\"48\") == \"48\"\nassert solution(\"521\") == \"521\"\nassert solution(\"499\") == \"499\"\n\npass\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"499\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"521\"\nassert solution(stdin) == \"00\"\nassert solution(stdin) == \"100\"\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"521\") == \"499\""
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(521) == 499\nassert solution(100) == 99\nassert solution(48) == 48\nassert solution(99) == 99\nassert solution(999) == 1000\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1000\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1000'\n\nPrint solution.\nInput\n\n25\n\nPrint solution\n\nOutput\n\n1000"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12, \"Failed\"\n\"\"\""
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1000\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1000'\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"100\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"99\"\nassert solution(input()) == \"1000\"\nassert solution(input()) == \"1000\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\n        \"100\",\n        \"400\",\n        \"500\",\n        \"600\",\n        \"700\",\n        \"800\",\n        \"900\",\n    ]\n) == \"1000\"\n\nassert solution(\n    [\n        \"20\",\n        \"30\",\n    ]\n) == \"1000\"\n\nassert solution(\n    [\n        \"99\",\n        \"5\",\n    ]\n) == \"100\"\n\n\"\"\""
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == \"1\"\nassert solution == \"2\"\nassert solution == \"3\"\nassert solution == \"4\"\nassert solution == \"5\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\n\n-----Constraints-----\n\n1 <= n <= 10^9\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer stdin\n\nA number n.\n\n\n[output] string\n\nString representation of the answer.\n\n\n[example]\n\nInput\n4\n\nOutput\n1\n\n\"\"\""
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0') == '0', '0 is not a valid number'\nassert solution('15') == '0', '15 is not a valid number'\nassert solution('4000') == '2000', '4000 is not a valid number'\nassert solution('0') == '0', '0 is not a valid number'\nassert solution('1000') == '1000', '1000 is not a valid number'\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), 'incorrect solution'\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n\n\n---Part Two---\n\nAfter you have hired $q - 2$ painters, you have to paint all sections $x$ such that $l_i \\le x \\le r_i$.\n\nUnfortunately, $q - 2$ painters are available in the paintings, so you must paint all sections such that the painted area is $r_i$ $(1 \\le r_i \\le n$)$.\n\n\n\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 4\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 4') == 2, 'incorrect answer'\nassert solution('5 3') == 3, 'incorrect answer'\nassert solution('5 7') == 7, 'incorrect answer'\nassert solution('5 6') == 6, 'incorrect answer'\nassert solution('5 7') == 7, 'incorrect answer'\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\nprint(\"The solution is correct.\")"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 3\n\nOutput:\n2\n'''\n\nimport sys\nimport math"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 1 10 20\") == 0\nassert solution(\"15 20 2\") == 0\nassert solution(\"00 7\") == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"3\")\nprint(\"Exception :\")\nprint(\"2\")\nprint(\"Output :\")\nprint(\"2\")\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"5\")\nprint(\"Exception :\")\nprint(\"3\")\nprint(\"Output :\")\nprint(\"3\")\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"1\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"0\")\n\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"8\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"0\")\n\nprint(\"Example 5:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"1\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"0\")\n\n\"\"\"\nInput\n3\n11 23\n\nOutput\n2\n\"\"\""
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5,11)==2\nassert solution(5,07)==1\nassert solution(5,23)==0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"9:32\\\"), 7\nassert solution(\\\"11:59\\\"), 4\nassert solution(\\\"22:45\\\"), 3\nassert solution(\\\"00:05\\\"), 0\nassert solution(\\\"01:14\\\"), 0\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2'\n\n-----Constraints-----\n0 < stdin.length <= 30\n\n0 < x \u2264 60\n0 < hh < 23\n0 < mm \u2264 59\n\n-----Time Limit-----\n1 minute\n\n-----Space Complexity-----\nO(1)\n\n\"\"\"\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 4\") == \"5\"\nassert solution(\"5 2 1 5\") == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"6 3 2 4\") == 5\nassert solution(\"5 2 1 5\") == 0\nassert solution(\"5 3 1 3\") == 1\nassert solution(\"5 3 1 6\") == 0\nassert solution(\"5 4 5\") == 1\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3 2 4\") == \"5\"\nassert solution(\"5 3 1 3\") == \"0\"\nassert solution(\"5 2 1 5\") == \"0\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"6\",\"3\",\"2\",\"4\",\"1\"]) == \"5\"\nassert solution([\"6\",\"3\",\"2\",\"4\",\"1\"]) == \"1\"\nassert solution([\"6\",\"3\",\"2\",\"4\",\"1\"]) == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3 2 4\",\"2 5\",\"5 5\",\"5 1\",\"3 4\",\"1 3\",\"1 3\",\"3 1\"]) == \"3\"\nassert solution([\"2 2\",\"2 2\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\"]) == \"2\"\nassert solution([\"1 1\",\"2 2\",\"2 3\",\"3 3\",\"3 4\",\"4 3\",\"1 1\"]) == \"0\""
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5 2 4\"\n) == \"5\"\nassert solution(\n    \"3 5 1 5\"\n) == \"0\"\nassert solution(\n    \"3 6 3 4\"\n) == \"0\"\nassert solution(\n    \"3 3 3\"\n) == \"0\"\nassert solution(\n    \"3 3 3 3\"\n) == \"0\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 5 4') == 5\nassert solution('1 5 4') == 0\nassert solution('2 3 1') == 0\nassert solution('2 2 1') == 1\nassert solution('1 2 2') == 1\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '1'\n\n\n-----Test-----\n\nIn the first test she says that Luba can only close a tab to the right of a tab to be closed.\n\nIn the second test she says that Luba can only close a tab to the left of a tab to be closed.\n\nIn the third test Luba doesn't need to do anything.\n\nIn the fourth test she says that Luba can close all the tabs to the right of a tab to be closed.\n\nIn the fifth test Luba doesn't need to do anything.\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 pos \u2264 n\n1 \u2264 l \u2264 r\n\ntime limit: 80 seconds\nmemory limit: 100MB\n\n\n------OUTPUT-----\n\n1"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(5)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 1, 1, 1) == 0, \"Example 1\"\nassert solution(2, 1, 1, 2) == 0, \"Example 2\"\nassert solution(3, 1, 1, 3) == 0, \"Example 3\"\nassert solution(5, 1, 1, 4) == 0, \"Example 4\"\nassert solution(5, 2, 1, 5) == 2, \"Example 5\"\n\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"0\" or solution(inp) == \"1\"\n\nInput\n3\n3 10\n6 3\n8 2\n1 4\n4 10\n4 1\n3 2\n2 6\n1 100\n2 15\n10 11\n14 100\n\nOutput\n2\n3\n3\n\n\n'''\n\nimport sys\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"10\"\n\"\"\"\n\nt = int(input())\nfor i in range(t):\n    n, x = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    for i in range(len(d)):\n        if d[i] > h[i]:\n            print(-1)\n            break\n    else:\n        print(sum(h)-x)"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == -1\nassert solution(0) == -1\nassert solution(1) == 2\nassert solution(1) == 2\nassert solution(2) == 3\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 2 10 3 4 10 3 4 10 3 4 10 3 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3 4 10 3"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 1 10 6 3 4 10 2\") == \"10\"\nassert solution(\"1 3 4 1 10 6 3 4 10\") == \"10\"\nassert solution(\"1 3 4 1 10 6 3 4 10 1\") == \"10\"\nassert solution(\"1 3 4 1 10 6 3 4 10 2 1\") == \"10\"\nassert solution(\"1 3 4 1 10 6 3 4 10 2 2\") == \"10\"\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\n\n\n\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= n <= 10^9\n1 <= x <= 10^9\n0 <= d_i <= 10^9\n0 <= h_i <= 10^9\n1 <= i <= n\n1 <= d_i <= 100\n\n0 <= min(d_i, x) <= 100\n\"\"\"\nimport math\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"8 1\") == \"5\"\n\n\n-----------------------------------------------------------------------------------\n'''\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"4\"\n\"\"\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == \"4\"\nassert solution(\"8 1\") == \"4\"\nassert solution(\"10 1\") == \"1\"\nassert solution(\"5\") == \"0\"\nassert solution(\"5 6\") == \"2\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\\\"\\\"\\\"\n7 4\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n\\\"\\\"\\\"\n), 7\n\nassert solution(\\\"\\\"\\\"\n2 2\n1 3\n3 4\n4 5\n5 6\n\\\"\\\"\\\"\n), 4\n\nassert solution(\\\"\\\"\\\"\n2 1\n3 3\n1 2\n2 4\n2 5\n3 4\n1 3\n1 4\n3 4\n1 2\n3 4\n3 5\n1 3\n3 4\n3 5\n\\\"\\\"\\\"\n), 3\n\nassert solution(\\\"\\\"\\\"\n2 2\n2 4\n3 3\n3 5\n3 4\n1 4\n1 5\n2 5\n3 4\n2 4\n2 4\n3 4\n2 4\n1 4\n3 4\n1 5\n3 4\n3 5\n1 3\n3 4\n2 4\n2 4\n1 3\n2 4\n3 4\n2 3\n\\\"\\\"\\\"\n), 1\n\nassert solution(\\\"\\\"\\\"\n3 1\n1 2\n2 3\n3 4\n2 4\n3 5\n1 3\n3 4\n3 5\n3 4\n3 5\n1 4\n3 4\n3 5\n1 4\n2 4\n2 4\n1 5\n3 4\n3 5\n1 3\n3 4\n1 4\n3 4\n3 5\n1 3\n3 4\n3 5\n1 4\n3 4\n1 5\n3 4\n1 3\n3 4\n1 4\n3 4\n1 5\n\\\"\\\"\\\"\n), 2"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '4'\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 4\n"
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 4, \"solution() failed\"\n\"\"\""
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 0, \"1 should be zero\"\nassert solution(2) == 1, \"2 should be 1\"\nassert solution(3) == 1, \"3 should be 1\"\nassert solution(4) == 2, \"4 should be 2\"\nassert solution(5) == 2, \"5 should be 2\"\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('[2m, 3p, 2s, 4m, 1s, 2s, 4s]') == '0'\nassert solution('[4s, 3m, 3p, 4s, 5p, 4s, 5p]') == '1'\nassert solution('[5p, 5s, 9m, 4p, 1s, 7p, 7m, 6p]') == '1'\nassert solution('[5p, 4p, 6p]') == '0'\nassert solution('[1m, 2m, 3m]') == '0'\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1s, \"1s 2s 3s\") == 0\nassert solution(9m, \"3s 9m\") == 1\nassert solution(3p, \"9m 9m\") == 1\nassert solution(3p, \"9s\") == 0\nassert solution(9s, \"9s 9m 9m\") == 1\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3p') == '1'\nassert solution('2p') == '1'\nassert solution('3s') == '0'\nassert solution('2s') == '0'\nassert solution('5s') == '0'\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 9\nassert solution(stdin) == 11\nassert solution(stdin) == 17\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"9m 9m 9m\") == \"0\"\nassert solution(\"3p 9m 2p\") == \"1\"\nassert solution(\"1p 9s 9s\") == \"3\"\nassert solution(\"3p 9p 3p 9p 9p 9p 9p\") == \"0\"\nassert solution(\"9s 9s 9s 9s 9s\") == \"1\"\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\nInput\n3p 9m 9m\n\nOutput\n2\n\n\n\n-----Note-----\n\nIn the first example, the number of extra suited tiles she can draw is 1, since the number of her tiles is $10$.\n\nIn the second example, the number of extra suited tiles she can draw is 2, since the number of her tiles is $20$.\n\nIn the third example, the number of extra suited tiles she can draw is 0, since the number of her tiles is $0$.\n\nHere are some examples:\n\nInput\n3s 2m 3s\n\nOutput\n1\n\nInput\n9m 2m 3s\n\nOutput\n1\n\nInput\n3p 9m 9m\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example, the number of extra suited tiles she can draw is 3, since the number of her tiles is $10$.\n\nIn the second example, the number of extra suited tiles she can draw is 2, since the number of her tiles is $20$.\n\nIn the third example, the number of extra suited tiles she can draw is 0, since the number of her tiles is $0$.\n\nHere are some examples:\n\nInput\n3p 9s 5s\n\nOutput\n0\n\nInput\n9m 1p 3s\n\nOutput\n0\n\nInput\n3s 2s 6s\n\nOutput\n0\n\nInput\n3p 9s 2s 5s\n\nOutput\n3\n\nInput\n9m 9p 9m\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example, the number of extra suited tiles she can draw is 3, since the number of her tiles is $10$.\n\nIn the second example, the number of extra suited tiles she can draw is 2, since the number of her tiles is $20$.\n\nIn the third example, the number of extra suited tiles she can draw is 0, since the number of her tiles is $0$.\n\nHere are some examples:\n\nInput\n3p 9s 9m\n\nOutput\n3\n\nInput\n9m 9p 9m\n\nOutput\n3\n\nInput\n3p 9s 2s 5s\n\nOutput\n3\n\nInput\n9m 9s 3s 6s\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, the number of extra suited tiles she can draw is 3, since the number of her tiles is $10$.\n\nIn the second example, the number of extra suited tiles she can draw is 2, since the number of her tiles is $20$.\n\nIn the third example, the number of extra suited tiles she can draw is 0, since the number of her tiles is $0$.\n\nHere are some examples:\n\nInput\n3p 9s 3m\n\nOutput\n3\n\nInput\n9m 9p 9m\n\nOutput\n0\n\nInput\n3s 9s 3m\n\nOutput\n0\n\nInput\n9m 9s 3m\n\nOutput\n3\n\nInput\n3p 9s 4m\n\nOutput\n0\n\nInput\n9m 9s 2p\n\nOutput\n0\n\nInput\n9s 9s 2p\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, the number of extra suited tiles she can draw is 3, since the number of her tiles is $10$.\n\nIn the second example, the number of extra suited tiles she can draw is 2, since the number of her tiles is $20$.\n\nIn the third example, the number of extra suited tiles she can draw is 0, since the number of her tiles is $0$.\n\nHere are some examples:\n\nInput\n3p 9s 3m\n\nOutput\n0\n\nInput\n9m 9p 9m\n\nOutput\n0\n\nInput\n3s 9s 3m\n\nOutput\n0\n\nInput\n9m 9s 3m\n\nOutput\n0\n\nInput\n3p 9s 4m\n\nOutput\n0\n\nInput\n9m 9s 2p\n\nOutput\n0\n\nInput\n9s 9s 2p\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, the number of extra suited tiles she can draw is 3, since the number of her tiles is $10$.\n\nIn the second example, the number of extra suited tiles she can draw is 2, since the number of her tiles is $20$.\n\nIn the third example, the number of extra suited tiles she can draw is 0, since the number of her tiles is $0$.\n\nHere are some examples:\n\nInput\n3p 9s 3m\n\nOutput\n1\n\nInput\n9m 9s 3m\n\nOutput\n1\n\nInput\n3p 9s 4m\n\nOutput\n1\n\nInput\n9m 9s 3m\n\nOutput\n1\n\nInput\n3p 9s 5m\n\nOutput\n1\n\nInput\n9m 9s 4m\n\nOutput\n1\n\nInput\n3p 9s 6m\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first example, the number of extra suited tiles she can draw is 3, since the number of her tiles is $10$.\n\nIn the second example, the number of extra suited tiles she can draw is 2, since the number of"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n'''\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"2 0 0\") == \"1\"\nassert solution(\"2 1 0\") == \"0\"\nassert solution(\"2 1 1\") == \"0\"\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"5\") == \"1\"\nassert solution(\"9\") == \"2\"\nassert solution(\"13\") == \"2\"\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == '2'\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n\nhttps://programmers.co.kr/learn/courses/30/lessons/12905\n\"\"\""
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == 4\nassert solution(\"2\") == 2\nassert solution(\"1\") == 0\nassert solution(\"0\") == 2\nassert solution(\"10000000\") == 0\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3) == 0\nassert solution(2) == 4\nassert solution(1) == 2\nassert solution(0) == 0\n\"\"\"\n\nimport datetime"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2\",\"4\"]) == \"0 2\"\nassert solution([\"1\",\"2\",\"4\",\"5\"]) == \"0 1 2 4 5\"\nassert solution([\"10\"]) == \"0 1 2\"\nassert solution([\"3\",\"2\",\"3\",\"2\",\"3\"]) == \"0 1 2 3 4 5\"\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"No solution\"\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(14) == 4\nassert solution(2) == 0\nassert solution(1000) == 12"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(14) == 4, \"Error\"\nassert solution(2) == 0, \"Error\"\n\n\"\"\""
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '0 2'\n\"\"\""
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == (4, 2)\n\nassert solution(stdin) == (0, 0)\n\nassert solution(stdin) == (\"1928\", 2)\n\nassert solution(stdin) == (\"1980\", 0)"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0 2\"\n\n\nInput\n2\n\nOutput\n0 2\n\nInput\n12\n\nOutput\n0 2\n\n\n-----Note-----\n\nIn the first sample there are 12 days in a year on Mars, and therefore independently of the day a year starts with there will be exactly 4 days off.\nIn the second sample there are only 2 days in a year on Mars, and they can both be either work days or days off.\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(12) == 3\nassert solution(245) == 1\nassert solution(1234) == 0\nassert solution(13245) == 1\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 31\n\nExplanation\nThe number of chocolates Joty can get is 31.\n\"\"\"\nclass Solution:\n    def painting_of_chocolates(self, n, a, b, p, q):\n        def find_divisible_by(n):\n            return sum([1 for i in range(n) if i%a==0 or i%b==0])\n        \n        # d[i] means sum of D[i] number of chocolates for the ith tile\n        # D[i] is the number of chocolates Joty can get\n        d = [0 for i in range(n+1)]\n        d[1] = 1\n        for i in range(2, n+1):\n            d[i] = (d[i-1]*q) + (d[i-2]*p)\n        return d[n]\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5 2 3 12 15) == 39\nassert solution(20 2 3 3 5) == 51\n\n>>> "
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 1 2 4 3 4 3 2 4 2 1') == \"9\"\nassert solution('5 2 3 12 15') == \"15\"\nassert solution('5 4 4 7') == \"15\"\n\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= a,b <= 10^9\n1 <= p,q <= 10^9\n\"\"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 2, 3, 12, 15) == 39\nassert solution(20, 2, 3, 3, 5) == 51\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '51'\n\"\"\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == \"2 3 5\"\nassert solution(\"1 1 1\") == \"1 3\"\nassert solution(\"1 1 2\") == \"0 4\"\nassert solution(\"1 1 3\") == \"0 2\"\nassert solution(\"3 3 1\") == \"0 1\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"3\", \"12\", \"15\", \"20\"]) == \"51\"\nassert solution([\"2\", \"3\", \"12\", \"15\", \"20\", \"6\"]) == \"86\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"39\"\nassert solution(input()) == \"51\"\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2 3 12 15\") == 39\nassert solution(\"20 2 3 3 5\") == 51\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"7\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str()\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'\n\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\""
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"7\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\""
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, [\"G\", \"S\", \"G\", \"S\", \"G\"]) == 7\nassert solution(10, [\"G\", \"G\", \"G\", \"G\", \"G\", \"G\"]) == 5\nassert solution(4, [\"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\"]) == 0\nassert solution(3, [\"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\"]) == 4\nassert solution(2, [\"G\", \"S\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\", \"G\"]) == 0\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(test_input) == answer\n\"\"\""
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '7'\n\"\"\""
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"GGG\") == 7\nassert solution(\"GGS\") == 4\nassert solution(\"GGG\") == 0\nassert solution(\"GGS\") == 0\nassert solution(\"GGS\") == 0\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\"\"\""
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n6 2\n5 3\n0\n0\n0\n2 2 1\n1 4\n1 5\n\nOutput\n5\n1 2 3 4 5 \n\"\"\""
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n\nOutput\n5\n1 2 3 4 5"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1, \"The input is not valid\"\n\n\"\"\"\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 9 5\"\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == \"6\"\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == \"5\"\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == \"1\"\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == \"1 2\"\n\n>>> def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin = \"\"\"\n5\n3\n1 2 3 4\n5 3 2 1\n\"\"\"\n    ), '1'\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"3 2 1 5 4 \n3 2 1 5 4 \n3 2 1 5 4 \"\"\") == \"3 2 1 5 4 \nassert solution(\"\"\"3 2 1 5 4 \n3 2 1 5 4 \n3 2 1 5 4 \n3 2 1 5 4 \"\"\") == \"3 2 1 5 4 \nassert solution(\"\"\"5 2\n3 1 4\n3 2 1\n3 1 4\"\"\") == -1\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3 2 1'\n\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 2 1'\nassert solution(stdin) == '3 2 1 5 4'\nassert solution(stdin) == '3 2 1 5 4'\nassert solution(stdin) == '-1'"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"3 2 1\"\nassert solution(\"5 1\") == \"1 3 2\"\nassert solution(\"1 2\") == \"1 3 2\"\nassert solution(\"2 2\") == \"2 3 2\"\nassert solution(\"1 4\") == \"4 3 2\"\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3 2 1 5 4\"\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"5 2 1\"\nassert solution(stdin) == \"5 3\"\nassert solution(stdin) == \"5 5\""
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"3 2 1\"\nassert solution(\"5 1\") == \"2 3 1\"\nassert solution(\"1 1\") == -1\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3 2 1 5 4'"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"No\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 -4 5') == 'NO'\nassert solution('0 60 50') == 'YES'\nassert solution('10 10 0') == 'YES'\nassert solution('0 60 50 -1') == 'NO'"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\", \"No\""
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2) == \"YES\", \"Value 2 should be 1, 2, 3, or NO.\"\nassert solution(3, -1) == \"NO\", \"Value 3 should be 0, 1, 2, or NO.\"\nassert solution(1, 7) == \"NO\", \"Value 7 should be 0, or 1, or NO.\"\nassert solution(1, 0) == \"YES\", \"Value 1 should be 1, or NO.\"\nassert solution(1, 10**9) == \"YES\", \"Value 10**9 should be 1, or NO.\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(in_) == \"YES\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\n\n0 <= a, b <= 10^9\n\n0 <= c <= 10^9\n\n\n-----Time complexity-----\n\nIn average, O(n) in n steps.\n\nIn worst case, the sequence of length n is quite long, with n lines of code.\n\nIn average, O(n) in n steps.\n\nO(n) in worst case.\n\nO(1) in average.\n\nO(n) in average.\n\nExample\n\nThe input consists of four lines:\n\nInput\n\n10 10 0\n\nOutput\n\nNO\n\nInput\n\n0 60 50\n\nOutput\n\nYES\n\n\n-----Notes-----\n\nThe sequence starts from the first element of the sequence, and with all the elements greater than Vasya's favorite number, Vasya's favorite number, and the difference between any two neighbouring elements of the sequence, respectively.\n\"\"\"\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 5 1') == 'YES'\nassert solution('5 3 3 2') == 'NO'"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"(()\", \"()\"]) == \"(()())\"\nassert solution([\"(\")\nassert solution([\"(()()\"]) == \"()()\"\nassert solution([\"((()\", \"()()()\"]) == \"(()()())\"\nassert solution([\"((()()()()]))((()()())()(()()(()()()()(()()(()()()()()()(()()()()(()()()()(()()()()(()()()()()()()(()()())()()(()()()()()()(()()())()()()(()()()())()(()()()()()())()(()()()()()()())()()()()()()()()()()()()()(()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"(((()((()((()((((((()()(()()())))))))))))((()(())())()))((()((()()((()((()(()()()()))))))((()(())())()))((()(())())()))((()((()((()((()((()()(()()()))))))))))((()(()()((()()())))))((()(()())(()())(()()())(()()()))(())()()()(())()()()))((()(()())(()())(()())(()())(()()))(())()()()()(())()()))((()()((()()(()())(()()())))))((()())(())(())(())(()())(()())(()())(()())(()())(()())()))((()()((()())(()())(()())(()())(()()))((()()((()())(()())(()())(()())(()()))((()())(())(()())(()())(()()))((()()(())(()())(()())(()()))((()())(())(())(())(())(())(()))((()())(())(())(())(())(())(())(())(()))((()())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())(())("
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"(()()(())\") == \"1\"\nassert solution(\"()()((()()(())\") == \"0\"\nassert solution(\"(((()()()()()()))(())\") == \"1\"\nassert solution(\"()((())()(()())\") == \"1\"\nassert solution(\"()((()())()(())()()()()(()())()()(()()()()()(()()()()()())()\") == \"1\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"((())()(()(()()()())))\"\nassert solution(4) == \"1\"\nassert solution(3) == \"0\"\nassert solution(2) == \"0\"\nassert solution(1) == \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(3) == \"1\"\nassert solution(4) == \"1\"\nassert solution(0) == \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('(()()()())' == '1') == 1\nassert solution('(())()(') == '1'\nassert solution('()()(') == '1'\nassert solution('((()()()()()(()()' == '1') == 1\nassert solution(')))(') == '1'\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 1\nassert solution(0) == 0\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\n\n----O(N^2)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nfor i in [\"(()()()())()\"]\n\nReturn 0 if it is possible to form a valid bracket sequence.\n\nFor example, \"()()()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"()(())()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\n\n----O(N)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nfor i in [\"((()\"))()()()\", \"((()))()()\", \"(())()()\", \"(())()()\"]\n\nReturn 0 if it is possible to form a valid bracket sequence.\n\nFor example, \"()()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\n\n----O(N^2)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nfor i in [\"((())())()()\", \"((())())()\", \"(())()()\", \"(())()()\"]\n\nReturn 0 if it is possible to form a valid bracket sequence.\n\nFor example, \"()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----O(N)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nFor example, \"()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----O(N^2)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nFor example, \"()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"()()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----O(N)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nFor example, \"((()))()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"((()))()()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----O(N)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nFor example, \"((())())()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"((()))()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\n\n----O(N^2)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nFor example, \"((())())()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"((())())()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\n\n----O(N)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nFor example, \"((())())()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\nFor example, \"((())())()\", we can obtain a valid bracket sequence by choosing the order of the string.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the correct order of the given strings.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the order of the string.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the order of the string.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the order of the string.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the order of the string.\n\n----More Explanation----\n\nFor example, 2 is a valid bracket sequence.\nFor the length of 3, it is possible to obtain a valid bracket sequence by choosing the order of the string.\nFor the length of 4, it is not possible to obtain a valid bracket sequence by choosing the order of the string.\n\n----O(N)----\n\nGiven a string, find a valid bracket sequence in the string.\n\nFor example, \"((())())()\", we can obtain a valid bracket sequence"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"((()\")) == \"0\"\nassert solution(\"(())\") == \"1\"\nassert solution(\"((1))\") == \"0\"\nassert solution(\"())\") == \"1\"\nassert solution(\"(()(\") == \"0\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"> 0 1) 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"> 1 2) 3 4 5\") == \"1 2 3 5\"\nassert solution(\"> 1 2 3\") == \"1 2 3\"\nassert solution(\"> 1 2 3 4\") == \"1 2 3 4\"\nassert solution(\"> 1 2 3 4 5\") == \"1 2 3 4 5\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == \"(()())()\"\nassert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 0\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\""
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 5 3\") == 3\nassert solution(\"10 5 7\") == 5\nassert solution(\"10 5 12\") == 5\nassert solution(\"10 5 13\") == 4\nassert solution(\"10 5 14\") == 3\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nprint('Example 1:')\nprint('Input :'+ ''.join(['10'] * 20))\nprint('Exception :'+ ''.join(['10'] * 20))\nprint('Output :'+ ''.join(['3'] * 20))\nprint('Expected:'+ ''.join(['3'] * 20))\nprint('Actual: ', end='')\nprint('3', end='')\nprint(solution(stdin))\n\nprint('Example 2:')\nprint('Input :'+ ''.join(['10'] * 21))\nprint('Exception :'+ ''.join(['10'] * 21))\nprint('Output :'+ ''.join(['3'] * 21))\nprint('Expected:'+ ''.join(['3'] * 21))\nprint('Actual: ', end='')\nprint('3', end='')\nprint(solution(stdin))\n\nprint('Example 3:')\nprint('Input :'+ ''.join(['10'] * 30))\nprint('Exception :'+ ''.join(['10'] * 30))\nprint('Output :'+ ''.join(['3'] * 30))\nprint('Expected:'+ ''.join(['3'] * 30))\nprint('Actual: ', end='')\nprint('3', end='')\nprint(solution(stdin))\n\nprint('Example 4:')\nprint('Input :'+ ''.join(['10'] * 50))\nprint('Exception :'+ ''.join(['10'] * 50))\nprint('Output :'+ ''.join(['3'] * 50))\nprint('Expected:'+ ''.join(['3'] * 50))\nprint('Actual: ', end='')\nprint('3', end='')\nprint(solution(stdin))\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('10 5 3') == 3\nassert solution('10 5 7') == 5\nassert solution('10 5 12') == 3\nassert solution('10 5 12') == 5\nassert solution('10 5 12') == 5\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n'''"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\nassert solution(\"10 5 12\") == \"4\"\nassert solution(\"10 5 12\") == \"4\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 12\") == \"3\"\nassert solution(\"1 12 5\") == \"3\"\nassert solution(\"1 12 5 7\") == \"3\"\nassert solution(\"1 12 12\") == \"2\"\nassert solution(\"1 12 12 8\") == \"2\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"5\"\nassert solution(\"10 5 13\") == \"5\"\nassert solution(\"10 5 14\") == \"5\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 5 3\") == \"3\"\nassert solution(\"1 5 7\") == \"5\"\nassert solution(\"1 5 12\") == \"4\"\nassert solution(\"1 5 13\") == \"5\"\nassert solution(\"1 5 14\") == \"5\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == u\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"abcdefghijklmnopqrstuvwxyz\"\n\nassert solution(input(\"Input a string: \")) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\nassert solution(input(\"Input a string: \")) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(input(\"Input a string: \")) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(input(\"Input a string: \")) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"abc\"\nassert solution(input()) == \"abcdef\"\nassert solution(input()) == \"abcabcabcdef\"\nassert solution(input()) == \"abcabcabcdefghij\"\nassert solution(input()) == \"abcabcabcdefghijkl\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == u\n\n\n\n>>> solution(\"hello\")\n'h'\n>>> solution(\"abcdefghi\")\n'h'\n>>> solution(\"abcdefghi\")\n'h'\n>>> solution(\"abcdefghi\")\n'h'\n>>> solution(\"abcdefghi\")\n'h'\n>>> solution(\"abcdefghi\")\n'h'\n>>> solution(\"a\")\n'a'\n>>> solution(\"a\")\n'a'\n>>> solution(\"abcdefghi\")\n'a'\n>>> solution(\"abcdefghi\")\n'a'\n>>> solution(\"a\")\n'a'\n>>> solution(\"abcdefghi\")\n'a'\n>>> solution(\"cdefghi\")\n'cdefghi'\n>>> solution(\"abcdefghi\")\n'abcdefghi'\n>>> solution(\"a\")\n'a'\n>>> solution(\"a\")\n'a'\n>>> solution(\"abcdefghi\")\n'abcdefghi'\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abc\") == \"abc\"\nassert solution(\"abcdb\") == \"bcd\"\nassert solution(\"abcdd\") == \"abc\"\nassert solution(\"abcdef\") == \"bdf\"\nassert solution(\"ab\") == \"ab\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(cab) == \"b\"\nassert solution(acdb) == \"d\"\nassert solution(abdc) == \"c\"\n\nSolution\n\n-----Discussion-----\n\nGiven:\nS = 'abcdef'\nT = 'bdbdc'\n\nWe want to extract the first and last character of the first string and the last character of the last string.\nSo, we start with index 0 and in the first string we have the first character and then the last character, we get the index of the last character of the last string.\n\nWe want to append the first and last characters of the last string to the first and last characters of the first string.\nIn other words, we can add the first character of the last string with the first character of the first string and append the last character of the last string with the last character of the last string.\n\nHere, we are setting a starting index of 1.\nWe want to get the last character of the last string and then add it to the first character of the first string.\nSo, we start at index 3 and go backwards to 3 and add the last character of the last string with the last character of the last string and append the first character of the last string with the first character of the last string.\n\nWe want to get the first character of the first string and then append the last character of the last string with the last character of the last string and append the first character of the first string with the first character of the last string.\n\nExample\nInput\ncab\n\nOutput\nabc\n\nInput\naebd\n\nOutput\naeab\n\nInput\nadba\n\nOutput\nabca\n\nInput\naaa\n\nOutput\naab\n\nExample\nInput\nabcd\n\nOutput\nabc\n\nInput\naacb\n\nOutput\nabca\n\nInput\naab\n\nOutput\naacb\n\nInput\nacde\n\nOutput\nadec\n\nInput\nabcd\n\nOutput\nadca\n\n------Constraints-----\n\n1 <= s.length <= 10^5\n1 <= t.length <= 10^5\n\n------S and T are non-empty string, each string contains lowercase English letters.\"\"\""
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abcd\"\nassert solution(stdin) == \"abcdefghijklmnoopqrstu\"\nassert solution(stdin) == \"abcdefghijklmnoopqrstuvwxyz\"\nassert solution(stdin) == \"abcdefghijklmnoopqrstuvwxyz\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"db\"\n\nTest Execution\n>>> import doctest\n>>> doctest.testmod()\n\n>>> import baseball_game as bg\n>>>\n>>> bg.solution(\"cccc\")\n'cbd'\n>>> bg.solution(\"abcd\")\n'ab'\n>>> bg.solution(\"zzz\")\n'z'\n>>> bg.solution(\"1111\")\n'a'\n>>> bg.solution(\"11111\")\n'b'\n>>> bg.solution(\"1101100\")\n'f'\n>>> bg.solution(\"11010100011\")\n'b'\n>>> bg.solution(\"110001100011100011\")\n'c'\n>>> bg.solution(\"0010011011000110001011100011\")\n'c'\n>>> bg.solution(\"000\")\n'z'\n>>> bg.solution(\"\")\n'z'\n>>> bg.solution(\"1\")\n'z'\n>>> bg.solution(\"0000\")\n'z'\n>>> bg.solution(\"0001000001\")\n'z'\n>>> bg.solution(\"0001000101\")\n'z'\n>>> bg.solution
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('dabcd') == 'abc', 'Expected solution'\nassert solution('abcd') == 'abc', 'Expected solution'\nassert solution('abc') == 'abc', 'Expected solution'\nassert solution('abcde') == 'abcde', 'Expected solution'\nassert solution('a') == 'a', 'Expected solution'\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('acdb') == 'abdb'\nassert solution('abc') == 'ab'\nassert solution('abcde') == 'abc'\nassert solution('ab') == 'b'\nassert solution('abcd') == 'a'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(6, 3, 0) == 'YES', 'Failing'\nassert solution(6, 3, 1) == 'NO', 'Failing'\nassert solution(6, 3, 2) == 'NO', 'Failing'\nassert solution(6, 3, 3) == 'YES', 'Failing'\nassert solution(6, 3, 4) == 'NO', 'Failing'\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n-----The Output-----\n\nOutput contains two lines:\n\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"0 0\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"1 0\") == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(test) == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"5 4\") == \"NO\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"4 0\") == \"NO\"\nassert solution(\"4 5\") == \"YES\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n'''\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\nOutput\nNO\nYES\nNO\nYES\nNO\nNO\nNO\n\n\"\"\"\n\nimport sys\n\nstdin = sys.stdin.readline"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"13:31\") == \"0\"\nassert solution(\"05:50\") == \"11\"\nassert solution(\"23:59\") == \"1\"\nassert solution(\"01:00\") == \"0\"\nassert solution(\"11:00\") == \"0\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 11\nassert solution(stdin) == 11\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input(\"Enter a time in 24 hour format (hh:mm)\")) == \"11\"\nassert solution(input(\"Enter a time in 24 hour format (hh:mm)\")) == \"11\"\nassert solution(input(\"Enter a time in 24 hour format (hh:mm)\")) == \"11\"\nassert solution(input(\"Enter a time in 24 hour format (hh:mm)\")) == \"0\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11\n\n\nassert solution(stdin) == 1\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"13:31\") == 11, \"Test 1 failed\"\nassert solution(\"23:59\") == 1, \"Test 2 failed\"\nassert solution(\"0\") == 0, \"Test 3 failed\"\nassert solution(\"05:00\") == 0, \"Test 4 failed\"\nassert solution(\"15:10\") == 0, \"Test 5 failed\"\n"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 11\nassert solution(3) == 1\nassert solution(0) == 0"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '11'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '11'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"11\""
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 11\nassert solution(1) == 11\nassert solution(2) == 0\nassert solution(3) == 1\nassert solution(4) == 0\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 4, 5, 4, 1, 2, 1) == 3\nassert solution(6, 5, 6, 4, 1, 2, 1) == 6\nassert solution(6, 5, 6, 4, 1, 2, 2) == 5\nassert solution(7, 5, 6, 4, 1, 2, 1) == 6\nassert solution(7, 5, 6, 4, 2, 1, 1) == 3\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin\n    ) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"5\"\nassert solution(input) == \"6\"\nassert solution(input) == \"5\"\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2) == 1\nassert solution(6, 5) == 5\nassert solution(7, 4) == 3\nassert solution(7, 6) == 6\nassert solution(6, 7) == 7\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"TAK\"\nassert solution(stdin) == \"NIE\"\nassert solution(stdin) == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"aabbaa\") == \"TAK\"\nassert solution(\"aabaa\") == \"NIE\"\nassert solution(\"hello\") == \"NIE\"\nassert solution(\"aeehlo\") == \"TAK\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"bod\") == \"niet\"\nassert solution(\"er\") == \"tak\""
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(s) == \"TAK\"\nassert solution(s) == \"NIE\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\"\nassert solution(\"bod\") == \"TAK\"\nassert solution(\"ER\") == \"NIE\""
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"TAK\", \"String is not a palindrome\"\n\"\"\""
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"oXoxoXo\") == \"TAK\", \"oXoxoXo should be \"\nassert solution(\"bod\") == \"NIE\", \"bod should not be \"\nassert solution(\"ER\") == \"NIE\", \"ER should not be \"\nassert solution(\"s-palindrome\") == \"TAK\", \"s-palindrome should be \"\nassert solution(\"aab\") == \"TAK\", \"aab should not be \"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"hE\") == \"hE\"\nassert solution(\"Yy\") == \"Yy\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"ABCD\") == \"ABCD\"\nassert solution(\"\") == \"NIE\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 1000\n\n1 <= s.length <= 100\ns consists only of English letters.\n\"\"\""
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('a') == 'a-palindrome'\nassert solution('aba') == 'ab-palindrome'\nassert solution('ab') == 'ab-palindrome'\nassert solution('mooo') =='m-o-o-o'"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"TAK\", \"The string is not's-palindrome'\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"123\"\nassert solution(\"222\") == \"223\"\nassert solution(\"3921\") == \"3921\"\nassert solution(\"10000\") == \"10000\"\nassert solution(\"5000\") == \"5000\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"123\") == \"213\"\nassert solution(\n    \"123\") == \"123\"\nassert solution(\n    \"123\") == \"213\"\nassert solution(\n    \"123\") == \"234\"\nassert solution(\n    \"123\") == \"234\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"123\") == \"1123\"\nassert solution(\"123\") == \"1123\"\nassert solution(\"123\") == \"1123\"\nassert solution(\"123\") == \"1123\"\nassert solution(\"123\") == \"1123\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('123'), '123'\nassert solution('222'), '222'\nassert solution('10000'), '10000'\nassert solution('9900'), '9900'\nassert solution('24000'), '24000'\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '123456789'\nassert solution(stdin) == '123456789'\nassert solution(stdin) == '123456789'\nassert solution(stdin) == '123456789'\nassert solution(stdin) == '123456789'\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"213\"\nassert solution(\"99\") == \"9321\"\nassert solution(\"4321\") == \"4321\"\nassert solution(\"10000\") == \"10000\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '213'\nassert solution(input()) == '9321'"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"9321\"\nassert solution(stdin) == \"9321\"\nassert solution(stdin) == \"9321\"\nassert solution(stdin) == \"9321\"\nassert solution(stdin) == \"9321\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '9321'\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('XX.XOXX...') == 'YES'\nassert solution('XXOO...OOO') == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"XX.XX...\") == \"YES\"\nassert solution(\"XXOXX\") == \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(X.XX.....\n..OOOO.\n..........\n..........\n..........\n..........\n..........\n..........\n..........\n..OOOO.\n)\npass"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == 'NO'\nassert solution(\"XXOXX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == 'YES'\nassert solution(\"XX.XX......\\nOOO..OO...\\n............\\n...........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == 'NO'\nassert solution(\"XXOXX....\\nOOO..OO...\\n............\\n...........\\n..........\\n..........\\n..........\\n..........\\n..........\") == 'YES'\nassert solution(\"XOOOOO...\\nOOOOO...O\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == 'NO'\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"XXXXX.XX\") == \"YES\", \"x X.X\"\nassert solution(\"XOOOX\") == \"NO\", \"XOOOO\"\nassert solution(\"XXXO.XXXXX\") == \"YES\", \"XOOOXX\"\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"XX.XX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"YES\"\nassert solution(\"XX.XX.....\\nOO.O......\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\\n..........\") == \"NO\"\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('XX.XX.....') == 'YES'\nassert solution('.....OOOO.') == 'NO'"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('XX.XX...') == 'YES'\nassert solution('X...X...X...X...X...X...X...X...X...X...X...') == 'NO'\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2, 1) == 1\nassert solution(3, 2) == 1\nassert solution(5, 2) == 1\nassert solution(5, 3) == -1\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(in_out(\"2 1\")) == \"-1\"\nassert solution(in_out(\"3 2\")) == \"0 0 0\"\nassert solution(in_out(\"3 5\")) == \"1 0 0\"\nassert solution(in_out(\"4 4\")) == \"1 0 0\"\nassert solution(in_out(\"4 4\")) == \"1 0 0\"\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"1 0\"\nassert solution(\"3 2\") == \"1 0 1\"\nassert solution(\"2 5\") == \"1 0 0\"\nassert solution(\"4 3\") == \"1 0 0 0\"\nassert solution(\"4 2\") == \"1 0 0 0\"\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 7') == '2 0 0 0 0 0 0 0 0 0'\nassert solution('3 7') == '1 0 0 0 0 0 0 0 0 0'\nassert solution('2 3') == '-1'\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(sys.stdin.readline().strip()) == '1'\nassert solution(sys.stdin.readline().strip()) == -1\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 5) == 1\nassert solution(2, 5) == 0\nassert solution(3, 5) == -1\nassert solution(1, 0) == -1\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"1 0\"\nassert solution(\"3 2\") == \"1 0 0\"\nassert solution(\"4 3\") == \"1 0 0\"\nassert solution(\"2 4\") == \"1 0 0\"\nassert solution(\"1 4\") == \"1 0 0\"\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0 0 0 0 1\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"z^y^x\"\nassert solution(\"2.0 2.0 2.0\") == \"(x^y)^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\""
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1.1 3.4 2.5') == 'z^y^x'\nassert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'z^y^x'\nassert solution(input()) == 'x^y^z'\nassert solution(input()) == '(x^y)^z'\nassert solution(input()) == '((x^y)^z)'\nassert solution(input()) == '(x^y)^z'\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2.0 2.0 2.0\") == \"z^y^x\"\nassert solution(\"2.0 1.9 1.8 1.7\") == \"(x^y)^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\nassert solution(\"2.9 1.1 1.5\") == \"(x^y)^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1.1 3.4 2.5\") == \"(x^y^z)^z\"\nassert solution(\"2.0 2.0 2.0\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"(x^y)^z\"\nassert solution(\"\") == \"x^y^z\"\nassert solution(\"1.9 1.8 1.7\") == \"x^y^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"z^y^x\"\n\nassert solution(inp) == \"x^y^z\"\nassert solution(inp) == \"(x^y)^z\"\nassert solution(inp) == \"z^y^x\"\nassert solution(inp) == \"(x^y)^z\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'z^y^x'\n\nInput\n1.1 1.1 1.1\n\nOutput\n1^1^1^1^1^1\n\nInput\n2.0 1.1 1.0\n\nOutput\n1^1^1^1^1^1^1\n\nInput\n1.3 1.0 1.0\n\nOutput\n(x^y)^z\n\nExplanation\nrat's goal is to find 1 as a multiplier of the product of all possible numbers, and only 1 needs to be multiplied by it. \n\"\"\""
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"z^y^x\"\nassert solution(input()) == \"(x^y)^z\"\nassert solution(input()) == \"(z^y)^x\"\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'z^y^x'\n"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1.1 3.4 2.5') == 'z^y^x'\nassert solution('2.0 2.0 2.0') == 'x^y^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\nassert solution('1.9 1.8 1.7') == '(x^y)^z'\nassert solution('2.0 2.0 2.0') == '(x^y)^z'\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"aabaca\") == 5, \"expected 5, got \" + str(5)\nassert solution(\n    \"abcdefgh\") == 7, \"expected 7, got \" + str(7)\nassert solution(\n    \"abcabcabcabcabc\") == 6, \"expected 6, got \" + str(6)\nassert solution(\n    \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(7, \"abcaabca\") == 5\nassert solution(7, \"abcdefgh\") == 5\nassert solution(8, \"abcdefgh\") == 5"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin: str,\n    n: int\n) == 5\n\nassert solution(\n    stdin: str,\n    n: int\n) == 1\n\nassert solution(\n    stdin: str,\n    n: int\n) == 0\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 7\n\n\n-----Reference from https://github.com/Yuan-Pan/Coding_Interview_Questions_Easy/blob/master/A*%20Bracket%20Exercise/T_%20String.py \n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 6\nassert solution(stdin) == 7\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('abcabcabc') == 1\nassert solution('aaca') == 1\nassert solution('abcabcabc') == 2\nassert solution('abcabcabc') == 3\nassert solution('aaaaaaaaa') == 1\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"move 5 1\"\n\n\n-------------------SOLUTION------------------------------\nInput:\n5\n01 0\n2 1\n2extra 0\n3 1\n99 0\n\nOutput:\n4\nmove 3 1\nmove 01 5\nmove 2extra 4\nmove 99 3\n\nInput:\n2\n1 0\n11 1\n111 0\n1111 1\n11111 0\n\nOutput:\n3\nmove 1 3\nmove 11 1\nmove 1111 2\nmove 111 4\nmove 11111 3\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 0\") == \"move 1 0\"\nassert solution(\n    \"2 1\") == \"move 2 1\"\nassert solution(\n    \"2 1\") == \"move 2 1\"\nassert solution(\n    \"2 1\") == \"move 2 1\"\nassert solution(\n    \"2 1\") == \"move 2 1\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"move 1 3\"\nassert solution(stdin) == \"move 1 5\"\nassert solution(stdin) == \"move 2 1\"\nassert solution(stdin) == \"move 2 extra 0\"\nassert solution(stdin) == \"move 99 3\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"move 11 1\"\nassert solution(input()) == \"move 11 1\"\nassert solution(input()) == \"move 11 1\"\nassert solution(input()) == \"move 11 1\"\nassert solution(input()) == \"move 11 1\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"move 3 1\"\nassert solution(\"2\") == \"move 01 5\"\nassert solution(\"2\") == \"move 2 1\"\nassert solution(\"5\") == \"move 3 1\"\nassert solution(\"2\") == \"move 01 5\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"01 0 1 2\") == \"move 3 1\"\nassert solution(\"01 0 1 2 extra 0\") == \"move 3 1\"\nassert solution(\"01 0 1 2 extra 1\") == \"move 2 extra 4\"\nassert solution(\"01 0 1 2 extra 2\") == \"move 2 extra 4\"\nassert solution(\"01 0 1 2 extra 3\") == \"move 2 extra 4\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == \"move 1 1\"\nassert solution(4) == \"move 01 4\"\nassert solution(5) == \"move 2 extra 4\"\nassert solution(2) == \"move 99 3\"\nassert solution(5) == \"move 1 5\"\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) =='move 3 1'\nassert solution(stdin) =='move 1 2'\nassert solution(stdin) =='move 2 1'\nassert solution(stdin) =='move 1 1'\nassert solution(stdin) =='move 1 0'\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(123456) == 2\nassert solution(111000) == 1\nassert solution(1234567) == 1\nassert solution(123456567) == 2"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(Luba) == 0\nassert solution(\"100\") == 2\nassert solution(\"1100101010\") == 1\nassert solution(\"1111111111\") == 2\nassert solution(\"10010001011\") == 3\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"0\""
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(123456) == 0\nassert solution(111000) == 2\nassert solution(12344) == 1\nassert solution(\"3123456\") == 2\nassert solution(\"123456\") == 2\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"00\", \"01\", \"02\", \"03\", \"04\", \"05\"]) == \"0\"\nassert solution([\"11\", \"1000\"]) == \"1\"\nassert solution([\"12\", \"1101\", \"1101\", \"1111\", \"1111\", \"1111\"]) == \"2\"\nassert solution([\"0\"]) == \"2\"\nassert solution([\"0\"]) == \"0\"\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('123456') == '0'\nassert solution('123111000') == '2'\nassert solution('111000') == '1'\nassert solution('1234') == '2'\nassert solution('123456') == '3'\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 3\") == 3\nassert solution(\"5 2\") == 2\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3\"\n\n\n-----Constraints-----\n0 <= m, x <= 10^14\n\nTime Limit: 1 seconds\n\n===== Solutions ======\n\nclass Solution:\n    def numTrap(self, m: int, x: int) -> int:\n        return (x * m) % (m ** 2)\n        pass\n\nassert solution(input) == \"3\"\n\n\n-----Brute-force O(m * n) solution-----\n\nclass Solution:\n    def numTrap(self, m: int, x: int) -> int:\n        n = m ** 2\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(1, n):\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1] * x) % m\n        return dp[m - 1][n - 1]\n\n\nassert solution(input) == 3\n\"\"\"\nclass Solution:\n    def numTrap(self, m: int, x: int) -> int:\n        n = m ** 2\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(1, n):\n                dp[i][j] = (dp[i - 1][j] + dp[i][j - 1] + dp[i - 1][j - 1] * x) % m\n        return dp[m - 1][n - 1]\n\n\nassert solution(input) == 3\n\"\"\"\n\nclass Solution:\n    def numTrap(self, m: int, x: int) -> int:\n        return (x * m) % m\n        pass\n\nassert solution(input) == 3\n\n\n-----Binary-search-----\n\nclass Solution:\n    def numTrap(self, m: int, x: int) -> int:\n        pass"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 2) == 2\nassert solution(2, 1) == 2\nassert solution(1, 2) == 2\nassert solution(3, 2) == 1\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 2) == 3\nassert solution(5, 3) == 2\nassert solution(5, 1) == 3"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\n\n\nExample:\n\nInput:\n4 3\n5 2\n\nOutput:\n3\n\nInput:\n5 2\n5 1\n5 2\n5 1\n5 2\n5 1\n5 2\n5 1\n\nExample:\n\nInput:\n7 6\n7 3\n7 4\n7 4\n7 5\n7 4\n7 2\n7 1\n\nOutput:\n7\n\n\nExplanation:\n\n7 3\n7 3\n7 4\n7 3\n7 3\n7 3\n7 3\n7 3\n7 3\n\nInput:\n7 6\n7 3\n7 4\n7 3\n7 3\n7 1\n7 2\n7 2\n7 1\n7 2\n7 1\n\nOutput:\n7\n\nInput:\n1 2\n1 4\n1 5\n1 3\n1 2\n1 2\n1 3\n1 2\n1 2\n1 2\n1 3\n1 2\n1 3\n1 2\n\nInput:\n1 4\n1 3\n1 2\n1 2\n1 3\n1 2\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"5 2\") == \"2\"\n\nassert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2,5) == 3"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 2\") == \"3\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"5 2\") == \"1\"\nassert solution(\"6 1\") == \"1\"\nassert solution(\"6 1\") == \"1\"\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Examples-----\n\nInput\n2 4\n\nOutput\n2\n\n\n\n-----Notes-----\n\nThe time limit for this problem is $O(MN^2)$. You will need to work through the room layout in O(MN) time. \n\nInput\n2 4\n\nOutput\n1\n\n\n\n-----Constraints-----\n\n0 < m < 200\n0 < x < 10^5\n\n\n-----Example 1: Input-----------------------------\n\nInput for m = 4 and x = 2:\n4\n2\n\nOutput for m = 4 and x = 2:\n1\n\n\n-----Example 2: Input-----------------------------\n\nInput for m = 4 and x = 1:\n4\n1\n\nOutput for m = 4 and x = 1:\n2\n\n\n-----Example 3: Input-----------------------------\n\nInput for m = 4 and x = 3:\n4\n1\n\nOutput for m = 4 and x = 4:\n1\n\n\n-----Example 4: Input-----------------------------\n\nInput for m = 4 and x = 5:\n4\n5\n\nOutput for m = 4 and x = 5:\n2\n\n\n-----Example 5: Input-----------------------------\n\nInput for m = 4 and x = 6:\n4\n6\n\nOutput for m = 4 and x = 6:\n1\n\n\n-----Example 6: Input-----------------------------\n\nInput for m = 5 and x = 2:\n5\n2\n\nOutput for m = 5 and x = 2:\n1\n\n\n-----Example 7: Input-----------------------------\n\nInput for m = 5 and x = 4:\n5\n4\n\nOutput for m = 5 and x = 4:\n2\n\n\n-----Example 8: Input-----------------------------\n\nInput for m = 5 and x = 7:\n5\n7\n\nOutput for m = 5 and x = 7:\n1\n\n\n-----Example 9: Input-----------------------------\n\nInput for m = 5 and x = 8:\n5\n8\n\nOutput for m = 5 and x = 8:\n2\n\n\n-----Example 10: Input-----------------------------\n\nInput for m = 5 and x = 9:\n5\n9\n\nOutput for m = 5 and x = 9:\n2\n\n\n-----Example 11: Input-----------------------------\n\nInput for m = 5 and x = 10:\n5\n10\n\nOutput for m = 5 and x = 10:\n1\n\n\n-----Example 12: Input-----------------------------\n\nInput for m = 5 and x = 11:\n5\n11\n\nOutput for m = 5 and x = 11:\n2\n\n\n-----Example 13: Input-----------------------------\n\nInput for m = 5 and x = 12:\n5\n12\n\nOutput for m = 5 and x = 12:\n1\n\n\n-----Example 14: Input-----------------------------\n\nInput for m = 5 and x = 13:\n5\n13\n\nOutput for m = 5 and x = 13:\n2\n\n\n-----Example 15: Input-----------------------------\n\nInput for m = 5 and x = 14:\n5\n14\n\nOutput for m = 5 and x = 14:\n1\n\n-----Note-----\n\nThe minimum possible number of traps will be $1$, if you want to install the $x$-mouse in any room it will be caught. \n\n-----Constraints-----\n\n0 < m < 200\n0 < x < 10^5\n\n\n-----Example 1: Input-----------------------------\n\nInput for m = 4 and x = 2:\n4\n2\n\nOutput for m = 4 and x = 2:\n1\n\n-----Example 2: Input-----------------------------\n\nInput for m = 4 and x = 1:\n4\n1\n\nOutput for m = 4 and x = 1:\n2\n\n\n-----Example 3: Input-----------------------------\n\nInput for m = 4 and x = 3:\n4\n3\n\nOutput for m = 4 and x = 3:\n2\n\n\n-----Example 4: Input-----------------------------\n\nInput for m = 4 and x = 5:\n4\n5\n\nOutput for m = 4 and x = 5:\n2\n\n\n-----Example 5: Input-----------------------------\n\nInput for m = 4 and x = 6:\n4\n6\n\nOutput for m = 4 and x = 6:\n2\n\n\n-----Example 6: Input-----------------------------\n\nInput for m = 5 and x = 2:\n5\n2\n\nOutput for m = 5 and x = 2:\n1\n\n\n-----Example 7: Input-----------------------------\n\nInput for m = 5 and x = 4:\n5\n4\n\nOutput for m = 5 and x = 4:\n2\n\n\n-----Example 8: Input-----------------------------\n\nInput for m = 5 and x = 7:\n5\n7\n\nOutput for m = 5 and x = 7:\n2\n\n\n-----Example 9: Input-----------------------------\n\nInput for m = 5 and x = 8:\n5\n8\n\nOutput for m = 5 and x = 8:\n2\n\n\n-----Example 10: Input-----------------------------\n\nInput for m = 5 and x = 9:\n5\n9\n\nOutput for m = 5 and x = 9:\n2\n\n\n-----Example 11: Input-----------------------------\n\nInput for m = 5 and x = 10:\n5\n10\n\nOutput for m = 5 and x = 10:\n2\n\n\n-----Example 12: Input-----------------------------\n\nInput for m = 5 and x = 11:\n5\n11\n\nOutput for m = 5 and x = 11:\n2\n\n\n-----Example 13: Input-----------------------------\n\nInput for m = 5 and x = 12:\n5\n12\n\nOutput for m = 5 and x = 12:\n1\n\n\n-----Example 14: Input-----------------------------\n\nInput for m = 5 and x = 13:\n5\n13\n\nOutput for m = 5 and x = 13:\n2\n\n\n-----Example 15: Input-----------------------------\n\nInput for m = 5 and x = 14:\n5\n14\n\nOutput for m = 5 and x = 14:\n1\n\n-----Note-----\n\nThe minimum possible number of traps will be $1$, if you want to install the $x$-mouse in any room it will be caught. \n\n-----Constraints-----\n\n0 < m < 200\n0 < x < 10^5\n\n\n-----Example 1: Input-----------------------------\n\nInput for m = 4 and x = 2:\n4\n2\n\nOutput for m = 4 and x = 2:\n1\n\n-----Example 2: Input-----------------------------\n\nInput for m = 4 and x = 1:\n4\n1\n\nOutput for m = 4 and x = 1:\n2\n\n\n-----Example 3: Input-----------------------------\n\nInput for m = 4 and x = 3:\n4\n3\n\nOutput for m = 4 and x = 3:\n2\n\n\n-----Example 4: Input-----------------------------\n\nInput for m = 4 and x = 5:\n4\n5\n\nOutput for m = 4 and x = 5:\n2\n\n\n-----Example 5: Input-----------------------------\n\nInput for m = 4 and x = 6:\n4\n6\n\nOutput for"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution(stdin)) == '23 128'\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == out\n\n[input]\n\nA student may complete the homework at any one time (0 \u2264 k \u2264 2^n), so he is suggested to write some test cases for these problems. Each test case contains a two line input.\n\nThe first line contains a two integer n and k, where 1 \u2264 n \u2264 10^18, and 2 \u2264 k \u2264 10^18.\n\n\n[output]\n\nReturn a single line of the output, containing the A and B in a single line.\n\nFor example, the output should be 0 1.\n\"\"\"\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == ''"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '23'\nassert solution(stdin) == '1 8'\nassert solution(stdin) == '23 128'\nassert solution(stdin) == '1 1'"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"23\"\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 8\"\nassert solution(stdin) == \"23 128\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"23 128\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\n        [1, 2],\n        [3, 4]\n    ]) == '23 128'\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 1\"\n\n\n-----Constraints-----\n0 < n, k < 10^18\n\nTime Limit: 1 seconds\n\nExample 1:\n\nInput\n3 2\n\nOutput\n1 8\n\nExplanation\nWe know the probability that two people have the same birthday among the two people.\n\nExample 2:\n\nInput\n3 3\n\nOutput\n23 128\n\nExplanation\nWe already know that there are 2^3 = 8 days in Udayland. The probability that 2 people have the same birthday among 2 people is clearly $\\frac{1}{8}$, so A = 1, B = 8.\n\nExample 3:\n\nInput\n4 3\n\nOutput\n23 128\n\nExample 4:\n\nInput\n1 4\n\nOutput\n1 1\n\n\n-----Constraints-----\n1 <= n, k <= 10^18\n\nTime Limit: 1 seconds\n\nNote:\nThere are n people, so k is guaranteed to be even.\n\n\n-----Constraints-----\n\n2^n <= n <= 10^18\n\nn is odd.\n\n1 <= k <= 10^18\n\n1 <= stdin <= 10^6\n\n\n-----Sample Input 1-----\n\nInput\n3 2\n\nOutput\n1 8\n\nExplanation\nWe know the probability that two people have the same birthday among the two people.\n\nSample Input 2-----\n\nInput\n3 3\n\nOutput\n23 128\n\nExplanation\nWe already know that there are 2^3 = 8 days in Udayland. The probability that two people have the same birthday among the two people is clearly $\\frac{1}{8}$, so A = 1, B = 8.\n\nSample Input 3-----\n\nInput\n4 3\n\nOutput\n23 128\n\nExplanation\nWe already know that there are 2^3 = 8 days in Udayland. The probability that two people have the same birthday among the two people is clearly $\\frac{1}{8}$, so A = 1, B = 8.\n\nSample Input 4-----\n\nInput\n1 4\n\nOutput\n1 1\n\n\n-----Constraints-----\n1 <= n <= 10^18\n1 <= k <= 10^18\n1 <= stdin <= 10^6\n\n\n-----Sample Output-----\n\n7\n\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 2) == 1\nassert solution(1, 3) == 23\nassert solution(4, 3) == 128\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1 1\"\nassert solution(inp) == \"23 128\"\nassert solution(inp) == \"2 7\"\nassert solution(inp) == \"1 7\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Sample Input-----\n\nSample Input\n3\n23000 South\n10 East\n4000 North\n\nSample Output\nYES\n\n\nSample Input\n4\n1000 North\n1000 South\n\nSample Output\nNO\n\n\n-----Sample Output-----\n\nSolution\nYES\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^4\n1 \u2264 t_{i} \u2264 10^6\n\nn \u2265 1\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin, t):\n        \"\"\"\n        :type stdin: str\n        :type t: int\n        :rtype: str\n        \"\"\"\n        for i in range(t):\n            direction = stdin[i].split(' ')[0]\n            val = stdin[i].split(' ')[1]\n            distance = int(stdin[i].split(' ')[2])\n            x = int(stdin[i].split(' ')[3])\n            y = int(stdin[i].split(' ')[4])\n            if direction == 'North' and distance > 0 and distance < 40000 and x > 0 and y > 0:\n                y = y - 40\n            if direction == 'South' and distance > 0 and distance < 40000 and x < 0 and y > 0:\n                y = y + 40\n            if direction == 'West' and distance > 0 and distance < 40000 and x > 0 and y < 0:\n                x = x - 40\n            if direction == 'East' and distance > 0 and distance < 40000 and x < 0 and y < 0:\n                x = x + 40\n            if direction == 'North' and val == 'north':\n                y = y + 1\n            elif direction == 'South' and val =='south':\n                y = y - 1\n            elif direction == 'West' and val == 'west':\n                x = x - 1\n            elif direction == 'East' and val == 'east':\n                x = x + 1\n            if y > 0:\n                y = y + distance\n            if y < 0:\n                y = y - distance\n            if x > 0:\n                x = x - distance\n            if x < 0:\n                x = x + distance\n            if y == 0 and x == 0:\n                y = 1\n            elif y == 0 and x == 0:\n                y = 0\n            elif y == 0 and x == 0:\n                y = -1\n            elif y == 0 and x == 0:\n                y = -1\n            if y < 0:\n                y = y + 1\n            elif y == 0:\n                y = y + 1\n            if x < 0:\n                x = x + 1\n            elif x > 0:\n                x = x - 1\n            if x < 0:\n                x = x + 1\n            if y > 0:\n                y = y - 1\n            elif y > 0:\n                y = y + 1\n            if y < 0:\n                y = y + 1\n            if x < 0:\n                x = x + 1\n            elif x < 0:\n                x = x - 1\n            if x > 0:\n                x = x - 1\n            print(y, x, x + y, x + y - x, x - y - x, x + y + x, x - y + x)\n            stdin[i + 1] = y * 'N' + x * 'E' + str(x + y) +'' + direction * 'W' + str(\n                x - y - x) +'' + direction * 'E' + str(x + y + x) +'' + direction * 'S' + str(\n                x - y + x) +'' + direction * 'W' + str(x + y - x) +'' + direction * 'E' + str(x + y + x + y) +'' + direction * 'S' + str(\n                x + y + x - y)\n            stdin[i + 2] = y * 'N' + x * 'W' + str(x + y - x) +'' + direction * 'W' + str(x - y - x) +'' + direction * 'S' + str(\n                x + y + x) +'' + direction * 'E' + str(x + y + x - y) +'' + direction * 'S' + str(\n                x + y + x + y) +'' + direction * 'E' + str(x + y + x - y) +'' + direction * 'W' + str(\n                x + y + x + y - x) +'' + direction * 'W' + str(x - y + x) +'' + direction * 'E' + str(x - y + x - y) +'' + direction * 'S' + str(\n                x + y + x + y + y) +'' + direction * 'E' + str(x - y - x) +'' + direction * 'S' + str(\n                x + y + x + y - x) +'' + direction * 'S' + str(x + y + x + y - y) +'' + direction * 'E' + str(x - y - x) +'' + direction * 'W' + str(\n                x - y - x) +'' + direction * 'N' + str(x + y + y) +'' + direction * 'S' + str(\n                x + y + y - x)\n            stdin[i + 3] = y * 'N' + x * 'W' + str(x + y - x) +'' + direction * 'S' + str(x + y + x) +'' + direction * 'E' + str(x + y + x - y) +'' + direction * 'W' + str(\n                x - y - x) +'' + direction * 'E' + str(x + y + x - y) +"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"The function is invalid!\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= t_i <= 10^6\n\n-----Time Limit=1.5 seconds per test case-----\n\nInput Format\n\nThe first line contains an integer n (1 \u2264 n \u2264 50).\n\nThe i-th of next n lines contains an integer t_{i} and a string dir_{i} (1 \u2264 t_{i} \u2264 10^6, $\\operatorname{dir}_{i} \\in \\{\\text{North, South, West, East} \\}$)\u00a0\u2014 the length and the direction of the i-th part of the journey, according to the description Limak got.\n\n\n\nOutput Format\n\nPrint \"YES\" if the description satisfies the three conditions, otherwise print \"NO\", both without the quotes.\n\n\n\nSample Input\n\n2\n7500 South\n10000 East\n3500 North\n4444 West\n4000 North\n\nSample Output\n\nNO\n\nSample Input\n\n2\n20000 South\n10 East\n20000 North\n\nSample Output\n\nYES\n\"\"\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n0 <= stdin.length <= 200\n0 <= stdin[i] <= 10^7\n\n-----Time Limit 1:30 seconds-----\nYou can run as many tests as possible (in the limit of 10,000 lines).\n\n-----Space Limit: 30 megabytes-----\nYou can not read the input from stdin.\n\n-----Tests-----\ntests = [\n    [\"3\", \"1000 North\", \"4000 South\", \"1000 North\", \"100000 North\", \"10\", \"40 South\", \"10\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \"35 North\", \""
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\", \"The solution is not valid!\"\n\nassert solution(stdin) == \"NO\", \"The solution is not valid!\"\n\nassert solution(stdin) == \"NO\", \"The solution is not valid!\"\n\n-----Examples-----\nInput\n2\n4444 East\n10000 North\n1000 North\n\nOutput\nNO\n\nInput\n1\n10000 North\n1000 North\n\nOutput\nNO\n\nInput\n2\n4444 North\n1000 East\n\nOutput\nNO\n\nInput\n1\n10000 North\n1000 North\n\nOutput\nNO\n\nInput\n2\n4444 North\n1000 North\n\nOutput\nNO\n\nInput\n1\n10000 South\n1000 South\n\nOutput\nNO\n\nInput\n3\n4444 North\n1000 North\n\nOutput\nNO\n\nInput\n1\n4444 East\n10000 North\n1000 North\n\nOutput\nNO\n\nInput\n2\n4444 North\n1000 North\n\nOutput\nNO\n\nInput\n1\n4444 North\n1000 South\n\nOutput\nNO\n\nInput\n1\n4444 South\n1000 North\n\nOutput\nYES\n\n\n\n-----Note-----\n\nDrawings below show how Limak's journey would look like in first two samples. In the second sample the answer is \"NO\" because he doesn't end on the South Pole. [Image]\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"1 5 4\") == \"1 5 4\"\nassert solution(\"1 1 2\") == \"1 1 2\"\nassert solution(\"1 1 1\") == \"1 1 1\"\nassert solution(\"0 1 1\") == \"0 1 1\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 0 3 0\") == \"3\"\nassert solution(\"1 4 3 5 0\") == \"0\"\nassert solution(\"1 2 4 0 0\") == \"1\"\nassert solution(\"2 4 1 0 0\") == \"3\"\nassert solution(\"2 2 0 0 0\") == \"1\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 3\nassert solution(stdin) == 1\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2, 3, 3, 5, 21, 17) == 3\nassert solution(2, 4, 0, 6, -2, 17) == 2\nassert solution(2, 0, -2, 6, 17, -17) == 3\n\n\n\"\"\""
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 8\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n\n-------Prototype-----\n\nimport sys\nfrom collections import Counter\n\na, b, L, R = map(int, input().split())\nx = a + b - L + R\nprint(x)\n\n--------Sample-Output\n\n3\n--------Sample-Input\n\n2 0 3 3 5 21\n\nOutput\n3\n\n3\n1\n2\n4\n5\n6\n\"\"\"\n\na, b, L, R = map(int, input().split())\nx = a + b - L + R\nc = 0\nfor i in range(1, x + 1):\n    if i % b == 0:\n        c += 1\nprint(c)"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 0 3 3 5 21') == '3'\nassert solution('2 4 3 0 6 17') == '2'\nassert solution('0 0 0 0 0 0') == '0'\nassert solution('4 4 4 4 4 4 4') == '4'\nassert solution('3 5 7 11 13 17') == '5'\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,2,3,4) == 3\nassert solution(4,1,2,3) == 3\n\n\n-----Constraints-----\n0 <= n <= 100\n0 <= a <= b < n\n\nTime Limit: 1 second\nSpace Limit: 1 KB\n\n----------SOLUTIONS---------------"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,3) == 1\nassert solution(4,7) == 3\nassert solution(4,10) == 1\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 2, 3, 4, 7) == 3\nassert solution(5, 4, 3, 2, 7) == 5\nassert solution(5, 4, 5, 3, 7) == 3\nassert solution(5, 4, 5, 5, 7) == 3\nassert solution(5, 4, 5, 5, 9) == 5\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3') == '1'\nassert solution('1 1 1') == '1'\nassert solution('2 1 1') == '2'\nassert solution('3 3 3') == '3'\nassert solution('4 2 4') == '4'\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n\n------Passed All Test Cases------\n1\n5 2 3\n\n2\n6 1\n\n3\n7 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n8 10\n\n------Passed All Test Cases------\n1\n4 7 10\n\n2\n6 1\n\n3\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == out\nassert solution(\"2\") == out\nassert solution(\"1\") == out\nassert solution(\"5\") == out\nassert solution(\"4\") == out\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '1'\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 4 1\") == \"1\"\nassert solution(\"4 3 1\") == \"1\"\nassert solution(\"3 2 1\") == \"2\"\nassert solution(\"3 3 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    [\"5\", \"2\", \"3\", \"4\", \"7\", \"10\"]) == \"3\"\nassert solution(\n    [\"5\", \"7\", \"10\"]) == \"3\"\nassert solution(\n    [\"3\", \"6\", \"9\"]) == \"3\"\nassert solution(\n    [\"4\", \"6\", \"9\"]) == \"3\"\nassert solution(\n    [\"4\", \"3\", \"6\"]) == \"3\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('R'), 'NO'\nassert solution('RRRRRRRR'), 'NO'\nassert solution('RBBB'), 'NO'\nassert solution('RBBBB'), 'NO'\nassert solution('RRRRRRRR'), 'NO'\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\nassert solution(stdin) == 'NO'\n\nprint(solution(\"RRRRR\") == 'YES')"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('RRRRRRRRR' 'BRB' 'BRG' 'BRB' 'BRG' 'BRG' 'BRG' 'BRG' 'BRG' 'BRG' 'BRG') == 'YES'\nassert solution('RRRRRRRRR' 'R' 'R' 'R' 'R' 'R' 'R' 'R' 'R' 'R' 'R' 'R' 'R' 'R' 'R') == 'NO'"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('RRRR'), 'NO'\nassert solution('BRBRBB'), 'NO'\nassert solution('BRBRBB'), 'NO'\nassert solution('BRBRBB'), 'NO'\nassert solution('RRRR'), 'NO'\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1110101\") == \"Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He decided to start his search from an infinite field tiled by hexagons. For convenience the coordinate system is introduced, take a look at the picture to see how the coordinates of hexagon are defined: \\n\\n[Image] [Image] Ayrat is searching through the field. He started at point (0, 0) and is moving along the spiral (see second picture). Sometimes he forgets where he is now. Help Ayrat determine his location after n moves.\\n\\n[Image] [Image] Ayrat is looking for the perfect code. He"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-2 0\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == -2\nassert solution(7) == 3\nassert solution(1) == 2\nassert solution(0) == 0\nassert solution(0) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == -2\nassert solution(7) == 3"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == 2, \"did not get expected result\"\nassert solution(7) == 3, \"did not get expected result\"\nassert solution(2) == 2, \"did not get expected result\""
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\n\n-----Alternatives-----"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 3\nassert solution(7) == 2"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-2 0'\nassert solution(stdin) == '-2 0'\nassert solution(stdin) == '-2 0'\nassert solution(stdin) == '-2 0'\nassert solution(stdin) == '-2 0'\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == -2\nassert solution(7) == 3\nassert solution(1) == -2\nassert solution(2) == -1\nassert solution(0) == 0\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == 4\nassert solution(5) == -2\nassert solution(3) == 3\nassert solution(4) == 2\nassert solution(5) == 1\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['6', '6', '6']) == 'Yes'\nassert solution(['3', '6', '6']) == 'No'\nassert solution(['5', '7', '6']) == 'Yes'\nassert solution(['4', '6', '6']) == 'No'\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"6\", \"11\", \"6\"]) == \"No\"\nassert solution([\"6\", \"11\", \"6\", \"10\"]) == \"Yes\"\nassert solution([\"2\", \"1\", \"3\", \"3\", \"3\", \"6\"]) == \"Yes\"\nassert solution([\"2\", \"1\", \"3\", \"3\", \"3\", \"6\", \"7\"]) == \"No\"\nassert solution([\"3\", \"1\", \"3\", \"3\", \"3\", \"6\", \"7\"]) == \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, 4) == \"Yes\"\nassert solution(5, 1) == \"No\"\nassert solution(3, 7) == \"Yes\"\nassert solution(6, 11) == \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"6 11 6\") == \"Yes\"\nassert solution(\"3 2 7\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Yes'\n\nassert solution(stdin) == 'No'"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\""
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 6, 15) == \"Yes\"\nassert solution(3, 2, 7) == \"No\"\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 6 15\") == \"Yes\"\nassert solution(\n    \"3 2 7\") == \"No\"\n\n\"\"\"\na,b,c=map(int,input().split())\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 6 15\") == \"No\"\nassert solution(\"3 2 7\") == \"Yes\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(\"3 8\")\nprint(\"output : \")\nprint(\"YES\")\n\nprint(\"Exception :\")\nprint(\"No\")\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 4 6\") == \"YES\"\nassert solution(\"2 4 6\") == \"NO\""
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 2\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 8\"\n) == \"YES\"\nassert solution(\n    \"3 8\"\n) == \"NO\"\nassert solution(\n    \"2 4 6\"\n) == \"YES\"\nassert solution(\n    \"2 4 6\"\n) == \"NO\"\nassert solution(\n    \"1 5 7\"\n) == \"NO\"\n\n\n\"\"\""
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n0 <= s.length <= 10^4\ns contains lowercase English letters only.\n\n\"\"\"\nimport sys\nimport string"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 5\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"mew\") == 3\nassert solution(\"qqqqqqqq\") == 5\nassert solution(\"wuffuw\") == 0\n\n\"\"\""
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(mew) == 3\nassert solution(wuffuw) == 5\nassert solution(qqqqqqqq) == 0"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin: str\n) == 0, \"Given string is not a palindrome\"\n\"\"\"\n\nclass Solution:\n    def longestPalindromeSubstring(self, s: str) -> int:\n        \n        # Empty string\n        if len(s) < 2:\n            return len(s)\n        \n        # Find the longest palindrome substring\n        res = 0\n        l = 0\n        r = 0\n        for r in range(len(s)):\n            l = max(l, r-1)\n            l += 1\n            r = r+1\n            while l < r:\n                if s[l] == s[r]:\n                    l += 1\n                    r += 1\n                else:\n                    break\n            if r-l-1 > res:\n                res = r-l-1\n        return res"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"mew\") == \"3\"\nassert solution(\"wuffuw\") == \"5\"\nassert solution(\"qqqqqqqq\") == \"0\"\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '3'"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"mew\",\"wufuff\"]) == 3\nassert solution([\"qqqqqqqqq\",\"wqwqwqwq\"]) == 5\nassert solution([\"mew\",\"wufuff\",\"mew\",\"wufuff\"]) == 0\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('mew') == 3\nassert solution('wuffuw') == 5\nassert solution('qqqqqqqq') == 0\n"
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"mew\") == 3\nassert solution(\"wuffuw\") == 5\nassert solution(\"qqqqqqqq\") == 0\n\n\n\n-----Constraints-----\n1 <= s.length <= 50\ns is guaranteed to be a palindrome.\n\nTime Limit: 1 second\n\"\"\""
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'rated'\n\n\nassert solution(stdin) == 'rated'\n\n\nassert solution(stdin) == 'rated'\n\n\nassert solution(stdin) =='maybe'\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1837\") == \"rated\"\nassert solution(\"3818\") == \"rated\"\nassert solution(\"5006\") == \"rated\"\nassert solution(\"38\") == \"rated\"\nassert solution(\"2893\") == \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"rated\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"unrated\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\""
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"rated\"\nassert solution(\"5\") == \"rated\"\nassert solution(\"3123\") == \"rated\"\nassert solution(\"4\") == \"rated\"\nassert solution(\"5\") == \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3060 3060\\n2194 2194\\n2876 2903\\n2624 2624\\n3007 2991\\n2884 2884\\n\") == \"rated\"\nassert solution(\"4123 4123\\n2777 2777\\n2246 2246\\n2246 2246\\n1699 1699\\n\") == \"maybe\""
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()), \"Not implemented\"\nassert solution(input()), \"Not implemented\"\nassert solution(input()), \"Not implemented\"\nassert solution(input()), \"Not implemented\"\nassert solution(input()), \"Not implemented\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"rated\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"maybe\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"rated\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"maybe\"\nassert solution(stdin) == \"rated\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 2 3 4\"\n\n\n\nAccepted\n118,111\nSubmissions\n7\n\nRuntime\n224 ms\nMemory Usage\n91.8 %\n'''\n\nclass Solution:\n    def distanceBetweenIndices(self, a: List[int], index1: int, index2: int) -> int:\n        diff = abs(index1-index2)\n        return diff"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2 1 0 3 0 0 3 2 4\""
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == \"2 1 0 3 0 0 3 2 4\"\n\n\"\"\""
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n        [\n        [0, 1, 0, 2, 0],\n        [0, 1, 1, 0, -1],\n        [0, 0, 2, 0, -1],\n        [0, 0, 0, 0, -1],\n        [0, 0, 0, -1, -1]\n        ],\n        [\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1]\n        ],\n        [\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1],\n        [-1, -1, -1, -1, -1]\n        ]\n    ]\n)\n\n> python solution.py\n5\n2 1 0 3 0 0 3 2 4\n2 1 0 1 0 0 1 2 3 \n2 1 0 1 0 0 1 2 3 \n2 1 0 1 0 0 1 2 3 \n2 1 0 1 0 0 1 2 3 \n2 1 0 1 0 0 1 2 3 \n2 1 0 1 0 0 1 2 3 \n2 1 0 1 0 0 1 2 3 \n2 1 0 1 0 0 1 2 3 \n\n> python solution.py\n5\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n0 1 2 3 4\n\n> python solution.py\n7\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n5 6 0 1 -2 3 4\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == \"2 1 0 3 0 0 3 2 4\"\n\"\"\"\nn = int(stdin)\nlist = list(map(int, stdin.split()))\nt = int(stdin.split()[1])\nfor i in range(t):\n    d = 0\n    for j in range(1, n):\n        d += abs(list[j] - j)\n    print(d)\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 1 0 3 0 0 3 2 4\"\nassert solution(stdin) == \"5 6 0 1 -2 3 4\"\nassert solution(stdin) == \"7 5 6 0 1 -2 3 4\"\nassert solution(stdin) == \"2 1 2 3 4\""
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 1 0 3 0 0 3 2 4\", \"Your solution is wrong\""
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 1 0 3 0 0 3 2 4\"\n\"\"\"\nn = int(stdin.split()[1])\na = list(map(int, stdin.split()[2:]))\n\ndp = [0]*n\ndp[0] = a[0]\n\nfor i in range(1, n):\n    dp[i] = a[i] - a[i-1]\n\nfor i in range(n-2, -1, -1):\n    dp[i] += dp[i+1]\n\nprint(dp[n-1])"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"2 1 0 3 0 0 3 2 4\"\nassert solution(inp) == \"0 1 2 3 4\"\nassert solution(inp) == \"0 1 2 3 4\"\nassert solution(inp) == \"2 1 0 3 0 0 3 2 4\"\nassert solution(inp) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1 2 1'\nassert solution(stdin) == '0 0 0'\nassert solution(stdin) == '0 0 1'\nassert solution(stdin) == '2 3'\nassert solution(stdin) == '0 1'\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nprint(solution(input()))\n\nA = [\"0\",\"1\",\"0\",\"1\",\"0\"]\n\nprint(len(A))\n\nprint(A[0]==A[1]==A[2]==A[3])"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\" * 5 + \"1\") == 1\nassert solution(\"0\" * 5 + \"1\") == 3\nassert solution(\"0\" * 5 + \"0\") == 3\nassert solution(\"0\" * 5 + \"1\") == 3\nassert solution(\"0\" * 5 + \"0\") == 3\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, \"1010\") == 4\nassert solution(10, \"10101010101010\") == 2\nassert solution(20, \"10101010101010\") == 962\nassert solution(4, \"0\") == 2\n\n'''\nclass Solution:\n    def countDistinct(self, s: str) -> int:\n        \"\"\"\n        Time complexity: O(N) where N is the length of the string.\n        Space complexity: O(N) where N is the length of the string.\n        \"\"\"\n        \n        count = 0\n        for i in range(0, len(s)):\n            if s[i] == \"0\":\n                count += 1\n            else:\n                count -= 1\n        return count"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 962\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\nstdin and s consists only of digits and characters '0' and '1'.\n\nTime Limit: 1 second\nSpace Limit: 1 megabyte\n\n\n-----Tests-----\ntests = [\n    (\n        \"000111\",\n        \"001\",\n        \"001\",\n        \"001\",\n        \"01\",\n        \"01\",\n        \"1010\",\n        \"10101010101010\",\n        3,\n        \"0\",\n        \"0\",\n        \"0\",\n        \"00\",\n        \"00\",\n        \"00\",\n        \"00\",\n        \"00\",\n        \"00\",\n        \"00\",\n    ),\n    (\n        \"000111\",\n        \"001\",\n
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 12\nassert solution(input(\"Input a test case\")) == 15\nassert solution(\"000111\") == 2\nassert solution
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= n <= 10^5\n\n1 <= s.length <= 10^5\ns is a valid substring of cyclical string $t$.\n\nInput Format\n\nThe first line contains an integer, $n$, denoting the length of the target string.\nThe second line contains the string $s$, denoting the string which must be a substring of cyclical string $t$.\n\nConstraints\n\n1 <= n <= 10^5\ns is a valid substring of cyclical string $t$.\n\nSample Input\n\n1\n4\n1\n
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 962\nassert solution(stdin)!= 0\nassert solution(stdin) == 4\nassert solution(stdin)!= 962\nassert solution(stdin)!= 1\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == 1, \"0\"\nassert solution(1) == 2, \"1\"\nassert solution(2) == 3, \"2\"\nassert solution(20) == 962, \"20\"\nassert solution(41) == 3, \"41\"\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 962\n\n-----Constraints-----\n1 \u2264 n \u2264 1000\n1 \u2264 s \u2264 10^3\n1 \u2264 t \u2264 n\n1 \u2264 s (s contains only characters '0' and '1')\n\nTime Limit: 1 second\n\n\n-----Tests-----\n>>> import sys\n>>> print(solution(input()), end=' ')\n5\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n4\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n3\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n2\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n1\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n1\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import sys\n>>> print(solution(input()), end=' ')\n0\n\n>>> import"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3 5\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n    1 0\n    0 -1\n    1 0\n    1 1\n    \"\"\") == \"1 1\"\n    assert solution(\"\"\"\n    2 2\n    -2 2\n    2 2\n    \"\"\") == \"2 2\"\n    assert solution(\"\"\"\n    3 3\n    2 2\n    -2 2\n    -3 2\n    \"\"\") == \"3 3\"\n    assert solution(\"\"\"\n    3 3\n    2 2\n    -2 2\n    -3 2\n    \"\"\") == \"3 3\"\n    assert solution(\"\"\"\n    2 2\n    2 2\n    -3 2\n    -2 2\n    \"\"\") == \"2 2\"\n    "
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, 6) == 5\nassert solution(3, 2) == 3\nassert solution(4, 1) == 4\nassert solution(4, 3) == 4\nassert solution(3, 1) == 2\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin: str = \"5 6 -5 -4 -3 -2 -1\") == 3 4\nassert solution(\n    stdin: str = \"6 7\") == 5 7\nassert solution(\n    stdin: str = \"6 7 -1 -1 -4 -4 -4 -4 -5 -4\") == 7\nassert solution(\n    stdin: str = \"0 0 -2 -2\") == 0 2\nassert solution(\n    stdin: str = \"0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3 4'\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == [3, 4]\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3 4\"\nassert solution(input().strip()) == \"3\"\nassert solution(input().strip().split(\" \")) == \"3 4\"\nassert solution(input().strip().split(\" \").sort()) == \"3 4\"\nassert solution(input().strip().split(\" \").sort()) == \"3 4\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == ['3', '4']"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5 5\"\nassert solution(stdin) == \"5 5\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"3 3\"\n"
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 5"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2 1 4 10\") == \"14\"\nassert solution(\"5 2 1 4 5\") == \"13\"\nassert solution(\"5 2 1 4 2\") == \"14\"\nassert solution(\"5 2 1 4 4\") == \"13\"\nassert solution(\"5 2 1 4 3\") == \"13\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 2 1 4 10') == 14, 'FAIL'\nassert solution('2 2 1 4 5') == 13, 'FAIL'\nassert solution('2 2 1 4 5') == 15, 'FAIL'\nassert solution('2 2 1 4 5') == 16, 'FAIL'\nassert solution('2 2 1 4 5') == 17, 'FAIL'\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5 2 1 4\", \"5 2 1 5\", \"5 2 1 4\", \"5 2 1 4\"]) == \"14\"\nassert solution([\"5 2 1 4\", \"5 2 1 5\", \"5 2 1 4\", \"5 2 1 4\"]) == \"13\"\nassert solution([\"5 2 1 4\", \"5 2 1 4\", \"5 2 1 4\"]) == \"13\"\nassert solution([\"5 2 1 4\", \"5 2 1 4\", \"5 2 1 4\"]) == \"14\"\n\n\n-----Constraints-----\n1 <= d, k, a, b, t <= 10^6\nd \u2264 10^12\nk <= a <= b\na <= b\n1 <= t <= 10^6\n\nRuntime: 24 ms, faster than 6.07% of Python3 online submissions for Minimal Time after which Vasiliy can reach the post office.\nMemory Usage: 19.9 MB, less than 18.99% of Python3 online submissions for Minimal Time after which Vasiliy can reach the post office.\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"14\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"14\"\n\"\"\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 3 5 10\") == \"7\"\nassert solution(\"5 2 1 4 10\") == \"12\"\nassert solution(\"5 2 1 4 5\") == \"15\"\nassert solution(\"5 2 1 4 5\") == \"13\"\n\n\n-----Constraints-----\n\n0 \u2264 d \u2264 10^12\n0 \u2264 k \u2264 10^6\n0 \u2264 a \u2264 b\n0 \u2264 t \u2264 10^6\n\n\n\n-----Patterns-----\n\nStart the time, and set distance, to the point where Vasiliy needs to drive the first 2 kilometers on the car.\nThen the time, to walk on foot, and the time, to finish repairing his car.\nThen the time, to drive 1 kilometer on his car.\n\nTotal time = k + a + b + t + t\n\n\n\n-----Sample Input 1-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n5\n\nInput\n\n5 2 1 4 5\n\nSample Output\n\n5\n\n-----Sample Input 2-----\n\nSample Input\n\nInput\n\n5 2 1 4 5\n\nSample Output\n\n5\n\n-----Sample Input 3-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n5\n\n-----Sample Input 4-----\n\nSample Input\n\nInput\n\n5 2 1 4 5\n\nSample Output\n\n5\n\n-----Sample Input 5-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n0\n\n-----Sample Input 6-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n0\n\n\n-----Sample Input 7-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n0\n\n-----Sample Input 8-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n1\n\n-----Sample Input 9-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n0\n\n\n-----Sample Input 10-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n0\n\n-----Sample Input 11-----\n\nSample Input\n\nInput\n\n5 2 1 4 5\n\nSample Output\n\n0\n\n-----Sample Input 12-----\n\nSample Input\n\nInput\n\n5 2 1 4 10\n\nSample Output\n\n1\n\n\"\"\""
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\",\"2\",\"1\",\"4\",\"10\",\"5\",\"5\",\"4\",\"10\",\"15\",\"2\"]) == \"5\"\nassert solution([\"5\",\"2\",\"1\",\"4\",\"10\",\"15\",\"2\"]) == \"14\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\", \"2\", \"1\", \"4\", \"10\"]) == \"14\"\nassert solution([\"5\", \"2\", \"1\", \"4\", \"5\"]) == \"13\"\nassert solution([\"5\", \"2\", \"1\", \"4\", \"5\"]) == \"15\"\nassert solution([\"5\", \"2\", \"1\", \"4\", \"5\"]) == \"16\"\nassert solution([\"5\", \"2\", \"1\", \"4\", \"5\"]) == \"17\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"14\"\n\n> ---(DO NOT TOUCH)---\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '13'\n\"\"\"\nimport math"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 2) == 2\nassert solution(5, 3) == -1\nassert solution(8, 2) == -1\nassert solution(3, 2) == 2\nassert solution(8, 3) == 3"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 2\") == \"2\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == -1 or solution(input) == 0, \"incorrect answer\""
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == 1\nassert solution(\"8 2\") == 2\nassert solution(\"5 3\") == -1\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3\", \"2\", \"1\", \"3\", \"1\"]) == \"1\"\nassert solution([\"5\", \"4\", \"5\", \"3\", \"2\"]) == \"2\"\nassert solution([\"1\", \"2\", \"1\", \"1\", \"3\"]) == \"3\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1, 'expected one solution, got: '+str(1)\nassert solution(stdin) == 2, 'expected two solutions, got: '+str(2)\nassert solution(stdin) == -1, 'expected -1 solution, got: '+str(stdin)\n\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= k <= 10^9\n\nTime Limit: 1 second\nSpace Limit: 0 (not checked)\n\n\n------Time complexity analysis------\n\nThe input is smaller than 10^10. Therefore, we need to keep track of the smallest possible sequence.\n\nThe time complexity of a sequence is O(n).\n\nThe space complexity is O(k).\n\nHere, we maintain a sequence of values of n, such that the sum of the elements is equal to n.\n\n\"\"\"\n\nn, k = map(int, input().split())"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= k <= stdin.length\n1 <= n <= 10^5\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nGuaranteed constraints:\n1 <= n <= 10^5\n\n[output]\nInteger\n\"\"\""
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == -1\nassert solution(stdin) == 5\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == -1, \"Correct!\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 11\") == \"5\"\nassert solution(\"5 7\") == \"7\"\nassert solution(\"21 21\") == \"88\"\nassert solution(\"3 8\") == \"1\"\nassert solution(\"1 5\") == \"1\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\", \"\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"5\") == \"5\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"7\"\nassert solution(\"3 8\") == \"11\"\nassert solution(\"5 7\") == \"21\"\nassert solution(\"21 21\") == \"88\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"21 21\") == \"31\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"3 8\") == \"7\"\nassert solution(\"5 7\") == \"88\"\nassert solution(\"21 21\") == \"88\"\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '14'\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '31'\nassert solution(stdin) == '15'\nassert solution(stdin) == '35'\nassert solution(stdin) == '41'\nassert solution(stdin) == '51'\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"6 12\"\n    ) == 14\nassert solution(\n    \"11 14\"\n    ) == 31\nassert solution(\n    \"5 7\"\n    ) == 7\nassert solution(\n    \"21 21\"\n    ) == 88\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"31\"\nassert solution(stdin) == \"57\"\nassert solution(stdin) == \"181\"\n\n\n-----Submissions-----"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"11 10\") == \"1\"\nassert solution(\"11 20\") == \"5\"\nassert solution(\"3 8\") == \"7\"\nassert solution(\"5 7\") == \"3\"\nassert solution(\"21 21\") == \"88\"\n\n-----Constraints-----\n1 <= n <= 20\n1 <= m <= 1000\n1 <= x <= n\n1 <= y <= m\n1 <= x + y <= n\n\nTime Limit: 1 second\nMemory Limit: 128 MB\n\n\"\"\"\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().strip().split())\n\n\"\"\"\nn = 1\nm = 1\nx = 1\ny = 1\n\nwhile True:\n    if not (1 <= x <= n and 1 <= y <= m):\n        break\n    x = x + 1\n    y = y + 1\n    if y == m:\n        break\n    if x == n:\n        break\n    \nwhile True:\n    if x == 1 and y == 1:\n        break\n    if y % 2 == 0:\n        y = y // 2\n        continue\n    if x % 2 == 1:\n        x = x // 2\n        continue\n    if x == m:\n        break\n    if y == 1:\n        break\n    if y == n:\n        break\n    if x == n:\n        break\n\nprint(x * y)\n\"\"\""
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 5 10\") == 11\nassert solution(\"2 2 9\") == 3\nassert solution(\"1 1\") == 5\nassert solution(\"1 1 5\") == 7\nassert solution(\"2 2 5\") == 9\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n\"\"\""
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0, \"Invalid solution\"\nprint(\"Test 1 passed!\")\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= a_i <= 10^9\n\nSample Input\n\n3\n-2 -3 1 -6\n\nSample Output\n\n22\n\nExplanation\n\nIn the first test case we need to multiply the subarray [-2, 1, -6], and the array becomes [-3, 8, 4, -2, 12] with beauty 22 ([-3, 8, 4, -2, 12]).\n\nIn the second test case we don't need to multiply any subarray at all.\n\nIn the third test case no matter which subarray we multiply, the beauty of array will be equal to 0.\n\"\"\"\nimport sys\n\nclass Solution:\n    def maxBeauty(self, a: List[int], x: int) -> int:\n        pass"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 -2\") == 22\nassert solution(\"12 -3\") == 0\nassert solution(\"5 10\") == 22\nassert solution(\"1 3 3 7 1 3 3 7 1 3 3 7\") == 42\n\npass\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '42'\n\nassert solution(input().split()) == '0'\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '22', \"Wrong answer\"\n\"\"\"\n\nimport unittest\n\nclass Test(unittest.TestCase):\n    def test_example(self):\n        pass\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 42\nassert solution(input()) == 0\nassert solution(input()) == 22"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 22\n\nInput\n5 10\n-1 -2 -3 -4 -5\n\nOutput\n0\n\nInput\n5 10\n-1 -2 -3 -4 -5\n\nOutput\n42\n\nInput\n5 10\n-1 -2 -3 -4 -5\n\nOutput\n42\n\nInput\n10 10\n-1 -2 -3 -4 -5\n\nOutput\n42\n\nInput\n10 5\n-1 -2 -3 -4 -5\n\nOutput\n42\n\ninput:\n5 10\n-1 -2 -3 -4 -5\n\noutput:\n22\n\ninput:\n5 10\n-1 -2 -3 -4 -5\n\noutput:\n22\n\ninput:\n10 10\n-1 -2 -3 -4 -5\n\noutput:\n22\n\ninput:\n5 10\n-1 -2 -3 -4 -5\n\noutput:\n42\n\n\n------------------\n\nSolution:\n\nmutable_list = []"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 3\n\nassert solution(stdin) == 5\nassert solution(stdin) == 3\nassert solution(stdin) == 5"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3 2\") == \"3\"\nassert solution(\"2 5 5\") == \"5\"\nassert solution(\"2 10 10\") == \"10\"\nassert solution(\"1 10 5\") == \"10\"\nassert solution(\"1 15 15\") == \"15\"\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n\n\n\n-----Constraints-----\n\n0 < stdin.length <= 100\n1 \u2264 n, m \u2264 10^5\n0 \u2264 k \u2264 n\u00b7m\n\n----\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 5 5 5 5 5\") == \"5\"\n\nassert solution(\"4 4 1\") == \"1\"\n\nassert solution(\"2 2\") == \"2\"\n\n-----Examples-----\nInput\n2 3 2\n\nOutput\n3\n\nInput\n1 10 5\n\nOutput\n10\n\nInput\n1 4 5\n\nOutput\n5\n\"\"\"\n\nfrom math import factorial\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n    2\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\n\nassert solution(stdin) == '10'\nassert solution(stdin) == '15'\n\nassert solution(stdin) == '25'\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"Wrong solution\"\n\n\n\"\"\""
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(7) == 5\nassert solution(21) == 21\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(7) == 7\nassert solution(21) == 5\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == 7\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\n\n------Greedy Method-----------------\n\nThe function is based on the idea that if the sequence from the first $k$ to the last $k$ is \"6568\" then the sequence starts at \"6568\" and ends at the first \"6465\" or \"6567\" or \"6568\" and the last $k$ is the last digit of the sequence.\n\nWe also apply the same rule that if the sequence from the first $k$ to the last $k$ is \"3665\" then the sequence starts at the last \"3665\" and ends at the first \"3678\" or \"3667\" or \"3668\" and the last $k$ is the last digit of the sequence.\n\nWe also apply the same rule that if the sequence from the first $k$ to the last $k$ is \"3667\" then the sequence starts at the last \"3667\" and ends at the first \"3667\" or \"3667\" or \"3668\" and the last $k$ is the last digit of the sequence.\n\nWe also apply the same rule that if the sequence from the first $k$ to the last $k$ is \"3668\" then the sequence starts at the first \"3668\" and ends at the last \"3668\" or \"3668\" or \"3668\" and the last $k$ is the last digit of the sequence.\n\n\n------Greedy Method-----------------\n\nThe last digit of the sequence is calculated from the first $k$ to the last $k$.\n\nWe also need to first calculate the last $k$ digit from the second $k$ to the end of the sequence.\n\nWe also need to calculate the last $k$ digit from the first $k$ to the end of the sequence.\n\nThe sequence is then joined together to get the final \"gcd\" number.\n\nYou need to follow the following approach:\nFirst, we consider the sequence from $k$ to the end of the sequence.\nThen, we need to consider the sequence from $k$ to the first $k$.\nThen, we calculate the last $k$ digit from the first $k$ to the end of the sequence.\nThen, we need to consider the sequence from $k$ to the first $k$.\nThen, we calculate the last $k$ digit from the first $k$ to the end of the sequence.\nThen, we calculate the sequence from $k$ to the last $k$.\nWe are done, so the final gcd is calculated.\n\nNow we need to make sure that the sequence from $k$ to the end of the sequence is positive.\n\nThen, we need to calculate the last $k$ digit from the first $k$ to the end of the sequence.\nWe are done, so the sequence from $k$ to the last $k$ is negative.\n\nTo get the result, we need to convert the sequence from $k$ to $k$ + 1 to the sequence from $k$ to $k$ - 1.\n\nFinally, we need to convert the sequence from $k$ to $k$ + 1 to the sequence from $k$ to $k$ - 1.\nWe also need to convert the sequence from $k$ to $k$ - 1 to the sequence from $k$ to $k$ + 1.\nWe are done, so the sequence from $k$ to $k$ - 1 is positive.\n\nNow we need to calculate the sequence from $k$ to $k$ - 1.\n\nWe are done, so the sequence from $k$ - 1 to $k$ is negative.\n\nNow we need to convert the sequence from $k$ - 1 to $k$ to $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1.\n\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is negative.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is negative.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is negative.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is negative.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is negative.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is negative.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is negative.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are done, so the sequence from $k$ - 1 to $k$ + 1 is positive.\n\nNow we need to calculate the sequence from $k$ - 1 to $k$ + 1 and calculate the last $k$ digit from the first $k$ to $k$ - 1.\nWe are"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"5\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"6\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"7\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"14\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"21\"\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('123456') == '5'\nassert solution('12345678910112131415161718192021222324252627282930313233343536') == '6'\nassert solution
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 7\n\n\nInput\n\n12\n\nOutput\n101\n\"\"\"\n\nimport sys"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 7\n\nInput\n13\n\nOutput\n13\n\nInput\n1234\n\nOutput\n4\n\nExplanation\n\nAn integer $n$ starts at position 1, $2$, and so on, and it has the first digit as the $n$-th digit, which is 5.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 1.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 2.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 3.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 4.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 5.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 6.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 7.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 8.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 9.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 10.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 11.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 12.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 13.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 14.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 15.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 16.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 17.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 18.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 19.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 20.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 21.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 22.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 23.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 24.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 25.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 26.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 27.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 28.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 29.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 30.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 31.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 32.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 33.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 34.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 35.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 36.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 37.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 38.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 39.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 40.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 41.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 42.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 43.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 44.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 45.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 46.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 47.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 48.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 49.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 50.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 51.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 52.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 53.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 54.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 55.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 56.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 57.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 58.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 59.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 60.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 61.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 62.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 63.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 64.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 65.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 66.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 67.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 68.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 69.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 70.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 71.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 72.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with 73.\n\nConvert $n$ to a sequence of positive integers, $k$-th, starting with"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 5\nassert solution(input) == 5\nassert solution(input) == 5\n\n\n\"\"\"\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 1\") == \"2\"\nassert solution(\"2 1 1\") == \"2\"\nassert solution(\"3 1 1\") == \"3\"\nassert solution(\"2 2 1\") == \"4\"\nassert solution(\"1 1 1 0\") == \"1\"\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"5\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"45\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"45\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"6\"\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == \"7\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2 50\") == \"26\"\nassert solution(\"2 2 50\") == \"3\"\nassert solution(\"2 2 50\") == \"4\"\nassert solution(\"2 2 50\") == \"5\"\nassert solution(\"2 2 50\") == \"4\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 26\n\nInput\n4\n1 2\n3 4\n4 5\n6 7\n\nOutput\n50\n\nInput\n2\n2 2\n3 4\n5 7\n6 7\n\nOutput\n50\n\nInput\n2\n10\n10 10\n\nOutput\n101\n\nInput\n2\n2 2\n10 10\n\nOutput\n101\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 26, \"26 is not the maximum number of bourles you can hold after the evening.\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 26, \"Expected 26 but got \" + str(26)\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 10 2\") == \"26\"\nassert solution(\"4 1 2 10 2\") == \"26\"\nassert solution(\"4 3 10 2\") == \"5\"\nassert solution(\"5 1 2 10 2\") == \"50\"\nassert solution(\"10 4 1 2 10 2\") == \"50\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"\"\"\n    3 4 11\n    4 2 5\n    4 4 5 4\n    \"\"\") == 26\n    pass\n\n\n-----Constraints-----\n\n1 <= n, m, r <= 1000\n0 <= s_i <= 1000\n0 <= b_i <= 1000\n1 <= i <= 50\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"26\"\n"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 26\n\nInput\n2 2 50\n5 7\n4 2\n\nOutput\n50\n\nInput\n3 4 11\n4 2 5\n4 4 5 4\n\nOutput\n26\n\nInput\n2 2 50\n5 7\n4 2\n\nOutput\n50\n\n\n\n-----Constraints-----\n1 <= n <= 1000\n1 <= m <= 1000\n1 <= b_i <= 1000\n0 <= s_i <= 1000\n\n-----Time Limit Exceeded-----\nIn this problem, the computer will run a maximum of 100 loops (in Python) per execution.\n\nIn this problem, the solution will be pretty simple. Because all the numbers from 1 to n (inclusive) are considered in the range of [1, n], there will be n + 1 new problems.\n\nConstraints:\n1 <= n <= 1000\n1 <= m <= 1000\n1 <= b_i <= 1000\n1 <= s_i <= 1000\ns_i < b_i\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == str(26)\n\n\n\n\"\"\""
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"26\"\n\nInput\n1\n10\n3 1 2 2 3 4 5 6 7 8 9\n\nOutput\n6\n\nInput\n1\n10\n3 4\n7 8 9\n\nOutput\n6\n\nExplanation\nWe can take the $i$-th of the numbers on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take the $i$-th of the numbers on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take the $i$-th of the numbers on the left side, and then take the $i$-th of the numbers on the right side.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ but not a share at the price of $s_i$ on the right side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i$ and not a share at the price of $s_i$ on the left side.\n\nIn this example, the stock price of $1$ is already at the price of $2$ and we have $2$ bourles.\n\nWe can take a share at the price of $s_i"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution\u0435"
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution\u0435"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == -1\nassert solution(13) == 1\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == '4'\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 2\nassert solution(0) == -1\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(123) == 123\nassert solution(25) == -1\nassert solution(123) == 123\nassert solution(125) == -1\nassert solution(25) == 25\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == '20'\nassert solution(25) == '10'\nassert solution(2) == '-1'\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(solution(solution(stdin))) == \"3\"\nassert solution(solution(solution(stdin))) == \"20\"\nassert solution(solution(solution(stdin))) == \"4\"\nassert solution(solution(solution(stdin))) == \"7\"\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, '0123456789') == '00100000'\nassert solution(25, '0123456789') == '000'\nassert solution(2, '0123456789') == '0123456789'\n\n###\n####\n##\n##\n###\n'''\n"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == -1\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 26\n\n\n------Constraints------\n1 <= n <= 100\nstdin.length == n\nstdin contains only lowercase Latin letters.\nstdin consists of only lowercase Latin letters.\nstdin consists of only lowercase Latin letters.\nstdin consists of at least 2 integers.\nstdin consists of 1 <= b_i <= 100\nstdin consists of at least 2 integers.\nstdin consists of 2 integers in the range 1 \u2264 i \u2264 n\nstdin consists of 1 <= b_i \u2264 100\n\nTime Limit: O(n^2)\nSpace Limit: O(n^2)\n\nclass Solution:\n    def beautySum(self, s: str) -> str:\n        pass\n\nassert Solution.beautySum(Solution, inp) == \"17\"\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"a\",\"b\",\"c\"]) == \"c\"\nassert solution([\"a\",\"a\",\"b\"]) == \"b\"\nassert solution([\"a\"]) == \"a\"\nassert solution([\"a\",\"a\",\"a\",\"a\",\"a\",\"a\",\"a\"]) == \"a\"\nassert solution([\"a\",\"a\",\"a\",\"b\",\"a\",\"a\"]) == \"a\"\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 26\n\"\"\""
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 17\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 26\n\"\"\""
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 16, \"Invalid input\"\n\n\n---Palindromes---\n\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI want to make the following palindrome:\nI"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('a') == 'abacabac'\n\n\n---------------Test Cases----------------\nExample 1:\nInput:\n2\nabacabca\n1 2 3 4 5 6 7 8\nOutput:\n1\nExplanation:\nAbacaba is an antipalindromic permutation of the string s.\nFor each index i, a_{i} = b_{i} is a sum of b_{i} ranging from 1 to m.\nFor example, a_1 = b_1 = m = 5, a_2 = b_2 = 2, a_3 = b_3 = 1.\n\nExample 2:\nInput:\n2\naabac\n1 2 3 4 5 6 7 8\nOutput:\n3\nExplanation:\nThe index 3 has beauty of 4, because s_{3} = t_{3}.\nThe index 2 is the index that satisfies the beauty of s_{2} = t_{2}.\nThe index 1 is the index that satisfies the beauty of s_{1} = t_{1}.\n\nExample 3:\nInput:\n2\naabac\n2 3 4 5 6 7 8\nOutput:\n3\nExplanation:\nThe index 3 has beauty of 2, because s_{3} = t_{3}.\nThe index 2 is the index that satisfies the beauty of s_{2} = t_{2}.\nThe index 1 is the index that satisfies the beauty of s_{1} = t_{1}.\n\nExample 4:\nInput:\n4\naabcba\n2 2 3 4 5 6 7 8\nOutput:\n0\nExplanation:\nThe index 0 has beauty of 0, because s_{0} = t_{0}.\nThe index 1 has beauty of 1, because s_{1} = t_{1}.\nThe index 2 has beauty of 2, because s_{2} = t_{2}.\nThe index 3 has beauty of 3, because s_{3} = t_{3}.\nThe index 4 has beauty of 4, because s_{4} = t_{4}.\nNote:\n\nThe beauty of index 0 is 0.\nThe beauty of index 1 is 1.\nThe beauty of index 2 is 2.\nThe beauty of index 3 is 3.\nThe beauty of index 4 is 4.\n\nInput:\n3\naab\n2 3\n3 4\nOutput:\n4\nExplanation:\nThe index 4 has beauty of 4, because s_{4} = t_{4}.\nThe index 3 has beauty of 3, because s_{3} = t_{3}.\nThe index 2 has beauty of 2, because s_{2} = t_{2}.\nThe index 1 has beauty of 1, because s_{1} = t_{1}.\n\nInput:\n1\nab\n2\n3\nOutput:\n2\nExplanation:\nThe index 2 has beauty of 2, because s_{2} = t_{2}.\nThe index 1 has beauty of 1, because s_{1} = t_{1}.\nThe index 0 has beauty of 0, because s_{0} = t_{0}.\n\nInput:\n2\nab\na\nOutput:\n2\nExplanation:\nThe index 2 has beauty of 2, because s_{2} = t_{2}.\nThe index 1 has beauty of 1, because s_{1} = t_{1}.\nThe index 0 has beauty of 0, because s_{0} = t_{0}.\n\nInput:\n1\nab\na\nOutput:\n2\nExplanation:\nThe index 2 has beauty of 2, because s_{2} = t_{2}.\nThe index 1 has beauty of 1, because s_{1} = t_{1}.\nThe index 0 has beauty of 0, because s_{0} = t_{0}.\n\nInput:\n1\na\nOutput:\n0\nExplanation:\nThe index 1 has beauty of 0, because s_{1} = t_{1}.\nThe index 0 has beauty of 1, because s_{0} = t_{0}.\n\nInput:\n2\na\nOutput:\n0\nExplanation:\nThe index 0 has beauty of 0, because s_{0} = t_{0}.\nThe index 1 has beauty of 1, because s_{1} = t_{1}.\nThe index 2 has beauty of 2, because s_{2} = t_{2}.\nThe index 3 has beauty of 3, because s_{3} = t_{3}.\nThe index 4 has beauty of 4, because s_{4} = t_{4}.\nThe index 5 has beauty of 5, because s_{5} = t_{5}.\nThe index 6 has beauty of 6, because s_{6} = t_{6}.\nThe index 7 has beauty of 7, because s_{7} = t_{7}.\nThe index 8 has beauty of 8, because s_{8} = t_{8}.\nThe index 9 has beauty of 9, because s_{9} = t_{9}.\nThe index 10 has beauty of 10, because s_{10} = t_{10}.\nThe index 11 has beauty of 11, because s_{11} = t_{11}.\nThe index 12 has beauty of 12, because s_{12} = t_{12}.\nThe index 13 has beauty of 13, because s_{13} = t_{13}.\nThe index 14 has beauty of 14, because s_{14} = t_{14}.\nThe index 15 has beauty of 15, because s_{15} = t_{15}.\nThe index 16 has beauty of 16, because s_{16} = t_{16}.\nThe index 17 has beauty of 17, because s_{17} = t_{17}.\nThe index 18 has beauty of 18, because s_{18} = t_{18}.\nThe index 19 has beauty of 19, because s_{19} = t_{19}.\nThe index 20 has beauty of 20, because s_{20} = t_{20}.\nThe index 21 has beauty of 21, because s_{21} = t_{21}.\nThe index 22 has beauty of 22, because s_{22} = t_{22}.\nThe index 23 has beauty of 23, because s_{23} = t_{23}.\nThe index 24 has beauty of 24, because s_{24} = t_{24}.\nThe index 25 has beauty of 25, because s_{25} = t_{25}.\nThe index 26 has beauty of 26, because s_{26} = t_{26}.\nThe index 27 has beauty of 27, because s_{27} = t_{27}.\nThe index 28 has beauty of 28, because s_{28} = t_{28}.\nThe index 29 has beauty of 29, because s_{29} = t_{29}.\nThe index 30 has beauty of 30, because s_{30} = t_{30}.\nThe index 31 has beauty of 31, because s_{31} = t_{31}.\nThe index 32 has beauty of 32, because s_{32} = t_{32}.\nThe index 33 has beauty of 33, because s_{33} = t_{33}.\nThe index 34 has beauty of 34, because s_{34} = t_{34}.\nThe index 35 has beauty of 35, because s_{35} = t_{35}.\nThe index 36 has beauty of 36, because s_{36} = t_{36}.\nThe index 37 has beauty of 37, because s_{37} = t_{37}.\nThe index 38 has beauty of 38, because s_{38} = t_{38}.\nThe index 39 has beauty of 39, because s_{39} ="
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 5) == 'YES'\nassert solution(100, 99) == 'NO'"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 7') == 'YES'\nassert solution('100 99') == 'NO'\n\"\"\""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\n\n\"\"\"\n\nimport math\nimport sys\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 7\"\n) == \"YES\"\nassert solution(\n    \"100 99\"\n) == \"NO\""
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 7') == 'NO', 'No'\nassert solution('100 99') == 'YES', 'Yes'"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2 1\") == \"Yes\"\nassert solution(\"2 2 2\") == \"No\"\nassert solution(\"2 1 2\") == \"Yes\"\nassert solution(\"3 3 3\") == \"No\"\nassert solution(\"1 2 3 4\") == \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 2 3 4 5 6 7 8 9 0\") == \"Yes\"\nassert solution(\"1 2 3 4 5 6 7 8 9 0\") == \"No\"\nassert solution(\"0 1 2 3 4 5 6 7 8 9 0\") == \"No\"\nassert solution(\"2 2 2\") == \"Yes\"\nassert solution(\"3 3 3 2 1\") == \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 2 3 2') == 'Yes'\nassert solution('1 2') == 'No'\nassert solution('-3') == 'No'\nassert solution('3 0 1') == 'Yes'\nassert solution('4 0 1') == 'No'\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 3 2 1 0') == 'Yes'\nassert solution('3 3 2 1 0') == 'No'\nassert solution('4 1 1') == 'No'\nassert solution('2 2') == 'No'\nassert solution('3 3 2 1 0') == 'Yes'\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"23 5\") == \"Yes\"\nassert solution(\"13 2\") == \"No\"\nassert solution(\"1 2\") == \"Yes\"\nassert solution(\"0 1\") == \"No\"\nassert solution(\"1 3\") == \"Yes\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"Yes\"\n\n\n\"\"\"\n\nclass Solution:\n    def findLHS(self, a: int, b: int) -> int:\n        def h(a, b):\n            return a * b\n        return min(max(a, b), max(a, -b)) if a + b > 0 else 0\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2^3 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 8 + 4 + 2 + 1 = 23\") == \"Yes\"\nassert solution(\"2^3 + 2^3 + 2^2 + 2^1 + 2^0 = 8 + 8 + 4 + 2 + 1\") == \"No\"\n\n\n\n-----Basic idea: find the lexicographically smallest integer that can be multiplied by the sequence of integers in the input:\n\nFind the sum of all integers in the sequence and all integers in the sequence that are the powers of 2.\nCalculate the total of this sum and the total of all the other powers.\nGet the maximum of the two.\n\n\"\"\""
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1 3 2\") == \"No\"\nassert solution(\"0 1 1 0\") == \"No\"\nassert solution(\"1 2 1 0\") == \"No\"\nassert solution(\"2 2 2 2\") == \"Yes\"\nassert solution(\"3 2 2 2\") == \"Yes\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 6\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= t <= 10^7\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\nSubmissions are submitted in 3 separate threads.\n\nRuntime                                                                                                                                                                    \n1 ms                                                                                                                                                \n\"\"\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 4') == '6'\nassert solution('4 8') == '10'\nassert solution('4 5') == '4'\nassert solution('5 1') == '10'\nassert solution('1 2') == '9'\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(4)\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\n0 <= stdin[i] <= 10^4\n\"\"\"\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n,t = map(int,stdin.split())\n        if t == 0:\n            return str(n)\n        \n        def solve(n,t):\n            if n == 0:\n                return\n            \n            # Top level\n            if n == 1:\n                self.print(n, t)\n                return\n\n            # Full Glasses\n            if t < n:\n                self.print(n, t)\n                return\n            # Left and Right glass\n            for i in range(t-n):\n                self.print(n, t-i)\n                self.print(n, i)\n                self.print(n-i, t-i)\n            \n            self.print(n, t)\n        \n        solve(n,t)\n        return str(n)\n\n    def print(self, n, t):\n        if n < 0:\n            return\n        if n < t:\n            print(str(n-t))\n            return\n        print(str(n-t), end=\" \")\n        print(str(n))\n        self.print(n-t, t-n)\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"4\"\n\n\"\"\""
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 5\"\n) == 4\nassert solution(\n    \"4 8\"\n) == 6\nassert solution(\n    \"4 8\"\n) == 4\nassert solution(\n    \"4 8\"\n) == 2\nassert solution(\n    \"4 8\"\n) == 0\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0,0) == 0\nassert solution(1,0) == 1\nassert solution(2,0) == 3\nassert solution(3,0) == 4\nassert solution(4,0) == 6\n\n\nInput\n3 10\n\nOutput\n4\n\nInput\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == 4, 'incorrect answer'\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 10\") == 4\nassert solution(\"3 10\") == 6\nassert solution(\"4 8\") == 6\nassert solution(\"4 6\") == 5\nassert solution(\"5 6\") == 4\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution == 4\n\n\n-----Constraints-----\n0 < n,t \u2264 100 000\n\n--- Nguyen Van Duc ---\n\n\n-----Time Limit-----\nO(n log n)\n\n\n-----Space Limit-----\n-10 10\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.n, self.t = map(int, stdin.split())\n\n    def solution(self):\n        # This is 1 2 4 7... n times\n        result = 0\n        while True:\n            last_row = int(math.sqrt(self.n))\n            for i in range(0, self.n, last_row):\n                if i == self.n - 1:\n                    result += last_row\n                    break\n                if i == 0:\n                    result += last_row\n                    continue\n                result += (last_row - 1) * last_row\n            if self.n < last_row:\n                result += last_row\n                break\n        return result"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(1)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == -1"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\""
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\n\n----Code----\n\nn = int(input())\n\nfor i in range(n):\n    x,y = map(int,input().split())\n    if x>y:\n        print(0)\n    else:\n        print(1)\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, [1, 1, 2, 2]) == -1\n\n\n-----Solution-----\nInput\n3\n5\n5 1\n1 1\n0 0\n0 0\n\nOutput\n-1\n\"\"\"\n\nn = int(input())\ns = list(map(int, input().split()))\na = [[s[0],s[1]]]\nfor i in range(2, n+1):\n    a.append([a[i-1][0],a[i-1][1]+s[i]])\nfor i in range(1,n+1):\n    if s[i] == 0:\n        pass\n    else:\n        a.append([a[i-1][0]+s[i],a[i-1][1]])\na.sort(key=lambda x:x[1])\nprint(a[0][1])\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\" or solution(stdin) == \"-1\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"-1\"\nassert solution(\"2 3\") == \"-1\"\n\n\nfor i in range(int(stdin)):\n    x,y = map(int, stdin.split())\n    print(solution(str(x*y)))\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '0'\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\n\nExplanation\n\nIn the first sample, the only vertices remain in the initial rectangle, and one remains, and this is equivalent to the area of the rectangle, but, even if we are now not able to correct the area, we should still be able to build the initial rectangle from the remaining vertices, which is, approximately the same as the actual area of the swimming pool.\n\nIn the second sample, two opposite corners of the initial rectangle are given, and that gives enough information to say that the rectangle is actually a unit square.\n\n\nExample 1:\n\nInput:\n2\n0 0\n1 1\n1 1\n\nOutput:\n3\n\n\nExample 2:\n\nInput:\n1\n-1 1\n\nOutput:\n1\n\n\nExample 3:\n\nInput:\n3\n0 1 1\n2 2 2\n\nOutput:\n2\n\n\n\"\"\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == \"1\"\nassert solution(0) == \"1\"\nassert solution(0) == -1\n\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nGuaranteed constraints:\n1 \u2264 n \u2264 4\n\n[input] integer x,y\n\nConstraints:\n-1000 \u2264 x,y \u2264 1000\n\n\n[output] string\n\nThe minimum rectangle that remains. \n\"\"\""
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"4\"\nassert solution(\"5\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"10\") == \"4\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n0 < stdin.length < 1000\n1 <= a, b <= n\n\nTime Limit: 1 sec\nSpace Limit: 1KB\n\n----CODE----\n\nn = int(stdin.strip())\nleft = int(stdin.strip())\nright = int(stdin.strip())\n\nleftBars = right - left\n\nrightBars = n - right\n\nprint(leftBars)\nprint(rightBars)"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5, \"Should be 5\"\nassert solution(stdin) == 4, \"Should be 4\"\nassert solution(stdin) == 2, \"Should be 2\"\nassert solution(stdin) == 1, \"Should be 1\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2\") == 2, \"Wrong output\"\nassert solution(\"5 3\") == 4, \"Wrong output\"\nassert solution(\"20 4\") == 6, \"Wrong output\"\nassert solution(\"20 5\") == 4, \"Wrong output\"\nassert solution(\"20 6\") == 2, \"Wrong output\""
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n\n'''"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == answer\n\"\"\""
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"4\"\nassert solution(input) == \"6\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, [1, 2, 3]) == \"NO\"\nassert solution(2, [1, 2, 3]) == \"NO\"\nassert solution(3, [\"01\", \"01\", \"00\"]) == \"YES\"\nassert solution(4, [1, 2, 3, 4, 5]) == \"YES\"\nassert solution(5, [1, 2, 3, 4, 5]) == \"NO\"\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['0', '0', '0', '0', '0', '0']) == 'YES', \"Should return YES\"\nassert solution(['1', '1', '1', '1', '1', '1']) == 'NO', \"Should return NO\"\nassert solution(['0', '0', '0', '0', '0', '0']) == 'NO', \"Should return NO\"\n\n\n-----Be careful-----\nWe need to know whether it is possible to sort the array in ascending order or not.\nThe number of operations can be limited using the following constraints:\n\n1 \u2264 n \u2264 300000\n1 \u2264 a_1, a_2,..., a_{n} \u2264 200000\nThe elements can only be 1, 0, and 0.\n\nIn other words, we need to check whether it is possible to swap a_i with a_i+1, for all i.\n\n\"\"\""
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(6, [1, 2, 5, 3, 4, 6]) == \"YES\"\nassert solution(6, [1, 2, 3, 4, 5, 6]) == \"NO\""
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a=[1,2,3,4,5]) == \"NO\"\nassert solution(a=[0,1,2,3,4,5]) == \"YES\"\nassert solution(a=[0,2,1,3,4,5]) == \"NO\"\nassert solution(a=[0,3,1,2,4,5]) == \"YES\"\nassert solution(a=[1,1,1,1,1,1]) == \"YES\"\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\nInput\n6\n1 2 5 3 4 6\n01100\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\nIn the second example, you may swap a_2 and a_4, but then swap a_2 and a_5, and then swap a_5 and a_6.\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"NO\"\nassert solution(\"1 2 3 4 5 6\") == \"YES\"\n\nassert solution(\"1 2 3 4 5 6\") == \"NO\"\nassert solution(\"1 2 3 4 5 6\") == \"YES\"\n\nassert solution(\"2 1 3 4 5 6\") == \"YES\"\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\nExplanation\n\nInput 1:\n\nInput 2:\n\nInput 3:\n\nInput 4:\n\nInput 5:\n\nOutput:\n\n2\n0\n4\n5\n\n-----Constraints-----\n\n1 <= n <= 200000\n\n1 <= stdin.length <= 2000\n\n1 <= a_1, a_2, a_3, a_4 <= stdin.length\n\n2 <= a_1, a_2, a_3, a_4 < n\n\n1 <= a_5 <= n - 1\n\nConstraints:\n\n1 <= stdin.length <= 200000\n0 <= stdin[i] <= 1\n\n3 <= a_1, a_2, a_3 <= 1\na_4 <= n - 1\n\n1 <= stdin.length <= 10^4\n\n1 <= n <= 200000\n\n-----Solution-----\n\nRuntime: 20 ms, faster than 14.11% of Python3 online submissions for Array Sorted Multiplication.\nMemory Usage: 13.8 MB, less than 29.27% of Python3 online submissions for Array Sorted Multiplication."
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n\nprint(\"Example 1:\")\nprint(\"Input : \", end=\"\")\nprint(input())\nprint(\"Exception : \", end=\"\")\nprint(\"NO\")"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n\"\"\""
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '18'\nassert solution(input()) == '11'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"10\"\nassert solution(inp) == \"11\"\nassert solution(inp) == \"18\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4a\"]) == \"10\"\nassert solution([\"2a\"]) == \"1\"\nassert solution([\"2a\", \"a\"]) == \"1\"\nassert solution([\"1f\", \"2d\"]) == \"10\"\nassert solution([\"1f\", \"3a\"]) == \"10\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(11)\nassert solution(stdin) == str(18)\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1a\"), \"Expected 1, got 0\"\nassert solution(\"4a\"), \"Expected 4, got 2\"\nassert solution(\"4d\"), \"Expected 4, got 3\"\nassert solution(\"4e\"), \"Expected 0, got 2\"\nassert solution(\"5e\"), \"Expected 2, got 3\"\n"
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1f) == 10, 'Expected answer 10'\nassert solution(2d) == 10, 'Expected answer 10'\nassert solution(4a) == 11, 'Expected answer 11'\nassert solution(5e) == 18, 'Expected answer 18'\n\n---Time complexity: O(n)\n---Space complexity: O(n)"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input().strip()\n) == \"=\", \"The inputs are incorrect\"\n\n\"\"\"\n\n\nclass Solution:\n    def solve(self, stdin: str, stdout: str) -> str:\n        pass\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"=\", \"fail\"\n\n\n-----Advanced-----\n\nImplement the function solution(n, b, x, y) that given two integers n and b_X and b_Y, returns the best solution for the following problem:\n\nWe define X = b_{x} (1 \u2264 b_{x} \u2264 b_{y}) and Y = b_{y} (1 \u2264 b_{y} \u2264 b_{x}) where b_{y} is the base\n\nYou need to define the following functions:"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '='\n\nInput\n4 4\n2 8 9\n8 5 7\n2 7 6\n9 9 1\n\nOutput\n>\n\nInput\n4 4\n2 8 9\n8 5 7\n2 7 6\n9 9 1\n\nOutput\n<\n\nInput\n6 4\n1 0 1 1 1 1\n1 0 2\n2 0 4\n3 0 7\n\nOutput\n=\n\nInput\n5 5\n1 0 1 1 1 1\n1 0 2\n2 0 4\n3 0 7\n\nOutput\n<\n\nInput\n5 6\n1 0 1 1 1 1\n1 0 2\n2 0 4\n3 0 7\n\nOutput\n=\n\nInput\n4 4\n2 8 9\n8 5 7\n2 7 6\n9 9 1\n\nOutput\n>\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\"), \"1 0 1 1 1\"\nassert solution(\"2 5\"), \"1 0 2\"\nassert solution(\"2 3\"), \"1 0 2 1\"\nassert solution(\"2 2\"), \"1 0 2 1\"\nassert solution(\"10 4\"), \"1_1_1_1_1\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1011101_2') == '<'\nassert solution('1010001_2') == '>'\nassert solution('1010001_1') == '='\nassert solution('1010001_0') == '='\nassert solution('1111_0') == '='\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 6') == '=', \"Passed\"\nassert solution('1 2') == '>', \"Passed\"\nassert solution('2 3') == '<', \"Passed\"\nassert solution('1 4') == '>', \"Passed\"\nassert solution('4 5') == '=', \"Passed\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \">=\"\n\n\n-----Constraints-----\n\n0 < n <= 100\n0 < b_{x} < b_{y}\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"01\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"011\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0000_5\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28\" in B\n\n-----Time Limit 1:00 in 10 seconds-----\n\nA = \"0001_3_4_5_6_7_8_9_10_11_12_13_14_15_16_17_18_19_20_21_22_23_24_25_26_27_28_29"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"=\", 'The output should be \\'<\\', \\'=\\', or \\'>\\'. Check the code in the test folder.'"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '='\n\n\n'''\n\n\nclass Solution:\n    def compare(self, num1, num2, base):\n        if base == 'b':\n            return num1 < num2\n        if base == 'l':\n            return num1 > num2\n        if base == 'x':\n            return num1 == num2\n        else:\n            return num1 == num2 or num1 > num2\n\n    def solution(self, n, x, y):\n        return '=' if self.compare(n, x, base='b') and self.compare(n, y, base='l') else '>'\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"=\",'solution should return \"=\"'\nassert solution(stdin) == \"<\",'solution should return \"<\"'\nassert solution(stdin) == \">\",'solution should return \">\"'\nassert solution(stdin) == \"=\",'solution should return \"=\"'\nassert solution(stdin) == \">\",'solution should return \">\"'\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 1') == 'BitLGM'\nassert solution('2 2') == 'BitLGM'\nassert solution('3 1') == 'BitLGM'\nassert solution('3 2') == 'BitLGM'\nassert solution('3 3') == 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"BitLGM\"\n\"\"\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"BitLGM\"\nassert solution(\"2 2\") == \"BitLGM\"\nassert solution(\"2 3\") == \"BitLGM\"\nassert solution(\"2 4\") == \"BitLGM\"\nassert solution(\"2 5\") == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"BitLGM\"\nassert solution(\"3 1\") == \"BitAryo\"\n\nprint('solution() worked!')"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"BitLGM\"\nassert solution(stdin) == \"BitAryo\"\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1\") == \"BitLGM\"\nassert solution(\"1 2\") == \"BitAryo\"\nassert solution(\"1 3\") == \"BitLGM\"\nassert solution(\"1 4\") == \"BitAryo\"\nassert solution(\"1 5\") == \"BitLGM\"\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2') == 'BitLGM'\nassert solution('2 1') == 'BitLGM'\nassert solution('3') == 'BitLGM'\nassert solution('3 1') == 'BitLGM'\nassert solution('4') == 'BitLGM'\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'BitLGM'\n\n\nInput\n2\n3 2\n\nOutput\nBitLGM\n\nInput\n2\n3 2\n\nOutput\nBitAryo\n\"\"\""
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"BitLGM\"\nassert solution(\"2\") == \"BitAryo\"\nassert solution(\"3\") == \"BitLGM\"\nassert solution(\"4\") == \"BitLGM\"\nassert solution(\"5\") == \"BitAryo\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 6) == 4\nassert solution(3, 9) == 1\nassert solution(3, 11) == 2\nassert solution(3, 12) == 2\nassert solution(3, 13) == 2\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= k <= 10^9\n\n\n-----Time Complexity-----\n\nO(n^2)\n\n\n------Space Complexity-----\n\nO(n)\n\n\n------Tutorial-----\n\nhttps://www.draw.io/?lightbox=1&highlight=0000ff&edit=_blank&layers=1&nav=1&title=Basic%20drawing%20-%28Vova%29&url=https%3A%2F%2Fdocs.draw.io%2Fenvironments%2Fbasic_drawing%2Fbasic_drawing.html\n\n1) n, k = map(int, stdin.split())\n\n2) n = n * (n-1) // 2\n\n3) if n % 2 == 0:\n        n = n + 1\n4) n = n * n // 2\n\n5) k = k % (10^9)\n\n6) while (k < n):\n        k = k + n\n\n7) print(f\"{n} ways = {solution(str(k))}\")\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2\", \"3\", \"2\", \"1\"]) == \"1\"\nassert solution([\"4\", \"4\", \"2\", \"3\", \"1\", \"1\"]) == \"4\"\nassert solution([\"3\", \"2\", \"1\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"4\"]) == \"4\"\nassert solution([\"4\", \"1\", \"4\", \"1\"]) == \"4\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 4\") == '4'\nassert solution(\"3 6\") == '4'\nassert solution(\"3 9\") == '3'\nassert solution(\"3 14\") == '2'\nassert solution(\"3 18\") == '1'\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\n\n\n-----Explanation-----\n\nIn the example above, the valid deck is:\n\n  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.\n\nAfter removing all cards from the top and remaining cards from the bottom, the deck will be:\n\n  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.\n\nAfter removing all cards from the bottom, the deck will be:\n\n  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.\n\nAfter removing all cards from the top, the deck will be:\n\n  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.\n\nFinally, the final deck will be:\n\n  x = 0, y = 0;  x = 1, y = 0;  x = 2, y = 0;  x = 0, y = 1.\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100 000.\n1 \u2264 k \u2264 10^9.\n\n\"\"\""
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= n <= 100000\n1 <= k <= 10^9\n\n\n------Code-------\n\nfrom collections import deque\n\n\nclass Solution:\n    def findSolution(self, n: int, k: int) -> str:\n        a, b = 0, 1\n        for _ in range(n):\n            a, b = b, a + (k // (n - 1) - 1) * b\n            k %= (n - 1)\n        return str(a % (b * 10**9 + 1))\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"solution() should be undefined for this example\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\n\nSample Output\nNO\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('d') == 'NO'\nassert solution('z') == 'YES'\nassert solution('aa') == 'YES'\nassert solution('aaaa') == 'NO'\nassert solution('zzz') == 'NO'\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aabb\"), \"NO\"\nassert solution(\"aacaab\"), \"YES\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"aabb\",\"aaab\"]) == \"YES\"\nassert solution([\"aabb\",\"aab\"]) == \"NO\"\nassert solution([\"aaabb\",\"aab\"]) == \"YES\""
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"babbbba\") == \"YES\"\nassert solution(\"babba\") == \"NO\"\nassert solution(\"babbbba\") == \"YES\"\nassert solution(\"aab\") == \"NO\"\nassert solution(\"aabba\") == \"YES\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"aabb\",\"ab\",\"bab\"]) == \"YES\", \"Test case failed\"\nassert solution([\"aabb\",\"bab\",\"bac\",\"badab\"]) == \"NO\", \"Test case failed\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == 'NO'\nassert solution(s) == 'YES'\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\n\nimport sys\n\nimport math\nfrom collections import deque\n\ninput = sys.stdin.readline"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, [3, 3, 5, 6, 5]) == 1\nassert solution(3, [1, 1, 2]) == 2\nassert solution(9, []) == 0\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, [5,3,5,1,4,2,1]) == 3\nassert solution(5, [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\nassert solution(1, [3, 1, 2, 3, 3]) == 1\nassert solution(2, [4, 2, 3, 5, 5, 6]) == 1\nassert solution(3, [3, 2, 1]) == 1\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2, \"Incorrect solution\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\npass\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3/10\"\nassert solution(stdin) == \"3/7\"\n\nassert solution(stdin) == \"1/10\"\nassert solution(stdin) == \"1/7\"\n\nassert solution(stdin) == \"1/3\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3/10\"\nassert solution(stdin) == \"3/7\"\nassert solution(stdin) == \"3/8\"\nassert solution(stdin) == \"3/9\"\nassert solution(stdin) == \"3/10\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3/10'\nassert solution(stdin) == '3/7'\nassert solution(stdin) == '3/6'\nassert solution(stdin) == '3/5'\nassert solution(stdin) == '3/4'\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 2') == '3/10'\nassert solution('7 1 2') == '3/7'\nassert solution('7 1') == '3/7'\nassert solution('3 1') == '3/10'\nassert solution('2') == '0'\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3/10\"\n\"\"\"\n\nfrom collections import Counter"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3/10\"\nassert solution(stdin) == \"3/7\"\nassert solution(stdin) == \"3/3\"\n\n\n-----Sample Input-----\n\nInput\n6\n\nOutput\n3/10\n\nInput\n5\n\nOutput\n2\n\n-----Sample Output-----\n\nPrint 1/3 (we are the same, as both are the same).\n\n-----Constraints-----\n\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin.length \u2264 5\u00b710^18\n1 \u2264 stdin.length \u2264 10^5\n2 \u2264 stdin.length \u2264 100\n1 \u2264 t \u2264 100\n1 \u2264 w \u2264 5\u00b710^18\n1 \u2264 b \u2264 100\n1 \u2264 t \u2264 100\n\n------Code------"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(10, 3, 2) == \"1/10\"\nassert solution(7, 1, 2) == \"3/7\"\nassert solution(0, 0, 0) == \"3/10\"\nassert solution(1, 1, 1) == \"2/3\"\nassert solution(1, 1, 2) == \"1/1\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3/10\"\nassert solution(stdin) == \"3/7\"\nassert solution(stdin) == \"3/10\"\nassert solution(stdin) == \"3/7\"\n\n\n-----Constraints-----\n\n1 \u2264 t \u2264 100\n1 \u2264 w \u2264 5\u00b710^18\n1 \u2264 b \u2264 10^18\n\nTime Limit: 1 seconds\n\nSample Input-1\n\n5 3 2\n\nSample Output-1\n\n3/10\n\nSample Input-2\n\n3 7 3\n\nSample Output-2\n\n3/7\n\nSample Input-3\n\n1 1 1\n\nSample Output-3\n\n3/3\n\nChallenges\nTime Limit: 1 seconds\nSample Input-4\n\n7 3 3\n\nSample Output-4\n\n3/9\n\n\n-----Constraints-----\n\n1 \u2264 t \u2264 100\n1 \u2264 w \u2264 5\u00b710^18\n1 \u2264 b \u2264 10^18\n\nTime Limit: 1 seconds\n\nSample Input-1\n\n10 3 2\n\nSample Output-1\n\n1/10\n\n\n-----Constraints-----\n\n1 \u2264 t \u2264 100\n1 \u2264 w \u2264 5\u00b710^18\n1 \u2264 b \u2264 10^18\n\nTime Limit: 1 seconds\n\nSample Input-2\n\n7 3 3\n\nSample Output-2\n\n3/9\n\nSample Input-3\n\n1 1 1\n\nSample Output-3\n\n3/3\n\nSample Input-4\n\n1 1 1\n\nSample Output-4\n\n3/9\n\nChallenges\nTime Limit: 1 seconds\nSample Input-4\n\n7 3 3\n\nSample Output-4\n\n1/9\n\n\n'''\n\n\nfrom sys import stdin\nimport math\nt,w,b=map(int,stdin.readline().rstrip().split())"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3/10\"\n\n\n-----Constraints-----\n\n0 \u2264 t, w, b \u2264 5\u00b710^18\n\nt \u2264 1.\nw \u2264 b\nb > 1\n\nInput\n\n10 3 2\n\nOutput\n\n3/10\n\n------Solution-----\n\nInput\n\n1 2 3\n\nOutput\n\n1/2\n\n------Solution-----\n\nInput\n\n7 1 2\n\nOutput\n\n1/4\n\n------Solution-----\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2/3\"\n\"\"\""
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '?'\n\n\n-----Constraints-----\n\n1 <= x <= 100\n0 <= y <= 100\n0 <= z <= 100\n\"\"\"\nimport collections\nimport sys\n\ninput = lambda: sys.stdin.readline().rstrip()\nint_input = lambda: int(input())\nmulti_input = lambda: map(int, input().split())\nmulti_map = lambda x: list(map(int, input().split()))"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1 1 1') == '-', 'First case failed'\nassert solution('0 0 0 0') == '+', 'Second case failed'\nassert solution('1 0 0 0') == '0', 'Third case failed'"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 7) == \"-\", \"should be -\"\nassert solution(2, 0) == \"+\", \"should be \"+\nassert solution(0, 1) == \"?\", \"should be?\"\nassert solution(1, 2) == \"?\", \"should be?\"\nassert solution(1, 0) == \"+\", \"should be +\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"?\"\nassert solution(2) == \"+\"\nassert solution(1) == \"+\"\nassert solution(0) == \"+\"\nassert solution(3) == \"+\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 7 0\") == \"-\", \"Result is wrong!\"\nassert solution(\"2 0 1\") == \"+\", \"Result is wrong!\"\nassert solution(\"0 0 1\") == \"?\", \"Result is wrong!\"\nassert solution(\"0 0 1\") == \"?\", \"Result is wrong!\"\nassert solution(\"1 1 0\") == \"?\", \"Result is wrong!\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,7,0) == \"?\"\nassert solution(2,0,1) == \"?\"\nassert solution(1,1,0) == \"?\"\nassert solution(0,1,1) == \"-\"\nassert solution(0,0,1) == \"+\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"?\"\nassert solution(\"1\") == \"?\"\nassert solution(\"2\") == \"?\"\nassert solution(\"3\") == \"+\"\nassert solution(\"4\") == \"-\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 7 0\") == \"-\"\nassert solution(\"2 0 1\") == \"0\"\nassert solution(\"0 0 1\") == \"?\"\nassert solution(\"0 1 0\") == \"+\"\nassert solution(\"1 0 1\") == \"+\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"?\", \"Expected '?\" but got '2'\"\nassert solution(\"1\") == \"+\", \"Expected '+' but got '1'\"\nassert solution(\"0\") == \"-\", \"Expected '-' but got '0'\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"?\", 'incorrect result'\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == 3\nassert solution(\"3 3\") == 2\nassert solution(\"2 2\") == 1\nassert solution(\"3 3\") == -1"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"-1\"\n\n\nExample 1:\n\nInput:\n2\nU\n\nOutput:\n-1\n\nExplanation:\nThe robot has not started to move to $(0, 0)$ in the first operation, and the robot has not finished its path in the second operation.\n\"\"\"\n\n\nclass Solution:\n    def findMinStep(self, s: str) -> int:\n        for i in range(len(s) - 1):\n            if s[i]!= s[i + 1]:\n                return i + 1\n        return 0\n\n    def findMinStep2(self, s: str) -> int:\n        for i in range(len(s)):\n            if i < len(s) - 1 and s[i] == s[i + 1] == s[i + 2]:\n                return i + 1\n            else:\n                return 0\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(solution) == \"3\"\nassert solution(solution) == \"3\"\nassert solution(solution) == \"1\"\nassert solution(solution) == \"-1\"\nassert solution(solution) == \"0\"\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \" + str(solution))\nprint(\"Exception : \" + str(3))\nprint(\"Output : \" + str(3))\nprint(\"Expected : \" + \"3\")\nprint(\"Status : OK\")\nprint()\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 3, 'Test failed'"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"-1\""
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4, \"-2 3\") == 3\nassert solution(5, \"-2 1\") == 0\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n\n------IMPORTANT------\n\nThere are no tests, so you do not need to worry about the correctness of your code. You can read more about it online from LeetCode \u2014 https://leetcode.com/explore/interview/card/google/100-200/235/360/difficulty/medium/31353/\n\"\"\"\n\nclass Solution:\n    def prefixLength(self, s: str) -> int:\n        if len(s) <= 1:\n            return 0\n        elif len(s) == 2 and s[0] == s[1]:\n            return 2\n        else:\n            return 1 + self.prefixLength(s[1:])\n        \n        \n        \n        "
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0110\") == 1, 'Solution wrong'\nassert solution(\"1110\") == 2, 'Solution wrong'\nassert solution(\"1020\") == 2, 'Solution wrong'\nassert solution(\"10010\") == 5, 'Solution wrong'\nassert solution(\"1000000\") == 1, 'Solution wrong'\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('010010') == 1\nassert solution('00110010') == 1\nassert solution('001111') == 0\nassert solution('01010001') == 2\nassert solution('10101') == -1\n\n\n-----Constraints-----\n1 <= T <= 10^4\n0 <= n <= 10^5\n1 <= x <= 10^9\n\n[input] string stdin\n\nA single line of characters consisting of 0 and 1.\n\n[output] string\n\nAn integer that represents the number of prefixes of $t$ with balance equal to $x$.\n\n[input] string stdin\n\nTwo lines of characters.\n\n[output] string\n\nAn integer that represents the number of prefixes of $t$ with balance equal to $x$.\n'''\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == -1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\n\n-----Be Careful-----\n\nIf $x = 10^5$, $s = 10010$, the number of prefixes of $s$ = 5 is $5$, and there are infinite prefixes of $s = $010010$, $s
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 3"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 10) == 3\nassert solution(10010, 10) == 3\nassert solution(10010, 0) == 0\nassert solution(0, 1) == 0\nassert solution(0, 2) == -1\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 13\n\nInput\n4\n6 10\n010010\n5 3\n10101\n1 0\n0\n2 0\n01\n\nOutput\n3\n0\n1\n\ntips: use dict to store the balance. \n\"\"\""
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3, \"Should be 3\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(531) == 1\nassert solution(2321) == 2\nassert solution(1212) == 3\nassert solution(110) == 1\nassert solution(111111) == 2\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n\n1 <= k <= 10^9\n\nInput Format\n\nA single line of standard input contains two integers n and k.\n\nConstraints\n\nPrint the minimal number of digits to erase.\n\nOutput Format\n\nPrint the minimal number of digits to erase.\n\nSample Input\n\n30020 3\n\nSample Output\n\n3\n\nExplanation\n\n30020 == 30020\n\nSample Input\n\n100 9\n\nSample Output\n\n1\n\nExplanation\n\n100 == 100\n\nSample Input\n\n10203049 2\n\nSample Output\n\n3\n\nExplanation\n\n10203049 == 10203049\n\nSample Input\n\n30 10203049\n\nSample Output\n\n3\n\nExplanation\n\n30 == 30\n\n\"\"\"\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n\n\"\"\""
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(10203049) == 2\nassert solution(11) == 1\nassert solution(30020) == 2\nassert solution(100) == 1\nassert solution(1000) == 2\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '3'\n\nassert solution(input) == '3'\n\nassert solution(input) == '3'\n\nassert solution(input) == '3'\n\nassert solution(input) == '3'\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == 3\nassert solution(s,3) == 3\nassert solution(s,13) == 3\nassert solution(s,3,True) == 3\nassert solution(s,3,False) == 3\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"2 1 1\"\nassert solution(stdin) == \"1 1 1\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == answer, \"Failed\"\n\"\"\"\nimport sys"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 6 2') == '3'\nassert solution('1 2 1 1') == '1'\nassert solution('5 4 1 1') == '2'\nassert solution('100 100 1000000000000000000 100 100') == '50505050505051'"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"1 1 1\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n  \"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\n  \"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\n  \"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\n  \"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\nassert solution(\"100 100 1000000000000000000 100 100\") == \"101010101010101 50505050505051 50505050505051\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n\"\"\"\n1 3 8 1 1\n\"\"\"\n) == \"3 2 3\"\nassert solution(\n\"\"\"\n4 2 9 4 2\n\"\"\"\n) == \"2 1 1\"\nassert solution(\n\"\"\"\n5 5 25 4 3\n\"\"\"\n) == \"1 1 1\"\nassert solution(\n\"\"\"\n100 100 1000000000000000000 100 100\n\"\"\"\n) == \"101010101010101 50505050505051 50505050505051\"\nassert solution(\n\"\"\"\n\"\"\"\n\n) == \"0\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3 8 1 1\") == \"3 2 3\"\nassert solution(\"4 2 9 4 2\") == \"2 1 1\"\nassert solution(\"5 5 25 4 3\") == \"1 1 1\""
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Katie'"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Katie\"\nassert solution(input()) == \"Kuro\"\nassert solution(input()) == \"Shiro\"\nassert solution(input()) == \"Kuro\"\nassert solution(input()) == \"Shiro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"Kuroo\") == \"Kuro\"\nassert solution(\"Shiro\") == \"Katie\"\nassert solution(\"Zhang\") == \"Zhang\"\nassert solution(\"HiCodeforces\") == \"HiCodeforces\"\nassert solution(\"foPaErcvJ\") == \"Kota\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'Draw'\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"Kuroo\", [\"Kuroo\"]) == \"Katie\"\nassert solution(\"Shiro\", [\"Shiro\", \"Katie\"]) == \"Kuro\"\nassert solution(\"Threefriends\", [\"Threefriends\"]) == \"Katie\"\nassert solution(\"HiCodeforces\", [\"HiCodeforces\"]) == \"HiCodeforces\"\nassert solution(\"foPaErcvJ\", [\"foPaErcvJ\"]) == \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Kuro\"\n\nassert solution(stdin) == \"Katie\"\n\nassert solution(stdin) == \"Shiro\"\n\nassert solution(stdin) == \"Kuro\"\n\nassert solution(stdin) == \"Shiro\""
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"Draw\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"Kuroo\") == \"Kuro\"\nassert solution(\"Kuroo\") == \"Kuro\"\nassert solution(\"Kuroo\") == \"Kuro\"\nassert solution(\"Kuroo\") == \"Kuro\"\nassert solution(\"Kuroo\") == \"Kuro\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Katie'\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 5 10 5 4\") == \"1\"\nassert solution(\"12 4 12 4 1\") == \"3\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n'''\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 1\") == \"3\"\nassert solution(\"5 5 10 4\") == \"0\"\nassert solution(\"12 4 12 4 1\") == \"15\"\nassert solution(\"15 1 100 0 0\") == \"15\"\nassert solution(\"15 1 100 0 0\") == \"15\"\n\nInput\n5 5 10 5 4\n\nOutput\n3\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"10 2\", \"2 3\", \"1 4\"]) == \"3\"\n\nassert solution([\"1 2\", \"1 4\", \"1 7\"]) == \"3\"\n\nassert solution([\"1 0\", \"3 2\"]) == \"3\"\n\nassert solution([\"5 6\", \"1 2\", \"2 4\", \"3 5\", \"4 6\", \"4 5\", \"5 6\", \"6 5\", \"6 4\"]) == \"5\"\n\nassert solution([\"10 6\", \"1 2\", \"1 4\", \"4 3\", \"3 2\", \"2 4\", \"3 5\", \"5 6\", \"6 4\", \"4 5\", \"5 7\", \"7 6\"]) == \"3\""
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '15'\nassert solution(stdin) == '15'\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"15 0 4 100\") == \"1\"\nassert solution(\"15 1 100 0\") == \"3\"\nassert solution(\"15 1 100 0 1\") == \"15\"\nassert solution(\"15 1 100 0 2\") == \"15\"\nassert solution(\"15 1 100 0 3\") == \"15\"\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '10'\nassert solution(stdin) == '13'\n\nassert solution(stdin) == '30'\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3 10 5 4\") == 3\nassert solution(\"12 4 12 4 1\") == 1\nassert solution(\"15 1 100 0 0\") == 15\nassert solution(\"17\") == 5\nassert solution(\"15 1 100 0 0\") == 15\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(27) == 3\nassert solution(511) == 11\nassert solution(7) == 11\n\n\n\n-----Submissions-----\n\n>>> #----Input----\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10\") == 10\nassert solution(\"1\") == 1\nassert solution(\"15\") == 2\n\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\nInput\n\n27\n\nSample Output\n\n2\n2\n6\n\nExplanation\n\nThe numbers in the representation are integers.\n\n'''\n\nclass Solution:\n    def countPrimes(self, n: int) -> int:\n        self.prime = [True] * n\n        self.prime[0], self.prime[1] = False, False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if self.prime[i]:\n                for j in range(i * i, n, i):\n                    self.prime[j] = False\n        return sum(self.prime)\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stderr=None, input=27) == 3\nassert solution(stderr=None, input=11) == 3\nassert solution(stderr=None, input=11) == 3\n\n\n'''"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 3\nassert solution(10) == 1\nassert solution(7) == 5\nassert solution(15) == 3\nassert solution(100) == 5\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(27) == 3\nassert solution(11) == 11\nassert solution(12) == 12\nassert solution(999) == 999\nassert solution(3) == 3"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(27) == 3\nassert solution(5111111) == 5\nassert solution(5) == 11\nassert solution(0) == 0\nassert solution(12345) == 12345\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(27) == 3\nassert solution(1111) == 2\nassert solution(1111) == 1\nassert solution(23) == 4\nassert solution(4) == 2\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(27) == 3\nassert solution(511) == 5\nassert solution(1111) == 1\nassert solution(1111) == 1\nassert solution(3) == 0\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(27) == 3\nassert solution(35) == 11\nassert solution(8) == 11\nassert solution(1) == 1\nassert solution(2) == 2\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(27) == 3\nassert solution(3) == 5\nassert solution(14) == 11\nassert solution(11) == 11\nassert solution(123) == 1111\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"3 3\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input() == \"NO\") == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n[\n    [],\n    [2, 2],\n    [3, 3],\n    [3, 4],\n    [3, 5],\n    [4, 5],\n    [5, 5],\n    [6, 6],\n    [6, 7]\n]) == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"NO\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"2 5\") == \"YES\"\nassert solution(\"2 6\") == \"YES\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\"\nimport sys"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"4\", \"9\"]) == \"0\"\nassert solution([\"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == \"0\"\nassert solution([\"10\", \"10\", \"10\", \"10\", \"10\", \"10\"]) == \"0\"\nassert solution([\"10\", \"10\", \"10\", \"10\", \"10\", \"10\"]) == \"0\"\nassert solution([\"30\", \"30\", \"30\", \"30\", \"30\", \"30\"]) == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"15\"\nassert solution(input()) == \"14\"\nassert solution(input()) == \"0\"\n\"\"\""
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '14'\n\n----Code----\n\nn, m = map(int, stdin.split())\na = int(input())\nb = int(input())"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 3 8\") == \"14\"\nassert solution(\"2 7 3 7\") == \"14\"\nassert solution(\"30 6 17 19\") == \"0\"\nassert solution(\"30 6 17 19\") == \"0\"\nassert solution(\"30 6 17 19\") == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5') == '15'\nassert solution('2 7 3 8') == '14'\nassert solution('30 6 17 19') == '0'\nassert solution('3 7 3 7') == '0'\nassert solution('0') == '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('{}') == '1'\nassert solution('{}') == '0'\nassert solution('{}') == '0'\nassert solution('{}') == '0'\nassert solution('{}') == '0'\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"14\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"14\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\")((\")\nassert solution(\"))((\")\nassert solution(\"))(())\nassert solution(\")(())()\")\nassert solution(\"())(\"))\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"input contains invalid data\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n0 <= a_1, a_2,..., a_{n} <= 10^4\na_{0} + a_{1} +... + a_{n-1} = stdin.length\n\nTime Limit: 10^6 s\n\n------Solu\u00e7on------\n\nfor a in stdin:\n    a_len = len(a)\n    for i in range(a_len):\n        sum = 0\n        for j in range(a_len-i-1):\n            sum += a[j]\n        sum += a[a_len-i-1]\n        if sum % 2!= 0:\n            break\n    if sum % 2 == 0:\n        print(sum)\n        break\n\nO(n)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 100k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n\nConstraints\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\n\nTime Limit: 40 seconds\nSpace Limit: 10k\n\n---------------------------------------\nMedium\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\n-----Examples-----\nExample 1:\n\nInput\n\n3\n1 5 3\nOutput\n\n-1\n1\n1\n1\n1\n\nExample 2:\n\nInput\n\n3\n2 -2 3 3\nOutput\n\n0\n\n\nExample 3:\n\nInput\n\n3\n2 -3 -2\nOutput\n\n2\n2\n\nExample 4:\n\nInput\n\n4\n1 -2 -3 -5 1\nOutput\n\n-1\n\n\n-----Constraints-----\n\n0 <= n <= 10^5\n\n\n-----Time Complexity-----\nThe time complexity of the above algorithm is O(n^2).\n\nFunctionality of the algorithm:\n\nFor every element n, we need to find all subsequences whose sum is odd in a_1, a_2,..., a_{n-1} which is equal to n.\nIn this process we can find all the subsequences whose sum is odd by applying the following operations:\n\na_n - a_n + 1\na_n + 1 - a_n + 1\na_n + 1 + 1 - a_n + 1\na_n + 1 + 2 - a_n + 1\na_n + 1 + 3 - a_n + 1\na_n + 2 - a_n + 1\na_n + 3 - a_n + 1\n\nFollowing are the minimum possible sums that result in a_1, a_2,..., a_{n-1} = 0.\n\n\"\"\"\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '9'\nassert solution(stdin) == '21'\nassert solution(stdin) == '32'\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n\nInput\n3\n2 -5 -3\n\nOutput\n-1\n\nExplanation\nWe have no subsubseqences without sum and some ones with odd sum.\n\nExplanation\nOnly sum odd numbers are in the subsequence.\n\nConstraints\n\n1 \u2264 n \u2264 10^5\n0 \u2264 a_i \u2264 10^4\n\"\"\"\n\nn = int(input())\nA = list(map(int, input().split()))\n\ncurr_sum = sum(A)\n\nmax_sum = curr_sum\n\nfor i in range(n-1):\n    if curr_sum % 2 == 0:\n        curr_sum = curr_sum / 2\n    else:\n        curr_sum = curr_sum - curr_sum / 2\n    \n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\nprint(max_sum)\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4, [1, -2, 2, -3]) == -1\nassert solution(3, [-2, 2, -3]) == -1\nassert solution(3, [-1, 2, 3, 4, 5]) == 3\nassert solution(3, [-1, 2, 3, 4, 5, 6]) == -1\nassert solution(3, [-2, -1, 2, 3, 4, 5]) == -1\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Return a valid sequence\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n-10^4 \u2264 a_i \u2264 10^4\nAll elements of the sequence are in [-10^4, 10^4].\n\n\n-----Time Limit (50ms)-----\n"
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == 3\nassert solution(3) == -1\nassert solution(2) == 0\n\n\n\"\"\""
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1\\n1 2\\n1 3\\n2 1\\n3 2\\n3 2\\n4 1\\n4 2\\n4 3\\n\") == \"6\"\nassert solution(\"3 5\\n3 1\\n1 1\\n1 1\\n3 2\\n1 2\\n1 2\\n3 2\\n3 2\\n\") == \"7\"\nassert solution(\"3 4\\n3 2\\n2 2\\n3 1\\n3 2\\n\") == \"10\"\n\nInput\n5\n1 1\n1 2\n1 3\n2 1\n2 3\n\nOutput\n5\n\nInput\n4\n1 1\n1 1\n3 2\n1 2\n2 2\n3 2\n3 2\n\nOutput\n2\n\nInput\n4\n3 1\n3 1\n3 2\n3 2\n\nOutput\n2\n\nInput\n5\n1 1\n1 1\n1 3\n2 1\n2 1\n2 1\n3 2\n3 2\n3 2\n\nOutput\n3\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"5\") == \"6\"\nassert solution(\"4\") == \"6\"\nassert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 10\") == \"11\"\nassert solution(\"5 3\") == \"6\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"5 3\") == \"10\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 10\") == \"2\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"4 5\") == \"3\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 10\") == \"2\"\nassert solution(\"5 3\") == \"10\"\nassert solution(\"5 3\") == \"10\"\nassert solution(\"5 3\") == \"2\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\n\n------My interpretation-----\n\nInput\n3 3\n1 1\n1 2\n1 3\n\nOutput\n6\n\nInput\n4 10\n5 3\n2 1\n3 2\n5 1\n\nOutput\n10\n\nInput\n3 10\n1 1\n1 1\n1 3\n\nOutput\n7\n\nInput\n4 12\n5 3\n2 1\n3 2\n5 1\n\nOutput\n13\n\nInput\n4 15\n5 3\n2 1\n3 2\n5 1\n\nOutput\n16\n\nInput\n4 12\n1 1\n1 1\n1 3\n\nOutput\n15\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n20\n\nInput\n4 9\n1 1\n1 1\n1 3\n\nOutput\n24\n\nInput\n4 10\n1 1\n1 1\n1 3\n\nOutput\n10\n\nInput\n4 9\n1 1\n1 1\n1 3\n\nOutput\n14\n\nInput\n4 9\n1 1\n1 1\n1 3\n\nOutput\n12\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n9\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n6\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n16\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n15\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n14\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n12\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n10\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n8\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n12\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n2\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n1\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n1\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n1\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n0\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n0\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n0\n\nInput\n4 15\n1 1\n1 1\n1 3\n\nOutput\n0\n\n\"\"\"\n\nimport unittest\n\nTEST_INPUT_1 = \"\"\"\n1 1\n1 2\n1 3\n\n1 2 3\n1 2 1\n1 1 1\n1 1 2\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1\n\n1 1 3\n1 2 1\n1 2 1\n1 3 1"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 4\") == \"10\"\nassert solution(\"2 2\") == \"0\"\nassert solution(\"2 3\") == \"0\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '0'"
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1') == '0'\nassert solution('2 1') == '1'\nassert solution('3 1') == '2'\nassert solution('4 1') == '3'\nassert solution('5 1') == '4'\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"100\") == \"1\"\nassert solution(\"1000\") == \"1\"\nassert solution(\"10000\") == \"1\"\nassert solution(\"100000\") == \"1\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"333333338\"\nassert solution(\"-9\") == \"1\"\nassert solution(\"-1\") == \"1\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(4) == 4\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"333333338\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(2)\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"333333338\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\") == 3\nassert solution(\"1\") == 2\nassert solution(\"0\") == 1\nassert solution(\"12\") == 1\nassert solution(\"11\") == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"10\") == 1\nassert solution(\"100\") == 2\nassert solution(\"1000\") == 3\nassert solution(\"10000\") == 4\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n\n0 < m < 100000\n\n-----Time limit-----\n10^6 (1MB)\n\n\n\n-----Example 1-----\nInput\n6\n\nOutput\n33\n\nExplanation\nIn the example below, the task is to find the length of the array, because the string has a max of 5 digits, so its expected length is $33$, so the input should be correctly written.\n\n\n-----Example 2-----\nInput\n2\n\nOutput\n2\n\n\n-----Example 3-----\nInput\n4\n\nOutput\n333333338\n\nInput\n24\n\nOutput\n333333338\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n\n0 < m < 100000\n\n0 < m < 600000\n\n0 < stdin.length < 10^4\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n\n0 < stdin.length <= 10^4\n\n0 < m < 100000\n\n0 < m < 600000\n\n0 < m < 1000000\n\n\n-----Constraints-----\n0 < m < 10^3\n\n0 < m < 100000\n\n0 < m < 300000\n\n0 < m < 600000\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"50 100 3 30\") == \"4\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 3 * 10^4\n1 <= stdin[i], stdin[j] <= 10^9\nstdin is guaranteed to be a valid input.\n\n'''\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 1 2\") == 2\nassert solution(\"50 100 3 30\") == 4\nassert solution(\"50 100 3 30\") == 4\nassert solution(\"50 100 3 30\") == 0\nassert solution(\"100 100 3 30\") == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 1 2') == '2'\nassert solution('1 12 1 12') == '4'\nassert solution('50 100 3 30') == '0'\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1 2 1 2) == \"2\"\nassert solution(50 100 3 30) == \"4\"\nassert solution(50 100 3 30) == \"0\"\nassert solution(50 100 3 30) == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 1\") == \"0\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"1 12 1 2\") == \"4\"\nassert solution(\"50 100 3 30\") == \"0\"\nassert solution(\"50 100 3 30\") == \"0\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1) == 2\nassert solution(1, 12) == 4\nassert solution(50, 1) == 0\nassert solution(50, 12) == 0\nassert solution(50, 3) == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1 2 1 2) == 1\nassert solution(50 100 3 30) == 4\nassert solution(3) == 0\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input()\n) == \"1\"\nassert solution(\n    input()\n) == \"2\"\nassert solution(\n    input()\n) == \"2\"\nassert solution(\n    input()\n) == \"2\"\nassert solution(\n    input()\n) == \"0\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\nInput\n10 10\n\nOutput\n0\n\n\n-----Notes-----\n\nTo avoid any round-trip errors, the input data can be divided into two parts:\n1. There are two integers $a$ and $b$ (both integers are non-negative).\n2. The integers $a$ and $b$ can be chosen randomly as either the two integers $a$ or $b$ (i.e., both integers are even)\n\nThe output is the smallest non-negative integer $k$ such that the least common multiple of $a+k$ and $b+k$ is the smallest possible.\n\nFunction Description\n\nComplete the solution function in the editor below.\n\nsolution has the following parameters:\n\nint a: an integer\nint b: an integer\nint k: an integer\n\nReturns\n\nint: a integer\n\nConstraints\n\n\nSample Input\n\nSTDIN       Function\n-----        --------\n6 10         2\n\nSample Output\n\n2\nSample Input\n\nSTDIN       Function\n-----        --------\n21 31         2\n\nSample Output\n\n9\nExplanation\n\nNeko wants to choose $k = 2$ (smallest common multiple of $6 + 2$ and $10 + 2$ is $24$.\nSmallest common multiple of $6 + 2$ and $10 + 2$ is $24$.)\n\nHere $b$ is smaller than $a$.\n\nGiven $a$ and $b$, the solution is $k$.\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom collections import Counter"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"2\"\nassert solution(\"6 3\") == \"3\"\nassert solution(\"5 4\") == \"2\"\nassert solution(\"1 2\") == \"0\"\nassert solution(\"4 5\") == \"5\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    stdin: str) == \"9\"\nassert solution(\n    stdin: str) == \"0\"\nassert solution(\n    stdin: str) == \"21\"\nassert solution(\n    stdin: str) == \"15\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(a=6,b=10) == 2\nassert solution(a=21,b=31) == 9\nassert solution(a=5,b=10) == 0\nassert solution(a=5,b=20) == 9\nassert solution(a=6,b=0) == 1\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"24\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"24\"\n\n\n-----Brute Force-----\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"11111\") == \"3\"\nassert solution(\"1222\") == \"0\"\nassert solution(\"2113\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '9'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\n\n//Testcases\n//Testcase 01\n//Testcase 02\n//Testcase 03\n//Testcase 04\n//Testcase 05\n//Testcase 06\n//Testcase 07\n//Testcase 08\n//Testcase 09\n//Testcase 10\n//Testcase 11\n//Testcase 12\n//Testcase 13\n//Testcase 14\n//Testcase 15\n//Testcase 16\n//Testcase 17\n//Testcase 18\n//Testcase 19\n//Testcase 20\n//Testcase 21\n//Testcase 22\n//Testcase 23\n//Testcase 24\n//Testcase 25\n//Testcase 26\n//Testcase 27\n//Testcase 28\n//Testcase 29\n//Testcase 30\n//Testcase 31\n//Testcase 32\n//Testcase 33\n//Testcase 34\n//Testcase 35\n//Testcase 36\n//Testcase 37\n//Testcase 38\n//Testcase 39\n//Testcase 40\n//Testcase 41\n//Testcase 42\n//Testcase 43\n//Testcase 44\n//Testcase 45\n//Testcase 46\n//Testcase 47\n//Testcase 48\n//Testcase 49\n//Testcase 50\n//Testcase 51\n//Testcase 52\n//Testcase 53\n//Testcase 54\n//Testcase 55\n//Testcase 56\n//Testcase 57\n//Testcase 58\n//Testcase 59\n//Testcase 60\n//Testcase 61\n//Testcase 62\n//Testcase 63\n//Testcase 64\n//Testcase 65\n//Testcase 66\n//Testcase 67\n//Testcase 68\n//Testcase 69\n//Testcase 70\n//Testcase 71\n//Testcase 72\n//Testcase 73\n//Testcase 74\n//Testcase 75\n//Testcase 76\n//Testcase 77\n//Testcase 78\n//Testcase 79\n//Testcase 80\n//Testcase 81\n//Testcase 82\n//Testcase 83\n//Testcase 84\n//Testcase 85\n//Testcase 86\n//Testcase 87\n//Testcase 88\n//Testcase 89\n//Testcase 90\n//Testcase 91\n//Testcase 92\n//Testcase 93\n//Testcase 94\n//Testcase 95\n//Testcase 96\n//Testcase 97\n//Testcase 98\n//Testcase 99\n//Testcase 100\n//Testcase 101\n//Testcase 102\n//Testcase 103\n//Testcase 104\n//Testcase 105\n//Testcase 106\n//Testcase 107\n//Testcase 108\n//Testcase 109\n//Testcase 110\n//Testcase 111\n//Testcase 112\n//Testcase 113\n//Testcase 114\n//Testcase 115\n//Testcase 116\n//Testcase 117\n//Testcase 118\n//Testcase 119\n//Testcase 120\n//Testcase 121\n//Testcase 122\n//Testcase 123\n//Testcase 124\n//Testcase 125\n//Testcase 126\n//Testcase 127\n//Testcase 128\n//Testcase 129\n//Testcase 130\n//Testcase 131\n//Testcase 132\n//Testcase 133\n//Testcase 134\n//Testcase 135\n//Testcase 136\n//Testcase 137\n//Testcase 138\n//Testcase 139\n//Testcase 140\n//Testcase 141\n//Testcase 142\n//Testcase 143\n//Testcase 144\n//Testcase 145\n//Testcase 146\n//Testcase 147\n//Testcase 148\n//Testcase 149\n//Testcase 150\n//Testcase 151\n//Testcase 152\n//Testcase 153\n//Testcase 154\n//Testcase 155\n//Testcase 156\n//Testcase 157\n//Testcase 158\n//Testcase 159\n//Testcase 160\n//Testcase 161\n//Testcase 162\n//Testcase 163\n//Testcase 164\n//Testcase 165\n//Testcase 166\n//Testcase 167\n//Testcase 168\n//Testcase 169\n//Testcase 170\n//Testcase 171\n//Testcase 172\n//Testcase 173\n//Testcase 174\n//Testcase 175\n//Testcase 176\n//Testcase 177\n//Testcase 178\n//Testcase 179\n//Testcase 180\n//Testcase 181\n//Testcase 182\n//Testcase 183\n//Testcase 184\n//Testcase 185\n//Testcase 186\n//Testcase 187\n//Testcase 188\n//Testcase 189\n//Testcase 190\n//Testcase 191\n//Testcase 192\n//Testcase 193\n//Testcase 194\n//Testcase 195\n//Testcase 196\n//Testcase 197\n//Testcase 198\n//Testcase 199\n//Testcase 200\n//Testcase 201\n//Testcase 202\n//Testcase 203\n//Testcase 204\n//Testcase 205\n//Testcase 206\n//Testcase 207\n//Testcase 208\n//Testcase 209\n//Testcase 210\n//Testcase 211\n//Testcase 212\n//Testcase 213\n//Testcase 214\n//Testcase 215\n//Testcase 216\n//Testcase 217\n//Testcase 218\n//Testcase 219\n//Testcase 220\n//Testcase 221\n//Testcase 222\n//Testcase 223\n//Testcase 224\n//Testcase 225\n//Testcase 226\n//Testcase 227\n//Testcase 228\n//Testcase 229\n//Testcase 230\n//Testcase 231\n//Testcase 232\n//Testcase 233\n//Testcase 234\n//Testcase 235\n//Testcase 236\n//Testcase 237\n//Testcase 238\n//Testcase 239\n//Testcase 240\n//Testcase 241\n//Testcase 242\n//Testcase 243\n//Testcase 244\n//Testcase 245\n//Testcase 246\n//Testcase 247\n//Testcase 248\n//Testcase 249\n//Testcase 250\n//Testcase 251\n//Testcase 252\n//Testcase 253\n//Testcase 254\n//Testcase 255\n//Testcase 256\n//Testcase 257\n//Testcase 258\n//Testcase 259\n//Testcase 260\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\nInput\n\nInput will not contain leading whitespaces.\n\nOutput\n\nTestcases using the standard input format will not contain leading whitespaces.\n\n'''\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 10\") == \"4 5\"\nassert solution(\"3 5\") == \"3 4\"\nassert solution(\"3 4\") == \"3 4 5\"\nassert solution(\"3 4 5\") == \"3 4 5\"\nassert solution(\"3 4 5 6 7 8 9 10 11 12\") == \"3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 10\") == \"4\"\nassert solution(\"3 5\") == \"3\"\nassert solution(\"4 4 4\") == \"3\"\nassert solution(\"4 4 4 4\") == \"3\"\nassert solution(\"4 4 4 5\") == \"3\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 10\") == \"4\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"4 4 4\") == \"6\"\nassert solution(\"2 10\") == \"9.5\""
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '4'\n\"\"\""
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Bonus-----\n\nQuestion:\n\nGiven two marks, a and b, find the maximum number of remaining marks that are required to put up a certificate in order to achieve the highest possible final mark.\n\nInput\n2\n6 2\n1\n\nOutput\n3\n\"\"\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 1) == 0\nassert solution(10, 10) == 4\nassert solution(10, -10) == 3\nassert solution(10, 0) == 0\nassert solution(10, -10) == 1\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'\n\nExplanation\n\nstdin is an input from stdin. It contains the number of elements, $n$, and a list $a_1, a_2, \\ldots, a_n$, separated by a space.\n\nSolution:\n    : python3 solution.py <STDIN>\n    a_1 a_2 a_3 a_4 a_5\n    n a_1 a_2 a_3 a_4 a_5\n    0\n\nExample\nInput\n7\n0 1 -1 0 0 2\n\nOutput\n0\nInput\n7\n0 0 1 -1 0 0 2\nOutput\n0\nInput\n7\n0 0 1 -1 0 0 2\nOutput\n0\n\"\"\"\n\nn = int(input())\na_1 = list(map(int, input().split()))\na_2 = list(map(int, input().split()))\na_3 = list(map(int, input().split()))\na_4 = list(map(int, input().split()))\na_5 = list(map(int, input().split()))\n\ns = 0\nfor i in range(n):\n    if a_1[i] < a_2[i] + s:\n        s = a_2[i] + s\n    elif a_2[i] < a_1[i] + s:\n        s = a_1[i] + s\n    elif a_1[i] < a_3[i] + s:\n        s = a_3[i] + s\n    elif a_3[i] < a_4[i] + s:\n        s = a_4[i] + s\n    elif a_4[i] < a_5[i] + s:\n        s = a_5[i] + s\n\nprint(s)\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"0\"]) == \"4\"\nassert solution([\"0\", \"0\", \"0\", \"0\"]) == \"0\"\nassert solution([\"0\", \"0\", \"-1\", \"-1\", \"-1\"]) == \"0\""
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n'''"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6 7 8 9 10 1 2 3 4 5 6"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\n\"\"\"\nn = int(input())\na = [int(i) for i in input().split()]\na.sort()\nb = [1]\ni = 0\nwhile a[i]!= b[i] and a[i]!= 0:\n    b.append(a[i] // 2)\n    i += 1\n\nprint(a[-1] // 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1') == \"1\"\nassert solution('9') == \"1\"\nassert solution('10') == \"1\"\nassert solution('4') == \"1\"\nassert solution('37') == \"3\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 0\nassert solution(4) == 0\nassert solution(8) == 1\nassert solution(2) == 1\nassert solution(3) == 1\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,2) == 1\nassert solution(1,3) == 2\nassert solution(1,4) == 3\nassert solution(1,5) == 4\nassert solution(1,6) == 5\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('7') == '3'\nassert solution('14') == '1'\nassert solution('50') == '1'\nassert solution('49') == '1'\nassert solution('51') == '1'\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"3\"\nassert solution(4) == \"4\"\nassert solution(5) == \"5\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"5\") == 2\nassert solution(\"10\") == 2"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 6\",\n    [\"2 3\", \"2 3\", \"2 3\", \"2 3\"]\n    ) == \"1 6\"\n\nassert solution(\n    \"36 5\",\n    [\"10 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\", \"5 16\"]\n    ) == \"3\"\n\n\nassert solution(\n    \"3 5\",\n    [\"2 1\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\"]\n    ) == \"3\"\n\n\nassert solution(\n    \"3 5\",\n    [\"2 1\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\", \"2 3\"]\n    ) == \"1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 6') == 1\nassert solution('5 3') == 1\nassert solution('36 5') == 3\nassert solution('36 1') == 1\nassert solution('36 3') == 1\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 5') == '3 5'\nassert solution('3 5 4') == '4 5'\nassert solution('5 1') == '-1'\nassert solution('5 2') == '5 2'\nassert solution('1 1') == '1 1'\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sys.stdin.readline()) == '2'\n\n\nfor _ in range(int(input())):\n    a_1, b_1, a_2, b_2 = map(int, input().split())\n    m = abs(a_1 - a_2) * abs(b_1 - b_2)\n    print(m)"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == -1\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 2) == 1\nassert solution(1, 2, 3) == 2\nassert solution(1, 2, 1, 5) == 3\nassert solution(2, 2, 1, 5) == 3\nassert solution(2, 2, 2, 5) == 3\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin=\"\"\"\n    2 4\n    6 4\n    6 7\n    \"\"\") == \"3\"\n    assert solution(\n    stdin=\"\"\"\n    3 3\n    3 3\n    3 5\n    \"\"\") == \"1\"\n    assert solution(\n    stdin=\"\"\"\n    4 5\n    3 1\n    2 1\n    3 5\n    \"\"\") == \"1\"\n    assert solution(\n    stdin=\"\"\"\n    2 4\n    2 4\n    6 4\n    \"\"\") == \"1\"\n    assert solution(\n    stdin=\"\"\"\n    3 3\n    3 2\n    3 3\n    \"\"\") == \"1\"\n    "
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Vasiliy\"\n\n\n-----Constraints-----\n\n1 \u2264 x_p \u2264 x_v \u2264 10^5\n1 \u2264 y_p \u2264 y_v \u2264 10^5\n0 \u2264 x_{p}, y_{p}, x_{v}, y_{v} \u2264 10^5\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2 1 2 2) == \"Polycarp\"\n\n\n\n-----Note-----\n\nI have given that the team is not allowed to move the pawn to cells with negative x-coordinate or y-coordinate or to the cell containing the opponent's pawn.\nIn the second case, it is possible to move his pawn from (2, 1) to (1, 1) in the first turn but this is not the case.\n\"\"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Polycarp\"\n\nassert solution(stdin) == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 0 0 0\") == \"Polycarp\"\nassert solution(\"0 0 0 0\") == \"Vasiliy\"\nassert solution(\"0 0 0 0\") == \"Vasiliy\"\nassert solution(\"0 0 0 0\") == \"Vasiliy\"\nassert solution(\"0 0 0 0\") == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1 2 2\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\nassert solution(\"-10 10 -10 -10 -10\") == \"Polycarp\"\nassert solution(\"-10 10 -10 -10 -10\") == \"Vasiliy\"\nassert solution(\"-10 10 -10 -10 -10\") == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2, 1, 2, 2) == \"Polycarp\"\nassert solution(4, 7, 4, 4) == \"Vasiliy\"\nassert solution(7, 7, 4, 0) == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Polycarp\"\n\n\n\n-----Constraints-----\n1 \u2264 x_{p}, y_{p}, x_{v}, y_{v} \u2264 10^5\n0 \u2264 x_{p}, y_{p}, x_{v}, y_{v} \u2264 10^5\n\n\n-----Time complexity-----\nO(n) for Polycarp and Vasiliy. The only restriction that will be violated is the start cell (x, y).\n\"\"\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\", \"1\"]) == \"Polycarp\"\nassert solution([\"5\", \"1\", \"4\"]) == \"Vasiliy\"\nassert solution([\"2\", \"3\", \"4\", \"5\", \"6\"]) == \"Vasiliy\"\nassert solution([\"2\", \"3\", \"2\", \"2\"]) == \"Polycarp\"\nassert solution([\"1\", \"1\", \"2\", \"3\", \"3\", \"3\", \"3\"]) == \"Vasiliy\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Polycarp\"\nassert solution(stdin) == \"Vasiliy\"\n\n\n\n-----Solution-----\n\nInput\n2 1 2 2\n\nOutput\nVasiliy\n\n\n-----Note-----\n\nIt is guaranteed that in the beginning the pawns are in different cells and none of them is in the cell (0, 0)."
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2 1\") == \"Polycarp\"\nassert solution(\"4 7 7 4\") == \"Vasiliy\"\n\n\"\"\""
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 25\n0 \u2264 stdin[i] \u2264 12\n1 \u2264 stdin[i] \u2264 7\n\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 4"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 1\nassert solution(11) == 5\n\nassert solution(11) == 5\nassert solution(3) == 5\nassert solution(9) == 5"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"1 7\\\") == 6\nassert solution(\\\"11 6\\\") == 5\nassert solution(\\\"11 7\\\") == 5\n\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.week = []\n        self.col = 0\n\n    def solution(self, m, d):\n        if self.week[-1][1] == d:\n            self.col += 1\n        else:\n            self.week.append([m, d])\n        return self.col\n\n    def test(self, num: int) -> int:\n        num -= 1\n        self.week.append([num, num])\n        if self.week[-1][1] == num:\n            self.week.append([num, num])\n            self.col += 1\n            return self.col\n        else:\n            return self.week[-1][0]\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == 5\nassert solution(\"11 6\") == 5\nassert solution(\"1 1 1\") == 5\nassert solution(\"1 1 1 0\") == 5\nassert solution(\"1 1 1 1\") == 5\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"7\"\nassert solution(\"11 2\") == \"5\"\nassert solution(\"11 1\") == \"5\"\nassert solution(\"5 1\") == \"5\"\nassert solution(\"11 6\") == \"5\"\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    '1 1'\n) == 6, \"solution() should return 6\"\nassert solution(\n    '11 6'\n) == 5, \"solution() should return 5\"\nassert solution(\n    '11 7'\n) == 5, \"solution() should return 5\"\nassert solution(\n    '11 6'\n) == 3, \"solution() should return 3\"\nassert solution(\n    '11 8'\n) == 2, \"solution() should return 2\"\n"
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\n-----Constraints-----\n1 <= a <= 10^18, b <= 10^18\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 10\") == 2\nassert solution(\"2015 2015\") == 1\nassert solution(\"100 105\") == 0\nassert solution(\"72057594000000000 72057595000000000\") == 26\n\n\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n1 \u2264 stdin.length \u2264 6\nstdin.length <= 10^6\nstdin.length <= 1000\n\nExample 1:\nInput\n2015 2015\n\nOutput\n2\n\nExample 2:\nInput\n72057595000000000 72057595000000000\n\nOutput\n1\n\n'''"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 10\") == 2\nassert solution(\"2015 2015\") == 2\nassert solution(\"100 105\") == 0\nassert solution(\"72057594000000000 72057595000000000\") == 26\n\n\n-----IMPORTANT-----\n\nThe input is valid, and will only contain ASCII digits, and will not contain any other special characters.\n\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"610\") == 2, \"Test failed\"\nassert solution(\"101\") == 0, \"Test failed\"\nassert solution(\"102\") == 0, \"Test failed\"\nassert solution(\"105\") == 0, \"Test failed\"\nassert solution(\"100_10\") == 0, \"Test failed\"\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 26\n'''"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"100\") == 0\nassert solution(\"1000\") == 0\nassert solution(\"0\") == 0\nassert solution(\"72057595\") == 26\n"
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 26\n\n-----Notes-----\n\nThe binary representation of a number is its reverse. This means that the binary representation of a number is a sequence of digits, where each digit represents the number represented by the binary representation of the number.\n\n\n-----Discussion-----\n\nThis problem is hard to solve as it is not linked to any obvious solution. The answer is that each number in the given interval is counted only once.\n\n\"\"\""
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(12) == 2\nassert solution(26) == 3\nassert solution(36) == 4\nassert solution(48) == 4\nassert solution(100) == 0\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4) == 4\nassert solution(4) == 2\nassert solution(4) == 3\nassert solution(4) == 2\nassert solution(4) == 2\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 4\nassert solution(2) == 5\nassert solution(3) == 6\nassert solution(4) == 4\nassert solution(5) == 4\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6) == 3\nassert solution(5) == 2\nassert solution(4) == 2\nassert solution(3) == 2\nassert solution(1) == 1\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 2\nassert solution(3) == 4\nassert solution(4) == 6\nassert solution(5) == 10\nassert solution(6) == 16\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == 2\nassert solution(3) == 4\nassert solution(4) == 6\nassert solution(5) == 3\nassert solution(10) == 2\n\n\n-----Constraints-----\n0 <= N <= 100\n\n\n-----Time Limit Exceeded-----\nO(N) time\nO(N) extra space\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\n\n\n-----Constraints-----\n\n0 \u2264 N \u2264 100\n\n\n-----Time Limit: 30 seconds per testcase -----\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 2 3'), 'No'\nassert solution('2 2 3'), 'Yes'\nassert solution('3 1 1'), 'No'\nassert solution('3 1 1'), 'Yes'\nassert solution('1 1 1'), 'Yes'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(6)\n\"\"\""
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 2 3') == '1'\nassert solution('3 1 1') == '1'\nassert solution('4 3') == '6'\nassert solution('4 1 2') == '6'\nassert solution('3 1 1 2 3 4') == '6'\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(6)\n\nassert solution(stdin) == str(6)\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\nassert solution(input) == \"6\"\nassert solution(input) == \"6\""
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input().split()) == \"1\"\nassert solution(input().split()) == \"1\"\nassert solution(input().split()) == \"1\"\nassert solution(input().split()) == \"1\"\nassert solution(input().split()) == \"1\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1\") == \"YES\"\nassert solution(\"0 0 0 0\") == \"NO\"\nassert solution(\"3 2\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"4 4 4\") == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"1 3\") == \"NO\"\nassert solution(\"1 4 1\") == \"YES\"\nassert solution(\"1 4 2\") == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"\n1 2\n1 3\n1 4\n1\n3 5\n1 8\n\"\"\") == \"NO\"\n\nassert solution(\"\"\"\n1 2\n1 3\n1 4\n1\n3 5\n1 8\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n1 2\n1 3\n1 4\n1\n3 5\n1 8\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n1 2\n1 3\n1 4\n1\n3 5\n1 8\n\"\"\") == \"YES\"\nassert solution(\"\"\"\n1 2\n1 3\n1 4\n1\n3 5\n1 8\n\"\"\") == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 0\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"0 0 0 0\") == \"YES\"\nassert solution(\"0 0 1 3\") == \"YES\"\nassert solution(\"0 0 1 3\") == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, [4, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \"YES\"\nassert solution(5, [4, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \"YES\"\nassert solution(5, [4, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \"NO\"\nassert solution(5, [4, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \"NO\"\nassert solution(5, [4, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \"NO\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"\n---\n---\n---\n---\n---\n---\n---\n---\n---\n---\n\"\"\") == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('0 0 0 0 0') == 'NO'\nassert solution('0 0 0 0 0 0') == 'NO'\nassert solution('0 0 0 0 0 0') == 'NO'\nassert solution('0 0 0 0 0 0 0') == 'NO'\nassert solution('0 0 0 0 0 0 0') == 'NO'\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n----------Test Set 1----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nYES\nYES\nNO\nNO\nNO\nNO\nNO\nNO\nNO\n\n----------Test Set 2----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nNO\nNO\nNO\nNO\nYES\n\n----------Test Set 3----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nYES\nNO\nNO\nNO\nYES\n\n----------Test Set 4----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nYES\nYES\nNO\nNO\nYES\n\n----------Test Set 5----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nNO\nYES\nNO\nYES\nNO\nYES\n\n----------Test Set 6----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nYES\nNO\nYES\nNO\nYES\nYES\n\n----------Test Set 7----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nNO\nYES\nNO\nNO\nYES\nYES\n\n----------Test Set 8----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nNO\nNO\nYES\nNO\nYES\nYES\nYES\nYES\n\n----------Test Set 9----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nNO\nNO\nYES\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n\n----------Test Set 10----------\nInput\n5\n4 100\n0 0 0 0\n1 2\n1\n3 4\n1 4 1\n3 2\n0 1 3\n3 9\n0 59049 810\n\nOutput\nNO\nNO\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 20\n\n\n\"\"\""
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 5 7\") == \"5\"\nassert solution(\"3 6 7\") == \"1520\"\nassert solution(\"2 2 2\") == \"0\"\nassert solution(\"2 6 7\") == \"1520\"\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"Test case 1 failed.\"\n\"\"\""
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2,2) == 20\nassert solution(5,6) == 1520\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n    '2',\n    '2'\n    ]\n) == '20'\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 20\nassert solution(2) == 15\nassert solution(5) == 20\nassert solution(6) == 15"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"20\"\nassert solution(\"2 5\") == \"1520\"\nassert solution(\"1 2 5\") == \"80\"\n"
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2 2\") == 20\nassert solution(\"5 6 7\") == 1520\nassert solution(\"0\") == 0\nassert solution(\"1 2 2\") == 1\nassert solution(\"2 3 1\") == 3\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Explanation-----\n\nTo slide A tile, the two puzzles are all represented by the following characters:\n\nA[i][j] = 'A'\nB[i][j] = 'B'\nC[i][j] = 'C'\nIn each direction, Bessie can slide each tile of the grid as shown above (ex. A[0][1] = B[0][2] = 'A' -> A[1][0] = B[1][2] = 'B') and Elsie can slide each tile of the grid as shown above (ex. A[0][0] = B[0][1] = 'A' -> A[0][0] = B[0][1] = 'C').\n\nAssuming all the tiles are on the same grid cell, Bessie and Elsie would like to find a sequence of moves to reach a configuration of 'A' that satisfies the following requirements:\n\n- If a tile can slide down, it's on the same grid cell as the previous tile;\n- If a tile can slide up, it's on the same grid cell as the next tile;\n- If a tile can slide left, it's on the same grid cell as the previous tile;\n- If a tile can slide right, it's on the same grid cell as the next tile.\n\n\nThe moves are represented by the following characters:\n\nL -> Left\nR -> Right\n\nGiven the input, it's guaranteed that Bessie and Elsie will reach the same configuration as each other.\n\nInput:\n\nAB\nXC\nXB\nAC\n\nOutput:\n\nYES\n\n\nExplanation:\n\nBessie and Elsie start at the same cell as the puzzle:\n\n\n-----Input-----\n\nThe input consists of a 2 \u00d7 2 grid. The first line of the input contains two space-separated integers A and B, where A and B are strings. The second line contains a string D, describing the puzzle.\n\nOutput:\n\nYES\n\n\n-----Output-----\n\nOutput:\n\nNO\n\n-----Example 1 -----\n\nInput\nAB\nXC\nXB\nAC\n\nOutput\nYES\n\nExplanation:\n\nIn the example, Bessie and Elsie start at the same cell as the puzzle:\n\nA = 'A'\nB = 'B'\nC = 'C'\nD = 'D'\n\nBessie's move:\n\nL -> L\nR -> R\n\nElsie's move:\n\nL -> L\nR -> R\n\nThen the sequence of moves is:\n\nL -> R -> D -> R -> D -> B -> XC -> B\n\nThe Bessie and Elsie are not in the same position, so the puzzle could not reach the same configuration as Bessie and Elsie.\n\nInput:\n\nAB\nXC\nXB\nAC\n\nOutput:\n\nNO\n\n\n-----Example 2 -----\n\nInput\nAB\nXC\nXB\nAC\n\nOutput\nNO\n\nExplanation:\n\nIn the example, Bessie and Elsie start at the same cell as the puzzle:\n\nA = 'A'\nB = 'B'\nC = 'C'\nD = 'D'\n\nBessie's move:\n\nL -> L\nR -> R\n\nElsie's move:\n\nL -> L\nR -> R\n\nThen the sequence of moves is:\n\nL -> R -> D -> R -> D -> B -> XC -> B\n\nThe Bessie and Elsie are not in the same position, so the puzzle could not reach the same configuration as Bessie and Elsie.\n\nInput:\n\nAB\nXC\nXB\nAC\n\nOutput:\n\nNO\n\n-----Example 3 -----\n\nInput\nAB\nXC\nAC\n\nOutput\nNO\n\nExplanation:\n\nIn the example, Bessie and Elsie start at the same cell as the puzzle:\n\nA = 'A'\nB = 'B'\nC = 'C'\nD = 'D'\n\nBessie's move:\n\nL -> L\nR -> R\n\nElsie's move:\n\nL -> L\nR -> R\n\nThen the sequence of moves is:\n\nL -> R -> D -> R -> D -> B -> XC -> B\n\nThe Bessie and Elsie are not in the same position, so the puzzle could not reach the same configuration as Bessie and Elsie.\n\nInput:\n\nAB\nXC\nAC\n\nOutput:\n\nYES\n\n-----Example 4 -----\n\nInput\nAB\nXC\nAC\n\nOutput\nNO\n\nExplanation:\n\nIn the example, Bessie and Elsie start at the same cell as the puzzle:\n\nA = 'A'\nB = 'B'\nC = 'C'\nD = 'D'\n\nBessie's move:\n\nL -> L\nR -> R\n\nElsie's move:\n\nL -> L\nR -> R\n\nThen the sequence of moves is:\n\nL -> R -> D -> R -> D -> B -> XC -> B\n\nThe Bessie and Elsie are not in the same position, so the puzzle could not reach the same configuration as Bessie and Elsie.\n\nInput:\n\nAB\nXC\nAC\n\nOutput:\n\nYES\n\n-----Example 5 -----\n\nInput\nAB\nXC\nAC\n\nOutput\nNO\n\nExplanation:\n\nIn the example, Bessie and Elsie start at the same cell as the puzzle:\n\nA = 'A'\nB = 'B'\nC = 'C'\nD = 'D'\n\nBessie's move:\n\nL -> L\nR -> R\n\nElsie's move:\n\nL -> L\nR -> R\n\nThen the sequence of moves is:\n\nL -> R -> D -> R -> D -> B -> XC -> B\n\nThe Bessie and Elsie are not in the same position, so the puzzle could not reach the same configuration as Bessie and Elsie.\n\nInput:\n\nAB\nXC\nAC\n\nOutput:\n\nYES\n\n-----Example 6 -----\n\nInput\nAB\nXC\nAC\n\nOutput\nNO\n\nExplanation:\n\nIn the example, Bessie and Elsie start at the same cell as the puzzle:\n\nA = 'A'\nB = 'B'\nC = 'C'\nD = 'D'\n\nBessie's move:\n\nL -> L\nR -> R\n\nElsie's move:\n\nL -> L\nR -> R\n\nThen the sequence of moves is:\n\nL -> R -> D -> R -> D -> B -> XC -> B\n\nThe Bessie and Elsie are not in the same position, so the puzzle could not reach the same configuration as Bessie and Elsie.\n\nInput:\n\nAB\nXC\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"AB\"\n) == \"YES\", \"No\"\nassert solution(\n    \"ABC\"\n) == \"NO\", \"Yes\"\nassert solution(\n    \"ABCDE\"\n) == \"YES\", \"No\"\nassert solution(\n    \"ABCDEF\"\n) == \"YES\", \"No\"\nassert solution(\n    \"A\"\n) == \"NO\", \"No\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n\n-----Constraints-----\n0 < N < 10^6\n1 < N < 10^6\n\nSample Input-1:\n\nA\nC\nB\nX\n\nSample Output-1:\n\nNO\n\nSample Input-2:\n\nX\n\nB\nC\nA\n\nSample Output-2:\n\nYES\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\nInput\nA\nC\nB\nB\nA\nB\nA\nA\nA\n\nOutput\nYES\n\nInput\nA\nC\nB\nB\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA\nA"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['AB', 'XC', 'XB', 'AC', 'BX', 'AC']) == 'YES', 'No'\n\n>>> solution(['AB', 'XC', 'XB', 'AC', 'BX', 'AC'])\n'NO'\n\n\"\"\")"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n-----Constraints-----\n\n1 <= stdin.length <= 500\n1 <= stdin[i].length <= 100\n\n1 <= A[i] <= X\n1 <= B[i] <= X\n1 <= C[i] <= X\n\nfor i in stdin:\n    print(i)\n    \n------Code-----\n"
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n0 < N < 5\n\n0 < A, B, C < A, B, C\n\n-----Time Limit-----\n5 minutes"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 11311, \"The answer to the problem doesn't exist.\"\nassert solution(input()) == 475, \"The answer to the problem doesn't exist.\"\nassert solution(input()) == 3789, \"The answer to the problem doesn't exist.\"\nassert solution(input()) == 474, \"The answer to the problem doesn't exist.\"\nassert solution(input()) == 473, \"The answer to the problem doesn't exist.\"\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '975'\nassert solution(input) == '675'\nassert solution(input) == '11311'\nassert solution(input) == '475'\nassert solution(input) == '3789'\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '12'\nassert solution(stdin) == '475'\nassert solution(stdin) == '3789'\nassert solution(stdin) == '594'\nassert solution(stdin) == '539'\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '475'\nassert solution(stdin) == '7464'\nassert solution(stdin) == '7471'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"12\") == 12\nassert solution(\"16\") == 16\nassert solution(\"11311\") == 1110\nassert solution(\"20\") == 20\nassert solution(\"3789\") == 3789\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(12) == '12'\nassert solution(16) == '475'\nassert solution(20) == '594'\nassert solution(17) == '3789'\nassert solution(11411) == '3789'\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"11\"\nassert solution(\"9\") == \"9\"\nassert solution(\"10\") == \"1\"\nassert solution(\"11\") == \"7\"\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5468\") == 11311\nassert solution(\"909\") == 909\nassert solution(\"739\") == 739\nassert solution(\"1\") == 1\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(13) == 12\nassert solution(16) == 11211\nassert solution(17) == 37689\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 10^6\n1 \u2264 k \u2264 10^18\n1 \u2264 n \u2264 10^18\n\n--- Nguyen Van Duc ---"
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 3789\nassert solution(input()) == 1\nassert solution(input()) == 1\nassert solution(input()) == 1\nassert solution(input()) == 1\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\", \"Your code has an error\"\n\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"Yes\")\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('{1, 2, 2, 4, 4}') == 'YES'\nassert solution('{1, 2, 1, 2, 2, 2}') == 'NO'\nassert solution('{1, 2, 2, 3, 3, 4}') == 'NO'\nassert solution('{1, 2, 1, 1, 1, 1}') == 'NO'\nassert solution('{1, 1, 1, 2, 2, 2}') == 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(__file__) == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"YES\"\nassert solution(\"1 2 3 4 1\") == \"NO\"\nassert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"1 1 1 2\") == \"NO\"\nassert solution
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 10 20 20 30 2 4 1') == 'YES', 'No'\nassert solution('5 20 20 1') == 'NO', 'No'\nassert solution('4 2 2') == 'YES', 'No'\nassert solution('7 3 3 3 3 3 3 3') == 'NO', 'No'\nassert solution('7 3 3 3 3 3 3 3') == 'NO', 'No'\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\n\n\n\nExample:\n\nInput\n1\n5\n2 3 1 2\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 5 5 5 4 2') == 'YES'\nassert solution('10 20 30 20 10') == 'YES'\nassert solution('5 3 5 3 3 3 3 3 3') == 'NO'\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 5, 5, 5, 4, 2) == \"YES\"\nassert solution(1, 5, 5, 5, 1, 1) == \"NO\"\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 1 5 5 3 2\") == \"YES\"\nassert solution(\"7 3 3 3 3 3 3 3\") == \"NO\"\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 11) == 5\nassert solution(1, 10) == 4\nassert solution(1, 20) == 1\nassert solution(10, 5) == 6\nassert solution(5, 1) == 1\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"11 3\"), \"1\"\nassert solution(\"11 6\"), \"1\"\nassert solution(\"20 20\"), \"5\"\nassert solution(\"1000000 100\"), \"31248\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"31248\"\n\n-----Constraints-----\n\n1 <= k <= 10^18\n\n\n\n-----Usage-----\nSample input:\n\n3 5\nSample output:\n\n3\nSample input:\n\n4 100\nSample output:\n\n4\n\"\"\""
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(int(stdin)) == 5\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('11 10') == '1'\nassert solution('11 100') == '1'\nassert solution('15 5') == '1'\nassert solution('14 20') == '1'\nassert solution('1000000 100') == '1'\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 1\nassert solution(stdin) == 6\n\n..\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n'''\n1 2\n1 3 4 5 6\n'''\n) == 5\n\nassert solution(\n'''\n2 3 4\n'''\n) == 4\n\nassert solution(\n'''\n1 2\n'''\n) == 2\n\nassert solution(\n'''\n2 3\n'''\n) == 1\n\nassert solution(\n'''\n1 1\n'''\n) == 1"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '6'\nassert solution(stdin) == '31248'\n\n\"\"\""
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str(n) + str(k)) == str(k)\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n\n-----Constraints-----\n0\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"-1\") == \"-1\"\nassert solution(\"1 1 1 -1\") == \"0\"\nassert solution(\"1 1 2 1\") == \"1\"\nassert solution(\"1 0 0 -1\") == \"0\"\nassert solution(\"3 3 3 3\") == \"0\"\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\n\nassert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n0 < stdin.length <= 200\n-1 < stdin[i] < stdin[i + 1] < 10^9\n\nTime Limit: 1 sec\n\nExample:\nInput\n1 2 2 2 2 2\nOutput\n-1\n\n\nInput\n1 2 2 2 2 2\nOutput\n1\n\n\nInput\n1 4 6 3 0 1 1\nOutput\n0\nInput\n1 4 3 3 1 1 1\nOutput\n0\n\n\n---CODE---\n\nimport math\nimport sys\nfrom collections import deque\n\nstdin = sys.stdin.readline"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin: str\n    )\n\nassert solution(\n    stdin: str\n    ) == '-1'\nassert solution(\n    stdin: str\n    ) == '0'\nassert solution(\n    stdin: str\n    ) == '0'\nassert solution(\n    stdin: str\n    ) == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0 0 0 0\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"4 3 2 2 -1 1\") == \"0 0\"\nassert solution(\n    \"10 10 10 1 -1 0\") == \"-1\"\nassert solution(\n    \"10 10 10 1 -1 0\") == \"0\"\nassert solution(\n    \"10 10 10 1 -1 0\") == \"0\"\nassert solution(\n    \"10 10 10 1 -1 0\") == \"0\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n[Image]\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 5\\n4 3\\n3 3\\n3 3\\n4 1\\n1 3\\n2 1\\n1 2\\n2 2\\n1 2\\n\") == \"NO\"\nassert solution(\"1 1\\n2 2\\n2 3\\n3 3\\n3 4\\n4 3\\n4 4\\n5 3\\n5 4\\n5 5\\n\") == \"YES\"\nassert solution(\"1 1\\n2 2\\n2 3\\n3 3\\n3 4\\n4 3\\n4 4\\n5 3\\n5 4\\n5 5\\n\") == \"NO\"\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 10^3\n\n0 <= stdin[i].length <= 50\n\nstdin[i] consists of digits\n0 <= int(stdin[i]) <= 1e9\n\n\"\"\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'YES'\n\"\"\"\n\nclass Solution:\n    def paintingPaintings(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= stdin.length <= 20\n1 <= stdin[i] <= 100\n\nfor i in range(2):\n    for j in range(2):\n        if (i!= 1) or (j!= 1):\n            pass\n        else:\n            pass\n\n-----Examples-----\nInput\n3 2\n1 3\n2 1\n\nOutput\nYES\n\nInput\n5 5\n3 3\n3 3\n\nOutput\nNO\n\"\"\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 'YES'\n\"\"\""
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 2) == 3\nassert solution(123, 4) == 12\nassert solution(123, 5) == 14\nassert solution(123, 6) == 24\nassert solution(123, 7) == 24\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n        \"3 2 30 4\\n6 14 25 48\\n\"\n        \"123 1 2143435 4\\n123 11 -5453 141245\\n\"\n        ) == \"3\"\nassert solution(\n        \"123 1 2143435 4\\n123 11 -5453 141245\\n\"\n        ) == \"inf\"\nassert solution(\n        \"123 1 2143435 4\\n123 11 -5453 141245\\n\"\n        ) == \"0\"\nassert solution(\n        \"123 1 2143435 4\\n123 11 -5453 141245\\n\"\n        ) == \"inf\"\n\n-----Reference-----\n\nhttps://leetcode.com/problems/progression-terms-on-board/discuss/878787/Easy-to-understand-with-given-code-30-lines-with-my-backend-ipython-web-browser\n\"\"\""
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"inf\"\n\"\"\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3 2 30 4) == \"3\"\nassert solution(123 1 2143435 4) == \"1\"\nassert solution(123 11 -5453 141245) == \"1\"\nassert solution(123 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 129 130 131 131 132 131 133 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 171 172 173 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 221 222 223 224 225 226 227 228 229 230 231 231 232 233 233 234 235 236 237 238 238 239 240 241 242 242 243 244 245 246 247 248 249 249 250 251 252 253 253 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 290 291 292 293 296 299 300 301 302 303 304 305 306 308 309 311 313 314 315 316 317 318 319 320 321 321 322 323 323 324 325 326 327 328 329 330 330 331 331 332 332 333 333 334 334 335 336 337 336 338 339 340 341 341 341 341 342 343 344 345 346 347 349 349 350 351 351 352 352 353 354 354 355 356 357 358 359 359 360 361 360 361 366 366 366 367 366 369 369 377 377 379 379 380 379 389 389 390 391 392 393 394 394 401 401 402 4010\n\nInput\n3 2 30 4\n10 1 5 10\n\nOutput\n0\n\"\"\""
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(a) == \"inf\"\n\nassert solution(b) == 0\n\nassert solution(c) == \"inf\"\n\nassert solution(d) == \"inf\"\n\nassert solution(e) == \"inf\""
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3 2 30 4) == 3\nassert solution(123 1 2143435 4) == 0\nassert solution(123 11 -5453 141245) == inf\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"123\") == \"inf\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"0\"\nassert solution(\"123\") == \"1\"\nassert solution(\"123\") == \"inf\"\nassert solution(\"123\") == \"1\"\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"inf\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 24, 5) == 'inf'\nassert solution(123, 1234, 45) == 'inf'\nassert solution(123, 1234, 125) == 'inf'\nassert solution(123, 1234, 25) == 'inf'\nassert solution(123, 1234, 1412) == 'inf'\n"
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'inf'\n\"\"\""
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..+..\"\nassert solution(stdin) == \"..+..\"\nassert solution(stdin) == \"..+..\"\nassert solution(stdin) == \"..w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"..w..w..\"\nassert solution(stdin) == \"......\"\nassert solution(stdin) == \"..+..+..\"\nassert solution(stdin) == \"..w..w..\"\nassert solution(stdin) == \"..w..w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"...\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"..w..w..\"\n\n\nassert solution(stdin) == \"..w...w..\"\n\n\nassert solution(stdin) == \"..w.w..\"\n\n\nassert solution(stdin) == \"..w..w..\"\n\n\nassert solution(stdin) == \"..w..w.\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"..w..w..\"\nassert solution(stdin) == \"..w..w..\"\nassert solution(stdin) == \"..w..w..\"\nassert solution(stdin) == \"..w..w..\"\nassert solution(stdin) == \"..w..w..\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().strip()) == '+'\nassert solution(input().strip()) == 'w'\nassert solution(input().strip()) == '..'\nassert solution(input().strip()) == '..'\nassert solution(input().strip()) == '..'\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == '+'\nassert solution(2) == '..'\nassert solution(3) == '..'\nassert solution(4) == '..'\nassert solution(5) == '..'\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..+..\"\nassert solution(stdin) == \"..+..\"\nassert solution(stdin) == \"....\"\nassert solution(stdin) == \"......\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '..w..w..'\n\n\nInput\n4 8\n...w..\n..+..+..\n..+..+..\n..w..w..\n\nOutput\n....\n..+..\n..+..\n....\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"......\"\nassert solution(stdin) == \"..+..\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w...\"\nassert solution(stdin) == \"..+...\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"100\") == \"YES\"\nassert solution(\"999\") == \"NO\"\nassert solution(\"10000000\") == \"NO\""
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"3 1\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('7') == 'YES'\nassert solution('100') == 'YES'\nassert solution('15') == 'NO'\nassert solution('9960594') == 'YES'\nassert solution('2551') == 'YES'\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n------Constraints-----\n\n1 <= stdin.length <= 1e6\n0 <= stdin[i] <= 10^9\n\n-------Time Limit (C)-------\nTime limit for this problem is 2 seconds.\n\nSeconds spent: 80.000\n\nMemory limit: 3.3 MB\n\n------Problem Constraints------\n\n1 <= n <= 10^5\n-10^9 <= x, y <= 10^9\n\n------Division of a non-negative integer without remainder of the division is 0.\n\n\"\"\""
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"6\") == \"NO\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"7 2 3\"\n    ), \"Yes\"\nassert solution(\n    \"100 5\"\n    ), \"No\"\nassert solution(\n    \"15 4 8\"\n    ), \"No\"\nassert solution(\n    \"9960594\"\n    ), \"Yes\"\n\n\"\"\""
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('7') == 'NO'\nassert solution('100') == 'YES'\nassert solution('15') == 'NO'\nassert solution('9960594') == 'YES'\nassert solution('2551') == 'YES'\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == \"six\"\nassert solution(99) == \"ninety-nine\"\nassert solution(20) == \"twenty\"\nassert solution(0) == \"-\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"ninety-nine\"\nassert solution(stdin) == \"twenty\"\nassert solution(stdin) == \"one\"\nassert solution(stdin) == \"-two\"\nassert solution(stdin) == \"three\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == \"20\"\nassert solution(0) == \"-9\"\nassert solution(99) == \"ninety-nine\"\nassert solution(90) == \"twenty-nine\"\nassert solution(123) == \"twenty-one\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    '1'\n) == '1'\n\nassert solution(\n    '1000'\n) == 'invalid'\n\nassert solution(\n    '110001'\n) == '01111'\n\nassert solution(\n    '10'\n) == '1'\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6) == \"six\"\nassert solution(99) == \"ninety-nine\"\nassert solution(20) == \"twenty\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"six\"\n\n\n-----Constraints-----\n0 <= s <= 99\n\n\"\"\""
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6, \"-\") == \"six\"\nassert solution(99, \"ninety-nine\") == \"ninety-nine\"\nassert solution(20, \"twenty\") == \"twenty\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('0') == '0'\nassert solution('20') == 'ninety-ninety'\nassert solution('99') == 'twenty-twenty'\nassert solution('30') == 'twenty-twenty-twenty'\nassert solution('40') == 'twenty-twenty-ninety-ninety'\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"50\") == \"twenty\"\nassert solution(\"-5\") == \"-twenty\"\nassert solution(\"10-15\") == \"five-twenty-five\"\nassert solution(\"10-0\") == \"ten-five\"\nassert solution(\"5+2\") == \"five+two\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('120') == 'one hundred twenty-four'\nassert solution('12020') == 'one hundred twenty-two'\nassert solution('100') == 'one hundred'\nassert solution('1002') == 'two hundred'\nassert solution('20') == 'two'\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\"\n\"\"\""
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\nPass #2"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n\nn = int(input().rstrip())\narr = input().rstrip().split()\nd = defaultdict(int)\n\nfor i in arr:\n    d[int(i)] += 1\n\njatc_del_cnt = sum(d.values())"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 5 1000\") == \"2\"\nassert solution(\"2 2 3 4 5 6 9 999 1000\") == \"4\"\nassert solution(\"1 1 3 4 5 6 9 999 1000\") == \"2\"\nassert solution(\"1 1 3 4 5 6 9\") == \"1\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3 4 5 6 9\") == \"2\"\nassert solution(\"5\") == \"0\"\nassert solution(\"5 7 8 9 3 4 3\") == \"2\"\nassert solution(\"8\") == \"0\"\nassert solution(\"6\") == \"0\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nprint(stdin, \"\\n\", solution(stdin))\n\n-----Constraints-----\n\n1 <= stdin.length <= 200\n1 <= stdin[i] <= 100\n\n1 <= a_i <= 10,000\n\n-----Time Limit: 1 seconds-----\n\nSample Input\n\n4\n1 3 2 1\nSample Output\n\n2\n\nSample Input\n\n5\n1 3 2 1\nSample Output\n\n3\n\nSample Input\n\n6\n2 2 2 2 2 2 2\nSample Output\n\n3\n\nSample Input\n\n7\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\nSample Output\n\n3\n\n-----Note-----\n\nThe problems were solved in the first day of the training, which are at index $i$ and indexed from $1$ up to $i$.\nThe day is numbered from 1 to $n$, therefore $i$ is the index of the day when Polycarp has completed its training plan.\nThe day is numbered from $i$ to $n$, therefore $i$ is the index of the day when Polycarp will complete its training plan.\nIn the program, Polycarp will follow the conventions used by Polycarp, which in turn will use the format:\n\na_i = $a_i$\n\nIn this case $a_i$ corresponds to the number of problems solved, which Polycarp will solve on the $i$-th day.\n\n\"\"\""
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\\\"3\\\") == 1\nassert solution(\\\"1\\\") == 2\nassert solution(\\\"0\\\") == 4\nassert solution(\\\"0\\\") == 6\nassert solution(\\\"0\\\") == 12"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 1\") == \"2\"\n\nassert solution(\"2 4 3\") == \"3\"\n\nassert solution(\"2 2 2 2 2 2\") == \"3\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"\n5\n1 3 2 1\n\"\"\") == \"1\"\nassert solution(\"\"\"\n6\n2 2 2 2 2 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n6\n1 1 1 1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n7\n1 1 1 1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"\n7\n1 1 1 1 1 1\n1 1 1 1 1 1\n\"\"\") == \"4\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == \"2\"\nassert solution(6) == \"3\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 20\n1 <= a_i < 10\n\n\"\"\""
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 7\") == 12\n\n\"\"\""
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12, \"Wrong answer\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '12 1'\nassert solution(stdin) == '7'\n\n---Input Explanation-----\n\nThe first line contains a single integer $N$ ($3 \\le N \\le 10$) \u2014 the size of the chessboard.\n\nEach of the next $N$ lines contains $N$ integers $A_{i1}, A_{i2}, \\dots, A_{iN}$ ($1 \\le A_{ij} \\le N^2$) \u2014 the numbers written on the squares of the $i$-th row of the board.\n\nIt is guaranteed that all $A_{ij}$ are pairwise distinct.\n\nInput\n3\n1 9 3\n8 6 7\n4 2 5\n\nOutput\n12 1\n\nInput\n3\n1 9 4\n8 6 7\n4 2 5\n\nOutput\n9 2\n\n\"\"\"\n\nclass Solution:\n    def solve(self, N):\n        x, y = 1, 1\n        for _ in range(N):\n            for row in range(x, x+3):\n                for col in range(y, y+3):\n                    if (row!= x or col!= y) and self.check(row, col):\n                        if self.moves(row, col):\n                            return True\n                x += 1\n            y += 1\n            x = 1\n        return False\n\n    def moves(self, row, col):\n        if (row == x or col == y) and self.board[row][col] == 0:\n            return True\n        else:\n            return False\n    \n    def check(self, row, col):\n        for i in range(row, row+3):\n            for j in range(col, col+3):\n                if self.board[i][j] == 0:\n                    return False\n        return True"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 7\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"12 1\"\n\n\n------Constraints-----\n1 <= N <= 10^4\n1 <= A_{ij} <= N^2\n1 <= A_{ij} <= N\n\n------Time complexity-----\nO(N^2)\n\n------Space complexity-----\nO(N^2)\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12\n\n[ ] Try to understand why you get one of these wrong answer. Because I have an implementation of the solution problem, so that you can solve it using the two-solutions algorithm.\n\n[ ] The problem was solved with a simple algorithm, so I chose to create a recursive method, that could be more concise.\n\n[ ] The solution of this problem is to use a recursive algorithm, so I am sure you'll be able to solve it as well.\n\n[ ] The recursive algorithm only works if you are allowed to change a square from square $j$ to square $i$ in the same way that there are squares in the same row.\n\n[ ] The difference between the two algorithms is that you can only use square $i$ in the same way as there are squares in the same row.\n\n[ ] If you want to determine the number of steps to take, you should solve this problem using the following algorithm:\n\n[ ] First, you need to find the minimum number of moves required to replace the square $i$ with the square $j$ with the same number of replacements. In other words, you need to define a minimum number of moves required to replace the square $i$ with the square $j$ with the same number of replacements.\n\n[ ] As you go in the grid, you can't use a square to go from square $i$ to square $j$, because the number of replacements is not constrained by square $i$ and square $j$. To solve this problem, you need to reach square $j$ in the same way as there are squares in the same row.\n\n[ ] As you go in the grid, you can only use the square $j$ to go from square $i$ to square $j$, because the number of replacements is not constrained by square $i$ and square $j$. To solve this problem, you need to reach square $i$ in the same way as there are squares in the same row.\n\n[ ] You can't use a square to go from square $i$ to square $j$, because the number of replacements is not constrained by square $i$ and square $j$. To solve this problem, you need to reach square $i$ in the same way as there are squares in the same row.\n\n[ ] Now, we can use squares $i$ and $j$ to move to a different square.\n\n[ ] In the middle, you need to find the minimum number of moves required to replace the square $i$ with the square $j$ with the same number of replacements.\n\n[ ] In the middle, you have to find the minimum number of moves required to replace the square $i$ with the square $j$ with the same number of replacements.\n\n[ ] So, we can solve this problem by using the recursive algorithm.\n\n[ ] Your answer must be less than or equal to 10^12.\n\n[ ] Again, if you get the same answer, your answer may be different from your answer, so you don't have to calculate the answer exactly twice.\n\n[ ] The returned answer may be in any of the following:\n\n[ ] If you want to find the minimum number of moves required to replace the square $i$ with the square $j$ with the same number of replacements, you should calculate it and return that number.\n\n[ ] If you want to find the minimum number of moves required to replace the square $i$ with the square $j$ with the same number of replacements, you should not calculate it and return the answer as it is.\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '12 1'\n\"\"\"\n\n\nimport collections\n\n\nclass Solver:\n    def __init__(self, board, n):\n        self.board = board\n        self.n = n\n        self.nodes = collections.defaultdict(set)\n        self.nodes_weights = collections.defaultdict(int)\n\n    def put(self, x, y, v):\n        self.nodes_weights[x, y] += v\n        self.nodes[x, y] = v\n\n    def put_back(self, x, y, v):\n        self.nodes_weights[x, y] -= v\n        self.nodes[x, y] = self.nodes[x, y] - v\n        self.nodes[x, y] -= v\n\n    def solve(self):\n        self.nodes = collections.defaultdict(int)\n        self.nodes_weights = collections.defaultdict(int)\n        self.nodes_weights[1, 0] = 1\n        self.nodes[1, 0] = 1\n        self.nodes[0, 0] = 1\n\n        self.put(0, 0, 1)\n\n        queue = collections.deque([(0, 0)])\n        self.nodes_weights[0, 0] = 1\n        self.nodes[0, 0] = 1\n\n        visited = set()\n        while queue:\n            x, y = queue.popleft()\n\n            visited.add((x, y))\n            for i in range(4):\n                x_i, y_i = x + dx[i], y + dy[i]\n                if (x_i, y_i) in visited:\n                    continue\n                if not self.board[x_i][y_i] and (x_i, y_i) not in self.nodes:\n                    continue\n                self.put(x_i, y_i, self.nodes[x_i, y_i])\n                self.put_back(x_i, y_i, self.nodes[x_i, y_i])\n                self.put_back(x_i, y_i, self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i])\n                self.put_back(x_i, y_i, self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i])\n                self.nodes_weights[x_i, y_i] = self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i]\n\n                self.put(x_i, y_i, self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i])\n                self.put_back(x_i, y_i, self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i])\n                self.nodes_weights[x_i, y_i] = self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i]\n                queue.append((x_i, y_i))\n\n    def dfs(self, x, y):\n        visited = set()\n        self.nodes[x, y] = 1\n        self.put(x, y, 1)\n        queue = collections.deque()\n        self.nodes_weights[x, y] = 1\n        self.nodes[x, y] = 1\n        queue.append((x, y))\n        while queue:\n            x, y = queue.popleft()\n            visited.add((x, y))\n            for i in range(4):\n                x_i, y_i = x + dx[i], y + dy[i]\n                if (x_i, y_i) in visited:\n                    continue\n                if not self.board[x_i][y_i] and (x_i, y_i) not in self.nodes:\n                    continue\n                self.put(x_i, y_i, self.nodes[x_i, y_i])\n                self.put_back(x_i, y_i, self.nodes[x_i, y_i])\n                self.put_back(x_i, y_i, self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i])\n                self.put_back(x_i, y_i, self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i])\n                self.nodes_weights[x_i, y_i] = self.nodes_weights[x_i, y_i] + self.nodes[x_i, y_i]\n                queue.append((x_i, y_i))\n\n    def solve2(self, x, y):\n        visited = set()\n        self.nodes[x, y] = 1\n        self.put(x, y, 1)\n        self.nodes[x, y] = 1\n        queue = collections.deque([(x, y)])\n        self.nodes_weights[x, y] = 1\n        self.nodes[x, y] = 1\n        while queue:\n            x, y = queue.popleft()\n            visited.add((x, y))\n            for i in range(4):\n                x_i, y_i = x + dx[i], y + dy[i]\n                if (x_i, y_i) in visited:\n                    continue\n                if not self."
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 10\") == \"12\"\nassert solution(\"4 3\") == \"6\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"6 7\") == \"1\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"12 1\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12\n-----Constraints-----\n\n1 <= N <= 10^5\n1 <= A_{ij} <= N^2\n\"\"\"\nimport sys\nfrom collections import deque\nfrom heapq import heappush, heappop\n\nN = int(input())\npieces = []\nfor row in range(N):\n    pieces.append([int(i) for i in input().split()])"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution\u0434"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution\u0434"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"011\"), \"1\"\nassert solution(\"010101\"), \"0\"\nassert solution(\"1\"), \"1\"\nassert solution(\"00010011011\"), \"1\"\nassert solution
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"100010001\") == \"no\", \"The test case failed\"\nassert solution(\"100010001\") == \"yes\", \"The test case passed\""
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"01111101\") == \"no\"\nassert solution(\"10\") == \"yes\"\nassert solution(\"011110\") == \"no\"\nassert solution(\"111101\") == \"yes\"\nassert solution(\"01100001\") == \"no\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1234) == \"no\"\nassert solution(1111) == \"yes\"\nassert solution(20) == \"no\"\nassert solution(123456) == \"yes\"\nassert solution(112233) == \"yes\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"100010001\") == \"no\"\nassert solution(\"10001000101\") == \"yes\"\nassert solution(\"101011\") == \"no\"\nassert solution(\"1001111110101\") == \"yes\"\nassert solution(\"000101011111010101\") == \"yes\"\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"no\"\nassert solution(s) == \"yes\"\n\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == \"yes\"\n\n\n-----Constraints-----\n0 \u2264 s.length \u2264 10^6\ns contains only digits.\n\n\"\"\""
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('') == ''\nassert solution('0110100') == 'yes'\nassert solution('1110101') == 'yes'\nassert solution('10011011011001111000111100') == 'yes'\nassert solution('11100111') == 'yes'\n"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"yes\", \"The program should be ok.\"\n\n\n-----Bug-----\n\nIn the above program, we decided to use the following rule to remove digits from the number s:\n\nRemoval of number \"7\" removed 7.\n\nRemoval of number \"4\" removed 4.\n\nRemoval of number \"2\" removed 2.\n\nRemoval of number \"1\" removed 1.\n\nThe code was written in a way to remove the digits.\n\nIt is the responsibility of the user to remove digits as a number without any other digits.\n\nThe correct solution was to remove the digits of the string \"100010001\" (1 + 2 + 3 + 4 + 5) (7 + 4 + 5) by using the following rules:\n\nUsing the \"7\" removed string, the number can be replaced with \"4\" without any other digits.\nUsing the \"7\" removed string, the number can be replaced with \"2\" without any other digits.\nUsing the \"7\" removed string, the number can be replaced with \"1\" without any other digits.\nUsing the \"7\" removed string, the number can be replaced with \"3\" without any other digits.\nUsing the \"7\" removed string, the number can be replaced with \"2\" without any other digits.\nUsing the \"7\" removed string, the number can be replaced with \"1\" without any other digits.\nUsing the \"7\" removed string, the number can be replaced with \"4\" without any other digits.\n\nThe correct solution was to replace the digits of the number \"100010001\" with \"4\".\n\nThe function is tested on a given string and the solution is correct.\n\nThe string \"100010001\" is in the correct position of (1 + 2 + 3 + 4 + 5).\n\nThe program should not execute anything when the string is given.\n\n-----Constraints-----\n\n1 <= s.length <= 100\n1 <= s[i] <= 10^9\n\n\n-----Submissions-----\n\nWhat is a solution for this problem? Medium\n\nWhat is the meaning of the problem? Medium\n\nWhat is this function that you are trying to solve? Medium\n\nWhat is it that you are trying to solve? Medium\n\nConstraints of this problem:\n\n1 <= s.length <= 100\ns[i] is either 1 or 0.\n\nInput Format\n\nThe first line contains a string of digits separated by spaces, which consist only of 0 and 1.\n\nThe next line contains a non-empty string s.\n\nOutput Format\n\nPrint \u00abyes\u00bb (without quotes) if it's possible to remove the digits with the given digits from s. Otherwise print \u00abno\u00bb.\n\n\nSample Input\n\n5\n0 1 1 2 3 4 5\n\nSample Output\n\nyes\n\"\"\"\ns = input()\nprint('yes' if len(s) % 2 == 0 else 'no')\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'abcdefghijklmnopqrstuvwxyz'"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(aacceggiikkmmooqqssuuwwyy) == abcdefghijklmnopqrstuvwxyz\nassert solution(thereisnoanswer) == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aacceegiikkmmooqqssuuwwyy\") == \"-1\"\nassert solution(\"hereisnoanswer\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"\") == \"-1\"\nassert solution(\"wegtofk\") == \"-1\"\nassert solution(\"aaq\") == \"aaaa\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\""
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aacceegiikkmmooqqssuuwwyy\") == \"-1\"\nassert solution(\"thereisnoanswer\") == \"-1\"\nassert solution(\"aacceegiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('aa') == 'aa'\nassert solution('aaaa') == 'aa'\nassert solution('abcd') == 'abc'\nassert solution('ab') == 'ab'\nassert solution('ac') == 'ac'\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abcd\") == \"bcd\"\nassert solution(\"abba\") == \"abbc\"\nassert solution(\"baabababa\") == \"babab\"\nassert solution(\"abababababa\") == \"abababababab\"\nassert solution(\"abccba\") == \"aabbbccc\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '2.0000000000'\n\nassert solution(inp2) == '32.833333333'\n\n-----Constraints-----\n1 <= n, m, r, k <= 10^5\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        return str(eval(stdin))"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '17'\nassert solution(input()) == '9'\nassert solution(input()) == '40'\nassert solution(input()) == '32.8333333333333'"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= n, m, r, k <= 10^5\n1 <= stdin[i] <= 10^8\n\nConstraints\n0 <= n, m, r, k <= 10^5\n0 <= stdin[i] <= 10^8\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2.0000000000\"\n\n\n-----Constraints-----\n1 \u2264 n, m \u2264 10^5\n1 \u2264 r \u2264 min(n, m)\n1 \u2264 k \u2264 min(n\u00b7m, 10^5)"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"32.8333333333\"\nassert solution(input()) == \"2.0000000000\"\nassert solution(input()) == \"2.0000000000\"\nassert solution(input()) == \"2.0000000000\"\nassert solution(input()) == \"2.0000000000\"\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3 2 3\") == \"2.0000000000\"\nassert solution(\"12 17 9 40\") == \"32.833333333\"\n\"\"\""
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 2 3\"), \"2, the number of caught fish is as expected\"\nassert solution(\"12 17 9 40\"), \"32.833333333333333\"\n\n------Harder explanation-----\n\nMisha actually figured out that in the last part of the problem, she was able to put k fish into a cell of size 1 \u00d7 1. She's worried that the value of the number of caught fish (in the cell) is as high as possible, so she learned that she should be able to count all possible positions of the pool of fish. So Misha is able to catch all possible positions in such a way that the number of caught fish is as high as possible.\n\nHe can also put a k fish in a cell of size 1 \u00d7 1. The only thing I could not figure out is that the value of the number of caught fish in the cell (in the cell) is as high as possible.\n\nMisha's value of number of caught fish is as high as possible, so she was able to count all possible positions of the pool of fish.\n\nThe only thing I could not figure out is that the value of the number of caught fish in the cell (in the cell) is as high as possible.\n\nMisha can still grab an elephant in a cell of size 1 \u00d7 1, but she is not able to get any fish in such a cell, because she can't eat a fish in that cell, because she can't get any fish in a cell.\n\nMisha has to decide what to do with the fish, and the following test cases are presented:\n\nInput\n3 3 2 3\n\nOutput\n2.0000000000\n\nInput\n12 17 9 40\n\nOutput\n32.833333333333333\n\nInput\n30 30 30\n\nOutput\n34.342222222222222\n\n\"\"\""
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 11 30 40\") == \"100.0\"\nassert solution(\"12 19 20 30\") == \"20.0000000000\"\nassert solution(\"17 15 20 10\") == \"120.0\"\nassert solution(\"17 2 2 0\") == \"0.0\"\nassert solution(\"2 3 3 2\") == \"2.0\"\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1 0 0') == '1'\nassert solution('2 1 0 0') == '2'\nassert solution('3 1 0 0') == '0'\nassert solution('12 17 9 40') == '32.833333333333333'\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0 -3 -3 2\"\nassert solution(stdin) == \"0 -3 -3 2\"\nassert solution(stdin) == \"0 -3 -3 2\"\nassert solution(stdin) == \"0 -3 -3 2\"\nassert solution(stdin) == \"0 -3 -3 2\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"a\"*100 + \"b\") == \"-1\"\nassert solution(\"a\"*100 + \"b\"*100 + \"c\") == \"-1\"\nassert solution(\"a\"*100 + \"b\"*100 + \"c\"*100 + \"d\") == \"-1\"\nassert solution(\"a\"*100 + \"b\"*100 + \"c\"*100 + \"d\"*100 + \"e\") == \"-1\"\nassert solution(\"a\"*100 + \"b\"*100 + \"c\"*100 + \"d\"*100 + \"e\"*100 + \"f\") == \"-1\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin=\n    \"[1,2,3,-1,-4,-2,1,2,3,4,4,5,5,5,6,7,6,7,8,9,9,10]\") == \"[-1, -1, 3, -3, -3, -3, 7, 8, 9, 10]\"\n\nInput\n6\n0 1 -4 -2 -3 -1 -2\n\nOutput\n2\nInput\n5\n-2 -4 -2 -3 -3\nOutput\n-4\nInput\n1\n-1 -2 -1 -2 -3 -3 -2\n\nOutput\n1\nInput\n5\n-1 -2 -1 -2 -3 -3 -2\nOutput\n-1\nInput\n2\n-1 -2 -3 -3 -2\nOutput\n-1\nInput\n1\n-3 -2 -3 -3 -2\nOutput\n3\nInput\n4\n-3 -2 -3 -3 -3\nOutput\n-3\nInput\n1\n-1 -2 -1 -2 -3 -2 -3\nOutput\n3\nInput\n4\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-1\nInput\n1\n-1 -2 -1 -2 -3 -2 -2\nOutput\n1\nInput\n2\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-1\nInput\n2\n-1 -2 -3 -3 -2 -3 -3\nOutput\n-1\nInput\n4\n-3 -2 -3 -3 -2 -3 -3\nOutput\n-3\nInput\n2\n-1 -2 -1 -2 -3 -3 -2\nOutput\n-1\nInput\n3\n-1 -2 -3 -3 -2 -3 -3\nOutput\n-3\nInput\n2\n-1 -2 -1 -2 -3 -3 -3\nOutput\n1\nInput\n5\n-3 -2 -3 -3 -3 -3 -2\nOutput\n-3\nInput\n1\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-1\nInput\n3\n-1 -2 -3 -3 -3 -2 -3\nOutput\n-1\nInput\n4\n-3 -2 -3 -3 -2 -3 -2\nOutput\n-3\nInput\n2\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-1\nInput\n1\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-1\nInput\n4\n-3 -2 -3 -3 -3 -3 -3\nOutput\n3\nInput\n1\n-1 -2 -1 -2 -3 -2 -2\nOutput\n-2\nInput\n2\n-1 -2 -1 -2 -3 -3 -3\nOutput\n-3\nInput\n4\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-1\nInput\n2\n-1 -2 -1 -2 -3 -3 -3\nOutput\n-2\nInput\n3\n-1 -2 -3 -3 -3 -3 -2\nOutput\n-3\nInput\n1\n-3 -2 -3 -2 -3 -2 -3\nOutput\n-1\nInput\n2\n-3 -2 -3 -3 -3 -3 -2\nOutput\n-1\nInput\n1\n-3 -2 -3 -2 -3 -3 -3\nOutput\n1\nInput\n1\n-3 -2 -2 -3 -3 -3 -2\nOutput\n-1\nInput\n2\n-3 -3 -3 -3 -3 -3 -2\nOutput\n-1\nInput\n2\n-3 -3 -3 -2 -3 -3 -3\nOutput\n3\nInput\n1\n-3 -3 -2 -2 -3 -2 -3\nOutput\n-1\nInput\n2\n-3 -2 -2 -2 -3 -3 -3\nOutput\n-3\nInput\n2\n-3 -2 -2 -2 -3 -3 -3\nOutput\n1\nInput\n3\n-1 -2 -1 -2 -3 -3 -2\nOutput\n-3\nInput\n2\n-1 -2 -3 -3 -3 -3 -2\nOutput\n-1\nInput\n2\n-1 -2 -1 -2 -3 -3 -3\nOutput\n-2\nInput\n2\n-1 -2 -3 -2 -3 -3 -3\nOutput\n-2\nInput\n2\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-2\nInput\n1\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-2\nInput\n2\n-1 -1 -1 -1 -3 -3 -3\nOutput\n-2\nInput\n2\n-1 -1 -1 -1 -3 -3 -3\nOutput\n1\nInput\n2\n-1 -1 -1 -1 -3 -3 -3\nOutput\n-1\nInput\n2\n-1 -1 -1 -1 -3 -3 -3\nOutput\n-2\nInput\n4\n-3 -2 -3 -3 -2 -3 -2\nOutput\n-3\nInput\n2\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-2\nInput\n2\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-2\nInput\n3\n-1 -2 -2 -3 -2 -3 -3\nOutput\n-2\nInput\n4\n-3 -2 -3 -3 -3 -3 -2\nOutput\n-3\nInput\n2\n-1 -1 -1 -1 -1 -1 -1\nOutput\n-2\nInput\n3\n-3 -2 -3 -3 -3 -3 -2\nOutput\n-3\nInput\n2\n-1 -1 -1 -1 -1 -1 -1\nOutput\n-1\nInput\n1\n-3 -2 -2 -3 -3 -2 -2\nOutput\n-3\nInput\n2\n-1 -2 -2 -3 -2 -3 -2\nOutput\n-1\nInput\n1\n-1 -2 -1 -2 -3 -2 -3\nOutput\n-1\nInput\n2\n-3 -2"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 1 1 1') == '-3 -3 2'\nassert solution('3 1 -3 2') == '-3 2 -3 -3'\nassert solution('5 7') == '-3 2 3 4 5'\nassert solution('1 -1 -1 -1 -1 -1 -1') == '-3 -3 1'\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-3 -3 2'\nassert solution(stdin) == '-3 -3 2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '-3 2'\nassert solution(stdin) == '-3 2'\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == [-3]\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^6\na_i <= 2 * 10^5\n\n------Time Complexity-----\nO(n)\n\"\"\""
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(4, [2,2,2,2]) == \"-3 -3 -3 -3\"\nassert solution(5, [-1, -1, -1, -1, -1]) == \"0\"\nassert solution(6, [-1, -3, -3, 0, 0, 0]) == \"0\"\nassert solution(7, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == \"0\"\nassert solution(8, [-3, -3, -3, -3, -3, -3, -3, -3, -3, -3]) == \"0\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0\\n0\\n2\\n0\\n0\\n0\\n0\\n2\\n-3\\n-3 -3\\n0\\n-3\\n-3 -3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n-3\\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == -1\nassert solution(stdin) == 6\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4, 2) == 2\nassert solution(5, 2) == -1\nassert solution(12, 5) == 6\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4,2) == 2\nassert solution(5,3) == -1\n\n\n\"\"\"\n\nclass Solution:\n    def getKth(self, n: int, k: int) -> int:\n        if n<k:\n            return -1\n        left, right = 1, 1\n        count = 0\n        while left <= right:\n            mid = (left + right)//2\n            count += (mid * (mid+1)) // 2\n            if count > n:\n                left = mid + 1\n            elif count < n:\n                right = mid - 1\n            else:\n                return mid\n        return left"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 5\nassert solution(inp) == 6\nassert solution(inp) == -1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^9\n\nTime Limit: 1 second (O(n * k) in worst case)\nMemory Limit: 1GB\n\n\n------Time complexity-----\n\nO(n^2)\n\nO(1)\n\nO(n)\n\n------space complexity-----\n\nO(n)\n\n------Description-----\n\neasy code\n\ntime = 0\nlimit = 1\nwhile limit <= 10**9:\n    time += 1\n    limit *= 2\n    time = time // 2\n\ntime = 0\nlimit = 10**9\nwhile limit <= 10**9:\n    time += 1\n    limit //= 2\n    time = time // 2\n\ntime = 0\nlimit = 10**9\nwhile limit >= 1:\n    if limit % 2 == 0:\n        limit //= 2\n    else:\n        limit *= 2\n        limit //= 2\n\nO(n^2)\n\ntime = 0\nlimit = 10**9\nwhile limit >= 1:\n    if limit % 2 == 0:\n        limit //= 2\n    else:\n        limit //= 2\n        if time >= limit:\n            print(limit)\n            return\n    time += 1\n    limit = limit // 2\n\nO(n)\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, 2) == 2\nassert solution(5, 2) == -1\nassert solution(12, 5) == 6\nassert solution(12345, 2) == -1\nassert solution(12345, 3) == -1\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0, 0) == -1\n\nassert solution(1, 1) == 2\n\nassert solution(1, 2) == 2\n\nassert solution(1, 3) == -1\n\n\n-----Constraints-----\n1 <= n <= 10^9\n1 <= k <= 10^9\n\nTime Limit: 1 second\nSpace Limit: 1 megabyte\n\n\n-----Time Complexity-----\n\nTime: O(n)\nSpace: O(1)\n\n\n-----Constraints-----\n\n'''\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin.split()\n) == -1,'solution() returned wrong answer'"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(-1)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,3) == 7, \"error\"\nassert solution(3,8) == 1, \"error\"\nassert solution(3,1) == 3, \"error\"\nassert solution(1,1) == 1, \"error\"\nassert solution(3,6) == 0, \"error\"\n\nprint(\"Correct\")\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"88\"\n\nInput\n5\n1 5 5 6 8 9\n1\n\nOutput\n98\n'''"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, \"1 0 0 1 0 1 0 0 1 0\") == 87, \"Masha got set of n cubes for her birthday, got {!r}\".format(87)\nassert solution(3, \"1 1 1 1 1 1 1 1 1 1\") == 0, \"Masha got set of n cubes for her birthday, got {!r}\".format(0)\nassert solution(3, \"1 1 1 1 1 1 1 1 1 1\") == 2, \"Masha got set of n cubes for her birthday, got {!r}\".format(2)\nassert solution(3, \"1 0 0 1 0 1 0 1 0 1\") == 3, \"Masha got set of n cubes for her birthday, got {!r}\".format(3)\nassert solution(3, \"1 0 0 1 0 1 0 1 0 1\") == 4, \"Masha got set of n cubes for her birthday, got {!r}\".format(4)\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"88\"\n\"\"\""
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6, 7) == 87\nassert solution(7, 3) == 98\nassert solution(2, 10) == 78\nassert solution(3, 1) == 3\nassert solution(0, 7) == 0\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"88\"\nassert solution(stdin) == \"98\"\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"87\"\nassert solution(stdin) == \"98\"\nassert solution(stdin) == \"32\"\n\n-----Bug Fixes-----\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case.\nFix the test case."
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == \"87\", \"expected: 87, got: {}\".format(solution(3))\nassert solution(5) == \"98\", \"expected: 98, got: {}\".format(solution(5))"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 5) == 5\nassert solution(3, 4) == 2\nassert solution(3, 6) == 6\nassert solution(3, 5) == 4\nassert solution(3, 0) == 0\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\nstdin: str = \"3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n7 8 9 0 1 2\n1 2 4 5 6 7 8\n) == 87\nassert solution(\nstdin: str = \"3\n0 1 2 3 4 5\n6 7 8 9 0 1\n2 3 4 5 6 7\n) == 98\n\n\"\"\"\nimport math"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '12345678900000000'\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"123456789\") == \"123456789\"\nassert solution(\"10000\") == \"10000\"\nassert solution(\"38101\") == \"38101\"\nassert solution(\"123456789018\") == \"123456789018\"\nassert solution(\"1234567890183\") == \"1234567890183\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(int(stdin)) == int(stdin)\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('123456789') == '12345678900000000'\nassert solution('123456789') == '12345678900000000'\nassert solution('123456789') == '12345678900000000'\nassert solution('123456789') == '12345678900000000'\nassert solution('123456789') == '12345678900000000'\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4\") == 30000\nassert solution(\"9\") == 30000\nassert solution(\"10\") == 30000\nassert solution(\"6\") == 30000\nassert solution(\"3\") == 30000\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(375,4) == 30000\nassert solution(10000,1) == 1000000\nassert solution(38101,0) == 38101\nassert solution(123456789,8) == 12345678900000000\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"38101 0\") == \"38101\"\nassert solution(\"123456789 8\") == \"12345678900000000\"\nassert solution(\"123456789 9\") == \"123456789\"\nassert solution(\"123456789 1\") == \"123456789\"\nassert solution(\"123456789 2\") == \"123456789\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"4\", \"375\"]) == \"30000\"\nassert solution([\"35\", \"37\"]) == \"30000\"\nassert solution([\"8\", \"12345\"]) == \"12345\"\nassert solution([\"12345\", \"123456789\", \"8\", \"123456789\"]) == \"12345678900000000\"\nassert solution([\"123456789\", \"123456789\", \"123456789\", \"123456789\"]) == \"12345678900000000\"\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '12345678900000000'\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('123456789') == '12345678900000000'\nassert solution('1') == '1'\nassert solution('0') == '0'\nassert solution('375') == '375'\nassert solution('1234') == '1234'\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\\n1 1 1\\n1 1 1\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"3\"\nassert solution(\"3 3\\n1 0 1\\n1 0 1\\n0 0 0\\n0 0 0\\n0 0 0\") == \"0\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\\n0 0 0\") == \"0\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\") == \"3\"\nassert solution(\"3 3\\n0 0 0\\n0 0 0\\n0 0 0\") == \"3\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"3 1 1\") == \"1\"\nassert solution(\"3 2 1\") == \"3\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin='''\n    3 3\n    1 1 1\n    1 1 1\n    0 0 0\n    ''') == '0'\nassert solution(\n    stdin='''\n    3 3\n    1 0 1\n    1 0 1\n    0 0 0\n    ''') == '-1'\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 3\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"0 1 1\"\nassert solution(stdin) == \"0 0 0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '0'\n\nwhile True:\n    try:\n        stdin = stdin.strip()\n        n, m = [int(i) for i in stdin.split(\" \")]\n        break\n    except:\n        print(\"Error, please try again.\")\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= m <= 10^6\n\n0 <= A[i] <= 1\n\n\n-----Tags-----\nBinary search\n'''"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.2\"\nassert solution(stdin) == \"0.7\"\nassert solution(stdin) == \"0.0\"\nassert solution(stdin) == \"0.000000000001\"\nassert solution(stdin) == \"1.0\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2 2 2) == 0.6666666666666666 0.6666666666666666\nassert solution(2 1 2) == 0.6666666666666666 0.6666666666666666\nassert solution(1 1 3) == 0.300000000000 0.550000000000\nassert solution(1 1 1) == 0.0\nassert solution(1 0 1) == 0.0\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '3.33672433333 3.33333333333 0.366666666667'\nassert solution(input()) == '1.333333333333 0.333333333333 0.333333333333'\nassert solution(input()) == '0.150000000000 0.300000000000 0.550000000000'\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution('1 1 1')) == '0.25'\nassert solution(solution('1 1 1 1')) == '0.25'\nassert solution(solution('1 1 2')) == '0.25'\nassert solution(solution('2 1 3')) == '0.5'\nassert solution(solution('3 2 1')) == '0.25'\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0.0550000000000000\"\nassert solution(stdin) == \"0.0\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"2 1 2\n2 2 1\"\"\") == \"0.150000000000 0.300000000000 0.5570000000000\"\nassert solution(\"\"\"1 1 3\n1 1 1\"\"\") == \"0.272727272727 0.777777777777 0.890909090909\"\nassert solution(\"\"\"2 1 2\n2 2 1\"\"\") == \"0.133333333333 0.250000000000 0.480000000000\"\nassert solution(\"\"\"1 1 3\n2 1 1\"\"\") == \"0.733333333333 0.533333333333 0.333333333333\"\n\"\"\"\nassert solution(\"\"\"2 1 2\n2 2 1\"\"\") == \"0.92424242424 0.92524242424 0.888888888889\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 2 2'), 'wrong'\nassert solution('2 1 2'), 'wrong'\nassert solution('1 1 3'), 'wrong'\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"0.333333333333 0.333333333333 0.333333333333\"\nassert solution(\"2 1 2\") == \"0.150000000000 0.300000000000 0.550000000000\"\nassert solution(\"1 1 3\") == \"0.057142857143 0.657142857143 0.285714285714\"\nassert solution(\"1 1 1\") == \"0.057142857143 0.657142857143 0.285714285714\"\nassert solution(\"2 1 2\") == \"0.076923076923 0.083333333333 0.083333333333\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0.300000000000 0.300000000000 0.300000000000 0.150000000000 0.057142857143 0.657142857143 0.285714285714'\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0.057142857143 0.657142857143 0.285714285714'\nassert solution(stdin) == '0.300000000000 0.300000000000 0.300000000000'"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution()) == \"2\"\nassert solution(solution(\"3\")) == \"2\"\nassert solution(solution(\"4\")) == \"1\"\nassert solution(solution(\"5\")) == \"0\"\nassert solution(solution(\"6\")) == \"0\"\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,10,9,1,6) == 2\nassert solution(2,3,1,1,2) == 2\nassert solution(1,1,1,1,2) == 0\nassert solution(2,1,2,1,2) == 1\nassert solution(1,1,1,2,2) == 0\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10 50 50 50 50 10 50 10 10') == '1'\nassert solution('10 20 10 20 1') == '2'\nassert solution('10 20 10 20 1 50') == '2'\nassert solution('10 20 10 20 1 50 20') == '3'\nassert solution('10 20 10 20 1 50 20 5') == '4'\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '50'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '50'\nassert solution(stdin) == '75'\nassert solution(stdin) == '100'"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 10 9 20 1') == '2'\nassert solution('1 100 50 200 75') == '50'\nassert solution('1 100 50 200 75 3') == '3'\nassert solution('1 100 50 200 75 7') == '7'\nassert solution('1 100 50 200 75 99') == '99'\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 10\nassert solution(input()) == 50\nassert solution(input()) == 30\n\n\n\nInput\n\n14 10 1 2 4\n\nOutput\n\n16\n\nInput\n\n14 10 5 1 7 1 6 5\n\nOutput\n\n6\n\n\n\"\"\""
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"INFINITY\"\nassert solution(stdin) == \"INFINITY\"\n\"\"\"\nimport math\nfrom sys import stdin\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        if not stdin:\n            return \"0\"\n        N, M = map(int, stdin.split())\n        A, B, C, D, E, F = map(int, stdin.split())\n        if not (-10**9 <= A <= 10**9 and -10**9 <= B <= 10**9 and -10**9 <= C <= 10**9 and -10**9 <= D <= 10**9 and -10**9 <= E <= 10**9 and -10**9 <= F <= 10**9):\n            return \"INFINITY\"\n        \n        if N == 1 and M == 1:\n            return \"1\"\n\n        N_i = math.log(N, 10)\n        M_i = math.log(M, 10)\n        A_i = A / (N_i * 10**M_i)\n        C_i = C / (M_i * 10**N_i)\n        D_i = D / (N_i * 10**M_i)\n        E_i = E / (M_i * 10**N_i)\n        F_i = F / (M_i * 10**N_i)\n        \n        if A_i == C_i == D_i == E_i == F_i:\n            return \"INFINITY\"\n\n        if A_i == C_i == E_i == F_i == 0:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == 1:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -1:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -2:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -3:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -4:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -5:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -6:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -7:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -8:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -9:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -10:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -11:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -12:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -13:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -14:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -15:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -16:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -17:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -18:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -19:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -20:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -21:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -22:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -23:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -24:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -25:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -26:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -27:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -28:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -29:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -30:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F_i == -31:\n            return \"INFINITY\"\n\n        if A_i == C_i == D_i == E_i == F"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"13\"\n\"\"\""
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 6') == '13'\nassert solution('1 2 0') == '13'\nassert solution('0 1 1') == 'INFINITY'\nassert solution('0 2 2') == '0'\nassert solution('-3 4 -1') == '0'\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 6') == '13'\nassert solution('6 4') == '3'\nassert solution('2 3') == '0'\nassert solution('4 0') == '0'\nassert solution('4 4') == '0'\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '13'"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"13\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '13'"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input: str\n) == \"13\"\n\"\"\""
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '13'\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 10 4') == 'NO'\nassert solution('3 10 3') == 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 'NO'\nassert solution('6') == 'NO'\nassert solution('9') == 'NO'\nassert solution('0') == 'NO'\nassert solution('10') == 'YES'\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 'NO'\n\n\n\n-----Constraints-----\n\n1 \u2264 s \u2264 10^9\n1 \u2264 t \u2264 10^9\n\nAccepted\n27,03\nSubmissions\n27,08,98\n\nSubmissions\n27,08,98\nAccepted\n27,08,98\nSubmissions\n28,16,21\nAccepted\n28,16,21\n\"\"\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"NO\"\nassert solution(\"1 4\") == \"YES\"\nassert solution(\"1 6\") == \"YES\""
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"NO\"\nassert solution(input) == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 10 4\") == \"NO\"\nassert solution(\"3 10 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\nassert solution(\"3 8 53\") == \"NO\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 8\") == \"NO\"\nassert solution(\"5 4\") == \"YES\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"3 1\") == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 11 2\") == \"NO\"\nassert solution(\"3 11 3\") == \"YES\"\nassert solution(\"3 8 51\") == \"YES\"\nassert solution(\"3 8 52\") == \"YES\"\nassert solution(\"3 8 53\") == \"YES\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 10 4') == 'NO', \"1st case: should have been 'NO'\"\nassert solution('3 8 51') == 'YES', \"2nd case: should have been 'YES'\"\nassert solution('3 8 52') == 'YES', \"3rd case: should have been 'YES'\"\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1 or solution(stdin) == 1\n\n[input]\n\n[output]\n\n3\n3\n10 20\n\n[input]\n\n3\n1 10\n2 9\n3 9\n2 3\n2 9\n2 3\n2 9\n2 3\n\n[output]\n\n2 1\n-1 -1\n\"\"\""
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 4\"\n) == \"2 1\"\nassert solution(\n    \"3 5\"\n) == \"1 5\"\nassert solution(\n    \"3 9\"\n) == \"3 9\"\nassert solution(\n    \"2 3\"\n) == \"1 2\"\nassert solution(\n    \"2 9\"\n) == \"1 9\"\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1\") == 0, \"Expected 0, got {}\".format(1)\nassert solution(\"4\") == 0, \"Expected 0, got {}\".format(1)\nassert solution(\"3\") == 1, \"Expected 1, got {}\".format(1)\nassert solution(\"4\") == 2, \"Expected 2, got {}\".format(1)\nassert solution(\"5\") == -1, \"Expected -1, got {}\".format(1)\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, \"1 2 3 4 5 6 20\") == \"2 1\"\nassert solution(3, \"1 10 1 1 2 10 1 2 10 1 2\") == \"1 1\"\nassert solution(3, \"1 2 3 2 3 3 3 3 3 3 3 3 3 3\") == \"1 2 1\"\nassert solution(3, \"1 5 6 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == -1\nassert solution('3') == -1\nassert solution('2') == -1\nassert solution('1') == -1\nassert solution('0') == -1\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 1\") == -1\nassert solution(\"3 5 6 20\") == -1"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == [-1, -1]\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 10 20') == '1 1'\nassert solution('2 9') == '2 1'\nassert solution('3 9') == '2 1'\nassert solution('2 3') == '3 1'\nassert solution('2 9') == '2 1'\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 5, 2, 9, 3, 6, 20) == -1\nassert solution(3, 5, 2, 9, 3, 6, 20) == 2\nassert solution(3, 5, 2, 9, 3, 6, 20) == 1\n\n\n-----Discussion-----\n\nThe number of pairs is given by the given line:\n\nthe number of pairs is equal to the length of the line minus 2.\n\nFor example, for input 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 6"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0, 0) == 1\nassert solution(0, 0) == 0\nassert solution(0, 3) == 0\nassert solution(0, 3) == -1\n\n\n-----Sort-----\n\nIn a matrix of a_i, its entries are consecutive, so, e.g., the matrix a_{2, 2}, a_{2, 1}, and a_{1, 2} contain only 2 entries, so, a_{2, 1}, a_{2, 2} and a_{1, 1} are consecutively, and a_{1, 1} and a_{1, 2} are not.\n\nThe matrix contains the following entries:\n\n-1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, \"GGA??CGTT\") == \"GCCGGTCGGC\"\nassert solution(6, \"GGA??CGTT\") == \"GCCGGCGGC\"\nassert solution(4, \"GGA??CGTT\") == \"GCCGGCGTT\"\nassert solution(5, \"GGA??CGTT\") == \"GCCGGCGTT\"\nassert solution(0, \"GGA??CGTT\") == \"GGG\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"AACGCTCT\"\n\nassert solution(stdin) == \"AGCTGCT\"\n\nassert solution(stdin) == \"AGCTGCT\"\n\nassert solution(stdin) == \"AACGCTCT\"\n\nassert solution(stdin) == \"AGCTGCT\""
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4, \"AGCT\") == \"AGACGTCT\"\nassert solution(5, \"AAAAATCGG\") == \"AACGACGG\"\nassert solution(6, \"TGGGTTACGG\") == \"TTACGACGG\"\nassert solution(8, \"A\") == \"AACGACGG\"\nassert solution(8, \"A\") == \"AACGACGG\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), 'The decoded genome is not possible'\n\"\"\""
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"A\"+\"C\") == \"GTT\"\nassert solution(\"G\"+\"T\") == \"ATTT\"\nassert solution(\"G\"+\"C\") == \"GCG\"\nassert solution(\"A\"+\"G\") == \"GGG\"\nassert solution(\"A\"+\"T\") == \"ATT\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'AGACGTCT'\n\n\n\"\"\""
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"AACGCTCT\"\nassert solution(stdin) == \"AGCT\"\nassert solution(stdin) == \"AACGCT\"\nassert solution(stdin) == \"AG\"\nassert solution(stdin) == \"CAGC\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"AGTCT\"\n\nassert solution(stdin) == \"AAGCC\"\n\nassert solution(stdin) == \"AAGCC\"\n\nassert solution(stdin) == \"AAGGC\"\n\nassert solution(stdin) == \"AAGGC\""
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ATACGTTACGTCTTATACATGTTACGC\") == \"AGACGTCTTATACATGTTACGC\"\nassert solution(\"ATACGTTACGTCTTATACATGTTACGAT\") == \"AGACGTCTTATACATGTTACGC\"\nassert solution(\"ATACGTTACGTCTTATACATGTTACGAT\") == \"AGACGTCTTATACATGTTACGAT\"\nassert solution(\"ATACGTTACGTCTTATACATGTTACGAT\") == \"AGACGTCTTATACATGTTACGC\"\nassert solution(\"ATACGTTACGTCTTATACATGTTACGAT\") == \"AGACGTCTTATACATGTTACGAT\"\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"AACGGCTT\"\nassert solution(stdin) == \"AAAAGCCT\"\nassert solution(stdin) == \"AACGCTT\"\n\n-----Bug Fix-----"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"xx..\") == \"YES\"\nassert solution(\"x..\") == \"NO\"\nassert solution(\"x.ox\") == \"NO\"\nassert solution(\"x..x\") == \"YES\"\nassert solution(\"oox.ox\") == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"xx..\", \"..oo\", \"x...\", \"ooxx\"]) == \"YES\"\nassert solution([\"x.ox\", \"o..\", \"..x\", \"x.o\"]) == \"NO\""
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\n-----Advanced-----\n\nGiven three lines of tic-tac-toe position, please write a program to determine if Ilya can win by making single turn or not by placing his own sign.\n\nThe rules of tic-tac-toe on the 4 \u00d7 4 field are as follows. Before the first turn all the field cells are empty. The two players take turns placing their signs into empty cells (the first player places Xs, the second player places Os). The player who places Xs goes first, the another one goes second. The winner is the player who first gets three of his signs in a row next to each other (horizontal, vertical or diagonal).\n\n\n-----Input-----\n\nThe tic-tac-toe position is given in four lines.\n\nEach of these lines contains four characters. Each character is '.' (empty cell), 'x' (lowercase English letter x), or 'o' (lowercase English letter o). It is guaranteed that the position is reachable playing tic-tac-toe, and it is Ilya's turn now (in particular, it means that the game is not finished). It is possible that all the cells are empty, it means that the friends left without making single turn.\n\n\n-----Output-----\n\nPrint single line: \"YES\" in case Ilya could have won by making single turn, and \"NO\" otherwise.\n\n\n-----Examples-----\nInput\nxx..\n.oo.\nx...\nooxx.\n\nOutput\nYES\n\nInput\nx..x\n..oo\no...\nx.xo\n\nOutput\nYES\n\nInput\nx..x\n..oo\no...\nx.xo\n\nOutput\nNO\n\nInput\no.x.\no...\n.x..\nooxx\n\nOutput\nNO\n\nInput\no.x.\no...\n.x..\nooxx\n\nOutput\nNO\n\n\n-----Note-----\n\nIn the first example Ilya had two winning moves: to the empty cell in the left column and to the leftmost empty cell in the first row.\n\nIn the second example it wasn't possible to win by making single turn.\n\nIn the third example Ilya could have won by placing X in the last row between two existing Xs.\n\nIn the fourth example it wasn't possible to win by making single turn.\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"YES\"\n\nassert solution(input) == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"NO\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"YES\"\nassert solution(input) == \"NO\""
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"YES\"\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 5\nstdin contains 'x' or '.' only.\n\n'''\n\nimport numpy as np\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('xx.x.x') == 'YES'\nassert solution('xx..x') == 'YES'\nassert solution('ooxx') == 'NO'\nassert solution('oooxx') == 'NO'\nassert solution('x..x') == 'NO'\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nInput\nxx..\n.ox.\nx...\nooxx\n\nOutput\nYES\n\nInput\nx.ox\nox..\nx.o.\noo.x\n\nOutput\nNO\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, [1, 3, 2, 2, 3, 1]) == \"NO\"\nassert solution(5, [1, 2, 3, 4, 5, 1]) == \"YES\"\nassert solution(6, [1, 2, 3, 4, 5, 6, 1]) == \"NO\"\nassert solution(7, [1, 2, 3, 4, 5, 6, 7, 1]) == \"YES\"\nassert solution(8, [1, 2, 3, 4, 5, 6, 7, 8, 1]) == \"YES\"\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, [1, 3, 2, 5, 2]) == 'YES'\nassert solution(5, [3, 4, 2, 2, 2]) == 'NO'\n\n\"\"\"\nfrom typing import List\nfrom itertools import combinations\n\n\"\"\"\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\n\nfor test in range(int(stdin.strip())):\n    n, *a = map(int, input().split())\n    l = len(a)\n    s = 0\n    i = 0\n    if l <= n:\n        print(1)\n    else:\n        for x in a:\n            i += 1\n            s += x\n            if i == l:\n                break\n        print(s)\n        break"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"NO\"\n\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\n-----Time Limit-----\n1 minute\n\n-----Space Limit-----\n10^8\n\n\n\n\"\"\""
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"3 4 2 1\") == \"NO\"\nassert solution(\"3 4 2 4\") == \"NO\"\nassert solution(\"3 4 2 3\") == \"NO\"\nassert solution(\"3 4 2 2\") == \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, [1, 3, 2, 4, 5]) == YES\nassert solution(5, [1, 2, 3, 4, 5]) == NO\nassert solution(5, [2, 3, 4, 5, 6]) == YES\nassert solution(6, [1, 2, 3, 4, 5, 6]) == NO\nassert solution(6, [1, 2, 3, 4, 5, 6, 7, 8, 9]) == NO\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3 2 4 2\") == \"YES\"\nassert solution(\"5 4 2 4 1\") == \"NO\"\n"
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\", \"1\", \"3\", \"2\", \"2\", \"5\"]) == \"NO\"\nassert solution([\"2\", \"1\", \"2\", \"3\", \"3\", \"3\", \"4\", \"4\", \"6\", \"5\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"3\", \"3\", \"4\", \"5\", \"4\", \"6\", \"6\", \"7\", \"5\", \"7\", \"5\", \"7\", \"7\", \"6\", \"7\", \"6\", \"5\", \"7\", \"8\", \"5\", \"8\", \"8\", \"9\", \"8\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \"9\", \""
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == YES\n\n\n-----Constraints-----\n1 <= n <= 10^4\n\n1 <= a_i <= 10^9\n'''\n\nimport sys\n\nn = int(sys.stdin.readline())"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\""
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\nassert solution(stdin) == \"No\"\n\n\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 'Yes'\n\"\"\""
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"No\"\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == \"Yes\"\nassert solution(\"6 1\") == \"No\"\nassert solution(\"7 7\") == \"No\"\nassert solution(\"7 4\") == \"No\"\nassert solution(\"8 9\") == \"No\"\n"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('6 1') == 'Yes'\nassert solution('6 5') == 'No'"
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"4 2\"\n    ), \"Yes\"\n    \nassert solution(\n    \"6 1\"\n    ), \"No\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"YES\"\n\n\nassert solution(inp) == \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution([1, 1]) is not valid\"\nassert solution(stdin), \"solution([5, 1]) is not valid\"\nassert solution(stdin), \"solution([1, 4, 5, 2, 3, 5, 3, 5, 4, 5]) is not valid\"\nassert solution(stdin), \"solution([5, 1, 4, 3, 5, 2, 3, 5, 4, 5]) is not valid\"\nassert solution(stdin), \"solution([5, 2, 4, 3, 5, 1, 3, 5, 4, 5]) is not valid\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\nExplanation\n\nInput\n\nThe box with $x$, $y$ and $z$ is 4 grape party.\n\nThe box with $a$, $b$, $c$, $x$, $y$, $z$ is 1 grape party.\n\nThe box with $a$, $b$, $c$, $x$, $y$, $z$ is $z$ grape party.\n\nInput\n\n\nThe box with $a$, $b$, $c$, $x$, $y$, $z$ is $z$ grape party.\n\nThe box with $a$, $b$, $c$, $x$, $y$, $z$ is $z$ grape party.\n\nThe box with $a$, $b$, $c$, $x$, $y$, $z$ is $z$ grape party.\n\nThe box with $a$, $b$, $c$, $x$, $y$, $z$ is $z$ grape party.\n\n\n\n-----Solution-----\n1    1    1    1    1    1    1    1\n5    3    4    3    3    2    1    2\n\nOutput\nYES\n\n1    1    1    1    1    1    1    1\n5    3    2    2    3    3    2    1\n\nInput\n\n4 3 2\n3 3 2\n\nOutput\nNO\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\nstdin contains only digits, and 0's and $.\n\n-----Time Limit-----\nYou will be given time limit for solving a problem, as input.\n\n0 < x < 10^5\n0 < y < 10^5\n0 < z < 10^5\n\n\n-----SAMPLE INPUTS-----\n\nInput\n1 6 2\n4 3 3\n\nOutput\nYES\n\nInput\n5 1 1\n4 3 2\n\nOutput\nNO\n\n\n-----SAMPLE OUTPUT-----\n\nYES\n\nInput\n1 2\n6 3\n\nOutput\nNO\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\nstdin contains only digits, and 0's and $.\n\n0 < x < 10^5\n0 < y < 10^5\n0 < z < 10^5\n\nExplaination\n\nGiven:\n\nx = 1, y = 3, z = 5\n\nNumber of grape in the box:\n\nx = 5, y = 3, z = 4\n\nNumber of grape in the box:\n\nx = 1, y = 4, z = 3\n\nNumber of grape in the box:\n\nx = 1, y = 2, z = 5\n\nNumber of grape in the box:\n\nx = 1, y = 1, z = 4\n\nNumber of grape in the box:\n\nx = 1, y = 2, z = 2\n\nNumber of grape in the box:\n\nx = 1, y = 3, z = 2\n\nNumber of grape in the box:\n\nx = 1, y = 2, z = 1\n\nNumber of grape in the box:\n\nx = 1, y = 1, z = 1\n\nNumber of grape in the box:\n\nx = 1, y = 2, z = 1\n\nNumber of grape in the box:\n\nx = 2, y = 2, z = 1\n\nNumber of grape in the box:\n\nx = 2, y = 1, z = 1\n\nNumber of grape in the box:\n\nx = 2, y = 1, z = 2\n\nNumber of grape in the box:\n\nx = 2, y = 1, z = 3"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"NO\"\n\n-----Constraints-----\n1 <= x, y, z <= 10^5\n1 <= a, b, c <= 10^5\n\"\"\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 4 1\") == \"YES\"\n\nassert solution(\"5 3 2\") == \"NO\"\n\nInput\n2\n4 2\n\nOutput\nNO\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nclass Node:\n    def __init__(self, value, left, right):\n        self.value = value\n        self.left = left\n        self.right = right\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0\") == \"YES\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 6 2') == 'NO'\nassert solution('5 1 1') == 'YES'\nassert solution('5 1 1') == 'NO'\nassert solution('5 1 1') == 'YES'\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'NO'\n\nTest Input\n\n1 0 0 0 0 0 0 0 0 1 1 1 0 0 1 0 1 0 1 0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0 0 0 1 0 1) == \"NO\"\nassert solution(0 0 0 1 1 0) == \"YES\"\nassert solution(1 0 0 0 0) == \"NO\"\nassert solution(1 0 0 0 1) == \"NO\"\nassert solution(1 0 0 0 1) == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 1 1 0\") == \"YES\"\nassert solution(\"0 1 0 0\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1 0 0 0 0 0 0 1 0 1\") == \"YES\"\nassert solution(\"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 0 0\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,0,0,1,0) == \"NO\", \"No Correct answer\"\nassert solution(1,0,0,1,1) == \"YES\", \"No Correct answer\"\nassert solution(1,1,0,0,1) == \"NO\", \"No Correct answer\"\nassert solution(1,0,1,1,0) == \"NO\", \"No Correct answer\"\nassert solution(1,1,0,1,1) == \"YES\", \"No Correct answer\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\")((\") == \"\")\nassert solution(\"))(\")((\") == \"\")\nassert solution(\"((()))((()()))((()()()()))((()()()()()))((()()()()()()))((()()()()()))\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 0 0 1\") == \"YES\"\nassert solution(\"0 1 0 0\") == \"NO\"\n\nassert solution(\"0 0 0 0\") == \"NO\"\nassert solution(\"0 0 1 1\") == \"NO\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 0 0 1') == 'NO'\nassert solution('0 1 1 0') == 'NO'\nassert solution('0 0 1 0') == 'YES'\nassert solution('0 0 0 1') == 'YES'\nassert solution('0 0 0 0') == 'YES'\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\"\n\nclass Solution:\n    def detect_traffic_light(self, grid: List[List[int]]) -> str:\n        rows = len(grid)\n        cols = len(grid[0])\n        _x = [1, 0, -1, 0]\n        _y = [0, 1, 0, -1]\n\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == 1:\n                    # 4-way left\n                    grid[i][j] = 1\n\n                    # 4-way straight\n                    # green light\n                    # neighbors\n                    # green light\n                    for k in range(4):\n                        if i + _x[k] >= 0 and i + _x[k] < rows and \\\n                            j + _y[k] >= 0 and j + _y[k] < cols and \\\n                            grid[i + _x[k]][j + _y[k]] == 0:\n                            grid[i + _x[k]][j + _y[k]] = 1\n\n        # 4-way right\n        # green light\n        # neighbors\n        # green light\n        for k in range(4):\n            if i + _x[k + 1] >= 0 and i + _x[k + 1] < rows and \\\n                j + _y[k + 1] >= 0 and j + _y[k + 1] < cols and \\\n                grid[i + _x[k + 1]][j + _y[k + 1]] == 0:\n                grid[i + _x[k + 1]][j + _y[k + 1]] = 1\n\n        # 4-way straight\n        # green light\n        for k in range(4):\n            if i + _x[k] >= 0 and i + _x[k] < rows and \\\n                j + _y[k] >= 0 and j + _y[k] < cols and \\\n                grid[i + _x[k]][j + _y[k]] == 0:\n                grid[i + _x[k]][j + _y[k]] = 1\n\n        return \"YES\" if grid[rows - 1][cols - 1] == 0 else \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('106878') == 'NO'\nassert solution('0908') == 'YES'\nassert solution('001001') == 'YES'\nassert solution('123') == 'NO'\nassert solution('123456789') == 'NO'"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nfrom typing import Tuple\n\nclass Solution:\n    def check(self, num: int, nums: List[int]) -> bool:\n        result = True\n        for i in range(len(nums)):\n            if abs(num-nums[i])!=0:\n                result = False\n                break\n        return result\n\n    def solve(self, nums: List[int]) -> str:\n        \n        for i in range(len(nums)):\n            for j in range(i+1,len(nums)):\n                result = True\n                if nums[i]==nums[j]:\n                    result = self.check(nums[i],nums)\n                else:\n                    result = False\n                if result:\n                    return str(nums[i])+\" \"+str(nums[j])\n        return \"NO\""
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input().strip().split(' ')) == 'YES'\n\n\n-----Done-----\n\"\"\""
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n'''"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'NO'"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 9\n\n1 \u2264 stdin.length \u2264 9\n\n2 \u2264 stdin[i] \u2264 9\n\n\n-----Time Limit: 10 min\n\n-----Memory Limit: 20 GB\n\n-----Can you solve it without using extra memory? (removes from memory)\n\n-----Can you solve it with extra space? (removes from memory)\n\n-----Can you solve it with extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----Can you solve it without extra space? (removes from memory)\n\n-----"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"YES\", \"3 does not work as you have only one digit\"\nassert solution(\"5\") == \"NO\", \"5 does not work as you have only one digit\"\nassert solution(\"2\") == \"YES\", \"2 does not work as you have only one digit\"\nassert solution(\"9\") == \"YES\", \"9 does not work as you have only one digit\""
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), 'Your code does not pass the test'\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3\") == \"10\"\nassert solution(\"0 0 1\") == \"5\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"0 3\") == \"10\"\nassert solution(\"0 4\") == \"10\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 2\") == \"10\"\nassert solution(\"4 1\") == \"10\"\nassert solution(\"4 3\") == \"10\"\nassert solution(\"4 5\") == \"10\"\nassert solution(\"4 6\") == \"10\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '10'\n\nprint('Example 1:')\nprint('Input : ')\nprint(stdin)\nprint('Exception :')\nprint(str(10*2)+'\\n')\nprint('Output :')\nprint(str(10*2))\nprint()\n\nprint('Example 2:')\nprint('Input : ')\nprint(stdin)\nprint('Exception :')\nprint(str(10*2)+'\\n')\nprint('Output :')\nprint(str(10*2) + '\\n')\nprint()\n\nprint('Example 3:')\nprint('Input : ')\nprint(stdin)\nprint('Exception :')\nprint(str(10*2)+'\\n')\nprint('Output :')\nprint(str(10*2) + '\\n')\nprint()\n\nprint('Example 4:')\nprint('Input : ')\nprint(stdin)\nprint('Exception :')\nprint(str(10*2)+'\\n')\nprint('Output :')\nprint(str(10*2) + '\\n')\nprint()"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"3 5\") == \"6\"\nassert solution(\"4 1\") == \"10\"\nassert solution(\"5\") == \"10\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, 2) == 10\nassert solution(4, 3) == 5\nassert solution(4, 5) == 10\nassert solution(4, 6) == 5\nassert solution(4, 7) == 10\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == \"10\"\nassert solution(\"6 3\") == \"10\"\nassert solution(\"4 5\") == \"10\"\nassert solution(\"1 6\") == \"10\"\nassert solution(\"0 1\") == \"10\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"3 3\") == \"5\"\n\n\n-----Brute Force-----\n\ninput:\n\nn = 7\nf = 3\n\nOutput:\n\n1\n1\n1\n1\n\ninput:\n\nn = 7\nf = 1\n\noutput:\n\n1\n1\n1\n1\n\ninput:\n\nn = 7\nf = 2\n\noutput:\n\n2\n2\n2\n2\n\ninput:\n\nn = 7\nf = 3\n\noutput:\n\n5\n\n\n-----Brute Force-----\n\ninput:\n\nn = 7\nf = 1\n\noutput:\n\n0\n0\n0\n0\n\ninput:\n\nn = 7\nf = 3\n\noutput:\n\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n-----Brute Force-----\n\nInput:\n\n2 2\n1 3\n\nOutput:\n\n5\n\nInput:\n\n1 1\n1\n\nOutput:\n\n2\n\nInput:\n\n1 1\n\nOutput:\n\n2\n\nInput:\n\n1 1\n\nOutput:\n\n2\n\nInput:\n\n1 1\n\nOutput:\n\n2\n\nInput:\n\n1 1\n\nOutput:\n\n1\n\nInput:\n\n1 1\n\nOutput:\n\n2\n\nInput:\n\n1 1\n\nOutput:\n\n2\n\nInput:\n\n2 1\n\nOutput:\n\n2\n\nInput:\n\n2 1\n\nOutput:\n\n2\n\n\"\"\"\n\nclass Solution:\n    def maximumProfit(self, prices: List[int], fee: int) -> int:\n        total_prod = 0\n        sell_prod = 0\n        for i in range(len(prices)):\n            total_prod = total_prod + prices[i]\n            sell_prod = sell_prod + (prices[i] - fee)\n        return sell_prod\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"4 2\", \"2 1\", \"3 5\", \"2 3\", \"1 5\", \"0 6\"]) == \"10\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k_{i}, l_{i} <= 10^9\n\n\"\"\"\nfrom collections import deque\nimport heapq\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(test_input) == answer\n\"\"\"\n\nimport sys\nimport copy\n\nclass cctool:\n    def __init__(self, n, k):\n        self.n = n\n        self.k = k\n        self.stdin = sys.stdin\n        self.solution = sys.stdout\n        \n    def __str__(self):\n        return f'{self.n} {self.k}'\n        \n    def write(self, s: str):\n        self.stdin.write(s)\n        \n    def flush(self):\n        self.stdin.flush()\n        \n    def read(self):\n        return self.stdin.readline().rstrip()"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"5\n2\n\n5 2\n\"\"\") == 10\nassert solution(\"\"\"1\n10\n\n\"\"\") == 0\nassert solution(\"\"\"1\n10\n\n\"\"\") == 1\nassert solution(\"\"\"5\n4\n\n2\n\"\"\") == 10\nassert solution(\"\"\"1\n1\n\n\"\"\") == 1\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin.readline()) == '10'\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,1) == 0\nassert solution(1,2) == 10\nassert solution(2,1) == 10\nassert solution(3,1) == 10\nassert solution(4,1) == 10\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == 10\nassert solution(\"5 2\") == 0\nassert solution(\"5 5\") == 10\nassert solution(\"1 10\") == 0\n\n\nExplanation\n\nIn this example, the message \"p_{i} > p_{j}\" means that cow i is allowed to have the largest messiness p_{i} > p_{j}. So the maximum messiness for any two different orders of cows is 10, as shown in the output.\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\""
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 2\") == 1\nassert solution(\"2 5\") == 0\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0') == 0\nassert solution('1') == 10\nassert solution('2') == 0\nassert solution('3') == 10\nassert solution('4') == 10\n"
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 10 2 4') == '1'\nassert solution('10 11 2 4') == '-1'\n\n\n-----Constraints-----\n\n0 \u2264 N \u2264 10^18\n0 \u2264 M \u2264 10^18\n0 \u2264 K \u2264 N\n0 \u2264 L \u2264 10^18\n\n-----Time Limit: 1.0s (not exceeded)\n\n-----Memory Limit: 16 GB (not exceeded)\n\n\n-----Constraints:\n\nTime Limit: 1.0s (not exceeded)\n\nNumber of Input Lines: 2\n\nNumber of Output Lines: 2\n\n-----Good luck!\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\n\n\n-----Test-----\nInput\n10 11 2 4\n\nOutput\n1\n\"\"\""
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"-1\"\n\n-----Constraints-----\n\n1 <= N, M, K, L <= 10^18\n0 <= Ivan's money $M$, K, L, and I have $L$ coins from the friends.\nIvan can buy $Ivan's collection of $N$ coins.\n\"\"\""
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(9) == \"-1\"\nassert solution(9) == \"1\"\nassert solution(12) == \"-1\"\nassert solution(12) == \"1\"\nassert solution(123) == \"-1\"\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution((\"1 2 3\", \"1 4 1\", \"1 5 3\", \"1 4 5\", \"2 5 3\", \"1 6 2\", \"1 6 6\")) == \"-1\"\nassert solution((\"2 3 4\", \"3 4 3\", \"3 5 3\", \"3 6 3\", \"2 6 3\", \"4 6 5\", \"4 6 5\")) == \"-1\"\nassert solution((\"1 2 3\", \"1 4 1\", \"1 5 3\", \"1 6 2\", \"1 7 2\", \"1 8 2\", \"1 9 2\", \"1 10 2\", \"2 12 2\", \"2 13 2\", \"2 14 2\", \"2 15 2\", \"3 12 2\", \"3 13 2\", \"3 14 2\", \"3 15 2\", \"4 12 2\", \"4 13 2\", \"4 14 2\", \"4 15 2\")) == \"-1\"\nassert solution((\"1 2 3\", \"1 4 1\", \"1 5 3\", \"1 6 2\", \"1 7 2\", \"1 8 2\", \"1 9 2\", \"1 10 2\", \"2 12 2\", \"2 13 2\", \"2 14 2\", \"2 15 2\", \"3 12 2\", \"3 13 2\", \"3 14 2\", \"3 15 2\", \"4 12 2\", \"4 13 2\", \"4 14 2\", \"4 15 2\")) == \"-1\"\nassert solution((\"1 2 3\", \"1 4 1\", \"1 5 3\", \"1 6 2\", \"1 7 2\", \"1 8 2\", \"1 9 2\", \"1 10 2\", \"2 12 2\", \"2 13 2\", \"2 14 2\", \"2 15 2\", \"3 12 2\", \"3 13 2\", \"3 14 2\", \"3 15 2\", \"4 12 2\", \"4 13 2\", \"4 14 2\", \"4 15 2\")) == \"0\"\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"10 11 2 4\", \"1 1 2 4\", \"1 1 2 5\", \"1 1 2 6\", \"1 1 2 7\", \"1 1 2 8\", \"1 1 2 9\", \"1 1 2 10\", \"1 1 2 11\", \"1 1 2 12\", \"1 1 2 13\", \"1 1 2 14\", \"1 1 2 15\", \"1 1 2 16\", \"1 1 2 17\", \"1 1 2 18\", \"1 1 2 19\", \"1 1 2 20\", \"1 1 2 21\", \"1 1 2 22\", \"1 1 2 23\", \"1 1 2 24\", \"1 1 2 25\"]) == \"1\"\n\n\nassert solution([\"1 1 2 4\", \"1 1 2 5\", \"1 1 2 6\", \"1 1 2 7\", \"1 1 2 8\", \"1 1 2 9\", \"1 1 2 10\", \"1 1 2 11\", \"1 1 2 12\", \"1 1 2 13\", \"1 1 2 14\", \"1 1 2 15\", \"1 1 2 16\", \"1 1 2 17\", \"1 1 2 18\", \"1 1 2 19\", \"1 1 2 20\", \"1 1 2 21\", \"1 1 2 22\", \"1 1 2 23\", \"1 1 2 24\", \"1 1 2 25\"]) == \"2\"\n\n\nassert solution([\"1 1 2 4\", \"1 1 2 5\", \"1 1 2 6\", \"1 1 2 7\", \"1 1 2 8\", \"1 1 2 9\", \"1 1 2 10\", \"1 1 2 11\", \"1 1 2 12\", \"1 1 2 13\", \"1 1 2 14\", \"1 1 2 15\", \"1 1 2 16\", \"1 1 2 17\", \"1 1 2 18\", \"1 1 2 19\", \"1 1 2 20\", \"1 1 2 21\", \"1 1 2 22\", \"1 1 2 23\", \"1 1 2 24\", \"1 1 2 25\"]) == \"5\"\n\n\nassert solution([\"1 1 2 4\", \"1 1 2 5\", \"1 1 2 6\", \"1 1 2 7\", \"1 1 2 8\", \"1 1 2 9\", \"1 1 2 10\", \"1 1 2 11\", \"1 1 2 12\", \"1 1 2 13\", \"1 1 2 14\", \"1 1 2 15\", \"1 1 2 16\", \"1 1 2 17\", \"1 1 2 18\", \"1 1 2 19\", \"1 1 2 20\", \"1 1 2 21\", \"1 1 2 22\", \"1 1 2 23\", \"1 1 2 24\", \"1 1 2 25\"]) == \"15\"\n\n\nassert solution([\"1 1 2 4\", \"1 1 2 5\", \"1 1 2 6\", \"1 1 2 7\", \"1 1 2 8\", \"1 1 2 9\", \"1 1 2 10\", \"1 1 2 11\", \"1 1 2 12\", \"1 1 2 13\", \"1 1 2 14\", \"1 1 2 15\", \"1 1 2 16\", \"1 1 2 17\", \"1 1 2 18\", \"1 1 2 19\", \"1 1 2 20\", \"1 1 2 21\", \"1 1 2 22\", \"1 1 2 23\", \"1 1 2 24\", \"1 1 2 25\"]) == \"17\"\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"10\", \"2\", \"3\", \"4\", \"4\", \"3\", \"1\", \"1\"]) == \"1\"\nassert solution([\"4\", \"3\", \"2\", \"2\", \"4\", \"3\", \"3\", \"2\"]) == \"-1\"\n\"\"\""
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), 'no'\n\"\"\"\n\nimport sys\nfrom collections import Counter\n\nN, M, K, L = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(5)\nassert solution(stdin) == str(-1)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 4) == 5\nassert solution(1, 2) == -1\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin),'solution() failed'\nassert solution(stdin),'solution() failed'\nassert solution(stdin),'solution() failed'\nassert solution(stdin),'solution() failed'\nassert solution(stdin),'solution() failed'\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == -1\n\nStandard input\n\n6 5\nBB\nWWWB\nWWWB\nWWBB\nWWWW\nWWWW\nWWWW\nWWWW\n\nStandard output\n\n5\n\n\"\"\"\n\nn, m = map(int, input().split())\ncell = [[False] * m for _ in range(n)]\nfor i in range(n):\n    lst = input()\n    for j in range(m):\n        if lst[j] == 'B':\n            cell[i][j] = True\n        else:\n            cell[i][j] = False\n\nfor k in range(n):\n    for i in range(m):\n        if cell[k][i] and k >= 0 and i >= 0:\n            print(k, i)\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4\") == \"5\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4 3\") == \"3\"\nassert solution(\"5 1\") == \"2\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\""
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 5\nassert solution(stdin) == 9\nassert solution(stdin) == 6\nassert solution(stdin) == 7\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 1 2 3 4 5') == 'Yes'\nassert solution('3 1 0 0 0') == 'No'\nassert solution('5 1 2 1 1') == 'No'\nassert solution('3 1 1 1 1') == 'Yes'\n\n\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"4\", \"4\", \"5\", \"4\", \"5\", \"5\", \"5\"]) == \"No\"\nassert solution([\"2\", \"0\", \"0\", \"1\", \"2\", \"0\"]) == \"Yes\"\nassert solution([\"3\", \"5\", \"0\", \"1\", \"3\", \"0\"]) == \"No\"\nassert solution([\"1\", \"1\", \"0\", \"2\", \"2\", \"2\", \"2\"]) == \"Yes\"\nassert solution([\"1\", \"0\", \"1\", \"2\", \"2\", \"2\", \"2\"]) == \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 3 4 5') == 'Yes'\nassert solution('2 1 4 3 5') == 'No'\nassert solution('3 7 9') == 'No'\nassert solution('3 6 9') == 'No'\nassert solution('2 1 4 1') == 'No'\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n-----Constraints-----\n1 <= stdin.length <= 3 * 10^4\n1 <= stdin[i] <= 10^6\n1 <= y_i < 10^6\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n5\n1 2 3 4 5\n2 1 4 3 5\n\nOutput\nYes\n\nExample 2:\n\nInput\n3\n1 1 1 1\n1 0 1 0\n\nOutput\nNo\n\nConstraints:\n1 <= stdin.length <= 5 * 10^4\n1 <= stdin[i] <= 10^6\n1 <= y_i < 10^6\n\nTime Limit: 1 sec\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"No\"\n\n-----Constraints-----\n\n1 <= n <= 100\n\n0 <= x_i <= 1000\n\n0 <= y_i <= 1000\n\n-----Time Limit-----\n\nFor each test, print a single line where the first line contains the string representation of a number $i_1$, the second line contains the string representation of $i_2$, and so on.\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2 1 4 3 5\", \"2 0 1 0 1\", \"1 0 1 0 1\", \"1 1 1 1 1\"]) == \"Yes\"\nassert solution([\"1 1\", \"0 0\", \"1 1\"]) == \"No\"\nassert solution([\"0 0\", \"1 1\", \"1 1\", \"0 1\"]) == \"No\"\nassert solution([\"0 0\", \"1 1\", \"1 0\", \"1 0\"]) == \"No\"\nassert solution([\"1 1\", \"1 1\", \"1 1\", \"1 1\"]) == \"No\"\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4\\n2\\n1\\n6') == 'No'\n\nassert solution('3\\n1\\n1\\n6') == 'Yes'\n\nassert solution('4\\n3\\n4\\n5\\n1') == 'No'\n\nassert solution('1\\n1\\n1') == 'No'\n\nassert solution('1\\n1\\n1\\n2') == 'No'\n\n\"\"\""
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\\\"\"\"\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"90 90 90 90\"), \"A sub-tuple is not a valid sub-tuple.\"\nassert solution(\"60 60 60 60\"), \"A sub-tuple is not a valid sub-tuple.\"\nassert solution(\"60 60 60 60\"), \"A sub-tuple is not a valid sub-tuple.\"\nassert solution(\"60 60 60 60\"), \"A sub-tuple is not a valid sub-tuple.\"\nassert solution(\"60 60 60 60\"), \"A sub-tuple is not a valid sub-tuple.\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '360'\nassert solution(input()) == '360'\n\n\n\n----Working Example----\n\nprint(solution(input()))\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n\nThe third test case (stdin = \"3\") contains only one piece of pizza that can be taken by only one from Vasya and Petya. So the answer is |(90 + 90) - (90 + 90)| = 0.\n\n[Tutorial]\n\n[Constraints]\n\n0\n\n[Input]\n\nThe first line of the input contains an integer n, the number of pieces into which the delivered pizza was cut.\n\nThe second line contains n integers a_{i} (1 \u2264 a_{i} \u2264 360) \u00a0\u2014 the angles of the sectors into which the pizza was cut.\n\nThe third line contains n integers a_{i} (1 \u2264 a_{i} \u2264 360) \u00a0\u2014 the sum of all a_{i} is 360.\n\n\n[Output]\n\nPrint one integer \u00a0\u2014 the minimal difference between angles of sectors that will go to Vasya and Petya.\n\n\n[Constraints]\n\n0\n\n[Time limit] 4 seconds (15 minutes)\n\n[Specialty]\n\n[Solutions]\n\n[Example]\n\nInput:\n\n4\n90 90 90 90\n\nOutput:\n\n0\n\n[Good luck]\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 0, \"The output should be 0.\"\n\nassert solution(input()) == 360, \"The output should be 360.\"\n\nassert solution(input()) == 360, \"The output should be 360.\"\n\nassert solution(input()) == 180, \"The output should be 180.\"\n\nassert solution(input()) == 360, \"The output should be 360.\""
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"360\"\n'''"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 0\n\nExample 1:\n\nInput\n\n3\n360 360 360\n\nOutput\n\n360\n\nExplanation\n\nVS\n\nThe lowest angle of the sectors is angle = 0.\nThe second angle is angle + 90.\nThe third angle is angle + 180.\nVS\n\nThe lowest angle of the sectors is angle = 90.\nThe second angle is angle + 90.\nThe third angle is angle + 180.\nVS\n\nThe lowest angle of the sectors is angle = 90.\nThe second angle is angle + 180.\nThe third angle is angle + 180.\nVS\n\nThese angles are all valid: |(90 + 90) - (90 + 90)| = 360.\n\nExample 2:\n\nInput\n\n3\n160 170 150 150\n\nOutput\n\n360\n\nExplanation\n\nVS\n\nThe lowest angle of the sectors is angle = 0.\nThe second angle is angle + 90.\nThe third angle is angle + 180.\nVS\n\nThe lowest angle of the sectors is angle = 90.\nThe second angle is angle + 90.\nThe third angle is angle + 180.\nVS\n\nThe lowest angle of the sectors is angle = 90.\nThe second angle is angle + 180.\nThe third angle is angle + 180.\nVS\n\nThese angles are all valid: |(90 + 90) - (90 + 90)| = 360.\n\nExample 3:\n\nInput\n\n1\n160 170 150 160\n\nOutput\n\n360\n\nExplanation\n\nVS\n\nThe lowest angle of the sectors is angle = 0.\nThe second angle is angle + 90.\nThe third angle is angle + 180.\nVS\n\nThe lowest angle of the sectors is angle = 90.\nThe second angle is angle + 90.\nThe third angle is angle + 180.\nVS\n\nThe lowest angle of the sectors is angle = 90.\nThe second angle is angle + 180.\nThe third angle is angle + 180.\nVS\n\nThese angles are all valid: |(90 + 90) - (90 + 90)| = 360.\n\nExample 4:\n\nInput\n\n2\n360 360 360\n\nOutput\n\n360\n\nExplanation\n\nVS\n\nThe lowest angle of the sectors is angle = 0.\nThe second angle is angle + 90.\nThe third angle is angle + 180.\nVS\n\nThe lowest angle of the sectors is angle = 90.\nThe second angle is angle + 90.\nThe third angle is angle + 180.\nVS\n\nThe lowest angle of the sectors is angle = 90.\nThe second angle is angle + 180.\nThe third angle is angle + 180.\nVS\n\nThese angles are all valid: |(90 + 90) - (90 + 90)| = 360.\n\"\"\""
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\n\"\"\"\n"
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '360'\n\"\"\"\n\nimport math"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\nstdin) == \"7\""
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 0\nassert solution(inp) == 1\nassert solution(inp) == 7\nassert solution(inp) == 9\nassert solution(inp) == 1\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4,4\\n3,1\\n1,2\\n2,1\\n2,2\\n1,3\\n1,3\\n2,4\\n3,2\") == \"2\"\nassert solution(\"2,1,3,2\\n4,3,2,1\\n3,4,3,2\\n1,2,3,2\\n2,3,4,2\\n1,2,3,2\") == \"1\"\nassert solution(\"1,2,3,2\\n2,3,2,1\\n3,4,3,2\\n1,2,3,2\") == \"3\"\nassert solution(\"1,2,3,2\\n2,3,2,1\\n3,4,3,2\\n1,2,3,2\") == \"4\"\nassert solution(\"2,1,3,2\\n4,3,2,1\\n3,4,3,2\\n1,2,3,2\") == \"2\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(9)\n\nsolution(stdin = \"4 3\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 2\")\n\nsolution(stdin = \"3 3\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"3 3\")\n\nsolution(stdin = \"3 3\")\n\nsolution(stdin = \"2 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 2\")\n\nsolution(stdin = \"3 3\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 2\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 2\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 2\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"2 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \"1 1\")\n\nsolution(stdin = \""
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '9'\n\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2,2') == '3'\nassert solution('2,2,1') == '3'\nassert solution('3,2,2') == '3'\nassert solution('3,2,1,3') == '3'\nassert solution('2,2,2,3,3') == '3'\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"2 2\") == \"9\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"2 2\") == \"4\"\nassert solution(\"1 3\") == \"1\"\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 3') == 7\nassert solution('2 2') == 9\nassert solution('3 2') == 7\nassert solution('4 2') == 8\nassert solution('5 2') == 8\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 3\\n2 2\\n3 2\\n4 3\\n5 3\\n6 3\\n7 2\\n8 3\\n9 4\\n10 5\\n10 6\\n9 7\\n10 10\\n10 7\\n10 6\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7\\n10 10\\n10 7\\n9 7"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2244 2245'\n\nassert solution(stdin) == '2244 2245'\n\nassert solution(stdin) == '2244 2245'\n\nassert solution(stdin) == '2244 2245'\n\nassert solution(stdin) == '2244 2245'"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3') == 4\nassert solution('6') == 5\nassert solution('1') == -1\nassert solution('17') == 144\nassert solution('67') == 2244\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"-1\"\nprint(solution(stdin))"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '144'\nassert solution(stdin) == '2244'\nassert solution(stdin) == '2244'\nassert solution(stdin) == '2244'\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"8\"\nassert solution(\"5\") == \"8\"\nassert solution(\"6\") == \"10\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()=='3')==\"4 5\"\nassert solution(input()=='6')==\"8 10\"\nassert solution(input()=='1')==\"1\"\nassert solution(input()=='17')==\"144 145\"\nassert solution(input()=='67')==\"2244 2245\""
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '12 5'\nassert solution(input()) == '12 5'\nassert solution(input()) == '12 5'\nassert solution(input()) == '12 5'\nassert solution(input()) == '12 5'\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5') == '3'\nassert solution('6') == '6'\nassert solution('1') == '1'\nassert solution('17') == '144'\nassert solution('67') == '2244'\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3') == '4'\nassert solution('5') == '5'\nassert solution('6') == '5'\nassert solution('1') == '0'\nassert solution('17') == '145'\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n-----IMP-----\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"123456\") == \"Yes\"\nassert solution(\"789012\") == \"No\""
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\"]) == \"No\", \"no\"\nassert solution([\"1\",\"2\",\"3\",\"5\",\"7\",\"9\",\"10\"]) == \"Yes\", \"yes\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"Yes\", \"yes\"\nassert solution([\"1\",\"2\",\"3\",\"5\"]) == \"Yes\", \"Yes\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"No\", \"No\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5,3) == \"Yes\"\nassert solution(4,4) == \"No\"\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 104\n1 <= k <= 10^18\n1 <= n <= 10^18\n\n-----Submissions-----\n\nSubmissions (my solutions)\n1\n\"\"\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\n-----Other Solutions-----"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\""
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nInput\n7 4\n\nOutput\nNo\n\nInput\n10 5\n\nOutput\nNo\n\"\"\""
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '<'\nassert solution(stdin) == '>'\nassert solution(stdin) == '='\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n        \n        input()\n    ) == \"<\"\n\n    pass\n\nassert solution(\n        input()\n) == \">\"\n\n    pass\n\nassert solution(\n        input()\n) == \"=\"\n\n    pass\n\nassert solution(\n        input()\n) == \">\"\n\n    pass\n\nassert solution(\n        input()\n) == \"<\"\n\n    pass"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1000000000') == '<'\nassert solution('100000001') == '='\nassert solution('100000000') == '>'\nassert solution('12345678901234567890') == '<'\nassert solution('12345678901234567890') == '=\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\", \"Empty input\"\nassert solution(\"1\") == \"\", \"Only one number\"\nassert solution(\"1,2,3\") == \"\", \"Two or more numbers\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 164 163 165 165 166 167 168 169 169 170 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 189 190 191 190 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 210 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 275 277 276 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 301 303 303 304 305 306 308 308 309 310 311 310 313 314 315 316 317 318 329 330 330 331 332 333 333 334 334 335 336 337 336 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '>'\nassert solution(input()) == '<'\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abc') == '<'\nassert solution('abcd') == '>'\nassert solution('123') == '='\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \">\"\nassert solution(input().rstrip(\">\")) == \"<\"\nassert solution(input().lstrip(\"=\")) == \"=\"\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \">\", 'expected <, got'+ str(solution(stdin))\nassert solution(stdin) == \"=\", 'expected =, got'+ str(solution(stdin))\nassert solution(stdin) == \"<\", 'expected <, got'+ str(solution(stdin))\nassert solution(stdin) == \"=\", 'expected =, got'+ str(solution(stdin))\nassert solution(stdin) == \">\", 'expected >, got'+ str(solution(stdin))\n"
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(9,10) == \"012345\"\nassert solution(11,10) == \"12345\"\nassert solution(1,1) == \"=\", \"Error\"\nassert solution(1,2) == \"=\", \"Error\"\nassert solution(1,0) == \"=\", \"Error\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, [1, 1, -1]) == 6\nassert solution(2, [1, 0, 1]) == 2\nassert solution(1, [-1, 0, 0]) == 0\nassert solution(0, [0, 1, -1]) == 2\nassert solution(1, [0, -1, 0]) == 0\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 1\", \"1 0 1\"]) == \"6\"\nassert solution([\"2 1\", \"1 0 1\", \"1 1 1\"]) == \"7\"\nassert solution([\"1 1\", \"1 1 0\", \"1 -1 1\", \"1 0 -1\", \"0 1 0\"]) == \"5\"\n\n'''\n\nn,p = map(int,stdin.split())"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n\n\n[execution time limit] 4 seconds (py3)\n\n[input]\n3 1\n-1 0 1\n\n[output]\n\n65\n\n\n[execution time limit] 0.4 seconds (py3)\n\n[input]\n3 1\n1 0\n\n[output]\n\n1\n\n\n[execution time limit] 0.4 seconds (py3)\n\n[input]\n2 1\n1 0\n\n[output]\n\n1\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"6\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"1 0 0\") == \"3\"\nassert solution(\"1 -1 -1 -1 1 1\") == \"3\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2\\n3 3\\n4 4\\n5 5\") == \"2\\n3\\n6\"\n\nassert solution(\"1 2\\n3\\n1 1\") == \"1\\n3\\n2\"\n\nassert solution(\"0 0\\n1 0\") == \"0\\n1\\n0\"\n\nassert solution(\"2 0\\n0 0\") == \"0\\n0\\n0\"\n\nassert solution(\"3 0\\n0 0\") == \"0\\n0\\n0\""
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == str(3+3+3+5)\nassert solution(input()) == str(3+3+3)\nassert solution(input()) == str(3+3)\nassert solution(input()) == str(1+1+1+2+2+2+3+3+3)\nassert solution(input()) == str(6)\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 7\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^9\n-1 \\leq c_{i} \\leq 1\n\n[input]\n3 1\n-1 0 1\n\n[output]\n15\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1 2 3 4 5 6 7 8 9') == ''\nassert solution('1 2 3 4 5 6 7 8 9') == '0'\nassert solution('1 3 4 5 6 7 8 9') == '1'\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == str(3)\nassert solution(input()) == str(1)\nassert solution(input()) == str(3)\nassert solution(input()) == str(1)\nassert solution(input()) == str(1)\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 3 4\") == \"1\"\nassert solution(\"6 2 1 1\") == \"3\"\nassert solution(\"4 4 4 4\") == \"0\"\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 2 4\") == \"1\"\nassert solution(\"6 2 1 1\") == \"1\"\nassert solution(\"1 4 3 1\") == \"3\"\nassert solution(\"1000000000 1000000000 1000000000 1000000000\") == \"1\""
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 3 4\") == 3\nassert solution(\"6 2 1 1\") == 1\nassert solution(\"4 4 4 4\") == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['3', '1', '1', '1']) == '0', '3, 1, 1, 1'\nassert solution(['2', '1', '2', '2']) == '0', '2, 1, 1, 1'\nassert solution(['4', '4', '4', '4']) == '0', '4, 4, 4, 4'\nassert solution(['0', '0', '0', '0']) == '0', '0, 0, 0, 0'\nassert solution(['999999999', '1000000000', '1000000000', '1000000000']) == '0', '999999999, 1000000000, 1000000000, 1000000000'\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 3 4\") == 3\nassert solution(\"6 2 1 1\") == 0\nassert solution(\"4 4 4 4\") == 0\nassert solution(\"999999999 1000000000 1000000000 1000000000\") == 1"
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= u, v <= n\n\nO(m)\n\n0 < u, v < n\n\n\n-----Time complexity-----\n\nO(m + n)\n\nO(m)\n\nO(m)\n\n-----Space Complexity-----\n\nO(1)\n\n'''\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 100000,\n1 <= m <= min(n(n - 1), 100000)\n\n------Time Limit Exceeded------\nAccepted: 50\nSubmissions: 14\n\nRuntime: 48 ms (99.86%)\nMemory Usage: 19.1 MB (19.22%)\n\n\"\"\"\n\nclass Solution:\n    def isCyclicUtil(self, v: int, adj: List[List[int]]) -> bool:\n        def dfs(v):\n            visited[v] = 1\n            for u in adj[v]:\n                if visited[u] == 0:\n                    if dfs(u) == True:\n                        return True\n            return False\n        \n        visited = [0]*v\n        return dfs(v)\n        \n    def isCyclicUtil(self, v: int, adj: List[List[int]]) -> bool:\n        visited = [0]*v\n        stack = [v]\n        while stack:\n            v = stack.pop()\n            for u in adj[v]:\n                if visited[u] == 0:\n                    if visited[u] == 1:\n                        return True\n                    else:\n                        visited[u] = visited[v] + 1\n                        stack.append(u)\n        \n        return False"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"NO\"\n\"\"\""
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n\nExplanation\nThe graph is acyclic.\n\n\"\"\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,5) == \"NO\"\nassert solution(1,5) == \"NO\"\nassert solution(2,5) == \"NO\"\nassert solution(3,5) == \"YES\"\nassert solution(4,5) == \"YES\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '281'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"281\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 595\") == \"281\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"2 50\") == \"30\"\nassert solution(\"5 240\") == \"26\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '281'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 595\") == \"281\"\nassert solution(\"4 1\") == \"26\"\nassert solution(\"50 25\") == \"4\"\nassert solution(\"60 5\") == \"21\"\nassert solution(\"155 70\") == \"0\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '281'\n\"\"\""
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"281\"\n\n\n\n\n\n\n\n-----Solution-----\n\nDefinition\nThe distance between two positions $x_i$ and $s_i$ are defined as:"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"2 595\", \"43 2\", \"300 4\", \"554 10\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\", \"1 1\"]\n) == \"281\"\nassert solution(\n    [\"5 241\", \"20 0\", \"3 1\", \"50 25\", \"60 5\", \"155 70\", \"165 70\", \"100 5\"]\n) == \"30\"\nassert solution(\n    [\"5 235\", \"30 5\", \"10 4\", \"150 10\", \"0 0\"]\n) == \"26\"\nassert solution(\n    [\"3 1\", \"3 1\", \"20 1\", \"40 40\"]\n) == \"91\"\nassert solution(\n    [\"3 4\", \"40 4\", \"30 4\", \"50 50\", \"60 5\", \"50 5\", \"5 5\"]\n) == \"36\"\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '281'\n"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"2 2\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"3 3\") == \"3\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8, 'Solution failed'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 0, '0'\nassert solution(1) == 0, '0'\nassert solution(2) == 0, '0'\nassert solution(3) == 0, '0'\nassert solution(4) == 0, '0'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8\") == \"10\"\nassert solution(\"0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0') == '0'\nassert solution('0 0 0 0 0 0 0 0') == '0'\nassert solution('0 0 0 0 0 0 0 0 1') == '0'\nassert solution('0 0 0 0 0 0 0 0 2') == '0'\nassert solution('0 0 0 0 0 0 0 0 3') == '0'\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0, []) == 0\nassert solution(3, [3]) == 3\nassert solution(3, [1, 3, 4]) == 4\nassert solution(5, [1, 3, 4, 3, 4, 3, 3]) == 4\nassert solution(0, [1, 2, 3]) == 0\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\nassert solution(\"0 0 0 0 0 0 0 0\") == \"0\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0\") == 0\nassert solution(\"0 0 0 0 0 0 0 0\") == 0\nassert solution(\"0 0 0 0 0 0 0 0\") == 0\nassert solution(\"0 0 0 0 0 0 0 0\") == 0\nassert solution(\"1 0 0 0 0 0 0 0\") == 0\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '44981600785557577', 'incorrect solution'\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"24\"\n\nassert solution(input()) == \"2\"\n\nassert solution(input()) == \"7\"\n\nassert solution(input()) == \"78778\"\n\nassert solution(input()) == \"123456789\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4 12') == '150'\nassert solution('4 3') == '30'\nassert solution('4 3') == '30'\nassert solution('4 3') == '30'\nassert solution('5 787787787') == '44981600785557577'"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution == 44981600785557577\n\n\"\"\""
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 50\n\n-----Time complexity-----\n\nTime complexity of this algorithm is O(n) since the input n is the number of types of bottles. Since the input is in the form of two integers, the time complexity of the algorithm is O(n) since the input is an n+1 integer array of integers, and the input is not very big so the time complexity of the algorithm is O(n log n).\n\n\nTime complexity of solution is O(n) since the input n is the number of types of bottles. Since the input is in the form of two integers, the time complexity of the solution is O(n) since the input is an n+1 integer array of integers, and the input is not very big so the time complexity of the solution is O(n log n).\n\n\nTime complexity of solution is O(n) since the input n is the number of types of bottles. Since the input is in the form of two integers, the time complexity of the solution is O(n) since the input is an n+1 integer array of integers, and the input is not very big so the time complexity of the solution is O(n log n).\n\n\nTime complexity of solution is O(n) since the input n is the number of types of bottles. Since the input is in the form of two integers, the time complexity of the solution is O(n) since the input is an n+1 integer array of integers, and the input is not very big so the time complexity of the solution is O(n log n).\n\n\"\"\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"2 1\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 4\") == \"2\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 22"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 12\") == \"15\"\nassert solution(\"4 3\") == \"7\"\nassert solution(\"4 3\") == \"20\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"14\"\nassert solution(inp) == \"44\"\nassert solution(inp) == \"50\"\nassert solution(inp) == \"1010\"\nassert solution(inp) == \"1278\"\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"4\") == \"4\"\nassert solution(\"12 3\") == \"15\"\nassert solution(\"4 7\") == \"24\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 a_i \u2264 10^9\n0 \u2264 b_i \u2264 10^9\n1 \u2264 a_1, a_2,..., a_{n} \u2264 10^9\n0 \u2264 b_1, b_2,..., b_{n} \u2264 10^9\n0 \u2264 b_1 \u2264 a_1 < b_2 <... < a_n < 10^9\n0 \u2264 b_1 \u2264 a_1 < b_2 <... < a_n < 10^9\n0 \u2264 b_1 \u2264 a_1 < b_2 <... < a_n < 10^9\n\n------Bit Manipulation------\n\nThe function should be applied on the bitwise value of the array, using XOR operation.\n\n\n\n\"\"\"\n\nfrom sys import stdin, stdout\nfrom collections import defaultdict\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        for _ in range(int(stdin)):\n            m = stdin.pop(0)\n            if int(m) < 10**9:\n                stdout.write(str(m))\n                stdout.write('\\n')\n            else:\n                stdout.write(str(int(m) & (int(m) << 1)))\n                stdout.write('\\n')"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, [1, 3, 3, 6, 6]) == \"5\"\nassert solution(2, [1, 2, 3, 4, 4]) == \"3\"\nassert solution(2, [2, 2, 3]) == \"1\"\nassert solution(2, [3, 3, 3]) == \"1\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == '5'\nassert solution(s) == '3'\nassert solution(s) == '3'\nassert solution(s) == '3'\nassert solution(s) == '3'\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 5 4 5 4 4 4 5 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 5\nassert solution(2) == 3\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(1) == 0\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == \"5\"\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n\nfrom collections import defaultdict\n\nclass Solution:\n    def minMeetingRooms(self, intervals: List[List[int]]) -> int:\n        dic = defaultdict(list)\n        for start, end in intervals:\n            dic[start].append(end)\n        dic = sorted(dic.items(), key=lambda x: x[0])\n        max_list = []\n        for k, v in dic:\n            if len(v) > 1:\n                max_list.extend(v)\n            else:\n                if v[0] > max_list[-1]:\n                    max_list.extend(v)\n        return len(max_list)\n        \n        pass"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, \"3+7=14\") == \"YES\"\nassert solution(5, \"34\") == \"NO\"\nassert solution(4, \"1248\") == \"NO\"\nassert solution(2, \"1248\" ) == \"YES\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 1e6\n\n\n-----Time complexity-----\n\nTime complexity of the algorithm is O(n); because the input is stored in the memory.\n\n\n-----Space complexity-----\n\nAll this process takes too long, because the input is stored in the stack.\n\n\n-----Bug Fixes-----\n\nIn the last example the ticket is $12, 500, 624, 892, 1019$; so the first element of the sequence is not included.\n\n\"\"\""
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\n-----Submissions-----\n\nThis question is an interactive question. You are not allowed to reply to a message in the console.\n\nYou can ask Vasya to give you hints on your code.\n\nSolution:"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\n\n\"\"\"\n\nclass Solution:\n    def is_golden_ticket(self, ticket):\n        s = sum(ticket)\n        return s == s"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, [73452, 1248]) == \"YES\"\nassert solution(4, [1248]) == \"NO\"\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input().split()) == \"NO\"\n\n-----Constraints-----\n1 \u2264 n \u2264 100\n\n1 \u2264 a_1 a_2 \\dots a_n <= 9\n\n2 \u2264 n \u2264 100\n\n1 \u2264 a_i \\le 9\n\n------Time complexity-------\n\nO(n)\n\nO(n)\n\n------Space complexity-------\n\nO(1)\n"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\", \"Failed\"\n\"\"\"\nimport math"
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n1 <= n <= 2^24\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Time complexity-----\nIn total, the runtime of this program is O(n).\n\n-----Space complexity-----\nIn this problem, we store all the values in a binary-tree.\n\nTime complexity of the above is O(n) \u2014 we store all the values in a binary-tree.\n\nWe first generate all the possible values for the ranges.\nThe number of possible values for the range is $2^{n-1}$, $n$ is the maximum length of the input string.\nThen for each possible value for the range of the input string, we check if the sum of the values of the corresponding\nsubrange is equal to that sum in the binary-tree. If not, we simply print it as a string without space.\nIf we find a sum of the range $[a,b]$ that is the largest sum of the subranges, we can divide the ticket into segments with that sum.\n\nWe then create an additional tree for the subtrees of the binary-tree.\nWe also check that each subtree of the binary-tree has unique values.\nSo there are at most $n$ possible values for the subtrees of the binary-tree.\n\nTime complexity of the above is O(n) + O(n).\n\n\"\"\"\n\nclass Solution:\n    def luckyNumbers(self, arr: List[int]) -> List[int]:\n        for i in arr:\n            j = sum(range(i, i+3))\n            if j == j:\n                return [i]\n            elif j < j:\n                return [i] + self.luckyNumbers(arr[:i])\n            else:\n                return self.luckyNumbers(arr[:i]) + self.luckyNumbers(arr[i:])"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"CHAT WITH HER!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"CHAT WITH HER!\"\nassert solution(stdin) == \"IGNORE HIM!\"\n\nExplanation\n\n'wjmzbmr' is a female and 'xiaodao' is a male. In the first example, the characters in \"wjmzbmr\" are: \"w\", \"j\", \"m\", \"z\", \"b\", \"r\". We should print \"CHAT WITH HER!\".\n'xiaodao' is a male and 'wjmzbmr' is a female. In the second example, the characters in \"xiaodao\" are: \"a\", \"e\", \"i\", \"o\", \"u\". We should print \"IGNORE HIM!\".\n\n'''\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\\\"wjmzbmr\\\") == \"CHAT WITH HER!\"\nassert solution(\\\"xiaodao\\\") == \"IGNORE HIM!\"\nassert solution(\\\"sevenkplus\\\") == \"CHAT WITH HER!\"\nassert solution(\\\"wjmzbmr\\\") == \"CHAT WITH HER!\"\nassert solution(\\\"wjmzbmr\\\") == \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"CHAT WITH HER!\"\nassert solution(stdin) == \"IGNORE HIM!\""
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"CHAT WITH HER!\""
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('wjmzbmr') == 'CHAT WITH HER!'\nassert solution('zjmzbmr') == 'IGNORE HIM!'\nassert solution('sevenkplus') == 'CHAT WITH HER!'\nassert solution('xiaodao') == 'IGNORE HIM!'"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"wjmzbmr\") == \"CHAT WITH HER!\"\nassert solution(\"xiaodao\") == \"IGNORE HIM!\"\nassert solution(\"sevenkplus\") == \"CHAT WITH HER!\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 20\n\n\n-----Example 1-----\n\nInput\nwjmzbmr\n\nOutput\nCHAT WITH HER!\n\nInput\nxiaodao\n\nOutput\nIGNORE HIM!\n\nInput\nsevenkplus\n\nOutput\nCHAT WITH HER!\n\nInput\n3\n3\n2\n\nOutput\nCHAT WITH HER!\n\n\n-----Note-----\n\nThe second example (whole example). The \"female\" character is different from the \"male\" character (the letter \"z\" is a female). Here, we know the pattern of \"zero\" but it also doesn't matter. So, we print \"CHAT WITH HER!\".\n\n-----Constraints-----\n\n1 <= stdin.length <= 20\n1 <= stdin.length <= 20\n\n\n-----Example 2-----\n\nInput\nwjmzbmr\n\nOutput\nIGNORE HIM!\n\n\n-----Example 3-----\n\nInput\nwjmzbmr\n\nOutput\nCHAT WITH HER!\n\n\n-----Example 4-----\n\nInput\nxiaodao\n\nOutput\nCHAT WITH HER!\n\n\n-----Example 5-----\n\nInput\nsevenkplus\n\nOutput\nIGNORE HIM!\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        names = []\n        for c in stdin:\n            if c in \"1234567890\":\n                names.append(c)\n            else:\n                if len(names) > 0:\n                    names.remove(names[-1])\n        return \"CHAT WITH HER!\" if len(names) == 0 else \"IGNORE HIM!\"\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n                                stdin=\n
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == \"CHAT WITH HER!\"\n\nassert solution == \"IGNORE HIM!\"\n\"\"\"\nclass Solution:\n    def solution(self, stdin):\n        stdin = stdin.replace('\\n', '')\n        if len(stdin) % 2!= 0:\n            return 'IGNORE HIM!'\n        \n        nums = []\n        nums_num = 0\n        for i in range(0, len(stdin), 2):\n            nums.append(int(stdin[i]))\n            nums_num += int(stdin[i+1])\n\n        nums = list(set(nums))\n        if len(nums) % 2!= 0:\n            return 'IGNORE HIM!'\n        \n        if nums_num == 2:\n            nums.sort()\n            return str(nums[1])\n        else:\n            return str(nums[0])\n"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'CHAT WITH HER!'\n\nassert solution(stdin) == 'IGNORE HIM!'\n\nassert solution(stdin) == 'CHAT WITH HER!'"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"9\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"16\"\n\n\n-----Solution-----\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '9'\n\ninput= \"3 3 3\"\noutput= \"9\"\n\ninput= \"14 1 1 -1 1 1 -1 -1 -1 1 -1 -1 1 -1 -1 1\"\noutput= \"12\"\n\ninput= \"1 0 0\"\noutput= \"0\"\n\ninput= \"1 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"4 3 3\"\noutput= \"6\"\n\ninput= \"5 5 5\"\noutput= \"12\"\n\ninput= \"1 2 2\"\noutput= \"0\"\n\ninput= \"1 0 0\"\noutput= \"0\"\n\ninput= \"2 0 1\"\noutput= \"1\"\n\ninput= \"1 1 1\"\noutput= \"2\"\n\ninput= \"3 3 3\"\noutput= \"9\"\n\ninput= \"3 3 3 3\"\noutput= \"9\"\n\ninput= \"1 2 1\"\noutput= \"1\"\n\ninput= \"2 3 0\"\noutput= \"1\"\n\ninput= \"1 0 0\"\noutput= \"0\"\n\ninput= \"0 0 1\"\noutput= \"0\"\n\ninput= \"0 1 1\"\noutput= \"0\"\n\ninput= \"0 1 0\"\noutput= \"0\"\n\ninput= \"0 0 1\"\noutput= \"0\"\n\ninput= \"0 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"1 1 0\"\noutput= \"1\"\n\ninput= \"1 1 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"2\"\n\ninput= \"1 0 1\"\noutput= \"0\"\n\ninput= \"1 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"0 0 0\"\noutput= \"1\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"0 0 0 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"1 0 1\"\noutput= \"0\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"0\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"1 0 1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 1\"\noutput= \"1\"\n\ninput= \"1 1 0\"\noutput= \"0\"\n\ninput= \"1 1 0"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 0\") == \"2\"\nassert solution(\"2 1 -1 1\") == \"2\"\nassert solution(\"1 -1 -1\") == \"1\"\nassert solution(\"1 -1 -1 1\") == \"1\"\nassert solution(\"-1 -1 -1 1\") == \"-1\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '9'\n\n-----Constraints-----\n0 < k < n <= 100\n-1 <= b <= n\n-1 <= i <= n\n\n---Time---\nO(n) = n*2\nO(n) = n*2 + 2 = n*3\nO(n) = n*2 + 2 + n*2 = n*4\nO(n) = n*2 + 2 + n*2 + n*3 = n*4\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 1 -1 1 -1 1 -1 1 -1 -1 1 -1 -1 1\") == \"2\"\nassert solution(\"10 1 -1 1 -1 1 -1 1 -1 -1 1 -1 -1 1\") == \"9\"\nassert solution(\"100 3\") == \"9\"\nassert solution(\"100 4\") == \"9\"\nassert solution(\"2 3 -1 1 -1 -1 -1 -1 -1 -1\") == \"5\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4 0 -1 1 -1 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 1 -1 -1 1 -1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\n\n------Coding Comments------\n\n## Solutions\n\n## Solutions\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '9'\n'''"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"010101010111101111001\") == 5\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^8\n1 \u2264 c_0, c_1 \u2264 10^8\n0 \u2264 c_0, c_1 < 10^8\n\n--- Nguyen Han Nguyen ---\n\n-----Time Limit-----\nO(n)\n\n-----Space Limit-----\nO(n)\n\n----My guess----\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"1\", \"0\", \"0\", \"1\", \"0\", \"0\", \"1\", \"1\", \"1\", \"0\", \"0\"],\n    \"000110001100\"\n) == \"12\"\n\nassert solution(\n    [\"0\", \"0\", \"1\", \"1\", \"1\", \"1\", \"1\", \"0\", \"0\", \"0\", \"0\"],\n    \"000\"\n) == \"12\"\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 1) == 12"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == '12'\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 1 0\") == 12\nassert solution(\"10 0 1\") == 12\nassert solution(\"10 0 0\") == 12\nassert solution(\"10 0 0\") == 12\nassert solution(\"10 0 10\") == 12\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == 12, \"s is not correct\""
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5') == 12\nassert solution('1') == 12\nassert solution('9') == 12\nassert solution('11') == 12\nassert solution('0') == 12\n\n\"\"\"\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        # i,j is the current iteration, so we have to reverse the list to match the\n        # indices in the triangle.\n        i=len(triangle)-1\n        j=len(triangle[i])-1\n        # if a triangle has only two rows, we do not need to reverse the\n        # triangle.\n        while i>=0 or j>=0:\n            if i>=0 and j>=0:\n                triangle[i][j]=min(triangle[i][j],triangle[i][j+1])+triangle[i][j]\n            elif i>=0:\n                triangle[i][j]=triangle[i][j+1]\n            elif j>=0:\n                triangle[i][j]=triangle[i][j-1]\n            i-=1\n            j-=1\n        return triangle[0][0]\n\"\"\"\n\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        # I look for the base case, then fix it up. I would be an easy way, but I know it's not\n        # quite trivial, so I made a simple recursive way.\n        def dfs(i,j,curr_min):\n            if i>=0 and j>=0:\n                if curr_min > triangle[i][j]:\n                    curr_min = triangle[i][j]\n                dfs(i-1,j,curr_min)\n                dfs(i,j-1,curr_min)\n        \n        # The minimum path is just the sum of the values in each row.\n        dfs(len(triangle)-1,len(triangle[0])-1,triangle[0][0])\n        return triangle[0][0]"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n'''"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 12\nassert solution(stdin) == 12\nassert solution(stdin) == 12\nassert solution(stdin) == 12\n"
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12, \"incorrect solution\"\n\"\"\"\nclass Solution:\n    def minCost(self, costs: List[List[int]]) -> int:\n        if not costs: return 0\n        N = len(costs[0])\n        \n        c0 = costs[0][0]\n        c1 = costs[1][0]\n        \n        return min(c0, c1) * N\n\n\"\"\"\n---Part 2---\n\nWe have a short coding problem called a fibonacci code. The easiest way is to read the numbers 0 through N\u22121, and check if the digit is a Fibonacci number.\n\nFor each digit, if it is Fibonacci, we know that its a Fibonacci number. If we check the digit, we know that it\u2019s a Fibonacci number, we know that the digit is Fibonacci, and so on, the digits are Fibonacci numbers.\n\nNow we need to check all the digits, and we know that each digit is Fibonacci.\n\nThis means we need to check all the digits of each Fibonacci number, and check if it is a Fibonacci number.\n\nThat is a Fibonacci number, because if we check it for the first time, we know that the digits are Fibonacci, and if the first time we check it for the second time, we know that it\u2019s a Fibonacci number.\n\nFor example, the first two digits of the fibonacci numbers, they are Fibonacci, and the third and fourth digits are not Fibonacci. Therefore, the first two digits of the fibonacci numbers are Fibonacci, and the third and fourth digits are Fibonacci.\n\nFor the next two digits of the Fibonacci numbers, they are Fibonacci, and the third and fourth digits are not Fibonacci.\n\nFor the last two digits of the fibonacci numbers, they are Fibonacci, and the third and fourth digits are Fibonacci.\n\nFinally, we know that the total cost is the sum of the two sums of all the Fibonacci numbers.\n\nYou are given a sequence of Fibonacci numbers and a string consisting of N integers. Each Fibonacci number is a fibonacci number, which is a Fibonacci number if and only if it is a Fibonacci number multiplied by 2. For example, 1, 1, 2, 3, 5, 10, 15, 21, 28, 35, 55, etc.\n\n\nExample 1:\nInput:\n\nN = 6\ncost = [\"11\",\"12\",\"13\",\"14\",\"15\",\"16\"]\n\nOutput:\n\n10\n\nExplanation:\n\n1+1+2 = 3\n3+5 = 6\n3+10 = 9\n3+15 = 24\n15+21 = 45\n5+11 = 21\n5+22 = 55\n6+13 = 21\n6+23 = 56\n7+12 = 13\n7+24 = 39\n7+33 = 72\n8+12 = 17\n8+25 = 68\n8+34 = 89\n9+13 = 24\n9+23 = 69\n9+33 = 100\n10+22 = 90\n10+34 = 140\n10+43 = 231\n10+55 = 330\n\nSince 1+1, 2, 3, 4, 5, 6, 7, 8, 9, 10 and 11 are Fibonacci numbers, so we can use each letter as a prefix, we know that the value of 1 is the first letter of the alphabet, so 1+1, 2+1, 3+1, 4+1, 5+1, 6+1, 7+1, 8+1, 9+1, 10+1, 11+1 are Fibonacci numbers, so 1+1, 2+1, 3+1, 4+1, 5+1, 6+1, 7+1, 8+1, 9+1, 10+1, 11+1 are Fibonacci numbers, so 1+2, 2+2, 3+2, 4+2, 5+2, 6+2, 7+2, 8+2, 9+2, 10+2, 11+2 are Fibonacci numbers, so 1+3, 2+3, 3+3, 4+3, 5+3, 6+3, 7+3, 8+3, 9+3, 10+3, 11+3 are Fibonacci numbers, so 1+4, 2+4, 3+4, 4+4, 5+4, 6+4, 7+4, 8+4, 9+4, 10+4, 11+4 are Fibonacci numbers, so 1+5, 2+5, 3+5, 4+5, 5+5, 6+5, 7+5, 8+5, 9+5, 10+5, 11+5 are Fibonacci numbers, so 1+6, 2+6, 3+6, 4+6, 5+6, 6+6, 7+6, 8+6, 9+6, 10+6, 11+6 are Fibonacci numbers, so 1+7, 2+7, 3+7, 4+7, 5+7, 6+7, 7+7, 8+7, 9+7, 10+7, 11+7 are Fibonacci numbers.\n\nExample 2:\nInput:\n\nN = 100\ncost = [\"5\",\"1\",\"2\",\"4\",\"3\",\"4\",\"4\",\"4\",\"5\"]\n\nOutput:\n\n53\n\nExplanation:\n\n5+1+2+4+3+4+4+4+4+4+4+5+5 = 53\n1+2+4+3+5 = 55\n2+3+4+5 = 77\n4+5 = 61\n4+6 = 72\n4+7 = 95\n4+8 = 98\n4+9 = 111\n4+10 = 120\n4+11 = 129\n4+12 = 143\n4+13 = 154\n4+14 = 155\n4+15 = 156\n5+16 = 207\n5+17 = 218\n5+18 = 220\n5+19 = 231\n5+20 = 232\n5+21 = 233\n5+22 = 234\n5+23 = 235\n5+24 = 236\n5+25 = 237\n5+26 = 238\n5+27 = 239\n5+28 = 240\n5+29 = 241\n5+30 = 242\n5+31 = 243\n5+32 = 244\n5+33 = 245\n5+34 = 246\n5+35 = 247\n5+36 = 248\n5+37 = 249\n5+38 = 250\n5+39 = 251\n5+40 = 252\n5+41"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 10 4 6 2\") == \"YES\"\nassert solution(\"3 2 1 4 6\") == \"NO\""
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\nprint(\"PASS\")\n-----Constraints-----\n\n1 <= stdin.length <= 100\n\n1 <= n <= 10^4\n\n1 <= a, x, b, y < n\n\n-100 <= stations[i] <= 100\n\nStations are distinct.\n\n3 <= stations.length <= 100\n\nstations.length < 4\n\nstations[i] is distinct.\n\nint(stations[i]) < n\n\n\n-----Time Limit: 0.5 seconds-----"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 2 4 3 2\"\n    ) == \"NO\"\nassert solution(\n    \"10 2 1 9 10\"\n    ) == \"YES\"\n\n[execution time limit] 4 seconds (py3)\n\n[input] string\n\nThe first line of the input contains a single integer $n$, the number of stations.\n\nThe next $n$ lines describe the station names. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains a single integer $n$.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains a single integer $n$.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains a single integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n\n[input] string\n\nThe first line of the input contains an integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains an integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains an integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains an integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains an integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains an integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains an integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines describe the finish stations.\n\nConstraints\n1 \u2264 n \u2264 1000\n\n[output] string\n\nOutput the string YES if there is a time moment when Daniel and Vlad are at the same station, or NO if there is no time moment when David and Vlad are at the same station.\n\n\n[input] string\n\nThe first line of the input contains an integer $n$, the number of stations.\n\nThe next $n$ lines describe the stations. The next $n$ lines"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"5 1 4 3 2\", \"10 2 1 9 10\"]) == \"NO\"\nassert solution([\"1 2 1 0 0\", \"0 1 2 0 0\", \"0 0 1 2 0\", \"0 0 0 1 2\", \"0 0 0 0 1\", \"1 0 1 0 0\", \"0 1 1 0 0\", \"0 0 1 0 1\", \"0 0 0 1 0\", \"0 1 0 1 0\", \"0 0 0 0 1\"]) == \"YES\"\nassert solution([\"1 1 1 1 1\", \"1 1 1 0 0\", \"1 1 0 0 0\", \"0 1 1 0 0\", \"1 0 0 1 0\", \"1 0 0 0 1\", \"0 1 1 0 0\", \"1 1 0 0 0\", \"0 0 1 0 1\", \"1 1 0 0 0\", \"0 0 0 1 0\", \"0 1 0 1 0\", \"1 0 1 0 0\", \"0 0 1 0 1\"]) == \"NO\"\nassert solution([\"4 4 0 0 0\", \"4 4 0 0 0\", \"0 1 2 0 0\", \"0 2 1 0 0\", \"0 0 1 0 1\", \"0 0 0 1 0\", \"0 1 0 0 1\", \"0 0 0 0 1\", \"0 0 1 0 1\", \"0 1 1 0 0\", \"0 0 0 0 1\"]) == \"NO\"\nassert solution([\"4 4 0 0 0\", \"4 4 0 0 0\", \"0 1 2 0 0\", \"0 2 1 0 0\", \"0 0 1 0 1\", \"0 0 0 1 0\", \"0 1 0 0 1\", \"0 0 0 0 1\", \"0 1 1 0 0\", \"0 0 0 0 1\"]) == \"YES\"\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 1 4 3 2\") == \"NO\"\nassert solution(\"10 2 1 9 10\") == \"YES\"\nassert solution(\"4 10 1 5 6 7\") == \"NO\"\nassert solution(\"1 1 1 1 1 1\") == \"YES\"\n"
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\n\nclass Solution:\n    def check_station_exit(self, num: int, station: int) -> bool:\n        res = 0\n        for i in range(1,num+1):\n            if station + i > num:\n                continue\n            if station + i == num:\n                res += 1\n            elif num - station <= i <= num:\n                res += 1\n        return res == 1\n    \n    def check_time_exit(self, num: int, station: int) -> bool:\n        res = 0\n        for i in range(1,num+1):\n            if i < station:\n                continue\n            if station - i <= i <= num:\n                res += 1\n            elif num - station <= i <= num:\n                res += 1\n        return res == 1\n    \n    def check_station(self, num: int, station: int) -> bool:\n        return self.check_station_exit(num, station) or self.check_time_exit(num, station)\n            "
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 1 3 9 10\") == \"YES\"\nassert solution(\"2 1 9 10\") == \"NO\"\n\"\"\""
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 3 5 7 2\") == \"NO\"\nassert solution(\"4 4 4 3 4\") == \"NO\"\nassert solution(\"4 4 4 4 4\") == \"NO\"\nassert solution(\"10 10 10 10 10\") == \"YES\"\nassert solution(\"10 1 10 10 10\") == \"NO\"\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 5') == '0'\nassert solution('2 3 3 5 7 9') == '0'\nassert solution('2 3 3 5 10') == '0'\nassert solution('5 5 5 5 5') == '0'\nassert solution('10 22 22 10 22') == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n\n\n-----Constraints-----\n\n1 \u2264 x, y \u2264 10^18\n\n1 \u2264 l, r \u2264 10^18\n\n1 \u2264 stdin.length \u2264 10^6\n\n1 \u2264 x, y \u2264 10^18\n\n\n------Time Complexity------\n\nO(l + r)\n\nO(l + r + l + r)\n\nO(l + r)\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 1 10\") == \"1\"\nassert solution(\"3 5 10 22\") == \"8\"\nassert solution(\"2 3 3 5\") == \"0\"\nassert solution(\"2 3 5 10\") == \"0\"\nassert solution(\"2 4 5 7\") == \"0\"\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('', '', 0, 0), '0'\nassert solution('2 3 1 10'), '1'\nassert solution('3 5 10 22'), '0'\nassert solution('2 3 3 5'), '0'\nassert solution('2 3 3 4'), '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 8\n\nRuntime: 36 ms (81.42%)\nMemory Usage: 14.7 MB (81.42%)"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3 1 10') == '1'\nassert solution('3 5 10 22') == '8'\nassert solution('2 3 3 5') == '0'\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\n\n\"\"\"\n\nimport sys\nfrom math import log\nimport numpy as np\n\n\"\"\"\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 2\nassert solution(12) == 3\nassert solution(25) == 4\nassert solution(6) == 1\nassert solution(0) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == 8\nassert solution(input()) == 11\nassert solution(input()) == 17\nassert solution(input()) == 22\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4) == 2\nassert solution(27) == 3"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n\n\"\"\"\nThe input is represented by a string, where\u00a0each character represents a fruit tree.\nEach\u00a0fruit\u00a0tree\u00a0is of one of the following three\u00a0classes:\n\n\"apple\"\n\"orange\"\n\"apple\"\nThe string\u00a0\"apple\"\u00a0represents the single fruit\u00a0tree of type \"apple\", as it can be either a leaf, or a sub-tree.\nThe string \"apple\"\u00a0represents the single fruit\u00a0tree of type \"orange\", as it can be either a leaf, or a sub-tree.\nThe string\u00a0\"orange\"\u00a0represents the single fruit\u00a0tree of type \"apple\", as it can be either a leaf, or a sub-tree.\nGiven a string, return the minimum number of burles needed to split the string.\n\nInput:\nInput is a string of the above type.\nOutput:\nExample 1:\n\nInput:\n\"orange\"\nOutput:\n1\nExample 2:\n\nInput:\n\"apple\"\nOutput:\n2\nExample 3:\n\nInput:\n\"apple\"\nOutput:\n1\n\nInput:\n\"apple\"\nOutput:\n2\nInput:\n\"orange\"\nOutput:\n3\n\nInput:\n\"apple\"\nOutput:\n3\nInput:\n\"orange\"\nOutput:\n1\nInput:\n\"apple\"\nOutput:\n4\n\"\"\"\n\n\nclass Solution:\n    def minBurbles(self, s: str) -> int:\n        return self.minBurbles_helper(s)\n\n    def minBurbles(self, s: str) -> int:\n        if len(s) == 1:\n            return 1\n        if s[0] == \"f\" or s[0] == \"o\":\n            return 2\n        return 3\n\n    def minBurbles_helper(self, s):\n        if len(s) == 0:\n            return 0\n        if len(s) == 1:\n            return 1\n        if s[0] == \"f\":\n            return self.minBurbles_helper(s[1:])\n        return self.minBurbles_helper(s[1:]) + self.minBurbles_helper(s[:1])\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\n\n\"\"\"\nInput:\n\nInput the number of years of the\n\n\"\"\"\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 2\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(inp) == 3\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(inp) == 2\n\n\"\"\""
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == 0\nassert solution(4) == 0\nassert solution(10) == 2\nassert solution(30) == 8\nassert solution(33) == 13\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"hellno\") == \"hell n\"\nassert solution(\"abcba\") == \"a b c b\"\nassert solution(\"abceeioo\") == \"a b c e f\"\nassert solution(\"abccbbc\") == \"b c b c\"\nassert solution(\"abccccca\") == \"c c c a\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"hell no\"\nassert solution(input(\"hell no\")) == \"hell no\"\nassert solution(input(\"hell   no   \")) == \"hell no\"\nassert solution(input(\"hell   o   \")) == \"hell no\"\nassert solution(input(\"hell   a   \")) == \"hell no\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"hell no\"\nassert solution(stdin) == \"abacaba\"\nassert solution(stdin) == \"asdfasdf\"\nassert solution(stdin) == \"tobeornottobe\"\nassert solution(stdin) == \"oooooo\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"asdfasdf\"\nassert solution(input(\"asdfasdf\")) == \"asdfasdf\"\nassert solution(input(\"hellno\")) == \"hellno\"\nassert solution(input(\"hellno\")) == \"hellno\"\nassert solution(input(\"hellno\")) == \"hellno\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asdfasdf\"\nassert solution(\"asdf\") == \"asdfasdf\"\nassert solution(\"hell\") == \"hell\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asdfasdf\"\nassert solution(\"tobeornottobe\") == \"tobeornottobe\"\nassert solution(\"oooooo\") == \"oooooo\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asdfasdf\"\nassert solution(\"abcdefgh\") == \"abcdefgh\"\nassert solution(\"abcdefg\") == \"abcdefg\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asdfasdf\"\nassert solution(\"cdf\") == \"cdf\"\nassert solution(\"zzz\") == \"zzz\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"hellno\"\n\n\n\nExplanation\n\nInput\nhellno\n\nOutput\nhell no \n\nInput\nabacaba\n\nOutput\nabacaba \n\nInput\nasdfasdf\n\nOutput\nas d f \n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('hellno') == 'hell no'\nassert solution('abacaba') == 'abacaba'\nassert solution('asdfasdf') == 'asd fasd f'\nassert solution('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 99\") == \"200\"\nassert solution(\"10 99\") == \"0\"\nassert solution(\"10 99\") == \"1\"\nassert solution(\"10 99\") == \"10\"\nassert solution(\"10 99\") == \"9\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '200'\nassert solution(stdin) == '200'\nassert solution(stdin) == '200'\nassert solution(stdin) == '200'\nassert solution(stdin) == '200'\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"20 3 2\") == \"20\"\nassert solution(\"20 3 2\") == \"200\"\n\n\"\"\""
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"200\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '20'\nassert solution(stdin) == '90'\nassert solution(stdin) == '35'\nassert solution(stdin) == '200'\nassert solution(stdin) == '2500'\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"20 3 2\") == \"20\"\nassert solution(\"20 3 2\") == \"20\"\nassert solution(\"20 3 2\") == \"20\"\nassert solution(\"20 3 2\") == \"20\"\nassert solution(\"20 3 2\") == \"20\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '20'\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"200\"\nassert solution(stdin) == \"100\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"50\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"20\"\n\"\"\"\nimport math\n\nn,m,k,s = map(int, input().split())\nmanapoints = math.ceil(s/k)\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"20\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 2 4 3 2\"), \"5\"\nassert solution(\"1 3 2\"), \"3\"\nassert solution(\"1 3 4\"), \"4\"\nassert solution(\"1 2 1\"), \"6\"\nassert solution(\"1 5 3\"), \"7\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == 7, \"Polycarp can solve all k\"\nassert solution(\"5 4 2\") == 5, \"Polycarp can solve the first subtask of two tasks\"\nassert solution(\"5 3 4\") == 5, \"Polycarp can solve the second subtask of two tasks\"\nassert solution(\"5 3 1 4\") == 5, \"Polycarp can solve the second subtask of one task\"\nassert solution(\"5 4 1 4\") == 5, \"Polycarp can solve the second subtask of one task\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '5'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n\n\n-----Constraints-----\n0 \u2264 n \u2264 45, 0 \u2264 k \u2264 45, 0 \u2264 t_j \u2264 1000000\n1 <= t_j < 10^9\n\n\n-----Time Limit-----\nO(n+k+1)\n\n\"\"\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 4 11\") == \"6\"\nassert solution(\"5 5 10\") == \"7\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"6\"\n\nassert solution(\"5 5 10\") == \"7\"\n\nassert solution(\"5 7 10\") == \"8\""
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"7\"\n"
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 7\n\n\n\"\"\""
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 1\nassert solution(5) == 1\nassert solution(100) == 0\n\n\n-----Time complexity-----\n\nLet us consider the second example. We'll look at 2^10 = 1000 lines of code.\n\nThe problem is fairly trivial for n > 2^10, so we can simply count the number of integers between 1 and n, inclusive, and divide n by 2^10.\n\n\n-----Time Complexity-----\n\nThe time complexity for binary search trees is O(n log n), where $n$ is the number of vertices.\n\nThe time complexity for the binary search tree is O(n^2), where $n$ is the number of vertices.\n\nThe time complexity for the binary search tree is O(n^2), where $n$ is the number of vertices.\n\nIn the first example, we use the time complexity as O(n).\n\nThe time complexity for binary search trees is O(n) for all the vertices.\n\nIn the second example, we use the time complexity as O(n^2).\n\nSince we need to divide n by 2^10, we need O(n^2) to store the numbers between 1 and n, inclusive, and we need O(n) to store the numbers between 1 and n^2, inclusive, and we need O(n^2) to store the numbers between 1 and n^2.\n\nSince we want to do the same calculation as in the first case, we need O(n) to store the integers between 1 and n, inclusive, and we want O(n^2) to store the integers between 1 and n^2.\n\nLet us call a binary search tree perfectly balanced if there doesn't exist a binary search tree with the same number of vertices that has a strictly smaller sum of depths of its vertices.\n\nLet us call a binary search tree with integer keys striped if both of the following conditions are satisfied for every vertex $v$:   If $v$ has a left subtree whose root is $u$, then the parity of the key of $v$ is different from the parity of the key of $u$.  If $v$ has a right subtree whose root is $w$, then the parity of the key of $v$ is the same as the parity of the key of $w$. \n\nWe will then calculate the number of perfect binary search trees with $n$ vertices that have distinct integer keys between $1$ and $n$, inclusive. Output this number modulo $998\\,244\\,353$\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\n-----Input-----\n\n4\n\nOutput\n1\n\nInput\n3\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first example, this is the one with the smallest number of vertices that satisfies the conditions: $\\left. \\begin{array}{l}{\\text{perfectly balanced}} \\\\{\\text{striped}} \\\\{\\text{binary search tree}} \\end{array} \\right.$\n\nIn the second example, here are some trees that don't satisfy some condition: [Image]\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == 1\nassert solution(4) == 0\n\n\n-----Constraints-----\n1 <= stdin.length <= 104\n\n\n-----Time complexity-----\nTime complexity of the code is O(n).\n\n\n-----Submissions-----\nSubmissions have been submitted using the classic Stack, Queue and Heap data structures. The implementation of binary search trees is based on the following rules:\n\nThe key of each node is greater than or equal to the key of its left subtree, and less than or equal to the key of its right subtree.\nThe key of the root node is not greater than its key.\n\nThe depth of a node is the number of edges on the simple path from the root to the node.\n\nThere are no cycles and no repeated paths.\n\nThe input file can be generated using the following command:\n\n\n-----Sample Input-----\n\n5\n\n-----Sample Output-----\n\n1\n\n-----Sample Input-----\n\n6\n\n-----Sample Output-----\n\n0\n\n\n-----Constraints-----\n1 <= stdin.length <= 104\n1 <= k <= 10^9\n0 <= n <= 104\n\n-----Time complexity-----\nO(n) because the search works in a depth-first order.\n\nO(log n) because the search uses the best heuristic to search the worst-case path.\n\n\nLog n as an input for the above algo.\nLog n as a subprocess.\nLog n as a heap.\nLog n as a queue.\nLog n as a stack.\nLog n as a linked-list.\n\n\n\n\"\"\"\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n\nclass BST:\n    def __init__(self):\n        self.head = None\n\n    def insert(self, data):\n        if self.head is None:\n            self.head = Node(data)\n        else:\n            node = self.head\n            while True:\n                if node.data > data:\n                    if node.left is None:\n                        node.left = Node(data)\n                        break\n                    node = node.left\n                elif node.data < data:\n                    if node.right is None:\n                        node.right = Node(data)\n                        break\n                    node = node.right\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4) == 1\nassert solution(3) == 0\n\n\n\n1 1 1\n2\n3\n5\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n\n-----Constraints-----\n\n1 <= stdin.length <= 105\n1 <= n <= 105\n1 <= u <= 109\n0 <= v <= 109\n1 <= v <= n\n1 <= w <= n\n-109 <= stdin.length <= 109\nstdin contains valid characters.\n\n\n-----Examples-----\nInput\n5\n\nOutput\n6\n\nExplanation\n\nThe expected result is the following:\n\nThere are n = 5 vertices. There are exactly 2 striped binary search trees. There are exactly 2 balanced binary search trees.\n\nAll unique integers between 1 and $n$ are at most $1,$, inclusive.\n\n\"\"\""
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == '0'\nassert solution(3) == '0'\nassert solution(4) == '1'\nassert solution(8) == '1'\nassert solution(2) == '1'\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == 1, \"Failed to find a solution.\"\nassert solution(2) == 0, \"Failed to find a solution.\"\nassert solution(1) == 1, \"Failed to find a solution.\"\nassert solution(4) == 1, \"Failed to find a solution.\"\nassert solution(7) == 2, \"Failed to find a solution.\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == 1\nassert solution(3) == 0\n\n\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2 0\") == \"2 1\"\nassert solution(\"2 3 3\") == \"3 2\"\nassert solution(\"2 3 3\") == \"3 3\"\nassert solution(\"2 4 3\") == \"4 2\"\nassert solution(\"3 0 1\") == \"1 3\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2 1\"\n\nfor n in range(int(stdin[0])):\n    for m in range(int(stdin[1])):\n        if n % 2 == 1 and m % 2 == 1:\n            print(\"4\", end=\"\")\n        elif n % 2 == 0 and m % 2 == 0:\n            print(\"3\", end=\"\")\n        elif n % 2 == 1 and m % 2 == 1:\n            print(\"2\", end=\"\")\n        else:\n            print(\"1\", end=\"\")\n\n        print()\n\n-----Constraints-----\n\n1 <= n, m <= 10^9\n\nn, m = stdin[0], stdin[1]\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"3 2\"\nassert solution(inp) == \"3 2\"\nassert solution(inp) == \"3 2\"\nassert solution(inp) == \"3 2\"\nassert solution(inp) == \"3 2\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2 3\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, 4, 2) == \"2\"\nassert solution(5, 4, 3) == \"2\"\nassert solution(5, 4, 4) == \"2\"\nassert solution(5, 4, 5) == \"2\"\nassert solution(5, 4, 6) == \"2\"\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1 2'\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\""
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 1'\n\n\n-----Note-----\n\nHere is her path on matrix 4 by 3: [Image]\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1 1'\nassert solution(input()) == '1 1'\nassert solution(input()) == '1 1'\nassert solution(input()) == '1 1'\nassert solution(input()) == '1 1'\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 1\"\n\"\"\""
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 1, 'Fadi'\nassert solution(2) == 2, 'Fadi'\nassert solution(3) == 3, 'Fadi'\nassert solution(4) == 1, 'Fadi'\nassert solution(5) == 1, 'Fadi'\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(6) == 2\nassert solution(4) == 1\nassert solution(2) == 1"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == 2, 'incorrect input'\nassert solution(\"6\") == 2, 'incorrect input'\nassert solution(\"4\") == 1, 'incorrect input'\nassert solution(\"1\") == 1, 'incorrect input'\nassert solution(\"2\") == 2, 'incorrect input'\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 1\"\n\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 2\nassert solution(3) == 3\nassert solution(0) == 0\nassert solution(5) == 7\nassert solution(7) == 21\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == ''\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1\") == \"7\"\nassert solution(\"2 1 2\") == \"21\"\nassert solution(\"2 1 1\") == \"0\"\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2, 5, 7) == 7\nassert solution(4, 7, 13) == 21\nassert solution(2, 3, 2) == 0\nassert solution(2, 4, 2) == 0\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\nprint(\"The maximum total number of lemons, apples and pears from which Nikolay can cook the compote is: \" + str(solution(stdin)))\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2,7,13) == 7\nassert solution(2,3,2) == 3\nassert solution(2,4,4) == 0\nassert solution(2,5,5) == 0\nassert solution(2,6,6) == 0\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2,7,13) == 7\nassert solution(3,7,13) == 21\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input= \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 196 197 198 199 200 201 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 220 222 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 237 238 239 240 241 242 243 244 245 245 246 247 248 249 251 252 253 253 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 275 276 277 278 279 280 281 282 283 284 285 286 287 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 301 301 302 302 303 303 304 305 306 308 308 309 311 311 312 313 313 315 316 317 318 319 320 321 321 322 323 324 325 326 327 328 329 329 330 330 331 331 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332 332"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3 2 4\") == \"YES\"\nassert solution(\"1 3 3\") == \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 3 4 3 2 4\"), \"NO\"\nassert solution(\"1 2 3 4 5 2\"), \"YES\"\nassert solution(\"3 3 3 3\"), \"NO\"\nassert solution(\"3 4 3 2 2 4\"), \"YES\"\nassert solution(\"1 2 3 3 4\"), \"NO\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0, [1,3]) == 'NO'\nassert solution(0, [1,3,4]) == 'YES'\nassert solution(0, [1,2,3,4]) == 'YES'\nassert solution(0, [1,2,3]) == 'NO'\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str(input())) == 'YES'\n\"\"\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"YES\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\", \"5\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"1\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"NO\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"YES\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1 1 1 1\") == \"3\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a_{i} <= 10^9\n\n\"\"\"\n\nclass Solution:\n    def solution(self, n, a):\n        for i in range(n+1):\n            for j in range(i, n+1):\n                if self.is_prime(a[i:j]):\n                    return a[i:j]\n        return \"NO\"\n        \n    def is_prime(self, a):\n        for i in range(2, int(a**0.5) + 1):\n            if a % i == 0:\n                return False\n        return True\n\nprint(Solution().solution(n, a))"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, [2, 7, 28]) == 1\nassert solution(4, [2, 3, 9]) == 2\nassert solution(5, [2, 3, 9, 28]) == 3\nassert solution(7, [2, 3, 9, 28]) == 3\nassert solution(10, [2, 3, 9, 28]) == 1\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7 28\") == \"0\"\nassert solution(\"7 28 3\") == \"0\"\nassert solution(\"7 28 4 5\") == \"0\"\nassert solution(\"7 28 6 4\") == \"0\"\nassert solution(\"7 28 7 9\") == \"0\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 18\n\n####################################################################################"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == '1'\nassert solution(5) == '2'\nassert solution(5) == '3'\nassert solution(5) == '5'\nassert solution(5) == '7'\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\nassert solution(stdin) == str(5)\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 7\n\n\"\"\""
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 7\n-----Sample Output-----\nSample Input:\n2 3\n8 20\n\nSample Output:\n7\n\nExplanation:\n- Choose 2 = 4, the third element of A becomes (4, 21).\n- Choose 3 = 7, the fourth element of A becomes (7, 21).\n- Choose 4 = 13, the fifth element of A becomes (13, 21).\nWe can reach the situation where A becomes (13, 21).\n\nInput\nThe first line of input consists of an integer T denoting the number of test cases. T test cases follow. Each test case consists of two lines.\nThe first line of each test case contains two space-separated integers N and K.\nThe second line contains N space-separated integers.\n\nOutput\nFor each test case, print the maximum possible positive integer that divides every element of A after the operations.\n\nConstraints\n1 \u2264 T \u2264 10^2\n1 \u2264 N, A_{i}, A_{j} \\leq 10^9\n0 \\leq K \\leq 10^9\n\nSubmission Format\n> python3 solution.py\nT = int(input())\nfor i in range(T):\n    N, K = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(Solution(N, K, A))"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == 7\nassert solution(\"8 20\") == 7"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"7\"\nassert solution(\"8 20\") == \"7\"\n\n-----Pythonic Solution-----\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == 7, \"your solution is wrong\"\n\"\"\"\n\nfrom math import sqrt, floor"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(string) == '7'\n\n-----Examples-----\nInput 1:\n\nA = [3, 5, 9, 6, 8, 2, 8, 1]\nK = 20\nOutput 1:\n\n9\n\nInput 2:\n\nA = [2, 2, 2, 2, 2]\nK = 1\nOutput 2:\n\n1\n\n\"\"\"\n\nfrom itertools import combinations"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"8 20\") == 7\nassert solution(\"8 20\") == 8\nassert solution(\"8 20\") == 8\nassert solution(\"8 20\") == 8\nassert solution(\"8 20\") == 8\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == 7\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"36\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 3 * 104\n1 <= stdin[i] <= 10^6\n\"\"\""
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '21'\nassert solution('7') == '27'\nassert solution('15') == '5'\nassert solution('7') == '31'\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"41\") == \"0\", \"41 does not satisfy the goal.\"\nassert solution(\"7\") == \"0\", \"7 does not satisfy the goal.\"\nassert solution(\"11\") == \"1\", \"11 does not satisfy the goal.\"\nassert solution(\"13\") == \"3\", \"13 does not satisfy the goal.\"\nassert solution(\"16\") == \"0\", \"16 does not satisfy the goal.\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"39\") == \"0\"\nassert solution(\"1\") == \"3\"\nassert solution(\"7\") == \"6\"\nassert solution(\"5\") == \"0\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"40\") == \"3 4 5\"\nassert solution(\"42\") == \"10 10 10 10\"\nassert solution(\"10\") == \"1 2 3 4 5\"\nassert solution(\"12\") == \"0 0 0 0\"\nassert solution(\"0\") == \"0 0 0 0\"\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '6'\n\n-----Constraints-----\n1 <= stdin.length <= 100\n0 <= stdin[i] <= 10^6\n\n-----Patterns-----\n1\n\n1\n1 3 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 131 132 132 133 133 134 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 168 169 170 171 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 189 190 191 192 191 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 240 241 242 243 244 245 245 246 247 248 249 251 252 253 253 254 255 256 257 257 258 259 259 260 261 262 263 264 265 266 267 268 269 271 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 299 300 301 301 302 301 303 303 303 304 305 306 308 308 309 310 311 311 310 313 313 315 317 320 321 322 323 324 325 326 327 327 328 329 330 330 331 332 332 333 333 334 334 335 336 337 336 338 339 340 341 341 341 342 343 343 344 345 346 347 348 349 349 350 351 351 351 360 361 363 363 364 363 395 396 397 398 397 399 399 400 400 401 401 402 400 401 401 401 400 401 401 401 400 401 400 401 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401 400 401"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"654321\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"7\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"2\"\nassert solution(\"0\") == \"0\"\nassert solution(\"7\") == \"2\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"6 3 5\"\n) == \"2\"\nassert solution(\n    \"6 7\"\n) == \"7\"\nassert solution(\n    \"3 2 3 5 4 5 6\"\n) == \"2\"\nassert solution(\n    \"6 7\"\n) == \"7\"\nassert solution(\n    \"2 4 3 2\"\n) == \"1\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '7'"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin)!= None\n\nassert solution(stdin)!= 'inf'\n\nprint('True')\n\nprint('False')"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3\", \"6\", \"2\", \"3\", \"5\"]) == \"2\"\nassert solution([\"6\", \"2\", \"1\", \"3\", \"5\"]) == \"7\"\n\n\nassert solution([\"6\", \"2\", \"1\", \"3\", \"5\", \"4\", \"6\"]) == \"2\"\nassert solution([\"6\", \"2\", \"1\", \"3\", \"5\", \"4\", \"7\"]) == \"7\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"should be 4\"\n\n\nassert solution(stdin), \"should be 5\"\n\n\nassert solution(stdin), \"should be 8\"\n\n\"\"\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, 5) == 2\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n\"\"\"\n\nimport sys\nfrom math import factorial\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 2\") == 2\nassert solution(\"10 2\") == 0\nassert solution(\"3 3\") == 4\nassert solution(\"4 1\") == 3\nassert solution(\"1 2\") == 1\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 6') == 2"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n5 2\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        [\"#\", \"#\", \"G\", \"#\", \"#\", \"#\", \"#\"],\n        [\"#\", \"#\", \"G\", \"T\", \"#\", \"#\", \"#\"],\n        [\"#\", \"T\", \"T\", \"#\", \"G\", \"T\", \"#\"],\n        [\"#\", \"#\", \"G\", \"#\", \"T\", \"#\", \"#\"],\n        [\"#\", \"G\", \"T\", \"G\", \"G\", \"T\", \"#\"]\n    ]) == \"YES\"\n'''"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == \"NO\"\nassert solution(\"6 3\") == \"NO\"\nassert solution(\"6 1\") == \"YES\"\nassert solution(\"7 2\") == \"YES\"\nassert solution(\"7 1\") == \"YES\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\n\"\"\"\n\nclass Solution:\n    def jump(self, jump):\n        if jump == 0:\n            return True\n        if jump == 1:\n            return False\n        count = 1\n        count += 1\n        for i in range(1, jump):\n            if count + i < jump:\n                count += 1\n            else:\n                count = 1\n        return count >= jump\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.3750000000\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"-1\"\n\n\n\"\"\""
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n\n\n\n-----Basic Tests-----\n\ntest(test_input, solution)\n\nTest Input\n4 10 13 10 3 1\n\nTest Output\n4.3750000000\n\nTest Input\n1 4 6 2 2 1\n\nTest Output\n-1\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0.3750000000\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1.1250000000000000\"\n\nassert solution(stdin) == \"0.0\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\nstdin.length <= 5\nstdin.length <= 10^3\nstdin.length <= 10^3\nstdin.length <= 10^3\nstdin.length <= 10^3\n1 <= y_1, y_2, y_{w}, x_{b}, y_{b}, r < 10^6\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\n1 <= y_1, y_2, y_{w}, x_{b}, y_{b}, r < 10^6\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\n1 <= x_1, x_2, x_{w}, y_1, y_2, y_{w}, x_{b}, y_{b}, r < 10^6\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin.length >= 1\nstdin."
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"11.3333333333\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 4 2 2\") == \"-1\"\nassert solution(\"1 4 6 2 2 1\") == \"4\"\nassert solution(\"3 10 15 17 9 2\") == \"1.3750000000\"\nassert solution(\"1 4 6 2 2\") == \"11.3333333333\"\n\nInput\n3 10 15 17 9 2\n\nOutput\n1.3750000000\n\nInput\n4 7 5 6 8\n\nOutput\n-1\n\"\"\""
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1.1250000000\"\nassert solution(stdin) == \"1.750000000\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0.5\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 2 1') == '-1'\nassert solution('3 3 -2') == '-1'\nassert solution('4 6 4 1') == '1.1250000000'\nassert solution('3 -3 3 -1') == '0.750000000000001'\nassert solution('5 5 3 3 -3') == '-1'\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1' or solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 4 2 2 1\") == \"1\"\nassert solution(\"3 10 15 17 9 2\") == \"3.3333333333333333\"\nassert solution(\"1 4 6 2 2 1\") == \"1\"\nassert solution(\"3 10 15 17 9 2\") == \"3.2222222222222222\"\nassert solution(\"1 4 6 2 2 1\") == \"1\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"-1\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= y_1, y_2 <= 10^6\n1 <= x_{b}, y_{b} \u2264 10^6\n0 <= r \u2264 10^6\n0 <= stdin.length <= 10^5\nstdin contains only characters a-z, A-Z, and 0-9.\n\nTime Limit: 1 second\n\nSpace Limit: 1 megabyte\n\n\n-----Bug Fixes-----\n1. Correctness of outputs if there are multiple points of aiming, but when checking correctness, it should always be printed as 1.0.\n2. Correctness of correctness when y_{w} = y_{b}\n3. Correctness of correctness when y_1 = y_2\n4. Correctness of correctness when the ball is in the center of the field\n5. Correctness of correctness when the ball moves along the wall\n6. Correctness of correctness when the ball hits the wall\n7. Correctness of correctness when the ball bounces off the wall\n8. Correctness of correctness when the ball is not in the goal\n9. Correctness of correctness when the ball touches the wall\n10. Correctness of correctness when the ball touches the wall\n11. Correctness of correctness when the ball touches the wall\n12. Correctness of correctness when the ball touches the wall\n13. Correctness of correctness when the ball touches the wall\n14. Correctness of correctness when the ball touches the wall\n15. Correctness of correctness when the ball touches the wall\n16. Correctness of correctness when the ball touches the wall\n17. Correctness of correctness when the ball touches the wall\n18. Correctness of correctness when the ball touches the wall\n19. Correctness of correctness when the ball touches the wall\n20. Correctness of correctness when the ball touches the wall\n21. Correctness of correctness when the ball touches the wall\n22. Correctness of correctness when the ball touches the wall\n23. Correctness of correctness when the ball touches the wall\n24. Correctness of correctness when the ball touches the wall\n25. Correctness of correctness when the ball touches the wall\n26. Correctness of correctness when the ball touches the wall\n27. Correctness of correctness when the ball touches the wall\n28. Correctness of correctness when the ball touches the wall\n29. Correctness of correctness when the ball touches the wall\n30. Correctness of correctness when the ball touches the wall\n31. Correctness of correctness when the ball touches the wall\n32. Correctness of correctness when the ball touches the wall\n33. Correctness of correctness when the ball touches the wall\n34. Correctness of correctness when the ball touches the wall\n35. Correctness of correctness when the ball touches the wall\n36. Correctness of correctness when the ball touches the wall\n37. Correctness of correctness when the ball touches the wall\n38. Correctness of correctness when the ball touches the wall\n39. Correctness of correctness when the ball touches the wall\n40. Correctness of correctness when the ball touches the wall\n41. Correctness of correctness when the ball touches the wall\n42. Correctness of correctness when the ball touches the wall\n43. Correctness of correctness when the ball touches the wall\n44. Correctness of correctness when the ball touches the wall\n45. Correctness of correctness when the ball touches the wall\n46. Correctness of correctness when the ball touches the wall\n47. Correctness of correctness when the ball touches the wall\n48. Correctness of correctness when the ball touches the wall\n49. Correctness of correctness when the ball touches the wall\n50. Correctness of correctness when the ball touches the wall\n51. Correctness of correctness when the ball touches the wall\n52. Correctness of correctness when the ball touches the wall\n53. Correctness of correctness when the ball touches the wall\n54. Correctness of correctness when the ball touches the wall\n55. Correctness of correctness when the ball touches the wall\n56. Correctness of correctness when the ball touches the wall\n57. Correctness of correctness when the ball touches the wall\n58. Correctness of correctness when the ball touches the wall\n59. Correctness of correctness when the ball touches the wall\n60. Correctness of correctness when the ball touches the wall\n61. Correctness of correctness when the ball touches the wall\n62. Correctness of correctness when the ball touches the wall\n63. Correctness of correctness when the ball touches the"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 0, 'Test failed'\nassert solution(1000000000000000000) == 0, 'Test failed'\nassert solution(100000000000000000000000000) == 0, 'Test failed'\nassert solution(10000000000000000000000000000) == 0, 'Test failed'\nassert solution(1000000000000000000000000000000) == 0, 'Test failed'"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n\"\"\""
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"0\""
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '0'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= b, d, s < 10^18\n\n------Coding Rules------\n\nAll the input is in lowercase.\n\n\"\"\""
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1000000000000000000 0 1000000000000000000\") == \"0\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"0\"\nassert solution(\"1000000000000000000 0 1000000000000000000\") == \"0\"\n\n\n'''"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6, [[1, 2, 3, 6, 9, 8], [1, 2, 1, 2, 5, 3], [1, 1, 1, 1, 1, 1]]) == \"YES\"\nassert solution(6, [[1, 2, 1, 2, 5, 3], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]) == \"NO\"\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution is not implemented\"\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), 'incorrect result'\nassert solution(stdin), 'incorrect result'\nassert solution(stdin), 'incorrect result'\nassert solution(stdin), 'incorrect result'\nassert solution(stdin), 'incorrect result'\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()), \"NO\"\nassert solution(input()), \"YES\"\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\n\nprint('Example 1:')\nprint('Input :')\nprint('n = 8')\nprint('a_1 = 1')\nprint('a_2 = 2')\nprint('a_3 = 3')\nprint('a_4 = 6')\nprint('a_5 = 9')\nprint('a_6 = 8')\nprint('Output :')\nprint('YES')\nprint('Example 2:')\nprint('Input :')\nprint('n = 6')\nprint('a_1 = 1')\nprint('a_2 = 2')\nprint('a_3 = 3')\nprint('a_4 = 4')\nprint('a_5 = 5')\nprint('a_6 = 6')\nprint('Output :')\nprint('NO')\nprint('Example 3:')\nprint('Input :')\nprint('n = 4')\nprint('a_1 = 1')\nprint('a_2 = 2')\nprint('a_3 = 3')\nprint('a_4 = 4')\nprint('a_5 = 5')\nprint('a_6 = 6')\nprint('Output :')\nprint('YES')\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution( \"abab\" ) == -\nassert solution( \"abca\" ) == \"a\"\nassert solution( \"bab\" ) == \"a\"\nassert solution( \"bacba\" ) == \"ba\"\nassert solution( \"ab\" ) == \"a\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"bob\") == \"bob\"\nassert solution(\"abca\") == \"ac\"\nassert solution(\"bacaba\") == \"cba\"\nassert solution(\"abcdcba\") == \"abcba\"\nassert solution(\"abcdacba\") == \"acbcdcba\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution((\"hi\", \"bob\")) == \"hi-bob\"\nassert solution((\"abca\", \"abcdcba\")) == \"abca-abc\"\nassert solution((\"hi\", \"bob\", \"ac\")) == \"hi-bob\"\nassert solution((\"hi\", \"bob\", \"c\")) == \"c-bob\"\nassert solution((\"hi\", \"bob\", \"ac\")) == \"hi-bob\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\"\"hi\"\"\") == \"hi\"\nassert solution(\"\"\"bob\"\"\" ) == \"bob\"\nassert solution(\"\"\"bobacaba\"\"\" ) == \"bobacaba\"\nassert solution(\"\"\"abca\"\"\" ) == \"abca\"\nassert solution(\"\"\"abcdcba\"\"\" ) == \"abcda\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"ac\"\nassert solution(stdin) == \"acba\"\nassert solution(stdin) == \"abca\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"bb\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"Hello world\") == \"ello-world\"\nassert solution(\"aabbba\") == \"a-b-a-b-a\"\nassert solution(\"aaabaaa\") == \"a-a-a-a-a\"\nassert solution(\"ababaab\") == \"a-b-a-a-b\"\nassert solution(\"ababaab\") == \"a-b-a-a-b\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(a, b) == 'bca'\n\n\nassert solution(a, '') == '-'\nassert solution(a, a) == '-'\nassert solution(a, a) == '-a'\nassert solution(a, a) == 'a'"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abcab\") == \"-a-b-c-\"\nassert solution(\"aabcba\") == \"a-a-c-b-c\"\nassert solution(\"aabca\") == \"c-a-a-c-b-c\"\nassert solution(\"abcdacba\") == \"c-a-c-d-a-c-b-c-a-c-b-c-d-a-c-b-c\""
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"ac\"\nassert solution(stdin) == \"-\"\n\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"\"\n\n\n-----Example 1-----\n\nInput\n\nhi\nbob\n\nOutput\n\n-\n\nInput\nabca\naccepted\n\nOutput\n\nac\n\nInput\nabacaba\nabcdcba\n\nOutput\nabcba\n\nExplanation\n\nHi is a subsequence of bob, bob is a subsequence of bob, and there is no way to obtain a subsequence of bob, so -.\n\nGood luck!\n\"\"\"\n\nclass Solution:\n    def minimumLength(self, str1: str, str2: str) -> int:\n        length1, length2 = len(str1), len(str2)\n\n        if length1 > length2:\n            return length1\n\n        minLength = min(length1, length2)\n\n        for i in range(minLength):\n            str1, str2 = str1[:i] + str2, str1[i:] + str2\n\n        return minLength\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, \"---+\") == 0\nassert solution(0, \"+-\") == 4\nassert solution(1, \"-++-\") == 3\nassert solution(2, \"+-+-\") == 5\nassert solution(4, \"-++++\") == 1"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"4\"\nassert solution(\"5\") == \"3\"\nassert solution(\"-+\") == \"0\"\nassert solution(\"+++\") == \"0\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        n = int(stdin.strip())) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 0, \"Should be 0\"\nassert solution(1) == 4, \"Should be 4\"\nassert solution(2) == 1, \"Should be 1\"\nassert solution(5) == 3, \"Should be 3\""
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 0\nassert solution(3) == 0\nassert solution(4) == 0\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()), ''"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 3 2 3\"\n), \"No 3 cups of kefir.\"\nassert solution(\n    \"5 7 2 3\"\n), \"Only 1 bottle of kefir.\"\nassert solution(\n    \"6 6 6\"\n), \"Only 2 cups of kefir.\"\nassert solution(\n    \"2 2\"\n), \"Only 2 cups of kefir.\"\nassert solution(\n    \"4 4\"\n), \"Only 2 cups of kefir.\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '10'\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n'''\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 2\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 2\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 5\") == \"2\"\nassert solution(\"5 10\") == \"2\"\nassert solution(\"1 2 3 4 5 6\") == \"6\"\nassert solution
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"8\") == \"2\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"1\", \"2\", \"2\", \"2\"]) == \"1\"\nassert solution([\"2\", \"2\", \"3\", \"2\", \"3\"]) == \"-1\"\nassert solution([\"1\", \"1\", \"3\", \"3\", \"2\"]) == \"2\"\nassert solution([\"1\", \"1\", \"3\", \"3\", \"3\"]) == \"2\"\nassert solution([\"1\", \"1\", \"3\", \"3\", \"1\"]) == \"-1\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 2 3\", \"2 4 2\", \"3 4 1\", \"3 5 1\", \"4 5 2\", \"5 6 1\"]) == \"5 6 1\"\nassert solution([\"1 2 3\", \"2 4 2\", \"3 4 1\", \"3 5 1\", \"4 5 2\", \"5 6 1\"]) == \"2 5 1\"\nassert solution([\"1 3 1\", \"2 4 2\", \"3 5 1\", \"4 6 1\", \"5 7 1\", \"6 8 1\"]) == \"1 6 1\"\nassert solution([\"1 2 3\", \"2 4 2\", \"3 4 1\", \"3 5 1\", \"4 5 2\", \"5 6 1\"]) == \"3 3 1\"\nassert solution([\"1 2 3\", \"2 4 2\", \"3 4 1\", \"3 5 1\", \"4 5 2\", \"5 6 1\"]) == \"1 2 3\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '6 1'\nassert solution(stdin) == '-1'\n\"\"\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\",\"1\",\"4\",\"4\",\"3\"]) == \"2\", \"Incorrect result\"\nassert solution([\"5\",\"3\",\"3\",\"2\",\"1\"]) == \"1\", \"Incorrect result\"\nassert solution([\"5\",\"2\",\"4\",\"4\",\"4\"]) == \"2\", \"Incorrect result\"\nassert solution([\"3\",\"1\"]) == \"1\", \"Incorrect result\"\nassert solution([\"3\",\"3\"]) == \"1\", \"Incorrect result\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1 2 3') == -1\nassert solution('2 1 2 3') == 1\nassert solution('3 2 1 3') == 2\nassert solution('4 2 1 3') == 1\nassert solution('5 2 1 3') == 2\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\n\n-----Constraints-----\n1 <= k_1 <= n <= 10^4\n1 <= k_2 <= n\n1 <= k_1 + k_2 <= n\n\n------Time complexity--------\nTime complexity is the number of rounds.\nSpace complexity is the number of cards.\n\n------Algorithm complexity--------\nO(n^3) for each card.\n\n\"\"\"\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2, \"Output is wrong\"\nassert solution(stdin) == 1 or 2, \"Output is wrong\"\nassert solution(stdin) == -1, \"Output is wrong\"\nassert solution(stdin) == -1, \"Output is wrong\"\nassert solution(stdin) == 1, \"Output is wrong\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2, \"test failed\"\n\n\n-----Constraints-----\n0 \u2264 n \u2264 105\n1 \u2264 k_1, k_2 \u2264 n - 1\n0 \u2264 k_1 < k_2 < n\n\ntime limit: 120 min\nmemory limit: 256 MB\n\n-----Examples-----\nInput\n4\n2 1 3\n2 4 2\n\nOutput\n6 2\nInput\n3\n1 2\n2 1 3\n\nOutput\n-1\n\nExplanation\nThe game starts with 1 card and 2 cards, which are the first player, so there will be three fights before the game will end. \n\nFor instance, when the cards are 2, 3 and 1, the first card will be put on the table and the 2 card will be put on the table and the 3 card will be put on the table.\n\nIn the second player's turn, the first card is put on the table, and the 3 cards are put on the table.\n\nIn the first player's turn, the second card is put on the table, and the 1 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\nIn the second player's turn, the second card is put on the table, and the 2 cards are put on the table.\n\nIn the first player's turn, the third card is put on the table, and the 3 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\nIn the second player's turn, the second card is put on the table, and the 1 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\nIn the third player's turn, the third card is put on the table, and the 2 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\n-----Constraints-----\n0 \u2264 n \u2264 105\n1 \u2264 k_1, k_2 \u2264 n - 1\n0 \u2264 k_1 < k_2 < n\n\ntime limit: 120 min\nmemory limit: 256 MB\n\n------Examples-------\nInput\n4\n2 1 3\n2 4 2\n\nOutput\n6 2\n\nInput\n3\n1 2\n2 1 3\n\nOutput\n-1\n\nExplanation\nThe game starts with 1 card and 2 cards, which are the first player, so there will be three fights before the game will end. \n\nFor instance, when the cards are 2, 3 and 1, the first card will be put on the table and the 2 card will be put on the table and the 3 card will be put on the table.\n\nIn the second player's turn, the first card is put on the table, and the 3 cards are put on the table.\n\nIn the first player's turn, the second card is put on the table, and the 1 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\nIn the second player's turn, the second card is put on the table, and the 3 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\nIn the third player's turn, the third card is put on the table, and the 2 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\nIn the fourth player's turn, the third card is put on the table, and the 1 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\nIn the fifth player's turn, the second card is put on the table, and the 3 cards are put on the table.\n\nThe first player won because the cards are put on the table, so the first player will get 2 cards.\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n, k):\n        a, b = 1, 1\n        for i in range(k, n + 1):\n            a, b = b, a + b\n        return a"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 0\nassert solution(input) == 0\nassert solution(input) == 0\nassert solution(input) == 0\nassert solution(input) == 0\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"No\"\nassert solution(stdin), \"Yes\"\nassert solution(stdin), \"No\"\nassert solution(stdin), \"Yes\"\nassert solution(stdin), \"Yes\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"[1,2,4,5,6]\") == \"Correct\"\nassert solution(\"[1,2,3,4,5]\") == \"No\"\nassert solution(\"[0,2,4,5]\") == \"No\"\nassert solution(\"\") == \"No\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"abacaba\",\"!\",\"abcd\",\"aaaa\",\"dddd\",\"A\",\"A\",\"a\"]) == \"Correct\"\nassert solution([\"abacaba\",\"!\",\"abcd\",\"aaaa\",\"dddd\",\"A\",\"A\",\"a\"]) == \"Too weak\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Correct\" or solution(stdin) == \"Too weak\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Correct\", 'The function is not correct'\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Correct' or 'Too weak'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\nstdin consists of only English letters, digits, or a-z.\n\nTime Limit: 1 second\nMemory Limit: 1M\n\n-----Tips-----\n\nYou can call the function from Python 3.7.\n\n'''"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Correct\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"abacaba\",\"aaa\",\"ab\",\"ac\",\"ba\",\"baa\"]) == \"Correct\"\nassert solution([\"a\",\"b\",\"a\",\"a\"]) == \"wrong\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['abc','def','ghi','jkl','mno','pqr','stuv','wxyz']), \"Correct\""
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"contest_is_started!!11\") == \"Correct\"\nassert solution(\"\") == \"Too weak\"\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abacaba\") == \"Correct\"\nassert solution(\"X12345\") == \"Too weak\"\nassert solution(\"CONTEST_is_STARTED!!11\") == \"Too weak\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input().strip()) == '1'\nassert solution(input().strip()) == '3'\nassert solution(input().strip()) == '-1'\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 1 1 1 1 1\", \"5 5 5 5 5 5\", \"5 5 5 5 5 5\", \"5 5 5 5 5 5\", \"5 5 5 5 5 5\", \"5 5 5 5 5 5\", \"5 5 5 5 5 5\", \"5 5 5 5 5 5\"]) == -1\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == -1\nassert solution(stdin) == 3\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 5 5 5\") == \"3\"\nassert solution(\"6 6 6 6\") == \"0\"\nassert solution(\"1 1 1 1 1 1\") == \"0\"\nassert solution(\"5 5 4 4 4 4\") == \"0\"\nassert solution(\"5 5 4 5 4 5\") == \"1\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\",\"5\",\"5\",\"5\"]) == \"3\"\nassert solution([\"3\",\"3\",\"3\"]) == \"4\"\nassert solution([\"1\",\"1\",\"1\",\"1\"]) == \"2\"\nassert solution([\"5\",\"5\",\"5\",\"5\"]) == \"1\"\nassert solution([\"4\",\"5\",\"5\",\"5\"]) == \"0\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"3\", \"5\", \"5\", \"4\", \"4\", \"3\"]) == \"3\"\nassert solution([\"4\", \"4\", \"1\", \"1\", \"3\", \"3\"]) == \"1\"\nassert solution([\"1\", \"1\", \"2\", \"1\", \"2\", \"1\"]) == \"1\"\nassert solution([\"3\", \"5\", \"5\", \"3\", \"3\", \"3\"]) == \"3\"\nassert solution([\"3\", \"5\", \"5\", \"3\", \"2\", \"3\"]) == \"3\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\n\n\n-----Constraints-----\n0 \u2264 n \u2264 100\n0 \u2264 a_{i}, b_{i} \u2264 5\na_{i} < b_{i}\n\nTime Limit: 1 second\n\nSample Tests\nSample Input\n3\n1 1 1 1\n1 1 1 1\n\nSample Output\n3\n\nSample Input\n1\n5\n3 4\n\nSample Output\n-1\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1 or solution(stdin) == 3 or solution(stdin) == -1, f'output:{solution(stdin)} is wrong'\n\"\"\"\nn = int(input())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\na.sort()\nb.sort()\ni = 0\nj = 0\nwhile j < n:\n    if a[j] == b[i]:\n        if i == len(a) - 1:\n            i = 0\n            j += 1\n        else:\n            i += 1\n    else:\n        j += 1\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nprint(solution(stdin))"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"<>\") == \"NO\"\nassert solution(\"^\") == \"YES\"\nassert solution(\"<\") == \"NO\"\nassert solution(\">\") == \"NO\"\nassert solution(\"<^\") == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\",'solution function does not return \"YES\" without error'\n\nassert solution(stdin) == \"NO\",'solution function does not return \"NO\" without error'\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'NO', 'incorrect'\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, \"<>\") == \"NO\"\nassert solution(4, \"<><>\") == \"YES\"\nassert solution(3, \"^v^v^\") == \"YES\"\nassert solution(4, \"^v^v^^\") == \"YES\"\n\nPassed\n10/10\n\nTest Case #1 Example\n\nInput:\n3 3\n<>\nv^v^v^\n\nOutput:\nNO\n\nInput:\n4 6\n
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'YES'\n\"\"\""
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n'''\n\nimport collections"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"0 1 1 0\",\n    \"0 1 1 0\"\n) == \"YES\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0') == 'YES'\nassert solution('0') == 'NO'\nassert solution('1') == 'YES'\nassert solution('1') == 'NO'\nassert solution('1') == 'NO'\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0\") == \"(0)\"\nassert solution(\"1\") == \"(1)\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0 0 1\") == \"0\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n'''\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 1 1 0\") == \"YES\"\nassert solution(\"0 1 1 -1\") == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\""
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n5\n1 1 1 1\n2\n3\n1 3\n\nOutput\nNO\n\nInput\n4\n1 1 1 1\n2\n1 1 1 0\n\nOutput\nYES\n0\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\nstdin=input,\n\n), \"NO\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2') == '1 2'\nassert solution('0 0 0') == '0 0 0'\nassert solution('-1 -1') == '-1 -1'\nassert solution('1<3') == '1 < 3'\nassert solution('1><3') == '1>=3'\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(12,5) == 0, \"Wrong answer\"\nassert solution(31,12) == 7, \"Wrong answer\""
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == 1\nassert solution(\"2 2\") == 2\nassert solution(\"2 2\") == 1\nassert solution(\"1 2\") == 1\nassert solution(\"5 5\") == 5\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"7\"\nassert solution(\"2\") == \"7\"\nassert solution(\"2\") == \"7\"\nassert solution(\"2\") == \"7\"\nassert solution(\"2\") == \"7\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 0 2\") == \"0 1\"\nassert solution(\"2 0 3\") == \"2 0\"\nassert solution(\"2 0 3 5 6\") == \"0 2 2 2 3\"\nassert solution(\"2 0 3 5 6 7 8 9 10\") == \"2 0 2\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == \"0 1\"\nassert solution == \"0 1\"\nassert solution == \"0 1\"\nassert solution == \"0 1\"\nassert solution == \"0 1\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0 1\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3,7) == 0\nassert solution(7,0) == 7\nassert solution(0,0) == 0\nassert solution(3,1) == 1\nassert solution(2,0) == 1\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2\\n1 3\\n2 0\") == \"1 0\"\nassert solution(\"1 0\\n2 0\") == \"2 0\"\nassert solution(\"1 3\\n2 3\") == \"2 2\"\nassert solution(\"1 5\\n1 4\\n1 5\") == \"1 0\"\nassert solution(\"1 4\\n1 3\\n1 4\") == \"1 0\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('123'), '123'\nassert solution('11011'), '0'\nassert solution('1101'), '1'\nassert solution
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\npass\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"10\"\nassert solution(input) == \"5\""
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['1', '2']) == '10'\nassert solution(['4', '5', '6']) == '5'\nassert solution(['7', '8', '9', '10']) == '10'\nassert solution(['2', '2', '2']) == '2'\nassert solution(['5', '5', '5']) == '0'\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n2 4\n\"\"\"\n) == \"5\"\n\"\"\"\n'0' -> '0'\n'3' -> '3'\n'6' -> '6'\n'1' -> '1'\n\"\"\"\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n    # for i in range(1, len(stdin) + 1):\n    #     for j in range(1, len(stdin) + 1):\n    #         for k in range(1, len(stdin) + 1):\n    #             if stdin[i - 1] + stdin[j - 1] <= k and stdin[i - 1] + stdin[j - 1] <= k and stdin[i - 1] + stdin[j - 1] <= k and stdin[i - 1] + stdin[j - 1] > k:\n    #                 print(i, j, k, stdin[i - 1] + stdin[j - 1] > k)\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 1 10\"]) == \"10\"\nassert solution([\"2 -4 4\"]) == \"5\"\nassert solution([\"2 -4 -5\"]) == \"7\"\nassert solution([\"3 -5 3\"]) == \"5\"\nassert solution([\"10 -10\"]) == \"0\"\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 5) == 10\nassert solution(2, 4) == 5\nassert solution(3, 4) == 5\nassert solution(3, 6) == 5\nassert solution(3, 5) == 5\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 4) == 10\nassert solution(4, 4) == 1\nassert solution(4, 3) == 3\nassert solution(1, 1) == 0\nassert solution(3, 2) == 1"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1,1,10) == 10\nassert solution(2,-4,4) == 5\nassert solution(4,4,10) == 10\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == '5'\nassert solution(0) == '0'\nassert solution(1) == '1'\nassert solution(10) == '2'\nassert solution(100) == '3'\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(7) == 7\nassert solution(21) == 5\nassert solution(1) == 0\nassert solution(2) == 0\nassert solution(3) == 0\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == 5\nassert solution(\"2\") == 1\nassert solution(\"3\") == 1\nassert solution(\"123\") == 123\nassert solution(\"123456789101112131415161718192021222324252627282930313233343536\") == 1245\n\n'''\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(7) == 5\nassert solution(21) == 7\nassert solution(123456789101112131415161718192021222324252627282930313233343536...\n\n\"\"\""
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 5\nassert solution(21) == 21\nassert solution(6) == 6\nassert solution(123456789101112131415161718192021222324252627282930313233343536...) == 14\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('123456789101112131415161718192021222324252627282930313233343536') == '7'\n\n\n-----Explanation-----\n\nThe next line will work, if you use the limit = 7:\n$k = 12 $\n\nThe next line will fail, because the number $k$ is bigger than the limit.\n\nThe next line will work, because $k = 21$\n\nThe next line will fail, because the number $k$ is smaller than the limit.\n\n$$$\n123456789101112131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n32112131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n42131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n43131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n44131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n45131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n46131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n47131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n48131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n49131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n500131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n5131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n6131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n7131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n8131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n9131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n100131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n101131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n10201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n11131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n12201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n13131415161718192021222324252627282930313233343536\n$$$\n\n$$$\n14201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n15201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n16201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n17201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n18201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n19201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n20201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n21201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n22201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n23201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n24201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n25201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n26201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n27201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n28201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n29201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n30201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n31201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n32201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n33201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n34201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n35201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n36201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n37201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n38201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n39201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n40201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n41201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n42201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n43201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n44201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n45201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n46201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n47201314161718192021222324252627282930313233343536\n$$$\n\n$$$\n4820131416171819202122232425262728293031323"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 5\nassert solution(43) == 7\nassert solution(4) == 3\nassert solution(531) == 5\nassert solution(12345) == 7\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"9\"]) == \"9\"\nassert solution([\"9\",\"5\",\"2\",\"1\"]) == \"5\"\nassert solution([\"1\",\"6\",\"9\"]) == \"6\"\nassert solution([\"1\",\"6\",\"3\",\"7\",\"2\",\"8\",\"9\"]) == \"8\"\nassert solution([\"9\",\"6\",\"7\",\"3\",\"4\",\"5\",\"8\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\n\n\n-----Constraints-----\n0 \u2264 k \u2264 10^6\n\n[execution time limit] 4 seconds (py3)\n\n[input] string k\n\nGuaranteed constraints:\n2 \u2264 k \u2264 100\n\n\n[input] integer k\n\nGuaranteed constraints:\n2 \u2264 k \u2264 100\n\n\n[output] integer\n\n-----Solution-----\n\n\"\"\""
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(7) == 5\nassert solution(21) == 7\nassert solution(123456789101112131415161718192021222324252627282930313233343536) == 7\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13, \"8380011223344\") == \"YES\"\nassert solution(13, \"807345619350641\") == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'NO' or solution(stdin) == 'YES', 'incorrect'\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"8380011223344\") == \"YES\"\nassert solution(\"8380011223344\") == \"NO\""
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == 'YES'\nassert solution(s) == 'NO'"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1234) == 'NO'\nassert solution(123456) == 'YES'\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'NO'\n\nInput\n15\n807345619350641\n\nOutput\nYES\n\nInput\n15\n807345619350641\n\nOutput\nYES\n\nInput\n15\n807345619350641\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= $n$ <= 10^5\n\n0 <= $s$ <= $n$\n\"\"\""
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"8380011223344\"\n    ) == \"YES\"\nassert solution(\n    \"8380011223344\"\n    ) == \"NO\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 1 4\") == \"824071958\"\nassert solution(\"123 42 24\") == \"6\"\nassert solution(\"123 4\") == \"8\"\nassert solution(\"123\") == \"1\"\nassert solution(\"2 4 4 1 2\") == \"1\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(123, 2, 3, 4) == 824071958\nassert solution(123, 2, 4, 1) == 824071958\nassert solution(123, 2, 3, 2) == 824071958\nassert solution(123, 2, 4, 3) == 824071958\nassert solution(123, 2, 3, 4) == 824071958\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 2\") == \"824071958\"\nassert solution(\"123 42 24\") == \"824071958\"\nassert solution(\"123 456 6\") == \"824071958\"\nassert solution(\"123 42\") == \"824071958\"\nassert solution(\"123 42 24\") == \"824071958\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"824071958\"\nassert solution(\"2 1 4 3\") == \"57\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"0\"\nassert solution(\"123 2 4 3 6\") == \"12\"\nassert solution(\"123 2 4 5 6\") == \"12\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 1 2\"\n) == \"6\"\nassert solution(\n    \"123 42 24\"\n) == \"824071958\"\nassert solution(\n    \"123 456\"\n) == \"17\"\nassert solution(\n    \"123 456\"\n) == \"14\"\nassert solution(\n    \"123 456\"\n) == \"14\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"123\") == \"824071958\"\nassert solution(\"123\") == \"824071958\"\nassert solution(\"123\") == \"123\"\nassert solution(\"123\") == \"123\"\nassert solution(\"123\") == \"123\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 0) == 0\nassert solution(1, 0) == 1\nassert solution(2, 0) == 2\nassert solution(3, 0) == 2\n\n\n-----Constraints-----\n0 < stdin.length < 10000\n\n0 < stdin[pos] < 10000\n\nPositive integers.\n\n1 <= pos <= 1000\n\n1 <= stdin[x] <= 10^7\n\n\n-----Time complexity-----\n1.0 sec (ref: https://math.stackexchange.com/questions/1715943/binary-search-in-a-binary-search-algorithm-in-python)\n\n2.0 sec (ref: https://en.wikipedia.org/wiki/Binary_search)\n\n\"\"\"\n\nimport math\nimport numpy as np"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '824071958'\n\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\") == \"6\"\nassert solution(\"123 42 24\") == \"824071958\"\nassert solution(\"123 4 24\") == \"0\"\nassert solution(\"123 4 42 24\") == \"0\"\nassert solution(\"123 4 24\") == \"0\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('123 4 24') == '824071958'\nassert solution('123 42 24') == '123'\nassert solution('123 4 24') == '2'\nassert solution('123 4 24') == '4'\nassert solution('123 4 24') == '1'\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(hw?ap*yn?eww*ye*ar) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(hw?ab*?a) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(hw?ab?a) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(hw?ab*?a) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(hw?ab?a) == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"happynewyear\", \"Incorrect string\"\n\n\nInput\nhw?ap*yn?eww*ye*ar\n7\n\nOutput\nhappynewyear\n\"\"\""
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('ababb') == 'ababb'\nassert solution('ab?aabb') == 'ababb'\nassert solution('ab?') == 'Abba'\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"hw??ap*yn?eww???ar\") == \"happynewyear\"\nassert solution(\"hw??ap*yn?eww???ar\") == \"aa\"\nassert solution(\"hw??ap*yn?eww???ar\") == \"ababb\"\nassert solution(\"hw??ap*yn?eww???ar\") == \"ab\"\nassert solution(\"hw??ap*yn?eww???ar\") == \"ab\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 12\nassert solution('ab?a') == 3\nassert solution('ababb') == 5\nassert solution('ababbbbbb') == 0\nassert solution('ab?a?') == 1\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(hw?ap*yn?eww*ye*ar) == 12\nassert solution(hw?ap*yn?eww*ye*ar) == 'aa'\nassert solution(hw?ap*yn?eww*ye*ar) == 'Impossible'\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(hw?ap*yn?eww*ye*ar) == 12\nassert solution(hw?ap*yn?eww*ye*ar) == \"happynewyear\"\nassert solution(hw?ap*yn?eww*ye*ar) == \"aa\"\nassert solution(hw?ap*yn?eww*ye*ar) == \"aba\"\nassert solution(hw?ap*yn?eww*ye*ar) == \"ababb\"\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('hw?ap*yn?eww*ye*ar') == 'happynewyear'\nassert solution('ab?a') == 'aa'\nassert solution('abbb') == 'aaa'\nassert solution('abcc') == 'bbb'\nassert solution('abccbb') == 'bbbcc'\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'happynewyear'\nassert solution(stdin) == 'aa'\nassert solution(stdin) == 'ababb'\nassert solution(stdin) == 'ababb'\nassert solution(stdin) == 'ababb'\n"
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Yes' or solution(stdin) == 'Impossible' or solution(stdin) == 'Yes' or solution(stdin) == 'No'"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 12\nprint(\"Correct!\")\n\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('60') == '1'\nassert solution('-60') == '3'\nassert solution('60 - 60') == '5'\nassert solution('60 - 60 - 60') == '15'\nassert solution('60 - -60 - 60') == '13'\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"32\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '90'\nassert solution(stdin) == '60'\nassert solution(stdin) == '180'\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n\n\"\"\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(60) == '3'\nassert solution(60) == '1'\nassert solution(60) == '0'\nassert solution(60) == '0'\nassert solution(60) == '0'\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 30"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"60\", \"150\", \"120\", \"30\"]) == \"3\"\nassert solution([\"-60\", \"-60\", \"-60\", \"-60\"]) == \"3\"\nassert solution([\"0\", \"0\", \"0\", \"0\"]) == \"1\"\nassert solution([\"-60\", \"-60\", \"-60\", \"-60\"]) == \"0\"\nassert solution([\"60\", \"-60\", \"-60\", \"-60\"]) == \"3\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 30\n'''\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 2 0'), 'No'\nassert solution('1 2 1'), 'Yes'\n\nassert solution('4 4 3'), 'Yes'\nassert solution('5 5 5'), 'No'\n\nassert solution('3 7 7'), 'Yes'\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), 'No'\nassert solution(stdin) == 'Yes', 'No'"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\"), \"No\"\nassert solution(\"5 5 3\"), \"No\"\nassert solution(\"5 5 3\"), \"Yes\"\nassert solution(\"1 2 1\"), \"Yes\"\nassert solution(\"2 2 2\"), \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\""
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\""
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nprint(\"Yes\")\n\"\"\""
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2 2\") == \"Yes\"\nassert solution(\"0 1 2\") == \"No\"\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 50,'solution does not work'"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\n\n\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1000\") == 4\nassert solution(\"123\") == 5\nassert solution(\"456\") == 5\nassert solution(\"213\") == 5\nassert solution(\"1234\") == 6\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"Decimal 1\") == \"Decimal 1\"\nassert solution(\"Decimal 1\") == \"Decimal 1\"\nassert solution(\"Decimal 1\") == \"Decimal 1\"\nassert solution(\"Decimal 1\") == \"Decimal 1\"\nassert solution(\"Decimal 1\") == \"Decimal 1\"\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\")\" + '()' + '(\"' + ')') == '()'\n\nassert solution(\"((\" + '()') + \")')\") == '()'\n\nassert solution(\"((('())\" + \"))\")) == \"()\"\n\nassert solution(\"(((((\" + '()') + \")()\"))\" + \")())\") == \"()\"\n\nassert solution(\"(((((\" + '()') + \")()('))')))\" + \")())\") == \"()\""
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == (S := str(stdin))\nassert solution(stdin)!= S\nassert solution(stdin)!= (stdin.replace(' ', ''))\nassert solution(stdin)!= (stdin.replace('2', ''))\nassert solution(stdin)!= (stdin.replace('3', ''))\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 2, 3) == 4\nassert solution(5, 2, 3) == 14\nassert solution(5, 2, 4) == 5\nassert solution(2, 2, 5) == 4\nassert solution(3, 2, 5) == 6\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(a=2, b=1000, c=3) == b\nassert solution(a=2, b=1000, c=3) == b\nassert solution(a=2, b=1000, c=3) == b\nassert solution(a=2, b=1000, c=3) == b\nassert solution(a=2, b=1000, c=3) == b\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Challenge failed\"\n\"\"\""
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"abcdef\") == \"bcd\"\nassert solution(\"cdefab\") == \"cdefab\"\nassert solution(\"cdef\") == \"cd\"\nassert solution(\"abc\") == \"a\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4\") == \"6\"\nassert solution(\"5 5 5\") == \"14\"\nassert solution(\"0\") == \"0\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"0 0\") == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '14'\n\n\n\"\"\""
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 1, 0, 0, 0, 0) == 0\nassert solution(1, 1, 0, 0, 0, 1) == 2\nassert solution(1, 1, 0, 0, 0, 1) == 2\nassert solution(1, 1, 1, 0, 0, 0) == 1\nassert solution(1, 1, 1, 0, 0, 1) == 1\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(a, b, c, d, e, f) == solution(6, 0, 0, 0, 0, 0)\nassert solution(a, a, c, c, a, d) == solution(0, 0, 0, 0, 0, 0)\nassert solution(a, b, c, b, c, c) == solution(0, 0, 0, 0, 0, 0)\nassert solution(a, b, b, b, a, a) == solution(1, 1, 1, 1, 1, 1)\nassert solution(a, b, b, b, a, a) == solution(0, 0, 0, 0, 0, 0)\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 2, 3) == \"1\"\nassert solution(2, 2, 0) == \"0\"\nassert solution(4, 2, 0) == \"0\"\nassert solution(5, 5, 0) == \"0\"\nassert solution(1, 0, 0) == \"0\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, 2, 2) == 4\nassert solution(5, 2, 0) == 0\nassert solution(0, 1, 0) == 0\nassert solution(0, 1, 1) == 0\nassert solution(0, 0, 0) == 0\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\nstdin: str = \"1 2 0\"\n) == 6\nassert solution(\nstdin: str = \"5 5 5\"\n) == 14\nassert solution(\nstdin: str = \"0 2 0\"\n) == 0\nassert solution(\nstdin: str = \"0 0 0\"\n) == 0\nassert solution(\nstdin: str = \"0 2 0\"\n) == 0\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 4, 2, 5, \"0\") == 6, \"5\"\nassert solution(1, 4, 0, 5, \"0\") == 14, \"0\"\nassert solution(1, 4, 0, 1, \"0\") == \"0\", \"0\"\nassert solution(1, 4, 1, 2, \"0\") == \"0\", \"0\"\nassert solution(1, 4, 1, 3, \"0\") == \"0\", \"0\"\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"answer is wrong\"\n\n\n\n-----Constraints-----\n1 <= k <= 5000\n\n\n-----Time Limit (Cached)-----\nO(n) to count all the coins, and there is at least one manhole on every line.\n\n\n-----Space Limit (Cached)-----\nO(n) to count all the coins, and there is at least one manhole on every line.\n\n\n\n-----Elements Used-----\nNumbers are always positive, so the first element is always 0, which we start with.\n\n\n-----Submissions-----\nTo run all tests on the question, please use the provided print function.\n'''"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 2') == '6'\nassert solution('4 1') == '13'\nassert solution('5 1') == '15'\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10 10') == '15'\n\"\"\"\n\nclass Solution:\n    def minimumMoves(self, n: int, k: int) -> int:\n        if n == 0 or k == 0:\n            return 0\n\n        max_moves = 0\n        memo = {}\n        def dfs(n, k):\n            nonlocal max_moves\n            if k == 1:\n                return max_moves\n            if (n, k) in memo:\n                return memo[(n, k)]\n\n            if n == 1:\n                max_moves = max(max_moves, 1 + dfs(n-1, k))\n                return max_moves\n\n            if n == 2:\n                max_moves = max(max_moves, 1 + dfs(n-2, k-1))\n                return max_moves\n\n            coins = [1, 2]\n            for i in coins:\n                memo[(n, k)] = min(memo[(n, k)] + 1, 1 + dfs(n-1, k-i))\n            return memo[(n, k)]\n        \n        return dfs(n, k)\n        "
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 2') == 6\nassert solution('4 1') == 13\nassert solution('5 1') == 15\nassert solution('5 1') == 6"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 0\n\n\n\n'''\n\nfrom collections import deque\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,1) == 5\nassert solution(2,2) == 3\nassert solution(2,3) == 0\nassert solution(3,4) == 0\nassert solution(4,4) == 0\n\n\n\"\"\"\n\nclass Solution:\n    def minimumMoves(self, n, k):\n        pass\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"6\"\n\nassert solution(input()) == \"13\"\n\nassert solution(input()) == \"15\"\n\n'''"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"15\"\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 13\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nGuaranteed constraints:\n0 \u2264 n \u2264 100\n\n[output] integer\n\nThe minimum number of moves required to win the game Nastya is $6$\n'''"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"15\"\n\n\"\"\"\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '9'\nassert solution(input()) == '8'\nassert solution(input()) == '10'\nassert solution(input()) == '14'"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 3') == '9'\nassert solution('5 0') == '10'\nassert solution('3 0') == '8'\nassert solution('1 0') == '3'\nassert solution('0 0') == '0'"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,3) == 9, \"Passed\"\nassert solution(3,2) == 8, \"Passed\"\nassert solution(5,0) == 10, \"Passed\"\nassert solution(5,5) == 0, \"Passed\""
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"9\"\nassert solution(\"3 2\") == \"8\"\nassert solution(\"5 0\") == \"10\"\nassert solution(\"3 3\") == \"7\"\nassert solution(\"5 1\") == \"9\"\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,3) == 9\nassert solution(3,2) == 10\nassert solution(5,0) == 8\nassert solution(5,3) == 10\nassert solution(5,5) == 10\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1,3) == 9\nassert solution(2,3) == 8\nassert solution(5,0) == 10\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1) == 9, \"not an answer\"\nassert solution(1, 2) == 8, \"not an answer\"\nassert solution(3, 2) == 10, \"not an answer\"\nassert solution(5, 2) == 4, \"not an answer\"\nassert solution(5, 3) == 2, \"not an answer\"\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\",\"1\"]) == \"10\"\nassert solution([\"10\"]) == \"10\"\nassert solution([\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"3\",\"4\"]) == \"8\"\nassert solution([\"1\",\"3\",\"4\"]) == \"9\"\nassert solution([\"2\",\"3\",\"3\"]) == \"6\"\n"
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(a) == b, \"incorrect answer\"\nassert solution(a) == c, \"incorrect answer\"\nassert solution(a) == d, \"incorrect answer\"\nassert solution(a) == e, \"incorrect answer\"\nassert solution(a) == f, \"incorrect answer\"\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n'''\n7\n27\n27\n10\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27\n27"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"YES\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"NO\""
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"YES\", \"NO\"\nassert solution(\"1\") == \"NO\", \"YES\"\nassert solution(\"6\") == \"NO\", \"YES\"\nassert solution(\"5\") == \"YES\", \"NO\"\nassert solution(\"1 1\") == \"YES\", \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\"\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('6') == 'NO'\nassert solution('1') == 'YES'\nassert solution('6') == 'YES'\nassert solution('1') == 'NO'\nassert solution('2') == 'YES'\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4) == \"NO\"\nassert solution(6) == \"YES\"\nassert solution(6) == \"NO\"\nassert solution(4) == \"YES\"\nassert solution(2) == \"YES\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"1 4\") == \"NO\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"2 1\") == \"NO\"\nassert solution(\"1 2 1 2 1\") == \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\") == \"YES\"\nassert solution(\"1 2 3\") == \"NO\"\nassert solution(\"1 3 7\") == \"YES\"\nassert solution(\"1 3 6\") == \"NO\"\nassert solution(\"1 4 5\") == \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 10^4\n1 \u2264 k \u2264 10^4\na_1 + a_2 +... + a_{k} \u2264 8\u00b7n\n\n[Wikipedia]\n\n\"\"\"\n\nfrom collections import defaultdict\nimport itertools\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 2\"\n) == \"YES\"\nassert solution(\n    \"1 4\"\n) == \"NO\"\nassert solution(\n    \"1 7\"\n) == \"YES\""
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('a1 2') == 'NO'\nassert solution('a2 2') == 'NO'\nassert solution('a3 2') == 'NO'\nassert solution('a4 4') == 'YES'\nassert solution('a5 4') == 'NO'\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n\n[\n    \"2 3\",\n    \"5 3\"\n])\n\nassert solution(\n[\n    \"1 1\",\n    \"3 1\"\n])\n\nassert solution(\n[\n    \"1 3\",\n    \"2 1\",\n    \"5 1\"\n])\n\nassert solution(\n[\n    \"3 1\",\n    \"5 1\"\n])\n\nassert solution(\n[\n    \"1 1\",\n    \"3 2\"\n])"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n=================================\nInput\n1 2\n3\n5\nOutput\nNO\n\n\nOutput\nYES\n\n1 2 3 5 7 8\n\n\n\n\n\n'''\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\nimport unittest"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '3 7'\n\nassert solution(input()) == '2 0'"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 7\"\n\n-----Solution-----\n\nsolution(stdin)\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"2 0\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"2\"\n\n\"\"\"\n\nn = int(input())\na = list(map(int, input().split()))"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3 7\"\nassert solution(input()) == \"3 4\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"2 0\"\n\"\"\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 3\"\n\nassert solution(stdin) == \"3 3\"\n\nassert solution(stdin) == \"3 7\"\n\nassert solution(stdin) == \"2 3\"\n\nassert solution(stdin) == \"2 3\""
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3 7'\nassert solution(stdin) == '2 0'\n\n'''"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '7'\n\n\n-----Note-----\n\nIn the third example, we choose a stick length $a_i$ where $a_i$ is an integer value $a_i$, and the cost of changing it is $|a_i - t|$, where $|x|$ means the absolute value of $x$.\n\nIn the fourth example, we use shrink or stretch $a_i$ to change its length to $b_i$.\n\nIn the fifth example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by two sticks, as shown in the figure.\n\nInput\n\n3\n5 2 5 2\n\nOutput\n\n1 2\n\n\n-----Note-----\n\nIn the last example, we use shrink or stretch $a_i$ to change its length to $b_i$.\n\nIn the second example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by two sticks, as shown in the figure.\n\nIn the third example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by one stick, as shown in the figure.\n\nOutput\n\n1 2 3\n\n-----Constraints-----\n\n1 <= n <= 1000\n\n\n-----Example 1-----\n\nInput\n\n3\n5 4\n\nOutput\n\n3\n\nExample 2\n\nInput\n\n5\n1 2 3 4 5\n\nOutput\n\n5\n\n-----Example 3-----\n\nInput\n\n2\n3 4\n\nOutput\n\n2\n\nExample 4\n\nInput\n\n2\n1 2\n\nOutput\n\n1\n\nExample 5\n\nInput\n\n1\n1 2\n\nOutput\n\n1\n\n\n-----Note-----\n\nIn the first example, we use shrink or stretch $a_i$ to change its length to $b_i$.\n\nIn the second example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by two sticks, as shown in the figure.\n\nIn the third example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by one stick, as shown in the figure.\n\nIn the fourth example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by one stick, as shown in the figure.\n\nIn the fifth example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by one stick, as shown in the figure.\n\nIn the sixth example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by one stick, as shown in the figure.\n\nIn the seventh example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by one stick, as shown in the figure.\n\nIn the eighth example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by one stick, as shown in the figure.\n\nIn the ninth example, we use shrink or stretch $a_i$ to change its length to $b_i$ by changing it by one stick, as shown in the figure.\n\n\"\"\"\n\nn = int(input())\nsticks = list(map(int, input().split()))"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\n[image]\n\n\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0442\u0435\u0441\u0442\u043e\u0432\u044b\u0439 \u043f\u0440\u0438\u043c\u0435\u0440:\n\n [Image]\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4 4') == '3'\nassert solution('2 1') == '1'\nassert solution('3 1') == '2'\nassert solution('4 1') == '1'\nassert solution('2 1 *..* *') == '3'\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\".*.1.1.1.1.1\") == \"1.1.1.1\"\nassert solution(\"1.1.1.1\") == \"1.1.1.1\"\nassert solution(\"1*\") == \"1\"\nassert solution(\"**\") == \"*\"\nassert solution(\"1.1.1.1.1.1.1.1.1\") == \"1.1.1.1.1\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"\") == \"\", \"No solution\"\n\n\n------\u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u043d\u0435 \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d, \u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0439 \u0438\u043b\u0438 \u0431\u0435\u0437 \u043f\u043e\u043b\u0435\u0439.\n\n-----\u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u043d\u0435 \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d, \u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0439 \u0438\u043b\u0438 \u0431\u0435\u0437 \u043f\u043e\u043b\u0435\u0439.\n\n-----\u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u043d\u0435 \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d, \u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0439 \u0438\u043b\u0438 \u0431\u0435\u0437 \u043f\u043e\u043b\u0435\u0439.\n\n-----\u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u043d\u0435 \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d, \u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0439 \u0438\u043b\u0438 \u0431\u0435\u0437 \u043f\u043e\u043b\u0435\u0439.\n\n-----\u041a\u043e\u0434 \u0432\u044b\u0448\u0435 \u043d\u0435 \u0437\u0430\u043f\u0440\u043e\u0448\u0435\u043d, \u043d\u043e \u0434\u0430\u043d\u043d\u044b\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u043b\u0435\u0439 \u0438\u043b\u0438 \u0431\u0435\u0437 \u043f\u043e\u043b\u0435\u0439.\n\n\n\n-----\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435-----\n\n\u0414\u0430\u043d\u043d\u043e\u0435 \u043f\u0440\u0438\u043c\u0435\u0440\u043d\u043e \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0438\u0437 \u0442\u0440\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 0 \u0434\u043e 11. \u041f\u043e \u043e\u0447\u0435\u0440\u0435\u0434\u0438 \u0438\u0437 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u0435 \u0438\u043b\u0438 \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u0438\u0441\u043a, \u043d\u0435 \u043f\u043e\u0441\u0442\u0430\u043d\u0443\u0432 \u0435\u0433\u043e \u043f\u0440\u0430\u0432\u0438\u043b\u044c\u043d\u043e. \u041f\u043e \u044d\u0442\u043e\u0439 \u0437"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"..\") == \"..\"\nassert solution(\"..*\") == \"*\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 4\") == \"3\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"2 1*\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"1\"\nassert solution(stdin), \"4\"\nassert solution(stdin), \"3\"\nassert solution(stdin), \"2\"\nassert solution(stdin), \"1\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\n-----\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435-----\n\n\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u0432 \u043e\u0434\u043d\u0443 \u0437\u0430\u0434\u0430\u0447\u0443 \u043f\u0440\u0438\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434.\n\n\n-----\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b-----\n\n\u041f\u043e\u0441\u043b\u0435 \u043e\u0442\u0432\u0435\u0442\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b, \u043f\u0440\u043e\u0432\u0435\u0440\u044c\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0443 \u043c\u0435\u0442\u043e\u0434\u0430 solution.\n\n\n-----\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b-----\n\n\u0412 \u043c\u0435\u0442\u043e\u0434\u0435 solution \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430. \u0412\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u0443\u0439\u0442\u0438 \u0443\u0436\u0435.\n\n\n-----\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b-----\n\n\u041c\u0435\u0442\u043e\u0434 solution \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u0432\u0445\u043e\u0434 \u0441\u0442\u0440\u043e\u043a\u0443, \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u0430 \u043f\u0440\u044f\u043c\u043e\u0443\u0433\u043e\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044f. \u0412\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u0435\u043d \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u043e\u043a \u0438 \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c, \u043d\u043e \u043f\u0440\u043e\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u044d\u0442\u043e\u0442 \u0441\u0438\u043c\u0432\u043e\u043b.\n\n\n-----\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b-----\n\n\u041f\u043e \u0440\u0435\u0448\u0435\u043d\u0438\u044e \u0441\u0447\u0438\u0442\u0430\u0435\u0442\u0441\u044f \u0447\u0435\u0440\u0435\u0437 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438,"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 4 5\") == \"3\"\n\n\n------\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f-----\n\n\u0417\u0430\u0434\u0430\u0447\u0430 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u043e\u0442\u0432\u0435\u0442\u0430\u0445 \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0442\u0435\u0441\u0442 \u043f\u0440\u0438\u043c\u0435\u0440. \u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u0434\u0430\u043d\u043e \u0438\u0437 \u0441\u0442\u0440\u043e\u043a \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0438\u0437 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u0438 \u043f\u0440\u043e\u0431\u0435\u043b\u043e\u0432, \u043a\u0430\u0436\u0434\u043e\u0435 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u043c \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u0435\u0442 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435. \u041a\u0430\u0436\u0434\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0432 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u043e\u0442 1 \u0434\u043e 9. \u0423\u0447\u0430\u0441\u0442\u043e\u043a \u0437\u0432\u0435\u0437\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435.\n\n\n------\u0421\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f-----\n\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0447\u0438\u0441\u043b\u043e \u0437\u0430\u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0432 \u0441\u0442\u0440\u043e\u043a\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0440\u0430\u0432\u043d\u043e\u0439 \u043d\u0443\u043b\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u0441\u043b\u043e\u0432\u0430\u0440\u044c \u0437\u0432\u0435\u0437\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b \u043f\u0435\u0440\u0435\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u043e\u0439 \u0437\u0432\u0435\u0437\u0434\u044b \u0432 \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u0442\u044c.\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\n\n\nA star is a problem where it is looking for a pattern to carry out a given operation on an array. Given an array $a$, we would like to carry out a pattern for $k = 1, 2,.., n$ (sorted in non-decreasing order) such that:\n\n$0 \\le a_i \\le 1$,\n$a_i \\le a_i+1 \\le a_i+2 \\le.. \\le a_i+k$\n$k \\le 3$\n\nFor example:\n\nInput\n4\n0 1 0 0\n\nOutput\n0\n1\n1\n1\n\nOutput\n3\n1\n1\n1\n\nIn a star problem, the task is to find the probability that after all the operations are completed, the array will be sorted in non-decreasing order. She turned to you for help.\n\nInput\n1\n1\n0\n\nOutput\n1\n\n\n-----Input-----\n\nThe first line contains two integers $n$ and $k$ ($2 \\le n \\le 100, 1 \\le k \\le 10^9$)\u00a0\u2014 the length of the array $a$ and the number of operations.\n\nThe second line contains $n$ integers $a_1, a_2, \\ldots, a_n$ ($0 \\le a_i \\le 1$)\u00a0\u2014 the description of the array $a$.\n\n-----Output-----\n\nIf the desired probability is $0$, print $0$, otherwise print the value $P \\cdot Q^{-1}$ $\\pmod {10^9+7}$, where $P$ and $Q$ are defined above.\n\"\"\"\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\n\n\n###\nGiven an array $a$, there are $k$ operations.\n\n$a_1 \\leq a_2 \\leq \\ldots \\leq a_k$ \u2014 it is guaranteed that each $a_i$ is present in $a$.\n\n\n###\nGiven $a$, you need to compute the probability of the $a$ array.\n\nGiven $a$ as an array of integers $a_1, \\ldots, a_k$, you need to compute the probability of the array $a$ as follows:\n\n\n$P = [0] * $a_1 + [1] * \\cdots + [k]$\\b\n\n$P[0] = 1 \\cdot \\frac{2}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2} = 1/2$\n\n$P[1] = 2 \\cdot \\frac{3}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2} = 1/3$\n\n$P[i] = P[0] * P[i-1] + P[i-2] = P[i-1] + P[i-2] = P[i] = 2$\n\nFinally, we use the following trick to get the sum of $P$: $S = [P[0], P[1], P[i-1], P[i-2]]$.\n\n$S = \\sum_{i = 1}^{$n$} P[i]$\n\n\n###\nRead the given array $a$ as an integer array, convert each $i$-th element in $a$ to the number $i$ and then compute its $S$ as explained above.\n\nInput\n2 4\n2 2 3\n3 1 2\n3 1 3\n1 1 1\n\nOutput\n4 3\n1 3\n1 1\n\nConstraints\n1 \u2264 k \u2264 $n$ \u2264 10^9\n\n\n###\nCorrect Answer:\nThe answer to the question is $P = [0] * $a_1 + [1] * \\cdots + [k]$.\n\n\nExample 1:\n\nInput:\nn = 3\nk = 2\na = [0, 1, 0]\n\nOutput:\n0\n1\n0\n\n\nExample 2:\n\nInput:\nn = 4\nk = 2\na = [0, 1, 0, 2]\n\nOutput:\n1\n3\n\nExplanation:\n$a$ = [0, 1, 0, 2] = $2^3$ = 1 * 1 * 1 = 1, which is the sum of the products.\n$$P = [0] * $a_1 + [1] * \\cdots + [2]$ = [0, 1, 0]$\n$$S = [P[0], P[1], P[2], P[3]]$ = [0, 1, 0, 1]$$\n$$P[i] = P[0] * P[i-1] + P[i-2] = P[i-1] + P[i-2] = P[i] = 1$$\n$$S[i] = P[i] = 1$\n$$P = 2 \\cdot \\frac{3}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S = [P[0], P[1], P[2], P[3]]$$$\n$$P[i] = 2 \\cdot 3 \\frac{3}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S[i] = P[i] = 1$\n$$P = 2 \\cdot 3 \\frac{4}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S = [P[0], P[1], P[2], P[3]]$$$\n$$P[i] = 2 \\cdot 4 \\frac{4}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S[i] = P[i] = 1$\n$$P = 2 \\cdot 4 \\frac{4}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S = [P[0], P[1], P[2], P[3]]$$$\n$$P[i] = 2 \\cdot 4 \\frac{16}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S[i] = P[i] = 1$\n$$P = 2 \\cdot 4 \\frac{32}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S = [P[0], P[1], P[2], P[3]]$$$\n$$P[i] = 2 \\cdot 32 \\frac{32}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S = [P[0], P[1], P[2], P[3]]$$$\n$$P[i] = 2 \\cdot 64 \\frac{64}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S = [P[0], P[1], P[2], P[3]]$$$\n$$P[i] = 2 \\cdot 64 \\frac{128}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2})^2}$$\n$$S = [P[0], P[1], P[2], P[3]]$$$\n$$P[i] = 2 \\cdot 128 \\frac{128}{\\prod_{i \\leq a_i} (1 - \\frac{1}{2"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0', 'Output is incorrect'\n\n\"\"\"\n\nimport math\nimport time\nimport itertools\nfrom collections import Counter\nfrom collections import defaultdict"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n\"\"\""
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0\") == \"0\", \"0\"\n\n\n-----IMPORTS-----\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 2) == \"333333336\"\nassert solution(5, 2) == \"0\"\nassert solution(6, 2) == \"968493834\""
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 2') == '333333336'\nassert solution('5 1') == '968493834'\nassert solution('6 4') == '0'\nassert solution('7 4') == '0'\nassert solution('6 7') == '0'\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 3\") == 3\nassert solution(\"6 5\") == 5\nassert solution(\"8 5\") == 5\nassert solution(\"22 4\") == 5\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\n\n-----Constraints-----\n1 <= x <= 100 000\n1 <= y <= 100 000\n\n\n-----Pattern-----\n\nFor example, given the following triangle:\n\n   ...\n  ...\n ....\n .....\n ......\n   ...\n\nwhere $x$, $y$ are integers.\n\n\\min x\\ y = 200 000\n\n\\min x\\ y = 5\n\n\\min x\\ y = 3\n\n\\min x\\ y = 2\n\n\\min x\\ y = 7\n\n\\min x\\ y = 4\n\n\\min x\\ y = 1\n\n\\min x\\ y = 1\n\n\n-----Constraints-----\n0 <= x,y <= 200 000\n\n'''"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('1.5') == ''\nassert solution('1.5 1.5') == ''\nassert solution('1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5 1.5') == ''\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 3\") == \"4\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"22 4\") == \"6\"\n\n\"\"\"\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '3'\nassert solution(input) == '2'\nassert solution(input) == '3'\nassert solution(input) == '2'\nassert solution(input) == '3'\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\n\nassert solution(input()) == \"6\"\n\nassert solution(input()) == \"6\"\n\nassert solution(input()) == \"6\"\n\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"22\"\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10 10 20\") == \"7\"\nassert solution(\"10 10 10\") == \"10\"\nassert solution(\"22 22\") == \"5\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"8 8\") == \"1\"\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '6'\n\n\"\"\"\n\nimport math\nfrom sys import stdin\n\nfrom collections import defaultdict\n\nclass Solution:\n    def solve(self, lst):\n        min_sec = math.inf\n        sec_set = set()\n        for i, el in enumerate(lst):\n            if el < 0:\n                continue\n            if len(sec_set) < el:\n                sec_set.add(el)\n                min_sec = min(min_sec, i)\n\n        if min_sec < len(lst) - len(sec_set):\n            return '0'\n        return str(len(lst) - len(sec_set))"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.5000000000\"\n\"\"\""
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0.5\"\n\n-----Explanation-----\n\nThe matrix B is degenerate if its determinant is zero.\n\nThe norm ||A|| of matrix B is defined as a maximum of absolute values of its elements.\n\nThe determinant of matrix B is:\n\nA=[[0.2,0.2,0.2],[0.8,0.8,0.8],[0.2,0.8,0.2]]\n\nCalculating the determinant of matrix A:\n\ndet = -3.764102665155408e-11 + 0.9358482446018842e-11\n\nThe maximum absolute value of any element is:\n\n0.5000000000\n\n-----Constraints-----\n\n1 <= |a|, |b| <= 10^9\n0 <= |c|, |d| <= 10^9\n\n-----Submission Format-----\n\nInput Format\n\nThe first line contains two integers a and b (|a|, |b| \u2264 10^9), the elements of the first row of matrix A. \n\nThe second line contains two integers c and d (|c|, |d| \u2264 10^9) the elements of the second row of matrix A.\n\n\n\nOutput Format\n\nPrint the minimum possible value of ||A - B||.\n\nSample Input\n\n1 1\n3 4\n\nSample Output\n\n0.2\n\n\n-----Sample Input Memory Usage-----\n\n------Input Memoization------\n\nn = 3\n\nm = 1\n\n------Output Memoization------\n\n-------Output------\n\n------Sample Input Memory Usage-----\n\nn = 3\n\nm = 1\n\n------Output Memoization------\n\nn = 3\n\nm = 1\n\nn = 3\n\n------Sample Input Memory Usage-----\n\nn = 3\n\nm = 1\n\n-------Output-------\n\n----Sample Output Memory Usage----\n\n------Input Memoization------\n\nn = 3\n\nm = 1\n\n------Output Memoization------\n\nn = 3\n\nm = 1\n\n------Sample Input Memory Usage-----\n\nn = 3\n\nm = 1\n\nn = 3\n\n----Output-------\n\n------Sample Output Memory Usage----\n\nn = 3\n\nm = 1\n\nn = 3\n\nm = 1\n\nn = 3\n\nn = 3\n\nn = 3\n\n----Sample Output Memory Usage----\n\nn = 3\n\nm = 1\n\nn = 3\n\nm = 1\n\nn = 3\n\nm = 1\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\n----Sample Output Memory Usage----\n\nn = 3\n\nm = 1\n\nn = 3\n\nm = 1\n\nn = 3\n\nm = 1\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn = 3\n\nn ="
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0.5000000000'\n\n------Examples-----\n\nInput\n1 2\n3 4\n\nOutput\n0.5000000000\n\nInput\n1 0\n0 1\n\nOutput\n0.5000000000\n\"\"\"\n\nimport sys\nfrom collections import deque\n\nn, m = map(int, input().split())\nA = []\n\nfor i in range(n):\n    A.append(list(map(int, input().split())))"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0.5\n-----\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == 0.2000000000\nassert solution(\"1 0\") == 0.5000000000\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0.5000000000'"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0.5000000000"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0.2000000000\"\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"0.2\"\nassert solution(\"1 1\") == \"0.5\"\nassert solution(\"1 0\") == \"0.5\"\nassert solution(\"0 1\") == \"0.5\"\nassert solution(\"0 0\") == \"0.5\"\n\n\n\n-----Constraints-----\n0 <= a, b <= 10^9\n-10^9 <= c, d <= 10^9\n\n\n\n-----Time complexity-----\nO(n^3) for a matrix and O(1) for a diagonal matrix.\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0.2000000000'\nassert solution(stdin) == '0.5000000000'\n\n'''\nclass Solution:\n    def solution(self, A, B):\n        # a = np.sqrt(A)\n        # b = np.sqrt(B)\n        # A -= A**2\n        # B -= B**2\n        \n        # return np.max(np.absolute(a-b))\n        \n        a = np.absolute(A)\n        b = np.absolute(B)\n        \n        return np.min(a/b)"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 0\") == \"1\"\nassert solution(\"2 1 0\") == \"2\"\nassert solution(\"3 1 0\") == \"2\"\nassert solution(\"4 1 0\") == \"3\"\nassert solution(\"5 1 0\") == \"2\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"0\"\n\nassert solution(inp) == \"1\"\n\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 2 1 1\") == \"1\"\nassert solution(\"1 2 1 1 2\") == \"2\"\nassert solution(\"1 2 1 1 3\") == \"1\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3 1\") == \"1 2 2\"\nassert solution(\"3 1 1\") == \"3 2 2\"\nassert solution(\"1 1 1\") == \"3\"\nassert solution(\"2\") == \"0\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a <= 10^5\n1 <= b <= 10^5\n\nTime Limit: 1 second\n\nSample TestCase 1:\nInput\n2 1 2\n1 2 1 1\n\nOutput\n0\n\nInput\n2 1 2\n1 1 2 1\n\nOutput\n2\n\nInput\n1 2\n2 3 1\n3 4 1 3\n4 5 1 2\n\nOutput\n2\n\n\"\"\""
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 1 2\") == \"2\"\nassert solution(\"4 1 1\") == \"1\"\nassert solution(\"4 1 2 1\") == \"0\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"0\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\nInput\n4 1 1\n1 2 1 1\n1 1 2 1\n\nOutput\n2\n\n\n-----Note-----\n\nThis was a tricky one-seater table as everyone in the group is seated at a vacant one-seater table. The group is served by two one-seater tables. It is also possible to seat the next group of two people, while also serving the remaining two-seater tables.\n\nThere are a total of two groups consisting of two people. The first group consists of one person, it is served by one one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, all clients are served.\n\nThere are a total of four groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by four one-seater tables.\n\nThere are a total of eight groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by eight one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of ten groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by ten one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of eleven groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by eleven one-seater tables.\n\nThere are a total of fifteen groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by fifteen one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of eight groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of eight groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of ten groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by six one-seater tables.\n\nThere are a total of eleven groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by eleven one-seater tables.\n\nThere are a total of fifteen groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by fifteen one-seater tables.\n\nThere are a total of sixteen groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by sixteen one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two one-seater tables. Thus, it is served by sixteen one-seater tables.\n\nThere are a total of six groups consisting of three people. The first group consists of one person, it is served by a one-seater table. The next group consists of two people, he is served by two"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 1 2\") == \"0\"\nassert solution(\"4 1 1\") == \"2\"\nassert solution(\"4 2 1 1\") == \"1\"\nassert solution(\"4 2 1 2\") == \"1\"\nassert solution(\"4 1 1\") == \"0\"\n"
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 1 2\") == 0\nassert solution(\"4 1 1\") == 2\nassert solution(\"4 2 1 1\") == 1\nassert solution(\"4 1\") == 1\nassert solution(\"4 1 2\") == 3\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 0 4\") == \"5\"\nassert solution(\"2 2 2 1\") == \"0\"\n\nassert solution(\"2 2 2 1\") == \"0\"\nassert solution(\"2 2 0 4\") == \"0\"\nassert solution(\"2 2 1 2\") == \"1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 10 5 20\") == \"5\"\nassert solution(\"2 2 0 4\") == \"5\"\nassert solution(\"2 2 2 1\") == \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('10 10 5 20') == '5'\nassert solution('2 2 0 4') == '-1'\nassert solution('2 2 2 1') == '0'\nassert solution('2 2 2 2') == '-1'\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n\n\n-----Constraints-----\n0 \u2264 A, B, C, N \u2264 20\n\nConstraints\n2 \u2264 A, B, C, N \u2264 20\n\n\n-----Alternatives-----\n\nalternative 1:\n\n1) use itertools.combinations\n\n2) generate a set\n\n3) use list comprehension\n\n4) use dictionary comprehension\n\nconstraints:\n3) use itertools.combinations\n\n\"\"\"\n\nA,B,C,N = map(int, input().split())\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '-1'\n\nassert solution(input().strip('\\n')) == '-1'\nassert solution(input().strip('\\n')) == '-1'\nassert solution(input().strip('\\n')) == '5'\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2 0 4\") == \"5\"\nassert solution(\"2 2 2 1\") == \"-1\"\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2,3) == 4\nassert solution(3,2) == 7\nassert solution(2,1) == 21\nassert solution(3,3) == 21\nassert solution(4,3) == 24\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '21'\nassert solution(stdin) == '21'\nassert solution(stdin) == '21'\nassert solution(stdin) == '21'\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, 2) == 3\nassert solution(2, 3) == 7\nassert solution(2, 4) == 21\nassert solution(2, 5) == 21\nassert solution(2, 6) == 21\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\\n\"\"\") == 7\nassert solution(\\\"\\\"\\\"\\n\"\"\") == 21\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 0\") == 4\nassert solution(\"2 1\") == 7\nassert solution(\"3 2\") == 21\nassert solution(\"3 3\") == 31\nassert solution(\"3 5\") == 143\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 0\"\n) == \"4\"\nassert solution(\n    \"2 1\"\n) == \"7\"\nassert solution(\n    \"3 2\"\n) == \"21\"\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 0\") == \"1\"\nassert solution(\"2 1\") == \"3\"\nassert solution(\"3 2\") == \"7\"\nassert solution(\"3 2\") == \"21\""
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n"
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 0\") == \"4\"\nassert solution(\"2 1\") == \"7\"\nassert solution(\"3 2\") == \"21\"\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"578894053\"\nassert solution(\"2\") == \"1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"1 2 1\") == \"0\"\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n\n\"\"\""
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '578894053'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"578894053\"\n\n\n-----Constraints-----\n\n1 <= n <= 5000\n\n1 <= stdin.length <= 5000\nstdin.length <= 3\nstdin.length <= 10\nstdin.length <= 3\nstdin.length <= 10\n1 <= l_i, r_i <= 9\n1 <= x, y <= 999\n0 <= x \\le y\n0 <= l_i \\le r_i\n\n-----Time complexity-----\n\nO(n^2)\n\n\nO(n^2)\n\n\nO(n^2)\n\n\nO(n^2)\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n\"\"\""
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input() == \"1 2\")\nassert solution(input() == \"1 2 2\")\nassert solution(input() == \"1 1 1\")\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(6) == \"4\"\nassert solution(20) == \"1\"\nassert solution(88) == \"1\"\nassert solution(11) == \"2\"\nassert solution(12) == \"2\"\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 4\nassert solution(stdin) == 2\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 4\nassert solution(60) == 1\nassert solution(1000) == 1\nassert solution(1000000) == 1\nassert solution(1000000000) == 2\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"32\"\nassert solution(inp) == \"36\"\nassert solution(inp) == \"96\"\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 4"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\nOutput: '3'\n\"\"\""
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\nprint('Example 1:')\nprint('Input : ')\nprint('n = 3, s = 3')\nprint('Output :')\nprint('3')\nprint('Example 2:')\nprint('Input : ')\nprint('n = 3, s = 3')\nprint('Output :')\nprint('2')\nprint('Example 3:')\nprint('Input : ')\nprint('n = 4, s = 5')\nprint('Output :')\nprint('-1')\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 3') == '3'\nassert solution('3 4') == '2'\nassert solution('3 7') == '-1'\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(-1)\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^3\n1 <= s <= 10^12\n\n-------Solns-------\n\n3 6\n7 5\n\n-----Time Limit-----\n\nO(log(n))\n\nn is the number of input lines\n\nTime Limit: 1 seconds\n\nSample Input\n\n3 3\n4 3 5\n\nSample Output\n\n2\n\n\n\"\"\"\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3\") == \"3\"\nassert solution(\"3 4\") == \"2\"\nassert solution(\"3 7\") == \"1\"\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 3') == '-1'\nassert solution('3 4') == '3'\nassert solution('1 2 3') == '1'\nassert solution('1 7') == '-1'\nassert solution('1 2 3 4 5 6 7') == '3'\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 4') == '3'\nassert solution('3 7') == '-1'\n\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 10^2\n0 \u2264 s \u2264 10^9\n\nInput Constraints\nThe input consists of two integers.\n\n\nOutput Constraints\nPrint the answer to the question.\n\n\n\nExamples\nExample 1:\n\nInput\n3 3\n1 1 1\n\nOutput\n3\n\nExample 2:\n\nInput\n4 4\n4 6 4\n1 1 1 1\n\nOutput\n2\n\nExplanation\nThe fair nut takes $1$ liter from the first keg and $2$ liters from the third keg. On the second day, he wants to take $4$ liters of kvass from the first keg and $2$ liters of kvass from the fourth keg. Thus, the answer is $3$, on the second day, he can't take $2$ liters of kvass from the first keg.\n\nExplanation\nThe fair nut takes $3$ liters from the first keg and $1$ liters from the second keg. On the third day, he wants to take $4$ liters of kvass from the second keg and $1$ liters from the fourth keg. Thus, the answer is $2$, on the third day, he can't take $2$ liters of kvass from the second keg.\n\nInput\n3 4\n2 2 2 2\n1 2 2 2\n\nOutput\n-1\n\nInput\n3 6\n3 3 3 3\n3 3 3 3\n2 3 3 3\n\nOutput\n2\n\n-----Constraints-----\n\n0 \u2264 n \u2264 10^3\n0 \u2264 s \u2264 10^9\n\nInput Constraints\n1 \u2264 n, v_1, v_2, v_i \u2264 10^4\nv_i >= 1\n\nOutput Constraints\nPrint the answer to the question.\n\n\n-----Time Complexity-----\n\nTime complexity of the functions is O(n log(n)) where n is the number of kegs and s is the volume of each keg.\n\nThe remaining function time complexity is O(n log(n)) where n is the number of kegs and v_i is the volume of each keg.\n\n\n-----Space Complexity-----\n\nTime complexity of the functions is O(n log(n)) where n is the number of kegs and s is the volume of each keg.\n\nThe remaining function time complexity is O(n) for the total number of kegs and v_i is the total volume of each keg.\n\n\n\"\"\""
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Known Issues-----\n\nInput:\nn = 3, s = 1\n\nOutput:\n3\n\nInput:\nn = 4, s = 5\n\nOutput:\n3\n\nInput:\nn = 4, s = 7\n\nOutput:\n-1\n\"\"\"\n\nimport sys\n\nn, s = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10 2 1') == '0'\nassert solution('10 13 2 1') == '1'\nassert solution('10 19 4') == '-1'\nassert solution('50 1 2') == '1'\nassert solution('50 13 1') == '1'\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Your code should print 1\"\nassert solution(stdin), \"Your code should print 0\""
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"1\"\nassert solution(\"10 12\") == \"2\"\nassert solution(\"10 13\") == \"1\"\nassert solution(\"10 19\") == \"0\"\nassert solution(\"1 50\") == \"1\"\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == -1\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\n\n\"\"\""
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"The task is not done\"\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution == 0\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 3 4 2 3 3') == 16\nassert solution('2 2 4 4 3 1 2') == 8\nassert solution('1 1 4 2 4 2 1') == 3\nassert solution('1 1 4 2 4 2 1 3') == 2\nassert solution('2 3 2 4 4 3 2 3 2') == 1"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 16\n\n[Sample Input]\n\n3 3\n2 3\n3 3\n\n[Sample Output]\n\n16\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        stdin = stdin.strip()\n        candies_dict = {'B':1,'C':2,'D':3,'E':4,'F':5,'G':6,'H':7,'I':8,'J':9,'K':10,'L':11,'M':12,'N':13,'O':14,'P':15,'Q':16,'R':17,'S':18,'T':19,'U':20,'V':21,'W':22,'X':23,'Y':24,'Z':25}\n\n        stdin = stdin.split()\n        for i in range(len(stdin)):\n            stdin[i] = int(stdin[i])\n        answer = 0\n        for i in range(len(stdin)):\n            if stdin[i] in candies_dict:\n                answer = max(answer, candies_dict[stdin[i]])\n        return str(answer)"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 16\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution((\"4 10 5 2 3\")) == \"16\"\nassert solution((\"6 5 3 2\")) == \"16\"\nassert solution((\"1 1 1 1\")) == \"1\"\nassert solution((\"1 1 1 1 2\")) == \"1\"\nassert solution((\"4 9 2 3\")) == \"1\"\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"16\"\n\n\n-----Alternatives-----\n\nInput\n\nSample Input\n\n10 3 5 2 3\n\nSample Output\n\n16\n\n\n----Examples----\n\nInput\n\n3\n5 3 3 3 2\n\nOutput\n\n4\n\n\n----Examples----\n\nInput\n\n4\n3 3 3 3 2\n\nOutput\n\n2\n\n\n\"\"\"\n\nimport sys\nimport math\nimport itertools\nimport collections"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str) == \"16\"\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 2\") == 2\nassert solution(\"4 6 8\") == 3\nassert solution(\"2 4 7\") == 1\nassert solution(\"10 10 10\") == 3\nassert solution(\"1 5\") == 1\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin\n    ) == 16\n\nassert solution(\n    stdin\n    ) == \"11\"\n\"\"\""
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 3, 5, 2, 3) == 16\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"16\"\n\"\"\""
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"1 5\") == \"2\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"6 1\") == \"2\"\nassert solution(\"6 1\") == \"1\"\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"0\"]) == \"4\"\nassert solution([\"0\", \"0\"]) == \"0\"\nassert solution([\"1\", \"1\"]) == \"0\"\nassert solution([\"1\", \"0\"]) == \"4\"\nassert solution([\"3\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == 5\nassert solution(\"6 1\") == 3\nassert solution(\"3 4\") == 3\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"5\"\n\nassert solution(\"3 1\") == \"3\"\n\nassert solution(\"3 0\") == \"3\"\n\nassert solution(\"3 2\") == \"3\"\n\nassert solution(\"3 0\") == \"3\"\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 1') == '5'\nassert solution('2 3 2') == '3'\nassert solution('3 0 0') == '1'\nassert solution('3 0 3') == '1'\nassert solution('3 4 4') == '3'\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0 0) == 5, \"0\"\nassert solution(3 4) == 3\n"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0 0) == 0, \"Empty grid\"\nassert solution(3 4) == 5, \"Position occupied\"\nassert solution(6 1) == 3, \"Finish position\"\n\n\n\nclass Solution:\n    def minSteps(self, grid: List[List[int]]) -> int:\n        \n        def dfs(x, y):\n            # base case\n            if x < 0 or y < 0 or x >= len(grid) or y >= len(grid[0]):\n                return 0\n            # recursive case\n            if grid[x][y] == 0:\n                return 0\n            # keep a record of all the ways that this cell can be reached\n            ways = []\n            # add this cell to the ways array\n            ways.append((x, y))\n            # add this cell to the grid\n            grid[x][y] = 0\n            # call dfs on each neighbour\n            ways = [dfs(x + 1, y) for x in [x - 1, x] for y in [y, y + 1]]\n            # get the minimum\n            return min(ways)\n        \n        return dfs(0, 0)"
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 0\") == \"5\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"1 2\") == \"4\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"DDRRR\") == \"D\"\nassert solution(\"DDRRRR\") == \"R\"\nassert solution(\"DDRRRRR\") == \"R\"\nassert solution(\"DDRRRRR\") == \"R\"\nassert solution(\"DDRRRRRR\") == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'D'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'D'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'D'\nassert solution(stdin) == 'R'\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"DDRRR\") == \"D\"\nassert solution(\"DDRRRR\") == \"R\"\nassert solution(\"DRRRD\") == \"D\"\nassert solution(\"DRRRDRR\") == \"D\"\nassert solution(\"DRRRDDD\") == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == 'D'\nassert solution('6') == 'R'\nassert solution('7') == 'D'\nassert solution('8') == 'D'\nassert solution('9') == 'D'\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"D\"\nassert solution(\"6\") == \"D\"\nassert solution(\"1\") == \"D\"\nassert solution(\"2\") == \"D\"\nassert solution(\"3\") == \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"DD\"), \"DD\"\nassert solution(\"DDRRRR\"), \"DDDRRRR\"\nassert solution(\"DDRRR\"), \"DDRRR\"\nassert solution(\"DDRRRRR\"), \"DDRRRRR\"\nassert solution(\"DDRRRRRR\"), \"DDRRRRRR\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"DDRRR\") == \"D\"\nassert solution(\"DDDRRR\") == \"R\"\nassert solution(\"DDDRRRR\") == \"D\"\nassert solution(\"DDRRRRRR\") == \"D\"\nassert solution(\"DDDRRRRRR\") == \"R\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\", \"D\", \"R\"]) == \"R\"\nassert solution([\"5\", \"R\", \"D\"]) == \"D\"\nassert solution([\"1\", \"D\", \"R\"]) == \"D\"\nassert solution([\"1\", \"R\", \"D\"]) == \"D\"\nassert solution([\"1\", \"R\", \"R\"]) == \"D\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\") == \"D\"\nassert solution(\"6\") == \"R\"\nassert solution(\"6\") == \"D\"\nassert solution(\"5\") == \"D\"\nassert solution(\"6\") == \"R\"\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"17 15 5 3\") == \"3\"\nassert solution(\"14 16 7 22\") == \"0\"\nassert solution(\"4 2 6 4\") == \"1\"\nassert solution(\"1000000000000000000 1000000000000000000 999999866000004473 999999822000007597\") == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n$x \\le a \\le b$ and $y \\le b$ are integers.\n$a \\le a$\n\n$x, y \\le 10^{18}$\n\"\"\""
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1000000063\"\nassert solution(stdin) == \"1000000063\"\nassert solution(stdin) == \"1000000063\"\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"0\"\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1000000063\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= x <= 10^18\n1 <= y <= 10^18\n1 <= a <= b\n\n\"\"\""
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('4 2 6 4') == '1000000063'\nassert solution('4 1 2 2') == '0'"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(12, 4) == 5\n\n\n-----Advanced-----\n\nWe can calculate the number of trailing zeros in a number:\n\n$n!={n, \\cdots, n^{b-1}}$, $b$ = 2^{12}$, and n = $n^{2}$\n\nFor example, $n$=2221, $b$=2, $n^{2}=21$, we get an output:\n\n1\n\nNOTE: For more information about the base, see the following references:\n\n$$\\dfrac{1}{2^{b-1}}$$\n$$\\dfrac{2^{12}}$\n$$\\dfrac{2221}{2^2}$$\n$$\\dfrac{2^12}{2^{12}}$\n$$\\dfrac{2221}{2^2}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^2}$$\n$$\\dfrac{2221}{2^12}$$\n$$\\dfrac{2221}{2^2}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^2}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^2}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^2}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$\n$$\\dfrac{2221}{2^{12}}$$"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"666\") == \"0\"\nassert solution(\"10\") == \"0\"\nassert solution(\"8\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"890\") == \"3\"\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2,9) == \"3\"\nassert solution(2,15) == \"1\"\nassert solution(3,9) == \"1\"\nassert solution(3,15) == \"2\"\nassert solution(4,9) == \"2\"\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(6, 11) == 1\nassert solution(38, 11) == 3\nassert solution(5, 10) == 3\nassert solution(5, 12) == 0\nassert solution(5, 10) == 0\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6, 9) == \"1\"\nassert solution(38, 11) == \"3\"\nassert solution(5, 10) == \"3\"\nassert solution(5, 10) == \"1\"\nassert solution(5, 10) == \"1\"\n\n\n-----Bonus-----\n\nThe numbers $n$, $b$ are exactly ten ways, or ten distinct ways, which is a base **10**. Each number is represented by a number from the $b$-ary base. For example, $n = 2$, $b = 2$ and $n \\le 10^{5}$ means that $n$ digits are divisible by $b$, and $2 \\le b \\le 10^{12}$. You must complete the function `solution(n, b)` to return the number of trailing zero digits in the $b$-ary representation of $n\\,!$ (factorial of $n$).\n\n\n-----Submissions-----\n\nYou can write the solution program in a non-profit manner on HackerRank.\n\nFor this assignment, you'll need to complete the solution program, using all of the functions you've learned previously. \n\nHackerRank recommends you write a program that does this without modifying any other code.\n\n---Image\n\nhttps://drive.google.com/file/d/1Q1o9_VRpUzt_FVVqU3pTk6pRAIw0oU/view?usp=sharing\n\n---General explanation\n\nIn the last two exercises, we provided an outline of the solutions to the following problem. You've seen some useful solutions for the last two exercises, in which you're interested in a few more more. The full list of the solution is given below. Specifically, you should include a function that returns the number of trailing zero digits in the $b$-ary representation of $n!$.\n\nThe function returns an integer, $n!$, which is a base **10**.\n\nThe function has one parameter $n$, a non-negative integer $n$.\n\n\n---Constraints\n\n\n\n---Submissions\n\nTo solve this problem, you'll need to complete the solution program. Do NOT check the solution for correctness.\n\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(6,9) == \"1\"\nassert solution(38,11) == \"3\"\nassert solution(5,10) == \"3\"\nassert solution(5,10) == \"1\"\n\"\"\""
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"6 9\") == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 10\") == \"3\"\nassert solution(\"5 20\") == \"3\"\nassert solution(\"5 10 20\") == \"1\"\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"6 9\"), \"1\"\nassert solution(\"38 11\"), \"3\"\nassert solution(\"5 2\"), \"3\"\nassert solution(\"5 10\"), \"3\"\nassert solution(\"5 10\"), \"1\""
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"24 9\")) == \"1\"\nassert solution(\"38 11\") == \"3\"\nassert solution(\"5 2\") == \"3\"\nassert solution(\"5 10\") == \"1\"\n\n\n-----Time complexity-----\n\nTime: O(n * 10^(n - 1))\n\nSpace: O(n)\n\n\n-----Algorithm-----\n\nIn principle, the number of trailing zero digits can be calculated by trying to find the number of trailing zeros in a number. However, the base of $b$ is not a power of 2. So we have to consider the base of $b$ for the purposes of this problem.\n\nTo calculate the number of trailing zero digits, we use the base $b$ to determine the number of trailing zeros. Since $n!_{(10)}$ = 720_{(10)}$, $n!_{(10)} = 880_{(9)}$, $n!_{(10)} = 1111000_{(2)}$, and $n!_{(10)} = 1$, we can use the following formula:\n\n$$n!_{(10)} = 720_{(10)}$$\n\nTo get the number of trailing zeros in the $b$-ary base, we use the formula, $n!_{(10)} = 1$$\n\n\n-----Details-----\n\nIn the implementation, $n!_{(10)}$ is the number of trailing zero digits of $n!_{(10)}$, which is $n$ in the base of $b$.\n\nIn the implementation, $n!_{(10)} = 1$, and $n!_{(10)} = 2$ which is $n$ in the base of $b$.\n\nFor example, $n!_{(10)} = 8$: the number of trailing zeros is 1, since $n!_{(10)} = 8$ is one digit.\n\nFor example, $n!_{(10)} = 2$: the number of trailing zeros is 2, since $n!_{(10)} = 2$ is two digits.\n\nFor example, $n!_{(10)} = 2$: the number of trailing zeros is 1, since $n!_{(10)} = 2$ is one digit.\n\nNote that when the number of trailing zeros is $n$:\n\nWe can treat the number $n!_{(10)} = 1$, as it is a base $b$ so that $n!_{(10)} = 1$ can be calculated as:\n\n$$n!_{(10)} = 1$$\n\nFor example, $n!_{(10)} = 2$, since $n!_{(10)} = 2$ can be calculated as:\n\n$$n!_{(10)} = 2$$\n\n\n-----Space complexity-----\n\nSince $n!_{(10)} = 1$ is a base $b$, the space complexity of $n!_{(10)} = 1$ is O(1)\n\nTime complexity: O(n)\n\nSpace complexity: O(n)\n\n\"\"\"\n\nclass Solution:\n    def solve(self, n, b):\n        return '1' if (n % b == 0) else '0'\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1000000000 1 2019') == 19\nassert solution('100 100000 1') == 500000001500000001\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(6,1) == 10\n\nassert solution(4,3) == 6\n\nassert solution(3,6) == 9\n\nassert solution(5,6) == 16\n\nassert solution(7,7) == 6"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"7 5 3\"\n) == \"19\"\nassert solution(\n    \"1000000000 1 2019\"\n) == \"500000001500000001\"\nassert solution(\n    \"100 100000 1\"\n) == \"101\"\nassert solution(\n    \"6 4 5\"\n) == \"10\"\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"500000001500000001\"\nassert solution(input()) == \"101\"\n\nassert solution(input()) == \"10\"\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0) == 1, \"Input Error\"\n\nassert solution(3) == 9, \"Input Error\"\n\nassert solution(6) == 101, \"Input Error\"\n\nassert solution(5) == 1000, \"Input Error\"\n\n\"\"\""
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"19\"\nassert solution(stdin) == \"500000001500000001\"\n\n------Explanation-----\n\nInput:\n1 1\n\nOutput:\n1\n\nInput:\n100 1\n\nOutput:\n101\n\nInput:\n3 2\n\nOutput:\n3\n\nInput:\n6 4 5\n\nOutput:\n10\n\nInput:\n1 3\n\nOutput:\n1\n\nInput:\n1 1\n\nOutput:\n1\n\nInput:\n6 4 5\n\nOutput:\n10\n\nInput:\n6 4 5\n\nOutput:\n10\n\nInput:\n100 100000 1\n\nOutput:\n101\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"19\"\nassert solution(stdin) == \"50\"\nassert solution(stdin) == \"600\"\nassert solution(stdin) == \"9800\"\nassert solution(stdin) == \"10100\"\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\n\n>>> def solution(stdin):\n    # n, m = map(int, stdin.split())\n    # a, b = map(int, stdin.split())\n    n, m = list(map(int, stdin.split()))\n    if m > n:\n        n, m = m, n\n    diffs = [1] * m\n    s = 0\n    for i in range(m):\n        s += diffs[i]\n        diffs[i] = s % n\n        if dfs(i):\n            s -= diffs[i]\n            diffs[i] = s % n\n        else:\n            diffs[i] = 1\n    return str(sum(diffs))"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 3), 4\nassert solution(6, 4), 5\nassert solution(7, 5), 10\nassert solution(1, 7), 4\nassert solution(100, 100000), 10000000001\n\n\"\"\"\n\nclass Solution:\n    def solution(self, m, a, b):\n        from functools import reduce\n        s = reduce(lambda x, y: x+y, range(m))\n        return s%(10**9+1)"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 500000001500000001\n\nassert solution(stdin) == 101\n\"\"\""
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, \"1 3 5\") == \"Yes\"\nassert solution(3, \"4 3 1\") == \"No\""
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == 'No'\nassert solution('2 1') == 'No'\nassert solution('4 3 1') == 'No'\nassert solution('4 0 1 5 1') == 'No'\nassert solution('4 3 1 4 0 5') == 'No'\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, [3, 5, 1, 1]) == \"Yes\"\nassert solution(3, [1, 1, 1, 0, 0, 0]) == \"No\"\nassert solution(4, [3, 9, 9]) == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3\",\"1\",\"1\"]) == \"No\"\nassert solution([\"3\",\"5\",\"7\"]) == \"No\"\nassert solution([\"5\",\"3\",\"4\",\"3\"]) == \"Yes\"\nassert solution([\"3\",\"5\",\"7\"]) == \"Yes\"\nassert solution([\"2\",\"1\"]) == \"No\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 9 3\") == \"Yes\"\nassert solution(\"5\") == \"No\"\nassert solution(\"3\") == \"No\"\nassert solution(\"4 3 1\") == \"Yes\"\n\n\n-----Constraints-----\n1 <= n <= 100\n0 <= a_1, a_2,..., a_{n} < 100\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nExplanation:\n1) If the sequence is empty, then the sequence is a single-number subsegment.\n\n2) The sequence is non-empty but has odd length.\n\n3) The sequence contains a subsegment whose first and last numbers are odd numbers.\n\n4) The sequence is divisible by 3.\n\n5) If the subsegment is not divisible by 2, then there is no valid subsegment.\n\n6) The sequence has one or more subsegments.\n\n7) The sequence is divisible by 2 and not any of the subsegments.\n\n8) The sequence can be divided into 3 subsegments in any order.\n\n9) The sequence must be divisible by 5, as there are such a subsegments.\n\n10) The sequence is always divisible by 3.\n\n11) The sequence is always divisible by 2.\n\n11) The sequence has no subsegments.\n\n12) The sequence has a subsegment that is not divisible by 3 or 2.\n\n12) The sequence has a subsegment that is divisible by 2 but not all of its subsegments.\n\n12) The sequence has a subsegment that is divisible by 5, but not all of its subsegments.\n\n12) The sequence has no subsegments.\n\n12) The sequence is a valid sequence of subsegments that are divisible by 3 or 2.\n\n12) The sequence is a valid sequence of subsegments that have equal numbers.\n\n12) The sequence is a valid sequence of subsegments that have odd numbers.\n\n12) The sequence is a valid sequence of subsegments that are not divisible by 3 or 2.\n\n12) The sequence is a valid sequence of subsegments that have a subsegment that is divisible by 2 but not all of their subsegments.\n\n12) The sequence is a valid sequence of subsegments that have a subsegment that is divisible by 5.\n\n12) The sequence is a valid sequence of subsegments that have a subsegment that is divisible by 3.\n\n12) The sequence is not a valid sequence of subsegments.\n\n\"\"\""
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"Yes\"\nassert solution(inp) == \"No\""
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(3) == \"No\"\nassert solution(3) == \"No\"\nassert solution(3) == \"No\"\nassert solution(5) == \"Yes\"\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2, 3, 4, 5, 6, 7) == \"Yes\"\nassert solution(2, 3, 5, 1, 4, 6, 7) == \"No\"\n\nassert solution(1, 3, 3, 4, 2, 5) == \"No\"\nassert solution(2, 1, 1) == \"No\"\n\nassert solution(2, 2, 2) == \"No\"\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\""
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == (-1, -1, -1, 1)\n\"\"\""
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2 1\") == \"1\"\nassert solution(\"1 0 1\") == \"1\"\nassert solution(\"1 0 2\") == \"1\"\nassert solution(\"3 2 0\") == \"2\"\nassert solution(\"3 1 1\") == \"3\"\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\\\"\\\"\\\"\n\\n0 0 0 1\n\\n0 0 1 1\n\\n0 1 1 1\n\\n1 0 0 1\n\\n1 0 1 2\n\\n1 1 0 1\n\\n1 1 1 0\n\\n0 0 0 0\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0 0 0 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 1\") == \"1 0 1 0\"\nassert solution(\"0 0 1 0\") == \"-1\""
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0 0 0 1') == '1 0 1 1'\nassert solution('0 0 0 2') == '-1 -1 -1'\nassert solution('0 0 1 1') == '1 0 1 1'\nassert solution('0 0 1 2') == '0 0 1 0'"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == [-1,1,2]\nassert solution(input(\"Input your equation: \")) == [-1,1,2]\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0 0 1\") == \"1 0 1 1\"\nassert solution(\"0 0 1 1\") == \"0 0 1 0\"\nassert solution(\"0 0 1 1\") == \"-1\"\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0 0 0 1) == '-1'\nassert solution(0 0 1 2) == '0 1 1 2'\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"-1\"\nassert solution(inp) == str(int(inp[1]) + int(inp[2]))\nassert solution(inp) == \"1 2\"\nassert solution(inp) == str(int(inp[1]) + int(inp[2]))\nassert solution(inp) == str(int(inp[1]) + int(inp[2]))\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\n\n-----Constraints-----\n1 <= x, y <= 10^9\n1 <= stdin.length <= 2 * 10^4\n0 <= stdin.length <= 2\u00b710^9\n1 <= n <= 10^4\n\n\n-----Time complexity-----\nO(n)\n\n\n-----Space complexity-----\nO(1)\n\n'''\n\n\nclass Solution:\n    def modinv(self, a: int, m: int) -> int:\n        return pow(a, m - 2, m)\n\n    def f(self, x, y):\n        return pow(x, y, 1000000007)\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"Your solution should be 0,1 or 1,0\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 500\n0 <= stdin[i] <= 10^9\n\nInput Format\n\nThe first line contains an integer |x|, |y|\n\nThe second line contains an integer n\n\nOutput Format\n\nOutput a single integer representing f_{n} modulo 1000000007 (10^9 + 7).\n\n\nSample Input\n\n2 3\n3\n\nSample Output\n\n1\n\n\n-----Note-----\n\nIn the first sample, f_2 = f_1 + f_3, 3 = 2 + f_3, f_3 = 1.\n\nIn the second sample, f_2 =  - 1;  - 1 modulo (10^9 + 7) equals (10^9 + 6).\n\n\"\"\""
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 -1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"0 -1\") == 1000000006\nassert solution(\"2\") == 0\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1000000006'\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n\n\n\n-----Constraints-----\n\n1 <= x, y <= 10^9\n1 <= stdin.length <= 100\nstdin.length <= 50\n\n-----Time Limit-----\n\nO(sqrt(N) log(2))\n\n-----Solutions-----\n\n\"\"\""
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"1\"\nassert solution(\"-1\") == \"1000000006\"\n\"\"\"\nimport math\n\nimport sys"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 1\n\"\"\"\n\nimport math"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 3) == 1\nassert solution(0, 2) == 1\nassert solution(0, 0) == 1\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3') == '1000000006'\nassert solution('0 -1') == '1000000006'\nassert solution('2') == '1000000006'\nassert solution('-1') == '1000000006'\nassert solution('0') == '1000000006'\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"0 1\") == \"1000000006\"\nassert solution(\"-1 -1\") == \"1000000006\"\nassert solution(\"0 0\") == \"1000000006\"\n\n\"\"\""
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"0\") == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == 'YES'\nassert solution('0') == 'YES'\nassert solution('0 1') == 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 4 -3 -4 -4 -10 7 3\"\n    ) == \"YES\"\nassert solution(\n    \"5 5 -3 -4 -4 -10 7 3\"\n    ) == \"YES\"\nassert solution(\n    \"5 4 -3 -4 -4 -10 7 3\"\n    ) == \"NO\"\nassert solution(\n    \"3 4 -3 -4 -4 -10 7 3\"\n    ) == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 1') == 'YES'\nassert solution('2 -3') == 'NO'\nassert solution('5 3 -4 -9') == 'NO'\nassert solution('2 2 2 -2') == 'NO'\nassert solution('2 -3 -4') == 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sys.stdin.readline().rstrip()) == 'YES'\nassert solution(sys.stdin.readline().rstrip()) == 'YES'\nassert solution(sys.stdin.readline().rstrip()) == 'YES'\nassert solution(sys.stdin.readline().rstrip()) == 'NO'\nassert solution(sys.stdin.readline().rstrip()) == 'NO'\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n\n\n-----Brute Force-----\n\nBrute Force:\n\nGiven m, n, k, check whether the maximum possible score can be obtained by solving n*m quadratic equation.\n\nSample 1. Brute force: n=3, m=4\n\nSample 2. Brute force: n=4, m=3\n\nSample 3. Brute force: n=4, m=2\n\nSample 4. Brute force: n=2, m=1\n\n\n-----Worst case-----\n\nSample 1: n=3, m=4\n\nSample 2: n=4, m=3\n\nSample 3: n=4, m=2\n\nSample 4: n=2, m=1\n\n\n-----Optimized-----\n\nn = 3, m = 4, k = 3\n\nn = 4, m = 3, k = 2\n\nn = 4, m = 3, k = 1\n\nn = 2, m = 1\n\n\n----Riddle----\n\nBrute force is a problem that is very difficult to solve, and we have to solve it with brute force. We can achieve this by looking at the number of possible answers to n * m * k,\nwhich is given by the sum of k^2. Brute force is exactly the same as the solve method.\n\nBrute force is an important problem for solving the quiz. The code that solves Brute Force is nearly identical to the solve method.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible answers is given by the sum of the number of possible answers in a block of N*M*K.\n\nBrute force is a problem with the number of possible"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\nprint(stdin)\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5,3,2) == 3\nassert solution(5,4,2) == 6\nassert solution(5,5,2) == 3\nassert solution(5,5,3) == 3\nassert solution(5,5,4) == 0\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3 2\") == \"4\"\nassert solution(\"4 3 2\") == \"2\"\nassert solution(\"5 4 2\") == \"0\"\nassert solution(\"5 4 2\") == \"0\"\nassert solution(\"5 4 2\") == \"0\"\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '2000000000'"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '3'"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(string) == \"3\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100,000\n1 \u2264 m \u2264 n\n1 \u2264 stdin, stdout, k \u2264 100\n\nTime Limit: 1 second\n\nNOTE: you may not print the output or input in any order.\n\n-----See also-----\nhttps://www.youtube.com/watch?v=9iXlAoY7KgI\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5 3 2') == 3\n\nassert solution('5 4 2') == 6"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3454) == 'YES', \"3454\"\nassert solution(10) == 'YES', \"10\"\nassert solution(111111) == 'NO', \"111111\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3454\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"111111\") == \"NO\"\n\n\n\"\"\"\nBy using strings or converting it to numbers, we can quickly solve the problem without changing the order of the digits.\n\nHowever, it is possible that the digits are not used at all, and the answer is not even. In this case, we will use \"1\" as a prefix for the digits.\n\nWe need to find the digits that are not used at all.\n\nWe start from the end of the string and then, after the first number that has not been used, we go through all the characters that are not used. We then remove the last digit of the string.\n\nThe number after removing the last digit is given by the sum of the digits in the string.\n\nWe then remove the digits with a multiplier (e.g. \"3\" = \"5\") because the string is not the integer itself.\n\nWe then remove the digits with a multiplier (e.g. \"2\" = \"9\") because the number is not divisible by 8.\n\nWe then remove the digits with a multiplier (e.g. \"1\" = \"4\") because the string is not the integer itself.\n\nFinally, we remove the digits with a multiplier (e.g. \"2\" = \"6\") because the number is divisible by 8.\n\nWe then remove the digits with a multiplier (e.g. \"1\" = \"3\") because the number is not divisible by 8.\n\nAfter removing the last digit of the string, we now have a list of digits.\n\nWe iterate over the digits of the list in reverse order, so that after removing the last digit, we have the digits in the order in which they were removed.\n\n\"\"\"\n\nclass Solution:\n    def removeZeroes(self, s: str) -> str:\n        s = list(s)\n        s.reverse()\n        \n        i = 0\n        for j in range(len(s)):\n            if s[j] == 0:\n                s.pop(i)\n            else:\n                i += 1\n                \n        return \"\".join(s)"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4\")) == 2\nassert solution(\"1\") == 1\nassert solution(\"5\") == 1\nassert solution(\"0\") == 2\nassert solution(\"1\") == 2\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('') == ''\nassert solution('0') == 'NO'\nassert solution('000001') == 'YES'\nassert solution('0123456789') == 'YES'\nassert solution('0001') == 'NO'\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\""
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3454\") == \"YES\"\nassert solution(\"10\") == \"NO\"\nassert solution(\"111111\") == \"YES\"\nassert solution(\"\") == \"YES\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3454\") == \"YES\"\nassert solution(\"10\") == \"YES\"\nassert solution(\"111111\") == \"NO\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(123456) == \"YES\"\nassert solution(12345) == \"YES\"\nassert solution(1234) == \"YES\"\nassert solution(1234) == \"NO\""
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"1\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"1\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"2\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"2\"\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == \"2\"\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1234) == \"YES\"\nassert solution(12345) == \"NO\""
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n\nExplanation\n\nInput:\n10 3\n6 2\n2 1\n7 3\n\nOutput:\n4\n\nInput:\n8 4\n3 1\n6 2\n5 2\n2 1\n7 3\n\nOutput:\n-1\n\n\nNote:\n\n1 <= n <= 100\n\n0 <= k_{i}, f_{i} < 100\n\nThere are no distinct pairs of k_{i}, f_{i} such that k_{i} <= n <= f_{i}.\n\n\"\"\"\n\nclass Solution:\n    def restoreFlats(self, n: int, m: int, k: List[List[int]], f: List[int]) -> int:\n        # set can't be used\n        # dp = [[0 for _ in range(f)] for _ in range(m)]\n        # print(f\"{k} {m} {n}\")\n        # print(dp)\n        # print(f\"k_{i} f_{i}\")\n        # print(k)\n        # print(f)\n        # for i in range(m):\n        #     for j in range(i + 1, m):\n        #         dp[i][j] = max(dp[i][j], dp[i][k[i]] + dp[k[j]])\n        # return dp[n][m - 1]\n        \n        # i, j = 0, 0\n        # dp = [0 for _ in range(f)]\n        # dp[0] = 1\n        # for i in range(m):\n        #     for j in range(i + 1, m):\n        #         dp[j] = max(dp[j], dp[i] + dp[k[i]])\n        # return dp[n - 1]\n        \n        # dp = [[0 for _ in range(f)] for _ in range(n)]\n        # for i in range(m):\n        #     for j in range(i + 1, n):\n        #         if k[i][1] == f and k[j][1] == i:\n        #             dp[j][f] = max(dp[j][f], dp[j][f - 1] + dp[j][k[i][0]])\n        #         elif k[i][1] == f and k[j][1] == j:\n        #             dp[j][i] = max(dp[j][i], dp[j][i - 1] + dp[j][k[i][0]])\n        #         else:\n        #             dp[j][i] = max(dp[j][i], dp[j][j - 1] + dp[j][k[i][1]])\n        # return dp[n - 1][m - 1]\n        \n        # dp = [0 for _ in range(n)]\n        # for i in range(m):\n        #     for j in range(i + 1, n):\n        #         if k[i][1] == f and k[j][1] == i:\n        #             dp[j] = max(dp[j], dp[j][f] + dp[j][k[i][0]])\n        #         elif k[i][1] == f and k[j][1] == j:\n        #             dp[j] = max(dp[j], dp[j][i] + dp[j][k[i][0]])\n        #         else:\n        #             dp[j] = max(dp[j], dp[j][j - 1] + dp[j][k[i][1]])\n        # return dp[n - 1][m - 1]\n        \n        # dp = [0 for _ in range(n)]\n        # for i in range(m):\n        #     for j in range(i + 1, n):\n        #         if k[i][1] == f and k[j][1] == i:\n        #             dp[j] = max(dp[j], dp[j][f] + dp[j][k[i][0]])\n        #         elif k[i][1] == f and k[j][1] == j:\n        #             dp[j] = max(dp[j], dp[j][i] + dp[j][k[i][0]])\n        #         else:\n        #             dp[j] = max(dp[j], dp[j][j - 1] + dp[j][k[i][1]])\n        # return dp[n - 1][m - 1]\n        \n        # dp = [0 for _ in range(n)]\n        # for i in range(m):\n        #     for j in range(i + 1, n):\n        #         if k[i][1] == f and k[j][1] == i:\n        #             dp[j] = max(dp[j], dp[j][f] + dp[j][k[i][0]])\n        #         elif k[i][1] == f and k[j][1] == j:\n        #             dp[j] = max(dp[j], dp[j][i] + dp[j][k[i][0]])\n        #         else:\n        #             dp[j] = max(dp[j], dp[j][j - 1] + dp[j][k[i][1]])\n        # return dp[n - 1][m - 1]\n        \n        # dp = [0 for _ in range(n)]\n        # for i in range(m):\n        #     for j in range(i + 1, n):\n        #         if k[i][1] == f and k[j][1] == i:\n        #             dp[j] = max(dp[j], dp[j][f] + dp[j][k[i][0]])\n        #         elif k[i][1] == f and k[j][1] == j:\n        #             dp[j] = max(dp[j], dp[j"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\n\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= m <= 100\n1 <= k_i, f_i <= 100\n\n------Time Limit Exceeded------\n\nhttps://leetcode.com/problems/restore-floor/discuss/877980/Python-solution-beats-99-lines-Python-solution-beats-99-lines-with-explanation\n\n-----Submissions-----\n\n1572ms\n\"\"\"\n\nclass Solution:\n    def restoreFloor(self, n, m, k, f):\n        from collections import defaultdict\n        floor = defaultdict(lambda: 0)\n        def backtrack(floor, f, n, m):\n            floor[f] += 1\n            for i in range(1, n + 1):\n                if f - floor[i] >= 0:\n                    k[i] += 1\n                else:\n                    k[i] = 0\n                if f - floor[i] >= 0:\n                    f -= floor[i]\n                    backtrack(floor, i, n, m)\n                    floor[i] = 0\n                else:\n                    f -= floor[i]\n                    f += f - floor[i]\n                    m -= f - floor[i]\n                    floor[i] = 0\n            floor[f] -= 1\n\n        backtrack(floor, k[f], n, m)\n        if n <= 0 or m <= 0:\n            return -1\n        if floor[k[f]] >= 0:\n            return m\n        if f - floor[k[f]] >= 0:\n            return m - floor[k[f]]\n        return -1"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '-1'\n\n\n------------------------------------------------------\n\nExample:\nInput:\n5 5\n6 1 2 4 3 7\n\nOutput:\n0\n-1\n0\n0\n-1\n0\n\nExplanation:\n\nThere are five flats on the first floor and three flats on the second floor. It's not possible to restore the floor for the fifth flat because Polycarp has no flats on the fifth floor.\nSo, the 0th flat is on the 3rd floor.\n\nThere are five flats on the second floor and three flats on the 3rd floor. So, the 1st flat is on the 2nd floor and so on. The 0th flat is on the 4th floor.\n\nThere are five flats on the third floor and three flats on the 4th floor. So, the 5th flat is on the 2nd floor and so on. So, the 0th flat is on the 3rd floor.\n\nThis means Polycarp cannot restore the floor for the 5th flat because Polycarp has no flats on the 5th floor.\nSo, the 0th flat is on the 4th floor.\n\nSince there are no flats on the first floor, this means Polycarp cannot restore the floor for the 5th flat because there are no flats on the 4th floor.\n\n\n\n------------------------------------------------------"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 6\") == 4\nassert solution(\"8 4\") == -1\nassert solution(\"3 2\") == 1\nassert solution(\"7 3\") == 2\nassert solution(\"6 2\") == 0\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == -1\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == \"1\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"5 4\") == \"3\"\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= m <= 100\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n\n-----Idea-----\n\nIf there are two distinct pairs of flats in the memory, the two closest (i.e. highest) value should be the closest to the nth flat.\n\n\n-----Implementation-----"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 5) == -1\nassert solution(8, 4) == -1\nassert solution(3, 3) == 4\nassert solution(2, 2) == -1\nassert solution(1, 1) == -1\n\npass\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 10\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"No solution\"\nassert solution(stdin), \"No solution\"\nassert solution(stdin), \"No solution\"\n\n----------------------\n\nInput\n00\n00\n\nOutput\n1\nInput\n00X00X0XXX0\n0XXX0X00X00\n\nOutput\n4\nInput\n0X0X0\n0X0X0\n\nOutput\n0\nInput\n0XXX0\n00000\n\nOutput\n2\n\"\"\"\n\n\nclass Solution:\n    def maxBishwoks(self, board: List[str]) -> int:\n        n = len(board)\n        count = 0\n\n        for i in range(0, n):\n            for j in range(0, n):\n                if board[i][j] == 'X':\n                    count += 1\n\n        return count\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"00\"\n    \"00\"\n    \"0X0X0X0\"\n    \"0X0X0X0\"\n) == 1\nassert solution(\n    \"0X0X0\"\n    \"0X0X0\"\n    \"XXXX0\"\n) == 0\nassert solution(\n    \"0X0X0\"\n    \"0X0X0\"\n    \"XXXX0\"\n) == 0\nassert solution(\n    \"00X00X00\"\n    \"00X00X00\"\n    \"XXXXX\"\n) == 0\nassert solution(\n    \"XXXXX\"\n    \"XXXXX\"\n    \"XXXXX\"\n) == 0\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"0X0\", \"0X0\", \"X\"]) == \"2\"\nassert solution([\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]) == \"1\"\nassert solution([\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]) == \"0\"\nassert solution([\"0X0\", \"0X0\", \"X\", \"X\", \"X\", \"X\", \"X\"]) == \"0\"\nassert solution([\"X\", \"X\", \"X\", \"X\", \"X\", \"X\"]) == \"0\"\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['0X0X0', '0X0X0', '0X0X0', '0X0X0']) == '2'\nassert solution(['0X0X0', '0X0X0', '0X0X0', '0X0X0', 'X', 'X', 'X', 'X', 'X']) == '0'\nassert solution(['0X0X0', '0X0X0', '0X0X0', '0X0X0', 'X', 'X', 'X', 'X', 'X']) == '0'\nassert solution(['0X0X0', '0X0X0', '0X0X0', '0X0X0', 'X', 'X', 'X', 'X', 'X']) == '0'\nassert solution(['0X0X0', '0X0X0', '0X0X0', '0X0X0', 'X', 'X', 'X', 'X', 'X']) == '0'\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"00\") == \"1\"\nassert solution(\"00X00X0XXX0\") == \"4\"\nassert solution(\"0X0X0\") == \"0\"\nassert solution(\"0X0X0X0\") == \"2\"\nassert solution(\"XXXXX0\") == \"2\"\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0X00\") == 1\nassert solution(\"0X0\") == 0\nassert solution(\"X\") == 4\nassert solution(\"XX\") == 2\nassert solution(\"XX\") == 2\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n'''\n\nclass Solution:\n    def maxBishwocks(self, board: str) -> int:\n        n = len(board)\n        # DP[i][j] = number of bishwocks we can put down the board[i][j]\n        # DP[i][j] = min(DP[i][j], DP[i][j-3]+1, DP[i-2][j-3]+1, DP[i-1][j-3]+1, DP[i][j-3]+1)\n        # DP[i][j] = max(DP[i][j], DP[i][j+3]+1, DP[i+2][j+3]+1, DP[i+1][j+3]+1, DP[i+2][j]+1)\n        # DP[i][j] = min(DP[i][j], DP[i][j+1]+1, DP[i+1][j+1]+1)\n        DP = [[0 for _ in range(n+1)] for _ in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if board[i-1] == board[j-1]:\n                    DP[i][j] = 1\n                else:\n                    DP[i][j] = max(DP[i][j], DP[i][j-3]+1, DP[i-2][j-3]+1, DP[i-1][j-3]+1, DP[i-2][j]+1)\n        return DP[n][n]\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(11) == 0\nassert solution(12) == 0\nassert solution(3) == 0\nassert solution(7) == 0\nassert solution(8) == 0\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\n\"\"\"\n\nimport sys\nimport string\n\nSTDIN = sys.stdin"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"AaBbAaAa\") == \"2\"\nassert solution(\"AAaaAaAa\") == \"3\"\nassert solution(\"baaAaAaAa\") == \"0\"\nassert solution(\"baaBbAbAa\") == \"0\"\nassert solution(\"ABBBAB\") == \"0\"\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 3\nassert solution(input()) == 0\nassert solution(input()) == 0\nassert solution(input()) == 0\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\nInput\n3\nABC\nAB\nAC\n\nOutput\n3\n\nInput\n4\nABC\nAAC\nAC\n\nOutput\n4\n\n\"\"\""
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input() == \"4546\") == 15, \"answer is not 4546\"\nassert solution(input() == \"12\") == 1, \"answer is not 12\"\nassert solution(input() == \"123\") == 2, \"answer is not 123\"\nassert solution(input() == \"0123\") == 3, \"answer is not 0123\"\nassert solution(input() == \"\") == 0, \"answer is not 0\"\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str) == 3, \"The maximum number of elements is not 3\"\nassert solution(str) == 0, \"The maximum number of elements is not 0\"\nassert solution(str) == 0, \"The maximum number of elements is not 0\"\nassert solution(str) == 0, \"The maximum number of elements is not 0\"\nassert solution(str) == 0, \"The maximum number of elements is not 0\"\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('abababababab') == 2\nassert solution('aAaBbBbBbaA') == 0\nassert solution('AaBbBbBbaA') == 0\nassert solution('AbBbBbBbaA') == 2\nassert solution('aAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAaAa"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '120'\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 120, \"solution() does not return 120\""
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"121\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"120\""
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"120\"\nassert solution(inp) == \"120\"\nassert solution(inp) == \"120\"\nassert solution(inp) == \"120\"\nassert solution(inp) == \"120\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == '120'\nassert solution(input, 2, 3) == '120'\nassert solution(input, 2, 4) == '120'\nassert solution(input, 2, 5) == '120'\nassert solution(input, 2, 6) == '120'\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 0\") == \"3\"\nassert solution(\"1 3 2\") == \"4\"\nassert solution(\"1 4 0\") == \"5\"\nassert solution(\"1 2 -1\") == \"1\"\nassert solution(\"1 3 2 -1\") == \"1\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"120\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 2 0') == '3'\nassert solution('6 16 23 16 15 42 8') == '120'"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str) == '120'\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '120'\nassert solution(input()) == '60'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 9 2 4\") == 7\nassert solution(\"6 10 2 4\") == -1\nassert solution(\"6 5 4 3\") == 2\nassert solution(\"6 6 4 4\") == 2\nassert solution(\"6 8 4 6\") == 4\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 4 3 5') == 3\nassert solution('1 2 3 4') == 2\nassert solution('2 3 2 4') == 1\nassert solution('4 5 1 2') == -1\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('6 9 2 4') == 4\nassert solution('6 5 4 3') == -1\nassert solution('6 5 4 3') == 3\nassert solution('6 6 6 6') == -1\nassert solution('6 6 7 6') == -1\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4, 'incorrect'"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 9 2 4\") == 7\nassert solution(\"6 10 2 4\") == -1\nassert solution(\"6 5 4 3\") == 2\nassert solution(\"6 4 2 1\") == 4\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(6,9,2,4) == 4\nassert solution(6,5,4,3) == 2\nassert solution(6,4,1,3) == -1\nassert solution(6,4,3,1) == -1"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('6 9 2 4') == '4'\nassert solution('6 10 2 4') == '2'\nassert solution('6 5 4 3') == '-1'"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"6 9 2 4\",\"6 10 2 4\",\"6 5 4 3\"]) == \"4\"\nassert solution([\"6 7 4 3\",\"6 5 4 3\",\"6 7 4 3\"]) == \"2\"\nassert solution([\"6 9 2 4\",\"6 10 2 4\",\"6 5 4 3\",\"6 7 4 3\"]) == \"1\"\nassert solution([\"6 8 4 3\",\"6 7 4 3\",\"6 9 4 3\"]) == \"3\"\nassert solution([\"6 8 4 3\",\"6 9 4 3\",\"6 10 4 3\"]) == \"3\"\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"5\") == \"2\"\nassert solution(\"5 2 1\") == \"2\"\nassert solution(\"2 1 4\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '-1'\nassert solution(inp) == '2'\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"Hello\"), \"Hello\"\nassert solution(\"This is a test\"), \"This is a test\"\nassert solution(\"a\"), \"a\"\nassert solution(\"ab\"), \"ab\"\nassert solution(\"ABC\"), \"ABC\"\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"Hello\") == \"-1\"\nassert solution(\"Codeforces\") == 2\nassert solution(\"privet\") == -1\nassert solution(\"Privet\") == -1\nassert solution(\"abacabac\") == -1\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == -1\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('Hello World') == 'Helloo World', 'Test failed'\nassert solution('Hello World') == 'Helloo World', 'Test failed'\nassert solution('Hello World') == 'Helloo World', 'Test failed'\nassert solution('Hello World') == 'Helloo World', 'Test failed'\nassert solution('Hello World') == 'Helloo World', 'Test failed'\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"Hello\") == \"-1\"\nassert solution(\"He\") == 2\nassert solution(\"Codeforces\") == 5\nassert solution(\"Abacabac\") == 5\nassert solution(\"Privet\") == 10\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abcdefg\") == \"defgabcdefg\"\nassert solution(\"aabcabcabcabc\") == \"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('aabcdefg') == '1'\nassert solution('a123') == '-1'\nassert solution('codeforces') == '-1'\nassert solution('abacabac') == '0'\nassert solution('abcdefg') == '0'\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('Hello') == 'Hello', 'Fail'\nassert solution('Goodbye') == 'Goodbye', 'Fail'\nassert solution('Codeforces') == 'Codeforces', 'Fail'\nassert solution('Privet') == 'Privet', 'Fail'\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 9 2 3\") == \"IMPOSSIBLE\"\nassert solution(\"6 4\") == \"RUN 2\"\nassert solution(\"2 9 2 3 4\") == \"JUMP 2\"\nassert solution(\"2 6 7\") == \"JUMP 2\"\nassert solution(\"3 4 7\") == \"RUN 2\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"RUN X\"\nassert solution(stdin) == \"JUMP Y\"\nassert solution(stdin) == \"JUMP 3\"\nassert solution(stdin) == \"JUMP 6\"\nassert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 10 1 3\", \"3 4 7\"]) == \"RUN 2\"\nassert solution([\"3 4 7\", \"3 10 1\", \"3 9 2\"]) == \"JUMP 3\"\nassert solution([\"3 9 2\", \"3 10 1\", \"3 4 7\"]) == \"RUN 3\"\nassert solution([\"3 4 7\", \"3 10 1\", \"3 9 2\"]) == \"JUMP 2\"\nassert solution([\"3 10 1\", \"3 4 7\", \"3 9 2\"]) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3 7\") == \"RUN 1\"\nassert solution(\"2 7\") == \"JUMP 1\"\nassert solution(\"3 6\") == \"JUMP 1\"\nassert solution(\"4 5\") == \"RUN 1\"\nassert solution(\"6 4\") == \"JUMP 2\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 10 1 3\") == \"RUN 2\"\nassert solution(\"3 4 7\") == \"IMPOSSIBLE\"\nassert solution(\"3\") == \"IMPOSSIBLE\"\nassert solution(\"3 10\") == \"RUN 1\"\nassert solution(\"3 9\") == \"JUMP 2\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 3\") == \"IMPOSSIBLE\"\nassert solution(\"1 3 4\") == \"RUN 2\"\nassert solution(\"2 3\") == \"RUN 1\"\nassert solution(\"3\") == \"JUMP 2\"\nassert solution(\"3 4\") == \"JUMP 1\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"IMPOSSIBLE\"\n\"\"\"\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"7 10 1 3\") == \"IMPOSSIBLE\"\nassert solution(\"2 9 2 3\") == \"JUMP 2\"\nassert solution(\"6 4\") == \"RUN 2\"\nassert solution(\"3 5\") == \"JUMP 3\"\nassert solution(\"1 2 3 4 5 6 7\") == \"RUN 1\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 0, 'Error'\n\n-----Constraints-----\n1 <= s <= 10^12,\n1 <= x <= 10^12\n\n\n-----Time Limit (C1.25)-----\nTime limit: 1 second (since the input is a string of digits)\nMemory limit: 128MB (since the input is a string of digits)\n\n\n-----Submissions-----\n\nWhat if the input is already sorted?\n\nWhat if the bitwise XOR of two integers is not taken into account?\n\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(s,x) == 0, \"Not implemented\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 4\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 <= s, x <= 10^12\n\n[input]\n\n(2 \u2264 s \u2264 10^12, 0 \u2264 x \u2264 10^12)\n\n[output]\n\n(2 \u2264 s, x \u2264 10^12)\n\n[log]\n\n0\n\n-----Algorithm-----\n\nwe have to make a subproblems of the pair (s,x).\n\nsubproblem 1\n\nsubproblem 1 (s,x) = (s-x, s)\n\nsubproblem 2\n\nsubproblem 2 (s,x) = (s,x-s)\n\nsubproblem 3\n\nsubproblem 3 (s,x) = (x-s, s)\n\nsubproblem 4\n\nsubproblem 4 (s,x) = (x-s, x)\n\nsubproblem 5\n\nsubproblem 5 (s,x) = (x, s)\n\nsubproblem 6\n\nsubproblem 6 (s,x) = (x, x-s)\n\nsubproblem 7\n\nsubproblem 7 (s,x) = (s, x)\n\nsubproblem 8\n\nsubproblem 8 (s,x) = (x, s)\n\nsubproblem 9\n\nsubproblem 9 (s,x) = (s, x)\n\nsubproblem 10\n\nsubproblem 10 (s,x) = (s, x)\n\nsubproblem 11\n\nsubproblem 11 (s,x) = (s, x)\n\nsubproblem 12\n\nsubproblem 12 (s,x) = (x, s)\n\nsubproblem 13\n\nsubproblem 13 (s,x) = (x, x-s)\n\nsubproblem 14\n\nsubproblem 14 (s,x) = (x, s)\n\nsubproblem 15\n\nsubproblem 15 (s,x) = (s, x)\n\nsubproblem 16\n\nsubproblem 16 (s,x) = (x, s)\n\nsubproblem 17\n\nsubproblem 17 (s,x) = (s, s)\n\nsubproblem 18\n\nsubproblem 18 (s,x) = (x, s)\n\nsubproblem 19\n\nsubproblem 19 (s,x) = (s, x)\n\nsubproblem 20\n\nsubproblem 20 (s,x) = (x, s)\n\nsubproblem 21\n\nsubproblem 21 (s,x) = (x, x-s)\n\nsubproblem 22\n\nsubproblem 22 (s,x) = (s, x)\n\nsubproblem 23\n\nsubproblem 23 (s,x) = (x, x-s)\n\nsubproblem 24\n\nsubproblem 24 (s,x) = (x, x)\n\nsubproblem 25\n\nsubproblem 25 (s,x) = (x, s)\n\nsubproblem 26\n\nsubproblem 26 (s,x) = (s, s)\n\nsubproblem 27\n\nsubproblem 27 (s,x) = (x, s)\n\nsubproblem 28\n\nsubproblem 28 (s,x) = (x, x)\n\nsubproblem 29\n\nsubproblem 29 (s,x) = (s, s)\n\nsubproblem 30\n\nsubproblem 30 (s,x) = (s, x)\n\nsubproblem 31\n\nsubproblem 31 (s,x) = (x, s)\n\nsubproblem 32\n\nsubproblem 32 (s,x) = (x, x-s)\n\nsubproblem 33\n\nsubproblem 33 (s,x) = (s, x)\n\nsubproblem 34\n\nsubproblem 34 (s,x) = (x, s)\n\nsubproblem 35\n\nsubproblem 35 (s,x) = (x, x)\n\nsubproblem 36\n\nsubproblem 36 (s,x) = (x, s)\n\nsubproblem 37\n\nsubproblem 37 (s,x) = (s, s)\n\nsubproblem 38\n\nsubproblem 38 (s,x) = (x, s)\n\nsubproblem 39\n\nsubproblem 39 (s,x) = (x, x)\n\nsubproblem 40\n\nsubproblem 40 (s,x) = (x, s)\n\nsubproblem 41\n\nsubproblem 41 (s,x) = (x, s)\n\nsubproblem 42\n\nsubproblem 42 (s,x) = (x, x)\n\nsubproblem 43\n\nsubproblem 43 (s,x) = (s, s)\n\nsubproblem 44\n\nsubproblem 44 (s,x) = (s, x)\n\nsubproblem 45\n\nsubproblem 45 (s,x) = (s, x)\n\nsubproblem 46\n\nsubproblem 46 (s,x) = (x, s)\n\nsubproblem 47\n\nsubproblem 47 (s,x) = (x, x)\n\nsubproblem 48\n\nsubproblem 48 (s,x) = (s, s)\n\nsubproblem 49\n\nsubproblem 49 (s,x) = (x, s)\n\nsubproblem 50\n\nsubproblem 50 (s,x) = (s, s)\n\nsubproblem 51\n\nsubproblem 51 (s,x) = (x, s)\n\nsubproblem 52\n\nsubproblem 52 (s,x) = (s, s)\n\nsubproblem 53\n\nsubproblem 53 (s,x) = (s, s)\n\nsubproblem 54\n\nsubproblem 54 (s,x) = (s, s)\n\nsubproblem 55\n\nsubproblem 55 (s,x) = (x, s)\n\nsubproblem 56\n\nsubproblem 56 (s,x) = (s, s)\n\nsubproblem 57\n\nsubproblem 57 (s,x) = (x, s)\n\nsubproblem 58\n\nsubproblem 58 (s,x) = (s, s)\n\nsubproblem 59\n\nsubproblem 59 (s,x) = (s, s)\n\nsubproblem 60\n\nsubproblem 60 (s,x) = (s, x)\n\nsubproblem 61\n\nsubproblem 61 (s,x) = (x, s)\n\nsubproblem 62\n\nsubproblem 62 (s,x) = (s, s)\n\nsubproblem 63\n\nsubproblem 63 (s,x) = (s, x)\n\nsubproblem 64\n\nsubproblem 64 (s,x) = (x, s)\n\nsubproblem 65\n\nsubproblem 65 (s,x) = (s, s)\n\nsubproblem 66\n\nsubproblem 66 (s,x) = (x, s)\n\nsubproblem 67\n\nsubproblem 67 (s,x) = (s, s)\n\nsubproblem 68\n\nsubproblem 68 (s,x) = (s, s)\n\nsubproblem 69\n\nsubproblem 69 (s,x) = (x, s)\n\nsubproblem 70\n\nsubproblem 70 (s,x) = (s, s)\n\nsubproblem 71\n\nsubproblem 71 (s,x) = (s, s)\n\nsubproblem 72\n\nsubproblem 72 (s,x) = (s, s)\n\nsubproblem 73\n\nsubproblem 73 (s,x) = (s, s)\n\nsubproblem 74\n\nsubproblem 74 (s,x) = (s, s)\n\nsubproblem 75\n\nsubproblem 75 (s,x) = (x, s)\n\nsubproblem 76\n\nsubproblem 76 (s,x) = (x, x)\n\nsubproblem 77\n\nsubproblem 77 (s,x) = (s, s)\n\nsubproblem 78\n\nsubproblem 78 (s,x) = (s, s)\n\nsubproblem 79\n\nsubproblem 79 (s,x) = (s, s)\n\nsubproblem 80\n\nsubproblem 80 (s,x) = (x, s)\n\nsubproblem"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n\n\nInput\n3 4\n\nOutput\n4\n\nInput\n2 2\n\nOutput\n3\n\n\n\n-----Notes-----\n\nIn the first sample, the naive solution is (2, 7), and the naive solution is (1, 2) (3, 2).\nIn the second sample, we have two solutions (2, 7), (3, 6) and (6, 3) (4, 1).\nThe naive solution (2, 7) and (3, 6) are not satisfied because the solution is in a (2, 1) set.\n\nIn the third sample, (1, 2) and (2, 1) are satisfied because the solution is in a set.\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n0 < s, x < 10^12\n\n----Solutions-----\n25\n\n------Time complexity------\n\nO(n^2)\n\n------Space complexity------\n\nO(n)\n\n\n------Elements of input string------\n\nA, B are positive integers whose sum is b.\nA bitwise XOR of A and B has a sum of s and A bitwise XOR of B has a sum of s.\n\nFor example, A=8, B=10, s=2, x=2.\n\nSo, we have A=8 and B=10, and s=2 and x=2. So, we have four solutions, namely (A=8, B=10, s=2, x=2), (A=8, B=10, s=2, x=1), (A=8, B=10, s=2, x=3), (A=8, B=10, s=2, x=6).\n\n\n----Constraints----\n1 <= s, x <= 10^12\n\n----Time complexity----\nO(n)\n\n----Space complexity----\nO(n)\n\n\n----Examples-----\nExample 1:\n\nInput:\n3 5\n\nOutput:\n4\n\nExample 2:\n\nInput:\n4 7\n\nOutput:\n4\n\n\n------Constraints------\n1 <= s, x <= 10^12\n1 <= A, B <= 10^12\n0 <= A, B <= 10^12\n\n------Time complexity------\nO(n)\n\n------Space complexity------\nO(n)\n\n\n------Examples-----\nInput:\n4 3\n\nOutput:\n0\n\n\n------Constraints------\n1 <= s, x <= 10^12\n1 <= A, B <= 10^12\n0 <= A, B <= 10^12\n\n------Time complexity------\nO(n)\n\n------Space complexity------\nO(n)\n\n\n------Examples-----\nInput:\n7 2\n\nOutput:\n4\n\n\n------Constraints------\n1 <= s, x <= 10^12\n1 <= A, B <= 10^12\n0 <= A, B <= 10^12\n\n------Time complexity------\nO(n)\n\n------Space complexity------\nO(n)\n\n\n------Examples-----\nInput:\n5 4\n\nOutput:\n1\n\n\"\"\""
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3, \"Failed to solve the problem\"\n\n-----Constraints-----\n\n1 <= s, x <= 10^12\n\nTime Limit: 1 sec\n\nTheory:\n\nPrecondition:\n\na, b = s and s & x\n\nInput:\n\n3 5\n\nOutput:\n\n4\n\nExplanation:\n\n2 + 1 = 3 = 4\n\n1 + 2 = 4 = 2\n\n1 + 2 = 3 = 1\n\n0 + 2 = 3 = 0\n\n1 + 1 = 2 = 0\n\n1 + 1 = 2 = 0\n\nExplanation:\n\nAt x = 3, there are 2 solutions: (1, 2) and (2, 1).\n\"\"\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 4\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin: str\n    ) == \"2\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 1\") == 6\nassert solution(\"5 1\") == 3\nassert solution(\"2 5\") == 2\nassert solution(\"3 1\") == 2\nassert solution(\"4 5\") == 1\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport sys\n\nn = int(input())\nk = int(input())\nprint(n)\nskewers = list(map(int, input().split()))\n\nskewers.sort()\ncounts = {}\nfor s in skewers:\n    counts[s] = 0\n\nfor s in range(n):\n    for k in range(s+1, n+1):\n        if s in counts:\n            counts[s] += 1\n            counts[k] -= 1\n        else:\n            counts[s] = 1\n\nfor i in sorted(counts.keys()):\n    print(i, counts[i])\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 1') == '2'\nassert solution('5 1') == '5'\nassert solution('2 1') == '2'\nassert solution('2 3') == '2'\nassert solution('2 5') == '2'\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"7 2\"\n) == \"2\"\nassert solution(\n    \"5 1\"\n) == \"1\"\nassert solution(\n    \"5 1\"\n) == \"1\"\nassert solution(\n    \"1 6\"\n) == \"2\"\nassert solution(\n    \"2 1\"\n) == \"1\"\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\nInput\n5 1\n\nOutput\n2\n3\n\nInput\n6 3\n\nOutput\n2\n1 5 \n\nExplanation\n\nThe skewers are $1$, $3$, $4$, $5$, and $6$, therefore after the first turn, the skewers are turning $1$, $3$, $4$ and $5$ \n\nThe second turn will be in the initial state, because the skewers will be turning $2$ and $3$, which is the minimum possible number of actions needed by the first operation.\n\nThe third turn will be in the initial state, because the skewers will be turning $1$, $2$, $3$ and $4$, which is the minimum possible number of actions needed by the second operation.\n\nThe fourth turn will be in the initial state, because the skewers will be turning $2$, $3$, $4$ and $5$, which is the minimum possible number of actions needed by the third operation.\n\nThe fifth turn will be in the initial state, because the skewers will be turning $1$, $2$, $3$ and $4$ which is the minimum possible number of actions needed by the fourth operation.\n\nThe sixth turn will be in the initial state, because the skewers will be turning $2$, $3$, $4$ and $5$ which is the minimum possible number of actions needed by the fifth operation.\n\nThe seventh turn will be in the initial state, because the skewers will be turning $1$, $2$ and $3$ which is the minimum possible number of actions needed by the sixth operation.\n\nThe eighth turn will be in the initial state, because the skewers will be turning $2$ and $3$ which is the minimum possible number of actions needed by the seventh operation.\n\nThe ninth turn will be in the initial state, because the skewers will be turning $1$, $2$ and $3$ which is the minimum possible number of actions needed by the eighth operation.\n\nInput\n3 1\n\nOutput\n2\n5\n\nExplanation\n\nThe skewers are $1$, $3$, $2$ and $4$, therefore after the first turn, the skewers are turning $2$ and $3$ and $4$ \n\nThe second turn will be in the initial state, because the skewers will be turning $1$, $3$ and $2$ which is the minimum possible number of actions needed by the first operation.\n\nThe third turn will be in the initial state, because the skewers will be turning $1$, $2$ and $3$ which is the minimum possible number of actions needed by the second operation.\n\nThe fourth turn will be in the initial state, because the skewers will be turning $2$ and $3$ which is the minimum possible number of actions needed by the third operation.\n\nThe fifth turn will be in the initial state, because the skewers will be turning $1$, $2$ and $3$ which is the minimum possible number of actions needed by the fourth operation.\n\nThe sixth turn will be in the initial state, because the skewers will be turning $2$ and $3$ which is the minimum possible number of actions needed by the fifth operation.\n\nThe seventh turn will be in the initial state, because the skewers will be turning $1$ and $2$ which is the minimum possible number of actions needed by the sixth operation.\n\nThe eighth turn will be in the initial state, because the skewers will be turning $2$ and $3$ which is the minimum possible number of actions needed by the seventh operation.\n\nThe ninth turn will be in the initial state, because the skewers will be turning $1$ and $2$ which is the minimum possible number of actions needed by the eighth operation.\n\nInput\n6 3\n\nOutput\n2\n10\n\nExplanation\n\nThe skewers are $2$, $3$ and $4$, therefore after the first turn, the skewers are turning $2$ and $3$ and $4$ \n\nThe second turn will be in the initial state, because the skewers will be turning $2$ and $3$ which is the minimum possible number of actions needed by the first operation.\n\nThe third turn will be in the initial state, because the skewers will be turning $2$ and $3$ which is the minimum possible number of actions needed by the second operation.\n\nThe fourth turn will be in the initial state, because the skewers will be turning $2$ and $3$ which is the minimum possible number of actions needed by the third operation.\n\nThe fifth turn will be in the initial state, because the skewers will be turning $1$ and $2$ which is the minimum possible number of actions needed by the fourth operation.\n\nThe sixth turn will be in the initial state, because the skewers will be turning $1$ and $2$ which is the minimum possible number of actions needed by the fifth operation.\n\nThe seventh turn will be in the initial state, because the skewers will be turning $1$ and $2$ which is the minimum possible number of actions needed by the sixth operation.\n\nThe eighth turn will be in the initial state, because the skewers will be turning $2$ and $3$ which is the minimum possible number of actions needed by the seventh operation.\n\nThe ninth turn will be in the initial state, because the skewers will be turning $1$ and $2$ which is the minimum possible number of actions needed by the eighth operation.\n\nExplanation\n\nThe skewers are $1$ and $2$ and $3$ which are not possible because the skewers are in different positions. So the number of actions needed by the first operation is $1$ and the number of actions needed by the second operation is $2$ and the number of actions needed by the third operation is $3$ and the number of actions needed by the fourth operation is $4$.\n\nThe number of actions needed by the first operation is $1$ and $2$ and $3$ which are not possible because the skewers are in different positions. So the number of actions needed by the second operation is $1$ and the number of actions needed by the third operation is $2$ and the number of actions needed by the fourth operation"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1' or solution(stdin) == '0'\n\n\n\n-----Constraints-----\n1 <= n <= 100\n\n2 <= $n$ <= 100\n\n1 <= $a$ <= $b$\n\n-----Time Limit-----\nFor each test case, print a single line containing the following:\n\nThe minimum number of operations needed to convert $n$ to a positive integer is $c$ (where c is the minimal number of operations required to make the square of the given integer $n$).\n\nNote that there are only three operations that can be done, the only operation we need is the square of some positive integer $n$.\n\"\"\"\n\nclass Solution:\n    def square(self,num):\n        return num*num\n    \n    def solve(self,n):\n        if n == 0:\n            return 0\n        elif n < 0:\n            return -1\n        elif n == 1:\n            return 1\n        else:\n            return self.solve(n*n)\n    \n    def solve1(self,n):\n        if n == 0:\n            return 0\n        elif n < 0:\n            return -1\n        else:\n            return (self.solve(n*n))**2"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == -1 or solution(input()) == 0\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\n\nassert solution(stdin) == '-1'\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0, \"Empty Input\"\nassert solution(stdin) == -1, \"Unsuccessful Input\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == -1, \"The correct answer is -1\"\n\"\"\""
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('') == -1\nassert solution('999999999') == -1\nassert solution('0') == -1\nassert solution('1') == 0\nassert solution('23') == 1\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str(input())) == \"0\"\nassert solution(str(input())) == \"1\"\nassert solution(str(input())) == \"2\"\nassert solution(str(input())) == \"3\"\nassert solution(str(input())) == \"4\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n\"\"\"\nimport math\nimport sys\nfrom collections import deque\n\nn = int(input())\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"120\"\nassert solution(stdin) == \"350\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"17\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\") == 2, \"f(3) = 2, p = [1,2,3]\"\nassert solution(\"6\") == 1, \"f(6) = 1, p = [1,3,2]\"\nassert solution(\"3\") == 4, \"f(3) = 4, p = [1,2,3]\"\nassert solution(\"6\") == 120, \"f(6) = 120, p = [1,2,3]\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 1\nassert solution(5) == 1\nassert solution(2) == 2\nassert solution(5) == 2\nassert solution(6) == 1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"9\") == \"1\"\nassert solution(\"10\") == \"1\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"120\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 1\nassert solution(3) == 2\nassert solution(6) == 120\nassert solution(3) == 2\nassert solution(6) == 120\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"2\"\nassert solution(3) == \"1\"\nassert solution(4) == \"2\"\nassert solution(5) == \"2\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"2\"\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"FANTAB\") == \"F\"\nassert solution(\"PYSOCD\") == \"A\"\nassert solution(\"ONE\") == \"O\"\nassert solution(\"TEST\") == \"A\"\nassert solution(\"QSOCD\") == \"D\"\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ABABAABCFEYUKOTTP\") == 2\nassert solution(\"AABAABCFEYUKOTTP\") == 0\nassert solution(\"ABABAABCFEYUKOTTP\") == 4\nassert solution(\"AAA\") == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 5"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"GEEKK\"), \"1\"\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 6\n'''"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"AAAAAAAAABA\") == 5\nassert solution(\"ABABB\") == 1\nassert solution(\"ABB\") == 4\nassert solution(\"ABFgJKQ\") == 3\nassert solution(\"ABFgJKQQ\") == 2\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ABBAB\"), 5\nassert solution(\"ABAB\"), 5\nassert solution(\"ABABBA\"), 7\nassert solution(\"ABABBEYUY\"), 1\nassert solution(\"ABABBABEYUY\"), 1\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABAB\"), 4\nassert solution(\"AABAB\"), 4\nassert solution(\"AAB\"), 0\nassert solution(\"ABA\"), 1\nassert solution(\"AABA\"), 2\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"GOOGLE\", \"GOOGLE\", \"GOOGLE\", \"GOOGLE\", \"GOOGLE\", \"GOOGLE\"]) == \"0\"\n\n\nInput\nABABBBACFEYUKOTT\n\nOutput\n4"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(7, [11, 5]) == \"YES\"\nassert solution(7, [3, 2, 5]) == \"NO\"\nassert solution(7, [1, 2, 3, 4, 5]) == \"YES\"\nassert solution(2, [4]) == \"YES\"\nassert solution(2, [5]) == \"NO\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'YES', \"solution failed\""
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 7 11 5\") == \"YES\"\nassert solution(\"7 3 2 5\") == \"NO\"\n\n\n\"\"\"\n\nfrom sys import stdin\nfrom itertools import combinations"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"YES\", \"1 1\"\nassert solution(\"1 1 3\") == \"NO\", \"1 1 3\"\nassert solution(\"5 5 6\") == \"YES\", \"5 5 6\"\nassert solution(\"5 5 5 5\") == \"YES\", \"5 5 5 5\"\nassert solution(\"7 2 7 3\") == \"YES\", \"7 2 7 3\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\"\"\"\n\nclass Solution:\n    def canDistribute(self, nums: List[int]) -> bool:\n        pass\n        "
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input(\"Yes\")) == \"YES\"\nassert solution(input(\"No\")) == \"NO\""
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4\") == \"YES\"\nassert solution(\"4 4 5\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"11 7 5\") == \"YES\"\nassert solution(\"11 3 2 5\") == \"NO\"\n\nassert solution(\"3 1 1\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\nassert solution(\"1 5 1\") == \"YES\""
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 63\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '653'\nassert solution(stdin) == '31'\nassert solution(stdin) == '41'\nassert solution(stdin) == '451'\nassert solution(stdin) == '461'\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == 6534\nassert solution('1') == 21\nassert solution('4') == 1\nassert solution('2') == 1\nassert solution('3') == 10\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 0 1\") == \"1 3\"\nassert solution(\"2 1 0 1\") == \"1 3\"\nassert solution(\"3 1 0 1\") == \"3 0\"\nassert solution(\"4 1 0 1\") == \"3 0\"\nassert solution(\"5 1 0 1\") == \"3 0\"\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3141 592 653\") == \"653\"\nassert solution(\"5\") == \"331\"\nassert solution(\"10 21 10 21 10\") == \"334\"\nassert solution(\"21 10 21 10 21 10\") == \"334\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"653\""
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '651'\n\n\n-----Constraints-----\n1 <= N <= 10^6\n\n\n------Time Limit Exceeded------\nTime Limit: 5 seconds\nMemory Limit: 16 MB\n\n\n------Divide & Conquer-----\nApproach: Break ties and cut in half\n\"\"\""
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == answer\nprint(answer)"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '653 733'\nassert solution(stdin) == '31 41'\nassert solution(stdin) == '651'\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4666\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()), -1\n\n\n\"\"\"\n// This is the idea of a program, that uses python to implement the sequence of operations and the input of the program\n// is the following sequence of operations:\n\n//   1. if b_1 > b_2:\n//       b_2 := b_1 + b_1\n//   2. if b_1 < b_2:\n//       b_1 := b_1 + b_2\n//   3. if b_1 = b_2:\n//       return b_1\n//   4. if b_1 = b_2:\n//       return b_2\n//   5. otherwise:\n//       return -1\n\n// If we want to perform the sequence of operations that will get the same value, then\n// we need to write a function solution(a_1, a_2,..., a_{n}) that returns the minimum number of variables\n// m such that those variables can help you perform the described sequence of operations.\n\n// You need to take a sequence of operations as input. It is a sequence of operations where each operation has two inputs.\n// For the first operation, we have b_1. For the second operation, we have b_2. The sequence of operations will be broken down into\n// n operations.\n// The operation n is the position of the operation in the sequence.\n\n// e.g. the sequence of operations of b_1, b_2, and b_1 and b_2, are:\n//\n// 1. b_1 = 1; b_2 = 1, b_1 + b_2 = 1, b_1 + b_1 = 2, b_1 + b_2 = 3, b_1 + b_2 = 4\n// 2. b_1 = 2; b_2 = 3, b_1 + b_2 = 1, b_1 + b_2 = 2, b_1 + b_2 = 4\n// 3. b_1 = 2; b_2 = 4, b_1 + b_2 = 2, b_1 + b_2 = 4, b_1 + b_2 = 8\n// 4. b_1 = 4, b_2 = 8, b_1 + b_2 = 8, b_1 + b_2 = 8, b_1 + b_2 = 8\n// 5. b_1 = 4, b_2 = 8, b_1 + b_2 = 8, b_1 + b_2 = 8, b_1 + b_2 = 8\n//\n// n = 2\n// e.g. sequence of operations of b_1, b_2, and b_1 and b_2, are:\n//\n// 1. b_1 = 1; b_2 = 1, b_1 + b_1 = 1, b_1 + b_1 = 1, b_1 + b_1 = 2, b_1 + b_2 = 3, b_1 + b_2 = 4\n// 2. b_1 = 2; b_2 = 3, b_1 + b_2 = 1, b_1 + b_2 = 2, b_1 + b_2 = 3, b_1 + b_2 = 4\n// 3. b_1 = 2; b_2 = 4, b_1 + b_2 = 2, b_1 + b_2 = 4, b_1 + b_2 = 4\n// 4. b_1 = 4, b_2 = 8, b_1 + b_2 = 8, b_1 + b_2 = 8, b_1 + b_2 = 8\n// 5. b_1 = 4, b_2 = 8, b_1 + b_2 = 8, b_1 + b_2 = 8, b_1 + b_2 = 8\n//\n// The sequence of operations n is used to perform n operations.\n// For n = 1, a_1 = 1, a_2 = 2,..., a_{n - 1} = n.\n// For n = 2, a_1 = 2, a_2 = 2,..., a_{n - 1} = n.\n// For n = 3, a_1 = 3, a_2 = 3,..., a_{n - 1} = n.\n// For n = 4, a_1 = 4, a_2 = 4,..., a_{n - 1} = n.\n// For n = 5, a_1 = 4, a_2 = 4,..., a_{n - 1} = n.\n//\n// The minimum number of variables m is determined by the following relation:\n//\n// a_{i} = a_i + 1 for i = 1,..., m.\n//\n// In the case of n = 1, the minimum number of variables m is determined by the following relation:\n//\n// a_{i} = a_i + 1 for i = 1,..., m, for m = i - 1.\n//\n// In the case of n = 2, the minimum number of variables m is determined by the following relation:\n//\n// a_{i} = a_i + 1 for i = 1,..., m, for m = i - 1.\n//\n// In the case of n = 3, the minimum number of variables m is determined by the following relation:\n//\n// a_{i} = a_i + 1 for i = 1,..., m, for m = i - 1.\n//\n// In the case of n = 4, the minimum number of variables m is determined by the following relation:\n//\n// a_{i} = a_i + 1 for i = 1,..., m, for m = i - 1.\n//\n// In the case of n = 5, the minimum number of variables m is determined by the following relation:\n//\n// a_{i} = a_i + 1 for i = 1,..., m, for m = i - 1.\n//\n// For example, if we want to get 3 variables m, then we will have:\n//\n// n = 3\n// a_1 = 3, a_2 = 3, a_1 + a_2 = 3, a_1 + a_2 = 3, a_1 + a_2 = 6, a_1 + a_2 = 6, a_1 + a_2 = 9\n//\n// The sequence of operations will be broken down into n operations.\n//\n// The sequence of operations will be used as input for the next operation.\n\n// e.g. for n = 5, a_1 = 3, a_2 = 3, a_1 + a_2 = 3, a_1 + a_2 = 6, a_1 + a_2 = 6, a"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"-1\"\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n1 <= n <= 10^9\n\n1 <= a_i <= 10^9\n\n1 <= a_j <= 10^9\n\n1 <= b_i, b_j <= 10^9\n\n1 <= m <= 10^9\n\n1 <= k <= 10^9\n\n-1 <= x <= m\n\nThe constraints are all possible.\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1 or solution(stdin) == 1, 'error'\n\"\"\""
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 2 3 6 8\", \"3 6 5\"]) == 3\nassert solution([\"1 3 5 6 9\", \"1 4 8 9 11\"]) == 2\nassert solution([\"1 5 8 9 2\", \"1 3 5 9 4\"]) == -1\n\"\"\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 6 8\") == \"2\"\nassert solution(\"3 4 5 6 10 18\") == \"3\"\nassert solution(\"6 7 6 5 10 18\") == \"3\"\n\n### NOT SOLUTION"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 6 8\") == 2\nassert solution(\"3 4 5\") == 3\nassert solution(\"6 7 8 9 10 18\") == -1\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '-1'"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n        \"2\"\n    ) == \"Bob\"\n\"\"\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4 3 1 1\"\n) == \"Bob\"\n\nassert solution(\n    \"4 3 1 4\"\n) == \"Alice\"\n\nassert solution(\n    \"4 3 4\"\n) == \"Alice\"\n\nassert solution(\n    \"4 3 2\"\n) == \"Alice\"\n\nassert solution(\n    \"4 3 2 1\"\n) == \"Bob\"\n\n\n-----Constraints-----\n1 <= n <= 50\n0 <= a_i <= 50\nn!= 0\n\"\"\"\n\nimport math"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"Alice\"\nassert solution(\"4\") == \"Bob\"\nassert solution(\"5\") == \"Alice\"\nassert solution(\"10\") == \"Alice\"\nassert solution(\"50\") == \"Bob\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 'Alice'\nassert solution(1) == 'Bob'\nassert solution(2) == 'Alice'\nassert solution(3) == 'Alice'\nassert solution(4) == 'Alice'\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(solution()) == 'Bob'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"Bob\"\nassert solution(\"8\") == \"Alice\"\nassert solution(\"2\") == \"Alice\"\n\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n\n-----Constraints-----\n\n1 <= a_i <= 50\n\n\n-----Constraints-----\n\n1 <= n <= 100\n2 <= a_1, a_2 <= 50\n\n\n------Coding Rules------"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"6 7 2 1\") == \"Bob\"\nassert solution(\"4 3 1 1\") == \"Alice\"\nassert solution(\"2 3 1 1\") == \"Alice\"\nassert solution(\"1 3 1 1\") == \"Bob\""
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == \"Bob\", \"zero exit\"\nassert solution(1) == \"Alice\", \"one exit\"\n\n\n\n\"\"\"\nclass Solution:\n    def solution(self, n, a):\n        result = []\n        def move(start, end, n):\n            if start == end:\n                result.append(n)\n                return\n            for i in range(start, end+1):\n                if n - a[i] >= 0:\n                    n -= a[i]\n                    move(i+1, end, n)\n                    n += a[i]\n        move(1, n, a[0])\n        return''.join(map(str, result))\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(solution) == \"Alice\" or \"Bob\"\nassert solution(solution) == \"Alice\"\nassert solution(solution) == \"Alice\"\nassert solution(solution) == \"Bob\"\nassert solution(solution) == \"Alice\"\n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4 3') == 'Alice'\n\n\n\"\"\"\nn = int(input())\na_list = [int(i) for i in input().split()]\nb_list = [int(i) for i in input().split()]\na_list.sort()\nb_list.sort()\nresult = 0\nfor i in a_list:\n    for j in b_list:\n        if i+j == n:\n            result += 1\nprint(result)\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\nassert solution(\"5\") == \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n\n-----Constraints-----\n\n1 <= n <= 10^4\na_1, a_2,..., a_{n} are non-negative integers\n1 <= x <= 10^9\n\nExample 1:\n\nInput\n\n4\n1 3 1 2\n\nOutput\n\nYES\n\nExample 2:\n\nInput\n\n4\n1 2 3 4 5\n\nOutput\n\nNO\n\nExample 3:\n\nInput\n\n1\n1 2 3 4 5\n\nOutput\n\nNO\n\nExample 4:\n\nInput\n\n1\n2\n3\n\nOutput\n\nNO\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"111000\") == \"NO\"\nassert solution(\"1123\") == \"YES\"\nassert solution(\"111000\") == \"YES\"\nassert solution(\"1123\") == \"NO\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, [1, 3, 3, 2, 1]) == \"YES\"\n\nassert solution(5, [1, 2, 3, 4, 5]) == \"NO\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 a_1, a_2,..., a_{n} \u2264 10^9\n\nExample\n\nInput\n\n2\n1 3 4 5\n\nOutput\n\nYES\n\nInput\n\n5\n1 2 3 4 5\n\nOutput\n\nNO\n\n\n\"\"\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n\n\"\"\"\n\nimport sys\n\nn = int(sys.stdin.readline())\nnumbers = list(map(int, sys.stdin.readline().rstrip().split()))\nresult = True\n\nfor i in range(len(numbers) - 2):\n    for j in range(i + 1, len(numbers) - 1):\n        if numbers[i] + numbers[j] == numbers[j + 1] - numbers[i] + 1:\n            result = False\n            break"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == \"NO\"\nassert solution(10) == \"YES\"\nassert solution(0) == \"NO\"\nassert solution(1) == \"NO\"\nassert solution(5) == \"YES\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\n----Medium-----"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['a', 'a', 'a', 'a', 'a']) == '1'\nassert solution(['abab', 'abaab', 'aaabb', 'aabaab', 'aaaaaab', 'aaaaaaaab']) == '4'\nassert solution(['abab', 'baab', 'aabaab', 'abaab', 'aaaaaab', 'aaaaaaaab']) == '4'\nassert solution(['aaabb', 'aaaabba', 'aaaaaaaab', 'aaaaabaab']) == '2'\nassert solution(['aaabba', 'aaabbb', 'aaaaaabb', 'aaaaabbb']) == '2'\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"ababa\") == 2\nassert solution(\"abababababababab\") == 2\nassert solution(\"aabb\") == 0\nassert solution(\"abcabcabc\") == 0\nassert solution(\"ababababababababababababababab\") == 0\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 2, \"Not correct\"\nassert solution(3) == 2, \"Not correct\"\nassert solution(4) == 1, \"Not correct\"\nassert solution(2) == 1, \"Not correct\"\nassert solution(0) == 0, \"Not correct\"\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, \"ababa\"), \"5, 00\"\nassert solution(5, \"ababbaa\"), \"5, 00\"\nassert solution(5, \"ababaabb\"), \"5, 00\"\nassert solution(5, \"aabbbab\"), \"5, 00\"\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 2\nassert solution(6) == 2\nassert solution(6) == 0\nassert solution(0) == 0\nassert solution(7) == 0\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, ['ababa', 'ab', 'aba', 'ba']) == 2\nassert solution(5, ['aaaa', 'a', 'aaaa', 'aaaa', 'aa']) == 0\nassert solution(5, ['aab', 'aba', 'ba', 'a']) == 0\nassert solution(5, ['a', 'a', 'a', 'a', 'a']) == 0\nassert solution(5, ['a', 'aa', 'ab', 'ba', 'ab']) == 2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == 2, \"s is incorrect\"\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aabab\"), \"2\"\nassert solution(\"aab\"), \"0\"\nassert solution(\"\"), \"\"\nassert solution(\"aaa\") == \"0\""
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin=\n    \"4 2\"\n) == 2\nassert solution(\n    stdin=\n    \"8 5\"\n) == 3\nassert solution(\n    stdin=\n    \"8 5\"\n) == 3\nassert solution(\n    stdin=\n    \"8 5\"\n) == 1\nassert solution(\n    stdin=\n    \"8 5\"\n) == 0\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\n\nclass Solution:\n    def minTime(self, n: int, a: int) -> int:\n        \n        def dfs(n, a):\n            if a == n:\n                return 1\n            \n            if n % 2 == 0:\n                return n - a + 1\n            \n            else:\n                return n - a - 1\n        \n        return min(dfs(n, a), dfs(n + 1, a))\n\nclass Solution:\n    def minTime(self, n: int, a: int) -> int:\n        \n        if a > n:\n            return 0\n        \n        if n % 2 == 0:\n            return a\n        \n        return a - n + 1\n\n\"\"\"\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 5, \"Invalid input\"\nassert solution(input()) == 3, \"Invalid input\"\nassert solution(input()) == 2, \"Invalid input\"\nassert solution(input()) == 1, \"Invalid input\"\nassert solution(input()) == 2, \"Invalid input\"\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n\nassert solution(input) == \"3\"\n\nassert solution(input) == \"2\"\n\n\n-----Constraints-----\n\n1 \u2264 stdin.length \u2264 10^5\n1 \u2264 stdin[i] \u2264 10^5\n\n-----Time Limit-----\n\nO(n log n)\n\nO(n)\n\n\n-----Usage-----\nThe following iterative function is used:"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\nassert solution(\"\"\"1 9\"\"\") == 2\nassert solution(\"\"\"1 8\"\"\") == 0\nassert solution(\"\"\"1 7\"\"\") == 2\nassert solution(\"\"\"1 6\"\"\") == 0\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"8 5\") == \"3\"\nassert solution(\"8 4\") == \"3\"\nassert solution(\"8 4 2\") == \"3\"\nassert solution(\"8 6\") == \"5\"\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"3\"\nassert solution(\"6 1\") == \"3\"\nassert solution(\"8 7\") == \"3\"\nassert solution(\"10 20\") == \"5\"\nassert solution(\"1011\") == \"1\"\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nprint(stdin)\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"YES\"\nassert solution(\"3 1\") == \"NO\"\nassert solution(\"4 1\") == \"NO\"\nassert solution(\"4 1\") == \"YES\"\nassert solution(\"5 1\") == \"YES\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 2 2 1\") == \"YES\"\nassert solution(\"1 1\") == \"NO\"\nassert solution(\"1 3\") == \"YES\"\nassert solution(\"1 1 2 3 2\") == \"NO\"\nassert solution(\"1 1 2 3 4 5\") == \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3') == 'YES'\nassert solution('5 2') == 'NO'"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2\") == \"NO\"\nassert solution(\"3 3 3\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\n\n\n\"\"\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"3 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 2^5\n1 <= stdin[i] <= 2^5\n1 <= k_1, k_2,..., k_{m} <= 2^m\n\nExample 2:\n\nInput\n5 3\n5 5\n5 3\n5 5\n\nOutput\nNO\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\nSample Input\n5 2\n1 1 2 2 1\n1 2\n\nSample Output\nYES\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\", \"5\", \"2\", \"4\", \"3\"]) == \"Friendship is magic!^^\"\nassert solution([\"1\", \"1\", \"2\", \"2\"]) == \"Friendship is magic!^^\"\nassert solution([\"1\", \"1\", \"3\", \"3\"]) == \"Friendship is magic!^^\"\nassert solution([\"1\", \"2\", \"3\", \"3\"]) == \"Friendship is magic!^^\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5\") == \"Mishka\"\nassert solution(\"2\") == \"Chris\"\nassert solution(\"3\") == \"Friendship\"\nassert solution(\"4\") == \"Friendship\"\nassert solution(\"1\") == \"Friendship\"\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Mishka\"\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Friendship is magic!^^\""
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('10 3' == 'Friendship is magic!') == 'Friendship is magic!'\nassert solution('10 1' == 'Friendship is magic!') == 'Friendship is magic!'\nassert solution('10 5' == 'Friendship is magic!') == 'Friendship is magic!'\nassert solution('10 3' == 'Friendship is magic!') == 'Friendship is magic!'\nassert solution('10 1' == 'Friendship is magic!') == 'Friendship is magic!'\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\u20183\u2019) == \u2018Friendship is magic!^^\u2019\nassert solution(\u20182\u2019) == \u2018Chris\u2019\nassert solution(\u20186\u2019) == \u2018Mishka\u2019\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3') == 'Friendship is magic!^^'\nassert solution('2') == 'Chris'\nassert solution('4') == 'Friendship is magic!^^'\nassert solution('3') == 'Friendship is magic!^^'\nassert solution('1') == 'Friendship is magic!^^'\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Friendship is magic!^^\"\nassert solution(input()) == \"Chris\"\nassert solution(input()) == \"Friendship is magic!^^\"\nassert solution(input()) == \"Friendship is magic!^^\"\nassert solution(input()) == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Mishka\"\n\nassert solution(stdin) == \"Chris\"\n\nassert solution(stdin) == \"Friendship is magic!\"\n\nassert solution(stdin) == \"Friendship is magic!\"\n\nassert solution(stdin) == \"Friendship is magic!\""
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Mishka\"\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Friendship is magic!\"\nassert solution(stdin) == \"Friendship is magic!\"\nassert solution(stdin) == \"Friendship is magic!\""
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nInput\n1\n1\n1\n1\n2\n\nOutput\nYES\nInput\n2\n1*1\n1\n\nOutput\nNO\n\"\"\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"YES\"\nassert solution(\"1 9\") == \"YES\"\nassert solution(\"1 2 9\") == \"YES\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"NO\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"NO\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\n\nprint(\"Test passed!\")\n\n### More tests ###\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"2 4\") == \"NO\"\n\n\n[output]\nYES\n\"\"\""
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\""
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 3\\n111\\n1*1\\n111\\n1*1\\n111\\n\") == \"YES\", \"FAILED\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"5\") == \"15\"\nassert solution(\"4\") == \"19\"\nassert solution(\"3\") == \"12\"\nassert solution(\"4\") == \"12\"\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"68\") == \"3\"\nassert solution(\"67\") == \"0\"\nassert solution(\"73\") == \"9\"\nassert solution(\"6\") == \"6\"\nassert solution(\"5\") == \"4\"\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\n>>> import doctest\n>>> doctest.testmod()\n\n(0, 0)\n(1, 1)\n(2, 2)\n(3, 3)\n(4, 4)\n(5, 5)\n(6, 6)\n(7, 7)\n(8, 8)\n(9, 9)\n(10, 10)\n(11, 11)\n(12, 12)\n(13, 13)\n(14, 14)\n(15, 15)\n(16, 16)\n(17, 17)\n(18, 18)\n(19, 19)\n(20, 20)\n(21, 21)\n(22, 22)\n(23, 23)\n(24, 24)\n(25, 25)\n(26, 26)\n(27, 27)\n(28, 28)\n(29, 29)\n(30, 30)\n(31, 31)\n(32, 32)\n(33, 33)\n(34, 34)\n(35, 35)\n(36, 36)\n(37, 37)\n(38, 38)\n(39, 39)\n(40, 40)\n(41, 41)\n(42, 42)\n(43, 43)\n(44, 44)\n(45, 45)\n(46, 46)\n(47, 47)\n(48, 48)\n(49, 49)\n(50, 50)\n(51, 51)\n(52, 52)\n(53, 53)\n(54, 54)\n(55, 55)\n(56, 56)\n(57, 57)\n(58, 58)\n(59, 59)\n(60, 60)\n(61, 61)\n(62, 62)\n(63, 63)\n(64, 64)\n(65, 65)\n(66, 66)\n(67, 67)\n(68, 68)\n(69, 69)\n(70, 70)\n(71, 71)\n(72, 72)\n(73, 73)\n(74, 74)\n(75, 75)\n(76, 76)\n(77, 77)\n(78, 78)\n(79, 79)\n(80, 80)\n(81, 81)\n(82, 82)\n(83, 83)\n(84, 84)\n(85, 85)\n(86, 86)\n(87, 87)\n(88, 88)\n(89, 89)\n(90, 90)\n(91, 91)\n(92, 92)\n(93, 93)\n(94, 94)\n(95, 95)\n(96, 96)\n(97, 97)\n(98, 98)\n(99, 99)\n(100, 100)\n(101, 101)\n(102, 102)\n(103, 103)\n(104, 104)\n(105, 105)\n(106, 106)\n(107, 107)\n(108, 108)\n(109, 109)\n(110, 110)\n(111, 111)\n(112, 112)\n(113, 113)\n(114, 114)\n(115, 115)\n(116, 116)\n(117, 117)\n(118, 118)\n(119, 119)\n(120, 120)\n(121, 121)\n(122, 122)\n(123, 123)\n(124, 124)\n(125, 125)\n(126, 126)\n(127, 127)\n(128, 128)\n(129, 129)\n(130, 130)\n(131, 131)\n(132, 132)\n(133, 133)\n(134, 134)\n(135, 135)\n(136, 136)\n(137, 137)\n(138, 138)\n(139, 139)\n(140, 140)\n(141, 141)\n(142, 142)\n(143, 143)\n(144, 144)\n(145, 145)\n(146, 146)\n(147, 147)\n(148, 148)\n(149, 149)\n(150, 150)\n(151, 151)\n(152, 152)\n(153, 153)\n(154, 154)\n(155, 155)\n(156, 156)\n(157, 157)\n(158, 158)\n(159, 159)\n(160, 160)\n(161, 161)\n(162, 162)\n(163, 163)\n(164, 164)\n(165, 165)\n(166, 166)\n(167, 167)\n(168, 168)\n(169, 169)\n(170, 170)\n(171, 171)\n(172, 172)\n(173, 173)\n(174, 174)\n(175, 175)\n(176, 176)\n(177, 177)\n(178, 178)\n(179, 179)\n(180, 180)\n(181, 181)\n(182, 182)\n(183, 183)\n(184, 184)\n(185, 185)\n(186, 186)\n(187, 187)\n(188, 188)\n(189, 189)\n(190, 190)\n(191, 191)\n(192, 192)\n(193, 193)\n(194, 194)\n(195, 195)\n(196, 196)\n(197, 197)\n(198, 198)\n(199, 199)\n(200, 200)\n(201, 201)\n(202, 202)\n(203, 203)\n(204, 204)\n(205, 205)\n(206, 206)\n(207, 207)\n(208, 208)\n(209, 209)\n(210, 210)\n(211, 211)\n(212, 212)\n(213, 213)\n(214, 214)\n(215, 215)\n(216, 216)\n(217, 217)\n(218, 218)\n(219, 219)\n(220, 220)\n(221, 221)\n(222, 222)\n(223, 223)\n(224, 224)\n(225, 225)\n(226, 226)\n(227, 227)\n(228, 228)\n(229, 229)\n(230, 230)\n(231, 231)\n(232, 232)\n(233, 233)\n(234, 234)\n(235, 235)\n(236, 236)"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"68\") == 3\nassert solution(\"45\") == 4\nassert solution(\"35\") == 3\nassert solution(\"27\") == 3\nassert solution(\"26\") == 3\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n-----Constraints-----\n1 \u2264 n \u2264 10^18."
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n\"\"\""
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('73') == '3'\nassert solution('600') == '3'\nassert solution('999') == '3'\nassert solution('0123456789') == '5'\n\n-----Constraints-----\n\n1 <= n <= 10^9\n\nSample Input\n\n72\n\nSample Output\n\n3\n\n\n\"\"\""
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nassert solution(\"2613\") == 3\nassert solution(\"3900\") == 4\nassert solution(\"8850\") == 4\nassert solution(\"24301\") == 4\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"-o-o--\") == \"YES\"\nassert solution(\"-o---\") == \"NO\"\nassert solution(\"-o---o-\") == \"NO\"\nassert solution(\"o-o--\") == \"YES\""
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 'YES'\nassert solution(inp) == 'NO'"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"o-o--\") == \"YES\"\nassert solution(\"-o-o--\") == \"NO\"\nassert solution(\"ooo\") == \"YES\"\nassert solution(\"---o---\") == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"ooo\") == \"YES\"\nassert solution(\"ooo-\") == \"YES\"\nassert solution(\"-o---\") == \"NO\"\nassert solution(\"-o----\") == \"NO\"\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---o-') == 'YES'\nassert solution('-o---o-o') == 'NO'"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('ooo') == 'YES'\nassert solution('--') == 'NO'\nassert solution('-o---') == 'NO'\nassert solution('-o--') == 'YES'"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('-o-o--') == 'YES'\nassert solution('-o---') == 'NO'\n"
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"-o-o-\") == \"YES\", \"broken\"\nassert solution(\"-o---\") == \"NO\", \"broken\"\nassert solution(\"ooo\") == \"YES\", \"broken\"\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 6 2\") == 2\nassert solution(\"3 10 3\") == 4\nassert solution(\"3 6 1\") == 3\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        return str(int(stdin)//2)"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 0\nassert solution(1) == 2\nassert solution(2) == 3\nassert solution(3) == 0\nassert solution(4) == 4\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 2 2\"\n    ) == \"3\"\n\nassert solution(\n    \"3 3 3\"\n    ) == \"3\"\n\nassert solution(\n    \"3 2 3\"\n    ) == \"3\"\n\nassert solution(\n    \"3 3 3\"\n    ) == \"3\""
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"0\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\n++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++\n++++++"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin),'solution([3,2,3,1])'\nassert solution(stdin),'solution([3,2,3,1,1,1])'\nassert solution(stdin),'solution([3,2,3,1,1,1,1,1,1,1,1,1,1])'\nassert solution(stdin),'solution([3,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])'\nassert solution(stdin),'solution([3,2,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])'\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 2') == '2'\nassert solution('1 3 2') == '3'\nassert solution('1 4 2') == '3'\nassert solution('1 5 2') == '3'\nassert solution('1 6 2') == '3'\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\n\n\nInput\n5 2 1000\n1 2 1 0 0\n0 0 0 0\n\nOutput\n0\nassert solution(stdin) == '0'\n\n\n>>> \n= RESTART: C:/Users/DELL/Desktop/Algorithm/Assignment/05_solution.py\nInput\n5 2 1000\n1 2 1 0 0\n0 0 0 0\n\nOutput\n0\nassert solution(stdin) == '0'\n\n\n= RESTART: C:/Users/DELL/Desktop/Algorithm/Assignment/05_solution.py\nInput\n5 2 1000\n1 2 1 0 0\n0 0 0 0\n\nOutput\n10\nassert solution(stdin) == '10'\n\n\n= RESTART: C:/Users/DELL/Desktop/Algorithm/Assignment/05_solution.py\nInput\n5 2 1000\n1 2 1 0 0\n0 0 0 0\n\nOutput\n0\nassert solution(stdin) == '0'\n\n\n= RESTART: C:/Users/DELL/Desktop/Algorithm/Assignment/05_solution.py\nInput\n5 2 1000\n1 2 1 0 0\n0 0 0 0\n\nOutput\n5\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n\n\n-----Constraints-----\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6\") == \"0\"\nassert solution(\"-1 1 1 1 1\") == \"0\"\nassert solution(\"-1 3\") == \"0\"\nassert solution(\"0 0 0 0 0 0\") == \"0\"\nassert solution(\"1 1 1\") == \"0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12\n'''\n\nimport sys\n\nn, m, k = map(int, sys.stdin.readline().split())\n\narr = []\n\nfor i in range(n):\n    arr.append(int(sys.stdin.readline()))"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == \"9\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == \"10\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == \"10\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == \"11\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]) == \"10\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 37\n\nInput\n6 1 5 10\n-3 4 -3 -3\n-1 2 -2 -2\n-2 -1 -1\n\nOutput\n3\n\"\"\""
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    [\n        int(stdin.strip()) for stdin in\n        open(\n            \"input.txt\",\n            \"r\").read().strip().split()\n    ]\n) == \"0\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '5'\nassert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n\nn = int(input())\nm = int(input())\nk = int(input())\na = list(map(int, input().split()))\nprint(solution(a, n, m, k))"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin\n) == \"0\"\n\nInput\n7 3 10\n2 -4 15 -3 4 8 3\n\nOutput\n0\n\nInput\n5 2 1000\n-13 -4 -9 -20 -11\n\nOutput\n12\n\nNote\nAll the numbers in a subarray must be in the range [-10^9, 10^9].\n\nExplanation\n\n-9 is not included because the number is not in the range [-10^9, 10^9].\n-4 is not included because the number is not in the range [-10^9, 10^9].\n-4 and -3 are not included because the number is not in the range [-10^9, 10^9].\n-3 is not included because the number is not in the range [-10^9, 10^9].\n-3 and -2 are not included because the number is not in the range [-10^9, 10^9].\n-2 is not included because the number is not in the range [-10^9, 10^9].\n-2 and -1 are not included because the number is not in the range [-10^9, 10^9].\n-1 is not included because the number is not in the range [-10^9, 10^9].\n-1 and -0 are not included because the number is not in the range [-10^9, 10^9].\n-0 is not included because the number is not in the range [-10^9, 10^9].\n-0 and -0 are not included because the number is not in the range [-10^9, 10^9].\n-0 and -1 are not included because the number is not in the range [-10^9, 10^9].\n-1 is not included because the number is not in the range [-10^9, 10^9].\n-1 and -2 are not included because the number is not in the range [-10^9, 10^9].\n-2 is not included because the number is not in the range [-10^9, 10^9].\n-2 and -3 are not included because the number is not in the range [-10^9, 10^9].\n-3 is not included because the number is not in the range [-10^9, 10^9].\n-3 and -4 are not included because the number is not in the range [-10^9, 10^9].\n-4 is not included because the number is not in the range [-10^9, 10^9].\n-4 and -5 are not included because the number is not in the range [-10^9, 10^9].\n-5 is not included because the number is not in the range [-10^9, 10^9).\n-5 and -6 are not included because the number is not in the range [-10^9, 10^9).\n-6 is not included because the number is not in the range [-10^9, 10^9).\n-6 and -7 are not included because the number is not in the range [-10^9, 10^9).\n-7 is not included because the number is not in the range [-10^9, 10^9).\n-7 and -8 are not included because the number is not in the range [-10^9, 10^9).\n-8 is not included because the number is not in the range [-10^9, 10^9).\n-8 and -9 are not included because the number is not in the range [-10^9, 10^9).\n-9 is not included because the number is not in the range [-10^9, 10^9).\n-9 and -10 are not included because the number is not in the range [-10^9, 10^9).\n-10 is not included because the number is not in the range [-10^9, 10^9).\n-10 and -11 are not included because the number is not in the range [-10^9, 10^9).\n-11 is not included because the number is not in the range [-10^9, 10^9).\n-11 and -12 are not included because the number is not in the range [-10^9, 10^9).\n-12 is not included because the number is not in the range [-10^9, 10^9).\n-12 and -13 is not included because the number is not in the range [-10^9, 10^9).\n-13 is not included because the number is not in the range [-10^9, 10^9).\n-13 and -14 is not included because the number is not in the range [-10^9, 10^9).\n-14 is not included because the number is not in the range [-10^9, 10^9).\n-14 and -15 is not included because the number is not in the range [-10^9, 10^9).\n-15 is not included because the number is not in the range [-10^9, 10^9).\n-15 and -16 are not included because the number is not in the range [-10^9, 10^9).\n-16 is not included because the number is not in the range [-10^9, 10^9).\n-16 and -17 are not included because the number is not in the range [-10^9, 10^9).\n-17 is not included because the number is not in the range [-10^9, 10^9).\n-17 and -18 are not included because the number is not in the range [-10^9, 10^9).\n-18 is not included because the number is not in the range [-10^9, 10^9).\n-18 and -19 are not included because the number is not in the range [-10^9, 10^9).\n-19 is not included because the number is not in the range [-10^9, 10^9).\n-19 and -20 are not included because the number is not in the range [-10^9, 10^9).\n-20 is not included because the number is not in the range [-10^9, 10^9).\n-20 and -21 are not included because the number is not in the range [-10^9, 10^9).\n-21 is not included because the number is not in the range [-10^9, 10^"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 10\") == \"1 0 10\"\nassert solution(\"0 1\") == \"0 1 10\"\nassert solution(\"1 1\") == \"0 0 1\"\nassert solution(\"10 10\") == \"1 1 0\"\nassert solution(\"10 0\") == \"0 0 1\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '1 1\\n0 0\\n1 0\\n0 1\\n0 9'\n\n\n-----My Solution-----\n\ntest = [\n    (1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 1\") == \"0 1\"\nassert solution(\"1 0\") == \"1 0\"\nassert solution(\"0 10\") == \"1 10\"\nassert solution(\"10 0\") == \"10 0\"\nassert solution(\"0 10\") == \"0 10\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 10\") == \"0 0 1 10 0 1 0\"\nassert solution(\"1 10\") == \"1 1 1 10 1 0 0 1\"\nassert solution(\"0 0 0\") == \"0 0 0 0\"\nassert solution(\"0 0\") == \"0 0 0\"\nassert solution(\"10\") == \"0 0 0\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(solution()) == '0 1'\nassert solution(solution('n=4;0;n=8;0;n=4;0;n=8;0;n=4;0;n=8;0;n=4;0;n=8')) == '0 1'\nassert solution(solution('n=4;1;n=8;0;n=4;0;n=8;0;n=4;0;n=8;0;n=4;0;n=8')) == '0 1'\nassert solution(solution('0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0;0"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 10\") == \"1 1 10\"\nassert solution(\"0 10\") == \"0 1 10\"\nassert solution(\"1 10\") == \"1 1 10\"\nassert solution(\"0 10\") == \"0 1 10\"\nassert solution(\"0 10\") == \"0 10\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 1\") == \"0 1\"\nassert solution(\"0 10\") == \"0 10\"\nassert solution(\"0 0\") == \"0 0\"\nassert solution(\"0 1\") == \"1 1\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '1 1'\n\n\n-----Tags-----\n\nTags\n\n-----Constraints-----\n\n1 <= n, m <= 10^4\n\n0 <= p_1, p_2, p_3, p_4 <= 10^5\n\n------Memory Use------\n\nO(n * m)\n\nO(n * m)\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1 1 0 1 0 1\"\nassert solution(input()) == \"0 1\"\nassert solution(input()) == \"1 0\"\nassert solution(input()) == \"0 9\"\nassert solution(input()) == \"0 9\"\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"19\") == \"19\"\nassert solution(\"1423\") == \"1423\"\nassert solution(\"1234\") == \"1234\"\nassert solution(\"002000\") == \"002000\"\nassert solution(\"123456\") == \"123456\"\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('003512') == '30021'\nassert solution('199966633300') == '3036366999'\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 3036366999\n\n\n-----Constraints-----\n1 <= stdin.length <= 50\n1 <= n <= 9\n\nSince the number of digits in the substring is not smaller than the number of digits in the number n, the answer is a smaller number than the original n.\n\n'''\nclass Solution:\n    def minIntegerForPassCheck(self, stdin: str) -> str:\n        n = stdin.strip().split()[1]\n        n = int(''.join(sorted(n)[:len(n) - 1]))\n        m = n\n        if not n % 10:\n            return str(n)\n        else:\n            return str(n).replace('0', '1').replace('9', '3')\n        \n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '30021'"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"021\",\n    \"This string contains leading zeroes.\"\n    ) == \"30021\"\n    pass\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 30021\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '30021', 'Error in solution.'\nassert solution(input()) == '000001', 'Error in solution.'\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('29') == '30021'\nassert solution('800000001') == '30021'\nassert solution('53000000') == '30021'\nassert solution('0') == '30021'\nassert solution('23') == '30021'\n"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 30021"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 30021\n\"\"\""
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 2\") == \"Correct\"\nassert solution(\"1 2 1 1\") == \"Incorrect\"\nassert solution(\"2 1 1 2\") == \"Incorrect\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"2 2 2 2\") == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Correct'\nassert solution(stdin) == 'Incorrect'\n\n\"\"\""
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 1 1 2') == 'Correct'\nassert solution('3 1 1 3') == 'Incorrect'\nassert solution('2 1 1 3') == 'Incorrect'\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Correct\"\nassert solution(input()) == \"Incorrect\"\nassert solution(input()) == \"Incorrect\"\n\"\"\""
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'Correct'\nassert solution(stdin) == 'Incorrect'\nassert solution(stdin) == 'Correct'\nassert solution(stdin) == 'Incorrect'\nassert solution(stdin) == 'Correct'\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 1 1 2\") == \"Correct\"\nassert solution(\"2 1 1 3\") == \"Incorrect\"\nassert solution(\"3 1 1 3\") == \"Incorrect\"\nassert solution(\"3 1 1 2\") == \"Correct\"\nassert solution(\"3 1 1 1\") == \"Incorrect\"\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Correct\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100, 1 \u2264 m \u2264 100, 1 \u2264 min < max \u2264 100,\n1 \u2264 t_{i} \u2264 100\n\nassert 1 \u2264 t_{i} \u2264 100\n\n\n-----Time Limit: 10 seconds per test set----------------------------------------------------\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 'Correct'\n\nassert solution(inp) == 'Incorrect'\n\nassert solution(inp) == 'Incorrect'"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 1 1 2') == 'Correct'\nassert solution('2 1 1 3') == 'Incorrect'\nassert solution('3 1 1 3') == 'Incorrect'\n\nInput\n\n2 1 1 3\n1\n\nOutput\n\nIncorrect\n\nInput\n\n2 1 1 3\n2\n\nOutput\n\nCorrect\n\nInput\n\n2 1 1 3\n2\n\nOutput\n\nCorrect\n\nInput\n\n3 1 1 3\n3\n\nOutput\n\nCorrect\n\nInput\n\n2 1 1 3\n4\n\nOutput\n\nIncorrect\n\nInput\n\n2 1 1 3\n4\n\nOutput\n\nIncorrect\n\nInput\n\n2 1 1 3\n1\n\nOutput\n\nIncorrect\n\nInput\n\n3 1 1 3\n4\n\nOutput\n\nIncorrect\n\nInput\n\n2 1 1 3\n5\n\nOutput\n\nIncorrect\n\nInput\n\n3 1 1 3\n3\n\nOutput\n\nIncorrect\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 m \u2264 100\n0 \u2264 t_i \u2264 100\n1 \u2264 min \u2264 max \u2264 100\n\nExample\n\nExample 1:\n\nInput\n\n2 1 1 3\n2\n\nOutput\n\nIncorrect\n\n\nExample 2:\n\nInput\n\n2 1 1 3\n1\n\nOutput\n\nIncorrect\n\n\nExample 3:\n\nInput\n\n2 1 1 3\n3\n\nOutput\n\nIncorrect\n\n\nExample 4:\n\nInput\n\n2 1 1 3\n1\n\nOutput\n\nIncorrect\n\n\nExample 5:\n\nInput\n\n2 1 1 3\n3\n\nOutput\n\nIncorrect\n\n\n-----Time Complexity-----\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\n\nExample 1:\n\nInput\n\n2 1 1 3\n2\n\nOutput\n\nIncorrect\n\n\nExample 2:\n\nInput\n\n2 1 1 3\n1\n\nOutput\n\nIncorrect\n\n\nExample 3:\n\nInput\n\n2 1 1 3\n1\n\nOutput\n\nIncorrect\n\n\nExample 4:\n\nInput\n\n2 1 1 3\n3\n\nOutput\n\nIncorrect\n\n\nExample 5:\n\nInput\n\n2 1 1 3\n2\n\nOutput\n\nIncorrect\n\n\nExample 6:\n\nInput\n\n2 1 1 3\n1\n\nOutput\n\nIncorrect\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 m \u2264 100\n0 \u2264 t_i \u2264 100\n1 \u2264 min \u2264 max \u2264 100\n\nTime Limit: 5 seconds\n\nExample:\n\nInput:\n\n2 1 1 3\n1\n\nOutput:\n\nIncorrect\n\n\nInput:\n\n2 1 1 3\n2\n\nOutput:\n\nIncorrect\n\n\nInput:\n\n2 1 1 3\n1\n\nOutput:\n\nIncorrect\n\n\nInput:\n\n2 1 1 3\n3\n\nOutput:\n\nIncorrect\n\n\n-----Time Complexity-----\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\n\nO(n) because we do n + m + 1 cycles. Each cycle has n steps, and in each step the process was started with a new temperature.\n\nO(n) because we do n + m +"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"5\") == \"0\"\nassert solution(\"4\") == \"3\"\nassert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == '0'\nassert solution(2) == '0'\nassert solution(3) == '1'\nassert solution(4) == '1'\nassert solution(5) == '1'\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 5\nassert solution(2) == 5\nassert solution(3) == 60\nassert solution(4) == 120\nassert solution(5) == 200\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 0\nassert solution(5) == 5\nassert solution(5) == 5\nassert solution(5) == 5\nassert solution(5) == 5\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 0\nassert solution(5) == 0\nassert solution(5) == 1\nassert solution(5) == 2\nassert solution(5) == 3\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"0\"\nassert solution(\"0\") == \"0\"\nassert solution(\"5\") == \"0\"\nassert solution(\"1\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4\") == 5\nassert solution(\"10\") == 5\nassert solution(\"100\") == 25\nassert solution(\"1000\") == 10\nassert solution(\"10000\") == 25\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5') == 5\nassert solution('5') == 5\nassert solution('5') == 5\nassert solution('5') == 5\nassert solution('5') == 5\n"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 5\nassert solution(5) == 0\nassert solution(10) == 0\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n0 <= stdin.length <= 10^4\n0 <= m <= 10^4\n\n\n-----Side Effects-----\nYou can use additional memory to store the result, in case the function has some complicated code.\n\n\"\"\"\nimport sys"
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input()\n) == \"2 2\"\nassert solution(\n    input()\n) == \"2 3 3\"\nassert solution(\n    input()\n) == \"3 3 3\"\nassert solution(\n    input()\n) == \"3 2\"\nassert solution(\n    input()\n) == \"3 3\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin) == '2 2 3'\n\nassert solution(sys.stdin) == '3 3 3'\n\n\n-----Note-----\n\nThis is the best way to solve the problem.\n\nThe time complexity of the solution is O(n^3).\nThe space complexity of the solution is O(n^3) with the space required to store the answer.\n(Dijkstra's algorithm does not work with graphs that have a cycle, so you may have to add additional nodes)\n\nNote: you may find the dijkstra's algorithm easier to use if you are going to implement a solution that does not use the original algorithm in all cases.\n\nHere are a few examples to test your solution:\n\nthe input is:\n\n3 3\n1 2 3\n1 2 5\n2 3 3\n1 3 2\n1 3 1\n\nthe output is:\n\n2 2\n2 2\n2 2\n\n3 3\n1 2 3\n1 2 5\n2 3 3\n1 3 2\n1 3 1\n\nthe input is:\n\n5 2\n1 3 2\n1 3 1\n1 2 1\n1 2 2\n1 3 3\n1 2 3\n1 3 3\n2 3 3\n2 3 2\n2 3 1\n2 3 2\n2 3 3\n\nthe output is:\n\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n\n2 3\n1 2 3\n1 2 5\n1 3 2\n1 3 1\n1 2 1\n1 2 2\n1 3 3\n1 2 3\n1 3 3\n1 2 3\n1 3 3\n\nNotice that we will not reach the beginning of the graph, so the length of the path must be 0.\n\"\"\""
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"2 3 1\"\nassert solution(input()) == \"2 2 1\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 2) == \"3\"\nassert solution(1, 4) == \"3\"\nassert solution(0, 0) == \"3\"\nassert solution(0, 1) == \"3\"\nassert solution(0, 2) == \"3\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 2 2') == '3 2 2'\nassert solution('4 5 3') == '4 5 3'\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 3 3'\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2 3 2'\nassert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 2 1'\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"1 1 2 3\"\nassert solution(stdin) == \"1 2 3 1\"\nassert solution(stdin) == \"1 3 3 1\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\n\nassert solution(stdin) == \"2 3 3\"\nassert solution(stdin) == \"2 3 3\"\nassert solution(stdin) == \"1 3 3\"\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 1 2\") == \"3\"\nassert solution(\"1 3 2 1\") == \"3\"\nassert solution(\"2 3 1 1\") == \"3\"\nassert solution(\"1 2 1 1\") == \"2\"\nassert solution(\"1 4 4 4\") == \"3\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin) == '1'\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"1\"\nassert solution(\"0 4 0\") == \"0\"\nassert solution(\"1 3 4\") == \"2\"\nassert solution(\"0 1 0\") == \"0\"\nassert solution(\"1 1 0\") == \"0\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4') == 0\nassert solution('1') == 1\nassert solution('0') == 0\n\n--------------------------------------------------\n\"\"\"\n\nclass Solution:\n    def findPosition(self, n: int, x: int) -> int:\n        return x"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, 2) == 1\nassert solution(1, 1) == 0\nassert solution(1, 0) == 2\nassert solution(1, 2) == 0\nassert solution(2, 2) == 2\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\\n2\") == 0\nassert solution(\"1\\n2\") == 1\nassert solution(\"1\\n3\") == 2\nassert solution(\"1\\n4\") == 0\nassert solution(\"2\") == 0\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 0 0 0 0\") == 0, \"0\"\nassert solution(\"0 0 1 0 0\") == 0, \"0\"\nassert solution(\"0 1 0 0 0\") == 0, \"0\"\nassert solution(\"0 1 0 0 1\") == 1, \"1\"\nassert solution(\"0 0 0 0 0\") == 0, \"0\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 2) == 1\nassert solution(1, 2, 3) == 2\nassert solution(2, 1, 0) == 0\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\",\"0\",\"3\",\"3\",\"5\"]) == \"YES\"\nassert solution([\"4\",\"3\",\"0\",\"0\",\"0\"]) == \"NO\""
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nclass Solution:\n    def isSquare(self, n: int) -> bool:\n        return self.isSquare_rec(n)\n    \n    def isSquare_rec(self, n):\n        \n        if n == 0:\n            return True\n        \n        if n < 0 or n > 9999:\n            return False\n        \n        if n < 7:\n            return self.isSquare_rec(n+1)\n        \n        # check left\n        left = self.isSquare_rec(n-1)\n        if not left:\n            return False\n        \n        # check upper\n        upper = self.isSquare_rec(n-1)\n        if not upper:\n            return False\n        \n        # check right\n        right = self.isSquare_rec(n-1)\n        if not right:\n            return False\n        \n        return left and upper and right"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input(\"Enter 5 lines of code: \")) == \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == \"YES\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0 2 3\") == \"YES\"\nassert solution(\"0 3 3 5\") == \"NO\"\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"YES\""
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == 'YES'\nassert solution(inp) == 'NO'\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 3\n\n\n------Note-------\n\nIn the first example we get a solution for 24 in the second example,\nbecause n = 10 is not bigger than 24.\nThe output is 3.\n\nIn the second example we get a solution for 10 in the first example,\nbecause n = 7 is not bigger than 10.\nThe output is 1.\n\n\"\"\""
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n\n\"\"\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 9\") == \"0\"\nassert solution(\"30 20\") == \"0\"\nassert solution(\"10 9 7\") == \"1\"\nassert solution(\"10 9\") == \"0\"\nassert solution(\"10 9\") == \"1\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 1\") == \"2\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"4 4\") == \"2\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 15\n0 <= n <= 10^18\n0 <= s <= 10^18\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Worst Case Time Limit-----\n\nO(n)\n\n\n-----Best Case Time Limit-----\n\nO(n)\n\n\"\"\""
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, ['0 0','0 1','1 1','1 -1','2 2','2 -1','1 3','1 3','2 -3','2 3']) == 'YES'\nassert solution(5, ['0 0','1 1','2 2','3 3','4 -1','5 -1','6 -1','7 -1','8 -1']) == 'NO'"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 'YES'\nassert solution(5) == 'NO'\nassert solution(5) == 'NO'\nassert solution(5) == 'NO'"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0, 0) == 'NO'\nassert solution(5, -1) == 'YES'\nassert solution(5, 2) == 'NO'\nassert solution(5, 3) == 'YES'\nassert solution(5, 4) == 'YES'\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 0) == 'NO'\nassert solution(0, 1) == 'NO'\nassert solution(0, 2) == 'NO'\nassert solution(1, 3) == 'YES'\nassert solution(1, 4) == 'YES'\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"3 2 3\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5', ['0', '0', '0', '0', '0']) == 'YES'\nassert solution('5', ['0', '1', '1', '0', '0']) == 'NO'\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, 0, 1, 1, 2, 3, 4, 5) == 'NO'\nassert solution(5, 0, 1, 1, 2, 3, 4, 6) == 'NO'\nassert solution(5, 0, 1, 2, 2, 1, 1, 2, 4, 3) == 'NO'\nassert solution(5, 0, 1, 2, 2, 1, 2, 3, 1) == 'NO'\nassert solution(5, 0, 1, 2, 2, 1, 2, 3, 1) == 'YES'\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == \"NO\"\n\n\n-----My Approach-----\n\nclass Solution:\n    def solve(self, stdin):\n        pass\n\n### Below is code that is similar to the above ###\n"
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5') == 'YES'\nassert solution('5') == 'NO'"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 1\"), \"Memory\"\nassert solution(\"2 12 3 1\"), \"Lexa\"\nassert solution(\"0 0 1 2\"), \"1\"\nassert solution(\"1 0 1 2\"), \"2\"\nassert solution(\"1 1 1 2\"), \"0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1 2 2 1) == 31\nassert solution(2 12 3 1) == 0\nassert solution(2 12 3 2) == 1\nassert solution(1 2 1 2) == 0\nassert solution(1 1 1 2) == 1\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 2 1\") == \"31\"\nassert solution(\"1 1 1 2\") == \"0\"\nassert solution(\"2 12 3 1\") == \"63\"\nassert solution(\"2 13 1 1\") == \"25\"\nassert solution(\"1 1 1 1\") == \"7\"\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1 1 1 2\") == \"6\"\nassert solution(\"1 1 1 2\") == \"31\"\nassert solution(\"2 1 2 1\") == \"0\"\nassert solution(\"2 1 2 2\") == \"2\"\nassert solution(\"2 1 2 3\") == \"1\"\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\"]) == \"1\"\nassert solution([\"1\", \"3\"]) == \"0\"\nassert solution([\"2\", \"2\"]) == \"0\"\nassert solution([\"3\", \"2\"]) == \"0\"\nassert solution([\"1\", \"2\", \"2\"]) == \"0\"\n"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"Memory and Lexa start with, the number k, and the number of turns respectively.\"\nassert solution(\"1 1 1 1 1\") == 3, \"Memory wins.\"\nassert solution(\"1 1 1 2\") == 0, \"Lexa wins.\"\nassert solution(\"2 2 2 2\") == 2, \"Lexa wins.\"\nassert solution
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 2\") == \"6\"\nassert solution(\"2 12 3 1\") == \"31\"\nassert solution(\"3\") == \"0\"\nassert solution(\"1 1 1 2 1 1 1\") == \"63\""
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"\\\"\\\"\n\\\"\\\"\\\"\n\n{\n    \"memory\":\n    {\n        \"0\": {\n            \"1\": {\n                \"1\": {\n                    \"2\": {\n                        \"2\": {\n                            \"3\": {\n                                \"2\": {\n                                    \"4\": {\n                                        \"2\": {\n                                            \"3\": {\n                                                \"3\": {\n                                                    \"4\": {\n                                                        \"2\": {\n                                                            \"5\": {\n                                                                \"6\": {\n                                                                    \"7\": {\n                                                                        \"8\": {\n                                                                        \"9\": {\n                                                                        \"10\": {\n                                                                        \"11\": {\n                                                                        \"12\": {\n                                                                        \"13\": {\n                                                                        \"14\": {\n                                                                        \"15\": {\n                                                                        \"16\": {\n                                                                        \"17\": {\n                                                                        \"18\": {\n                                                                        \"19\": {\n                                                                        \"20\": {\n                                                                        \"21\": {\n                                                                        \"22\": {\n                                                                        \"23\": {\n                                                                        \"24\": {\n                                                                        \"25\": {\n                                                                        \"26\": {\n                                                                        \"27\": {\n                                                                        \"28\": {\n                                                                        \"29\": {\n                                                                        \"30\": {\n                                                                        \"31\": {\n                                                                        \"32\": {\n                                                                        \"33\": {\n                                                                        \"34\": {\n                                                                        \"35\": {\n                                                                        \"36\": {\n                                                                        \"37\": {\n                                                                        \"38\": {\n                                                                        \"39\": {\n                                                                        \"40\": {\n                                                                        \"41\": {\n                                                                        \"42\": {\n                                                                        \"43\": {\n                                                                        \"44\": {\n                                                                        \"45\": {\n                                                                        \"46\": {\n                                                                        \"47\": {\n                                                                        \"48\": {\n                                                                        \"49\": {\n                                                                        \"50\": {\n                                                                        \"51\": {\n                                                                        \"52\": {\n                                                                        \"53\": {\n                                                                        \"54\": {\n                                                                        \"55\": {\n                                                                        \"56\": {\n                                                                        \"57\": {\n                                                                        \"58\": {\n                                                                        \"59\": {\n                                                                        \"60\": {\n                                                                        \"61\": {\n                                                                        \"62\": {\n                                                                        \"63\": {\n                                                                        \"64\": {\n                                                                        \"65\": {\n                                                                        \"66\": {\n                                                                        \"67\": {\n                                                                        \"68\": {\n                                                                        \"69\": {\n                                                                        \"70\": {\n                                                                        \"71\": {\n                                                                        \"72\": {\n                                                                        \"73\": {\n                                                                        \"74\": {\n                                                                        \"75\": {\n                                                                        \"76\": {\n                                                                        \"77\": {\n                                                                        \"78\": {\n                                                                        \"79\": {\n                                                                        \"80\": {\n                                                                        \"81\": {\n                                                                        \"82\": {\n                                                                        \"83\": {\n                                                                        \"84\": {\n                                                                        \"85\": {\n                                                                        \"86\": {\n                                                                        \"87\": {\n                                                                        \"88\": {\n                                                                        \"89\": {\n                                                                        \"90\": {\n                                                                        \"91\": {\n                                                                        \"92\": {\n                                                                        \"93\": {\n                                                                        \"94\": {\n                                                                        \"95\": {\n                                                                        \"96\": {\n                                                                        \"97\": {\n                                                                        \"98\": {\n                                                                        \"99\": {\n                                                                        \"100\": {\n                                                                    \"101\": {\n                                                                    \"102\": {\n                                                                    \"103\": {\n                                                                    \"104\": {\n                                                                    \"105\": {\n                                                                    \"106\": {\n                                                                    \"107\": {\n                                                                    \"108\": {\n                                                                    \"109\": {\n                                                                    \"110\": {\n                                                                    \"111\": {\n                                                                    \"112\": {\n                                                                    \"113\": {\n                                                                    \"114\": {\n                                                                    \"115\": {\n                                                                    \"116\": {\n                                                                    \"117\": {\n                                                                    \"118\": {\n                                                                    \"119\": {\n                                                                    \"120\": {\n                                                                    \"121\": {\n                                                                    \"122\": {\n                                                                    \"123\": {\n                                                                    \"124\": {\n                                                                    \"125\": {\n                                                                    \"126\": {\n                                                                    \"127\": {\n                                                                    \"128\": {\n                                                                    \"129\": {\n                                                                    \"130\": {\n                                                                    \"131\": {\n                                                                    \"132\": {\n                                                                    \"133\": {\n                                                                    \"134\": {\n                                                                    \"135\": {\n                                                                    \"136\": {\n                                                                    \"137\": {\n                                                                    \"138\": {\n                                        "
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"31\""
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\") == 0\nassert solution(\"1\") == 6\nassert solution(\"1 1 1 2\") == 31\nassert solution(\"2\") == 0\nassert solution(\"2 12 3 1\") == 31\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1 3\"\nassert solution(\"2 5\") == \"2 6\"\nassert solution(\"2 4\") == \"2 3\"\nassert solution(\"1 3\") == \"1 2\"\nassert solution(\"2 2\") == \"1 2\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"230\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"11\"\n\nassert solution(stdin) == \"12\""
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"0\"\nassert solution(\"4 2\") == \"0\"\nassert solution(\"0 2\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"2 2\") == \"1\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"2 2\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"4 2\") == \"2\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"230\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"942477.796077000\"\nassert solution(inp) == \"3983.539484752\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"942477.796077000\"\n\n\nExample:\n\nInput\n2\n100 30\n40 10\n\nOutput\n942477.796077000\n\nExplanation:\n\nIn our example, the optimal way is to choose the cake number 1.\n\nIn the second example, the way to get the maximum volume is to use cakes with indices 1, 2 and 4.\nThe total volume of the cake is 942477.796077000.\n\n\nConstraints:\n\n1 \u2264 stdin.length \u2264 10^3\n\n0 \u2264 stdin[i] \u2264 10^5\n\n----Examples-----\n\nInput\n3\n100 10\n50 1\n\nOutput\n3\n0.3905007894\n\nExplanation:\n\nIn our case, we choose the cake number 3.\n\nIn the second example, the total volume of the cake is 0.3905007894.\n\n\n------Constraints------\n\n1 \u2264 stdin.length \u2264 10^5\n1 \u2264 stdin[i] \u2264 10^5\n2 \u2264 r_{i} <= h_{i} <= 10^5\n1 \u2264 stdin[i] \u2264 stdin[i] \u2264 10^5\n\n\"\"\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"952477.796077000\"\nassert solution(stdin) == \"3983.539484752\"\nassert solution(stdin) == \"952477.796077000\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"942477.796077000\"\nassert solution(inp) == \"3983.539484752\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"5\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == \"4\"\nassert solution(4) == \"942477.796077000\"\n\nassert solution(4) == \"3983.539484752\"\nassert solution(8) == \"6323.162162162\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == answer\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 942477.796077000\nassert solution(stdin) == 3983.539484752\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"942477.796077000\"\n\nassert solution(inp) == \"3983.539484752\"\n\nassert solution(inp) == \"942477.796077000\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3 4 1 2 3 2\") == \"942477.796077000\"\nassert solution(\"2 4 1 1 1\") == \"2988.9616782080\"\nassert solution(\"2 2\") == \"2988.9616782080\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '942477.796077000'\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"solution does not return a valid solution.\"\n\nassert solution(stdin), \"solution does not return a valid solution.\"\n\nassert solution(stdin), \"solution does not return a valid solution.\"\n\nassert solution(stdin), \"solution does not return a valid solution.\"\n\nassert solution(stdin), \"solution does not return a valid solution.\""
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, {3, 1, 2, 4}) == 2\nassert solution(4, {2, 3, 4}) == 1\nassert solution(5, {2, 3, 4}) == 2\nassert solution(4, {1, 3, 5}) == 2\nassert solution(5, {1, 2, 3, 4}) == 2\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\n-----Done-----\n'''"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nInput\n5 5\n3 1 2 2 4\n\nOutput\n2\n\nInput\n4 5\n2 3 4 5\n\nOutput\n2\n\n\n-----Time complexity-----\n\nO(2^n)\n\nTime complexity of solution is $O(n * k)$, with $k$ as the restriction on slices. The time complexity of the recursive function is $O(n * k)$.\n\n\n\n-----Space Complexity-----\n\nO(2^n)\n\nSpace complexity of solution is $O(n)$, with $n$ as the restriction on heights. The space complexity of the recursive function is $O(n)$.\n\n\n-----Algorithm-----\n\nIf the tower heights are not strictly increasing, then we can choose one tower and remove some top cubes.\n\nFor each tower, we can either remove some top cubes from the tower or put their cubes on the tower. To be on the right side, we put the new cubes on the top.\n\nAfter this process is finished, we check the new heights of the cubes, and if any of them are not strictly increasing, then we can change the height of a new tower.\n\nWe can either remove the top cubes of the top tower from the tower or put the new cubes on the top.\n\nIn the first step, we go down $2^{n - 1}$, and in the second step we go down $2^{n - 1}$, and so on.\n\n\n[Image]\n\nAny height can be replaced by any number of cubes (of the same height).\n\nTo make any height in the range $h_i \\le h_{i + 1}$ possible, we need to make some amount of cubes. To do this, we need to find the cubes whose heights are strictly increasing.\n\nTo do this, we need to find a tower with a height equal to height $h_i$ that contains at least one cube.\n\nWe will only need to do this if $h_i$ is not strictly increasing.\n\n[Input]\n\nThe first line contains two space separated integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $n \\le k \\le 10^9$) \u2014 the number of towers and the restriction on slices, respectively.\n\nThe second line contains $n$ space separated integers $h_1, h_2, \\dots, h_n$ ($1 \\le h_i \\le 2 \\cdot 10^5$) \u2014 the initial heights of towers.\n\nConstraints\n\n[Output]\n\nPrint one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.\n\n\n[Example]\n\nInput\n\n4 5\n3 1 2 2 4\n\nOutput\n\n3\n\n\n[Note]\n\nThe number of height is strictly increasing.\nThe number of height must be $k \\le n \\le 4^k$.\n\n[Constraints]\n\n1 <= n <= 100\n1 <= k <= 10^4\n\n[Time]\n\nO(n * k)\n\nO(n)\n\n\n[Space]\n\nO(n)\n\n[Algorithm]\n\n1. Find the tower heights that are strictly increasing.\n2. If their heights are not strictly increasing, remove some cubes from the tower.\n3. If the tower heights are strictly increasing, put the new cubes on the top.\n4. To be on the right side, we put the new cubes on the top.\n\n[Output]\n\nPrint one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.\n\n\n[Input]\n\nThe first line contains two space separated integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $n \\le k \\le 10^9$) \u2014 the number of towers and the restriction on slices, respectively.\n\nThe second line contains $n$ space separated integers $h_1, h_2, \\dots, h_n$ ($1 \\le h_i \\le 2 \\cdot 10^5$) \u2014 the initial heights of towers.\n\nConstraints\n\n1 <= n <= 10^4\n1 <= k <= 10^4\n\n[Output]\n\nPrint one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.\n\n\n[Constraints]\n\n1 <= n <= 10^4\n1 <= k <= 10^4\n\n[Time]\n\nO(n * k)\n\nO(n)\n\n\n[Space]\n\nO(n)\n\n[Algorithm]\n\n1. Find the tower heights that are strictly increasing.\n2. If their heights are not strictly increasing, remove some cubes from the tower.\n3. If the tower heights are strictly increasing, put the new cubes on the top.\n4. To be on the right side, we put the new cubes on the top.\n\n[Output]\n\nPrint one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.\n\n\n[Input]\n\nThe first line contains two space separated integers $n$ and $k$ ($1 \\le n \\le 2 \\cdot 10^5$, $n \\le k \\le 10^9$) \u2014 the number of towers and the restriction on slices, respectively.\n\nThe second line contains $n$ space separated integers $h_1, h_2, \\dots, h_n$ ($1 \\le h_i \\le 2 \\cdot 10^5$) \u2014 the initial heights of towers.\n\nConstraints\n\n1 <= n <= 10^4\n1 <= k <= 10^4\n\n[Output]\n\nPrint one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.\n\n\n[Constraints]\n\n1 <= n <= 10^4\n1 <= k <= 10^4\n\n[Time]\n\nO(n * k)\n\nO(n)\n\n\n[Space]\n\nO(n)\n\n[Algorithm]\n\n1. Find the tower heights that are strictly increasing.\n2. If their heights are not strictly increasing, remove some cubes from the tower.\n3. If the tower heights are strictly increasing, put the new cubes on the top.\n4. To be on the right side, we put the new cubes on the top.\n\n[Output]\n\nPrint one integer \u2014 the minimum number of good slices you have to do to make all towers have the same heigth.\n\n\n[Constraints]\n\n1 <= n <= 10^4\n1 <= k <= 10^4\n\n[Time]\n\nO(n * k)\n\nO(n)\n\n\n[Space]\n\nO(n)\n\n[Algorithm]\n\n1. Find the tower heights that are strictly increasing.\n2. If their heights are not strictly increasing, remove some cubes from the tower.\n3. If the tower heights are strictly increasing, put the new cubes on the top.\n4. To be on the right side, we put the new cubes"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"2\"\n\n-----Constraints-----\n1 <= stdin.length <= 2 * 10^4\n1 <= k <= 2 * 10^9\n\n-----Time Complexity-----\nO(n^2)\n\n-----Space Complexity-----\nO(n)\n\nclass Solution:\n    def solution(self, n, k):\n        for i in range(1, n + 1):\n            for j in range(1, n + 1):\n                if self.helper(i, j, k) == 2:\n                    return i\n        return -1\n\n    def helper(self, i, j, k):\n        cost = 0\n        for j_index in range(j, j + k):\n            h_i = self.heights[i][j_index]\n            if h_i >= k:\n                cost += k - h_i\n            else:\n                cost += h_i\n        return cost\n\"\"\"\n\nclass Solution:\n    def solution(self, n, k):\n        from math import log\n        d = 1\n        while d ** 2 <= k:\n            d += 1\n        return d ** 2\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"4 5\"\n) == \"2\"\n\n\"\"\""
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Done-----\n'''"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100,000\n1 \u2264 k \u2264 10^4\n\n------Time complexity-------\nBest case: O(NlogN)\nAverage case: O(NlogN)\n\n\n------Space complexity-------\nBest case: O(N)\nAverage case: O(N)\n\n\n-----Submissions-----\nSolved using python.\n\nRuntime: 24 ms, faster than 98.47% of Python3 online submissions for Tower of Hanoi.\nMemory Usage: 16.8 MB, less than 19.21% of Python3 online submissions for Tower of Hanoi.\n\"\"\"\n\nclass Solution:\n    def tower(self, n, k, h):\n        if k == 1:\n            return [n-1, h]\n        elif k == 2:\n            return [n-1, h+1]\n        else:\n            return [n-1, h+1] + self.tower(n, k-1, h+1)\n\n    def solution(self, stdin: str) -> str:\n        n, k = map(int, stdin.split())\n        heights = map(int, stdin.split())\n        nums = self.tower(n, k, 1)\n        result =''.join([str(n) for n in nums])\n        return result\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5,\n1 \u2264 k \u2264 10^9\n\nTime Limit: 1 second\n\n=====Solution====="
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\n\n\n\n-----DO NOT TOUCH THE BELOW CODE -----\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 -2 10 -1 4\") == 5, \"Fail\"\nassert solution(\"8 \") == 0, \"Fail\"\nassert solution(\"3 2 5 -30 -30 6 9\") == 6, \"Fail\"\nassert solution(\"0\") == 0, \"Fail\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, [2, 5, 1, 4, 3]) == \"10\"\nassert solution(4, [4, 4, -1, -2, -5, -2]) == \"0\"\nassert solution(8, [1, -1, -1, -1, -1, -1]) == \"0\"\nassert solution(10, [-1, -1, -1, -1, -1, -1]) == \"0\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3 10 -2 6 9\") == \"6\"\nassert solution(\"8 5 -2 10 -1 4\") == \"0\"\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('{2,3,5,1,2}') == '5'\nassert solution('{5,1,2}') == '5'\nassert solution('{2,3,5,1}') == '0'\nassert solution('{2,3,5,1,2}') == '0'\nassert solution('{1,1,3,3}') == '0'\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 -2 10 -1 4') == '6'\nassert solution('5 -2 10 -1 4') == '10'\nassert solution('5 -2 10 -1 4') == '0'\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '6'\nassert solution(input) == '6'"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2, 2) == 'NO'\nassert solution(4, 2) == 'NO'\nassert solution(1, 2) == 'YES'\nassert solution(4, 3) == 'NO'\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4 3\") == \"YES\"\nassert solution(\"3 4 3\") == \"NO\"\nassert solution(\"4 2 3\") == \"NO\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"1 1 1\") == \"NO\"\n\n\nprint(solution(input()))\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n-----Constraints-----\n1 <= k_1, k_2, k_3 <= 1500\n1 <= x_1, x_2, x_3 <= 500000\n\nTime Limit: 1 sec\nMemory Limit: 16 MB\n\nExample 1:\n\nInput:\n3 2\n\nOutput:\nYES\n\nExplanation:\nMishka can choose x_1 = 1, x_2 = 2, x_3 = 1.\n\nExample 2:\n\nInput:\n1 2\n\nOutput:\nNO\n\nExplanation:\nThe first garland will be lit during seconds 1, 2, and the second will be lit during seconds 3, 4, and the third will be lit during seconds 5, 6, and so on.\n\nExample 3:\n\nInput:\n5 7\n\nOutput:\nNO\n\nExplanation:\nMishka can choose x_1 = 1, x_2 = 2, x_3 = 1.\n\nExample 4:\n\nInput:\n10 10\n\nOutput:\nYES\n\nExplanation:\nMishka can choose x_1 = 1, x_2 = 2, x_3 = 1.\n\nExample 5:\n\nInput:\n3 3\n\nOutput:\nNO\n\nExplanation:\nMishka can choose x_1 = 1, x_2 = 2, x_3 = 1.\n\nExample 6:\n\nInput:\n1 1\n\nOutput:\nNO\n\nExplanation:\nMishka can choose x_1 = 1, x_2 = 2, x_3 = 1.\n\nExample 7:\n\nInput:\n1 1 2\n\nOutput:\nYES\n\nExplanation:\nMishka can choose x_1 = 1, x_2 = 2, and x_3 = 1.\n\nConstraints:\n\n1 <= k_1, k_2, k_3 <= 1500\n1 <= x_1, x_2, x_3 <= 500000\n\nTime Limit: 1 sec\nMemory Limit: 16 MB\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 3\") == \"YES\"\nassert solution(\"4 2 3\") == \"NO\"\nassert solution(\"4 4 2\") == \"NO\"\nassert solution(\"4 5 2\") == \"YES\""
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 'NO'\n\nassert solution(inp) == 'YES'\n\n\"\"\""
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 5\n\n\"\"\""
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('abca') == 3\nassert solution('abcddcba') == 4\nassert solution('a') == 1\nassert solution('ab') == 2\nassert solution('abacada') == 1\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 6\nassert solution(stdin) == 10\nassert solution(stdin) == 17\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, \"abaca\") == 3\nassert solution(8, \"abcddcba\") == 4\nassert solution(0, \"\") == 0\n\n\n-----Constraints-----\n0 <= n <= 500\n0 <= s.length <= 30\ns consists of lowercase Latin letters.\n\n=====Problem Set 1====="
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(8) == 3\nassert solution(9) == 3\nassert solution(4) == 3\nassert solution(6) == 2\nassert solution(6) == 2\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 3"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 4\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"abaca\"]) == 1\nassert solution([\"abaca\"]) == 4\nassert solution([\"abcda\"]) == 3\nassert solution([\"abcdd\"]) == 4\nassert solution([\"abcddca\"]) == 4\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == 3\nassert solution(s) == 5\nassert solution(s) == 7\nassert solution(s) == 4\nassert solution(s) == 2\n"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, \"abaca\") == 3\nassert solution(8, \"abcddcba\") == 3\nassert solution(7, \"abcddcba\") == 0\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 3\n\n\"\"\""
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\"\"\""
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '3'\nassert solution(input().split()) == '1'\nassert solution(input().split()) == '4'\nassert solution(input().split()) == '5'\nassert solution(input().split()) == '5'\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution == 3\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"0\"\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin=\n    input\n    )\n\n\"\"\""
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Team 1\"\n\nassert solution(stdin) == \"Team 2\"\n\nassert solution(stdin) == \"Draw\"\n\n------Remarks-----\n\nThe challenge is to write a function solution(stdin) that accepts a string of the following format:\n\ni 1\ni 2\n...\ni n\nThe function will return the sequence of integers of the given string (i.e., the pattern of the input string).\n\nInput\n\ni n\nn = 5\n\nOutput\n\n[5, 3, 1, 5]\n\nConstraints\n\n1 \u2264 i \u2264 n \u2264 50.\n\n\n------Examples-----\nInput\n5\n4\n3 2 1 3\n\nOutput\n[5, 3, 1, 5]\n\nInput\n5\n5 4 2 1\n\nOutput\n[5, 3, 1, 5]\n\nInput\n\n5\n1\n2 1 2 2 1 2 2\n\nOutput\n[5, 3, 1, 5]\n\nInput\n\n1\n1\n1 1 1 1 1\n\nOutput\n[1, 1]\n\nInput\n\n5\n1\n5 1 1 1 1 1 1\n\nOutput\n[1, 1, 5, 3, 1]\n\nInput\n\n3\n3\n2 1 1 1 1\n\nOutput\n[3, 1, 1]\n\nExplanation\nThe sequence of the given string is [1, 2, 1].\nThe sequence of the given string is [1, 1, 1].\nThe sequence of the given string is [1, 1, 1].\nThe sequence of the given string is [1, 1, 1].\n\nInput\n\n1\n1\n2 1 1 1 1\n\nOutput\n[1, 2, 1, 1]\n\nInput\n\n5\n1 1 1 1 1 1 1\n\nOutput\n[5, 3, 1, 1]\n\n----36.1. (answer)\n\nExplanation\nThe sequence of the given string is [1, 2, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\n\n----36.2. (answer)\n\nExplanation\nThe sequence of the given string is [1, 2, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\n\n----36.3. (answer)\n\nExplanation\nThe sequence of the given string is [1, 2, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\n\n----36.4. (answer)\n\nExplanation\nThe sequence of the given string is [1, 2, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1]\nThe sequence of the given string is [1, 1, 1, 1"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 100\\n100 1\\n99 99\\n99 99\\n\") == \"Team 1\"\nassert solution(\n    \"3 3\\n2 2\\n1 1\\n2 2\\n\") == \"Team 2\"\nassert solution(\n    \"5 5\\n5 5\\n5 5\\n5 5\\n\") == \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Team 2\"\nassert solution(stdin) == \"Team 1\"\nassert solution(stdin) == \"Team 1\"\n\n\n-----Constraints-----\n0 <= stdin.length <= 10^4\nstdin contains three space-separated integers a_{1},b_{1}, and b_{2} where 0 \u2264 a_{1},b_{1} \u2264 100, 0 \u2264 b_{2} \u2264 100.\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 5 2 1 2 2\") == \"Team 1\"\nassert solution(\"6 9 7 5 7 3\") == \"Team 2\"\nassert solution(\"6 3 6 3 2 3 3\") == \"Draw\"\nassert solution(\"6 2 3 3 3 3 3 3 3 3\") == \"Team 1\"\nassert solution(\"5 7 1 6 2\") == \"Team 2\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2 3 2 2\") == \"Team 2\"\nassert solution(\"3 3 2 2 2\") == \"Team 1\"\nassert solution(\"3 3 3 3 3\") == \"Draw\"\nassert solution(\"3 3 3 3 3 2\") == \"Team 2\"\nassert solution(\"3 3 3 3 3 2 1\") == \"Team 1\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 100 1 1\") == \"Team 1\"\nassert solution(\"1 2 2 2\") == \"Team 2\"\nassert solution(\"3 3 3 3\") == \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"1 100\"\"\") == \"Team 1\"\nassert solution(\"\"\"3 3 2 2\"\"\") == \"Team 2\"\nassert solution(\"\"\"1 1\"\"\") == \"Draw\"\nassert solution(\"\"\"1 1 1 1\"\"\") == \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Team 1\"\n\n-----Performance-----\n\nIn the second sample, the team can choose a different arrangement of the players as follows:\n\n1 1\n2 2\n3 3\n2 2\n\nA team can either win or draw.\n\nIn this sample, the team is guaranteed to win if the defence or attack is strictly greater than the opponent's defence and the attack is strictly greater than the opponent's defence.\n\nWhen the team plays defence, and the opponent's defence is between the minimum and maximum defence value, the team plays the ball in the defence position.\n\nWhen the team plays attack, and the opponent's attack is between the minimum and maximum attack value, the team plays the ball in the attack position.\n\nIf the ball in the defence position is inside the opponent's defence circle, then the team plays the ball in the defence position.\n\nIf the ball in the attack position is inside the opponent's attack circle, then the team plays the ball in the attack position.\n\nIf the ball is inside both balls and the team plays the ball in both positions, then the team wins.\n\nIf the ball is inside both balls and the team plays the ball in the attack position and the opponent plays the ball in the defence position, then the team loses.\n\nIn this sample, a team has played the ball at least once and it must always be at least the opponent's defence.\n\nA team must always always stay in one of the four teams to win.\n\nIn this sample, a team must always stay inside the first team's defence circle.\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n1 <= stdin[i] < 100\n\n[input]\nThe first line of the input contains an integer, the number of teams in the first team.\n\nThe second line contains four space-separated integers, a_{i} and b_{i}, describing the defence and attack skill of the i-th team.\n\nOutput\nA single line containing a single integer \u2014 the team with the highest number of wins.\n\n[output]\nA single integer \u2014 the team with the highest number of wins.\n\n\n[Example]\n\nInput\n\n10 100\n1 1\n2 2\n3 3\n2 2\n3 4\n2 3\n2 4\n2 5\n\nOutput\n\n4\nExplanation\n\nTeam 1: First team plays attack and the opponent's defence is between the minimum and maximum defence value and the ball is within the opponent's defence circle.\nTeam 2: The ball in the defence circle is inside the opponent's defence circle.\nTeam 1 wins.\n\nInput\n\n4 4\n1 1\n2 2\n3 3\n2 2\n3 4\n2 3\n2 4\n2 5\n\nOutput\n\n4\nExplanation\n\nTeam 1: First team plays attack and the opponent's defence is between the minimum and maximum defence value and the ball is inside the opponent's defence circle.\nTeam 2 wins.\n\n[1]\n\n\nclass Solution:\n    # @param A : list of list of integers\n    # @param B : integer\n    # @return a double of boolean\n\n    def check(self,A,B):\n        if len(A)>=4 and len(A)<=4 and len(A)>=4 and len(A)<=4 and len(A)>=4:\n            if B>=A[1] and B<=A[2] and B>=A[3] and B<=A[0]:\n                return True\n        return False\n\n    def solution(self,stdin: str) -> str:\n        def_c=0\n        def_a=0\n        def_b=0\n        for i in stdin:\n            if i=='1':\n                def_c+=1\n                def_a+=2\n                def_b+=3\n            if i=='2':\n                def_c+=1\n                def_a+=3\n                def_b+=2\n            if i=='3':\n                def_c+=1\n                def_a+=2\n                def_b+=3\n            if i=='4':\n                def_c+=1\n                def_a+=3\n                def_b+=2\n            if i=='0':\n                def_c+=1\n                def_a+=2\n                def_b+=3\n            if i=='1':\n                def_c+=1\n                def_a+=3\n                def_b+=2\n            if i=='2':\n                def_c+=1\n                def_a+=3\n                def_b+=2\n            if i=='3':\n                def_c+=1\n                def_a+=3\n                def_b+=2\n            if i=='4':\n                def_c+=1\n                def_a+=3\n                def_b+=2\n        if def_c==1 and def_a==2 and def_b==3 and def_c==4:\n            return \"Team 1\"\n        elif def_c==3 and def_a==2 and def_b==3 and def_c==4:\n            return \"Team 2\"\n        elif def_c==3 and def_a==2 and def_b==3 and def_c==4:\n            return \"Draw\"\n        elif def_c==2 and def_a==2 and def_b==3 and def_c==4:\n            return \"Team 1\"\n        elif def_c==4 and def_a==2 and def_b==3 and def_c==4:\n            return \"Team 2\"\n        elif def_c==4 and def_a==2 and def_b==3 and def_c==4:\n            return \"Draw\"\n\n        return \"Draw\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Team 1\"\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1 100\\n100 1\\n99 99\\n99 99\\n99 99\\n\") == \"Team 1\"\nassert solution(\n    \"3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2\\n3 3\\n2 2\\n1 1\\n2 2"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2.4'\n'''\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"2.4\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"-1 0 3\n-0 0 3\n-1 0 2\n-1 1 40\n-1 1 -1\n-0 -1\"\"\") == \"2.6\"\nassert solution(\"\"\"-1 0 3\n-0 0 3\n-1 0 2\n-1 1 40\n-1 1 -1\n-0 -1\"\"\") == \"2.1\"\nassert solution(\"\"\"-1 0 3\n-0 0 3\n-1 0 2\n-1 1 40\n-1 1 -1\n-0 -1\"\"\") == \"0.7\"\nassert solution(\"\"\"-1 0 3\n-0 0 3\n-1 0 2\n-1 1 40\n-1 1 -1\n-0 -1\"\"\") == \"1.1\"\nassert solution(\"\"\"-1 0 3\n-0 0 3\n-1 0 2\n-1 1 40\n-1 1 -1\n-0 -1\"\"\") == \"0.8\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"2.0\"\n\"\"\""
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"-1\") == \"0\"\nassert solution(\"-1 0 3\") == \"0\"\nassert solution(\"-1 1 2\") == \"0\"\nassert solution(\"-1 2 1 0\") == \"0\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2.4\"\n\n-----Sample Input-----\n4 3\n1 0 3\n1 0 2\n1 1 40\n\n-----Sample Output-----\n2.4\n\"\"\"\n\nimport math"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0 0 3 1 0 0'), '0 1'\nassert solution('0 0 3 1 1'), '0 1'\nassert solution('0 0 3 1 2'), '0 2'\nassert solution('0 0 3 3'), '0'\nassert solution('0 0 3 4'), '0'\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2.4'\nassert solution(stdin) == '2.4'\nassert solution(stdin) == '2.4'\nassert solution(stdin) == '2.4'\nassert solution(stdin) == '2.4'\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2.4\"\n\"\"\""
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\\\"1 2\\\") == \\\"3.5\\\"\nassert solution(\\\"1 1 1\\\") == \"3.0\"\nassert solution(\\\"3 1 3\\\") == \"2.0\"\nassert solution(\\\"3 1 3\\\") == \"2.0\"\nassert solution(\\\"3 1 3\\\") == \"1.5\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 'Monocarp'\nassert solution(1) == 'Bicarp'\nassert solution(3) == 'Monocarp'\nassert solution(3) == 'Bicarp'\nassert solution(1) == 'Monocarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4\"\n) == \"Bicarp\"\nassert solution(\n    \"2\"\n) == \"Monocarp\"\nassert solution(\n    \"8\"\n) == \"Monocap\"\nassert solution(\n    \"6\"\n) == \"Bicarp\"\nassert solution(\n    \"??\"\n) == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"Bicarp\"\nassert solution(input()) == \"Monocarp\"\nassert solution(input()) == \"Bicarp\"\nassert solution(input()) == \"Monocarp\"\nassert solution(input()) == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(string) == \"Bicarp\"\nassert solution(string) == \"Monocarp\"\nassert solution(string) == \"Monocarp\"\nassert solution(string) == \"Bicarp\"\nassert solution(string) == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'Bicarp'\nassert solution(input()) == 'Monocarp'\nassert solution(input()) == 'Bicap'\nassert solution(input()) == 'Bicarp'\nassert solution(input()) == 'Monocarp'\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"Bicarp\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"?\"]) == \"Monocarp\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"?\"]) == \"Bicarp\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"?\"]) == \"Monocarp\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"?\"]) == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'Monocarp'\n\n\n\n-----Constraints-----\n0 < n <= 10^5\n0 < $n$ < 2^5\n$n$ digits\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n300 L\n\n-----Submissions-----\n1298\n\n-----Alternatives-----\n1103\n\n-----Alternatives-----\n2144\n\n-----Tests-----\nTest case 1:\nInput:\n4\n0523\n\nOutput:\nBicarp\n\nTest case 2:\nInput:\n6\n??\n\nOutput:\nBicarp\n\n\"\"\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Bicap\"\nassert solution(stdin) == \"Monocarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(4, \"0523\") == \"Bicarp\"\nassert solution(4, \"??\") == \"Bicarp\"\nassert solution(4, \"8\") == \"Bicarp\"\nassert solution(4, \"\") == \"Bicarp\"\nassert solution(6, \"??\") == \"Bicarp\"\n"
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4'\n'523'\n'?054??0?'\n'??'*2\n'?'*6\n'?'*8\n), 'Bicarp'\n\nassert solution('6'\n'054??0?'\n'??'*2\n'?'*6\n'?'*8\n), 'Bicarp'\n\nassert solution('7'\n'054??0?'\n'??'*2\n'?'*6\n'?'*8\n), 'Monocarp'\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"3 3\") == \"2\"\nassert solution(\"2 5\") == \"2\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2, 6) == \"1\"\nassert solution(5, 3) == \"3\"\nassert solution(3, 2) == \"2\"\nassert solution(1, 5) == \"1\"\nassert solution(3, 3) == \"3\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\"), \"1\"\nassert solution(\"2 3\"), \"2\"\nassert solution(\"2 4\"), \"3\"\nassert solution(\"3 2\"), \"4\"\nassert solution(\"3 4\"), \"5\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\n\n\n-----Constraints-----\n1 <= n <= 100\nt \\leq n\ns_i \\leq 10^5\nd_i \\leq 10^5\n\n[input]\n\nThe first line of input contains an integer $n$ denoting the number of bus routes and a time $t$ denoting the time Serval goes to the station.\n\nThe second line contains a space-separated string $s_i$, denoting the time Serval arrives at the bus station.\n\nThe third line contains a space-separated string $d_i$, denoting the interval between two buses of this route.\n\nInput is handled by a single line of input, where the first line contains a single integer $n$, the number of bus routes and a time $t$, the second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\nInput is handled by a single line of input, where the first line contains a single integer $n$, the number of bus routes and a string $d_i$, denoting the interval between two buses of this route.\n\nOutput is handled by a single line of output, where the first line contains a single integer $n$, the number of bus routes and a string $s_i$, denoting the bus route that Serval uses to make the first bus.\n\n[output]\n\nPrint one of the strings $s_i$ and $d_i$.\n\n\n[input]\n\nThe first line contains an integer $n$ denoting the number of bus routes and a time $t$ denoting the time Serval goes to the station.\n\nThe second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\n\nThe third line contains a string $d_i$, denoting the interval between two buses of this route.\n\nInput is handled by a single line of input, where the first line contains an integer $n$, the number of bus routes and a time $t$, the second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\nInput is handled by a single line of input, where the first line contains an integer $n$, the number of bus routes and a string $d_i$, denoting the interval between two buses of this route.\n\nOutput is handled by a single line of output, where the first line contains a single integer $n$, the number of bus routes and a string $s_i$, denoting the bus route that Serval uses to make the first bus.\n\n[output]\n\nPrint one of the strings $s_i$.\n\n\n[input]\n\nThe first line contains an integer $n$ denoting the number of bus routes and a time $t$ denoting the time Serval goes to the station.\n\nThe second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\n\nThe third line contains a string $d_i$, denoting the interval between two buses of this route.\n\nInput is handled by a single line of input, where the first line contains an integer $n$, the number of bus routes and a time $t$, the second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\nInput is handled by a single line of input, where the first line contains an integer $n$, the number of bus routes and a string $d_i$, denoting the interval between two buses of this route.\n\nOutput is handled by a single line of output, where the first line contains a single integer $n$, the number of bus routes and a string $s_i$, denoting the bus route that Serval uses to make the first bus.\n\n[output]\n\nPrint one of the strings $s_i$.\n\n[constraints]\n\n1 <= n <= 100\n1\\leq t\\leq 10^5\n1\\leq s_i\\leq 10^5\n1\\leq d_i\\leq 10^5\n\n[input]\n\nThe first line contains an integer $n$ denoting the number of bus routes and a time $t$ denoting the time Serval goes to the station.\n\nThe second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\n\nThe third line contains a string $d_i$, denoting the interval between two buses of this route.\n\nInput is handled by a single line of input, where the first line contains an integer $n$, the number of bus routes and a time $t$, the second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\nInput is handled by a single line of input, where the first line contains an integer $n$, the number of bus routes and a string $d_i$, denoting the interval between two buses of this route.\n\nOutput is handled by a single line of output, where the first line contains a single integer $n$, the number of bus routes and a string $s_i$, denoting the bus route that Serval uses to make the first bus.\n\n[output]\n\nPrint one of the strings $s_i$.\n\n\n[input]\n\nThe first line contains an integer $n$ denoting the number of bus routes and a time $t$ denoting the time Serval goes to the station.\n\nThe second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\n\nThe third line contains a string $d_i$, denoting the interval between two buses of this route.\n\nInput is handled by a single line of input, where the first line contains an integer $n$, the number of bus routes and a time $t$, the second line contains a string $s_i$, denoting the time Serval arrives at the bus station.\nInput is handled by a single line of input, where the first line contains an integer $n$, the number of bus routes and a string $d_i$, denoting the interval between two buses of this route.\n\nOutput is handled by a single line of output, where the first line contains a single integer $n$, the number of bus routes and a string $s_i$, denoting the bus route that Serval uses to make the first bus.\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 6\") == \"1\"\nassert solution(\"4 4\") == \"2\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"2 5\") == \"3\"\nassert solution(\"1 6\") == \"3\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,3) == 1\nassert solution(3,2) == 5\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n5 3\n\nOutput\n14\n\nInput\n5 2\n\nOutput\n8\n\"\"\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['2', '3']) == '5'\nassert solution(['1', '3']) == '4'\nassert solution(['2', '1']) == '2'\nassert solution(['4', '1', '3']) == '1'\nassert solution(['0']) == '0'\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"12\"\nassert solution(\"3\") == \"210\"\nassert solution(\"4\") == \"42\"\nassert solution(\"5\") == \"3456\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\n>>> #Test cases\n\n>>> solution(\"3 2\")\n'1'\n\n>>> solution(\"0\")\n'1'\n\n>>> solution(\"0 1\")\n'1'\n\n>>> solution(\"12\")\n'5'\n\n>>> solution(\"1 0\")\n'0'\n\n>>> solution(\"2 0\")\n'2'\n\n>>> solution(\"1 1\")\n'1'\n\n>>> solution(\"1 2\")\n'1'\n\n>>> solution(\"1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 219 220 221 220 222 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 238 239 240 241 242 244 245 246 246 248 249 250 251 252 253 254 255 255 256 257 258 259 260 261 262 266 268 268 269 270 271 273 274 275 275 276 277 278 279 280 282 283 284 285 286 287 288 288 289 290 291 292 293 294 295 296 297 298 299 299 300 301 301 302 303 303 304 305 306 308 309 310 311 313 314 315 316 317 318 319 320 321 321 322 323 324 325 326 327 328 329 330 330 331 332 333 333 334 334 335 336 337 336 338 339 340 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341 341"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 1\"\n) == \"1\"\nassert solution(\n    \"3 2\"\n) == \"5\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"3 2\"\n) == \"5\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\u20183\u2019, \u20182\u2019) == 5\nassert solution(\u20183\u2019, \u20183\u2019) == 6\nassert solution(\u20183\u2019, \u20180\u2019) == 7\nassert solution(\u20183\u2019, \u20189\u2019) == 10\nassert solution(\u20183\u2019, \u20181\u2019) == 10\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"no\"\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    [\"*.*..\",\n    \"..*.\",\n    \"..\",\n    \".*\",\n    \".*\"]\n    ) == \"yes\"\n\n>>> solution(\n    [\"*.*..\",\n    \"..*.\",\n    \"..\",\n    \".*\",\n    \".*\"]\n    ) == \"no\"\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"yes\"\n\nassert solution(stdin) == \"no\"\n\n\n-----Sample Input-----\n\n5\n**.*.**\n\nOutput\nno\n\n-----Sample Output-----\n\nno\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"yes\""
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"yes\"\nassert solution(input()) == \"no\"\n\"\"\"\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"no\" or solution(stdin) == \"yes\"\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == \"yes\"\nassert solution(11) == \"no\"\n\nfor test in [5, 11, 14, 16]:\n    print(solution(stdin))\n\nOutput\nyes\nExplanation\n\nThere are many different ways to solve the level.\n\nAn easy example of the sequence is:\n\n.**.**.**.\n\n*****\n\na. **.**\n\nb. *\n\nc. **\n\n****\n\nd. ****\n\ne. ***\n\n*****\n\nj. *\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****\n\n*****"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(    \\\"\"\"\\n*.* * *.. \\n.* *.. *. \\n * * * * * * * \\n * * * * * * * \\n.* * * * * * \\n*.* * * * * \\n * * * * * * \\n * * * * * * \\n.* * * * * \\n.* * * * * \\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * * *\\n.* * * *"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"yes\", \"Failed.\"\n\nTest with input:\n\n4\n...*****.***.***.\n\nOutput\nyes\n\"\"\""
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution(\"**.*..*.***.\")) == \"yes\"\nassert solution(solution(\"***.*..*.***.\")) == \"no\"\nassert solution(solution(\"**.*..*.***.\")) == \"no\"\nassert solution(solution(\"*.*..*.*.\")) == \"yes\"\n\n\n---------------------\nChallenge\nTime complexity O(n)\nSpace complexity O(n)"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    {\n        \"n\": \"3\",\n        \"a\": {\n            \"i\": [3, 0, 2],\n            \"j\": [1, 1, 0],\n        },\n    }) == {\n        \"n\": \"3\",\n        \"a\": {\n            \"i\": [3, 0, 2],\n            \"j\": [1, 1, 0],\n        },\n    },\n    \"1\",\n)\n\nassert solution(\n    {\n        \"n\": \"4\",\n        \"a\": {\n            \"i\": [4, 2, 0, 0],\n            \"j\": [0, 0, 1, 0],\n        },\n    }\n) == {\n        \"n\": \"4\",\n        \"a\": {\n            \"i\": [4, 2, 0, 0],\n            \"j\": [0, 0, 1, 0],\n        },\n    },\n    \"1\",\n)\n\nassert solution(\n    {\n        \"n\": \"5\",\n        \"a\": {\n            \"i\": [5, 0, 3, 2, 0],\n            \"j\": [1, 0, 0, 0, 1],\n        },\n    }\n) == {\n        \"n\": \"5\",\n        \"a\": {\n            \"i\": [5, 0, 3, 2, 0],\n            \"j\": [1, 0, 0, 0, 1],\n        },\n    },\n    \"1\",\n)\n\nassert solution(\n    {\n        \"n\": \"6\",\n        \"a\": {\n            \"i\": [6, 0, 2, 1, 0],\n            \"j\": [1, 0, 1, 0, 0],\n        },\n    }\n) == {\n        \"n\": \"6\",\n        \"a\": {\n            \"i\": [6, 0, 2, 1, 0],\n            \"j\": [1, 0, 1, 0, 0],\n        },\n    },\n    \"1\",\n)\n\nassert solution(\n    {\n        \"n\": \"7\",\n        \"a\": {\n            \"i\": [7, 0, 3, 2, 0, 1],\n            \"j\": [0, 0, 0, 1, 1, 0],\n        },\n    }\n) == {\n        \"n\": \"7\",\n        \"a\": {\n            \"i\": [7, 0, 3, 2, 0, 1],\n            \"j\": [0, 0, 0, 1, 1, 0],\n        },\n    },\n    \"1\",\n)"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n\"\"\""
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '1'\nassert solution(inp) == '-1'\nassert solution(inp) == '-2'\nassert solution(inp) == '-3'\nassert solution(inp) == '-4'\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\n\"\"\""
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == 3, \"error\"\nassert solution(\"4\") == -1, \"error\"\nassert solution(\"4 0 2\") == 1, \"error\"\nassert solution(\"4 1 2 1\") == 1, \"error\"\nassert solution(\"4 1 2 1 3\") == 5, \"error\"\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, [3, 4, 1, 1]) == 8, \"The first solution is wrong\"\nassert solution(4, [3, 4, 1, 1]) == -1, \"The second solution is wrong\"\nassert solution(4, [3, 4, 1, 1]) == 15, \"The third solution is wrong\"\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n\"\"\""
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"9\"\nassert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"8\"\nassert solution(\"5\") == \"4\"\nassert solution(\"6\") == \"3\"\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"9\"\nassert solution(\"4\") == \"1\"\nassert solution(\"4\") == \"1 1 1 1\"\nassert solution(\"4\") == \"1 1 1 1\"\nassert solution(\"4\") == \"1 1 1 1\"\n"
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '15'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '1'\n\n\"\"\""
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(15)"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1\", \"5\"]) == \"15\"\nassert solution([\"3\", \"5\"]) == \"15\"\nassert solution([\"2\", \"3\"]) == \"5\"\nassert solution([\"4\", \"6\"]) == \"7\"\nassert solution([\"4\", \"1\"]) == \"5\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"15\"\n\nassert solution(input) == \"15\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '3 7'\nassert solution(input()) == '6 12'\nassert solution(input()) == '7 13'\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 3\nassert solution(4) == 7\nassert solution(2) == 11\nassert solution(3) == 13\nassert solution(4) == 12"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"13\"\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '7'\nassert solution(stdin) == '13'\nassert solution(stdin) == '15'\nassert solution(stdin) == '23'\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"15\"\n\n\n\"\"\""
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"6 12\"\n\nassert solution(stdin) == \"7 13\"\nassert solution(stdin) == \"7 13\"\nassert solution(stdin) == \"7 13\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 3') == 128\nassert solution('1 3') == 127\n\nassert solution('2 3') == 128\nassert solution('3 2') == 192\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"128\""
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == solution(input())"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"64\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 3\") == \"128\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"0\") == \"0\"\nassert solution(\"1 0\") == \"0\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '128'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '64'\nassert solution(stdin) == '120'"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"128\"\n\"\"\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4\\n3\\n2\\n1\") == \"25\"\nassert solution(\"4\\n3\\n2\\n1\\n4\") == \"8\"\nassert solution(\"4\\n1\\n4\\n4\\n1\") == \"2\"\nassert solution(\"1\\n1\\n1\\n1\\n1\") == \"1\"\nassert solution(\"2\\n1\\n2\\n1\\n3\") == \"2\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\",\"3\",\"3\"]) == \"128\"\nassert solution([\"3\",\"3\",\"2\"]) == \"3\"\nassert solution([\"3\",\"3\",\"2\",\"1\"]) == \"38\"\nassert solution([\"3\",\"3\",\"2\",\"1\",\"2\"]) == \"9\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '1'\nassert solution(stdin) == '5'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 2\nassert solution(9) == 4\nassert solution(3) == 3\nassert solution(9) == 6\nassert solution(100) == 1001\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2 4\"\nassert solution(input()) == \"2 4\"\nassert solution(input()) == \"1 2\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1 2\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"2 4\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5 1 7 9 8') == '2 3'\nassert solution('2 2 4 3') == '1 2'\nassert solution('2 2 4 3') == '1 2'\nassert solution('3 2') == '3'\nassert solution('3 1') == '3'\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    inp := [\n        [1, 1, 10, 9, 4, 3, 2, 1, 1, 5],\n        [5, 7, 6, 3, 2, 1, 4, 4, 2, 5],\n        [5, 2, 2, 1, 1, 6, 3, 7, 8, 4],\n        [6, 3, 2, 1, 1, 3, 4, 2, 2, 5],\n        [9, 8, 7, 4, 3, 2, 1, 1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [9, 6, 5, 4, 3, 2, 1, 1, 2, 3],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ],\n    inp := [\n        [1, 1, 10, 9, 4, 3, 2, 1, 1, 5],\n        [5, 7, 6, 3, 2, 1, 4, 4, 2, 5],\n        [5, 2, 2, 1, 1, 6, 3, 7, 8, 4],\n        [6, 3, 2, 1, 1, 3, 4, 2, 2, 5],\n        [9, 8, 7, 4, 3, 2, 1, 1, 2, 3],\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n        [9, 6, 5, 4, 3, 2, 1, 1, 2, 3],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ])\nassert not solution(inp)"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3,4,3,4,1,1,5,7) == \"2 3\"\nassert solution(4,3,1,4,1,1,5,7) == \"2 1\"\nassert solution(4,3,1,4,1,1,5,7) == \"1 2\"\nassert solution(4,3,1,4,1,1,5,7) == \"1 1\"\nassert solution(4,3,1,4,1,1,5,7) == \"1 0\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2, 0, -1, -1) == -1\nassert solution(3, 0, -1, -1) == -1\nassert solution(1, 0, -1, -1) == -1\nassert solution(1, 0, 1, 0) == -1\nassert solution(1, 1, 1, 0) == 0\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\") == \"-1 -1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 0\") == \"-1 -1\"\nassert solution(\"1 2 3 0 0 0\") == \"-1 -1\"\nassert solution(\"1 2 3 4 5 6 7 8 9 0\") == \"-1 -1\"\nassert solution(\"5 1 0 0\") == \"1 -1\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"69 96\"\nassert solution(stdin) == \"69\"\nassert solution(stdin) == \"-1 -1\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 1\") == \"69\"\nassert solution(\"3 0\") == \"-1\"\nassert solution(\"4\") == \"69\"\nassert solution(\"5\") == \"-1\"\nassert solution(\"6\") == \"69\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == ('69', '96')\nassert solution(stdin) == ('-1', '-1')"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(69) + str(96)"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 15') == '69 96'\nassert solution('3 0') == '-1 -1'\nassert solution('4 1') == '-1 -1'\nassert solution('-1 2') == '-1 -1'\nassert solution('-1 -1') == '-1 -1'\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1,3) == \"69\"\nassert solution(1,2) == \"71\"\nassert solution(1,3) == \"96\"\nassert solution(0,0) == \"-\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"69 96\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"69 96\""
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\nassert solution(\"101 155 123\") == \"12349158640\"\nassert solution(\"101 155 12345\") == \"123456789\""
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"1230\"\nassert solution(inp) == \"2750685\"\nassert solution(inp) == \"101154\"\nassert solution(inp) == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"1230\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\nassert solution(\"1 2345 10\") == \"2750685\"\nassert solution(\"101 154 2\") == \"2189\"\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1130\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1230'\nassert solution(input()) == '2750685'\nassert solution(input()) == '2750685'\nassert solution(input()) == '2750685'\nassert solution(input()) == '2189'\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        \"1 1\",\n        \"2 3\",\n        \"1 2\",\n        \"3 4\"\n    ],\n    3\n) == \"1230\"\nassert solution(\n    [\n        \"1 1\",\n        \"2 3\",\n        \"1 2\",\n        \"3 4\"\n    ],\n    2\n) == \"2750685\"\nassert solution(\n    [\n        \"1 1\",\n        \"2 3\",\n        \"1 2\",\n        \"3 4\"\n    ],\n    1\n) == \"2750685\"\nassert solution(\n    [\n        \"1 1\",\n        \"2 3\",\n        \"1 2\",\n        \"3 4\"\n    ],\n    10\n
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"10\", \"50\", \"2\", \"3\"]) == \"1230\"\nassert solution([\"101\", \"154\", \"2\", \"3\"]) == \"2750685\"\nassert solution([\"101\", \"154\", \"1\", \"1\"]) == \"2189\""
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1, 1, 1, 1, 1, 1, 1, 1, 1) == 2189\nassert solution(1, 2, 1, 1, 1, 1, 1, 1, 1, 1) == 2189\nassert solution(1, 10, 1, 1, 1, 1, 1, 1, 1, 1) == 2189\nassert solution(1, 10, 2, 1, 1, 1, 1, 1, 1, 1) == 2189\nassert solution(1, 10, 10, 1, 1, 1, 1, 1, 1, 1) == 2189\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2') == '1230'\nassert solution('101 15') == '2750685'\nassert solution('101 5') == '2189'\nassert solution('101 000 000') == '2189'\nassert solution('101 000 0010') == '2189'\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2345 10\") == \"1230\"\nassert solution(\"101 154 2\") == \"2750685\"\nassert solution(\"101 154 3\") == \"2750685\"\nassert solution(\"1 2345 12\") == \"2750685\"\nassert solution(\"101 154 4\") == \"2750685\"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6 3 10\") == \"YES\"\nassert solution(\"6 2 3\") == \"NO\"\nassert solution(\"7 2 3 4 2\") == \"NO\"\nassert solution(\"7 2 3 4 2\") == \"YES\"\nassert solution(\"7 2 3 4 2\") == \"NO\"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\n\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n\nimport sys\nfrom heapq import heappop, heappush\n\nn, k = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"NO\"\n\n\"\"\"\n\"\"\"\nclass Solution:\n    def solve(self, n, d, a):\n        for i in range(n):\n            for j in range(i+1, n):\n                a[i][j] = min(a[i][j], d)\n        return min(a[n-1])\n\"\"\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"RYBGRYBGR\") == 0\nassert solution(\"!\") == 0\nassert solution(\"!RGRYG\") == 1\nassert solution(\"!GRB\") == 1\nassert solution(\"RRYBGRYBGR\") == 3\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"GRBYYYGRY\") == \"0 1 0 0\"\nassert solution(\"!YGRYBGRYYB\") == \"0 0 0 0\"\nassert solution(\"!\") == \"0 1 1 0\"\nassert solution(\"RGGBBGRYBR\") == \"0 0 0 0\"\nassert solution(\"!\") == \"0 1 1 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(RRYBGRYBGR) == \"0 0 0 0\"\nassert solution(RYBGRYBGR) == \"0 0 0 0\"\nassert solution(!RRYBGR) == \"0 0 0 0\"\nassert solution(!RYBGR) == \"0 0 0 0\"\nassert solution(GYYBGRYBGR) == \"0 0 0 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"RRYBGGRYB\") == \"0 0 0 0\"\nassert solution(\"RRYBGRYBY\") == \"0 1 0 0\"\nassert solution(\"RRYBGRYBYG\") == \"1 1 1 1\"\nassert solution(\"RRYBGRYBGB\") == \"1 1 0 0\"\nassert solution(\"RRYBGRYBGRY\") == \"1 0 1 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\nassert solution(stdin) == '0 0 0 0'\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\u201cRRYBGRYBGRY!GB!RG!Y!GB!RYB!\u201d) == \"0 1 0 0\"\nassert solution(\u201cRRYBGRYBGRY!GB!RG!Y!GB!RYB!\u201d) == \"0 1 0 0\"\nassert solution(\u201cRRYBGRYBGRY!GB!RG!Y!GB!RYB!\u201d) == \"1 1 1 1\"\nassert solution(\u201cRRYBGRYBGRY!GB!RG!Y!GB!RYB!\u201d) == \"1 1 1 0\"\nassert solution(\u201cRRYBGRYBGRY!GB!RG!Y!GB!RYB!\u201d) == \"2 1 1 0\"\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\\\"\\\"\\\"\\\"\\S{3}RGRY\\S{3}YGGRY\\S{3}GRB\\S{3}BGRY\\S{3}\\\"\\\"\\\") == \\\"1 1 0 0\\\".\nassert solution(\\\"\\\"\\\"\\S{3}RGRY\\S{3}YGGRY\\S{3}GRB\\S{3}BGRY\\S{3}\\\"\\\"\\\") == \\\"2 1 0 0\\\".\nassert solution(\\\"\\\"\\\"\\S{3}RGRY\\S{3}YGGRY\\S{3}GRB\\S{3}BGRY\\S{3}\\\"\\\"\\\") == \\\"0 1 0 0\\\".\nassert solution(\\\"\\\"\\\"\\S{3}RGRY\\S{3}YGGRY\\S{3}GRB\\S{3}BGRY\\S{3}\\\"\\\"\\\") == \\\"0 0 0 0\\\".\nassert solution(\\\"\\\"\\\"\\S{3}RGRY\\S{3}YGGRY\\S{3}GRB\\S{3}BGRY\\S{3}\\\"\\\"\\\") == \\\"0 0 0 0\\\".\n"
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"RYBGRYBGR\") == \"0 0 0 0\"\nassert solution(\"!RGYB\") == \"1 1 0 0\"\nassert solution(\"!!!!YGRB\") == \"0 0 1 0\"\nassert solution(\"!GB!RG!Y!\") == \"2 1 0 0\"\n\"\"\""
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\\\"\"\"\\\".join(list(map(str,[1,3,4,4,5,6,7,8]))).replace(\"'\", \"\").replace(\".\", \"\")) == \"1 1 1 0\"\nassert solution(\\\"\"\"\\\".join(list(map(str,[1,3,4,4,5,6,7,8]))).replace(\"!\", \"\")) == \"1 1 0 0\"\nassert solution(\\\"\"\"\\\".join(list(map(str,[1,3,4,4,5,6,7,8]))).replace(\"\u2019\", \"\")).replace(\".\", \"\") == \"1 1 0 0\"\nassert solution(\\\"\"\"\\\".join(list(map(str,[1,3,4,4,5,6,7,8]))).replace(\"!\", \"\")).replace(\".\", \"\") == \"1 0 0 0\"\nassert solution(\\\"\"\"\\\".join(list(map(str,[1,3,4,4,5,6,7,8]))).replace(\"R\", \"\").replace(\"Y\", \"\").replace(\"G\", \"\").replace(\"B\", \"\").replace(\"!\", \"\").replace(\"\u2019\", \"\")).replace(\".\", \"\") == \"1 1 0 0\"\n\n\n\"\"\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 2') == 1\nassert solution('1 3 4 2') == 4\nassert solution('1 3 1 2') == 1\nassert solution('1 3 3 2') == 1\nassert solution('1 3 3 3') == 4\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1.5000000000\"\n\n-----Constraints-----\n-2 \\leq N \\leq 600\n-N-1 \\leq M \\leq \\frac{N(N-1)}{2}\n-s_i < t_i\n-If i!= j, (s_i, t_i) \\neq (s_j, t_j). (Added 21:23 JST)\n-For every v = 1, 2,..., N-1, there exists i such that v = s_i.\n\n-----Input-----\nInput is given from Standard Input in the following format:\nN M\ns_1 t_1\n:\ns_M t_M\n\n-----Output-----\nPrint the value of E when Aoki makes a choice that minimizes E.\nYour output will be judged as correct when the absolute or relative error from the judge's output is at most 10^{-6}.\n\n-----Sample Input-----\n4 6\n1 4\n2 3\n1 3\n1 2\n3 4\n2 4\n\n-----Sample Output-----\n1.5000000000\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n\n---------------Example---------------\nInput:\n5 4\n1 4\n1 3\n1 2\n3 4\n2 4\n\nOutput:\n4\n\nExplanation:\nRoom 1:\n1 4\n2 3\n3 4\n\nRoom 2:\n3 4\n1 4\n\nRoom 3:\n3 4\n2 4\n\nRoom 4:\n1 4\n2 4\n\nRoom 5:\n1 4\n1 3\n\n---------------Example---------------\nInput:\n5 4\n1 4\n1 2\n1 3\n1 2\n3 4\n2 4\n\nOutput:\n1.5000000000\n\nExplanation:\nRoom 1:\n1 4\n2 3\n3 4\n\nRoom 2:\n3 4\n1 4\n\nRoom 3:\n3 4\n1 4\n\nRoom 4:\n1 4\n1 3\n\nRoom 5:\n1 4\n1 3\n\n---------------Example---------------\nInput:\n5 4\n1 3\n1 4\n1 5\n3 4\n2 4\n\nOutput:\n4.5000000000\n\nExplanation:\nRoom 1:\n1 5\n2 3\n3 4\n\nRoom 2:\n3 4\n1 4\n\nRoom 3:\n3 4\n1 4\n\nRoom 4:\n1 4\n1 3\n\nRoom 5:\n1 4\n1 3\n\n---------------Example---------------\nInput:\n4 5\n1 2\n2 3\n3 4\n4 5\n\nOutput:\n1.5000000000\n\nExplanation:\nRoom 1:\n1 4\n1 2\n2 3\n3 4\n4 5\n\nRoom 2:\n3 4\n1 4\n\nRoom 3:\n3 4\n1 4\n\nRoom 4:\n1 4\n1 3\n\nRoom 5:\n1 4\n1 3\n\n---------------Example---------------\nInput:\n5 5\n1 2\n2 3\n3 4\n4 5\n\nOutput:\n1.5000000000\n\nExplanation:\nRoom 1:\n1 5\n2 3\n3 4\n4 5\n\nRoom 2:\n1 5\n1 2\n\nRoom 3:\n1 4\n2 3\n\nRoom 4:\n1 4\n1 3\n\nRoom 5:\n1 4\n1 3\n\n---------------Example---------------\nInput:\n5 5\n1 2\n2 3\n3 4\n4 5\n\nOutput:\n1.5000000000\n\nExplanation:\nRoom 1:\n1 5\n1 2\n2 3\n3 4\n4 5\n\nRoom 2:\n1 5\n2 3\n3 4\n\nRoom 3:\n1 4\n1 2\n\nRoom 4:\n1 4\n1 3\n\nRoom 5:\n1 4\n1 3\n\n---------------Example---------------\nInput:\n5 6\n1 2\n2 3\n3 4\n4 5\n\nOutput:\n0.5\n\nExplanation:\nRoom 1:\n1 5\n1 2\n2 3\n3 4\n4 5\n\nRoom 2:\n1 5\n1 2\n\nRoom 3:\n1 4\n1 2\n\nRoom 4:\n1 4\n1 3\n\nRoom 5:\n1 4\n1 3\n\n---------------Example---------------\nInput:\n5 7\n1 2\n2 3\n3 4\n4 5\n5 6\n\nOutput:\n5\n\nExplanation:\nRoom 1:\n1 5\n1 2\n2 3\n3 4\n4 5\n5 6\n\nRoom 2:\n1 5\n2 3\n3 4\n4 5\n\nRoom 3:\n1 4\n1 2\n\nRoom 4:\n1 4\n1 3\n\nRoom 5:\n1 4\n1 3\n\n---------------Example---------------\nInput:\n10 4\n1 2\n2 3\n3 4\n4 5\n4 6\n4 7\n4 8\n4 9\n\nOutput:\n10\n\nExplanation:\nRoom 1:\n1 5\n1 2\n2 3\n3 4\n4 5\n5 6\n5 7\n5 8\n5 9\n\nRoom 2:\n1 5\n1 2\n2 3\n3 4\n4 5\n4 6\n\nRoom 3:\n1 4\n2 3\n3 4\n4 5\n\nRoom 4:\n1 4\n1 3\n\nRoom 5:\n1 4\n1 3\n\nRoom 6:\n1 4\n1 3\n\nRoom 7:\n1 4\n1 3\n\nRoom 8:\n1 4\n1 3\n\nRoom 9:\n1 4\n1 3\n\nRoom 10:\n1 4\n1 3\n\n----------------Example-------------------\nInput:\n2 10\n3 5\n5 1\n2 2\n5 3\n2 3\n3 2\n3 2\n3 3\n3 3\n\nOutput:\n2\n\nExplanation:\nRoom 1:\n2 3\n2 5\n2 5\n3 2\n3 3\n3 3\n3 3\n3 3\n\nRoom 2:\n2 3\n2 3\n2 3\n2 3\n2 3\n2 3\n3 2\n3 3\n\n----------------Example-------------------\nInput:\n5 5\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n\nOutput:\n10\n\nExplanation:\nRoom 1:\n1 5\n1 2\n2 3\n3 4\n4 5\n5 6\n5 6\n\nRoom 2:\n1 5\n1 2\n2 3\n3 4\n4 5\n5 6\n5 6\n\nRoom 3:\n1 4\n2 3\n3 4\n4 5\n5 6\n5 6\n\nRoom 4:\n1 4\n1 3\n2 3\n3 4\n3 4\n3 4\n\nRoom 5:\n1 4\n1 3\n2 3\n3 4\n4 5\n5 6\n5 6\n\nRoom 6:\n1 4\n1 3\n2 3\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n\nRoom 7:\n1 4\n1 3\n2 3\n3 4\n4 5\n5 6\n5 6\n5 6\n\nRoom 8:\n1 4\n1 3\n2 3\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n3 4\n\nRoom 9:\n1 4\n1 3\n2 3\n3 4\n4 5\n5 6\n5 6\n5 6\n5 6\n5 6\n5 6\n5 6\n\nRoom 10:\n1 4\n1 3\n2 3\n3 4\n3 4"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 1, \"Assert failed.\"\nassert solution(input()) == 1.1, \"Assert failed.\"\nassert solution(input()) == 1.1, \"Assert failed.\"\nassert solution(input()) == 1.1, \"Assert failed.\"\nassert solution(input()) == 1.1, \"Assert failed.\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4 6) == \"1.5\"\nassert solution(4 6) == \"1\"\nassert solution(4 6) == \"2\"\nassert solution(4 6) == \"3\"\nassert solution(4 6) == \"3\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1.5\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"\"\"1 4\n1 3\n1 2\n3 4\n2 4\n\n1 1\n1 1\n1 2\n2 4\n3 2\n4 2\"\"\") == \"1.5\"\nassert solution(\"\"\"1 4\n1 3\n1 2\n3 4\n2 4\n\n1 3\n1 2\n1 1\n2 3\n2 4\n3 4\n\n1 1\n1 1\n1 2\n2 4\n3 2\n4 2\"\"\") == \"1.5\"\nassert solution(\"\"\"1 4\n1 3\n1 2\n3 4\n2 4\n\n1 1\n1 1\n1 2\n2 4\n3 2\n4 2\n\n1 1\n1 1\n1 2\n2 4\n3 2\n4 2\"\"\") == \"1.5\"\nassert solution(\"\"\"1 4\n1 3\n1 2\n3 4\n2 4\n\n1 1\n1 1\n1 2\n2 4\n3 2\n4 2\n\n1 1\n1 1\n1 2\n2 4\n3 2\n4 2\"\"\") == \"1.5\"\nassert solution(\"\"\"1 4\n1 3\n1 2\n3 4\n2 4\n\n1 1\n1 1\n1 2\n2 4\n3 2\n4 2\n\n1 1\n1 1\n1 2\n2 4\n3 2\n4 2\"\"\") == \"1.5\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 6\") == \"1.5\"\nassert solution(\"4 6\") == \"1\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"3 4\") == \"3\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == str(1)\n\nassert solution(inp) == str(1)\n\nassert solution(inp) == str(1)\n\nassert solution(inp) == str(1)\n\nassert solution(inp) == str(1)"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input()) == \"1.5\"\n\"\"\"\n\nfrom math import ceil"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '11'\nassert solution(stdin) == '11'\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == answer\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 5\nassert solution(113) == 110\nassert solution(1000000000) == 1000000000\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"0\"\nassert solution(113) == \"10\"\nassert solution(1134) == \"10\"\nassert solution(10432359) == \"10\"\nassert solution
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 0\nassert solution(113) == 110\nassert solution(1000000000) == 1000000000"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 0\nassert solution(113) == 110\nassert solution(1000000000) == 1000000000\nassert solution(5432359) == 5432360\nassert solution(5432360) == 5432360\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5) == 0\nassert solution(113) == 110\nassert solution(1000000000) == 10000000\nassert solution(5432359) == 5432360"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 0\nassert solution(113) == 10\nassert solution(1000000000) == 100000000\n\n\n-----Time complexity-----\n\nBrute-Force approach:\n\nO(n^2) time | O(n) space\n\nBrute-Force approach:\n\nO(n) time | O(n) space\n\nBrute-Force approach:\n\nO(n^2) time | O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n) space\n\nIn C++, for loops use O(n) time, while in Java, O(1) space\n\nIn C++, for loops use O(n) time, while in Java, O(n) space\n\nIn C++, for loops use O(n) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\n\n-----Algorithm-----\n\nBrute-Force approach:\n\nO(n^2) time | O(n) space\n\nBrute-Force approach:\n\nO(n^2) time | O(n^2) space\n\nBrute-Force approach:\n\nO(n^2) time | O(1) space\n\nBrute-Force approach:\n\nO(n^2) time | O(n^2) space\n\nBrute-Force approach:\n\nO(n^2) time | O(1) space\n\nBrute-Force approach:\n\nO(n^2) time | O(1) space\n\nBrute-Force approach:\n\nO(n^2) time | O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(1) space\n\nIn C++, for loops use O(n^2) time, while in Java, O(n^2) space\n\n\n\"\"\"\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\" or solution(stdin) == \"1\" or solution(stdin) == \"10\"\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == 0\nassert solution(113) == 110\nassert solution(1000000000) == 1000000000\nassert solution(5432359) == 5432360\n\nprint(\"Correct\")"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"helloworld\") == \"s e n s a c i t\"\nassert solution(\n    \"ehoolwlroz\") == \"t ah n o l r k w o l r\"\nassert solution(\n    \"hastalavistababy\") == \"a e h n s a c i t\"\nassert solution(\n    \"merrychristmas\") == \"c e n s m r y p a t z m\"\nassert solution(\n    \"christmasmerry\") == \"-1\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == -1\n\n\n'''"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"hello world\") == \"11\"\nassert solution(\"hello world\") == \"0\"\nassert solution(\"hello world\") == \"0\"\nassert solution(\"hello world\") == \"0\"\nassert solution(\"hello world\") == \"0\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\") == \"0\"\nassert solution(\"2 3 1 4 9 5 3 7 8 9 10 10 7 5 6 4 9 1\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"0\"\nassert solution(\"h e l a t b c d e f\") == \"0\"\nassert solution(\"helloworld\") == \"3\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"he\", \"hello\", \"leetcode\", \"this\", \"is\", \"an\", \"example\", \"of\", \"this\"]) == \"0\"\nassert solution([\"he\", \"hello\", \"leetcode\", \"this\", \"is\", \"an\", \"example\", \"of\", \"this\", \"is\", \"a\", \"solution\", \"to\", \"the\", \"explanation\"]) == \"3\"\nassert solution([\"he\", \"hello\", \"leetcode\", \"this\", \"is\", \"an\", \"example\", \"of\", \"this\", \"is\", \"a\", \"solution\", \"to\", \"the\", \"explanation\", \"and\", \"this\", \"more\", \"example\", \"of\", \"this\"]) == \"1\"\nassert solution([\"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\"]) == \"-1\"\nassert solution([\"hello\", \"hello\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"world\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 2 1 4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"hello world\") == \"h e l o d z\"\nassert solution(\"hello world\") == \"h e l o d z\"\nassert solution(\"merry christmas\") == \"h e l o d z\"\nassert solution(\"goodbye\") == \"h e l o d z\"\nassert solution(\"goodbye\") == \"h e l o d z\"\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"hello world\") == \"a e e b a c a b a c d e f\"\nassert solution(\"hello world\") == \"a h e l e l o e l o w l w l d d\"\nassert solution(\"hello world\") == \"a h e l e l o e l o w l w l d d\"\nassert solution(\"hello world\") == \"a h e l e l o e l o w l w l d\"\nassert solution(\"hello world\") == \"a h e l o w l o w l l d\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"hello world\") == \"o\"\nassert solution(\"hello hello world\") == \"h\"\nassert solution(\"hello hello world\") == \"l\"\nassert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"hap\"\nassert solution(input(\"Hello\")) == \"hha\"\nassert solution(input(\"Hello world\")) == \"whld\"\nassert solution(input(\"HARRY PUTTER\")) == \"HARRY\"\nassert solution(input(\"HARRY PUTTER WORD\")) == \"WORD\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"bc\"\nassert solution(\"x\") == \"x\"\nassert solution(\"abcde\") == \"abc\"\nassert solution(\"a\") == \"a\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'hap'\n\n## Solution:\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"asdf qwerty\"\n    \"\\nqwerty\\n\\n\"\n    \"\\nefghi\\n\"\n    \"\\nefghi\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\") == \"eefghi\\n\"\n    \n    \"\\nqwerty\\n\"\n    \"\\n\"\n    \"\\nefghi\\n\"\n    \"\\nefghi\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\") == \"qwerty\\n\"\n    \n    \"qwerty\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"\\n\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"harry potter\") == \"hap\"\nassert solution(\"tom riddle\") == \"tomr\"\nassert solution(\"Argon\") == \"Argon\"\nassert solution(\"Anna\") == \"Anna\"\nassert solution(\"\") == \"\"\n\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\n[output] string\n\n\"\"\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"harry potter\",\n    \"tom riddle\",\n    \"hap\"\n) == \"hap\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aabbccddee\") == \"aab\"\nassert solution(\"bcabcda\") == \"bc\"\nassert solution(\"abcde\") == \"a\"\nassert solution(\"aaabcddee\") == \"ac\"\nassert solution(\"aaabbcdee\") == \"a\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9\"), \"h\"\nassert solution(\"a a a a a a a b b\"), \"b\"\nassert solution(\"bab\"), \"a\"\nassert solution(\"abcabcabc\"), \"abcabcabc\"\nassert solution(\"abcabcabc\"), \"abcabc\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aabb\") == \"aabb\"\nassert solution(\"aabbab\") == \"aab\"\nassert solution(\"baabaa\") == \"a\"\nassert solution(\"baaaab\") == \"a\"\nassert solution(\"abaaab\") == \"b\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"| + - - + || + - - +|| + - - + || + - - + || + - - +|| + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - + || + - - +|| + - - + || + - - +|| + - - +|| + - - +|| + - - + || + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +|| + - - +"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-+-+\"\n\nassert solution(stdin) == \"-+-+\"\n\nassert solution(stdin) == \"-+-+\"\n\nassert solution(stdin) == \"-+-+\"\n\nassert solution(stdin) == \"-+-+\""
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\".join(list(map(str,range(2,100))))\n\n\n------Solution-----\n\nInput\n6\n[[[]]]\n\nOutput\n+-     -+\n|+-   -+|\n||+- -+||\n|||   |||\n||+- -+||\n|+-   -+|\n+-     -+\n\nInput\n6\n[]\n\nOutput\n+-     -+\n|+- -++- -+|\n||   ||   ||\n|+- -++- -+|\n+-        -+\n\nInput\n6\n[[[]]]\n\nOutput\n+-     -+\n|+- -++- -+|\n||   ||   ||\n|+- -++- -+|\n+-        -+\n\nInput\n4\n[]\n\nOutput\n+- -++- -+\n|   ||   |\n+- -++- -+\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '+-\\n||-||-||\\n||||||||\\n||||||||'"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"\\\\|+-\\\\|-|||+-|||-||\""
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"[[]]\"\n\"\"\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"|+- -+\"\nassert solution(inp) == \"|+-+\"\nassert solution(inp) == \"|++--+\"\nassert solution(inp) == \"|++\"\nassert solution(inp) == \"|+-++--+\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"|+- -++- -+||   |\"\nassert solution(stdin) == \"|+- -++- -+||   |\"\nassert solution(stdin) == \"|+- -++- -+||   |\"\nassert solution(stdin) == \"|+- -++- -+||   |\"\nassert solution(stdin) == \"|+- -++- -+||   |\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"+-    -+\"\n\nSample Input:\n\n6\n[[]]\nSample Output:\n\n+-     -+\n|+- -++- -+|\n||   ||   ||\n|+- -++- -+|\n+-        -+\n\n6\n[[]]\nSample Input:\n\n5\n[[]]\nSample Output:\n\n+-     -+\n|+- -++- -+|\n||   ||   ||\n|+- -++- -+|\n+-        -+\n\n5\n[[]]\nSample Input:\n\n2\n[]\nSample Output:\n\n+-     -+\n|+- -++- -+\n||   ||   ||\n|+- -++- -+\n+-        -+\n\"\"\""
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '[][]', 'test failed'\n\n\"\"\"\n\nimport sys\nfrom itertools import combinations\n\ninput = sys.stdin.readline\nn = int(input().strip())"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \">\", \"Number 1 is not larger than the other one.\"\nassert solution(input) == \"<\", \"Number 1 is not smaller than the other one.\"\nassert solution(input) == \"=\"\nassert solution(input) == \">=\"\nassert solution(input) == \"=<\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0') == '<'\nassert solution('0') == '=','solution(0) should return \"<\"\nassert solution('1') == '=','solution(1) should return \">\"\nassert solution('2') == '=','solution(2) should return \"=\"\nassert solution('1000') == '<'\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"=\"\nassert solution(stdin) == \">=\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"<=\"\nassert solution(stdin) == \">\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \">\" or \"<\"\nassert solution(stdin) == \"<\""
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution( \"110\" ) == \"=\", \"This should be a correct answer\"\nassert solution( \"10\" ) == \">\", \"This should be a correct answer\"\nassert solution( \"111\" ) == \"<\", \"This should be a correct answer\"\nassert solution( \"1000\" ) == \">\", \"This should be a correct answer\"\nassert solution( \"101\" ) == \"<\", \"This should be a correct answer\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"=\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \">=\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"<=\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\nstdin consists of non-whitespace characters.\nstdin consist of non-negative integers.\n\n\n-----Sample Input 1-----\n\nInput\n1000\n111\n\nOutput\n>\n\n-----Sample Output 1-----\n\n>\n\n-----Sample Input 2-----\n\nInput\n0.1\n0.0001\n\nOutput\n=\n\n>>> Solution\nNot Possible\n\n\"\"\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Empty string.\"\nassert solution(stdin), \"Only one 1.\"\nassert solution(stdin), \"Only one 0.\"\nassert solution(stdin), \"Only one 1.\"\nassert solution(stdin), \"Only one 0.\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \">\"\nassert solution(input) == \"<\"\nassert solution(input) == \"=\"\nassert solution(input) == \">=\"\nassert solution(input) == \"<=\"\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '6'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"6\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 6"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4\\nred\\npurple\\nyellow\\norange\\nred\\nyellow\\norange\\nyellow') == '2'\nassert solution('0\\npurple\\nyellow\\norange\\nred\\nyellow\\norange\\nyellow') == '6'\n\nassert solution('4\\nred\\npurple\\nyellow\\norange\\nred\\nyellow\\norange\\nyellow') == '2'\nassert solution('0\\npurple\\nyellow\\norange\\nred\\nyellow\\norange\\nyellow') == '6'\n\nassert solution('4\\nred\\nyellow\\norange\\nred\\nyellow\\norange\\nyellow\\nyellow\\nyellow\\nyellow\\norange\\nyellow') == '2'\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\n\n\n\"\"\"\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"Infinity Gauntlet\"\nassert solution(\"0\") == \"Invalid Input\"\nassert solution(\"2\") == \"Invalid Input\"\nassert solution(\"6\") == \"Invalid Input\"\nassert solution(\"1\") == \"Invalid Input\"\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 2 2 1 2') == '10'\nassert solution('0 6') == '6'\nassert solution('0 2 2 0 3 4 5') == '6'\nassert solution('2 3 1 2') == '6'\nassert solution('0 2 1 2 3 4 5 6') == '6'\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Red Purple Yellow Orange Yellow Orange Yellow Orange Yellow Yellow Orange Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow Yellow"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2, 'Failed'\n\"\"\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"8 7 5\") == \"Final! 2\"\nassert solution(\"8 2 6\") == \"Final! 2\"\nassert solution(\"8 7 5\") == \"Final!\"\nassert solution(\"8 8 9\") == \"Final!\"\nassert solution(\"8 8 9\") == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"Final!\"\n'''"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 'Final!'\nassert solution(inp) == '2'\nassert solution(inp) == 'Final!'\nassert solution(inp) == '2'\nassert solution(inp) == '1'\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == \"Final!\"\nassert solution(\"8\") == 1\nassert solution(\"8 7 5\") == 2\nassert solution(\"8 7 5 2\") == 2\n\n\n-----Constraints-----\n\n1 <= n <= 256\n\n\n\n----Coding----\n\nTo begin, we need to set the two variables:\n\na = n\nb = a-1\n\nsolution(stdin)\nsolution(stdin)\n\n----------------------------------------------------------------------------------\n\nTo see the solutions, we need to write an algorithm that checks, whether two teams meet in the last stage or not.\n\nIn the last stage, we check if there is a tie between the teams, and if so, we check the second stage, and so on.\n\nIn the final stage, we check if there is a tie between the teams, and if so, we check the third stage, and so on.\n\nIf there is no tie, we choose the winner of the final round by choosing the second-highest team.\n\nIf there is a tie, we choose the winner of the final round by choosing the third-highest team.\n\n\"\"\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"Final!\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test_cases[1]) == 'Final!'\nassert solution(test_cases[2]) == '2'\nassert solution(test_cases[3]) == 'Final!'\nassert solution(test_cases[4]) == 'Final!'\nassert solution(test_cases[5]) == 'Final!'\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Final!\""
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\n-----See also-----\nhttps://leetcode.com/problems/permutation-in-string/discuss/315513/Python-with-explanation\nhttps://leetcode.com/problems/permutation-in-string/discuss/207874/Python-O(n)-S-O(n)-runtime-with-explanation-solution-python\n\nhttps://www.geeksforgeeks.org/permutation-in-a-string/\nhttps://www.geeksforgeeks.org/permutation-in-a-string-in-python/\n\"\"\""
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"2\"\n\nassert solution(input) == \"1\"\n\nassert solution(input) == \"2\"\n\nassert solution(input) == \"1\"\n\nassert solution(input) == \"0\""
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input() == \"4 3 2 1\")\nassert solution(input() == \"0 1 1 1\")\nassert solution(input() == \"1 0 0 0\")\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(a) == \"2\"\nassert solution(b) == \"2\"\nassert solution(c) == \"1\"\nassert solution(d) == \"1\"\nassert solution(e) == \"2\"\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, \"4 3 2 1\") == 2\nassert solution(3, \"0 0 0\") == 1\n\n\n-----Constraints-----\n0 <= n <= 10^5\n0 <= p_i < n\n1 <= b_i < 10^6\n\nTime Limit: 40 ms\nMemory Limit: 128 MB\n\n\n-----Example 1-----\n\nInput\n4\n3 3 2 1\n0 1 1 1\n\nOutput\n2\n\nInput\n3\n1 1 1\n0 0 0\n\nOutput\n2\n\n\n-----Example 2-----\n\nInput\n1\n0 1 1\n\nOutput\n1\n\nInput\n1\n0 0 0\n0 1 1\n\nOutput\n2\n\n\n-----Example 3-----\n\nInput\n3\n3 2 1\n0 0 0\n0 0 0\n\nOutput\n2\n\n\n-----Constraints-----\n\n0 <= p_i < n\n0 <= b_i < 10^6\n\nTime Limit: 40 ms\nMemory Limit: 128 MB\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, p = map(int, stdin.split())\n        b = [1] + [0] * (n-1)\n        for _ in range(n):\n            b[p-1] = b[p-1] * 2 - 1\n        return str(sum(b))\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        n, p = map(int, stdin.split())\n        # p += 1\n        b = [1] + [0] * (n-1)\n        for _ in range(n):\n            b[p-1] = b[p-1] * 2 - 1\n            p += 1\n        return str(sum(b))"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Notes-----\n\nThe length of the given permutation must be in the range 1\u20262\u00b710^9, otherwise the output is incorrect.\n\nThe input sequence consists of integers, not strings.\n\nThe given sequence must be in the range 1\u2026n, not 0.\n\nThe given sequence may contain repeated integers, not necessarily distinct.\n\nThe given sequence must be of integers type.\n\nThe given sequence may be empty."
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0, \"0 1 1 1\", \"0 1 1 0 0 0 0\") == 2\nassert solution(0, \"0 0 0 0 1 1 1 0 0\", \"1 1 0 1 0 0 0 0 0 0 1 0 1 0 1\") == 1\nassert solution(0, \"0 0 0 1 0 1 1 0 0 0\", \"1 0 1 0 0 0 0 0 0 1 0 1 0 0 1\") == 2\nassert solution(0, \"1 0 0 0 1 1 1 0 0 0\", \"0 0 1 1 1 0 0 0 0 1 1 0 1 0 1\") == 2\nassert solution(0, \"1 0 1 0 0 0 0 0 1 0 1 0 0 1 0\", \"0 0 1 0 1 1 0 1 1 1 0 0 0 1\") == 1\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 4\n\nassert solution(input()) == 3\n\nassert solution(input()) == 2\n\nassert solution(input()) == 1\n\nassert solution(input()) == 1\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n0 \u2264 p_i \u2264 n\n\n2 \u2264 b_i \u2264 n\n\n1 \u2264 p_i \u2264 n\n\n1 \u2264 b_i \u2264 n\n\n1 \u2264 p_i \u2264 n\n\n(2n) is a divisor of n.\n\n2 \u2264 n \u2264 2\u00b710^5\n\n\n-----Time complexity-----\n\nSince we have a pair with two permutations, we have two integers. Since we are getting the b as the largest number, so we know that the pair with one b as smallest number is equivalent to the pair with another one.\n\nWe will get a new integer n as the smallest number for the pair.\n\nSince we have a pair with two permutations, we have two integers, so we know that the pair with one b as smallest number is equivalent to the pair with another one.\n\nThen we have a pair with one b as smallest number. So we need to check if the pair with one b as smallest number has a second number that is equal to 1. If the second number is equal to 1, we need to change it to 0.\n\nSince there is only one pair of permutation p and sequence b, we know that for any pair p and sequence b, each pair has a second number. So we need to check whether the pair p and sequence b has a second number equal to 0. If this is true, we need to reverse the second number, and check whether we have a solution.\n\nFor example, we can have a pair p = 1, sequence b = 1 and p = 2, sequence b = 2, so we need to check if p = 2 and b = 1, which is equivalent to a pair of permutation p and sequence b and p = 1 and sequence b = 1.\n\nSo the second number is equivalent to 0.\n\nThe minimum total number of elements in the given permutation p and the given sequence b he needs to change so that every skewer will visit each of 2n placements.\n\n2n is a divisor of n.\n\n2 \u2264 n \u2264 2\u00b710^5\n\n2 \u2264 p_i \u2264 n\n\n1 \u2264 p_i \u2264 n\n\n1 \u2264 p_i \u2264 n\n\n(2n) is a divisor of n.\n\n2 \u2264 n \u2264 2\u00b710^5\n\n\n-----Space complexity-----\n\nSince we have a pair with two permutations, we have two integers, so we have two spaces for the pair with one b.\n\nSince we have a pair with two permutations, we have two integers, so we have two spaces for the pair with one b and 1.\n\nSince we have a pair with one b as smallest number, we have a second number as smallest number. So we need to check whether the pair with one b as smallest number has a second number that is equal to 1. If this is true, we need to change it to 0.\n\nSince there is only one pair of permutation p and sequence b, we know that for any pair p and sequence b, each pair has a second number. So we need to check whether the pair p and sequence b has a second number equal to 0. If this is true, we need to reverse the second number, and check whether we have a solution.\n\nFor example, we can have a pair p = 1, sequence b = 1 and p = 2, sequence b = 2, so we need to check whether p = 2 and b = 1, which is equivalent to a pair of permutation p and sequence b and p = 1 and sequence b = 1.\n\nSo the second number is equivalent to 0.\n\nThe minimum total number of elements in the given permutation p and the given sequence b he needs to change so that every skewer will visit each of 2n placements.\n\n2n is a divisor of n.\n\n2 \u2264 n \u2264 2\u00b710^5\n\n2 \u2264 p_i \u2264 n\n\n1 \u2264 p_i \u2264 n\n\n1 \u2264 p_i \u2264 n\n\n(2n) is a divisor of n.\n\n2 \u2264 n \u2264 2\u00b710^5\n\n\n-----Return value-----\nReturn the minimum total number of elements in the given permutation p and the given sequence b he needs to change so that every skewer will visit each of 2n placements.\n\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '100'\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 26, 'invalid input'\n'''"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 1 4 0 1 4 0\") == \"4\"\nassert solution(\"3 4 1 0 1 4 0\") == \"3\"\nassert solution(\"0 2 4 0 1 4 0\") == \"0\"\nassert solution(\"5 2 1 0 1 2 2\") == \"2\"\nassert solution(\"10 0 1 0 1 0 1\") == \"1\"\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 100\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\",\"4\",\"2\",\"6\"]) == \"26\"\nassert solution([\"10\",\"10\",\"0\",\"10\"]) == \"100\"\n\"\"\""
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '100'\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"26\"\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"26\"\nassert solution(stdin) == \"100\""
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == '26'\n\"\"\"\nfrom functools import reduce"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == -1 or solution(input()) == str(0)\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 4 2\") == 0\nassert solution(\"1 4 5\") == 0\nassert solution(\"1 2 10\") == 10\nassert solution(\"2 1 10\") == 10\nassert solution(\"1 2 10\") == -1\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 0 1 3 2\") == -1\nassert solution(\"2 3 4 6 4 3\") == 3\nassert solution(\"1 3 3 6\") == 3\nassert solution(\"1 2 2 0 1\") == 1\nassert solution(\"2 4 2 2\") == 3\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 2') == '10'\nassert solution('1 4 2') == '10'\nassert solution('1 3 2') == '6'"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 2\") == \"10\"\nassert solution(\"1 4 2\") == \"10\"\nassert solution(\"1 1 10 10\") == \"10\"\nassert solution(\"1 2 3 1 4\") == \"0\"\nassert solution(\"1 1 2 3 4 5 6\") == \"0\"\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"1 2\"\n\"\"\""
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2\") == \"10\"\nassert solution(\"1 4 2\") == \"10\"\nassert solution(\"2 6\") == \"10\"\nassert solution(\"5 4 3\") == \"2\""
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 169 170 171 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 188 189 190 191 191 192 191 193 194 195 196 197 198 199 200 201 201 202 202 203 204 205 206 207 208 208 209 210 211 211 212 213 214 215 216 217 219 220 221 223 224 225 226 227 228 229 229 230 231 231 232 233 234 235 236 237 237 238 239 240 241 243 242 245 246 247 248 249 250 251 252 253 253 254 255 256 257 258 259 260 261 262 263 264 266 267 268 269 270 271 272 274 275 275 277 276 278 279 280 281 282 283 284 285 286 287 288 289 290 291 291 292 293 294 295 295 296 297 298 299 299 300 301 301 302 302 303 303 304 305 306 308 308 309 310 311 310 313 314 315 316 317 318 319 320 321 321 322 323 324 325 326 327 328 329 330 331 332 333 333 333 344 345 346 347 348 349 350 351 351 352 353 354 355 356 357 358 359 359 360 361 366 367 368 369 371 372 373 374 375 376 377 378 379 380 380381 379 381 382 383 383 385 385386 386 386386 387386 388 389 389390 389391 388392 389393 389394 389395 389396 389397 389398 390039 390139 390219 390223 390119 390109 390101 39010139 390119 390117 39011739 390127 39012739 3901273939 3901273939393901273939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939393939"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"12\"\nassert solution(input()) == \"3628800\"\nassert solution(input()) == \"1172\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\n\"\"\"\n\nfrom typing import Tuple"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 10 20'), '1'\nassert solution('107 109'), '0'\nassert solution('107 109'), '1'\nassert solution('107 109'), '0'\nassert solution('107 109'), '2'\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"11 0\") == \"1\"\nassert solution(\"9 1\") == \"1\"\nassert solution(\"107 109\") == \"2\"\nassert solution(\"3628800 11 0\") == \"2\"\nassert solution(\"3628800 109 10\") == \"0\"\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"107 109\") == \"2\"\nassert solution(\"10 107\") == \"0\"\nassert solution(\"110 109\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"0 10\") == \"0\"\nassert solution(\"107 109\") == \"2\"\nassert solution(\"107 109 10\") == \"2\"\nassert solution(\"107 109 10 107\") == \"2\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\nstdin,\n    input = \"8 4\",\n    output = \"2\"\n) == \"2\"\nassert solution(\nstdin,\n    input = \"4 2\",\n    output = \"3\"\n) == \"3\"\nassert solution(\nstdin,\n    input = \"12 3\",\n    output = \"4\"\n) == \"4\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3,1) == 2\nassert solution(12,3) == -1\nassert solution(8,12) == 3\nassert solution(8,13) == -1"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == str(2)\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"8\",\"4\",\"3\",\"7\",\"2\",\"6\",\"12\",\"100\",\"00101\",\"10101001\"]) == \"3\"\nassert solution([\"4\",\"3\",\"2\",\"4\"]) == \"1\"\nassert solution([\"2\",\"2\",\"2\"]) == \"1\"\nassert solution([\"100\",\"00101\"]) == \"1\"\nassert solution([\"100\",\"00101\",\"10101001\"]) == \"0\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(8, 4) == 2\nassert solution(8, 4) == -1\nassert solution(12, 3) == 3\nassert solution(12, 3) == 4\nassert solution(12, 4) == 4\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('111001', 3) == '3'\nassert solution('10010101', 4) == '-1'\nassert solution('1', 1) == -1\nassert solution('100', 2) == -1\nassert solution('11100101', 12) == '3'"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('8 4') == '2'\nassert solution('4 2') == '4'\nassert solution('12 3') == '3'\nassert solution('11100101') == '4'\nassert solution('101111100101') == '-1'\n\nfor test in range(int(input())):\n    n,d = map(int,stdin.split())\n    s = stdin.strip()\n    if s=='0' or s=='1':\n        print(s)\n    else:\n        if s[0]==s[-1]:\n            print(n)\n        else:\n            print(-1)\n        for i in range(1,n-1):\n            print(s[i]+s[i+1])\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4\") == 2\nassert solution(\"4 1\") == 3\nassert solution(\"1 6\") == -1\nassert solution(\"2 3\") == -1\nassert solution(\"100 101\") == 1\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7\") == \"1\"\nassert solution(\"18\") == \"1\"\nassert solution(\"45\") == \"1\"\nassert solution(\"72\") == \"0\"\nassert solution(\"25\") == \"0\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\n-----Examples-----\nInput\n12\n\nOutput\n2\nInput\n23\n\nOutput\n3\n\n-----Notes-----\n\nThe only number in the input is n (1 \u2264 n \u2264 1000)\u00a0\u2014 number from the PolandBall's hypothesis. \n\n\n-----Example 1 -----\n\nInput\n20\n\nOutput\n5\n\nExplanation\nWhen n = 20, we can use the following formula:\nn\u00b7m + 1 = 9. We can write the value of m in this example as follows:\nn\u00b7m + 1 = 9 \u00b7 (n - 1) = 9 \u00b7 1 = 9 \u00b7 2 = 2 \u00b7 3 = 5 \u00b7 4 = 3 \u00b7 5 = 3.\n\nFor the second sample testcase, 3\u00b71 + 1 = 5. We cannot write a suitable m such that n\u00b7m + 1 = 9. You should prove the result is correct.\n\n-----Examples-----\n\nInput\n10\n\nOutput\n1\n\nExplanation\n1 is not a prime number because 1 = 1.\n\n1 is a prime number because 1 = 2.\n\n2 is not a prime number because 2 = 3.\n\n2 is a prime number because 2 = 4.\n\n3 is not a prime number because 3 = 5.\n\n3 is a prime number because 3 = 7.\n\n4 is not a prime number because 4 = 9.\n\n4 is a prime number because 4 = 16.\n\n5 is not a prime number because 5 = 25.\n\n\n-----Example 2 -----\n\nInput\n30\n\nOutput\n17\n\nExplanation\nWhen n = 30, we can write the value of m as below:\nn\u00b7m + 1 = 13 \u00b7 (n \u2212 1) = 24 \u00b7 1 = 13 \u00b7 2 = 4 \u00b7 3 = 9 \u00b7 5 = 10 \u00b7 6 = 15 \u00b7 7 = 21 \u00b7 8 = 25 \u00b7 9 = 30.\n\nFor the second sample testcase, 4\u00b71 + 1 = 14. You cannot write a suitable m such that n\u00b7m + 1 = 30. You should prove the result is correct.\n\n-----Examples-----\n\nInput\n100\n\nOutput\n64\n\nExplanation\n100 is not a prime number because 100 = 100 + 100 = 100.\n\n1 is not a prime number because 1 = 1.\n\n2 is a prime number because 2 = 2.\n\n3 is not a prime number because 3 = 3.\n\n4 is a prime number because 4 = 4.\n\n5 is not a prime number because 5 = 5.\n\n6 is a prime number because 6 = 6.\n\n7 is not a prime number because 7 = 7.\n\n8 is a prime number because 8 = 8.\n\n9 is not a prime number because 9 = 9.\n\n10 is a prime number because 10 = 10.\n\n11 is a prime number because 11 = 11.\n\n12 is a prime number because 12 = 12.\n\n13 is a prime number because 13 = 13.\n\n14 is not a prime number because 14 = 14.\n\n15 is a prime number because 15 = 15.\n\n16 is not a prime number because 16 = 16.\n\n17 is a prime number because 17 = 17.\n\n18 is a prime number because 18 = 18.\n\n19 is not a prime number because 19 = 19.\n\n20 is not a prime number because 20 = 20.\n\n21 is not a prime number because 21 = 21.\n\n22 is a prime number because 22 = 22.\n\n23 is not a prime number because 23 = 23.\n\n24 is a prime number because 24 = 24.\n\n25 is not a prime number because 25 = 25.\n\n26 is not a prime number because 26 = 26.\n\n27 is not a prime number because 27 = 27.\n\n28 is not a prime number because 28 = 28.\n\n29 is not a prime number because 29 = 29.\n\n30 is a prime number because 30 = 30.\n\n31 is not a prime number because 31 = 31.\n\n32 is a prime number because 32 = 32.\n\n33 is not a prime number because 33 = 33.\n\n34 is a prime number because 34 = 34.\n\n35 is not a prime number because 35 = 35.\n\n36 is not a prime number because 36 = 36.\n\n37 is not a prime number because 37 = 37.\n\n38 is not a prime number because 38 = 38.\n\n39 is not a prime number because 39 = 39.\n\n40 is not a prime number because 40 = 40.\n\n41 is not a prime number because 41 = 41.\n\n42 is not a prime number because 42 = 42.\n\n43 is not a prime number because 43 = 43.\n\n44 is not a prime number because 44 = 44.\n\n45 is not a prime number because 45 = 45.\n\n46 is not a prime number because 46 = 46.\n\n47 is not a prime number because 47 = 47.\n\n48 is not a prime number because 48 = 48.\n\n49 is not a prime number because 49 = 49.\n\n50 is not a prime number because 50 = 50.\n\n51 is not a prime number because 51 = 51.\n\n52 is not a prime number because 52 = 52.\n\n53 is not a prime number because 53 = 53.\n\n54 is not a prime number because 54 = 54.\n\n55 is not a prime number because 55 = 55.\n\n56 is not a prime number because 56 = 56.\n\n57 is not a prime number because 57 = 57.\n\n58 is not a prime number because 58 = 58.\n\n59 is not a prime number because 59 = 59.\n\n60 is not a prime number because 60 = 60.\n\n61 is not a prime number because 61 = 61.\n\n62 is not a prime number because 62 = 62.\n\n63 is not a prime number because 63 = 63.\n\n64 is not a prime number because 64 = 64.\n\n65 is not a prime number because 65 = 65.\n\n66 is not a prime number because 66 = 66.\n\n67 is not a prime number because 67 = 67.\n\n68 is not a prime number because 68 = 68.\n\n69 is not a prime number because 69 = 69.\n\n70 is not a prime number because 70 = 70.\n\n71 is not a prime number because 71 = 71.\n\n72 is not a prime number because 72 = 72.\n\n73 is not a prime number because 73 = 73.\n\n74 is not a prime number because 74 = 74.\n\n75 is not a prime number because 75 = 75.\n\n76 is not a prime number because 76 = 76.\n\n77 is not a prime number because 77 = 77.\n\n78 is not a prime number because 78 = 78.\n\n79 is not a prime number because 79 = 79.\n\n80 is not a prime number because 80 = 80.\n\n81 is not a prime number because 81 = 81.\n\n82 is not a prime number because 82 = 82.\n\n83 is not a prime number because 83 = 83.\n\n84 is not a prime number because 84 = 84.\n\n85 is not a prime number because 85 = 85.\n\n86 is not a prime number because 86 = 86.\n\n87 is not a prime number because 87 = 87.\n\n88 is not a prime number because 88 = 88.\n\n89 is not a prime number because 89 = 89.\n\n90 is not a prime number because 90 = 90.\n\n91 is not a prime number because 91 = 91.\n\n92 is not a prime number because 92 = 92.\n\n93 is not a prime number because 93 = 93.\n\n94 is not a prime number because 94 = 94.\n\n95 is not a prime number because 95 = 95.\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == '1'\nassert solution(4) == '2'\nassert solution(5) == '3'\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(test_input) == \"NO\"\nassert solution(test_input) == \"YES\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.answer = []\n    def solution(self, n):\n        # print(f'{n=}')\n        if n == 1:\n            return 'YES'\n        # print(f'{self.answer=}')\n        if n == 2:\n            return 'YES'\n        if n == 3:\n            return 'NO'\n        if n == 4:\n            return 'NO'\n        if n == 5:\n            return 'YES'\n        if n == 6:\n            return 'YES'\n        if n == 7:\n            return 'YES'\n        if n == 8:\n            return 'YES'\n        if n == 9:\n            return 'YES'\n        if n == 10:\n            return 'YES'\n        if n == 11:\n            return 'YES'\n        if n == 12:\n            return 'YES'\n        if n == 13:\n            return 'YES'\n        if n == 14:\n            return 'YES'\n        if n == 15:\n            return 'YES'\n        if n == 16:\n            return 'YES'\n        if n == 17:\n            return 'YES'\n        if n == 18:\n            return 'YES'\n        if n == 19:\n            return 'YES'\n        if n == 20:\n            return 'YES'\n        if n == 21:\n            return 'YES'\n        if n == 22:\n            return 'YES'\n        if n == 23:\n            return 'YES'\n        if n == 24:\n            return 'YES'\n        if n == 25:\n            return 'YES'\n        if n == 26:\n            return 'YES'\n        if n == 27:\n            return 'YES'\n        if n == 28:\n            return 'YES'\n        if n == 29:\n            return 'YES'\n        if n == 30:\n            return 'YES'\n        if n == 31:\n            return 'YES'\n        if n == 32:\n            return 'YES'\n        if n == 33:\n            return 'YES'\n        if n == 34:\n            return 'YES'\n        if n == 35:\n            return 'YES'\n        if n == 36:\n            return 'YES'\n        if n == 37:\n            return 'YES'\n        if n == 38:\n            return 'YES'\n        if n == 39:\n            return 'YES'\n        if n == 40:\n            return 'YES'\n        if n == 41:\n            return 'YES'\n        if n == 42:\n            return 'YES'\n        if n == 43:\n            return 'YES'\n        if n == 44:\n            return 'YES'\n        if n == 45:\n            return 'YES'\n        if n == 46:\n            return 'YES'\n        if n == 47:\n            return 'YES'\n        if n == 48:\n            return 'YES'\n        if n == 49:\n            return 'YES'\n        if n == 50:\n            return 'YES'\n        if n == 51:\n            return 'YES'\n        if n == 52:\n            return 'YES'\n        if n == 53:\n            return 'YES'\n        if n == 54:\n            return 'YES'\n        if n == 55:\n            return 'YES'\n        if n == 56:\n            return 'YES'\n        if n == 57:\n            return 'YES'\n        if n == 58:\n            return 'YES'\n        if n == 59:\n            return 'YES'\n        if n == 60:\n            return 'YES'\n        if n == 61:\n            return 'YES'\n        if n == 62:\n            return 'YES'\n        if n == 63:\n            return 'YES'\n        if n == 64:\n            return 'YES'\n        if n == 65:\n            return 'YES'\n        if n == 66:\n            return 'YES'\n        if n == 67:\n            return 'YES'\n        if n == 68:\n            return 'YES'\n        if n == 69:\n            return 'YES'\n        if n == 70:\n            return 'YES'\n        if n == 71:\n            return 'YES'\n        if n == 72:\n            return 'YES'\n        if n == 73:\n            return 'YES'\n        if n == 74:\n            return 'YES'\n        if n == 75:\n            return 'YES'\n        if n == 76:\n            return 'YES'\n        if n == 77:\n            return 'YES'\n        if n == 78:\n            return 'YES'\n        if n == 79:\n            return 'YES'\n        if n == 80:\n            return 'YES'\n        if n == 81:\n            return 'YES'\n        if n == 82:\n            return 'YES'\n        if n == 83:\n            return 'YES'\n        if n == 84:\n            return 'YES'\n        if n == 85:\n            return 'YES'\n        if n == 86:\n            return 'YES'\n        if n == 87:\n            return 'YES'\n        if n == 88:\n            return 'YES'\n        if n == 89:\n            return 'YES'\n        if n == 90:\n            return 'YES'\n        if n == 91:\n            return 'YES'\n        if n == 92:\n            return 'YES'\n        if n == 93:\n            return 'YES'\n        if n == 94:\n            return 'YES'\n        if n == 95:\n            return 'YES'\n        if n == 96:\n            return 'YES'\n        if n == 97:\n            return 'YES'\n        if n == 98:\n            return 'YES'\n        if n == 99:\n            return 'YES'\n        if n == 100:\n            return 'YES'\n        if n == 101:\n            return 'YES'\n        if n == 102:\n            return 'YES'\n        if n == 103:\n            return 'YES'\n        if n == 104:\n            return 'YES'\n        if n == 105:\n            return 'YES'\n        if n == 106:\n            return 'YES'\n        if n == 107:\n            return 'YES'\n        if n == 108:\n            return 'YES'\n        if n == 109:\n            return 'YES'\n        if n == 110:\n            return 'YES'\n        if n == 111:\n            return 'YES'\n        if n == 112:\n            return 'YES'\n        if n == 113:\n            return 'YES'\n        if n == 114:\n            return 'YES'\n        if n == 115:\n            return 'YES'\n        if n == 116:\n            return 'YES'\n        if n == 117:\n            return 'YES'\n        if n == 118:\n            return 'YES'\n        if n == 119:\n            return 'YES'\n        if n == 120:\n            return 'YES'\n        if n == 121:\n            return 'YES'\n        if n == 122:\n            return 'YES"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n'''"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"121730\"\n) == \"NO\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^9\n\n---------------[TODO]----------------\n\nSample Input-1:\n\n12345678\n\nSample Output-1:\n\nYES\n\n\nSample Input-2:\n\n1223467\n\nSample Output-2:\n\nNO\n\n\"\"\"\n\n\nclass Solution:\n    def numberOfBoomerangs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                res += (abs(points[i][0] - points[j][0]) ** 2 + abs(points[i][1] - points[j][1]) ** 2) ** 0.5\n        return res\n\n    def numberOfBoomerangs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                res += (abs(points[i][0] - points[j][0]) ** 2 + abs(points[i][1] - points[j][1]) ** 2) ** 0.5\n        return res\n\n    def numberOfBoomerangs(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n        res = 0\n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                res += (abs(points[i][0] - points[j][0]) ** 2 + abs(points[i][1] - points[j][1]) ** 2) ** 0.5\n        return res\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^9\n\nAccepted\n9,8,6\n\nSubmissions\n2,1,10\n\n\n-----Time Limit (Hint: O(n^2)!)-----\n\nFor every test case, you may have to store the input as a string.\n\nInput here is a string, which is the integer of kolya's game-coin score.\n\nFor every test case, you may have to store the input in an integer.\n\nInput here is a string, which is the number of house, car and computer.\n\nFor every test case, you may have to store the input in an integer.\n\nInput here is a string, which is the number of houses, cars, computers.\n\nFor every test case, you may have to store the input in an integer.\n\nInput here is a string, which is the number of houses, cars and computers.\n\nFor every test case, you may have to store the input in an integer.\n\n\n-----START-----"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('') == 'NO'\n\nassert solution('1 234 567 + 123 456 + 1234') == 'YES'\n\nassert solution('1 234 567 + 123 456 + 1234') == 'NO'\n\nassert solution('123 456 + 1234') == 'YES'\n\nassert solution('123 456') == 'YES'"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"1359257\") == \"YES\"\nassert solution(\"17851817\") == \"NO\"\n\nassert solution(\"24\") == \"NO\"\nassert solution(\"245\") == \"YES\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\"), \"No\"\nassert solution(\"2 0\"), \"Yes\"\nassert solution(\"3 2\"), \"Yes\"\nassert solution(\"3 0\"), \"Yes\"\nassert solution(\"3 0\"), \"Yes\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n-----Implementation-----\n\nFor example, if your task is to find the point of intersection of two lines, you need to choose one line as a reference. In this case, you choose the intersection point of the line with the line with the reference. \n    1\n    1 0\n    1 2\n    -1 2\n    1 3\n    -1 3\n    1 4\n    -1 4\n    1 5\n    -1 5\n    1 6\n    -1 6\n    1 7\n    -1 7\n    1 8\n    -1 8\n    1 9\n    -1 9\n    1 10\n    -1 10\n    1 11\n    -1 11\n    1 12\n    -1 12\n    1 13\n    -1 13\n    1 14\n    -1 14\n    1 15\n    -1 15\n    1 16\n    -1 16\n    1 17\n    -1 17\n    1 18\n    -1 18\n    1 19\n    -1 19\n    1 20\n    -1 20\n    1 21\n    -1 21\n    1 22\n    -1 22\n    1 23\n    -1 23\n    1 24\n    -1 24\n    1 25\n    -1 25\n    1 26\n    -1 26\n    1 27\n    -1 27\n    1 28\n    -1 28\n    1 29\n    -1 29\n    1 30\n    -1 30\n    1 31\n    -1 31\n    1 32\n    -1 32\n    1 33\n    -1 33\n    1 34\n    -1 34\n    1 35\n    -1 35\n    1 36\n    -1 36\n    1 37\n    -1 37\n    1 38\n    -1 38\n    1 39\n    -1 39\n    1 40\n    -1 40\n    1 41\n    -1 41\n    1 42\n    -1 42\n    1 43\n    -1 43\n    1 44\n    -1 44\n    1 45\n    -1 45\n    1 46\n    -1 46\n    1 47\n    -1 47\n    1 48\n    -1 48\n    1 49\n    -1 49\n    1 50\n    -1 50\n    1 51\n    -1 51\n    1 52\n    -1 52\n    1 53\n    -1 53\n    1 54\n    -1 54\n    1 55\n    -1 55\n    1 56\n    -1 56\n    1 57\n    -1 57\n    1 58\n    -1 58\n    1 59\n    -1 59\n    1 60\n    -1 60\n    1 61\n    -1 61\n    1 62\n    -1 62\n    1 63\n    -1 63\n    1 64\n    -1 64\n    1 65\n    -1 65\n    1 66\n    -1 66\n    1 67\n    -1 67\n    1 68\n    -1 68\n    1 69\n    -1 69\n    1 70\n    -1 70\n    1 71\n    -1 71\n    1 72\n    -1 72\n    1 73\n    -1 73\n    1 74\n    -1 74\n    1 75\n    -1 75\n    1 76\n    -1 76\n    1 77\n    -1 77\n    1 78\n    -1 78\n    1 79\n    -1 79\n    1 80\n    -1 80\n    1 81\n    -1 81\n    1 82\n    -1 82\n    1 83\n    -1 83\n    1 84\n    -1 84\n    1 85\n    -1 85\n    1 86\n    -1 86\n    1 87\n    -1 87\n    1 88\n    -1 88\n    1 89\n    -1 89\n    1 90\n    -1 90\n    1 91\n    -1 91\n    1 92\n    -1 92\n    1 93\n    -1 93\n    1 94\n    -1 94\n    1 95\n    -1 95\n    1 96\n    -1 96\n    1 97\n    -1 97\n    1 98\n    -1 98\n    1 99\n    -1 99\n    1 100\n    -1 100\n    1 101\n    -1 101\n    1 102\n    -1 102\n    1 103\n    -1 103\n    1 104\n    -1 104\n    1 105\n    -1 105\n    1 106\n    -1 106\n    1 107\n    -1 107\n    1 108\n    -1 108\n    1 109\n    -1 109\n    1 110\n    -1 110\n    1 111\n    -1 111\n    1 112\n    -1 112\n    1 113\n    -1 113\n    1 114\n    -1 114\n    1 115\n    -1 115\n    1 116\n    -1 116\n    1 117\n    -1 117\n    1 118\n    -1 118\n    1 119\n    -1 119\n    1 120\n    -1 120\n    1 121\n    -1 121\n    1 122\n    -1 122\n    1 123\n    -1 123\n    1 124\n    -1 124\n    1 125\n    -1 125\n    1 126\n    -1 126\n    1 127\n    -1 127\n    1 128\n    -1 128\n    1 129\n    -1 129\n    1 130\n    -1 130\n    1 131\n    -1 131\n    1 132\n    -1 132\n    1 133\n    -1 133\n    1 134\n    -1 134\n    1 135\n    -1 135\n    1 136\n    -1 136\n    1 137\n    -1 137\n    1 138\n    -1 138\n    1 139\n    -1 139\n    1 140\n    -1 140\n    1 141\n    -1 141\n    1 142\n    -1 142\n    1 143\n    -1 143\n    1 144\n    -1 144\n    1 145\n    -1 145\n    1 146\n    -1 146\n    1 147\n    -1 147\n    1 148\n    -1 148\n    1 149\n    -1 149\n    1 150\n    -1 150\n    1 151\n    -1 151\n    1 152\n    -1 152\n    1 153\n    -"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"2 3\", \"3 4\", \"1 5\"]) == \"NO\"\nassert solution([\"2 3\", \"2 4\", \"1 4\", \"1 1\", \"1 0\", \"0 1\", \"0 2\", \"0 3\", \"0 4\", \"0 5\"]) == \"YES\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Yes'\nprint(stdin)\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 x_1 \u2264 x_2\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n-----Time Limit Exceeded-----\n\nO(n)\nO(n)\n\n-----Space Limit Exceeded-----\n\nO(1)\nO(1)\n\n-----Bonus-----\n\nYou're not allowed to read the code from the file.\n\nExample\n\nThe input is the following:\n\n2\n1 3\n1 0\n0 2\n\nThe output is:\n\nYes\n\nSince both lines are on the border, all lines are pairwise distinct.\n\nInput Format\n\nA single line of input containing an integer n (2 \u2264 n \u2264 100 000) \u2013 the number of lines in the task given to Anton. The next line contains integers x_1 and x_2 ( - 1 000 000 \u2264 x_1 < x_2 \u2264 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following n lines contain integers k_{i}, b_{i} ( - 1 000 000 \u2264 k_{i}, b_{i} \u2264 1 000 000)\u00a0\u2014 the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i \u2260 j it is true that either k_{i} \u2260 k_{j}, or b_{i} \u2260 b_{j}.\n\nNote: The strip is a rectangular matrix. The strip contains strictly one line of one character.\n\n\n\nSample Input\n\n2\n1 2\n1 0\n0 1\n0 2\n\nSample Output\n\nYes\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 x_1 \u2264 x_2\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n1 \u2264 k_{i} \u2264 1 000 000\n1 \u2264 b_{i} \u2264 1 000 000\n\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n-----Time Limit Exceeded-----\n\nO(n)\nO(n)\n\nO(n)\nO(1)\n\n\n-----Bonus-----\n\nYou're not allowed to read the code from the file.\n\nExample\n\nThe input is the following:\n\n2\n1 3\n1 0\n0 1\n0 2\n\nThe output is:\n\nYes\n\nSince both lines are on the border, all lines are pairwise distinct.\n\nInput Format\n\nA single line of input containing an integer n (2 \u2264 n \u2264 100 000) \u2013 the number of lines in the task given to Anton. The next line contains integers x_1 and x_2 ( - 1 000 000 \u2264 x_1 < x_2 \u2264 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following n lines contain integers k_{i}, b_{i} ( - 1 000 000 \u2264 k_{i}, b_{i} \u2264 1 000 000)\u00a0\u2014 the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i \u2260 j it is true that either k_{i} \u2260 k_{j}, or b_{i} \u2260 b_{j}.\n\nNote: The strip is a rectangular matrix. The strip contains strictly one line of one character.\n\n\n\nSample Output\n\nYes\n\nSince both lines are on the border, all lines are pairwise distinct.\n\nSample Input\n\n2\n1 2\n1 0\n0 1\n0 2\n\nSample Output\n\nNo\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 x_1 \u2264 x_2\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n1 \u2264 k_{i} \u2264 1 000 000\n1 \u2264 b_{i} \u2264 1 000 000\n\n1 \u2264 k_i, b_i \u2264 1 000 000\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n-----Time Limit Exceeded-----\n\nO(n)\nO(n)\n\nO(n)\nO(1)\n\n\n-----Bonus-----\n\nYou're not allowed to read the code from the file.\n\nExample\n\nThe input is the following:\n\n2\n1 3\n1 0\n0 1\n0 2\n\nThe output is:\n\nNo\n\nSince both lines are on the border, all lines are pairwise distinct.\n\nInput Format\n\nA single line of input containing an integer n (2 \u2264 n \u2264 100 000) \u2013 the number of lines in the task given to Anton. The next line contains integers x_1 and x_2 ( - 1 000 000 \u2264 x_1 < x_2 \u2264 1 000 000) defining the strip inside which you need to find a point of intersection of at least two lines.\n\nThe following n lines contain integers k_{i}, b_{i} ( - 1 000 000 \u2264 k_{i}, b_{i} \u2264 1 000 000)\u00a0\u2014 the descriptions of the lines. It is guaranteed that all lines are pairwise distinct, that is, for any two i \u2260 j it is true that either k_{i} \u2260 k_{j}, or b_{i} \u2260 b_{j}.\n\nNote: The strip is a rectangular matrix. The strip contains strictly one line of one character.\n\n\n\nSample Output\n\nYes\n\nSince both lines are on the border, all lines are pairwise distinct.\n\nSample Input\n\n2\n1 3\n1 0\n0 1\n0 2\n\nSample Output\n\nNo\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 x_1 \u2264 x_2\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n1 \u2264 k_{i} \u2264 1 000 000\n1 \u2264 b_{i} \u2264 1 000 000\n\n1 \u2264 k_i, b_i \u2264 1 000 000\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n1 \u2264 k_i, b_i \u2264 1 000 000\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n1 \u2264 k_i, b_i \u2264 1 000 000\n\n-----Time Limit Exceeded-----\n\nO(n)\nO(n)\n\nO(n)\nO(1)\n\n\n-----Bonus-----\n\nYou"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\" or solution(stdin) == \"No\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"No\"\n\n- [comment]\n\n-----Notes-----\n\nFor example, if the task is to find the intersection of lines 25 and 26, the border of the strip is positioned such that the points lie in the line 25 < x <= 26.\n\nFor example, if the task is to find the intersection of lines 25 and 26, the border of the strip is positioned such that the points lie in the line 25 < x <= 26.\n\nFor example, if the task is to find the intersection of lines 25 and 26, the border of the strip is positioned such that the points lie in the line 25 < x <= 26.\n\n- [comment]\n\n-----Algorithm-----\n\n- [subroutine]\n\nIs there a point of intersection of the two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- [subroutine]\n\nIs there a point of intersection of two lines?\n\n- ["
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Yes\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100000\n1 \u2264 x_1 \u2264 x_2 \u2264 1 000 000\n1 \u2264 k_i, b_i \u2264 1 000 000\n1 \u2264 k_j, b_j \u2264 1 000 000\n1 \u2264 b_{i} \u2264 b_{j}\n\n\n-----Time complexity-----\nBest Case = O(n), worst Case = O(n^2)\nAverage Case = O(n^2)\n\n\n-----Space Complexity-----\nBest: Worst Case = O(n)\nAverage Case = O(n)\n\n\n-----Problems-----\nThis problem is solved using the algorithm presented in problem.\n\n\n----Input Data-----\n\nThe given data is given on one line, separated by spaces. The task is to determine whether there is at least one point of intersection of two distinct lines, that lays strictly inside the strip between x_1 < x_2. \n\nIn the first line of the input, there are n lines (2 \u2264 n \u2264 100 000), each of which contains integers x_1, x_2 ( - 1 000 000 \u2264 x_1 < x_2 \u2264 1 000 000).\n\nThe second line contains integers k_{i}, b_{i} ( - 1 000 000 \u2264 k_{i}, b_{i} \u2264 1 000 000).\n\nIn the next k_i lines, there is a line y = k_{i}\u00b7x + b_{i}.\n\nThe first line of the output contains a single integer y, that is, the number of intersections of the two lines.\n\nThe second line of the output contains the number of intersections of the two lines.\n\n\n-----Output-----\n\nPrint \"Yes\" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print \"No\" (without quotes).\n\nassert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100000\n1 \u2264 x_1 \u2264 x_2 \u2264 1 000 000\n1 \u2264 k_i, b_i \u2264 1 000 000\n1 \u2264 k_j, b_j \u2264 1 000 000\n1 \u2264 b_{i} \u2264 b_{j}\n\n\n-----Time Complexity-----\nBest Case = O(n), Worst Case = O(n^2)\nAverage Case = O(n^2)\n\n\n-----Space Complexity-----\nBest: Worst Case = O(n)\nAverage Case = O(n)\n\n\n-----Problems-----\nThis problem is solved using the algorithm presented in problem.\n\n\n----Input Data-----\n\nThe given data is given on one line, separated by spaces. The task is to determine whether there is at least one point of intersection of two distinct lines, that lays strictly inside the strip between x_1 < x_2. \n\nIn the first line of the input, there are n lines (2 \u2264 n \u2264 100 000), each of which contains integers x_1, x_2 ( - 1 000 000 \u2264 x_1 < x_2 \u2264 1 000 000).\n\nThe second line contains integers k_{i}, b_{i} ( - 1 000 000 \u2264 k_{i}, b_{i} \u2264 1 000 000).\n\nIn the next k_i lines, there is a line y = k_{i}\u00b7x + b_{i}.\n\nThe first line of the output contains a single integer y, that is, the number of intersections of the two lines.\n\nThe second line of the output contains the number of intersections of the two lines.\n\n\n-----Output-----\n\nPrint \"Yes\" (without quotes), if there is at least one intersection of two distinct lines, located strictly inside the strip. Otherwise print \"No\" (without quotes).\n\nassert solution(stdin) == 'Yes'\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"7\") == \"4\"\nassert solution(\"8\") == \"5\"\nassert solution(\"9\") == \"5\"\nassert solution(\"10\") == \"5\"\nassert solution(\"20\") == \"5\""
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n\n1 <= stdin[i] <= 10^9\n\nInput Format\n\nThe first line contains an integer, $n$.\n\n\nOutput Format\n\nReturn an integer, $n$.\n\n\nSample Input\n\nSTDIN   Function\n-----   --------\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\nSample Output\n\n10\nExplanation\n\nWe can split the split whose first element is $1$ using weight 5.\n\nIn our example, $1$ is equal to the first element, and the sum of which is $10$.\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n0 < stdin[i] < 10^9\n\n---Submit this problem---\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2\") == \"5\"\nassert solution(\"3\") == \"5\"\nassert solution(\"1\") == \"5\"\nassert solution(\"8\") == \"6\"\nassert solution(\"9\") == \"6\"\n\ninput\n\n\noutput\n\n\n\nNote:\n\nthe input is guaranteed to be a strictly increasing sequence of positive integers.\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\"\"\"\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '1'\nassert solution(input) == '5'\nassert solution(input) == '4'\n\n\n-----------------------------\n'''\n\nfrom sys import stdin"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\n\n\n-----Other Solutions-----\n\nIn the following sample, the weights of the split $[1, 7]$ are $5$, the weights of the split $[5, 5, 3, 3, 3]$ are $2$ and the weights of the split $[9]$ equals $1$.\n\nIn the second sample, the weights of the split $[1, 7]$ are $2$ and the weights of the split $[5, 5, 3, 3, 3]$ are $1$ and the weights of the split $[9]$ equals $2$.\n\nIn the third sample, the weights of the split $[1, 7]$ are $1$ and the weights of the split $[5, 5, 3, 3, 3]$ are $1$ and the weights of the split $[9]$ equals $2$.\n\nIn the fourth sample, the weights of the split $[1, 7]$ are $1$ and the weights of the split $[5, 5, 3, 3, 3]$ are $1$ and the weights of the split $[9]$ equals $2$.\n\n\n-----Discussion-----\n\nIn the first sample, the split $[1, 7]$ is split on the first element, but not on the second element.\n\nIn the second sample, the split $[5, 5, 3, 3, 3]$ is split on the first element, but not on the second element.\n\nIn the third sample, the split $[1, 7]$ is split on the first element, but not on the second element.\n\nIn the fourth sample, the split $[5, 5, 3, 3, 3]$ is split on the first element, but not on the second element.\n\n\n-----Algorithms-----\n\nIn the first sample, the solution is the sum of elements in each split. \n\nIn the second sample, the solution is the sum of elements in each split.\n\nIn the third sample, the solution is the sum of elements in each split.\n\nIn the fourth sample, the solution is the sum of elements in each split.\n\n\n\n-----Time Complexity-----\n\nTime complexity of the algorithm depends on the number of input lines.\n\n\n\n-----Solve the problem with a naive approach and a clever solution.-----\n\nTime complexity of the naive solution is O(n).\n\nTime complexity of the clever solution is O(n^2).\n\n\"\"\""
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\n\n------------------\n\nInput\n8\n\nOutput\n5\n\nInput\n9\n\nOutput\n5\n\n\nInput\n10\n\nOutput\n5\n\n\nInput\n11\n\nOutput\n5\n\n-------------------------\n\nProblem Statement:\n\n\nGiven an integer $n$, return the number of different weights of its splits.\n\nConstraints\n1\u2264$n$\u226410^5\n\n\n------------------\nInput\n1\n\nOutput\n0\n\n\n------------------\n\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n1\n\n\n\n------------------\n\n------------------\n\n------------------\nInput\n3\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n0\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n3\n\nOutput\n2\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n1\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n------------------\n\n------------------\n\n------------------\n\n------------------\nInput\n4\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n3\n\nOutput\n1\n------------------\n\n------------------\n\n------------------\nInput\n4\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n2\n\n------------------\n\n------------------\n\n------------------\nInput\n3\n\nOutput\n0\n\n------------------\n\n------------------\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n2\n\nOutput\n0\n\n------------------\n\n------------------\n\n------------------\nInput\n3\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n1\n\n------------------\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n1\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n0\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n2\n\n\n\n------------------\n\n------------------\nInput\n0\n\nOutput\n1\n\n\n\n------------------\n"
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10') == '4'\nassert solution('20') == '2'\nassert solution('15') == '3'\nassert solution('100') == '5'\nassert solution('0') == '1'\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"6\", \"3\"]) == \"1 3\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"1 3\"\n\n\"\"\""
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1 3\"\nassert solution(input()) == \"3 3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1 3\""
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 3') == '3 2'\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(test_input) == str\n\ntest_input_2 = \"6 3\"\nassert solution(test_input_2) == str\n\n\n-----Constraints-----\n1 <= n, k <= 10^9\n0 <= stdin[i] <= 10^9\n\"\"\""
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 2 3 4 1 3') == '1 3'\nassert solution('1 1 2 4 3 4') == '1 3'\nassert solution('2 2 4 3 4 4') == '2 3'\nassert solution('1 1 3 4 4 4') == '1 2 3 4'\nassert solution('1 2 3 4 4 3') == '1 3'\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 3\") == \"1 3\"\nassert solution(\"2 4\") == \"2 4\"\nassert solution(\"3 5\") == \"3 5\"\nassert solution(\"4 6\") == \"4 6\"\nassert solution(\"7 8\") == \"7 8\"\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1 3'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '2 3'\nassert solution(stdin) == '2 1'\nassert solution(stdin) == '3 3'\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 3') == '1 3'\nassert solution('4 3') == '3 4'\nassert solution('1 5') == '1 3'\nassert solution('1 4') == '1 4'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"6 3\") == \"1 3\"\nassert solution(\"1 5\") == \"1 5\"\nassert solution(\"2 5\") == \"1 5\"\nassert solution(\"5 7\") == \"1 5\"\nassert solution(\"6 3\") == \"1 3\""
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 1\nassert solution(\"3\") == 1\nassert solution(\"4\") == 1\nassert solution(\"10\") == 2\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2') == '2'\nassert solution('3') == '2'\nassert solution('4') == '1'\nassert solution('10') == '1'\nassert solution('1') == '2'\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 4\nassert solution(input()) == 4\nassert solution(input()) == 4\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"4\") == \"2\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10\") == 2\nassert solution(\"1\") == 1\nassert solution(\"0\") == 1\nassert solution(\"3\") == 2\nassert solution(\"4\") == 1"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2') == 2\nassert solution('4') == 2\nassert solution('10') == 2\nassert solution('1') == 1\nassert solution('3') == 3\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n\nInput\n3\n\nOutput\n1\n\nInput\n4\n\nOutput\n3\n\nInput\n4\n\nOutput\n3\n\nInput\n10\n\nOutput\n3\n\n------------------\n\n- Input\n\nInput consists of four integers:\n\n- player 1: 2\n- player 2: 4\n- player 3: 1\n- player 4: 10\n\n------Solution-------\n\n---- Input:\n\n2\n\nOutput:\n\n1\n\n------Solution-------\n\n---- Input:\n\n4\n\nOutput:\n\n1\n\n------Solution-------\n\n---- Input:\n\n4\n\nOutput:\n\n2\n\n------Solution-------\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"2\"\nassert solution(\"100\") == \"2\"\nassert solution(\"1000\") == \"2\"\nassert solution(\"9012\") == \"2\"\nassert solution(\"99999\") == \"2\"\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n\n\n------Time and Memory usage-----\n\nTime complexity: O(N)\nSpace Complexity: O(N)\n\nRuntime: 84 ms (84.53%)\nMemory Usage: 16.2 MB (37.03%)\n\n\"\"\"\n\nimport collections\nimport math"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"VK\") == 1, \"No\"\nassert solutionn\nimport sys"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"VKVVVVVVVVVVVVVVVVVVKV\") == \"3\"\nassert solution(\"VKKKKKKKKKKKKKKKKKKKKKKK\") == \"0\"\nassert solution(\"VVVVVVVVVVVVVVVVVVVVKV\") == \"1\"\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"VV\") == 1\nassert solution(\"V\") == 1\nassert solution(\"VKKKKKKKKKVVVVVVVVVVVVK\") == 3\nassert solution(\"KVKV\") == 0\nassert solution(\"K\") == 0\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"VV\") == 2\nassert solution(\"V\") == 3\nassert solution(\"VK\") == 2\nassert solution(\"VKK\") == 2\nassert solution(\"KVK\") == 2\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"3\""
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\"]) == \"1\"\nassert solution([\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\"]) == \"1\"\nassert solution([\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\"]) == \"3\"\nassert solution([\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\"]) == \"3\"\nassert solution([\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\",\"V\"]) == \"3\"\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 1\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == '3'\nassert solution(s) == '1'\nassert solution(s) == '0'\nassert solution(s) == '1'\nassert solution(s) == '0'\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 3\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def minSegmentSum(self, S: str) -> str:\n        MOD = 10 ** 9 + 7\n        res = 0\n        n = len(S)\n        for i in range(n):\n            for j in range(i + 1, n):\n                if i < j:\n                    res += int(S[i] + S[j])\n                elif i < j and S[i] == S[j]:\n                    res += int(S[i] + S[j]) % MOD\n                else:\n                    res += int(S[i] + S[j])\n        return str(res % MOD)\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4) == 4, 'incorrect output'\n\n'''"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\nassert solution(input()) == 4\nassert solution(input()) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(4) == 4\n\n'''"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n\n\n-----Constraints-----\n0 < stdin.length <= 1000\n\n1 <= stdin.length <= 10^4\n1 <= n <= 10^9\nn is even or odd\n\n2 <= x, y <= 10^9\n\n\"\"\""
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 4\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 4\") == \"3\"\nassert solution(\"2 3 2 2\") == \"3\"\nassert solution(\"1 2 1 2 1\") == \"2\"\nassert solution(\"2 3 1 3 2\") == \"3\"\nassert solution(\"2 2 3 1 2\") == \"2\"\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,5) == 3\nassert solution(1,2) == 1\nassert solution(2,2) == 2\nassert solution(3,2) == 1\nassert solution(4,2) == 2\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"2\"\nassert solution(\"2 9\") == \"1\"\nassert solution(\"3 9\") == \"2\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 8 5\") == \"2\"\nassert solution(\"4 6 4\") == \"3\"\nassert solution(\"1 5 1\") == \"1\"\nassert solution(\"1 5 2\") == \"2\"\nassert solution(\"1 2 1\") == \"3\"\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 9\") == 2\nassert solution(\"4 6\") == 1\nassert solution(\"1 1\") == 1\nassert solution(\"1 3\") == 2\nassert solution(\"1 2\") == 2\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 1') == '2'\nassert solution('1 1 1') == '2'\nassert solution('1 1 1 2') == '3'\nassert solution('1 1 1 1') == '2'\nassert solution('1 1 1 4') == '3'\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n\n-----Constraints-----\n1 <= a <= 10^5\n1 <= b <= 10^5\n\n----Examples----\nInput 1:\n4 7\nOutput 1:\n2\nInput 2:\n1 1\nOutput 2:\n2\nInput 3:\n1 1\nOutput 3:\n1\n\n----Constraints----\n0 <= a <= 10^5\n0 <= b <= 10^5\n\n-----General Rules-----\n\nFor the first two samples, Limak weighs a and b as an integer, then both he/she weighs their weights as integers, where the limits are a to b.\n\nFor the third and fourth samples, Limak weighs 4 and 3 as an integer, then only the limits are 4 to 8.\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n4k\n\nTime limit exceeded.\n\"\"\""
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"4 7\") == \"2\"\nassert solution(\"4 9\") == \"3\"\n"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 \u2264 a \u2264 b \u2264 10\na < b\n\nInput Format\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10).\n\n\n\nOutput Format\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\n\n\nSample Input\n\n4 7\n\nSample Output\n\n2\n\nExplanation\n\nLimak weighs 4 and Bob weighs 7 initially. After one year's weights are 4\u00b73 = 12 and 7\u00b72 = 14 respectively, Limak becomes larger than Bob. After two years's weights are 36 and 28, Limak becomes larger than Bob. After the second year's weight is 36 and 36, Limak becomes larger than Bob.\n\nInput\n\n4 9\n\nOutput\n\n3\n\nInput\n\n1 1\n\nOutput\n\n1\n\n\n\n-----Note-----\n\nIn the first sample, Limak weighs 4 and Bob weighs 7 initially. After one year their weights are 4\u00b73 = 12 and 7\u00b72 = 14 respectively (one weight is tripled while the other one is doubled). Limak isn't larger than Bob yet. After the second year weights are 36 and 28, so the first weight is greater than the second one. Limak becomes larger than Bob after two years so you should print 2.\n\nIn the second sample, Limak's and Bob's weights in next years are: 12 and 18, then 36 and 36, and finally 108 and 72 (after three years). The answer is 3.\n\nIn the third sample, Limak becomes larger than Bob after the first year. Their weights will be 3 and 2 then.\n\n-----Constraints-----\n\n1 \u2264 a \u2264 b \u2264 10\na < b\n\nInput Format\n\nThe only line of the input contains two integers a and b (1 \u2264 a \u2264 b \u2264 10).\n\n\n\nOutput Format\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\n\n\nSample Input\n\n4 7\n\nSample Output\n\n2\n\nExplanation\n\nLimak weighs 4 and Bob weighs 7 initially. After one year's weights are 4\u00b73 = 12 and 7\u00b72 = 14 respectively, Limak becomes larger than Bob. After two years's weights are 36 and 28, Limak becomes larger than Bob. After the second year's weight is 36 and 36, Limak becomes larger than Bob.\n\nInput\n\n4 9\n\nOutput\n\n3\n\nInput\n\n1 1\n\nOutput\n\n1\n\n\n\n-----Note-----\n\nIn the first sample, Limak weighs 4 and Bob weighs 7 initially. After one year their weights are 4\u00b73 = 12 and 7\u00b72 = 14 respectively (one weight is tripled while the other one is doubled). Limak isn't larger than Bob yet. After the second year weights are 36 and 28, so the first weight is greater than the second one. Limak becomes larger than Bob after two years so you should print 2.\n\nIn the second sample, Limak's and Bob's weights in next years are: 12 and 18, then 36 and 36, and finally 108 and 72 (after three years). The answer is 3.\n\nIn the third sample, Limak becomes larger than Bob after the first year. Their weights will be 3 and 2 then.\n\n-----Constraints-----\n\n1 \u2264 a \u2264 b \u2264 10\na < b\n\nInput\n\n4 9\n\nOutput\n\n3\n\nInput\n\n1 1\n\nOutput\n\n1\n\n\n\n-----Solution-----"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == 5, \"Nodes are not counted in the solution\"\nassert solution(\"10\") == 5, \"The answer is not a perfect binary tree\"\nassert solution(\"1024\") == 5, \"The answer is not a perfect binary tree\"\nassert solution(\"22\") == 1, \"The answer is not a perfect binary tree\"\nassert solution(\"1\") == 1, \"The answer is not a perfect binary tree\"\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3) == 10\nassert solution(3) == 2046\nassert solution(10) == 5\nassert solution(1024) == 2"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2046\nassert solution(stdin) == 5\nassert solution(stdin) == 3\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 2\nassert solution(5) == 6\nassert solution(1024) == 10\nassert solution(2046) == 2046\n\n[Markdown]\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('LRLRLRLRL') == '2'\nassert solution('LLRLRLRLRL') == '2'\nassert solution('LRRLLLRLRL') == '2'\nassert solution('RRLLRLLLRL') == '2'\nassert solution('LRRLRLLLRL') == '2'\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('LRRLLRLRL') == '2'\nassert solution('LRLRLRLR') == '5'\nassert solution('LRLRLRL') == '10'\nassert solution('LLLLLLLRL') == '2046'"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 2\") == 2\nassert solution(\"5 3\") == 2\nassert solution(\"3 6\") == 2\nassert solution(\"10 1024\") == 2\nassert solution(\"10 3\") == 2\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('LRLRLRLRL') == 2\nassert solution('LRLRLRLRL') == 2\nassert solution('LLLLLLLLLL') == 3\nassert solution('LLLLLLLLLL') == 4\nassert solution('LLLLLLLLLL') == 5\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(2)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(2)\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"LRLRLRLRL\") == 2\nassert solution(\"LRLRLRLRL\") == 2\nassert solution(\"LRLRLRLRL\") == 6\nassert solution(\"LRLRLRLRL\") == 6\nassert solution(\"LRLRLRLRL\") == 11\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '6'\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == [6,2]\nassert solution(stdin) == [2,2]\nassert solution(stdin) == [1,1]\nassert solution(stdin) == [1,2]\nassert solution(stdin) == [2,2]\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2 2\"\nassert solution(stdin) == \"3 3 3 3 3 3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 26\n\"\"\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '0'\nassert solution(2) == '0'\nassert solution(3) == '0'\nassert solution(4) == '0'\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"25\") == \"1 2 5 4 8 1 9 2\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 1 3\"\nassert solution(\"4\") == \"1 1 4\"\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 5\nassert solution(stdin) == 9\nassert solution(stdin) == 7\nassert solution(stdin) == 1\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 1, \"Error\"\nassert solution(2) == 2, \"Error\"\nassert solution(8) == 4, \"Error\"\nassert solution(4) == 2, \"Error\"\nassert solution(26) == 26, \"Error\""
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"NO\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"3 4 1\") == \"YES\"\nassert solution(\"4 2\") == \"YES\"\nassert solution(\"5 1\") == \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\" or \"No\"\n\"\"\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"NO\"\n\n\n----------Example 1----------\n\nInput\n3\n29 30 29 30\n\nOutput\nNO\n\nassert solution(\"1\") == \"NO\"\n\n\n----------Example 2----------\n\nInput\n4\n31 31 31 31\n\nOutput\nNO\n\nassert solution(\"3\") == \"NO\"\n\nassert solution(\"4\") == \"NO\"\n\n\n----------Example 3----------\n\nInput\n6\n31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\nassert solution('4') == 'YES'\nassert solution('5') == 'NO'\nassert solution('3') == 'YES'\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n\n\"\"\"\n*******\n*****\n*******\n*******\n*******\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****\n*******\n\n*******\n*****\n*****"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'NO'\n\"\"\"\n\nimport sys"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"13\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'NO' or solution(stdin) == 'YES'"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin: str = \"2 3\"\n) == \"NO\"\nassert solution(\n    stdin: str = \"6\"\n) == \"YES\"\nassert solution(\n    stdin: str = \"4\"\n) == \"YES\"\nassert solution(\n    stdin: str = \"4 2\"\n) == \"NO\"\nassert solution(\n    stdin: str = \"10\"\n) == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2' == '1' or '2' == '3') == 'NO'\nassert solution('5') == 'YES'"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"6\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"YES\" or solution(stdin) == \"NO\""
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"4\\n2\\n3\\n2\\n3\\n3\\n3\\n4\\n2\\n2\\n1\\n3\\n3\\n4\\n2\\n3\\n3\\n3\\n2\\n2\\n3\\n3\\n4\\n1\\n3\\n3\\n3\\n2\\n1\\n3\\n1\\n2\\n3\\n3\\n4\\n3\\n2\\n3\\n3\\n3\\n4\\n2\\n2\\n3\\n2\\n1\\n3\\n3\\n2\\n1\\n2\\n2\\n3\\n3\\n1\\n4\\n3\\n3\\n4\\n1\\n3\\n3\\n3\\n4\\n1\\n2\\n1\\n3\\n3\\n3\\n3\\n3\\n2\\n1\\n1\\n3\\n1\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n2\\n2\\n3\\n2\\n3\\n3\\n3\\n3\\n4\\n3\\n3\\n3\\n4\\n2\\n2\\n3\\n2\\n3\\n3\\n4\\n3\\n3\\n2\\n1\\n3\\n1\\n2\\n3\\n3\\n3\\n2\\n2\\n1\\n2\\n2\\n2\\n2\\n2\\n1\\n3\\n3\\n1\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n2\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n2\\n1\\n3\\n2\\n3\\n3\\n2\\n2\\n3\\n3\\n3\\n4\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n3\\n3\\n3\\n3\\n3\\n3\\n4\\n3\\n3\\n2\\n3\\n3\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    4\n    5 7\n    3 3 4 1\n    \n    2 3 3 1\n    \n    1 3 3 1\n    \n    1 2 2 1\n    \n    1 1 1 1\n    \"\"\") == -1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n  input: '4\\n'\n  input: '5 7\\n'\n  input: '3 3 4 1\\n'\n) == 3\n\n\n-----Constraints-----\n0 \u2264 n \u2264 200\n0 \u2264 a, b \u2264 4\u00b710^4\n0 \u2264 h_1, h_2,..., h_{n} \u2264 200\nh_i = 1 + h_i + 1 = 2 + 3 + 2 + 1 = 4 + 2 + 3 + 4 + 1 = 5\n0 < a, b < 4\u00b710^4\n-1 < stdin.length < 200\n-1 < stdin.length <= 200\n1 \u2264 h_i \u2264 2 \u00b7 10^4\nh_i = 1\nstdin.length <= n\nstdin.length <= 200\nstdin[0] ==''\nstdin[1] ==''\nstdin[2] ==''\nstdin[3] ==''\nstdin[4] ==''\nstdin[5] ==''\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3') == 3\nassert solution('1') == 1\nassert solution('2') == 2\nassert solution('3') == -1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == 3\nassert solution(\"7 3\") == 2\nassert solution(\"7 3 4 1\") == -1\nassert solution(\"5 3 4 1\") == 2\nassert solution(\"4 2\") == -1\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 6 4 2 1') == '2'\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'YES'\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1\") == \"NO\"\nassert solution(\"1 2\") == \"YES\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"2 4\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'YES'\n\n-----Constraints-----\n1 <= stdin.length <= 2 * 10^4\n1 <= stdin[i] <= 10^4\n1 <= stdin[i][j] <= 10^4\n1 <= stdin[i][k] <= 10^4\n\n[Main]\n>>> n, m, k = map(int, input().split())\n>>> n, m, k = map(int, input().split())\n>>> solution(stdin, n, m, k)\nYES\n\n[Input]\n\nThe first line contains one integer $n$, $m$, $k$ ($1\\le n, m \\le 10^9$, $2 \\le k \\le 10^9$).\n\nThe next $n$ lines contain $n$ integers $x_i$, $y_i$ \u2014 coordinates of the points.\n\nThe next $n$ lines contain $m$ integers $x_i$, $y_i$ \u2014 coordinates of the points.\n\nThe next $n$ lines contain $m$ integers $x_i$, $y_i$ \u2014 coordinates of the points.\n\nOutput\nYES\n1 0\n2 3\n4 1\n\n[Output]\n\nYES\n\nConstraints\n\n[Constraints]\n\n1 <= n <= 10^9\n1 <= m <= 10^9\n1 <= k <= 10^9\n\n[Grammar]\n\nThe input always starts with an integer, $n$ (1\u2264n\u226410^9), with one integer $x_i$, $y_i$ (1\u2264x_i<=10^9) and a space separated $x_i$ (1\u2264x_i,y_i \u2264 10^9) and a space separated $y_i$ (1\u2264x_i,y_i,$x_i$,y_i$ \u2264 10^9).\n\nThe input consists of two lines: one integer $x_1, y_1$ (1\u2264x_1,y_1<=10^9), and the next $n$ lines: one integer $x_i$, $y_i$ (1\u2264x_i<=10^9) and a space separated $x_i$ (1\u2264x_i,y_i \u2264 10^9).\n\nThe input consists of only one line.\n\nThe output consists of three lines.\n\nThe output consists of two integers (1\u2264y_i,y_1\u2264y_i,x_i,x_1\u226410^9\u2264x_i\u226410^9\u226410^9\u2264y_i\u226410^9),\nwhere $0 \\le x_i, x_1, x_2, x_3, y_i, y_1, y_2, y_3\u226410^9\u2264y_i\u226410^9\u2264y_1,y_2,y_3\u226410^9\u2264y_i\u226410^9\u2264y_2,y_3\u226410^9\u2264y_i\u226410^9\u2264y_2,y_3\u226410^9\u2264y_i\u226410^9\u2264y_1\u2264y_i\u226410^9, $0 \\le y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i\u2264y_i"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"NO\"\n\n\n-----Example-----\n\nInput:\n4 3 3\n\nOutput:\nYES\n1 0\n2 3\n4 1\n\n\"\"\""
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n'''"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('5') == 'YES'\nassert solution('1 3') == 'NO'\nassert solution('4 2') == 'YES'\nassert solution('2 3') == 'YES'\nassert solution('4 4 7') == 'YES'\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 6\") == \"NO\"\nassert solution(\"10 5\") == \"YES\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 3000\n0 <= stdin[i] <= 10^9\nstdin.length <= 1000\nstdin.length <= 1000\n\ninput is generated using input() from the command line.\n\ninput is generated using sys.stdin.read().\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n4 4\n\nOutput\nYES\n1 0\n2 3\n4 1\n\nInput\n4 4 7\n\nOutput\nNO\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^9\n\n1 <= m <= 10^9\n\n1 <= k <= 10^9\n\n\n-----SAMPLE 1-----\n\nimport math"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n\n0 <= stdin[i] <= 10^7\n\n0 <= stdin[j] <= 10^7\n\n0 <= stdin[k] <= 10^9\n\n------------------\n\nFor any given example, you can print any letter of the following ASCII code.\n\n\n-----Brute force-----\n\nTime O(n^3 + m) = O(n^2 + m) = O(n) + O(m) = O(n) = O(n)\n\nSpace O(1) = O(n)\n\n-----Seconds-----\n\nRuntime: 172 ms, faster than 48.74% of Python3 online submissions for Solution of Triangle.\nMemory Usage: 14.4 MB, less than 45.45% of Python3 online submissions for Solution of Triangle.\n\n\"\"\"\n\nclass Solution:\n    def triangleArea(self, n: int, m: int, k: int) -> int:\n        l = 1.5\n        r = 1.5 * k\n        return (n + m) * (n + m) * l / 2 * k"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 3 3\") == \"NO\"\nassert solution(\"4 4 7\") == \"YES\"\nassert solution(\"4 4 5\") == \"NO\"\nassert solution(\"4 4 6\") == \"YES\"\nassert solution(\"4 4 7\") == \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(input())) == \"NO\"\n\nassert solution(str(input())) == \"YES\"\n\n\n-----Constraints-----\n1 <= n <= 10^18\n1 <= k <= 10^18\n\nAccepted\n47,741\nSubmissions\n1420,767\n\n\"\"\""
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 1\"]) == \"YES\"\nassert solution([\"10 4\"]) == \"NO\"\nassert solution([\"10 10\"]) == \"YES\"\nassert solution([\"2 2\"]) == \"NO\"\nassert solution([\"2 3\"]) == \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n1 <= n, k <= 10^18\n\n\"\"\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 5\", 2) == \"YES\"\nassert solution(\"10 10\", 1) == \"NO\"\nassert solution(\"10 3\", 1) == \"YES\"\nassert solution(\"10 10\", 1) == \"YES\"\nassert solution(\"10 10\", 2) == \"YES\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution("
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1 1) == \"YES\", \"solution() failed\"\nassert solution(10 4) == \"NO\", \"solution() failed\"\nassert solution(100) == \"YES\", \"solution() failed\"\nassert solution(1) == \"YES\", \"solution() failed\"\nassert solution(2) == \"YES\", \"solution() failed\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('10 4') == 'NO'\n\nassert solution('10 3') == 'YES'\n\nassert solution('4 1') == 'NO'\n\nassert solution('4 2') == 'YES'\n\nassert solution('4 4') == 'YES'\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 6\") == \"YES\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"2 3\") == \"YES\"\nassert solution(\"5 4\") == \"YES\"\nassert solution(\"6 4\") == \"NO\"\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin: str, stdout: object) -> str:\n        n, k = map(int, stdin.split(' '))\n        answer = []\n\n        for i in range(k):\n            stick = int(stdin.split(' ')[i])\n            left, right = 1, 1\n            for j in range(n):\n                left *= i\n                right *= i\n                answer.append(left % 2 == (stick // left) % 2)\n                if left > right:\n                    answer.append(right % 2 == (stick // right) % 2)\n            print(\"\".join(map(str, answer)))\n"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"chest\"\n\nassert solution(stdin) == \"back\"\n\nassert solution(stdin) == \"chest\"\n\nassert solution(stdin) == \"biceps\"\n\nassert solution(stdin) == \"back\""
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"chest\"\nassert solution(stdin) == \"biceps\"\nassert solution(stdin) == \"back\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"chest\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 20\nn*(n+1)//2 \u2264 n \u2264 1000\na_1, a_2,..., a_{n} are all integers\n\nTime Limit: 1 sec\n\nSample 1/2\n\nInput\n2\n2 8\n\nOutput\nbiceps\n\nInput\n3\n5 1 10\n\nOutput\nback\n\nInput\n7\n3 3 2 7 9 6 8\n\nOutput\nchest\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'chest'\n\nassert solution(stdin) == 'biceps'\n\nassert solution(stdin) == 'back'\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 4 \"\n    ), \"One, two, and three biceps, and one back, seven biceps, and eight back exercises\"\nassert solution(\n    \"3 3 2 7 9 6 8\"\n    ), \"One, two, and three biceps, and one back, seven biceps, and eight back exercises\"\nassert solution(\n    \"4 3 2 7 9 6 8\"\n    ), \"One, two, and three biceps, and one back, seven biceps, and eight back exercises\"\nassert solution(\n    \"4 3 2 7 9 6 8\"\n    ), \"One, two, and three biceps, and one back, seven biceps, and eight back exercises\"\nassert solution(\n    \"5 3 2 7 9 6 8\"\n    ), \"One, two, and three biceps, and one back, seven biceps, and eight back exercises\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"chest\"\n\nassert solution(stdin) == \"biceps\"\n\nassert solution(stdin) == \"back\"\n\nassert solution(stdin) == \"chest\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"chest\"\n\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n0 < a_i < 25\n\n'''"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\u201c1 2 3 4 5\u201d) == '1'\nassert solution(\u201c1 4 3 5\u201d) == '0'\nassert solution(\u201c4 5 3 5\u201d) == '0'\nassert solution(\u201c4 2 3 5\u201d) == '2'\nassert solution(\u201c1 4 5\u201d) == '0'\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input().strip()) == \"2\"\nassert solution(input().strip()) == \"0\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n'''\n)\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('''\n3\n4 4 4\n4 4 4\n4 4 4\n\n2\n4 5 5\n4 5 5\n4 5 5\n''') == '0'\nassert solution('''\n4\n1 4 5\n3 3 3\n3 3 2\n\n1\n3\n3\n3\n\n4 4\n3 4\n4 4\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3\n3 3\n3 3\n\n4 4\n3 3"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\""
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"0\"\n\nimport math"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2\", \"5\", \"4\", \"4\", \"3\"]) == \"0\"\nassert solution([\"2\", \"5\", \"5\", \"3\"]) == \"1\"\nassert solution([\"1\", \"5\", \"5\", \"3\"]) == \"2\"\nassert solution([\"5\", \"5\", \"3\", \"3\"]) == \"0\""
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(INPUT) == OUTPUT\nassert solution(INPUT2) == OUTPUT\n\n\n\n\nOutput Format\n\nOutput the minimum amount of lab works Vasya has to redo.\n\n\n\n\"\"\""
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, \"3 1\") == \"3\"\nassert solution(5, \"1 3\") == \"1\"\nassert solution(3, \"2\") == \"-1\"\nassert solution(8, \"0\") == \"-1\""
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 4\\n0 0\\n0 0\\n0 0\") == \"2\"\nassert solution(\"1 3\\n0 1\\n0 0\") == \"3\"\nassert solution(\"1 3\\n0 0\\n1 0\") == \"3\"\nassert solution(\"8 5\\n0 0\\n0 0\") == \"3\"\nassert solution(\"0 0\\n0 0\\n0 0\") == \"-1\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0\") == \"-1\"\nassert solution(\"1\") == \"3\"\nassert solution(\"0\\n0\") == \"0\"\nassert solution(\"1\\n0\") == \"1\"\nassert solution(\"0\\n1\") == \"3\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Discussion-----\n\nhttps://leetcode.com/problems/path-with-given-bit-xor/discuss/62058/C%2B%2B-easy-to-understand-and-how-to-use-a-bit-xor-in-python\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        graph = dict()\n        for i, j in edges:\n            if i in graph:\n                graph[i].append(j)\n            else:\n                graph[i] = [j]\n        self.n = n\n        self.dfs(graph, 0, 0)\n        return ''.join([str(x) for x in self.result])\n    \n    def dfs(self, graph: dict, v: int, d: int):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        for i in graph[v]:\n            self.dfs(graph, i, d+1)\n\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        self.d = dict()\n        self.dp(edges, 0, 0)\n        return ''.join(self.result)\n    \n    def dp(self, edges, d: int, v: int):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        for i in edges[v]:\n            self.dp(edges, d+1, i)\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        self.n = n\n        self.dp = {}\n        for i, j in edges:\n            if i in self.dp:\n                self.dp[i].append(j)\n            else:\n                self.dp[i] = [j]\n        self.result = []\n        self.dfs(self.dp, 0, 0)\n        return ''.join(self.result)\n    \n    def dfs(self, graph: dict, v: int, d: int):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        for i in graph[v]:\n            self.dfs(graph, i, d+1)\n\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        self.edges = edges\n        self.n = n\n        self.result = []\n        self.dfs(0, 0, 0, 0)\n        return ''.join(self.result)\n\n    def dfs(self, v: int, d: int, visited: list):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        for i in self.edges[v]:\n            if visited[i] == False:\n                self.dfs(i, d+1, visited)\n\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        self.edges = edges\n        self.n = n\n        self.result = []\n        self.dfs(0, 0, 0, 0, [0])\n        return ''.join(self.result)\n    \n    def dfs(self, u: int, d: int, v: int, visited: list, path: list):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        if visited[v] == False:\n            visited[v] = True\n            path.append(v)\n            self.dfs(u, d+1, v, visited, path)\n            path.pop()\n            visited[v] = False\n\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        self.edges = edges\n        self.n = n\n        self.result = []\n        self.dfs(0, 0, 0, [], [])\n        return ''.join(self.result)\n    \n    def dfs(self, u: int, d: int, v: int, visited: list, path: list):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        if visited[v] == False:\n            visited[v] = True\n            path.append(v)\n            self.dfs(u, d+1, v, visited, path)\n            path.pop()\n            visited[v] = False\n\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        self.n = n\n        self.edges = edges\n        self.result = []\n        self.dfs(0, 0, 0, [], [])\n        return ''.join(self.result)\n    \n    def dfs(self, u: int, d: int, v: int, visited: list, path: list):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        if visited[v] == False:\n            visited[v] = True\n            path.append(v)\n            self.dfs(u, d+1, v, visited, path)\n            path.pop()\n            visited[v] = False\n\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        self.edges = edges\n        self.n = n\n        self.result = []\n        self.dfs(0, 0, 0, [], [])\n        return ''.join(self.result)\n    \n    def dfs(self, u: int, d: int, v: int, visited: list, path: list):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        if visited[v] == False:\n            visited[v] = True\n            path.append(v)\n            self.dfs(u, d+1, v, visited, path)\n            path.pop()\n            visited[v] = False\n\n\nclass Solution:\n    def shortestXorPath(self, n: int, edges: List[List[int]]) -> str:\n        self.edges = edges\n        self.n = n\n        self.result = []\n        self.dfs(0, 0, 0, [], [])\n        return ''.join(self.result)\n    \n    def dfs(self, u: int, d: int, v: int, visited: list, path: list):\n        if d == self.n:\n            self.result.append(''.join(map(str, self.result)))\n            return\n        if visited[v] == False:\n            visited[v] = True\n            path.append("
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 5') == 2\nassert solution('0 0') == -1\n\n\n\"\"\"\nInput:\n2 4\n\nOutput:\n3\n3 1\nInput:\n1 3\n\nOutput:\n3\n1 1 1\nInput:\n8 5\n\nOutput:\n-1\n\n\n\"\"\"\nclass Solution:\n    def solve(self,n,u,v):\n        if u == 0 or v == 0:\n            return -1\n        return n//v + self.solve(n//v,u-1,v)\n        \n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n\n0 <= u <= 10^18\n0 <= v <= 10^18\n\"\"\"\nimport sys\nfrom collections import deque"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(121) == 6\nassert solution(\"102\") == 7\nassert solution(\"12\") == 4\nassert solution(\"0\") == 0\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"121\") == 6, \"Wrong solution\"\n\n\n-----------------\nExplanation\n\nThe given input is 7, which means the last digits of 121 are 1, 11, and 1. This means that we only have 1 addend.\n\nInput\n121\n\nOutput\n1\n\nExplanation\n\nGiven input is 121, which means the last digit of 121 is 1, 11, and 1. This means that we only have 1 addend.\n\nInput\n121\n\nOutput\n2\n\n\n-----------------\n\nThe given input is 101, which means the last digits of 101 are 1, 10, and 1.\n\nInput\n101\n\nOutput\n2\n\nExplanation\n\nGiven input is 101, which means the last digits of 101 is 1, 10, and 1. This means that we only have 1 addend.\n\nInput\n101\n\nOutput\n2\n\n\n-----------------\nGiven input is 12, which means the last digits of 12 are 1, 01, and 1.\n\nInput\n12\n\nOutput\n0\n\n\n-----------------\nGiven input is 45, which means the last digits of 45 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n45\n\nOutput\n3\n\nExplanation\n\nGiven input is 45, which means the last digits of 45 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n45\n\nOutput\n0\n\n\n-----------------\nGiven input is 27, which means the last digits of 27 are 1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120.\n\nInput\n27\n\nOutput\n1\n\n\n-----------------\nGiven input is 476, which means the last digits of 476 are 1, 01, 01, 01, 01.\n\nInput\n476\n\nOutput\n4\n\n\n-----------------\nGiven input is 622, which means the last digits of 622 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n622\n\nOutput\n2\n\n\n-----------------\nGiven input is 79, which means the last digits of 79 are 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.\n\nInput\n79\n\nOutput\n3\n\n\n-----------------\nGiven input is 819, which means the last digits of 819 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n819\n\nOutput\n0\n\n\n-----------------\nGiven input is 829, which means the last digits of 829 are 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00.\n\nInput\n829\n\nOutput\n3\n\n\n-----------------\nGiven input is 49, which means the last digits of 49 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n49\n\nOutput\n0\n\n\n-----------------\nGiven input is 72, which means the last digits of 72 are 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00.\n\nInput\n72\n\nOutput\n3\n\n\n-----------------\nGiven input is 61, which means the last digits of 61 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n61\n\nOutput\n0\n\n\n-----------------\nGiven input is 49, which means the last digits of 49 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n49\n\nOutput\n2\n\n\n-----------------\nGiven input is 57, which means the last digits of 57 are 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1.\n\nInput\n57\n\nOutput\n1\n\n\n-----------------\nGiven input is 28, which means the last digits of 28 are 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1.\n\nInput\n28\n\nOutput\n0\n\n\n-----------------\nGiven input is 49, which means the last digits of 49 are 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1.\n\nInput\n49\n\nOutput\n1\n\n\n-----------------\nGiven input is 55, which means the last digits of 55 are 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1.\n\nInput\n55\n\nOutput\n2\n\n\n-----------------\nGiven input is 54, which means the last digits of 54 are 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1.\n\nInput\n54\n\nOutput\n1\n\n\n-----------------\nGiven input is 41, which means the last digits of 41 are 1, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0.\n\nInput\n41\n\nOutput\n2\n\n\n-----------------\nGiven input is 45, which means the last digits of 45 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n45\n\nOutput\n0\n\n\n-----------------\nGiven input is 27, which means the last digits of 27 are 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00.\n\nInput\n27\n\nOutput\n3\n\n\n-----------------\nGiven input is 28, which means the last digits of 28 are 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00.\n\nInput\n28\n\nOutput\n1\n\n\n-----------------\nGiven input is 59, which means the last digits of 59 are 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0.\n\nInput\n59\n\nOutput\n1\n\n\n-----------------\nGiven input is 60, which means the last digits of 60 are 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0.\n\nInput\n60\n\nOutput\n0\n\n\n-----------------\nGiven input is 27, which means the last digits of 27 are 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00.\n\nInput\n27\n\nOutput\n1\n\n\n-----------------\nGiven input is 12, which means the last digits of 12 are 1, 00, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01, 01.\n\nInput\n12\n\nOutput\n3\n\n\n-----------------\nGiven input is 4, which means the last digits of 4 are 1, 00, 01, 01, 01.\n\nInput\n4\n\nOutput\n0\n\n\n-----------------\nGiven input is 11, which means the last digits of 11 are 1, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00.\n\nInput\n11\n\nOutput\n2\n\n\n-----------------\nGiven input is 20, which means the last digits of 20 are 1, 00, 01, 01, 01.\n\nInput\n20\n\nOutput\n0\n\n\n-----------------\nGiven input is 43,"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(solution(\"120\")) == 6\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(121) == 6\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(9) == 0\nassert solution(10) == 1\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(121) == 6, \"solution() returns wrong answer: it should return 6\"\n\"\"\""
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"121\") == 6\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\n\n0 <= stdin[i] <= 10^7"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(121) == 6,'should be 6'\n\"\"\""
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(123) == 1\nassert solution(1) == 1\nassert solution(10000000000000) == 7\nassert solution(1000000) == 9\nassert solution(9) == 1\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(121) == \"6\"\nassert solution(11) == \"7\"\nassert solution(123) == \"1\"\nassert solution(111111111) == \"1\"\nassert solution(1212121212) == \"1\"\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 1\nassert solution(121) == 6\nassert solution(11) == 3\nassert solution(11) == 3\nassert solution(10) == 2\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\n0 <= x_1, y_1, x_2, y_2 <= 10^5\n0 <= x, y <= 10^5\n\n0 <= stdin[i] <= 10^5\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n5020\n\nclass Solution:\n    def isSafe(self, x_1, y_1, x_2, y_2, arr):\n        for i in range(0, len(arr)):\n            if arr[i][0] == x_1 and arr[i][1] == y_1:\n                return False\n            if arr[i][0] == x_2 and arr[i][1] == y_2:\n                return False\n        return True\n    def solve(self, x_1, y_1, x_2, y_2, arr):\n        if x_1 > x_2 or y_1 > y_2:\n            return False\n        if arr[x_1][y_1] == 0:\n            arr[x_1][y_1] = 1\n            return self.solve(x_1, y_1 + 1, x_2, y_2, arr)\n        if arr[x_1][y_1] == 0:\n            arr[x_1][y_1] = 2\n            return self.solve(x_1 + 1, y_1, x_2, y_2, arr)\n        if arr[x_1][y_1] == 0:\n            arr[x_1][y_1] = 3\n            return self.solve(x_1, y_1 + 1, x_2, y_2, arr)\n        return False\n\n--------Test Cases--------\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('YES') == 'YES'\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n1 1 3 6\n1 5\n\nOutput\nNO\n\n\n\n-----Constraints-----\n1 <= x_1, y_1 <= 10^5\n1 <= x, y <= 10^5\n1 <= x_2, y_2 <= 10^5\n\n\n\n-----Elements-----\nFirst line contains a single integer - the number of positions of the captain board.\n\nSecond line contains two integer - the x and y positions of the treasure.\n\nThird line contains two integer - the x and y positions of the potion bottle.\n\nFourth line contains one integer - the number of moves for the potion.\n\nOutput\nFor this challenge the answer is in Upper Confidence Bound\n\nExample Input\n\n2\n3\n4\n5\n6\n\nExample Output\n\nYES\n\n\n\n-----Constraints-----\n1 <= x_1, y_1 <= 10^5\n1 <= x, y <= 10^5\n1 <= x_2, y_2 <= 10^5\n\n------Time Limit---------\nO(n)\n\n\n-----Submissions-----\n\nAccepted\n200\nSubmitted\n4420\n\nComplexity\nO(n^2)\n\n\n\"\"\"\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input()\n) == \"YES\"\nassert solution(\n    input()\n) == \"NO\""
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 6\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2 3\", \"1 5\"]) == \"YES\"\nassert solution([\"2 3\", \"1 6\"]) == \"NO\"\nassert solution([\"2\", \"3\"]) == \"NO\"\n\n\n'''\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n\n\"\"\""
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2\") == \"YES\"\nassert solution(\"1 1 3 6\") == \"YES\"\nassert solution(\"1 1 5\") == \"NO\"\nassert solution(\"2 3\") == \"NO\"\nassert solution(\"1 1 1\") == \"NO\"\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\") == \"\"\nassert solution(\"1\") == 2\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 5\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 13\n\n\"\"\""
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 11\n\n<hang>\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n-----\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 2\n"
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"7\"\nassert solution(\"20 3\") == \"8\"\nassert solution(\"2 20\") == \"7\"\nassert solution(\"1 1\") == \"7\"\nassert solution(\"6 1\") == \"7\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '102'\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 1 3 4') == '3'\nassert solution('1 5 7') == '5'\nassert solution('1 5 8') == '8'\nassert solution('1 4 1') == '1'\nassert solution('1 2 3 1') == '4'\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"102\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"102\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"2\"\nassert solution(\"1 1 1 2\") == \"3\"\nassert solution(\"1 1 1 2 1\") == \"3\"\nassert solution(\"1 1 1 2 2\") == \"2\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"12\") == \"12\"\nassert solution(\"1\") == \"1\"\nassert solution(\"17\") == \"17\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"9\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]) == \"102\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"]) == \"325\"\n\n\"\"\""
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1 2 4 6\") == \"111\"\nassert solution(\"2 7 3\") == \"2\"\nassert solution(\"2 3 1\") == \"2\"\nassert solution(\"2 7 4 1\") == \"2\"\nassert solution(\"2 8\") == \"3\"\n"
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"102\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Notes-----\nThe only example of solution is commented and looks like it\u2019s not a recursive solution.\nTo test whether a number is a number, we can use the following logic:\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n\n-----Reminder-----\n\nThe input to the algorithm is assumed to be an integer array.\n\nConstraints:\n1 \u2264 stdin.length \u2264 500,\n0 \u2264 stdin[i] \u2264 10^6,\n0 \u2264 stdin[i] < 10^6,\nThe output is guaranteed to be an integer, and the function is not restricted to numbers which are not divided by $10^9$ (i.e., $1000$).\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n\n\n-----Constraints-----\n1 <= x <= 10^6\n1 <= a,b < p\n\na, b, p must be prime.\n\n-----Time Limit-----\n1 sec\n\n-----Memory Limit-----\n256 MB\n\n-----Test Inputs-----\n2 3 5 8\n\n-----Test Outputs-----\n2\n\n2\n\n\n-----Constraints-----\n1 <= x <= 10^6\n1 <= a,b < p\n\na, b, p must be prime.\n\n\"\"\"\nimport math\nimport sys\nimport itertools"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= a,b < p\n1 <= x <= 10^12\n\n----Done----\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 3 6') == 1\nassert solution('4 6 7 13') == 1\nassert solution('233 233 10007 1') == 1\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n0 <= a <= 10^7\n0 <= b <= 10^6\n0 <= p <= 10^12\n1 <= x <= 10^12\n\nInput Format\n\nThe first line contains a single integer $a$ ($1 \\leq a \\leq 10^7$).\nThe second line contains a single integer $b$ ($1 \\leq b \\leq 10^6$).\nThe third line contains a single integer $p$ ($1 \\leq p \\leq 10^12$).\nThe fourth line contains a single integer $x$ ($1 \\leq x \\leq 10^12$).\n\n\nOutput Format\n\nPrint a single integer: the number of possible answers $n$.\n\nSample Input\n\n2\n4 6 7 13\n\nSample Output\n\n1\n\nExplanation\n\nExplanation 1\nThe number of possible answers is $1$.\nExplanation 2\nThe number of possible answers is $1$.\nExplanation 3\nThe number of possible answers is $1$.\nExplanation 4\nThe number of possible answers is $1$.\nExplanation 5\nThe number of possible answers is $1$.\nExplanation 6\nThe number of possible answers is $1$.\nExplanation 7\nThe number of possible answers is $1$.\nExplanation 8\nThe number of possible answers is $1$.\nExplanation 9\nThe number of possible answers is $1$.\nExplanation 10\nThe number of possible answers is $1$.\nExplanation 11\nThe number of possible answers is $1$.\nExplanation 12\nThe number of possible answers is $1$.\nExplanation 13\nThe number of possible answers is $1$.\nExplanation 14\nThe number of possible answers is $1$.\nExplanation 15\nThe number of possible answers is $1$.\nExplanation 16\nThe number of possible answers is $1$.\nExplanation 17\nThe number of possible answers is $1$.\nExplanation 18\nThe number of possible answers is $1$.\nExplanation 19\nThe number of possible answers is $1$.\nExplanation 20\nThe number of possible answers is $1$.\nExplanation 21\nThe number of possible answers is $1$.\nExplanation 22\nThe number of possible answers is $1$.\nExplanation 23\nThe number of possible answers is $1$.\nExplanation 24\nThe number of possible answers is $1$.\nExplanation 25\nThe number of possible answers is $1$.\nExplanation 26\nThe number of possible answers is $1$.\nExplanation 27\nThe number of possible answers is $1$.\nExplanation 28\nThe number of possible answers is $1$.\nExplanation 29\nThe number of possible answers is $1$.\nExplanation 30\nThe number of possible answers is $1$.\nExplanation 31\nThe number of possible answers is $1$.\nExplanation 32\nThe number of possible answers is $1$.\nExplanation 33\nThe number of possible answers is $1$.\nExplanation 34\nThe number of possible answers is $1$.\nExplanation 35\nThe number of possible answers is $1$.\nExplanation 36\nThe number of possible answers is $1$.\nExplanation 37\nThe number of possible answers is $1$.\nExplanation 38\nThe number of possible answers is $1$.\nExplanation 39\nThe number of possible answers is $1$.\nExplanation 40\nThe number of possible answers is $1$.\nExplanation 41\nThe number of possible answers is $1$.\nExplanation 42\nThe number of possible answers is $1$.\nExplanation 43\nThe number of possible answers is $1$.\nExplanation 44\nThe number of possible answers is $1$.\nExplanation 45\nThe number of possible answers is $1$.\nExplanation 46\nThe number of possible answers is $1$.\nExplanation 47\nThe number of possible answers is $1$.\nExplanation 48\nThe number of possible answers is $1$.\nExplanation 49\nThe number of possible answers is $1$.\nExplanation 50\nThe number of possible answers is $1$.\nExplanation 51\nThe number of possible answers is $1$.\nExplanation 52\nThe number of possible answers is $1$.\nExplanation 53\nThe number of possible answers is $1$.\nExplanation 54\nThe number of possible answers is $1$.\nExplanation 55\nThe number of possible answers is $1$.\nExplanation 56\nThe number of possible answers is $1$.\nExplanation 57\nThe number of possible answers is $1$.\nExplanation 58\nThe number of possible answers is $1$.\nExplanation 59\nThe number of possible answers is $1$.\nExplanation 60\nThe number of possible answers is $1$.\nExplanation 61\nThe number of possible answers is $1$.\nExplanation 62\nThe number of possible answers is $1$.\nExplanation 63\nThe number of possible answers is $1$.\nExplanation 64\nThe number of possible answers is $1$.\nExplanation 65\nThe number of possible answers is $1$.\nExplanation 66\nThe number of possible answers is $1$.\nExplanation 67\nThe number of possible answers is $1$.\nExplanation 68\nThe number of possible answers is $1$.\nExplanation 69\nThe number of possible answers is $1$.\nExplanation 70\nThe number of possible answers is $1$.\nExplanation 71\nThe number of possible answers is $1$.\nExplanation 72\nThe number of possible answers is $1$.\nExplanation 73\nThe number of possible answers is $1$.\nExplanation 74\nThe number of possible answers is $1$.\nExplanation 75\nThe number of possible answers is $1$.\nExplanation 76\nThe number of possible answers is $1$.\nExplanation 77\nThe number of possible answers is $1$.\nExplanation 78\nThe number of possible answers is $1$.\nExplanation 79\nThe number of possible answers is $1$.\nExplanation 80\nThe number of possible answers is $1$.\nExplanation 81\nThe number of possible answers is $1$.\nExplanation 82\nThe number of possible answers is $1$.\nExplanation 83\nThe number of possible answers is $1$.\nExplanation 84\nThe number of possible answers is $1$.\nExplanation 85\nThe number of possible answers is $1$.\nExplanation 86\nThe number of possible answers is $1$.\nExplanation 87\nThe number of possible answers is $1$.\nExplanation 88\nThe number of possible answers is $1$.\nExplanation 89\nThe number of possible answers is $1$.\nExplanation 90\nThe number of possible answers is $1$.\nExplanation 91\nThe number of possible answers is $1$.\nExplanation 92\nThe number of possible answers is $1$.\nExplanation 93\nThe number of possible answers is $1$.\nExplanation 94\nThe number of possible answers is $1$.\nExplanation 95\nThe number of possible answers is $1$.\nExplanation 96\nThe number of possible answers is $1$.\nExplanation 97\nThe number of possible answers"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= a,b,p <= 10^6\n0 <= x <= 10^12\n\nModular arithmetic\n\nmod = 10^9+7\n\"\"\""
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == 0\nassert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 2\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"233\"\nassert solution(input()) == \"233\"\nassert solution(input()) == \"10007\"\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\", \"3\", \"5\", \"8\"]) == \"2\"\nassert solution([\"4\", \"6\", \"7\", \"13\"]) == \"1\"\nassert solution([\"233\", \"233\", \"10007\", \"1\"]) == \"1\"\nassert solution([\"233\", \"233\", \"10007\", \"2\"]) == \"1\"\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\n-----Bug-----\n\nIn the first sample, we can see that $n=4$ and $n=9$ are not possible.\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10 20 100') == '10'\nassert solution('10100') == '1010'\nassert solution('1000') == '0'\nassert solution('100000') == '0'\nassert solution('101000') == '0'\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 3 4') == 8\nassert solution('2 3 4 5') == 256\nassert solution('3 4 5 6') == 256\nassert solution('5 7 8 9') == 256\nassert solution('5 8 9 7') == 8\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"256\"\n\n\n\n-----Constraints-----\n0 \u2264 k_2 \u2264 10^5\n\nSubstring of digits from the box are digits from the box.\n\n\"\"\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5 1 3 4\"\n    ) == \"800\"\nassert solution(\n    \"1 1 1 1\"\n    ) == \"256\"\nassert solution(\n    \"3 4 6\"\n    ) == \"8\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '800'\n\nassert solution(stdin) == '256'\n\nassert solution(stdin) == '0'\n\n\"\"\""
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5, [\"2\",\"3\",\"4\"]) == \"800\"\nassert solution(1, [\"1\"]) == \"256\"\nassert solution(1, [\"1\",\"1\"]) == \"256\"\nassert solution(1, [\"1\",\"1\",\"1\"]) == \"256\"\nassert solution(1, [\"1\",\"1\",\"2\"]) == \"256\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '800'"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 3, 4) == 256\nassert solution(5, 5, 5) == 256\nassert solution(1, 3, 2) == 7\nassert solution(5, 2, 3) == 27\nassert solution(5, 3, 3) == 106\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, \"1 1 1 1\") == \"800\"\nassert solution(3, \"1 1 1 1\") == \"64\"\nassert solution(5, \"1 1 1 1\") == \"256\"\nassert solution(1, \"1 1 1 1\") == \"256\"\nassert solution(5, \"1 1 1 1\") == \"256\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 1, 1, 1, 1) == \"256\"\nassert solution(5, 1, 1, 1, 1) == \"256\"\nassert solution(1, 1, 1, 1, 1) == \"256\"\nassert solution(1, 1, 1, 1, 1) == \"256\"\nassert solution(1, 1, 1, 1, 1) == \"256\"\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3 3 1\", \"3 3 1\", \"3 3 1\"]) == \"2\"\nassert solution([\"3 3 1\", \"1 1 1\"]) == \"3\"\nassert solution([\"1 1 1\", \"1 1 1\", \"1 1 1\"]) == \"0\"\nassert solution([\"3 3 0\", \"3 3 0\", \"3 3 0\"]) == \"1\"\nassert solution([\"3 3 0\", \"3 3 0\", \"3 3 0\"]) == \"1\"\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 4) == 2\nassert solution(2, 2) == 0\nassert solution(1, 1) == 0\nassert solution(3, 3) == 1\nassert solution(9, 10) == 2\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n\n1 \u2264 n, c \u2264 10^9\n1 \u2264 x, y \u2264 n\n1 \u2264 x + 1, y < n\n1 \u2264 c \u2264 n^2\n\nTime Limit: 1 second\n\nSpace Limit: 1 KB\n\n----------\n\nTime: 32 ms\nMemory: 14.1 MB\n\nclass Solution:\n    def getAnswer(self, n: int, x: int, y: int, c: int) -> str:\n        rows = [1 for _ in range(n)]\n        cols = [1 for _ in range(n)]\n        for x_ in range(x - 1):\n            for y_ in range(y - 1):\n                if rows[x_ + 1] == 1 and cols[y_ + 1] == 1:\n                    rows[x_ + 1] = c\n                elif rows[x_ + 1] == 1 and cols[y_ + 1] == 0:\n                    cols[y_ + 1] = c\n                elif cols[y_ + 1] == 1 and rows[x_ + 1] == 1:\n                    cols[y_ + 1] = c\n                elif cols[y_ + 1] == 1 and rows[x_ + 1] == 0:\n                    rows[x_ + 1] = c\n        return ''.join(map(str, rows)) + ''.join(map(str, cols))\n'''"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6, 4, 3, 1) == 0\nassert solution(9, 8, 10, 1) == 2\nassert solution(9, 8, 10, 0) == 0\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"6 4 3 1\",\n    [\n        [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ]) == 1\nassert solution(\n    \"9 3 8 10\",\n    [\n        [2, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 2, 2, 2, 2, 2, 2, 2, 2, 2],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    ]) == 2\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"6 4 3 1\", \"9 3 8 10\"]) == 0\nassert solution([\"9 3 8 10\"]) == 2\nassert solution([\"9 3 8 10\", \"3 6 4 7\"]) == 1\nassert solution([\"3 6 4 7\"]) == 3\nassert solution([\"3 6 4 7\", \"3 6 5 7\", \"3 6 4 8\"]) == 6\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == 5"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 2) == 1\nassert solution(5, 3) == 1\nassert solution(5, 4) == 1\nassert solution(5, 5) == 1\nassert solution(5, 6) == 2\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"6 4 3 1\"\n) == 0, \"Wrong input\"\n\nassert solution(\n    \"9 3 8 10\"\n) == 2, \"Wrong input\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 31\n\nPassed\n1\n\n----Shortcuts-----\n\ninputs:\n1 2\n\noutputs:\n3\n\ninput:\n8 16\n\noutput:\n31\n\n-----Advanced-----\n\ninput:\n8 16\n\noutput:\n0\n\ninput:\n8 4\n\noutput:\n0\n\ninput:\n8 16\n\noutput:\n3\n\ninput:\n1 2\n\noutput:\n3\n\ninput:\n1 5\n\noutput:\n2\n\nInput:\n1 5\n\nOutput:\n1\n\nInput:\n5 4\n\nOutput:\n5\n\nInput:\n3 4\n\nOutput:\n3\n\nInput:\n5 1\n\nOutput:\n5\n\nInput:\n1 4\n\nOutput:\n0\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('8 16') == '31', 'Wrong answer'\nassert solution('8 1') == '3', 'Wrong answer'\nassert solution('3 1') == '0', 'Wrong answer'\nassert solution('2 3') == '1', 'Wrong answer'\nassert solution('10 11') == '4', 'Wrong answer'\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"3\"\nassert solution(\"8 16\") == \"31\"\nassert solution(\"1 1\") == \"0\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == 3\nassert solution(\"8 16\") == 31\nassert solution(\"1 1\") == 0\nassert solution(\"1 1\") == 1\nassert solution(\"\") == 0\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"31\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 1) == 0, 'Wrong answer'\nassert solution(8, 16) == 31, 'Wrong answer'\nassert solution(16, 8) == 31, 'Wrong answer'\nassert solution(8, 1) == 3, 'Wrong answer'\nassert solution(0, 1) == 3, 'Wrong answer'\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abc') == 'abc'\nassert solution('abcdefg') == 'abcdefg'\nassert solution('100000') == '100000'\nassert solution('100') == '0'\nassert solution('1') == '1'\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1 2) == 3\nassert solution(8 16) == 31\nassert solution(1 1) == 0\nassert solution(8 16) == 0\nassert solution(1 1) == 0\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 31\n\n\n-----Constraints-----\n1 <= l <= r <= 10^18\n\nMemory Usage\n14 MB, less than 46.75% of Python3 online submissions for Maximum Number of XOR Bitwise Operations.\nMemory Usage: 13.8 MB, less than 66.35% of Python3 online submissions for Maximum Number of XOR Bitwise Operations.\n\n\n-----Tutorial-----\nhttps://leetcode.com/problems/maximum-number-of-xor-operations/solution/\nhttps://www.youtube.com/watch?v=TZnU02UzvkU\n\n\"\"\"\n\nimport math\nfrom typing import List\nclass Solution:\n    def maxXOR(self, a: int, b: int) -> int:\n        def sum_0(a, b):\n            return a + b\n        def sum_1(a, b):\n            return a ^ b\n        def sum_2(a, b):\n            return a | b\n\n        def sum_3(a, b):\n            return a ^ b ^ a\n\n        def sum_4(a, b):\n            return a & b\n\n        def sum_5(a, b):\n            return a ^ b ^ a\n\n        def sum_6(a, b):\n            return ~a ^ b\n\n        def sum_7(a, b):\n            return ~(a & b)\n\n        def sum_8(a, b):\n            return ~(a ^ b)\n\n        def sum_9(a, b):\n            return ~(a | b)\n\n        def sum_10(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_11(a, b):\n            return ~(a & b)\n\n        def sum_12(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_13(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_14(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_15(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_16(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_17(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_18(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_19(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_20(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_21(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_22(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_23(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_24(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_25(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_26(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_27(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_28(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_29(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_30(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_31(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_32(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_33(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_34(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_35(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_36(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_37(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_38(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_39(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_40(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_41(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_42(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_43(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_44(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_45(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_46(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_47(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_48(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_49(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_50(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_51(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_52(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_53(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_54(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_55(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_56(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_57(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_58(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_59(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_60(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_61(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_62(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_63(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_64(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_65(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_66(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_67(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_68(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_69(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_70(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_71(a, b):\n            return ~(a ^ b ^ a)\n\n        def sum_72(a"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '31'\n\nInput\n1 3\n\nOutput\n1\n\nInput\n5 13\n\nOutput\n13"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"M\"\nassert solution(stdin) == \"M\"\nassert solution(stdin) == \"M\"\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(3)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 3\") == \"1\"\nassert solution(\n    \"999999999999999999 999999999999999986\") == \"3\"\nassert solution(\n    \"999999999999999999 999999999999999986\") == \"1\"\n\n'''\nn, k = map(int, input().split())"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4 1\") == \"2\"\nassert solution(\"1 3 3\") == \"3\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"0 0\") == \"1\"\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 4') == '3'\nassert solution('999999999999999999 999999999999999986') == '1'\nassert solution('999999999999999999') == '1'\nassert solution('3 4') == '3'\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(int(1e20))\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= k <= 10^18\n\ntime complexity: O(n)\nspace complexity: O(1)\n\n-----Tags-----\n\ntodo:\n- List, set\n- In-Place\n\"\"\"\n\nimport math"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"4 12\") == \"6\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\nassert solution(\"999999999999999999 999999999999999986\") == \"3\"\nassert solution(\"999999999999999999 999999999999999986\") == \"1\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\n\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\nassert solution(\"4 1 7 4 1 2\") == \"YES\"\n\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2') == 'NO'\nassert solution('1 2 3') == 'YES'\nassert solution('1 2 4 5') == 'YES'\nassert solution('4 6 8 2 1 2') == 'YES'\nassert solution('4 6 8 2 1 3') == 'YES'\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 1 4 4 2 1\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\nassert solution(\"1 6 6 2 1 1\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\"\nassert solution(\"4 1 2 1 1\") == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 1 4 4 2 1\") == \"YES\"\nassert solution(\"4 1 6 4 2 1\") == \"YES\"\nassert solution(\"4 1 2 4 2 1\") == \"NO\"\nassert solution(\"4 3 3 4 2 1\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 1 4 4 2 1') == 'YES'\nassert solution('4 1 7 4 1 2') == 'NO'\n\nassert solution('4 3 4 4') == 'NO'\nassert solution('4 3 4 4') == 'YES'\n\n\n---Time Limit---\n\nRun your code for the following hour and check it:\n\n\u25cf Run your code to test the correctness of solution:\nMasha lives in a multi-storey building, where floors are numbered with positive integers. Two floors are called adjacent if their numbers differ by one. Masha thinks his floor $x$, Egor on the floor $y$ (not on the same floor with Masha).\n\nThe house has a staircase and an elevator. If Masha uses the stairs, it takes $t_1$ seconds for her to walk between adjacent floors (in each direction). The elevator passes between adjacent floors (in each way) in $t_2$ seconds. The elevator moves with doors closed. The elevator spends $t_3$ seconds to open or close the doors. We can assume that time is not spent on any action except moving between adjacent floors and waiting for the doors to open or close. If Masha uses the elevator, it immediately goes directly to the desired floor.\n\nComing out of the apartment on her floor, Masha noticed that the elevator is now on the floor $z$ and has closed doors. Now she has to choose whether to use the stairs or use the elevator. \n\nIf the time that Masha needs to get to the Egor's floor by the stairs is strictly less than the time it will take her using the elevator, then she will use the stairs, otherwise she will choose the elevator.\n\nHelp Mary to understand whether to use the elevator or the stairs.\n\n\n-----Input-----\n\nThe only line contains six integers $x$, $y$, $z$, $t_1$, $t_2$, $t_3$ ($1 \\leq x, y, z, t_1, t_2, t_3 \\leq 1000$)\u00a0\u2014 the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that $x \\ne y$.\n\n\n-----Output-----\n\nIf the time it will take to use the elevator is not greater than the time it will take to use the stairs, print \u00abYES\u00bb (without quotes), otherwise print \u00abNO> (without quotes).\n\nYou can print each letter in any case (upper or lower).\n\n\n-----Examples-----\nInput\n5 1 4 4 2 1\n\nOutput\nYES\nInput\n1 6 6 2 1 1\n\nOutput\nNO\nInput\n4 1 7 4 1 2\n\nOutput\nNO\n\n\n-----Note-----\n\nIn the first example:\n\nIf Masha goes by the stairs, the time she spends is $4 \\cdot 4 = 16$, because she has to go $4$ times between adjacent floors and each time she spends $4$ seconds. \n\nIf she chooses the elevator, she will have to wait $2$ seconds while the elevator leaves the $4$-th floor and goes to the $5$-th. After that the doors will be opening for another $1$ second. Then Masha will enter the elevator, and she will have to wait for $1$ second for the doors closing. Next, the elevator will spend $4 \\cdot 2 = 8$ seconds going from the $5$-th floor to the $1$-st, because the elevator has to pass $4$ times between adjacent floors and spends $2$ seconds each time. And finally, it will take another $1$ second before the doors are open and Masha can come out. \n\nThus, all the way by elevator will take $2 + 1 + 1 + 8 + 1 = 13$ seconds, which is less than $16$ seconds, so Masha has to choose the elevator.\n\nIn the second example, it is more profitable for Masha to use the stairs, because it will take $13$ seconds to use the elevator, that is more than the $10$ seconds it will take to go by foot.\n\nIn the third example, the time it takes to use the elevator is equal to the time it takes to walk up by the stairs, and is equal to $12$ seconds. That means Masha will take the elevator.\n\nIn the fourth example, the time it takes to use the elevator is equal to the time it takes to walk up by the stairs, and is equal to $12$ seconds. That means Masha will take the elevator.\n\nIn the fifth example, the time it takes to use the elevator is equal to the time it takes to walk up by the stairs, and is equal to $12$ seconds. That means Masha will take the elevator.\n\nGo for more tests.\n\"\"\""
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 4\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"6 1 4 4 2 1\") == \"YES\"\nassert solution(\"4 1 7 4 1 2\") == \"NO\""
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 5 * 10^4\n\n0 <= c <= 100\n\n1 <= n <= 10^9\n\nA series of numbers from 1 to n can be chosen, and at least one number must be chosen from the interval (1,n) inclusively.\n\n----Examples----\n\nInput\n3 1\n\nOutput\n2\nInput\n4 3\n\nOutput\n2\n\n\n-----Constraints-----\n1 <= stdin.length <= 5 * 10^4\n\n0 <= c <= 100\n\n1 <= n <= 10^9\n\nA series of numbers from 1 to n can be chosen, and at least one number must be chosen from the interval (1,n) inclusively.\n\n-----Time complexity-----\nTime O(n)\n\nTime O(n)\n\nTime O(n)\n\n\"\"\""
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 4\") == \"0\"\nassert solution(\"5 5\") == \"0\"\nassert solution(\"1 1 1\") == \"1\"\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3,1) == 2\nassert solution(4,3) == 2\nassert solution(4,1) == 2\nassert solution(5,1) == 3\nassert solution(4,2) == 2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3 1\", \"4 3\"]) == \"2\"\nassert solution([\"3 1\", \"4 3\"]) == \"2\"\nassert solution([\"3 1\", \"4 3\"]) == \"1\"\nassert solution([\"3 1\", \"4 3\"]) == \"1\"\nassert solution([\"3 1\", \"4 3\"]) == \"2\"\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 1\") == \"2\"\nassert solution(\n    \"4 3\") == \"2\"\nassert solution(\n    \"4 4\") == \"0\"\nassert solution(\n    \"4 4\") == \"0\"\nassert solution(\n    \"5 5\") == \"2\"\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,4) == 2\nassert solution(4,3) == 2\nassert solution(2,4) == 2\nassert solution(3,2) == 2\nassert solution(1,3) == 2\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"2\"\nassert solution([\"1\", \"2\"]) == \"1\"\nassert solution([\"1\"]) == \"1\"\nassert solution([\"4\", \"5\"]) == \"2\"\nassert solution([\"3\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 1) == 2\nassert solution(3, 2) == 2\nassert solution(4, 3) == 2\nassert solution(4, 4) == 0\nassert solution(3, 2) == 1\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '2'\nassert solution(inp) == '3'\nassert solution(inp) == '1'\nassert solution(inp) == '2'\n"
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"2\"\nassert solution(\"3 1\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^9\n1 \u2264 c \u2264 n\n1 \u2264 m \u2264 10^9\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA random integer N in the range from 1 to 10^9, between 1 and n (inclusive).\n\n[output] string\n\nThe probability that Andrew wins is the highest.\n\n[constraints]\n\n[1] 1 \u2264 n \u2264 10^9\n\n[1] 1 \u2264 c \u2264 n\n\n[1] 1 \u2264 m \u2264 10^9\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA random integer N in the range from 1 to n (inclusive), between 1 and n (inclusive).\n\n[output] string\n\nThe probability that Andrew wins is the highest.\n\n[constraints]\n\n[1] 1 \u2264 n \u2264 10^9\n\n[1] 1 \u2264 c \u2264 n\n\n[1] 1 \u2264 m \u2264 10^9\n\n[execution time limit] 4 seconds (py3)\n\n\n\n-----Solution-----\n\nfrom itertools import permutations\nfrom copy import deepcopy"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n\n\n\n\"\"\"\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, [0, 1, 0, 1, 0, 0, 1, 1, 1, 1]) == 3\nassert solution(2, [0, 0, 1, 1, 1, 0, 1, 0, 0, 0]) == 3\n\n\n-----Test Cases-----\nsolution(1, [0, 1, 0, 1, 0, 0, 1, 1, 1, 1])\nsolution(7, [0, 0, 1, 1, 1, 0, 1, 0, 0, 0])\nsolution(3, [0, 0, 0, 1, 0, 0, 0, 0, 0, 0])"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\nprint(\"Correct\")\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \n    ) == 1\n\"\"\""
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin) == 0"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"4\"\n\n\nInput\n\nInput\n1\n0\n0\n0\n\nOutput\n1\n\nInput\n\nInput\n2\n0\n0\n\nOutput\n0\n\nInput\n\nInput\n1\n0\n1\n\nOutput\n0\n\nInput\n\nInput\n1\n0\n1\n\nOutput\n0\n\nInput\n\nInput\n1\n1\n0\n0\n\nOutput\n0\n\nInput\n\nInput\n0\n0\n1\n\nOutput\n0\n\n\nassert solution(inp) == 0\n\n\nInput\n\nInput\n1\n0\n0\n\nOutput\n1\n\nassert solution(inp) == 1\n\n\n'''\n\nn = int(input())\npair = []\nfor i in range(n):\n    pair.append(list(map(int, input().split())))\n\nanswer = 0\nfor i in range(n-1):\n    for j in range(i+1, n):\n        if pair[i][0] < pair[j][0] and pair[i][1] > pair[j][1]:\n            answer += 2\nprint(answer)\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('0 1 0 1 1') == '0'\nassert solution('0 1 0 0 1') == '1'\nassert solution('0 1 0 0 0') == '1'\nassert solution('0 0 1 0 0') == '0'\nassert solution('1 0 1 0 0') == '0'\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n0 \u2264 n \u2264 100, 1 \u2264 k \u2264 10000\n\ntime complexity: O(n*k)\n\"\"\"\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"2\"\nassert solution(\"4 1\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"4 5\") == \"1\"\nassert solution(\"2 2\") == \"2\"\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\n\n------IMPRECISE----\n\nYou have to change the last line of the code to change the last line of the code.\n\nThe final line is changed to return the minimum number of days.\n\nHere is an example of the code."
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2, 3) == 2\nassert solution(2, 17) == 3\nassert solution(3, 10) == -1\nassert solution(1, 10) == -1\n\nassert solution(1, 9) == -1\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"3 17\") == \"3\"\nassert solution(\"1 9\") == \"3\"\nassert solution(\"10 10 10\") == \"3\"\nassert solution(\"10 10\") == \"3\"\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"2\"\nassert solution(\"3 17\") == \"3\"\nassert solution(\"1 9\") == \"3\"\nassert solution(\"10 10 10\") == \"3\"\nassert solution(\"10 10 10 10 10\") == \"5\"\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 3') == 2\nassert solution('3 17') == -1\nassert solution('1 9') == 3\n\nprint(solution(input()))\n\"\"\"\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 3) == 3\nassert solution(1, 10) == -1\nassert solution(1, 10) == -1\nassert solution(1, 1) == 1\nassert solution(1, 2) == 2\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == -1\n"
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1, \"Error\"\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2 3 4\"\nassert solution(stdin) == \"1 0 0 0\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"0 0 0 0\""
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0 1 2 3 4 5\"\nassert solution(stdin) == \"4 3 2 1\"\nassert solution(stdin) == \"1 2 1 0\"\nassert solution(stdin) == \"2 1 0 0\"\nassert solution(stdin) == \"0 1 0 0\"\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n  [\n  [\n    [2, 1, 1],\n    [1, 2, 1],\n    [1, 1, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 1, 2],\n    [1, 2, 1]\n  ]\n  ]\n  ) == 4\nassert solution(\n  [\n  [\n    [2, 1, 1],\n    [1, 2, 1],\n    [1, 1, 2]\n  ],\n  [\n    [1, 1, 2],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n  ]\n  ) == 0\nassert solution(\n  [\n  [\n    [1, 2, 1],\n    [1, 1, 2],\n    [1, 2, 1]\n  ],\n  [\n    [1, 2, 1],\n    [1, 1, 2],\n    [1, 1, 2]\n  ]\n  ]\n  ) == 2\nassert solution(\n  [\n  [\n    [2, 1, 1],\n    [1, 2, 1],\n    [1, 1, 2]\n  ],\n  [\n    [1, 2, 1],\n    [1, 1, 2],\n    [1, 2, 1]\n  ]\n  ]\n  ) == 2\nassert solution(\n  [\n  [\n    [2, 1, 1],\n    [1, 1, 2],\n    [1, 2, 1]\n  ],\n  [\n    [1, 1, 2],\n    [1, 2, 1],\n    [1, 2, 1]\n  ]\n  ]\n  ) == 1\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == 1\n\"\"\"\nimport math\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2 3 2\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 1\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 1\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 3\nassert solution(3) == 3\nassert solution(4) == 0\nassert solution(5) == 0\n\n\n-----Problem-----\n\nLets assume we're working with a geometric figure (with $x$ and $y$ axis).\n\nLet $x$ be the horizontal axis and $y$ be the vertical axis.\n\nLet $n = 2^3$ cells.\n\nWrite a recursive function:"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp := input()) == 5\nassert solution(inp := input()) == 13\nassert solution(inp := input()) == '5'\n\n\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\n\nassert solution(stdin) == 5\nassert solution(stdin) == 13\n\nassert solution(stdin) == 3\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"22\"\nassert solution(stdin) == \"46\"\nassert solution(stdin) == \"77\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\nInput\n1\n\nOutput\n5\nInput\n1\n\nOutput\n1\n\nExplanation\nAlex finds a $1$-st order rhombus.\n\nAlex adds the cells in one cell, one cell with side side 1, and one cell with side side 2 to the rhombus.\n\nAlex starts from cell 1 (side side 1) and ends at cell 2 (side side 2).\n\nAlex is satisfied with cell 2 and thus have all cells in cell 2.\n\nHe gives us all cells with side side 1, 2, and 3.\n\nNow Alex gets the number of cells in a $n$-th order rhombus.\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"Expected solution\"\nassert solution(stdin), \"Got solution\"\n\nNote: If you want to use the `logic.cnf` module in a Python interpreter,\nthe function `assert solution(stdin)` must be used to test the output.\n\n\"\"\"\n\nfrom cnf import cnf\nfrom logic import pypi as pypi\nfrom logic import pypi as pypi"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\n\"\"\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(0) == '1'\nassert solution(1) == '4'\nassert solution(2) == '5'\nassert solution(3) == '13'\nassert solution(4) == '24'\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == 5\nassert solution(\"3\") == 13\nassert solution(\"3\") == 13\nassert solution(\"4\") == 7\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    '2 3 4') == '3'\nassert solution(\n    '6 5 6 9 8 4 3 2 1') == '8'\nassert solution(\n    '3 2 1') == '3'\nassert solution(\n    '3 4 1 3 2') == '3'\nassert solution(\n    '1 2 1 3 3 4 4 5 6 7 8 9') == '7'\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\", \"pangram\"\nassert solution(stdin) == \"NO\", \"invalid pangram\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"hello\") == \"YES\"\nassert solution(\"toosmallword\") == \"NO\"\nassert solution(\"toosmallword\") == \"NO\"\nassert solution(\"hello\") == \"NO\"\nassert solution(\"hello\") == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a) == 'YES', 'pangram'\nassert solution(a) == 'NO', 'not a pangram'\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 'YES', \"1 is not a pangram\"\nassert solution(2) == 'NO', \"2 is not a pangram\"\nassert solution(3) == 'YES', \"3 is not a pangram\"\nassert solution(4) == 'NO', \"4 is not a pangram\"\nassert solution(5) == 'YES', \"5 is not a pangram\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"YES\", \"The function does not work\"\n\"\"\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\", 'Pangram'\n\"\"\""
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"Hello World\") == \"YES\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\", \"solution() return false\"\n"
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"toosmallword\") == \"YES\"\nassert solution(\"TheQuickBrownFoxJumpsOverTheLazyDog\") == \"NO\"\n\"\"\"\n\nclass Solution:\n    def isPangram(self, st: str) -> bool:\n        pass\n        "
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"00:09\"\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('23:59') == '00:09'\nassert solution('20:20') == '22:21'\nassert solution('10:10') == '01:00'\n\n\n\"\"\""
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"23:59\") == \"00:09\"\nassert solution(\"20:20\") == \"00:00\"\nassert solution(\"121\") == \"22:21\""
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '00:09', \"Expected 00, got {}.\".format(solution(stdin))\nassert solution(stdin) == '00:09', \"Expected 00, got {}.\".format(solution(stdin))\nassert solution(stdin) == '00:09', \"Expected 00, got {}.\".format(solution(stdin))\nassert solution(stdin) == '00:09', \"Expected 00, got {}.\".format(solution(stdin))\nassert solution(stdin) == '00:09', \"Expected 00, got {}.\".format(solution(stdin))\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"23:59\", \"10\", \"0\"]) == \"00:09\"\nassert solution([\"20:20\", \"121\"]) == \"22:21\"\nassert solution([\"10:10\", \"0\"]) == \"10:10\""
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:10\"\nassert solution(stdin) == \"00:00\"\nassert solution(stdin) == \"00:00\"\nassert solution(stdin) == \"00:00\"\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"00:09\"\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:09\"\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"23:59\", \"10\", \"0\"]) == \"00:09\"\nassert solution([\"20:20\", \"121\"]) == \"00:21\"\nassert solution([\"10:10\"]) == \"10:10\"\nassert solution([\"10:10\"]) == \"00:10\"\nassert solution([\"10:10\", \"20:20\"]) == \"00:20\"\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"00:09\"\nassert solution(input()) == \"00:09:00\"\nassert solution(input()) == \"00:09:00\"\nassert solution(input()) == \"00:09:00\"\nassert solution(input()) == \"00:09:00\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10101') == 'NO'\nassert solution('10101') == 'YES'\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    'a0'\n    'a1'\n    'a2'\n    'a3'\n    'a4'\n    'a5'\n    'a6'\n    'a7'\n    'a8'\n    'a9'\n    'a10'\n    'a11'\n    'a12'\n    'a13'\n    'a14'\n    'a15'\n    'a16'\n    'a17'\n    'a18'\n    'a19'\n    'a20'\n    'a21'\n    'a22'\n    'a23'\n    'a24'\n    'a25'\n    'a26'\n    'a27'\n    'a28'\n    'a29'\n    'a30'\n    'a31'\n    'a32'\n    'a33'\n    'a34'\n    'a35'\n    'a36'\n    'a37'\n    'a38'\n    'a39'\n    'a40'\n    'a41'\n    'a42'\n    'a43'\n    'a44'\n    'a45'\n    'a46'\n    'a47'\n    'a48'\n    'a49'\n    'a50'\n    'a51'\n    'a52'\n    'a53'\n    'a54'\n    'a55'\n    'a56'\n    'a57'\n    'a58'\n    'a59'\n    'a60'\n    'a61'\n    'a62'\n    'a63'\n    'a64'\n    'a65'\n    'a66'\n    'a67'\n    'a68'\n    'a69'\n    'a70'\n    'a71'\n    'a72'\n    'a73'\n    'a74'\n    'a75'\n    'a76'\n    'a77'\n    'a78'\n    'a79'\n    'a80'\n    'a81'\n    'a82'\n    'a83'\n    'a84'\n    'a85'\n    'a86'\n    'a87'\n    'a88'\n    'a89'\n    'a90'\n    'a91'\n    'a92'\n    'a93'\n    'a94'\n    'a95'\n    'a96'\n    'a97'\n    'a98'\n    'a99'\n    'a100'\n    'a101'\n    'a102'\n    'a103'\n    'a104'\n    'a105'\n    'a106'\n    'a107'\n    'a108'\n    'a109'\n    'a110'\n    'a111'\n    'a112'\n    'a113'\n    'a114'\n    'a115'\n    'a116'\n    'a117'\n    'a118'\n    'a119'\n    'a120'\n    'a121'\n    'a122'\n    'a123'\n    'a124'\n    'a125'\n    'a126'\n    'a127'\n    'a128'\n    'a129'\n    'a130'\n    'a131'\n    'a132'\n    'a133'\n    'a134'\n    'a135'\n    'a136'\n    'a137'\n    'a138'\n    'a139'\n    'a140'\n    'a141'\n    'a142'\n    'a143'\n    'a144'\n    'a145'\n    'a146'\n    'a147'\n    'a148'\n    'a149'\n    'a150'\n    'a151'\n    'a152'\n    'a153'\n    'a154'\n    'a155'\n    'a156'\n    'a157'\n    'a158'\n    'a159'\n    'a160'\n    'a161'\n    'a162'\n    'a163'\n    'a164'\n    'a165'\n    'a166'\n    'a167'\n    'a168'\n    'a169'\n    'a170'\n    'a171'\n    'a172'\n    'a173'\n    'a174'\n    'a175'\n    'a176'\n    'a177'\n    'a178'\n    'a179'\n    'a180'\n    'a181'\n    'a182'\n    'a183'\n    'a184'\n    'a185'\n    'a186'\n    'a187'\n    'a188'\n    'a189'\n    'a190'\n    'a191'\n    'a192'\n    'a193'\n    'a194'\n    'a195'\n    'a196'\n    'a197'\n    'a198'\n    'a199'\n    'a200'\n    'a201'\n    'a202'\n    'a203'\n    'a204'\n    'a205'\n    'a206'\n    'a207'\n    'a208'\n    'a209'\n    'a210'\n    'a211'\n    'a212'\n    'a213'\n    'a214'\n    'a215'\n    'a216'\n    'a217'\n    'a218'\n    'a219'\n    'a220'\n    'a221'\n    'a222'\n    'a223'\n    'a224'\n    'a225'\n    'a226'\n    'a227'\n    'a228'\n    'a229'\n    'a230'\n    'a231'\n    'a232'\n    'a233'\n    'a234'\n    'a235'\n    'a236'\n    'a237'\n    'a238'\n    'a239'\n    'a240'\n    'a241'\n    'a242'\n    'a243'\n    'a244'\n    'a245'\n    'a246'\n    'a247'\n    'a248'\n    'a249'\n    'a250'\n    'a251'\n    'a252'\n    'a253'\n    'a254'\n    'a255'\n    'a256'\n    'a257'\n    'a258'\n    'a259'\n    'a260'\n    'a261'\n    "
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"000001011001\") == \"YES\"\nassert solution(\"0000010110001\") == \"YES\"\nassert solution(\"0000010100101\") == \"NO\"\nassert solution(\"0000010100101\") == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1110010\") == \"NO\"\nassert solution(\"1110010\") == \"YES\"\nassert solution(\"10101\") == \"NO\"\nassert solution(\"11100\") == \"YES\"\nassert solution(\"11100000\") == \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"11111\") == \"YES\"\nassert solution(\"11011\") == \"YES\"\nassert solution(\"11101\") == \"YES\"\nassert solution(\"111110000\") == \"NO\"\nassert solution(\"111110101\") == \"NO\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"2 3 4 5 6\") == \"NO\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1' or solution(stdin) == '-1'\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\n\"\"\""
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4\") == \"0\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"3 1\") == \"0\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\" or solution(stdin) == \"0\", \"Problem in the solution.\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Modifications-----\n\n- Added one line for clarity in the report\n\n- Added a second line to tell me how many lines were correct\n\"\"\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 3 4 5 6\"\n
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 2, 3, 4, 5) == -1"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 0\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\"\"\""
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'NO'\n\n\"\"\"\nfrom math import factorial as fac, sqrt, fact, sqrtm, pi, floor, ceil"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n\n6 5\n16 13\n61690850361 24777622630\n34 33\n\"\"\"\n) == \"YES\""
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\"\n\n\n\"\"\"\n\nimport math\n\nimport itertools"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"4\") == \"NO\"\nassert solution(\"5\") == \"NO\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"1\") == \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input()\n) == 'YES'\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"6 5 3\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"6 7 6\") == \"NO\"\nassert solution(\"6 8 8 8\") == \"YES\"\nassert solution(\"6 11 3\") == \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"4\", \"5\", \"6\", \"16\", \"13\", \"61690850361\", \"24777622630\", \"34\", \"33\"]) == \"YES\"\nassert solution([\"4\", \"5\", \"6\", \"16\", \"13\", \"61690850361\", \"24777622630\", \"34\", \"33\"]) == \"NO\"\nassert solution([\"4\", \"5\", \"6\", \"16\", \"13\", \"61690850361\", \"24777622630\", \"34\", \"33\"]) == \"YES\"\nassert solution([\"4\", \"5\", \"6\", \"16\", \"13\", \"61690850361\", \"24777622630\", \"34\", \"33\"]) == \"NO\"\nassert solution([\"4\", \"5\", \"6\", \"16\", \"13\", \"61690850361\", \"24777622630\", \"34\", \"33\"]) == \"NO\"\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"Yes\"\nassert solution(inp) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n0 \u2264 x_{i} \u2264 10^9\n0 \u2264 y_{i} \u2264 10^9\n1 \u2264 x_{i} + y_{i} < 10^9\n\nTime Limit: O(N + M)\nSpace Limit: O(N)\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3\\n1 1\\n-1 -1\\n2 -1\\n-1 -1\\n2 -1\\n3 3\\n-1 -1\\n0 0\\n3 0\\n-1 0\\n-1 0\\n1 1 0\\n0 0 0\") == \"Yes\"\nassert solution(\"2\\n2 2\\n0 0 0\") == \"No\"\nassert solution(\"0\\n0 0 0\") == \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, \"-1 -1 -2 2\") == \"Yes\"\nassert solution(3, \"1 1 1\") == \"No\"\nassert solution(3, \"2 2 2\") == \"No\"\nassert solution(3, \"1 2 -1\") == \"No\"\nassert solution(3, \"2 1 -1\") == \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    input=\n    \"4\"\n) == \"Yes\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\nassert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n\nFor example, the first line contains a single positive integer n (2 \u2264 n \u2264 10^5).\nThe second line contains n points. The third line contains x_{i} and y_{i} (|x_{i}|, |y_{i}| \u2264 10^9, x_{i} \u2260 0). No two points coincide."
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\", \"No\"\n\"\"\""
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3!\") == \"6\"\nassert solution(\"2!\") == \"6\"\nassert solution(\"4!\") == \"1\"\nassert solution(\"5!\") == \"1\"\nassert solution(\"6!\") == \"1\"\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 3\") == \"6\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"2 3\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 3\") == \"1\"\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('') == ''\nassert solution('1') == ''\nassert solution('2') == ''\nassert solution('3') == ''\nassert solution('4') == '6'\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 6, \"0\"\nassert solution(input()) == \"24\", \"1\"\nassert solution(input()) == \"6\", \"2\"\nassert solution(input()) == \"1\", \"3\"\nassert solution(input()) == \"2\", \"4\"\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 12, \"should return 12\"\n'''\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 4') == 6\nassert solution('5 6') == 12\nassert solution('8 3') == 15\nassert solution('7 3') == 7\n\n\n---Input:\n\n4 3\n\n---Output:\n\n2\n\n\n\"\"\"\nclass Solution:\n    def gcd(self,a,b):\n        if a%b == 0:\n            return b\n        else:\n            return self.gcd(b, a%b)\n    def gcd(self,a,b):\n        if a==0:\n            return b\n        elif b==0:\n            return a\n        else:\n            return self.gcd(b,a%b)\n\n\"\"\"\n\"\"\"\n3.    Write a program to find the greatest common divisor of two integers.\n\n\"\"\"\n\nclass Solution:\n    def gcd(self,a,b):\n        if a>b:\n            a,b=b,a\n        while(a>0):\n            a,b=b%a,a\n        return b"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 6"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 6\n\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= A, B <= 10^9\n\nComplexity\ntime = O(A + B)\n\nA and B are strictly positive integers\n\nSample Input-1:\n\n3 3\n\nSample Output-1:\n\n6\n\n\n\n-----Constraints-----\n0 <= A, B <= 10^9\n\nA! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (A - 1) \u00b7 A\n\nB! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (B - 1) \u00b7 B\n\nC! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (C - 1) \u00b7 C\n\nConstraints:\n\n0 <= A, B, C <= 10^9\n\nA! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (A - 1) \u00b7 A\n\nB! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (B - 1) \u00b7 B\n\nC! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (C - 1) \u00b7 C\n\nTime Limit: 2 sec (O(A + B + C))\nSpace Limit: 2 sec (O(A + B + C))\n\nExample Input:\n\n6 5\n\n6 4\n\n3 4\n\n3 2\n\nSample Output:\n\n6\n\n\n\n-----Constraints-----\n0 <= A, B, C <= 10^9\n\nA! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (A - 1) \u00b7 A\n\nB! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (B - 1) \u00b7 B\n\nC! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (C - 1) \u00b7 C\n\nConstraints:\n\n0 <= A, B, C <= 10^9\n\nA! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (A - 1) \u00b7 A\n\nB! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (B - 1) \u00b7 B\n\nC! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (C - 1) \u00b7 C\n\nTime Limit: 2 sec (O(A + B + C))\nSpace Limit: 2 sec (O(A + B + C))\n\nExample Input:\n\n1 1\n\n1 5\n\n2 1\n\n2 5\n\n3 1\n\n3 5\n\n4 5\n\n4 5\n\n5 4\n\n5 5\n\nConstraints:\n\n0 <= A, B, C <= 10^9\n\nA! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (A - 1) \u00b7 A\n\nB! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (B - 1) \u00b7 B\n\nC! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (C - 1) \u00b7 C\n\nConstraints:\n\n0 <= A, B, C <= 10^9\n\nA! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (A - 1) \u00b7 A\n\nB! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (B - 1) \u00b7 B\n\nC! = 1 \u00b7 2 \u00b7 3 \u00b7... \u00b7 (C - 1) \u00b7 C\n\nTime Limit: 2 sec (O(A + B + C))\nSpace Limit: 2 sec (O(A + B + C))\n\nExample Output:\n\n6\n\n6\n\n5\n\n5\n\n5\n\n5\n\n5\n\n5\n\nExplanation:\n\nSample Input:\n\n4 3\n\nSample Output:\n\n6\n\n\"\"\"\n\nclass Solution:\n    def GCD(self, A, B):\n        # We'll let the user know what the greatest common divisor of integers in A, B is.\n        # We'll try to show the greatest common divisor of A and B in the output.\n        # In practice, a common solution would be to try to find the greatest common\n        # divisor of A and B, and keep repeating until one of the cases yields an\n        # integer which is less than or equal to the greatest common divisor of\n        # A and B. Then, we've found the greatest common divisor of A and B.\n        # Note that we don't need to worry about cases where the value is 0, which\n        # happens because we don't know the greatest common divisor of any two\n        # integers.\n        #\n        # For example, if A = 2 and B = 3, and the greatest common divisor of\n        # 2 and 3 is 4, then we know that 2 and 3 is of the greatest common divisor of\n        # 2 and 3.\n        #\n        # So, we'll just return the greatest common divisor of A and B.\n        #\n        # In this case, a common case is that A == B, which means that A is of the\n        # greatest common divisor of B.\n        #\n        # So, if A = 2 and B = 2, then we know that 2 is of the greatest common\n        # divisor of A and B.\n        #\n        # If A == B, then we know that A is of the greatest common divisor of B.\n        #\n        # If we know that A is of the greatest common divisor of B, we know that\n        # B is of the greatest common divisor of A.\n        #\n        # So, we don't need to worry about cases where A == B.\n        #\n        # We'll return the greatest common divisor of A and B.\n\n        # Remember, we're going to have to look at each of the input values\n        # with the helper function. We're going to make an assumption that all\n        # the input values have the same greatest common divisor. We'll keep\n        # going until we find one that doesn't have a greatest common divisor.\n        # The easiest way to do this is to do the same thing as before.\n\n        # Recursively call the function on each number.\n        def gcd(A, B):\n            if A == B:\n                return A\n            else:\n                return gcd(B, A % B)\n        return gcd(A, B)\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str) == '6'\nassert solution(str) == '6'\n\nprint('Example 2:')\nprint('Input:')\nprint('4 3')\nprint('Output:')\nprint('6')"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9 8\"\nassert solution(stdin) == \"4608 4096\"\nassert solution(stdin) == \"9 8\"\nassert solution(stdin) == \"4608 4096\"\nassert solution(stdin) == \"9 8\"\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4608 4096\"\n\n\n--- Solutions ---\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9 8\"\nassert solution(stdin) == \"4608 4096\"\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4608 4096'\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == '9'\nassert solution(512) == '4608'\n\nn = int(input())\na,b = map(int, stdin.split())\nprint(a-b)\nprint(b-a)\n\nn = int(input())\na,b = map(int, stdin.split())\nprint(a-b)\nprint(b-a)\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '4608 4096'\nassert solution(stdin) == '9 8'\nassert solution(stdin) == '4608 4096'\nassert solution(stdin) == '8 6'\nassert solution(stdin) == '6 1'\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 9816140840645568\nassert solution(stdin) == 9\nassert solution(stdin) == 9\nassert solution(stdin) == 9\nassert solution(stdin) == 9\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"9 8\"\nassert solution(stdin) == \"4608 4096\"\n"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"43640740791944168444545464444544454546444454445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445454644445"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"512\"]) == \"4608 4096\"\nassert solution([\"1\"]) == \"1\"\nassert solution([\"1\", \"5\"]) == \"6\"\nassert solution([\"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\"]) == \"1\"\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"35\"\nassert solution(input().strip().split(' ')) == \"35\""
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n\"\"\"2 2 10\n3 1 50\n1 1 30\n1 4 25\n1 8 25\n1 13 25\n1 15 25\n1 2 10\n2 2 10\n3 4 5\n2 5 10\n3 5 15\n1 5 45\n2 3 15\n2 3 5\n2 4 5\n3 4 10\n3 5 15\n2 4 10\n3 5 10\n2 5 15\n3 5 5\"\"\"\n    ) == 55\n\n\nassert solution(\n\"\"\"1 2 4 3\"\"\"\n    ) == 4\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"35\""
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"35\"\n\nSample Output\n35\n\n\nThere are two ways to travel from Vertex 1 to Vertex 3:\n - Vertex 1 \\rightarrow 2 \\rightarrow 3: You collect 20 + 30 = 50 coins on the way. After two minutes from the start of the game, you press the button, pay 2 \\times 10 = 20 coins, and you have 50 - 20 = 30 coins left.\n - Vertex 1 \\rightarrow 2: You collect 45 coins on the way. After one minute from the start of the game, you press the button, pay 1 \\times 10 = 10 coins, and you have 45 - 10 = 35 coins left.\nThus, the maximum score that can be obtained is 35.\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"35\"\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 3 10') == '35'\nassert solution('3 3 10') == '-1'\nassert solution('1 3 30') == '-1'\nassert solution('1 3 45') == '-1'\nassert solution('2 3 30') == '35'\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '35'\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 3 10\") == \"35\"\nassert solution(\"1 2 20\") == \"20\"\nassert solution(\"1 3 30\") == \"30\"\nassert solution(\"1 4 45\") == \"45\"\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '35'\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"35\"\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('ba 3') == 7\nassert solution('abc 4') == 9\nassert solution('cbaa 5') == 7\n\n'''\n\nclass Solution:\n    def minimumCost(self, s: str, t: str, C: int) -> int:\n        \n        cache = {}\n        \n        for i in range(len(s)):\n            \n            if s[i] not in cache:\n                cache[s[i]] = [i]\n            else:\n                cache[s[i]].append(i)\n                \n            for j in range(i, len(t)):\n                \n                if t[j] not in cache:\n                    cache[t[j]] = []\n                cache[t[j]].append(i)\n                cache[t[j]].append(i+j)\n                \n                if s[i:i+j] == t[j:j+i]:\n                    return min(C, len(cache[t[j]]))*C\n                else:\n                    cache[t[j]].pop(0)\n                    \n        return min(C, len(cache[s[i]]))*C"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 5 5 5 6 5 5 5 5 5 5 6 6 6 6 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ba 3\") == 7\nassert solution(\"abc 4\") == 9\nassert solution(\"cbaa 5\") == -1\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 7\nassert solution(input()) == -1\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 5\nassert solution(5) == -1\nassert solution(7) == 7"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"ba\", \"abc\", \"cbaa\"]) == 7\nassert solution([\"ba\", \"abc\", \"abc\"]) == 7\nassert solution([\"ba\", \"abc\", \"abcd\"]) == -1"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ba 3\") == \"7\"\nassert solution(\"abc 4\") == \"7\"\nassert solution(\"cbaa 5\") == \"7\"\nassert solution(\"ba 4\") == \"7\"\nassert solution(\"a b a\") == \"7\"\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ba 3\") == \"7\"\nassert solution(\"abc 4\") == \"9\"\nassert solution(\"cbaa 5\") == \"7\"\nassert solution(\"\") == -1\n\"\"\"\nimport unittest\n\n\nclass Solution(object):\n    def minimumCost(self, S):\n        \"\"\"\n        :type S: str\n        :rtype: int\n        \"\"\"\n        n, ans = len(S), -1\n\n        # initialize best string\n        best = S[0]\n\n        for i in range(1, n):\n            if S[i] == S[i - 1]:\n                if best[::-1] == S[i]:\n                    ans = i\n                    break\n            if best[::-1]!= S[i]:\n                best = S[i]\n                ans = i\n\n        for i in range(n - 1):\n            if S[i]!= S[i + 1]:\n                if best[::-1] == S[i] or best[::-1] == S[i + 1]:\n                    ans = max(ans, i)\n                else:\n                    best = S[i]\n\n        return ans\n\n\nclass TestSolution(unittest.TestCase):\n    def test_0(self):\n        s = Solution()\n        self.assertEqual(7, s.minimumCost(\"ba 3\"))\n\n    def test_1(self):\n        s = Solution()\n        self."
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 7\nassert solution(1) == 3\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n\"\"\""
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 2) == 7\nassert solution(6, 6) == 7\nassert solution(6, 4) == 7\nassert solution(6, 3) == 7"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"7\"\n\n\n---Hard-coded---\n\n---Detailed output---\n\nOutput\n\n(n=6, k=3)\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4 6 8 10 12 6 9 2 1 0 0 0\") == \"7\"\nassert solution(\"1 3 6 9 10 12 6 7 2 4 5\") == \"15\"\nassert solution
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7\"\n\nInput\n6 5\n\nOutput\n6\n\nInput\n6 5\n\nOutput\n9\n\nExplanation\n\nGrisha wants to take the five candies from the bag, but he only can take k candies from his bag. He is unhappy because he has two candidates, one one of his candies, and one other one of the other candy.\n\nFor example, if one candy has 3 candies and one candy is picked up, a candies combination with a candy 1 is called the xor-sum of (3+1) and (2+1).\n\nHere, if the candy with candy 1 is picked up and picked up, then the xor-sum of (3+1) and (2+1) is also the xor-sum of (3+1) and (2+2).\n\nHe can also take all the other candies from his bag.\n\nNow, if the other candy is picked up, the xor-sum of (3+1) and (2+2) is also the xor-sum of (3+2) and (2+3).\n\nSince the xor-sum of (3+1) and (2+2) is more than the xor-sum of (3+3) and (2+3), the xor-sum of (3+1) and (2+2) is the maximum possible xor-sum.\n\nHowever, since the candy with candy 1 is picked up and picked up, then the xor-sum of (3+1) and (2+1) is also the xor-sum of (3+1) and (2+2) = 0 because the candy with candy 1 is not picked up.\n\nSo, if the candy with candy 1 is picked up and picked up, then the xor-sum of (3+1) and (2+1) is also the xor-sum of (3+1) and (2+2).\n\nSince the candy with candy 1 is picked up and picked up, then the xor-sum of (3+1) and (2+1) is the xor-sum of (3+1) and (2+2) = 0 because the candy with candy 1 is not picked up.\n\n\n-----Constraints-----\n1 \u2264 n \u2264 10^18\n1 \u2264 k \u2264 n\n\n[input] string stdin\n\nThe first line of the input is the integer n (1 \u2264 n \u2264 10^18).\n\nThe second line of the input contains k (1 \u2264 k \u2264 n).\n\nOutput\n\nThe xor-sum of all the integer numbers\n\n[input] string\n\nThe first line of the input is the integer n (1 \u2264 n \u2264 10^18).\n\nThe second line of the input contains k (1 \u2264 k \u2264 n).\n\nOutput\n\nThe xor-sum of all the integer numbers\n\n[output] string\n\nThis output should only contain digits 0 through 9, the numbers 1 through 9, and the xor-sum of the numbers.\n\n\n[input] string\n\nThe first line of the input is the integer n (1 \u2264 n \u2264 10^18).\n\nThe second line of the input contains k (1 \u2264 k \u2264 n).\n\n[output] string\n\nThis output should only contain digits 0 through 9, the numbers 1 through 9, and the xor-sum of the numbers.\n\n\n[input] string\n\nThe first line of the input is the integer n (1 \u2264 n \u2264 10^18).\n\nThe second line of the input contains k (1 \u2264 k \u2264 n).\n\n[output] string\n\nThis output should only contain digits 0 through 9, the numbers 1 through 9, and the xor-sum of the numbers.\n\n> # from https://www.geeksforgeeks.org/xor-sum-of-all-candies-in-a-bag-of-length-5/\n\nimport math"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 7\nassert solution(input()) == 7\nassert solution(input()) == 7\nassert solution(input()) == 7\nassert solution(input()) == 7\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 2 2') == 7, \"Expected to return 7, but got 2\"\nassert solution('3 3 3') == 7, \"Expected to return 7, but got 3\"\nassert solution('5 5 5') == 5, \"Expected to return 5, but got 5\"\nassert solution('2 2 2') == 7, \"Expected to return 7, but got 2\"\nassert solution('3 3 3') == 7, \"Expected to return 7, but got 3\"\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"4\", \"3\"]) == \"7\"\nassert solution([\"6\", \"5\"]) == \"7\"\nassert solution([\"6\", \"3\", \"6\"]) == \"7\"\nassert solution([\"6\", \"5\", \"6\", \"5\", \"6\"]) == \"7\"\nassert solution([\"2\", \"3\", \"5\", \"1\", \"1\", \"2\", \"1\"]) == \"7\"\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 7\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 100,\nstdin.length \u2264 20,\nstdin.length \u2264 10^18\n\ntime limit: 1 second\nmemory limit: 128 MB\n\nExample 1:\n\nInput\n4 3\n\nOutput\n7\nExample 2:\n\nInput\n6 6\n\nOutput\n7\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(solution()) == str\n\nassert solution('sdfsdf') == str\n\nassert solution('hfhfhfh') == str\nassert solution('fjffjj') == str"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == \"3\"\nassert solution(2) == \"5\"\nassert solution(3) == \"4\"\nassert solution(4) == \"5\"\nassert solution(6) == \"4\"\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 4 3\") == \"3\"\nassert solution(\"2 3 3\") == \"3\"\nassert solution(\"2 3 2\") == \"3\"\nassert solution(\"2 2 1\") == \"3\"\nassert solution(\"1 2 2\") == \"3\"\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 3\nassert solution(4) == 3\nassert solution(5) == 3\n\n\n-----Constraints-----\n0 < stdin.length <= 10^4\n0 <= x_i, y_i <= 10^9\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n\"\"\"\n\nimport math\n\nn = int(input())\nlst = []\n\nfor _ in range(n):\n    x, y = map(int, input().split())\n    lst.append([x, y])"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n\n\n------------------\nCorrectness:\n    5020 is the minimum length of the triangle on the plane.\n    Correctness:\n    3579 is the minimum length of the shorter side of the triangle.\n    Correctness:\n    1204 is the minimum length of the triangle with two sides on the coordinate axis.\n    Correctness:\n    1547 is the minimum length of the triangle with two sides on the coordinate axis.\n    Correctness:\n    1824 is the minimum length of the triangle with two sides on the coordinate axis.\n    Correctness:\n    2027 is the minimum length of the triangle with two sides on the coordinate axis.\n\n\"\"\""
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"3\"\n\nassert solution(input) == \"4\"\n\n-----Constraints-----\n0 < n \u2264 2 * 10^6\n-10^9 < x_i,y_i < 10^9\n\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\nO(1)"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\""
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('nniinneetteeeenn') == 2\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcii') == 4\nassert solution('nineteenineteen') == 2\nassert solution('nineteenineteen') == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\nclass Solution:\n    def find_max_number_of_nineteen(self, s: str) -> int:\n        result = 0\n        for i in range(len(s)-1):\n            if s[i] in 'xyz' and s[i+1] in 'xyz' and s[i+2] in 'xyz':\n                if s[i] + s[i+1] + s[i+2] > result:\n                    result = s[i] + s[i+1] + s[i+2]\n        return result\n\nprint(Solution().find_max_number_of_nineteen(\"niinneetteeeenn\"))\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\nprint(\"Example 1:\")\nprint(\"Input : \" + str(stdin) + \"\\nOutput : \" + str(solution(stdin)))\n\nprint(\"Example 2:\")\nprint(\"Input : \" + str(stdin) + \"\\nOutput : \" + str(solution(stdin)))\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('niinneetteeeenn') == 2\nassert solution('nneteenabcnneteenabcnneteenabcnneteenabcii') == 2\nassert solution('nineteenineteen') == 2\nassert solution('nineteennineteen') == 2"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(nniinneetteeeenn) == 2\nassert solution(nineteenineteen) == 2\nassert solution(nniinneetteeeenn) == 2\nassert solution(nineteenineteen) == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\n\nInput\nnniinneetteeeenn\n\nOutput\n1\n\"\"\"\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3 5\") == 5\nassert solution(\"3 4\") == -1\n\nExample 1:\nInput\n\n\"3 4\"\n\nOutput\n\n5\n\nExample 2:\nInput\n\n\"3\"\n\nOutput\n\n-1\n\nExplanation\n\n3 = 2 + 2 + 2 + 2\n3 = 1 + 1 + 1 + 1\n3 = 0\nThere is no branch satisfying that condition.\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 5\nassert solution(input()) == -1\n\n\n\nTest cases\n\nPrint \"yes\" or \"no\".\n\nPrint the number of the highest branch that cannot be reached by any of the grasshoppers or report that it's impossible.\n\n\n-----Input-----\n\nThe only line contains two integers p and y (2 \u2264 p \u2264 y \u2264 10^9).\n\n\n-----Output-----\n\nOutput the number of the highest suitable branch. If there are none, print -1 instead.\n\n\n-----Examples-----\nInput\n3 6\n\nOutput\n5\n\nInput\n3 4\n\nOutput\n-1\n\n\n\n-----Note-----\n\nIn the first sample case grasshopper from branch 2 reaches branches 2, 4 and 6 while branch 3 is initially settled by another grasshopper. Therefore the answer is 5.\n\nIt immediately follows that there are no valid branches in second sample case.\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin = \"3 4\"\n    ) == \"5\"\n\nassert solution(\n    stdin = \"3 4\"\n    ) == -1\n\n-----Constraints-----\n\n1 <= p <= 10^9\n1 <= y <= 10^9\n1 <= stdin.length <= 2*10^4\nstdin.length <= 10^5\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 4\"\n) == 5\nassert solution(\n    \"1 2\"\n) == 2\nassert solution(\n    \"1 3\"\n) == -1\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, 6) == 5\n\n\n\n----Constraints----\n\n0 <= stdin.length <= 20\nstdin.length <= 50\n1 <= p <= 10^9\n1 <= y <= 10^9\n\n\n----Discussion----\n\nEvery grasshopper is located in a branch.\nThere are at most y branches in each branch.\nThere are no branches that can safely be reached by the grasshoppers.\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 5\n\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4\") == 5\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 3\") == 5\nassert solution(\"2 2\") == -1\n\n\n\"\"\"\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, 6) == 5\n\"\"\""
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n3 6\n\nOutput\n-1"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n  2,\n  3,\n  9,\n  15,\n  10,\n  2,\n  20,\n  30,\n  39,\n  41,\n  100,\n  35,\n  6,\n  7,\n  50,\n  20,\n  1,\n  2,\n  2,\n  3,\n  10,\n  25,\n  30,\n  39,\n  10,\n  40,\n  30,\n  50,\n  35,\n  20,\n  30,\n  30,\n  40,\n  10,\n  20,\n  30,\n  20,\n  10,\n  35,\n  20,\n  40,\n  30,\n  20,\n  35,\n  35,\n  10,\n  30,\n  20,\n  30,\n  35,\n  20,\n  10,\n  40,\n  40,\n  30,\n  35,\n  40,\n  30,\n  10,\n  20,\n  10,\n  30,\n  35,\n  30,\n  20,\n  40,\n  20,\n  30,\n  50,\n  40,\n  40,\n  30,\n  20,\n  35,\n  40,\n  30,\n  35,\n  30,\n  40,\n  20,\n  40,\n  40,\n  30,\n  20,\n  30,\n  40,\n  30,\n  40,\n  30,\n  50,\n  40,\n  40,\n  30,\n  20,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n  10,\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 30\nassert solution(input('3 2')) == 20\nassert solution(input('2 3')) == 20\nassert solution(input('1 1')) == 0\nassert solution(input('2 2')) == 0\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 1 20\") == \"40\"\nassert solution(\"7 3 50\") == \"30\"\nassert solution(\"10 5 100\") == \"20\""
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 1 20', [5, 1, 20], 10) == '40', 'Expected \"40\" got: {}'.format(10)\nassert solution('7 3 50', [7, 3, 50], 50) == '30', 'Expected \"30\" got: {}'.format(30)\nassert solution('10 5 100', [10, 5, 100], 100) == '20', 'Expected \"20\" got: {}'.format(20)\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3 1\", \"1 2\", \"0 0\", \"0 0\"]) == \"15\"\nassert solution([\"5 1\", \"0 1\", \"0 0\", \"0 0\"]) == \"30\"\nassert solution([\"7 3\", \"1 2\", \"0 1\", \"0 0\"]) == \"20\"\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == ans\nassert inp == ans\n\n---------------------------------\n\nInput\n\nThere are n houses in the village, lining in a straight line from left to right: house 1, house 2,..., house n. The village is also well-structured: house i and house i + 1 (1 \u2264 i < n) are exactly 10 meters away. In this village, some houses are occupied, and some are not. Indeed, unoccupied houses can be purchased.\n\nYou will be given n integers a_1, a_2,..., a_{n} that denote the availability and the prices of the houses. If house i is occupied, and therefore cannot be bought, then a_{i} equals 0. Otherwise, house i can be bought, and a_{i} represents the money required to buy it, in dollars.\n\nAs Zane has only k dollars to spare, it becomes a challenge for him to choose the house to purchase, so that he could live as near as possible to his crush. Help Zane determine the minimum distance from his crush's house to some house he can afford, to help him succeed in his love.\n\n---\n\n\n\nInput:\n\nThe first line contains two integers n and m, the number of houses in the village and the house where the girl lives, and the amount of money Zane has (in dollars).\n\nThe second line contains n integers a_1, a_2,..., a_{n} that denote the availability and the prices of the houses.\n\nIt is guaranteed that a_{m} = 0 and that it is possible to purchase some house with no more than k dollars.\n\n\n---Output---\n\nPrint one integer\u00a0\u2014 the minimum distance, in meters, from the house where the girl Zane likes lives to the house Zane can buy.\n\n\n---Constraints---\n\n1 <= n <= 100\n1 <= m <= 100\n0 <= a_1, a_2,..., a_{n} <= 100\n\n---Time---\n\nO(n)\n\n---Memory---\n\nO(1)\n\n\n\"\"\"\n\n\nimport math\n\nclass Solution:\n    def findDistance(self, distance, long_time, a):\n        dist = math.inf\n        a_last = a[0]\n        a_last_num = a[0]\n        for i in range(1, len(a)):\n            a_last_num = a_last_num + a[i]\n            if a_last_num > distance:\n                dist = dist + 1\n            elif a_last_num < distance:\n                dist = math.inf\n            a_last = a_last_num\n        a.sort()\n        if dist == long_time:\n            return dist\n        else:\n            return -1"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"40\"\nassert solution(input()) == \"30\"\nassert solution(input()) == \"20\"\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 30\n\n---\nInput---\n\n6\n1 3 1 1 1 1 1 1 1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 20\n\n----Good candidate-----"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '20'\nassert solution(stdin) == '30'\nassert solution(stdin) == '20'\nassert solution(stdin) == '20'\nassert solution(stdin) == '20'\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\nSample Input\n\n2 2\n1 1\n6 1\n1 6\n1 1\n\nSample Output\n\nYES\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"1 1\") == \"YES\"\nassert solution(\"4 4\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n\nInput\n2 2\n4 4\n7 5\n5 6\n\nOutput\nNO\nInput\n2 3\n1 2 3\n1 4 5\n2 4 6\n2 3 7\n3 4 8\n3 5 9\n4 6 10\n5 6 11\n6 7 12\n7 8 13\n8 9 14\n9 10 15\n\nOutput\nYES\n\"\"\""
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\nstdin: str\n) == \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"NO\"\nassert solution(\"3 3\") == \"YES\"\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 2') == 'NO'\nassert solution('3 3') == 'NO'\nassert solution('4 4') == 'NO'\nassert solution('4 5') == 'NO'\nassert solution('4 6') == 'YES'\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2\\n4 4\\n4 5\\n5 4\\n5 4\\n5 4\\n7 8\\n8 7\\n9 6\\n9 8\\n10 6\\n10 8\\n11 6\\n12 8\\n13 7\\n14 8\\n15 7\\n16 8\\n17 7\\n18 8\\n19 7\\n20 8\\n21 7\\n22 8\\n23 7\\n24 8\\n25 7\\n26 8\\n27 7\\n28 8\\n29 7\\n30 8\\n31 7\\n32 8\\n33 7\\n34 8\\n35 7\\n36 8\\n37 7\\n38 8\\n39 7\\n40 8\\n41 7\\n42 8\\n43 7\\n44 8\\n45 7\\n46 8\\n47 7\\n48 8\\n49 7\\n50 8\\n51 7\\n52 8\\n53 7\\n54 8\\n55 7\\n56 8\\n57 7\\n58 8\\n59 7\\n60 8\\n61 7\\n62 8\\n63 7\\n64 8\\n65 7\\n66 8\\n67 7\\n68 8\\n69 7\\n70 8\\n71 7\\n72 8\\n73 7\\n74 8\\n75 7\\n76 8\\n77 7\\n78 8\\n79 7\\n80 8\\n81 7\\n82 8\\n83 7\\n84 8\\n85 7\\n86 8\\n87 7\\n88 8\\n89 7\\n90 8\\n91 7\\n92 8\\n93 7\\n94 8\\n95 7\\n96 8\\n97 7\\n98 8\\n99 7\\n100 8\\n101 7\\n102 8\\n103 7\\n104 8\\n105 7\\n106 8\\n107 7\\n108 8\\n109 7\\n110 8\\n111 7\\n112 8\\n113 7\\n114 8\\n115 7\\n116 8\\n117 7\\n118 8\\n119 7\\n120 8\\n121 7\\n122 8\\n123 7\\n124 8\\n125 7\\n126 8\\n127 7\\n128 8\\n129 7\\n130 8\\n131 7\\n132 8\\n133 7\\n134 8\\n135 7\\n136 8\\n137 7\\n138 8\\n139 7\\n140 8\\n141 7\\n142 8\\n143 7\\n144 8\\n145 7\\n146 8\\n147 7\\n148 8\\n149 7\\n150 8\\n151 7\\n152 8\\n153 7\\n154 8\\n155 7\\n156 8\\n157 7\\n158 8\\n159 7\\n160 8\\n161 7\\n162 8\\n163 7\\n164 8\\n165 7\\n166 8\\n167 7\\n168 8\\n169 7\\n170 8\\n171 7\\n172 8\\n173 7\\n174 8\\n175 7\\n176 8\\n177 7\\n178 8\\n179 7\\n180 8\\n181 7\\n182 8\\n183 7\\n184 8\\n185 7\\n186 8\\n187 7\\n188 8\\n189 7\\n190 8\\n191 7\\n192 8\\n193 7\\n194 8\\n195 7\\n196 8\\n197 7\\n198 8\\n199 7\\n200 8\\n201 7\\n202 8\\n203 7\\n204 8\\n205 7\\n206 8\\n207 7\\n208 8\\n209 7\\n210 8\\n211 7\\n212 8\\n213 7\\n214 8\\n215 7\\n216 8\\n217 7\\n218 8\\n219 7\\n220 8\\n221 7\\n222 8\\n223 7\\n224 8\\n225 7\\n226 8\\n227 7\\n228 8\\n229 7\\n230 8\\n231 7\\n232 8\\n233 7\\n234 8\\n235 7\\n236 8\\n237 7\\n238 8\\n239 7\\n240 8\\n241"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n'''\n\nimport sys\n\nn, m = map(int, sys.stdin.readline().split())\n\nA = [[int(i) for i in sys.stdin.readline().split()] for j in range(n)]\nB = [[int(i) for i in sys.stdin.readline().split()] for j in range(n)]"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input().strip()) == \"YES\"\n\nThe example below is not quite correct.\n\nInput\n2 2\n4 4\n4 5\n5 4\n4 5\n5 4\n5 4\n\nOutput\nNO\nInput\n3 3\n1 2 3\n4 5 6\n7 8 9\n1 4 7\n2 5 6\n3 8 9\n\nOutput\nNO\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('abcdefgh') == 5\n\n\n\n-----Constraints-----\n\n1 <= len(stdin) <= 100\n\n2 <= string a, b <= 10^5\n\n\n\n-----Time complexity-----\n\nTime complexity is O(min(m, n)) where m is the number of characters in string a and n is the number of characters in string b.\n\n\nTime complexity of the code is O(min(m, n)) since we need to do a length check which is O(min(m, n)) to see whether the longest subsequence of a and b is a subsequence of any string.\n\n\n-----Algorithm-----\n\nFor each character in string a, calculate the length of the longest uncommon subsequence of string b and string a.\nIf string b has the longest subsequence, calculate its length.\n\nFor each character in string b, calculate the length of the longest uncommon subsequence of string a and string b.\nIf string a has the longest subsequence, calculate its length.\n\n\nTime complexity: O(min(m, n))\nSpace complexity: O(min(m, n))\n\n\n\n-----Tags-----\n\nComplexity\n\nruntime: O(min(m, n))\nspace: O(1)\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"abcd\"\n) == 5\nassert solution(\n    \"defgh\"\n) == -1\nassert solution(\n    \"aabc\"\n) == 6\n\n\nassert solution(\n    \"abc\"\n) == 0\nassert solution(\n    \"ab\"\n) == 0\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"defgh\") == 5\nassert solution(\"a\") == -1\nassert solution(\"a\") == -1\nassert solution(\"defgh\") == 5\nassert solution(\"a\") == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\n\n-----Brute Force-----\n\nA sequence of letters are named a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_1_2_3_4_5_6_7_8_9_0_1, where a is the first alphabet, b is the second alphabet, c is the third alphabet, d is the fourth alphabet, e is the fifth alphabet, f is the sixth alphabet, g is the seventh alphabet, h is the eighth alphabet, i is the ninth alphabet, j is the tenth alphabet, k is the eleventh alphabet, l is the twelfth alphabet, m is the thirteenth alphabet, n is the nineteenth alphabet, o is the twentieth alphabet, p is the nineteenth alphabet, q is the twentieth alphabet, r is the nineteenth alphabet, s is the twentieth alphabet, t is the twentieth alphabet, u is the twentieth alphabet, v is the twentieth alphabet, w is the twentieth alphabet, x is the twentieth alphabet, y is the twentieth alphabet, z is the twentieth alphabet.\n\nThe sequence of alphabet is a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z_1_2_3_4_5_6_7_8_9_0_1, where each alphabet is uppercase.\n\nThere are no matching chars in each of them, so we can assume the characters are one alphabet.\n\nThe longest common subsequence of a and b is a subsequence of the first alphabet that doesn't appear as a subsequence of the second alphabet.\n\nThe longest common subsequence of a and b is a subsequence of the first alphabet that appears as a subsequence of the second alphabet.\n\n\n-----Input-----\n\nInput\n\"a\"\n\"defgh\"\n\nOutput\n5\n\nInput\n\"abc\"\n\"defgh\"\n\nOutput\n5\n\nInput\n\"ac\"\n\"abc\"\n\nOutput\n-1\n\n-----Note-----\n\nInput is always a string.\n\nComplexity:\n\nTime: O(N^2)\n\nSpace: O(N)\n\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == -1\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin)!= -1\n\nInput\na\na\n\nOutput\n5\n\nInput\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abcdefghi\") == \"5\"\nassert solution(\"defgh\") == \"5\"\nassert solution(\"abc\") == \"3\"\nassert solution(\"\") == -1\nassert solution(\"abcdef\") == \"5\"\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"ab\",\"bc\",\"abcd\"]) == 5\nassert solution([\"a\",\"b\",\"c\",\"d\",\"e\"]) == 4\nassert solution([\"ab\",\"abc\",\"aa\"]) == -1\nassert solution([\"a\",\"b\",\"c\",\"a\",\"d\"]) == -1\nassert solution([\"a\",\"b\",\"c\",\"a\",\"c\"]) == 5\n"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution == -1 or solution == 5\n\n\n-----Algorithm-----\n\nIf a is the subsequence of b, then a[i]\u00a0and b[j]\u00a0are the same character, but not the same character.\nBecause the subsequences of strings are considered as sequences of characters, the first character of a is set to the first character of b.\n\nThe algorithm is similar to that of the most common problem. For each string, you need to find the longest common subsequence of the strings.\n\nThe algorithm stops when a is empty, which means, it doesn't have any common subsequence. The algorithm stops when it finds a non-empty string.\n\nThe algorithm runs in O(N) time.\n\nInput\nstring a: \n    1. string b\n\nOutput\n\nlongest common subsequence of the two strings\n\nNo repeated characters are allowed.\n\nInput\nstring b:\n    1. string a\n\nOutput\n\nlength of the longest common subsequence of the two strings\n\nNo repeated characters are allowed.\n\nExample\nExample 1:\n\nInput\nstring a:\n\na\nstring b:\na\n\nOutput\n\n5\nExplanation\nThe longest common subsequence of the two strings is a, which is the longest possible sub-sequence of a.\nThe longest common subsequence of a and b is a.\n\nExample 2:\n\nInput\nstring a:\n\na\nstring b:\na\n\nOutput\n\n3\nExplanation\nIf a is string b, then it doesn't have any common subsequence.\nThe longest common subsequence of a and b is string a.\n\nExample 3:\n\nInput\nstring a:\n\na\nstring b:\nstring c:\na\nstring d:\na\nstring e:\na\nstring f:\na\nstring g:\na\nstring h:\na\nstring i:\na\nstring j:\na\nstring k:\na\nstring l:\na\nstring m:\na\nstring n:\na\nstring o:\na\nstring p:\na\nstring q:\na\nstring r:\na\nstring s:\na\nstring t:\na\nstring u:\na\nstring v:\na\nstring w:\na\nstring x:\na\nstring y:\na\nstring z:\na\n\nOutput\nlength of the longest common subsequence of the two strings.\n\nExplanation\nThe longest common subsequence of the two strings is a, which is the longest possible sub-sequence of a.\n\nExample 4:\n\nInput\nstring a:\nstring b:\n\nOutput\n\n-1\n\nInput\nstring a:\nstring b:\nstring c:\nstring d:\nstring e:\nstring f:\nstring g:\nstring h:\nstring i:\nstring j:\nstring k:\nstring l:\nstring m:\nstring n:\nstring o:\nstring p:\nstring q:\nstring r:\nstring s:\nstring t:\nstring u:\nstring v:\nstring w:\nstring x:\nstring y:\nstring z:\n\nOutput\n\n-1\n\n\n\n-----Constraints-----\n1 <= |a| <= 10^5\n1 <= |b| <= 10^5\n\n\n'''\nclass Solution:\n    def longestCommonSubsequence(self, a: str, b: str) -> int:\n        d = {}\n        for i in range(len(a)):\n            d[i] = -1\n        for i in range(len(b)):\n            d[i] = -1\n        \n        \n        i = 0\n        j = 0\n        \n        while i < len(a) and j < len(b):\n            \n            if a[i] == b[j]:\n                d[i] = j\n                i += 1\n                j += 1\n            elif d[i] == -1:\n                d[i] = max(d[i], d[i+1] + 1)\n            else:\n                d[i] = -1\n                i += 1\n        \n        while i < len(a):\n            d[i] = -1\n            i += 1\n        \n        while j < len(b):\n            d[j] = -1\n            j += 1\n        \n        return max(d.values())\n    \n    \nclass Solution:\n    def longestCommonSubsequence(self, a: str, b: str) -> int:\n        if len(a) > len(b):\n            return self.longestCommonSubsequence(b, a)\n        \n        d = {}\n        for i in range(len(a)):\n            d[i] = -1\n            \n        i = 0\n        j = 0\n        \n        while i < len(a) and j < len(b):\n            if a[i] == b[j]:\n                d[i] = j\n                i += 1\n                j += 1\n            elif d[i] == -1:\n                d[i] = max(d[i], d[i+1] + 1)\n            else:\n                d[i] = -1\n                i += 1\n        \n        while i < len(a):\n            d[i] = -1\n            i += 1\n        \n        while j < len(b):\n            d[j] = -1\n            j += 1\n        \n        return max(d.values())"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"{} 2 1\".format(stdin)) == \"-1\"\nassert solution(\"{} 19 1\".format(stdin)) == \"82\"\nassert solution(\"{} 16 12\".format(stdin)) == \"82\"\n\n\"\"\""
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 20\") == -1\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == -1\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"82\"\nassert solution(input()) == \"82\"\nassert solution(input()) == \"82\"\nassert solution(input()) == \"82\"\nassert solution(input()) == \"82\"\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n\ntime complexity: O(n)\nmemory complexity: O(n)\n\nTODO\n\nConstraints\n\n1 \u2264 a \u2264 b \u2264 100\n1 \u2264 c \u2264 d \u2264 100"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '82'"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 1\") == -1\n\n\n    \n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '82'\nassert solution(stdin) == '1'\n\n'''\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"82\"\nassert solution(\"5 7\") == -1\n\"\"\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"1 1 1\"\nassert solution(\"11\") == \"1 1 1\"\nassert solution(\"100000000\") == \"1 1 1\"\nassert solution(\"10000000000\") == \"1 1 1\"\nassert solution(\"23\") == \"77\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '77 77 79'\n\n\n-----Constraints-----\n1 <= stdin.length <= 15\n\n1 <= $n$ <= 10^4\n\n------Time complexity-----\nO(n)\n\n------Space complexity-----\nO(n)\n\n\n-----Side-effects-----\nYou can modify the input in-place.\n\n\"\"\""
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == '1 1 1', '1 1 1'\nassert solution(233) == '77 77 79', '77 77 79'\nassert solution(12) == '77 77 79', '77 77 79'\nassert solution(123) == '77 77 79', '77 77 79'\nassert solution(4) == '4', '4'\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1 1 1\"\n\n\n-----Constraints-----\n1 <= n <= 10^9\n'''"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == \"1 1 1\"\nassert solution(\"233\") == \"77 77 79\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == \"1 1 1\"\nassert solution(233) == \"77 77 79\"\nassert solution(2) == \"2\"\nassert solution(1) == \"1\"\nassert solution(0) == \"1\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"77 77 79\"\nassert solution(input()) == \"3\"\n\"\"\"\nimport math"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(123) == \"77 77 79\"\nassert solution(234) == \"77 77 79\"\nassert solution(346) == \"77 77 79\"\nassert solution(67) == \"77 77 79\"\nassert solution(10000) == \"77 77 79\"\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3\"\n    ), 1 1 1\nassert solution(\n    \"233\"\n    ), 77 77 79\nassert solution(\n    \"1 1 1\"\n    ), 1 1 1\nassert solution(\n    \"1 1 1 0 0 0\"\n    ), 1 1 1\nassert solution(\n    \"1 1 1\"\n    ), 1 1 1\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2233242233242233') == '1 1 1'\nassert solution('123') == '3'\nassert solution('123') == '1'\nassert solution('123') == '2'\nassert solution('23') == '3'\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    stdin = \"2 1 1 1 2\\n\",\n    expected = \"2\"\n) == \"2\"\nassert solution(\n    stdin = \"3 3 1 2 3\\n\",\n    expected = \"6\"\n) == \"6\"\nassert solution(\n    stdin = \"4 3 3 3 4\\n\",\n    expected = \"12\"\n) == \"12\"\nassert solution(\n    stdin = \"5 1 1 1 2\\n\",\n    expected = \"0\"\n) == \"0\"\nassert solution(\n    stdin = \"5 3 3 3 3\\n\",\n    expected = \"0\"\n) == \"0\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 3 1 1\") == \"4\"\nassert solution(\"3 3 1 2 3\") == \"6\"\nassert solution(\"1 3 1 1\") == \"2\"\nassert solution(\"1 2 3 3\") == \"1\"\nassert solution(\"1 2 3 4\") == \"2\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2 1 1 1 2) == 2\nassert solution(3 3 1 2 3) == 6\nassert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 6\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1 1 1 2') == '2'\nassert solution('3 3 1 2 3') == '6'"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 1 1 1 2\") == \"2\"\nassert solution(\"5 3 1 2 3\") == \"6\"\nassert solution(\"4 3 1 2 3\") == \"6\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1 2 3 4\") == \"8\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"\n2 1 1 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n3 3 1 2 3\n\"\"\") == \"6\"\nassert solution(\"\"\"\n3 3 1 2 3\n4 4 5 6\n\"\"\") == \"3\"\nassert solution(\"\"\"\n1 1 1 2\n\"\"\") == \"2\"\nassert solution(\"\"\"\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1 1 2\n1 1"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(INPUT) == EXPECTED_RESULT\nassert solution(INPUT2) == EXPECTED_RESULT2\nassert solution(INPUT3) == EXPECTED_RESULT3\nassert solution(INPUT4) == EXPECTED_RESULT4\nassert solution(INPUT5) == EXPECTED_RESULT5\n\"\"\""
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.argv) == \"8\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 9) == 8\nassert solution(6, 2) == 6\nassert solution(9, 3) == 0\nassert solution(20, 10) == 0\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '8'\nassert solution(input().split()) == '8'\n'''"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 3\\n1 1\\n1 2\\n\",\n    4,\n    3,\n    1,\n    1\n) == 8\n\n\n\n\n\n\n\"\"\"\n\nclass Solution:\n    def getMaxWeight(self, weights: List[int], height: int) -> int:\n        \n        # C++ solution\n        # double curr_weight = weights[0];\n        # double curr_height = heights[0];\n        # for(int i = 1; i < heights.length; i++) {\n        #     int weight = weights[i];\n        #     curr_weight = weight + curr_weight;\n        #     curr_height = max(curr_height, height + i);\n        #     curr_weight = max(curr_weight, weight + curr_weight);\n        # }\n        # return curr_weight;\n        \n        # Java solution\n        # int[] solution(int[] weights, int height);\n        # int maxWeight = 0;\n        # for(int i = 0; i < weights.length; i++) {\n        #     curr_weight = weights[i];\n        #     curr_height = height;\n        #     for(int j = 0; j < height; j++) {\n        #         curr_weight = weights[j];\n        #         curr_height = height - j;\n        #         if(curr_height < 0) {\n        #             curr_weight = weights[j];\n        #             break;\n        #         } else {\n        #             curr_weight = weights[j];\n        #             break;\n        #         }\n        #     }\n        #     curr_weight = curr_weight + curr_weight;\n        #     maxWeight = max(curr_weight, maxWeight);\n        # }\n        # return maxWeight;\n        \n        \n        # Python solution\n        \n        def get_max_weight(weights, height):\n            if not weights:\n                return 0\n            max_weight = 0\n            for i in range(len(weights)):\n                max_weight = max(weights[i], max_weight)\n            for i in range(len(weights)):\n                max_weight = max(max_weight, weights[i] + height)\n            return max_weight\n        \n        return get_max_weight(weights, height)\n        \n        pass\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"8\""
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 3\") == \"8\"\nassert solution(\"4 3 9 2\") == \"6\"\nassert solution(\"4 3 7\") == \"4\"\nassert solution(\"4 3 4\") == \"1\"\nassert solution(\"3 3 4 2\") == \"3\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == \"8\"\nassert solution(\"4 3 9 2\") == \"7\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"4 3\\n1 1\\n1 2\") == 8\nassert solution(\"4 3\\n9 2\\n0 1\\n0 1\") == 1\nassert solution(\"4 3\\n1 1\\n1 2\\n\") == 8\nassert solution(\"4 3\\n1 1\\n2 1\\n1 2\") == 1\nassert solution(\"4 3\\n1 1\\n2 2\\n0 1\\n0 1\\n\") == 8\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '8'\n\"\"\"\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n'''\nimport sys\n\nclass Node:\n    def __init__(self, data = None, next = None):\n        self.data = data\n        self.next = next\n\n    def print(self):\n        temp = self\n        print(self.data)\n        while temp is not None:\n            print(temp.data)\n            temp = temp.next\n            \n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\"\"\""
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n\n\n------Examples-----\n\nInput\n1\n1 4 3 2 1\n2 3 6\n\nOutput\n3\n\n\nInput\n2\n1 5 3 2 1\n3 6\n\nOutput\n2\n\nInput\n1\n2 3 2 1\n3 10\n\nOutput\n1\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\n\nprint(solution(stdin))\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 1\n\n\n-----Basic Cases-----\n\nInput:\n5\n3 4 3 2 1\n6 8\n\nOutput:\n3\n\nInput:\n2\n3 4\n2 4\n\nOutput:\n0\n\n\n-----Advanced Cases-----\n\nInput:\n5\n0 3 3 4 2\n3 10\n\nOutput:\n0\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n0 <= stdin[i] <= 100\n\nExample:\nInput:\n2\n1 2\n2 3\n\nOutput:\n3\n\nInput:\n5\n1 3 4 2\n3 10\n\nOutput:\n0\n\n\n-----Input/Output-----\n\nInput:\n1\n3\n\nOutput:\n1\n\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 100\n\n\n------Sample Case-------\n\nSample Input\n2\n3 4 5\n6 7 8\n\nSample Output\n0\n\n\"\"\"\n\nimport sys\n\nclass Node:\n    def __init__(self,key):\n        self.left = None\n        self.right = None\n        self.val = key"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3 1 1 1\") == \"3\"\nassert solution(\"5 3 3 2 1\") == \"0\"\nassert solution(\"5 3 3 2 1 1\") == \"0\"\nassert solution(\"5 3 3 2 1 2\") == \"1\"\nassert solution(\"5 3 3 2 1 3\") == \"1\"\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 100\n1 <= c_1 <= c_2 <= c_{m}\n1 <= x <= y\n1 <= c_i < c_1 + c_2\n2 <= stdin.length <= 10000\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= c_1, c_2, c_{m}, x, y < 100\n1 <= stdin[i] <= 100\n1 <= c_i < c_1 + c_2\n2 <= stdin.length <= 10000\n\nOutput\n0\n\n[output]\n\nprint 0\n\n\n\n-----Sample Input-----\n\nSample Input:\n\n5\n3 4 3 2 1\n6 8\n\nSample Output:\n\n3\n\nSample Input:\n\n2\n1 5\n3 4 3 2 1\n6 8\n\nSample Output:\n\n0\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 100\n1 <= c_1, c_2, c_{m}, x, y < 100\n1 <= stdin.length <= 10000\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 100\n1 <= c_1, c_2, c_{m}, x, y < 100\n1 <= stdin.length <= 10000\n\n[output]\n\nprint 0\n\n\n\n[output]\n\nprint 0\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\nSample Input:\n\n5\n3 4 3 2 1\n6 8\n\nSample Output:\n\n3\n\nSample Input:\n\n2\n1 5\n3 4 3 2 1\n6 8\n\nSample Output:\n\n0\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 100\n1 <= c_1, c_2, c_{m}, x, y < 100\n1 <= stdin.length <= 10000\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 100\n1 <= c_1, c_2, c_{m}, x, y < 100\n1 <= stdin.length <= 10000\n\n[output]\n\nprint 0\n\n\n\n[output]\n\nprint 0\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\nSample Input:\n\n5\n3 4 3 2 1\n6 8\n\nSample Output:\n\n0\n\n[output]\n\nprint 0\n\n\n\n[output]\n\nprint 0\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\nSample Input:\n\n2\n1 5\n3 4 3 2 1\n6 8\n\nSample Output:\n\n0\n\n[output]\n\nprint 0\n\n\n\n[output]\n\nprint 0\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\nSample Input:\n\n2\n1 5\n3 4 3 2 1\n6 8\n\nSample Output:\n\n0\n\n[output]\n\nprint 0\n\n\n\n[output]\n\nprint 0\n\n[input]\n\nThe first line of input contains an integer, m (2 \u2264 m \u2264 100).\n\nThe second line contains m integers c_1, c_2,..., c_{m}, separated by single spaces (0 \u2264 c_{i} \u2264 100).\n\nThe third line contains n integers x, y (1 \u2264 x \u2264 y \u2264 10000).\n\nSample Input:\n\n2\n1 5\n3 4 3 2 1\n6 8\n\nSample Output:\n\n0\n\n[output]\n\nprint 0\n\n\n\n[output]\n\nprint 0\n\n[input]\n\nThe first line"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\"\"\"\n\nimport math\n\nn,k = map(int,input().split())\na=[]\nsum=0\nfor i in range(n):\n    a.append(int(input()))\nfor i in range(n):\n    for j in range(n):\n        if j!=i:\n            if a[i]>a[j]:\n                sum+=a[i]\nprint(sum)\nfor i in range(n):\n    if i!=n-1:\n        sum+=math.ceil(k/a[i])\n    else:\n        sum+=math.ceil(k/a[i])\nprint(sum)"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 2) == 6\n\nassert solution(5, 3) == 12\n\nassert solution(5, 4) == 10\n\nassert solution(19, 2) == 17\n\nassert solution(19, 3) == 17"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 3) == 2\nassert solution(19, 3) == 1\n\n\n-----Constraints-----\n1 <= n <= 2\u00b710^9\n1 <= k <= 2\u00b710^9\n1 <= A, B, x, < 2\u00b710^9\n\n-----Time Limit-----\n1 second\n\n'''\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12\n\"\"\""
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"8\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"1\""
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin.readline().strip()) == \"12\"\nassert solution(sys.stdin.readline().strip()) == \"9\"\nassert solution(sys.stdin.readline().strip()) == \"8\"\nassert solution(sys.stdin.readline().strip()) == \"12\"\nassert solution(sys.stdin.readline().strip()) == \"13\"\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 12"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5,3) == 6\n\nassert solution(5,5) == 8\n\nassert solution(19,2) == 12\n\nassert solution(10,1) == 5\n\nassert solution(20,20) == 26"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '12'\n\n\n-----Tests-----\n\nIf you run your code on the question, it should print:\n\nSuccess\n\nIf you run the code on the right side of the equation, it should print:\n\nIncorrect\n\nIf you run the code on the wrong side of the equation, it should print:\n\nIncorrect\n\nTo test whether the program works, run the questions without the () after the second argument of the function.\n\nprint(solution(\"19\"))\nprint(solution(\"3\"))\nprint(solution(\"1\"))\nprint(solution(\"4\"))\nprint(solution(\"2\"))\nprint(solution(\"5\"))\nprint(solution(\"19\"))\nprint(solution(\"19\"))\n\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 2. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 2.\nHow many coins does it cost?\n\nInput\n\n15\n20\n2\n5\n\nOutput\n\n3\n\nInput\n\n\n15\n10\n2\n5\n\nOutput\n\n2\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 2. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 3.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n3\n\nOutput\n\n2\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 3. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 4.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 4. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 5.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 5. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 6.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 6. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 7.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 7. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 8.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 8. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 9.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 9. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 10.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 10. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 11.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 11. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 12.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 12. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 13.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 13. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 14.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 14. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 15.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 15. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 16.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 16. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 17.\nHow many coins does it cost?\n\nInput\n\n\n15\n10\n\nOutput\n\n1\n\n-----Advanced-----\n\nThe number is very close to 1. With this test, the only way to solve this problem is to divide x by 17. \nConsider the following problem:\n\nFind number of coins you can obtain by subtracting 1 from x, then divide it by 18.\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 10\nassert solution(stdin) == 10\nassert solution(stdin) == 10\nassert solution(stdin) == 10\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '6'\nassert solution(stdin) == '10'\nassert solution(stdin) == '72'\nassert solution(stdin) == '1296'\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '6'\nassert solution(input()) == '2'\nassert solution(input()) == '2'\nassert solution(input()) == '6'\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5184) == 10\nassert solution(5184) == 6\nassert solution(5184) == 6\nassert solution(5184) == 6\nassert solution(5184) == 6\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"10 2\"\n\nassert solution(stdin) == \"6 4\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"10 2\"\nassert solution(stdin) == \"6 4\"\nassert solution(stdin) == \"72 6\"\nassert solution(stdin) == \"1296\"\nassert solution(stdin) == \"100\"\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"6 4\"\nassert solution(input()) == \"10 2\"\nassert solution(input()) == \"18 2\"\nassert solution(input()) == \"72 6\"\n\n\n-----Constraints-----\n\n0 < stdin.readline().strip().lower() < 10^6\n\n-------\n\n\n-----Time complexity-----\n\nO(n) because the operation n*m contains m operations.\n\nO(n^2) because the steps to apply each operation are O(m) as they are called, and O(n) because each operation is \nO(n).\n\n\n\n-----Space Complexity-----\n\nSince we use a stack, there is no memory footprint as it is the stack, and the number of operations is constant.\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('20') == 10\nassert solution('5184') == 6\nassert solution('5184') == 10\nassert solution('5184') == 6\nassert solution('5184') == 10\n"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"10 2\"\nassert solution(input()) == \"6 4\"\nassert solution(input()) == \"6 4\"\nassert solution(input()) == \"6 4\"\n\n\n'''"
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"10 2\"\nassert solution(input()) == \"10 2\"\nassert solution(input()) == \"10 2\"\nassert solution(input()) == \"10 2\"\nassert solution(input()) == \"10 2\"\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"27\"\n\"\"\""
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 27\nassert solution(input()) == 37\nassert solution(input()) == 37\nassert solution(input()) == 37\nassert solution(input()) == 37\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 27\n\"\"\"\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 27\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 27, 'incorrect return value'\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 27\n-----Constraints-----\n - 1 \\leq N \\leq 10^5\n - K \\leq N - 1\n - 1 \\leq K \\leq 10^4\n - 1 \\leq r, p, s \\leq 10^4\n - |T| = N\n - T consists of r, p, and s.\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '27'"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"27\"\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == 27, \"Wrong answer\"\n\"\"\""
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"5 2\\n8 7 6\\nrsrpr\") == \"27\"\nassert solution(\n    \"5 2\\n8 7 6\\nrsrrp\") == \"27\"\nassert solution(\n    \"5 2\\n8 7 6\\nrrsrpr\") == \"27\"\nassert solution(\n    \"5 3\") == \"26\"\nassert solution(\n    \"5 3\\nrsrpr\") == \"26\"\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4, \"incorrect solution\"\n\"\"\"\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, 2, 3) == 4\n\n\nassert solution(2, 1, 1) == 2\n\n\nassert solution(100, 100, 100) == 10000000\n\nassert solution(1, 2, 2) == 4\n\n\nassert solution(100000, 100000, 100000) == 100000000000\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 11\n\n--------------------------------------------------------------------------------------\n\"\"\"\n\nimport collections"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str) == 4, \"Input string is not a good string.\"\nassert solution(str(1)) == 4, \"Input string is not a good string.\"\nassert solution(str(10000000)) == 7, \"Input string is not a good string.\"\nassert solution(str(100000009999999999999999999999999)) == 11, \"Input string is not a good string.\"\nassert solution(str(1000000099999000000000000000)) == 11, \"Input string is not a good string.\"\n"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('baba') == 4\nassert solution('abababababab') == 7\nassert solution('babab') == 11\nassert solution('ab') == 1"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    'aabcababacbaba') == 2, \"First string is not good\"\nassert solution(\n    'a') == 1, \"Second string is not good\"\nassert solution(\n    'ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3,2,1,5,2) == 4\nassert solution(4,3,2,4,2) == 7\nassert solution(2,4,4,2,2) == 11\nassert solution(1,1,1,1,1) == 0\nassert solution(5,10,10,10,10) == 4"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"bababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\n\n'''"
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"a\", \"b\", \"ab\"), 10\nassert solution(\"a\", \"a\", \"a\"), 10\nassert solution(\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 3 5 18 4') == '4 1'\nassert solution('5 3 5 16 4') == '4 1'\nassert solution('5 5 5') == '-1'\nassert solution('5 5 5') == '-1'\nassert solution('5 5 5') == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(str) == str(-1)"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n'''\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\u00a02\"\nassert solution(stdin) == \"1\u00a02\"\nassert solution(stdin) == \"5\u00a01\"\nassert solution(stdin) == \"1\u00a04\"\nassert solution(stdin) == \"4\u00a01\"\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '-1'\nassert solution(inp) == '3'\nassert solution(inp) == '5'\nassert solution(inp) == '5'\nassert solution(inp) == '18'\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"-1\"\n\nNote\nThe median point of the sequence {1, 3, 4, 4, 5} equals to 4, that isn't less than 4, so his mom lets him play computer games.\n\nThe median mark of the sequence {2, 4, 4, 5, 6} equals to 4, that is more than the required value of 16. So, the answer to this test is \"-1\".\n\nAlthough the answer to this test is \"-1\", there is no possibility to get more than the required number of marks. For example, for k = 3, the maximum possible marks is 4.\n\"\"\"\n\nn,k,p,x,y = map(int,input().split())\na_list = [int(i) for i in input().split()]\nresult = []\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2 1\", \"5 4\", \"2 1\", \"4 1\"]) == \"4 1\"\nassert solution([\"2 1\", \"5 4\", \"1 1\", \"1 2\"]) == \"-1\"\n"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3 5 18 4\") == \"-1\"\nassert solution(\"5 5 4 4 4 5\") == \"4\"\nassert solution(\"5 2 5 4 4 3\") == \"2\"\nassert solution(\"5 4 5 4 4 2\") == \"2\"\nassert solution(\"5 2 4\") == \"1\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"shazam\") == \"YES\"\nassert solution(\"roberts\") == \"NO\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"art\"), \"art\"\nassert solution(\"asd\"), \"pasd\"\nassert solution(\"\"), \" \"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n\n\"\"\"\nimport sys\n\nvowels = \"aeiou\"\nvowels_lower = \"aeiou\"\nvowels_upper = \"AEIOU\""
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"bananas\") == \"YES\", \"No\"\nassert solution(\"code\") == \"NO\", \"No\"\nassert solution(\"baacaba\") == \"YES\", \"Yes\"\nassert solution(\"bc\") == \"NO\", \"No\"\nassert solution(\"abcd\") == \"YES\", \"No\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"NO\"\nassert solution(\"A\") == \"YES\"\nassert solution(\"n\") == \"NO\"\nassert solution(\"noo\") == \"NO\"\nassert solution(\"a\") == \"YES\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ninja\") == \"YES\"\nassert solution(\"codeforces\") == \"NO\"\n\"\"\"\n\nimport math\nimport collections\nimport itertools"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ghilgik \") == \"YES\"\nassert solution(\"sergie\") == \"NO\"\n\n\"\"\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"shazam\") == \"YES\"\n\n\n=======Solution=======\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(len(set(map(lambda x: set(map(lambda y: set(y), map(lambda z: map(lambda x: x, map(int, map(str, stdin.split())))))), \"\".join(map(str, stdin))))))\n\ninput:\n6\n6\n3\n2\n4\n4\n3\n4\n4\n2\noutput:\n6\n0\n\ninput:\n7 1\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n\ninput:\n3 1\n1 2\n2 3\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n\ninput:\n1 3\n1 4\n2 3\n2 4\n2 5\n2 6\n2 7\n3 4\n3 5\n3 6\n3 7\n4 5\n4 6\n4 7\n5 6\n5 7\n6 7\n\noutput:\n1\n\nExplanation\nAnadi has 2 parts.\n\nPart 1\nAs the first half has 4 dots, there is a single domino. For each part, there is a two-way edge. A single domino only can have a single vertex.\n\nAs a self-loop is allowed, we cannot place a domino on one of its edges.\n\n Part 2\nAs the first half has 4 dots, there is a single domino. For each part, there is a two-way edge. A single domino only can have a single vertex.\n\n So, we have 2 parts.\n\nPart 3\nA single domino can have any number of dots, but the first half is only a self-loop, and we can't place a single domino on a single edge.\n\n Part 4\nA single domino can have any number of dots, but the first half is only a self-loop. We can't place a single domino on a single edge.\n\n So, the second half of the first half is a self-loop, but we can't place a single domino on any edge.\n\nSo, we cannot place a single domino on any edge. We cannot place a single domino on any edge, because there is no self-loop.\n\nSo, we cannot place a single domino on any edge.\n\n So, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\n So, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\n So, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\n So, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\n So, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\n So, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any edge.\n\nSo, the final part is a single domino only.\n\nSo, we cannot place a single domino on any"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('7 1', 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4, 5, 6, 7, 1, 2, 3, 4,"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 5\nassert solution(stdin) == 1\nassert solution(stdin) == 10\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '16'\n\n-----Constraints-----\n1 <= n, m <= 10^5\n0 <= a_i, b_i <= n - 1\n\n------Time Limit Exceeded------\nRuntime: 200 ms, faster than 61.31% of Python3 online submissions for Dominoes.\nMemory Usage: 18.6 MB, less than 36.33% of Python3 online submissions for Dominoes.\n\nclass Solution:\n    def solve(self, stdin: List[str]) -> str:\n        n, m = map(int, stdin)\n        a_i = 1\n        b_i = 2\n        # [[1,3], [3,4]]\n        edges = [[a_i, b_i], [a_i, b_i]]\n        dominoes = set([a_i, b_i])\n\n        while edges:\n            a, b = edges.pop()\n            for i in range(1, n):\n                if a < i and b < i and (a, i) not in dominoes and (i, b) not in dominoes:\n                    edges.append([a, i])\n                    dominoes.add((a, i))\n                    edges.append([i, b])\n                    dominoes.add((i, b))\n\n        return str(len(dominoes))\n\n\"\"\"\n\n\"\"\"\nAccepted\n20,2\n\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        n = int(stdin.strip().split(\",\")[0])\n        m = int(stdin.strip().split(\",\")[1])\n        ans = \"0\" * n\n        ans[0] = ans[-1] = \"0\"\n        for i in range(1, n):\n            ans += \"0\"\n        for i in range(m):\n            ans += \"0\"\n        return ans\n\n\nprint(Solution().solve(\"4,1\"))\n\n\"\"\"\n\n\"\"\"\nAccepted\n14,0\n\n[\n  [0,1,0],\n  [0,0,1],\n  [0,1,0],\n  [0,0,1],\n  [0,1,0],\n  [0,0,1],\n  [0,1,0],\n  [0,0,1]\n]\n\n[\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [1,0,0],\n  [1,0,0],\n  [1,0,0],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [1,1,0],\n  [1,1,0],\n  [1,1,0],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [1,1,0],\n  [1,1,0],\n  [1,1,0],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [1,1,0],\n  [1,1,0],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1]\n]\n\n[\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n  [0,0,1],\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()==\"4 4\\n2 3\\n1 3\\n4 1\\n1 3\\n3 4\\n3 1\\n3 4\\n5 6\\n7 7\\n8 7\\n9 7\\n10 7\\n11 7\\n12 7\\n\")==\"16\"\n\n\n\n'''\n\nimport sys"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 1 3 1 4 1 5 2 4 2 5 3') == '3'\nassert solution('2 1 2 3 4 5') == '5'\nassert solution('3 3 1 4 5 2 4') == '5'\nassert solution('3 3 2 4 1 4 3') == '0'\nassert solution('4 4 4') == '0'\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7\") == \"0\"\nassert solution(\"7 21\") == \"1\"\nassert solution(\"3 1\") == \"1\"\nassert solution(\"3 1 1\") == \"2\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3 1') == '1'\nassert solution('6 7') == '1'\nassert solution('6 5') == '0'\nassert solution('3 5') == '1'\nassert solution('2 4') == '0'\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 0 0 0 2 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0\") == \"1\"\nassert solution(\"1 2 0 0 0 2 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0\") == \"1\"\nassert solution(\"2 3 4 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\") == \"3\"\nassert solution(\"2 4 5 6 7 8 9 10 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\") == \"10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 0 0 0 0 0 0 0 0 0 0 0 0\") == \"2\"\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"4\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '200'\n\n\n-----Constraints-----\n0 <= n <= 10^5\n0 <= m <= 100\n0 <= a_1 < n\n0 <= b_{i} < m\n\n\n-----Tests-----\ntest cases have been provided. You are not expected to code correctness. You have been given this as a sample test case.\nInput\n3 2\n10 3 8\n2 3\n\nOutput\n40\n\nInput\n3 2\n100 200\n1 2\n\nOutput\n400\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '40'\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 40"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 2\") == \"1 3 7 5\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"100 200\") == \"100\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"40\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '40'\n\"\"\""
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"40\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '40'\n\n\n'''\n\nimport sys\n\nn,m = map(int,input().split())\n\na_list = [int(i) for i in input().split()]\n\nb_list = [int(i) for i in input().split()]\n\na_list.sort()\nb_list.sort(reverse = True)\n\nlist_len = len(a_list)\n\nanswer = 0"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"a\") == 2, \"a\"\nassert solution(\"a b\") == 3, \"a b\"\nassert solution(\"a b c\") == 10, \"a b c\"\nassert solution(\"a b a\") == 15, \"a b a\"\nassert solution(\"a b a a\") == 10, \"a b a a\"\n"
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 3 7 5') == '18'\nassert solution('2 3 7 5') == '40'\nassert solution('3 2') == '40'\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4930\"\n\"\"\"\nfrom sys import stdin\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4930'\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4930'\n\"\"\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"20 40 60 80 100\") == \"4930\"\nassert solution(\"119 119 119 119 119\") == \"4930\"\nassert solution(\"119 119 119 119 119\") == \"4930\"\nassert solution(\"119 119 119 119 119\") == \"4930\"\nassert solution(\"119 119 119 119 119\") == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4930\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 4930"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4930'\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4930\"\n-----Constraints-----\n0 < m_1 < m_2 < m_3 < m_4 < m_5\n0 < w_1 < w_2 < w_3 < w_4 < w_5\n1 \u2264 h_{s} \u2264 h_{u}\n0 < s \u2264 10\n0 < u \u2264 20\n2 \u2264 stdin.length \u2264 200\nstdin.length < 100\n-10 \u2264 stdin[i] \u2264 stdin[i]\nstdin[i]!= 0\nstdin[i]!= stdin[i+1]\nstdin[i]!= stdin[i+2]\nstdin[i]!= stdin[i+3]\nstdin[i]!= stdin[i+4]\nstdin[i]!= stdin[i+5]\nstdin[i]!= stdin[i+6]\nstdin[i]!= stdin[i+7]\nstdin[i]!= stdin[i+8]\nstdin[i]!= stdin[i+9]\nstdin[i]!= stdin[i+10]\nstdin[i]!= stdin[i+11]\nstdin[i]!= stdin[i+12]\nstdin[i]!= stdin[i+13]\nstdin[i]!= stdin[i+14]\nstdin[i]!= stdin[i+15]\nstdin[i]!= stdin[i+16]\nstdin[i]!= stdin[i+17]\nstdin[i]!= stdin[i+18]\nstdin[i]!= stdin[i+19]\nstdin[i]!= stdin[i+20]\nstdin[i]!= stdin[i+21]\nstdin[i]!= stdin[i+22]\nstdin[i]!= stdin[i+23]\nstdin[i]!= stdin[i+24]\nstdin[i]!= stdin[i+25]\nstdin[i]!= stdin[i+26]\nstdin[i]!= stdin[i+27]\nstdin[i]!= stdin[i+28]\nstdin[i]!= stdin[i+29]\nstdin[i]!= stdin[i+30]\nstdin[i]!= stdin[i+31]\nstdin[i]!= stdin[i+32]\nstdin[i]!= stdin[i+33]\nstdin[i]!= stdin[i+34]\nstdin[i]!= stdin[i+35]\nstdin[i]!= stdin[i+36]\nstdin[i]!= stdin[i+37]\nstdin[i]!= stdin[i+38]\nstdin[i]!= stdin[i+39]\nstdin[i]!= stdin[i+40]\nstdin[i]!= stdin[i+41]\nstdin[i]!= stdin[i+42]\nstdin[i]!= stdin[i+43]\nstdin[i]!= stdin[i+44]\nstdin[i]!= stdin[i+45]\nstdin[i]!= stdin[i+46]\nstdin[i]!= stdin[i+47]\nstdin[i]!= stdin[i+48]\nstdin[i]!= stdin[i+49]\nstdin[i]!= stdin[i+50]\nstdin[i]!= stdin[i+51]\nstdin[i]!= stdin[i+52]\nstdin[i]!= stdin[i+53]\nstdin[i]!= stdin[i+54]\nstdin[i]!= stdin[i+55]\nstdin[i]!= stdin[i+56]\nstdin[i]!= stdin[i+57]\nstdin[i]!= stdin[i+58]\nstdin[i]!= stdin[i+59]\nstdin[i]!= stdin[i+60]\nstdin[i]!= stdin[i+61]\nstdin[i]!= stdin[i+62]\nstdin[i]!= stdin[i+63]\nstdin[i]!= stdin[i+64]\nstdin[i]!= stdin[i+65]\nstdin[i]!= stdin[i+66]\nstdin[i]!= stdin[i+67]\nstdin[i]!= stdin[i+68]\nstdin[i]!= stdin[i+69]\nstdin[i]!= stdin[i+70]\nstdin[i]!= stdin[i+71]\nstdin[i]!= stdin[i+72]\nstdin[i]!= stdin[i+73]\nstdin[i]!= stdin[i+74]\nstdin[i]!= stdin[i+75]\nstdin[i]!= stdin[i+76]\nstdin[i]!= stdin[i+77]\nstdin[i]!= stdin[i+78]\nstdin[i]!= stdin[i+79]\nstdin[i]!= stdin[i+80]\nstdin[i]!= stdin[i+81]\nstdin[i]!= stdin[i+82]\nstdin[i]!= stdin[i+83]\nstdin[i]!= stdin[i+84]\nstdin[i]!= stdin[i+85]\nstdin[i]!= stdin[i+86]\nstdin[i]!= stdin[i+87]\nstdin[i]!= stdin[i+88]\nstdin[i]!= stdin[i+89]\nstdin[i]!= stdin[i+90"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4930\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4\") == 4930\nassert solution(\"0 0 0 0 0\") == 4930\nassert solution(\"0 0 0 0 0 1\") == 4930\nassert solution(\"0 0 0 0 0 1 2\") == 4930\nassert solution(\"0 0 0 0 0 1 2 3\") == 4930\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 1 1 2\") == \"2\"\nassert solution(\"1 1 1 3\") == \"2\"\nassert solution(\"2 1 1 1\") == \"1\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,3) == 2\nassert solution(2,2) == 1\n\"\"\""
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\n\n>>> def solution(stdin: str) -> str:\n    return str(int(stdin) % 1000000007)\n\n>>> solution(stdin)\n'64'\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 2 1 1\"\n) == 1\nassert solution(\n    \"1 2 1 2\"\n) == 2\nassert solution(\n    \"1 2 1 2\"\n) == 2\nassert solution(\n    \"1 2 1 2\"\n) == 1\nassert solution(\n    \"1 2 1 2\"\n) == 2\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 2 1\") == \"2\"\nassert solution(\"1 1 1 2\") == \"2\"\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 2 1 1\") == \"1\"\nassert solution(\"1 2 1 2\") == \"2\"\nassert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 1 2 2\") == \"3\"\n\n'''"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \n    stdin: str\n    ) == \"1\"\n    assert solution(\n    \n    stdin: str\n    ) == \"2\"\n    assert solution(\n    \n    stdin: str\n    ) == \"3\"\n    assert solution(\n    \n    stdin: str\n    ) == \"2\"\n    assert solution(\n    \n    stdin: str\n    ) == \"3\"\n    "
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Possible'\n\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Impossible\""
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Possible\"\n\nInput\n2 3\n2 4 5\n4 5 6\n3 6 7\n8 10 11\n\nOutput\nPossible\n\nInput\n3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n2 3\n2 4 5\n4 5 6\n3 6 7\n8 10 11\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n2 2\n2 4\n3 10\n8 5\n7 6\n\nOutput\nPossible\n\nInput\n3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 2\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nImpossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n3 3\n1 3\n2 4\n5 10\n3 1\n3 6\n4 8\n\nOutput\nPossible\n\nInput\n2 2\n2 4\n3 10\n8 5\n7 6\n\nOutput\nPossible\n\nInput\n3 2\n1 3\n2 4\n5 10\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"Possible\""
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Possible\"\n\n\n\"\"\""
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Possible\"\n\n\n---Expected Time Complexity---\n---Approximation---\nTime complexity: O(n * m)\nSpace Complexity: O(n * m)"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3\") == \"Possible\"\nassert solution(\"3 4\") == \"Possible\"\nassert solution(\"3 5\") == \"Possible\"\nassert solution(\"3 6\") == \"Possible\"\nassert solution(\"3 7\") == \"Possible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2 3\", \"2 4 5\", \"4 5 6\", \"3 6 7\", \"8 10 11\", \"1 2 3\", \"1 5 4\"]) == \"Impossible\"\nassert solution([\"3 2\", \"3 4\", \"3 5\", \"4 6\", \"4 7\", \"5 6\", \"5 7\", \"6 8\", \"7 10\", \"8 11\", \"9 12\"]) == \"Possible\"\n\nassert solution([\"2 3\", \"2 4 5\", \"4 5 6\", \"3 6 7\", \"8 10 11\", \"1 2 3\", \"1 5 4\"]) == \"Impossible\"\nassert solution([\"3 2\", \"3 4\", \"3 5\", \"4 6\", \"4 7\", \"5 6\", \"5 7\", \"6 8\", \"7 10\", \"8 11\", \"9 12\"]) == \"Possible\"\n\nassert solution([\"4 5\", \"5 6\", \"6 7\", \"7 8\", \"8 9\", \"9 10\", \"11 12\"]) == \"Impossible\"\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Possible\"\n\"\"\"\nimport math\nn,m=map(int,input().split())\nlst=[]\nfor i in range(n):\n    lst.append(list(map(int,input().split())))\n\nfor i in range(m):\n    lst[i].append(math.log2(lst[i][0]/lst[i][1]))\n\nfor i in range(n):\n    for j in range(m):\n        lst[i][j]=math.log2(lst[i][j]/lst[i][1])\n\nfor i in range(n):\n    for j in range(m):\n        if lst[i][j]!=0:\n            print(\"Possible\",end=\" \")\n        else:\n            print(\"Impossible\",end=\" \")\n    print()\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Possible\"\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == 11\n\n\n-----Constraints-----\n1 <= n <= 100\n1 <= a_{i} <= 10^9\n\nTime Limit: 1 sec\nSpace Limit: 1M\n\n\n-----Contributed By - Shashank Kumar Agrawal.\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 11\n\nGiven:\n\nstdin is a string of n lines of the alphabet.\n\nReturn:\n\na string of the maximum possible length.\n\"\"\""
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 11, \"solution() failed\"\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('aabb') == 'aab'\nassert solution('abcba') == 'aabb'\nassert solution('aabbcba') == 'aabbcba'\nassert solution('aaaaa') == 'aaaaa'\nassert solution('aabbaaa') == 'aabbaaa'\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Invalid code\"\n\n\n------Constraints----\n1 <= n <= 10^5\n2 <= a_{i} <= 10^5\n2 <= b_{i} <= 10^5\na_{i}!= b_{i}\n1 <= i <= 10^5\n\"\"\""
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('aaabbccddeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeef') == 11\nassert solution('aaabbccddeeeef') == 10\nassert solution('abc') == 2\nassert solution('aab') == 2\nassert solution('ab') == 2\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 11\nassert solution(inp) == 11"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 11\n\nAssumptions\nThe program that reads the input comes from STDIN and FORMAT '%n'. It prints the length of the longest string possible.\n\nSample Input\n1\n3\n3 5 5\n\nSample Output\n3\n\nExplanation\nFor the given inputs, the longest string is \"cbc\".\n  \n \"\"\"\n\nn = int(input())"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3 4\", \"2 1 9\", \"10 3 6 3\", \"4 1 9\"]) == \"1\"\nassert solution([\"6 10\", \"6 4\", \"5 3\", \"7 2 3\"]) == \"1\"\nassert solution([\"1 6\", \"2 4\", \"3 2\", \"4 3\", \"4 1\", \"3 6\"]) == \"0\"\nassert solution([\"4 1\", \"1 6\", \"5 3\", \"3 4\", \"3 1\", \"2 4\"]) == \"0\"\nassert solution([\"6 1\", \"3 3\", \"3 2\", \"2 2\", \"3 3\", \"4 4\"]) == \"0\""
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution(stdin)) == '1'\nassert solution(solution(stdin)) == '2'\n\n\"\"\"\n\nn,k = map(int, input().split())\na = list(map(int, input().split()))\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"1 4\", \"2 4\", \"2 2\", \"2 4\", \"2 4\", \"3 2\", \"3 1\", \"4 2\", \"4 2\", \"5 1\"]) == \"3\"\nassert solution([\"1 1\", \"2 1\", \"2 1\", \"1 2\", \"2 1\", \"2 1\", \"1 2\", \"1 2\", \"1 2\"]) == \"1\"\nassert solution([\"1 4\", \"2 4\", \"2 2\", \"2 4\", \"2 4\", \"3 2\", \"3 1\", \"4 2\", \"4 2\", \"5 1\"]) == \"0\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 k \u2264 10^9\n1 \u2264 a_i \u2264 10^9\n\nTime Limit: 1 min\n\nSpace Limit: 100\n\n-------Solution-------\n\n### TLE,\n### Solution 1:\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"0\"\n\nassert solution(input()) == \"1\"\n\nassert solution(input()) == \"2\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"4\""
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\n\n-----IMP-----\n\nBy printing \"1\" after every iteration of this function, you can solve problems in Decoforces that have maximum difficulty a_1 on the other judge.\n\nMakes is could be solved only if one of the problems has maximum difficulty a_1 on the other judge.\n\nMakes is better if he knows for some reason that he can solve problems with maximum difficulty a_2,..., a_{n}.\n\nMakes is better if he knows for some reason that he can solve problems with maximum difficulty a_i on other judge.\n\nMakes is better if he knows for some reason that he can solve problems with maximum difficulty a_{i} on other judge.\n\nMakes is better if he knows for some reason that he can solve problems with maximum difficulty a_{i} on Decoforces.\n\nInput\n3 20\n5 3 4 3\n\nOutput\n3\n\nInput\n10 5 1 9 3\n10 5 1 4 3\n10 5 4 3 3\n10 5 1 4 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2 3 3\n10 5 3 3 3\n10 5 1 3 3\n10 5 2"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"4\", \"4\", \"3\", \"3\", \"1\"]) == \"1\"\nassert solution([\"2\", \"6\", \"3\", \"1\", \"4\", \"9\"]) == \"3\"\nassert solution([\"4\", \"2\", \"1\", \"4\", \"1\", \"1\"]) == \"0\"\n\n\"\"\""
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Bugfix-----\n\nMaking solves problems on Decoforces doesn't work because they are solved problems with any difficulty he can't solve. The only difference is that it can solve problems with any difficulty he can't solve. Also problems with difficulties on Decoforces can't be solved.\n\nEvery problem with difficulty d can't be solved on Decoforces.\n\nWhen d is a non-positive integer, it means that the problem with difficulty d on Decoforces is not solved. \n\nThe only way to solve problems on Decoforces with any given difficulty is the same as for the other judges. This doesn't mean that all problems with difficulty d on Decoforces will be solved, because they are already solved by the other judges.\n\nConsider an example in this problem that is solved by Decoforces and has difficulty d=3. The problem that makes Decoforces will be solved by the other judges.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, they can't solve it.\n\nThe problem has a maximum of n problems, so the number of problems with difficulty d is the maximum possible.\n\nAfter the number of problems with difficulty d, there should be a solution for every problem.\n\nIf d is a positive integer, it means that the problem with difficulty d on Decoforces is not solved, so the problem with difficulty d is solved.\n\nIf d is a non-positive integer, it means that the problem with difficulty d on Decoforces is not solved, so the problem with difficulty d is solved.\n\nIf d is a non-positive integer, it means that the problem with difficulty d on Decoforces is not solved, so the problem with difficulty d is solved.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nEvery problem with difficulty d can be solved by others, so the number of problems with difficulty d is the maximum possible.\n\nAfter the number of problems with difficulty d, there should be a solution for every problem.\n\nIf d is a positive integer, it means that the problem with difficulty d on Decoforces is not solved, so the problem with difficulty d is solved.\n\nIf d is a non-positive integer, it means that the problem with difficulty d on Decoforces is not solved, so the problem with difficulty d is solved.\n\nIf d is a non-positive integer, it means that the problem with difficulty d on Decoforces is not solved, so the problem with difficulty d is solved.\n\nFor each problem, Make is correct with difficulty d (he can choose problems with difficulty d on Decoforces, in other words, he can choose problems with difficulty d on the other judge). The number of problems with difficulty d is the maximum possible.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with difficulty d on Decoforces is solved by others.\n\nGiven problems d=2, 2, 3, 5 and a_1, a_2,..., a_{n} a_{n+1}, and the number of problems, n, he can't solve problems that are solved by others.\n\nThe problem with"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1 2 3'"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 2\nassert solution(2) == 2\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 2\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 4 5 3 2\") == \"3 2 2\"\nassert solution(\"10 1\") == \"10 1\"\nassert solution(\"6 10\") == \"1 3\"\nassert solution(\"1 1 3\") == \"1 2\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 3\"\n\nInput\n10\n1 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n2 2\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"2 2 2\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 2\"\nassert solution(stdin) == \"2 2 2\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 3 2\"\nassert solution(stdin) == \"2 2 3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"10\") == \"1 2 3\"\nassert solution(\"6\") == \"2 3\"\nassert solution(\"3 7\") == \"2 2 3\"\n\n\"\"\""
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"UP\" or solution(input()) == \"DOWN\" or solution(input()) == -1, \"Invalid input\"\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'UP'\nassert solution(stdin) == 'DOWN'"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"DOWN\"\nassert solution(stdin) == \"UP\"\nassert solution(stdin) == -1\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"DOWN\" or solution(stdin) == \"UP\"\n\n-----Constraints-----\n1 <= n <= 100\na_{i} <= 15\n\n------Time Limit: Only works for input having less than 100 lines in only one line. (100 lines for each line.)-----\n------Memory Limit: Only use O(1) extra memory.-----\n\n\n------Time Limit: Only use O(n) extra memory.-----\n------Memory Limit: Only use O(n) extra memory.-----\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"UP\"\nassert solution(stdin) == \"DOWN\"\nassert solution(stdin) == \"-\"\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"UP\"\nassert solution(stdin) == \"DOWN\"\nassert solution(stdin) == \"UP\"\nassert solution(stdin) == \"DOWN\"\nassert solution(stdin) == -1\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"DOWN\" or solution(input()) == \"UP\"\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5') == 'UP'\nassert solution('7') == 'DOWN'\nassert solution('1') == '-1'\nassert solution('8') == '-1'\nassert solution('0') == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'DOWN'\nassert solution(stdin) == 'UP'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"UP\"\nassert solution(stdin) == \"DOWN\"\nassert solution(stdin) == \"UP\"\nassert solution(stdin) == \"DOWN\""
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"cubed\") == \"cubed\"\nassert solution(\"kdvf\") == \"kdvf\"\nassert solution(\"cbu\") == \"kdvf\"\nassert solution(\"ct\") == \"ct\"\nassert solution(\"cxjh\") == \"cxjh\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\", \"Solution string is incorrect\"\n\n-----Constraints-----\n\n1 <= s.length <= 1000\ns[i] is uppercase letter.\ns.length < 1000\nAll the letters of $s$ are lowercase letters.\n\n\"\"\"\n\nimport re\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"s\") == \"yes\"\nassert solution(\"a\") == \"no\"\nassert solution(\"k\") == \"no\"\n\"\"\""
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\n>>> import sys\n>>> import string\n>>> input = sys.stdin.readline\n>>> def is_vowel(c):\n    for char in string.ascii_lowercase:\n        if ord(char) >= ord('a') and ord(char) <= ord('z'):\n            return True\n    return False\n\n\n>>> def is_consonant(c):\n    for char in string.ascii_uppercase:\n        if ord(char) >= ord('A') and ord(char) <= ord('Z'):\n            return True\n    return False\n\n\n>>> def is_letter(s):\n    for char in s:\n        if not is_vowel(char) and not is_consonant(char):\n            return False\n    return True\n\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\n>>> import sys\n>>> import string\n>>> input = sys.stdin.readline\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(stdin) == \"Yes\""
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('a') == 'Yes', \"incorrect result\"\nassert solution('a') == 'No', \"incorrect result\"\nassert solution('abc') == 'No', \"incorrect result\"\nassert solution('akm') == 'Yes', \"incorrect result\"\nassert solution('ua') == 'No', \"incorrect result\""
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aabccdee\") == \"Yes\"\nassert solution(\"aabccdeef\") == \"No\"\nassert solution(\"aabcdeeff\") == \"No\"\nassert solution(\"aabccdeebf\") == \"No\"\nassert solution(\"abcdefg\") == \"Yes\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\"\"\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == \"Yes\", \"a is not a vowel\"\nassert solution(u) == \"No\", \"u is not a consonant\"\nassert solution(abc) == \"Yes\", \"abc is not a vowel\"\nassert solution(ukm) == \"Yes\", \"u is not a vowel\"\nassert solution(akm) == \"No\", \"a is not a vowel\"\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"a\", \"u\", \"a\", \"i\", \"e\"]) == \"Yes\"\nassert solution([\"a\", \"k\", \"m\", \"i\", \"i\"]) == \"No\"\n\nassert solution([\"a\", \"m\", \"i\", \"i\", \"i\"]) == \"No\"\nassert solution([\"a\", \"u\", \"a\", \"i\", \"i\", \"i\", \"i\"]) == \"Yes\"\nassert solution([\"a\", \"m\", \"a\", \"a\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\", \"i\"]) == \"Yes\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"....B\", \"....W\"]) == \"A\"\nassert solution([\"B....B\", \"....W..\"]) == \"A\"\nassert solution([\"W....B\", \"....W..\"]) == \"A\"\nassert solution([\"....B..\", \"....B..\", \"....W..\"]) == \"A\"\nassert solution([\"B....B..\", \"B....B..\", \"W....B..\"]) == \"A\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'A'\nassert solution(stdin) == 'B'\nassert solution(stdin) == 'A'\n\n\nInput\n........\n........\n........\n.B....B.\n....W...\n........\n..W.....\n........\n........\n\nOutput\nA\n\nInput\n..B.....\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n\nOutput\nB\n\nInput\n........\n.B....B.\n....W...\n........\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n\nOutput\nA\n\nInput\n..B.....\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n\nOutput\nB\n\nInput\n..B.....\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n\nOutput\nA\n\nInput\n.B....B.\n.W.....\n........\n..W.....\n......B.\n........\n.....W..\n......B.\n........\n........\n\nOutput\nB\n\n\"\"\"\n\nimport sys\n\nclass PuzzleInput():\n    def __init__(self):\n        self.board = None\n        self.white_piece = None\n        self.black_piece = None\n        self.curr_position = None\n        self.white_turn = None\n        self.black_turn = None\n        self.is_white = True\n        self.is_black = True\n        self.is_white_white_turn = True\n        self.is_black_black_turn = True\n        self.winner = None\n\n    def read_board(self, file_name):\n        self.board = []\n        file = open(file_name)\n        for line in file:\n            row = []\n            for char in line:\n                if char!= '.':\n                    row.append(int(char))\n            self.board.append(row)\n\n    def init_game(self):\n        white_pawn = self.board[0][0]\n        black_pawn = self.board[0][8]\n        self.white_piece = white_pawn\n        self.black_piece = black_pawn\n        self.curr_position = (0, 0)\n\n    def move_white(self, row, col):\n        self.board[row][col] = self.white_piece\n        self.white_turn = self.is_white\n        self.is_white = not self.is_white\n        self.board[row][col] = 0\n        self.white_turn = not self.white_turn\n\n    def move_black(self, row, col):\n        self.board[row][col] = self.black_piece\n        self.black_turn = self.is_black\n        self.is_black = not self.is_black\n        self.board[row][col] = 0\n        self.black_turn = not self.black_turn\n\n    def get_piece(self):\n        return self.white_piece, self.black_piece\n\n    def is_valid(self):\n        return self.is_black and self.black_turn and self.white_turn\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"A\"\n'''\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n{\n    \"BBBB\": \"B.W..BBB\",\n    \"BWBWB\": \"W..B..WBB\",\n    \"BWBWBWB\": \"B..W..BWB\",\n    \"BWBWBWBWB\": \"W..B..BWBWB\",\n    \"BWBWBWBWBWB\": \"B..W..BWBWBWB\",\n    \"BBWBWBWBWBWB\": \"W..B..BWBWBWBWB\",\n    \"BBWBWBWBWBWBWB\": \"B..W..BWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWB\": \"W..B..BWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWB\": \"B..W..BWBWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWBWB\": \"W..B..BWBWBWBWBWBWBWB\",\n    \"BBWBWBWBWBWBWBWBWBWBWB\": \"B..W..BWBWBWBWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWBWBWBWBWB\": \"W..B..BWBWBWBWBWBWBWBWBWB\",\n    \"BBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"B..W..BWBWBWBWBWBWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"W..B..BWBWBWBWBWBWBWBWBWBWBWB\",\n    \"BBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"B..W..BWBWBWBWBWBWBWBWBWBWBWBWB\",\n    \"BBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"W..B..BWBWBWBWBWBWBWBWBWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"B..W..BWBWBWBWBWBWBWBWBWBWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"W..B..BWBWBWBWBWBWBWBWBWBWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"B..W..BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"W..B..BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\",\n    \"BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\": \"B..W..BWBWBWBWBWBWBWBWBWBWBWBWBWBWBWBWB\",\n
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('B') == 'A'\nassert solution('.') == 'B'\nassert solution('B..') == 'A'\nassert solution('W..') == 'B'\nassert solution('W.B') == 'A'\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 'A'\nassert solution(inp) == 'B'\n\n\n\nassert solution(inp) == 'A'\nassert solution(inp) == 'B'\nassert solution(inp) == 'A'"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'A'\n\n\nInput\n........\n........\n..B.....\n........\n.W.....\n........\n.W.....\n........\n........\n\nOutput\nA\n\nInput\n...B.....\n...W.....\n........\n........\n........\n........\n........\n\nOutput\nB\n\n\"\"\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\".W...W...\") == \"A\"\n\n\n\"\"\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'A'\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"A\") == \"A\"\nassert solution(\"B\") == \"A\"\n\nassert solution(\"A\") == \"B\"\nassert solution(\"B\") == \"B\"\n\nassert solution(\"A\") == \"A\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 5 7\") == \"3\"\nassert solution(\"1 2 3 4 5 7\") == \"4\"\nassert solution(\"1 2 3 6 7\") == \"4\"\nassert solution(\"1 2 3 7 4 5\") == \"3\"\nassert solution(\"1 2 3 6 7\") == \"4\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '-1'"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, 11, 2, 3, 5, 7, 4, 11) == 3\nassert solution(2, 11, 1, 3, 5, 7, 4, 11) == -1\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('[1,1,1]') == '1'\nassert solution('[2,2,2]') == '2'\nassert solution('[3,3,3]') == '3'\nassert solution('[4,4,4]') == '4'\nassert solution('[5,5,5]') == '-1'"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 1 2 3\") == 3, \"Should be 3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\nInput\n6\n2 3 2 5 7 10 6 10 8\n10 5 3 7 3 2 3\n\nOutput\n8\n\nInput\n6\n3 4 5 2 4 6 2 6 3\n1 1 5 1 2 5 1 5 2\n5 3 2 2 6 5 3 2 3\n2 4 2 2 2 4 2 2 2\n2 2 2 2 2 2 2 2 2\n2\n\nExplanation\nVasya have two arrays $A$ and $B$ of lengths $n$ and $m$.\nHe can perform the following operation arbitrary number of times.\n\nHe takes some consecutive subsegment of the array and replaces it with a single element, equal to the sum of all elements on this subsegment.\n\nFrom array $[1, 10, 100, 1000, 10000]$ Vasya can obtain array $[1, 1110, 10000]$, and from array $[1, 2, 3]$ Vasya can obtain array $[6]$.\n\nTwo arrays $A$ and $B$ are considered equal if and only if they have the same length and for each valid $i$ $A_i = B_i$.\n\nVasya wants to perform some of these operations on array $A$, some on array $B$, in such a way that arrays $A$ and $B$ become equal. Moreover, the lengths of the resulting arrays should be maximal possible.\n\nHelp Vasya to determine the maximum length of the resulting arrays that he can achieve or output that it is impossible to make arrays $A$ and $B$ equal."
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'NO'\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('Alex_and_broken_contest') == \"YES\"\nassert solution('Nikita_and_String') == \"YES\"\nassert solution('danil_and_Olya') == \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"YES\"\nassert solution(\"Nikita_and_string\") == \"NO\"\nassert solution(\"Danil_and_Olya\") == \"YES\""
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"_\") == \"NO\"\nassert solution(\"Nic\") == \"YES\"\nassert solution(\"Dan\") == \"YES\"\nassert solution(\"_\") == \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n'''"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Time Complexity-----\n\nO(n)O(n)O(n)\n\nO(n)O(n)O(n)\n\nO(1)O(1)O(n)O(n)O(1)\n\n\n-----Space Complexity-----\n\nO(n)O(n)O(n)O(1)O(n)O(n)O(n)O(1)\n\nO(n)O(n)O(n)O(1)O(n)O(n)O(1)\n\nO(1)O(1)O(n)O(n)O(1)O(n)O(1)\n\n\nO(n)O(n)O(n)O(1)O(n)O(n)O(1)\n\nO(n)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(1)\n\nO(1)O(1)O(n)O(n)O(1)O(n)O(1)O(n)O(1)\n\nO(n)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(1)\n\n\nO(n)O(n)O(1)O(n)O(n)O(1)O(n)O(1)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(1)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(1)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(1)O(n)O(n)O(n)O(1)O(n)O(n)O(n)O(n)O(1)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(1)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(1)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)O(n)"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"YES\"\nassert solution(\"NikitaAndString\") == \"NO\"\nassert solution(\"Danil_and_Olya\") == \"YES\"\nassert solution(\"\") == \"NO\""
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n\"\"\""
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"YES\"\nassert solution(\"NikitaAndString\") == \"NO\"\n"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 12\n\"\"\""
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(a) == 3\nassert solution(a + 1) == -1\nassert solution(a + 1) == -1\nassert solution(a + 1) == -1\nassert solution(a + 1) == -1\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == -1\n\n\"\"\""
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 7 2\"), \"4\"\nassert solution(\"6 13 1\"), \"4\"\nassert solution(\"1 4 3\"), \"2\"\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 3\n'''"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == -1\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == -1\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, 4, 2) == 3\nassert solution(6, 13, 2) == 4\nassert solution(1, 1, 1) == -1\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\" or \"0.5\"\nassert solution(inp) == \"1\" or \"1\""
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\n\nassert solution(stdin) == '-1'\n\n-----Constraints-----\n0 \u2264 a, h, w \u2264 10^9\n\n-----Time Limit: 3 min.\n\n-----Solutions:\n\nclass Solution:\n    def wallOnWall(self, h: int, w: int, a: int, b: int) -> str:\n        if a >= h or w >= h or a < 0 or b < 0 or b >= w:\n            return '-1'\n        if a > b:\n            return '-1'\n        x = max(a, b)\n        x = max(a, b)\n        y = min(a, b)\n        y = min(a, b)\n        if x <= 0 or y <= 0 or x <= 0 or y <= 0:\n            return '-1'\n        if x >= h or y >= w or x >= h or y >= w:\n            return '-1'\n        if x <= y:\n            if x < y:\n                return '-1'\n            return '0'\n        return '0'\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == '0'\nassert solution(input()) == '0.5'"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '0'\n\"\"\""
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"2\", \"18\", \"13\"]) == 0.5\nassert solution([\"4\", \"4\", \"4\"]) == 0\nassert solution([\"3\", \"4\", \"3\"]) == -1\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"0\""
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(0)\n\"\"\""
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\n\"\"\"\nimport math"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"2\"\n\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"2\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 4\") == \"1\"\nassert solution(\"1 5\") == \"1\"\nassert solution(\"1 6\") == \"1\"\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\n\n\n'''\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\u2018\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019\u2019"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\n\"\"\""
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3\") == \"3\", \"1 2\"\nassert solution(\"3 7\") == \"3\", \"3 1\"\nassert solution(\"4 7\") == \"1\", \"1 2\"\nassert solution(\"8 11\") == \"2\", \"1 2\"\nassert solution(\"2\") == \"1\", \"1 2\"\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"NO\"\n\n\n------Constraints-----\n0 < stdin.length <= 100\n\n------Coding Rules------\n1. For each word in stdin, use the replacement function, which should convert the string into a binary number.\n2. The output should be a string consisting of only the first word of the word written on the banner.\n3. The string will contain only lower-case English letters.\n4. The string does not contain any spaces.\n\n\n\"\"\"\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('CODEWAITFORITFORCES') == 'YES'\nassert solution('BOTTOMCODER') == 'NO'\nassert solution('DECODEFORCES') == 'NO'\nassert solution('DOGEFORCES') == 'YES'"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"NO\"\nassert solution(\"DOGEFORCES\") == \"YES\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('BOTTOMCODER') == 'YES'\nassert solution('DECODEFORCES') == 'NO'\nassert solution('DOGEFORCES') == 'YES'\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"NO\"\n\n\n-----Reminder-----\nPlease note that I use only words that consist of letters, as defined above. The pattern should never be modified.\n\"\"\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"HELP\") == \"NO\"\nassert solution(\"BOTTOMCODER\") == \"YES\"\nassert solution(\"DECODEFORCES\") == \"YES\"\nassert solution(\"DOGEFORCES\") == \"NO\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"NO\""
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == 'YES'\nassert solution(\"BOTTOMCODER\") == 'NO'\nassert solution(\"DECODEFORCES\") == 'NO'\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"NO\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 18\n\n------Reminder-----\n\nPolygon triangles are defined by $n$ vertices in the standard polygon $P$ and the edges $a \\leq b \\leq c \\leq d \\leq e \\leq f$ (with non-negative indices)\n\nThe triangles are stored as a list of edges $(a, b)$ and $(b, c)$.\n\nThe minimum weight is $1 \\cdot 2 \\cdot 3 = 6$.\n\nExample 1:\n\nInput:\n5\n\nOutput:\n10\n\nExplanation:\n\nExample 1:\n\nInput:\n4\n\nOutput:\n8\n\nExplanation:\n\nExample 1:\n\nInput:\n6\n\nOutput:\n6\n\nExplanation:\n\nExample 2:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nExample 2:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nExample 3:\n\nInput:\n3\n\nOutput:\n2\n\nExplanation:\n\nExample 4:\n\nInput:\n3\n\nOutput:\n3\n\nExplanation:\n\nExample 5:\n\nInput:\n3\n\nOutput:\n1\n\nExplanation:\n\nExample 6:\n\nInput:\n3\n\nOutput:\n1\n\nExplanation:\n\nExample 7:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nExample 8:\n\nInput:\n4\n\nOutput:\n2\n\nExplanation:\n\nExample 9:\n\nInput:\n1\n\nOutput:\n1\n\nExplanation:\n\n------Solution-----\n\nInput:\n5\n\nOutput:\n10\n\nExplanation:\n\nInput:\n4\n\nOutput:\n8\n\nExplanation:\n\nInput:\n6\n\nOutput:\n6\n\nExplanation:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nInput:\n3\n\nOutput:\n1\n\nExplanation:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nInput:\n3\n\nOutput:\n1\n\nExplanation:\n\n-----Solution-----\n\nInput:\n4\n\nOutput:\n10\n\nExplanation:\n\nInput:\n5\n\nOutput:\n18\n\nExplanation:\n\nInput:\n3\n\nOutput:\n2\n\nExplanation:\n\nInput:\n3\n\nOutput:\n1\n\nExplanation:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nInput:\n1\n\nOutput:\n1\n\nExplanation:\n\n-----Solution-----\n\nInput:\n2\n\nOutput:\n10\n\nExplanation:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nInput:\n2\n\nOutput:\n2\n\nExplanation:\n\nInput:\n1\n\nOutput:\n1\n\nExplanation:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\n-----Solution-----\n\nInput:\n3\n\nOutput:\n1\n\nExplanation:\n\nInput:\n2\n\nOutput:\n1\n\nExplanation:\n\nInput:\n3\n\nOutput:\n1\n\nExplanation:\n\nInput:\n3\n\nOutput:\n2\n\nExplanation:\n\nInput:\n1\n\nOutput:\n1\n\nExplanation:\n\nInput:\n1\n\nOutput:\n1\n\nExplanation:\n\n------Solution-----\n\n\"\"\"\nimport collections\nimport heapq\nimport math"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"18\""
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '18'\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3') == '6'\nassert solution('4') == '18'\nassert solution('3') == '12'\nassert solution('4') == '14'\nassert solution('3') == '6'"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '18'"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test_case) == \"18\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 2 0\") == \"1\"\nassert solution(\"2 3 0\") == \"1\"\nassert solution(\"2 3 3\") == \"2\"\nassert solution(\"3 1 0\") == \"1\"\nassert solution(\"3 4 0\") == \"1\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"18\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 18, \"Passed the test case but failed\"\n\n>>> s=input()\nTypeError: unsupported operand type(s) for *:'str' and'str'\n>>> s=\"4 2\"\n>>> solution(s)\n6\n\"\"\"\nimport sys\nn=int(input())"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2) == 6, \"test failed\"\nassert solution(3) == 18, \"test failed\"\nassert solution(4) == 24, \"test failed\"\n\nTest cases passed successfully\nRuntime: 80 ms, faster than 54.95% of Python3 online submissions for Minimum Weight of a Polygon.\nMemory Usage: 14.3 MB, less than 85.52% of Python3 online submissions for Minimum Weight of a Polygon.\n\nProblem Constraints:\n1 <= stdin.length <= 50\n1 <= stdin[i] <= 105\n\n\"\"\"\n\n\nclass Solution:\n    def minimumTotal(self, triangle: List[List[int]]) -> int:\n        if len(triangle) <= 1:\n            return sum(triangle[0])\n        left = triangle[0]\n        right = triangle[1]\n        left = left + [0] * (len(triangle[1]) - 1)\n        right = right + [0] * (len(triangle[1]) - 1)\n        res = float(\"inf\")\n        for i in range(1, len(triangle)):\n            tmp = [0] * (len(triangle[i]) - 1)\n            for j in range(len(triangle[i]) - 1):\n                tmp[j] = left[j] + right[j + 1]\n                if left[j] + right[j + 1] < res:\n                    res = left[j] + right[j + 1]\n            left = tmp\n        return res\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == 17, \"Expected 17, got {}.\".format(17)\nassert solution(4) == 4, \"Expected 4, got {}.\".format(4)\n\nassert solution(1) == 1, \"Expected 1, got {}.\".format(1)\nassert solution(2) == 2, \"Expected 2, got {}.\".format(2)\nassert solution(5) == 2, \"Expected 5, got {}.\".format(5)\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4') == '4'\nassert solution('8') == '8'\nassert solution('11') == '0'\nassert solution('4') == '1'\nassert solution('2') == '1'\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"13\") == 17, 'incorrect solution'\nassert solution(\"4\") == 4, 'incorrect solution'\nassert solution(\"5\") == 5, 'incorrect solution'\nassert solution(\"6\") == 6, 'incorrect solution'\nassert solution(\"7\") == 7, 'incorrect solution'\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(13) == 17\nassert solution(4) == 4\nassert solution(5) == 5\nassert solution(3) == 0\nassert solution(2) == 1\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(12) == 2\nassert solution(25) == 7\nassert solution(9) == 6\nassert solution(10) == 8\nassert solution(50) == 5\n\n\n\n-----Constraints-----\n\n0 < stdin.length <= 5 * 10^4\n\n\n-----Time complexity-----\n\nO(n^2)\n\n\n-----space complexity-----\n\nO(n)\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(123) == 5\nassert solution(456) == 7\nassert solution(2121) == 9\nassert solution(1222) == 11\nassert solution(4322) == 11\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\") == 4\nassert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == 17\nassert solution(4) == 4\nassert solution(5) == 3\nassert solution(6) == 2\nassert solution(7) == 1\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 17\nassert solution(stdin) == 4\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 2\nassert solution(2) == -1\nassert solution(3) == 4\nassert solution(4) == -1"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '2'\nassert solution(inp) == '-1'\nassert solution(inp) == '0'\nassert solution(inp) == '0'\nassert solution(inp) == '0'\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 1 4 2 3 4 4\") == 2\nassert solution(\"2 3 1 4 2\") == 2\nassert solution(\"2 2 2 2 2 2\") == -1\nassert solution(\"2 2 2 2\") == -1\nassert solution(\"2 2 2 2\") == -1\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '3'"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 2 4 5 3') == '4'\nassert solution('3 2 1 5 2') == '2'\nassert solution('2 2 4 5 3') == '-1'\nassert solution('2 2 4 5 3') == '1'\nassert solution('3 2 1 5 2') == '3'\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"B\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"B\"\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1 or solution(stdin) == 2,'something went wrong'\n\nConstraints:\n1 <= stdin.length <= 10^4\n1 <= stdin[i] <= 10^6\n0 <= cnt_1(i) < 10^6\n0 <= cnt_2(i) < 10^6\n0 <= cnt_4(i) < 10^6\n\"\"\""
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '2'\n\n\n\"\"\"\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\nInput\n1 1 2 3 4 4\nOutput\n2\n\nInput\n4 1 3 3 4 4\nOutput\n4\n\"\"\""
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\n\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= a_i <= 10000\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\n\n-----Algorithms-----\n\n1. For each segment in the crossword, check the segment length and find if it's equal to the length of the crossword.\n\n2. For each segment, check if there's at least one intersection and if it does not intersect, intersect with the previous segment.\n\n3. Return YES if all of the following conditions are satisfied.\n\n4. If there's at least one intersection, then YES. Otherwise, return NO.\n\n\n-----Time Complexity-----\n\nn*(2^n)\nn=number of segments.\n\n\n-----Solving-----\n\nn=number of segments.\nn=2^n.\n2^n=2^n-1.\n\nn = 2^n-1.\n1^n=2^n-1.\n\nn = 2^n-1.\n2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n\nn = 2^n-1.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n\nn = 2^n-1.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2.\n2^n-3.\n2^n-4.\n2^n-5.\n2^n-6.\n2^n-7.\n2^n-8.\n2^n-9.\n2^n-10.\n\nn = 2^n-1.\n2^n-2."
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == 'NO'\nassert solution('3') == 'YES'\nassert solution('3') == 'NO'\nassert solution('2') == 'YES'"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'NO'"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 'YES'\n\npass\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Solution-----\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=\"2 4 1 3 3 4 5 5 4 5 4 4 5 4 5 5 4 4 5 5 4 4 4 5 5 4 4 5 5 5 4 4 5 5 4 5 4 5 5 4 5 4 5 5 4 5 5 5 4 5 5 5 4 5 5 4 5 5 5 4 5 4 5 5 5 5 4 5 5 5 4 5 5 5 5 4 5 5 5 5 4 5 5 5 5 5 4 5 5 5 5 5 4 5 5 5 5 5 4 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\nhttps://www.youtube.com/watch?v=VUcq0H5nK3c&list=PLoLWd6wrAhOcSgr7JYyw2NIKy4w-9hcQ&index=10"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"7\") == \"7\"\nassert solution(\"5\") == \"3\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n        stdin=input()\n    ) == \"3\"\n\nassert solution(\n        stdin=input()\n    ) == \"3\"\n\nassert solution(\n        stdin=input()\n    ) == \"1\""
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == 3\nassert solution(6) == 3\nassert solution(4) == 3\nassert solution(7) == 3\nassert solution(3) == 3\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5, 11) == 3\nassert solution(6, 16) == 3\nassert solution(5, 1) == 1\nassert solution(1, 100) == 0\nassert solution(1, 10 ** 9) == 0\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 3\n\n\n-----Constraints-----\n0 <= n <= 10^5\n\n1 <= S <= 10^9\n\n----------Time Limit---------\n\nO(n) - time and space, as for the previous problem.\n\nO(n) - time and space as the two main areas.\n\nO(n) - time and space as for the two sub-areas.\n\n\n\n\n-----Submissions-----\n\nThis is a TLE.\n\n\"\"\"\nclass Solution:\n    def solution(self,n,s):\n        if s == 0:\n            return 1\n        if n == 1:\n            return 0\n        if s < n:\n            return 0\n\n        return n + sum([self.solution(n - s, s - c) for c in range(1, n + 1)])"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('{1,2}'\n    ) == 3\nassert solution('{1,4}'\n    ) == 3\nassert solution('{1,5}'\n    ) == 3\n\n\n\n### Answer\n\nimport math"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2) == 2\nassert solution(6, 1) == 3\n\n\"\"\"\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\", \"4\", \"5\", \"3\"]) == \"3\"\nassert solution([\"3\", \"5\", \"5\", \"4\"]) == \"3\"\nassert solution([\"5\", \"4\", \"3\", \"4\"]) == \"3\"\nassert solution([\"5\", \"4\", \"4\", \"3\"]) == \"3\"\nassert solution([\"5\", \"3\", \"4\", \"3\"]) == \"3\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aabcd\") == \"bcd\"\nassert solution(\"aabcd\") == \"bac\"\nassert solution(\"abcde\") == \"abcdef\"\nassert solution(\"abbcde\") == \"bbcdee\"\nassert solution(\"aabbcde\") == \"bbbcdee\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abcdefg\") == \"abccba\"\nassert solution(\"aabb\") == \"abccba\"\nassert solution(\"abcdcd\") == \"abccba\"\nassert solution(\"aefgfe\") == \"abccba\"\nassert solution(\"abbce\") == \"abbce\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"ba\"\nassert solution(\"abcd\") == \"a\"\nassert solution(\"abcd\") == \"cd\"\nassert solution(\"abcd\") == \"cd\"\nassert solution(\"abacded\") == \"abcd\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abca\") == \"abcba\""
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('aabc') == 'abba','result is incorrect'\nassert solution('aab') == 'aba','result is incorrect'\nassert solution('abc') == 'bc','result is incorrect'\nassert solution('ab') == 'ab','result is incorrect'\nassert solution('ab') == 'bab','result is incorrect'\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aabccbbd\") == \"aabccbbd\"\nassert solution(\"ababcdeba\") == \"ababcdeba\"\nassert solution(\"aa\") == \"a\"\nassert solution(\"abc\") == \"b\"\nassert solution(\"aabbc\") == \"b\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"b\"]) == \"b\"\nassert solution([\"a\", \"b\", \"c\", \"d\"]) == \"db\"\nassert solution([\"a\", \"b\", \"a\", \"b\", \"b\"]) == \"aa\"\nassert solution([\"a\", \"b\", \"c\", \"d\", \"a\", \"d\"]) == \"bcd\"\nassert solution([\"a\", \"a\", \"a\", \"a\", \"a\", \"b\"]) == \"abcd\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('aabca') == 'abca'\nassert solution('abbca') == 'abca'\nassert solution('cbac') == 'cbaa'\nassert solution('abca') == 'abca'\nassert solution('aacb') == 'abca'\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == 'abcba'\nassert solution(a) == 'abcba'\nassert solution(a) == 'bca'\nassert solution(a) == 'abc'\nassert solution(a) == 'ab'\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"\"), \"empty string\"\nassert solution(\"abcd\"), \"empty string\"\nassert solution(\"aba\"), \"empty string\"\nassert solution(\"abc\"), \"empty string\"\nassert solution(\"abcabc\"), \"empty string\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"White\"\nassert solution(input()) == \"Black\"\nassert solution(input()) == \"Draw\"\n\n[\ud480\uc774]\n\npass\n\"\"\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"rnbqkbnr\") == \"White\"\nassert solution(\"pppppppp\") == \"Black\""
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Black\" or solution(stdin) == \"White\"\n\n\n-----Constraints-----\n0 <= n <= 10^6\n\"\"\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"rnbqkbnr\") == \"White\"\nassert solution(\"pppppppp\") == \"Black\"\nassert solution(\"rppppppr\") == \"White\"\nassert solution(\"K\") == \"Black\"\nassert solution(\"rk\") == \"Black\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"rnbqkbnr\") == \"White\"\nassert solution(\"pppppppp\") == \"Black\"\nassert solution(\"rppppppr\") == \"Black\"\nassert solution(\"rkqbnkr\") == \"White\"\nassert solution(\"kqbnkr\") == \"White\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(r\"\\n
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"rnbqkbnr\") == \"White\"\nassert solution(\"pppppppp\") == \"Black\"\nassert solution(\"rppppppr\") == \"White\"\nassert solution(\"rkqbnkr\") == \"Black\"\nassert solution(\"kqrbnqk\") == \"White\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"White\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"rnbqkbnr\") == \"White\"\nassert solution(\"pppppppp\") == \"Black\"\nassert solution(\"rkqbksqr\") == \"Draw\"\nassert solution(\"rrrrrrrr\") == \"White\"\nassert solution(\"rnbqkbnrpppppkqk\") == \"Black\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 3 2 3\""
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '1 3 2 3'\nassert solution(input().split(' ')) == '1 3 2 3'\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == \"1\", \"fail\"\nassert solution(3) == \"3\", \"fail\"\nassert solution(2) == \"2\", \"fail\"\nassert solution(3) == \"3\", \"fail\"\nassert solution(4) == \"3\", \"fail\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,3), \"Takahashi can win the game\"\nassert solution(6,1), \"Takahashi cannot win the game\"\nassert solution(10,5), \"Takahashi can win the game\"\nassert solution(5,0), \"Takahashi cannot win the game\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1, 3, 4, 5) == \"3 2 5\"\nassert solution(0, 0, 0, 1) == \"0 0 0\"\nassert solution(6, 2, 3, 4) == \"0 0 0 0\"\nassert solution(3, 3, 6, 7) == \"0 1 0 0\"\nassert solution(4, 4, 6, 7) == \"0 0 0 0 0\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('000001001') == '0101'\nassert solution('101') == '101'\nassert solution('0011001') == '0001000100'\nassert solution
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['1 0 0 1', '1 0 0 2', '1 0 0 3', '1 0 0 4', '1 0 0 5', '1 0 0 6', '1 0 0 7', '1 0 0 8', '1 0 0 9']) == '1 3 2 3'\nassert solution(['0 1 0 1', '0 0 0 1', '0 0 0 2', '0 0 0 3', '0 0 0 4', '0 0 0 5', '0 0 0 6', '0 0 0 7', '0 0 0 8', '0 0 0 9']) == '1 3 2 3'\nassert solution(['0', '1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']) == '1 3 2 3'\nassert solution(['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']) == '1 3 2 3'\nassert solution(['0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0']) == '1 3 2 3'\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9') == '4 5 6 7 8 9'\nassert solution('1 2 3 4 6 5 7 9') == '5 6 5 7 9'\nassert solution('4 1 4 1 3') == '1 3'\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"0123456789\"\nassert solution(input) == \"-1\"\nassert solution(input) == \"0123456789\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4 4\") == \"1 3 2 3\"\nassert solution(\"3 4 1\") == \"1 2 3\"\nassert solution(\"1 4 3\") == \"1 2 3\"\nassert solution(\"1 3 4\") == \"1 2 3\"\nassert solution(\"1 4 1\") == \"1 2 3\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input().replace('-', '0')) == \"7 4\"\n\"\"\""
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"s\"\nassert solution(\"7 4\") == \"s\"\nassert solution(\"2 10\") == \"s\"\nassert solution(\"-1 2\") == \"s\""
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3\\n1 2\\n0 3\\n4 1\\n4 2\\n2 3\\n0 4\\n1 0\\n4 4\\n3 4\\n4 2\\n0 2\\n1 0\\n4 0\\n3 4\\n2 0\\n1 1\\n4 0\\n3 4\\n2 1\\n0 4\\n1 0\\n4 1\\n3 4\\n2 0\\n0 1\\n1 4\\n4 0\\n3 4\\n2 1\\n0 2\") == '1\\n2\\n3\\n4\\n4\\n4\\n4\\n3\\n0\\n2\\n0\\n1\\n4\\n1\\n0\\n0\\n3\\n3\\n0\\n2\\n1\\n4\\n0\\n4\\n3\\n0\\n2\\n0\\n1\\n0\\n1\\n4\\n3\\n0\\n0\\n0\\n0\\n4\\n1\\n2\\n0\\n4\\n3\\n1\\n0\\n1\\n0\\n0\\n0\\n4\\n0\\n0\\n0\\n0\\n0\\n1\\n0\\n0\\n4\\n0\\n0\\n0\\n4\\n0\\n0\\n0\\n4\\n0\\n0\\n0\\n4\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n0\\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('7 -2') == 11\nassert solution('-1 2') == 3\nassert solution('-1 2 3 4') == 7\nassert solution('7 -1 2 3 4') == -1\nassert solution('7 -2 4') == -1\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"11\") == \"3\"\nassert solution(\"-1 2\") == \"3\"\nassert solution(\"2 10\") == \"4\"\nassert solution(\"3 10\") == \"7\"\nassert solution(\"-1 2\") == \"3\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 -1\") == \"3\"\nassert solution(\"3 -1\") == \"7 4\"\nassert solution(\"2 10\") == \"7 4\"\nassert solution(\"-1 2\") == \"7 4\"\nassert solution(\"x_1 y_1\") == \"x_2 y_2\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('11') == '3'\nassert solution('-1 2') == '7 4'\nassert solution('7 4') == '2 10'\nassert solution('2 10') == '-1 2'\n\"\"\""
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('11') == '3'\nassert solution('11') == '7 4'\nassert solution('11') == '7 10'\nassert solution('11') == '10'\nassert solution('11') == '-1 2'\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '3'\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"s\"\nassert solution(stdin) == \"x_1 y_1\"\nassert solution(stdin) == \"x_2 y_2\"\nassert solution(stdin) == \"x_s y_s\"\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution(\"1\")) == \"1\"\nassert solution(solution(\"2\")) == \"2\"\nassert solution(solution(\"3\")) == \"3\"\nassert solution(solution(\"4\")) == \"4\"\nassert solution(solution(\"5\")) == \"5\"\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '12'\nassert solution(inp) == '54'\nassert solution(inp) == '1'\nassert solution(inp) == '2'\nassert solution(inp) == '3'\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n        input()\n    ) == -1\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"8\") == \"54\"\nassert solution(\"10\") == \"2\"\nassert solution(\"54\") == \"1\"\nassert solution(\"20\") == \"1\"\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '54'\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(8)\nassert solution(stdin) == str(54)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(-1)\n\n\n\"\"\"\"\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '54'\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"1 2 4 8\") == \"54\"\nassert solution(\"1 3 9 27\") == \"12\"\nassert solution(\"1 4 8 16\") == \"24\"\nassert solution(\"1 5 9 18\") == \"16\"\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"-1\""
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('0 0 4') == '5.0'\nassert solution('0 0 5') == '7.25298806364175601379'\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 0 4\") == \"7.25298806364175601379\"\nassert solution(\"0 0 5\") == \"0.00000000000000000000\"\nassert solution(\"11 0 5\") == \"0.00000000000000000000\""
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0.00000000000000000000\"\nassert solution(input()) == \"0.00000000000000000000\"\nassert solution(input()) == \"0.00000000000000000000\"\nassert solution(input()) == \"0.00000000000000000000\"\nassert solution(input()) == \"0.00000000000000000000\"\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5') == '9.506599559014596'\nassert solution('6') == '10.00000'\nassert solution('10') == '10.00000'\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7.25298806364175601379\"\nassert solution(stdin) == \"0.00000000000000000000\""
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 0.00000000000000000000\nassert solution(2) == 0.00000000000000000000\nassert solution(3) == 0.00000000000000000000\nassert solution(4) == 0.00000000000000000000\nassert solution(5) == 0.00000000000000000000\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('0 0 4') == '7.25298806364175601379'\nassert solution('0 0 4 5') == '0.00000000000000000000'"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0 4\") == 7.25298806364175601379\nassert solution(\"0 0 5\") == 0.00000000000000000000\nassert solution(\"11 0 5\") == 0.00000000000000000000\nassert solution(\"11 0 0\") == 0.00000000000000000000\nassert solution(\"1 0 0\") == 0.00000000000000000000\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"should return ''\"\n\"\"\""
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0 0 4\") == \"7.25298806364175601379\"\nassert solution(\"6 0 4\") == \"7.25298806364175601379\"\nassert solution(\"11 0 5\") == \"7.25298806364175601379\"\nassert solution(\"\") == \"0.00000000000000000000\"\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\n\n\"\"\"\n\nimport math\nimport sys\nimport time\nstart_time = time.time()"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(sys.stdin) == '1'\n\n\"\"\"\n\n\nclass Solution:\n    def minSteps(self, n: int) -> int:\n        if n == 0 or n < 0:\n            return 0\n\n        def check(n):\n            if n == 1:\n                return True\n            if n > 1:\n                return all(check(i) for i in range(2, n))\n\n        return 1 if n % 2 == 0 else 2 if n % 2 == 1 else 1 + (n // 2)\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1\", \"3\"]) == \"3\"\nassert solution([\"2\", \"3\"]) == \"1\"\nassert solution([\"5\", \"6\"]) == \"4\"\nassert solution([\"5\", \"7\"]) == \"2\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"]) == \"1\"\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 2 4 7 9 12 5 6 8 11 4 8\"\n) == \"6\"\n\"\"\""
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\n\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(1)\n\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(9) == 1\nassert solution(5) == 1\n\n\n\n\n\"\"\""
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n\n\"\"\""
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n\n\nExample 2:\n\nInput\n8\n\nOutput\n1\n\nInput\n6\n\nOutput\n5\n\nInput\n5\n\nOutput\n2\n\nInput\n7\n\nOutput\n3\n\nInput\n6\n\nOutput\n2\n\nInput\n4\n\nOutput\n3\n\nInput\n3\n\nOutput\n3\n\"\"\""
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 1\nassert solution(input()) == 1\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"3 3 5 4 2 2 1 1 2 1 2 3 2 4 3 3 4 4 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3,5) == 2\nassert solution(5,3) == 3\nassert solution(1,5) == 2\nassert solution(3,3) == 2\nassert solution(1,1) == 1\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----Example-----\n\nFor example, the second example of how the bandit needs to catch a citizen at one side. The example also contains an example of how to catch a citizen on both sides."
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n\n\n---CODE---\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\n\nInput\n4\n1 1 3\n3 1 3\n3 2 2\n\nOutput\n3\n\nInput\n4\n1 1 3\n3 1 3\n3 2 2\n\nOutput\n3\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1 3\") == \"3\"\nassert solution(\"2 1 3\") == \"2\"\nassert solution(\"3 1 3\") == \"0\"\nassert solution(\"2 1 3\") == \"2\"\nassert solution(\"3 1 3\") == \"1\"\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n\nfrom math import factorial"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\\n1\\n3 1\\n3 1 2\\n3 1 3\") == 3\nassert solution(\"1 2\\n2\\n2\\n1\\n2\\n2\\n2\\n1\\n1\") == 3\nassert solution(\"1\\n2\\n3\\n3\\n4\\n4\") == 3\n\n\n-----Advanced-----\n\nThe next few lines will help us do the same task, but only from the last few lines.\n\n\n-----Constraints-----\n\n0 < stdin.readline().strip().isdigit() <= n^2 <= 10^5\n\nSample Input\n\n3\n1 1\n3 1 2\n\nSample Output\n\n3\n\n-----Notes-----\n\nTo generate all valid permutations of a list, we will start with a list of length $n$, and go backwards from the square $0$, and proceed by moving the smaller of the squares from the square $p_i$ to the square $i$ and proceeding backwards until we reach the next one.\n\n\"\"\""
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\", \"1\", \"1\", \"3\"]) == \"3\"\nassert solution([\"5\", \"1\", \"1\", \"3\", \"2\"]) == \"3\"\nassert solution([\"5\", \"1\", \"1\", \"3\", \"2\", \"3\"]) == \"3\"\nassert solution([\"5\", \"1\", \"1\", \"3\", \"2\", \"3\", \"4\"]) == \"4\"\nassert solution([\"5\", \"1\", \"1\", \"3\", \"2\", \"3\", \"4\", \"5\"]) == \"4\"\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(n, stdin) == 1\nassert solution(n, stdin) == 2\nassert solution(n, stdin) == 0\n\n\n-----Constraints-----\n1 <= n <= 1000000\n\nA valid answer must be obtained from both words.\n\nBoth words consist of lowercase English letters.\n\nBoth words are in the same word of the same length.\n\nExample\n\nFor n = 5 and stdin = \"reading\"\nthe output should be solution(n, stdin) = 1\n\n\n-----Time complexity-----\nThere are 3 lines of code.\nTime complexity: O(n + n)\n\nSpace Complexity: O(1)\n\nO(n + n) to find the answer and then O(1) to reduce the count of combinations.\n\n\n-----Test Cases-----\n\ntest case 1:\nInput: n = 5, stdin = \"reading\"\nOutput: 1\n\ntest case 2:\nInput: n = 3, stdin = \"toy\"\nOutput: 0\n\n\ntest case 3:\nInput: n = 5, stdin = \"troy\"\nOutput: 2\n\n\"\"\"\nimport itertools as it\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(7, \"reading\", \"toy\", \"try\") == 1, \"wrong solution\"\nassert solution(5, \"trading\", \"toy\", \"try\") == 2, \"wrong solution\"\nassert solution(3, \"toy\", \"troy\", \"try\") == 2, \"wrong solution\"\n\"\"\""
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\" or \"2\"\nassert solution(stdin) == \"0\"\n\nclass Solution:\n    def countAnagrams(self, str1: str, str2: str) -> int:\n        d = collections.Counter(str1)\n        d2 = collections.Counter(str2)\n        \n        if d == d2:\n            return 1\n        \n        return 0\n        \n    \nassert solution(stdin) == \"1\" or \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, \"reading\", \"treading\") == 0\nassert solution(3, \"sweet\", \"sheep\") == 1\nassert solution(3, \"try\", \"try\") == 1\nassert solution(4, \"toy\", \"toy\") == 2\nassert solution(5, \"toy\", \"toy\") == 0\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 2\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"trading\") == 1\nassert solution(\"toy\") == 0\nassert solution(\"troy\") == 2\nassert solution(\"sweet\") == 1\nassert solution(\"reading\") == 2\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == 1\n"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"problem\"\nassert solution(stdin) == \"2\", \"incorrect answer\"\n\n\"\"\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '93'\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '93'\nassert solution(stdin) == '8'\n\n'''"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"93\"\nassert solution(\"7\") == \"7\"\nassert solution(\"5\") == \"5\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"4 3\") == \"2\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 4\") == \"3\"\nassert solution(\"1 2 5\") == \"1\"\nassert solution(\"1 1 6\") == \"6\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 7 6 7\") == \"7\"\nassert solution(\"1 2 3 4 5 7 6 7\") == \"8\"\nassert solution(\"1 2 7 6 7 1\") == \"8\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 188 189 190 191 191 192 191 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 210 211 212 213 214 215 216 217 219 220 221 222 223 224 226 227 228 229 230 231 230 231 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3 4 5') == '1 2'\nassert solution('5 3 5 6 5') == '5'\nassert solution('5 6 7 6 5') == '5'\nassert solution('7 7 7 7 7') == '7'\nassert solution('7 6 6 6 6') == '7'\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 6 9\") == '93'\nassert solution(\"10 2 3 4 5\") == '25'\nassert solution(\"10 8 3 4\") == '15'\nassert solution(\"1 5\") == '8'\nassert solution(\"1 3\") == '7'\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '93'"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == answer\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"0\"\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 3') == 3\nassert solution('6 2') == 2\nassert solution('1 2') == 0\nassert solution('0') == 0\nassert solution('2 1') == 0\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"7 4\") == 3\nassert solution(\"6 2\") == 2\nassert solution(\"3 0\") == 0"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('7 4') == 3\nassert solution('6 2') == 2\nassert solution('3 0') == 0\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10**5\n0 \u2264 m \u2264 10**5\n\nTime Limit: 1sec\nMemory Limit: 1MB\n\n\n-----Example 1-----\n\nInput\n\n1 2 3\n\nOutput\n\n3\n\nInput\n\n2 1 0\n\nOutput\n\n1\n\n\n-----Example 2-----\n\nInput\n\n3 2\n\nOutput\n\n0\n\nInput\n\n1 3 1\n\nOutput\n\n0\n\nInput\n\n1 1 2\n\nOutput\n\n0\n\nExplaination\nThe number of cats at the party at the time of the event is shown in a table:\n\n[Image]\n  [Image]\n[Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  [Image]\n\nThere are $2$ groups of cats, $2$ groups of cats, and $0$ groups of cats at the party.\n\n[Image]\n  [Image]\n  [Image]\n  [Image]\n  ["
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '0'\n\"\"\""
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"7 4\") == 3\nassert solution(\"6 2\") == 3\nassert solution(\"3 0\") == 2\nassert solution(\"2 0\") == 0\n\nPrints the number of groups of cats at the moment.\n\n\n-----Original-----\n\nInput\n\nThe only line contains two integers $n$ and $m$ ($2 \\leq n \\leq 1000$, $0 \\leq m \\leq n$)\u00a0\u2014 the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.\n\nOutput\n\nPrint a single integer\u00a0\u2014 the maximum possible number of groups of cats at the moment Katie observes.\n\n-----Solution-----\n\nIn this version, there are two options:\n\n    1. The circle is divided into even number of groups.\n    2. The circle is divided into odd number of groups.\n\nExample\n\nA single example of an integer: $n$ and $m$ ($2 \\leq n \\leq 1000$, $0 \\leq m \\leq n$)\u00a0\u2014 the initial number of cats at the party and the number of cats who left the circle at the moment Katie observes, respectively.\n\nThen, there are two distinct groups of cats whose centers are as shown below:\n\n[Image]\n\n[Red 1, Blue 2, Red 3, Blue 4, Red 5, Blue 6, Red 7, Blue 8, Red 9, Blue 10, Blue 11, Blue 12, Blue 13, Blue 14, Red 15, Red 16, Red 17, Red 18, Red 19, Blue 20, Blue 21, Red 22, Blue 22, Red 23, Blue 24, Blue 25, Red 26, Red 27, Red 28, Blue 29, Red 30, Red 31, Blue 32, Blue 33, Red 34, Blue 35, Blue 36, Red 37, Blue 38, Red 39, Red 40, Blue 41, Red 42, Blue 43, Blue 44, Red 45, Blue 46, Red 47, Blue 48, Blue 49, Blue 50, Blue 51, Blue 52, Blue 53, Blue 54, Blue 55, Blue 56, Blue 57, Red 58, Red 59, Red 60, Red 61, Blue 62, Blue 63, Blue 64, Red 65, Red 66, Blue 67, Blue 68, Blue 69, Red 70, Blue 71, Red 72, Blue 73, Blue 74, Blue 75, Blue 76, Blue 77, Blue 78, Blue 79, Blue 80, Blue 81, Blue 82, Blue 83, Blue 84, Red 85, Blue 86, Blue 87, Blue 88, Blue 89, Blue 90, Blue 91, Blue 92, Blue 93, Blue 94, Blue 95, Blue 96, Blue 97, Blue 98, Blue 99, Blue 100, Blue 101, Blue 102, Blue 103, Blue 104, Blue 105, Blue 106, Blue 107, Blue 108, Blue 109, Blue 110, Blue 111, Blue 112, Blue 113, Blue 114, Blue 115, Blue 116, Blue 117, Blue 118, Blue 119, Blue 120, Blue 121, Blue 122, Blue 123, Blue 124, Blue 125, Blue 126, Blue 127, Blue 128, Blue 129, Blue 130, Blue 131, Blue 132, Blue 133, Blue 134, Blue 135, Blue 136, Blue 137, Blue 138, Blue 139, Blue 140, Blue 141, Blue 142, Blue 143, Blue 144, Blue 145, Blue 146, Blue 147, Blue 148, Blue 149, Blue 150, Blue 151, Blue 152, Blue 153, Blue 154, Blue 155, Blue 156, Blue 157, Blue 158, Blue 159, Blue 160, Blue 161, Blue 162, Blue 163, Blue 164, Blue 165, Blue 166, Blue 167, Blue 168, Blue 169, Blue 170, Blue 171, Blue 172, Blue 173, Blue 174, Blue 175, Blue 176, Blue 177, Blue 178, Blue 179, Blue 180, Blue 181, Blue 182, Blue 183, Blue 184, Blue 185, Blue 186, Blue 187, Blue 188, Blue 189, Blue 190, Blue 191, Blue 192, Blue 193, Blue 194, Blue 195, Blue 196, Blue 197, Blue 198, Blue 199, Blue 200, Blue 201, Blue 202, Blue 203, Blue 204, Blue 205, Blue 206, Blue 207, Blue 208, Blue 209, Blue 210, Blue 211, Blue 212, Blue 213, Blue 214, Blue 215, Blue 216, Blue 217, Blue 218, Blue 219, Blue 220, Blue 221, Blue 222, Blue 223, Blue 224, Blue 225, Blue 226, Blue 227, Blue 228, Blue 229, Blue 230, Blue 231, Blue 232, Blue 233, Blue 234, Blue 235, Blue 236, Blue 237, Blue 238, Blue 239, Blue 240, Blue 241, Blue 242, Blue 243, Blue 244, Blue 245, Blue 246, Blue 247, Blue 248, Blue 249, Blue 250, Blue 251, Blue 252, Blue 253, Blue 254, Blue 255, Blue 256, Blue 257, Blue 258, Blue 259, Blue 260, Blue 261, Blue 262, Blue 263, Blue 264, Blue 265, Blue 266, Blue 267, Blue 268, Blue 269, Blue 270, Blue 271, Blue 272, Blue 273, Blue 274, Blue 275, Blue 276, Blue 277, Blue 278, Blue 279, Blue 280, Blue 281, Blue 282, Blue 283, Blue 284, Blue 285, Blue 286, Blue 287, Blue 288, Blue 289, Blue 290, Blue 291, Blue 292, Blue 293, Blue 294, Blue 295, Blue 296, Blue 297, Blue 298, Blue 299, Blue 300, Blue 301, Blue 302, Blue 303, Blue 304, Blue 305, Blue 306, Blue 307, Blue 308, Blue 309, Blue 310, Blue 311, Blue 312, Blue 313, Blue 314, Blue 315, Blue 316, Blue 317, Blue 318, Blue 319, Blue 320, Blue 321, Blue 322, Blue 323, Blue 324, Blue 325, Blue 326, Blue 327, Blue 328, Blue 329, Blue 330, Blue 331, Blue 332, Blue 333, Blue 334, Blue 335, Blue 336, Blue 337, Blue 338, Blue 339, Blue 340, Blue 341, Blue 342, Blue 343, Blue 344, Blue 345, Blue 346, Blue 347, Blue 348, Blue 349, Blue 350, Blue 351, Blue 352, Blue 353, Blue 354, Blue 355, Blue 356, Blue 357, Blue 358, Blue 359, Blue 360, Blue 361, Blue 362, Blue 363, Blue 364, Blue 365, Blue 366, Blue 367, Blue 368, Blue 369, Blue 370, Blue 371, Blue 372, Blue 373, Blue 374, Blue 375, Blue 376, Blue 377, Blue 378, Blue 379, Blue 380, Blue 38"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 4\") == \"3\"\nassert solution(\"6 2\") == \"2\"\nassert solution(\"3 0\") == \"0\"\nassert solution(\"2 2\") == \"0\"\n"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\n-----Advanced-----\n\nPossible solutions to this problem are:\n\nWhat are the maximum possible number of groups?\n\nGiven:\n\n$n$ = 7\n$m$ = 2\n$0$ = 0\n\nThe number of groups on the left is $2$ and the number of cats left is $1$.\n\nA group of $2$, $3$, $5$ and $7$ is called a group. At the observed moment, $4$ cats have left the table. Suppose the cats $2$, $3$, $5$ and $7$ have left, then there are $2$ groups remaining. It is possible to show that it is the maximum possible number of groups remaining.\n\nA group of $2$, $3$, $5$ and $7$ is called a group. At the observed moment, $2$ cats have left the table. Suppose the cats numbered $3$ and $5$ left, then there will be $2$ groups remaining ($\\{1, 2\\}$ and $\\{4, 5\\}$). It is impossible to have more than $2$ groups of cats remaining.\n\nA group of $2$, $3$, $5$ and $7$ is called a group. At the observed moment, $2$ cats have left the table. Suppose the cats numbered $3$ and $5$ left, then there will be $2$ groups remaining ($\\{1, 2\\}$ and $\\{4, 5\\}$). It is impossible to have more than $2$ groups of cats remaining.\n\nThe group of all cats left.\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('237') == '9'\nassert solution('15') == '1'\nassert solution('117') == '2'\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stderr) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stderr) == \"3\"\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"9\""
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"117 3\") == \"9\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\"\nassert solution(\"237 7\") == \"1\"\nassert solution(\"15 2\") == \"2\""
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('117 3') == 9\nassert solution('237 7') == 1\nassert solution('15 2') == 2\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n\n\n\n\n\"\"\"\n\nfrom typing import Iterator\nfrom itertools import combinations, product\nfrom collections import defaultdict\n\n\nclass Solution:\n    \"\"\"\n    @param: r: A single integer\n    @param: coins: A list of integers\n    @return: An integer, the minimum number of shovels\n    \"\"\"\n    def __init__(self, r: int, coins: list):\n        self.r = r\n        self.coins = coins\n\n    def minimumSwaps(self, coins):\n        self.result = 0\n        for i in range(len(coins)):\n            for j in combinations(range(len(coins)), i):\n                for k in product(*j):\n                    if sum(k) == self.r:\n                        self.result += 1\n        return self.result\n        pass\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(solution(input())) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'\nassert solution(input()) == 'YES'\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('111222') == 'YES'\nassert solution('111222') == 'NO'\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"4 4\",\".X.XX\",\"..X.X.X\",\"..\",\"..\",\"..\"]) == \"YES\"\nassert solution([\"5 5\",\".X.XX\",\".X.X.X\",\"..\",\".\",\"..\"]) == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 3') == 'YES'\n\n\n\"\"\"\n\nclass Solution:\n    def valid_rectangle(self, piece: str) -> str:\n        \"\"\"\n        Check if the given piece covers the rectangle\n        \"\"\"\n        if piece in ['.', 'X']:\n            return False\n\n        n = len(piece)\n        m = len(piece[0])\n        n_upper = n-1\n        for i in range(n):\n            if piece[i] == 'X':\n                continue\n            if piece[i] == '.':\n                continue\n            if i > 0:\n                if piece[i-1] == piece[i] and piece[i] == '.':\n                    continue\n                else:\n                    return False\n\n        n_lower = 0\n        for i in range(m):\n            if piece[0] == piece[i]:\n                n_lower += 1\n            if piece[m-1] == piece[m-1-n_lower]:\n                continue\n            if piece[m-1] == piece[m-1-n_upper]:\n                continue\n            return False\n\n        return True\n\n    def valid_rectangle_2(self, piece: str) -> str:\n        \"\"\"\n        Check if the given piece covers the rectangle\n        \"\"\"\n        if piece in ['.', 'X']:\n            return False\n\n        n = len(piece)\n        m = len(piece[0])\n        return piece[-1] == 'X' and piece[0] == piece[n-1] and piece[1:n] == '.'\n\n    def valid_rectangle_3(self, piece: str) -> str:\n        \"\"\"\n        Check if the given piece covers the rectangle\n        \"\"\"\n        if piece in ['.', 'X']:\n            return False\n\n        n = len(piece)\n        m = len(piece[0])\n        n_upper = n-1\n        n_lower = 0\n        for i in range(m):\n            if piece[i] == '.':\n                continue\n            if piece[i] == 'X':\n                continue\n            if i > 0:\n                if piece[i-1] == piece[i] and piece[i] == '.':\n                    continue\n                else:\n                    return False\n\n            if piece[m-1] == piece[m-1-n_lower]:\n                continue\n            if piece[m-1] == piece[m-1-n_upper]:\n                continue\n            return False\n\n        return True\n\n    def valid_rectangle_4(self, piece: str) -> str:\n        \"\"\"\n        Check if the given piece covers the rectangle\n        \"\"\"\n        if piece in ['.', 'X']:\n            return False\n\n        n = len(piece)\n        m = len(piece[0])\n        n_upper = n-1\n        n_lower = 0\n        for i in range(m):\n            if piece[i] == '.':\n                continue\n            if piece[i] == 'X':\n                continue\n            if i > 0:\n                if piece[i-1] == piece[i] and piece[i] == '.':\n                    continue\n                else:\n                    return False\n\n            if piece[m-1] == piece[m-1-n_lower]:\n                continue\n            if piece[m-1] == piece[m-1-n_upper]:\n                continue\n            return False\n\n        return True\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n'''\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\") == \"YES\"\nassert solution(\"5 5\") == \"NO\"\nassert solution(\"111222\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"3 4\") == \"YES\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"123312\") == \"YES\"\n\n\n\nassert solution(\"2 1 0\") == \"NO\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('.X.') == 'YES'\nassert solution('XXX') == 'NO'\n\n\n'''"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\n\n-----Constraints-----\n\n0 \u2264 stdin.length \u2264 1,000\n\n\n-----Time Limit: 1 second__\n\nclass Solution:\n    def findMinSegment(self, points: List[List[int]]) -> int:\n        if len(points) < 2:\n            return len(points)\n\n        points.sort()\n\n        left = points[0][0]\n        right = points[-1][0]\n\n        for i in range(1, len(points)):\n            if points[i][0] < left:\n                left = points[i][0]\n            if points[i][0] > right:\n                right = points[i][0]\n\n        ans = right - left + 1\n\n        return ans\n\n-----Time Limit: 1 second__\n\nclass Solution:\n    def findMinSegment(self, points: List[List[int]]) -> int:\n        if len(points) < 2:\n            return len(points)\n\n        points.sort()\n\n        left = points[0][0]\n        right = points[-1][0]\n\n        for i in range(1, len(points)):\n            if points[i][0] < left:\n                left = points[i][0]\n            if points[i][0] > right:\n                right = points[i][0]\n\n        ans = right - left + 1\n\n        return ans\n\n-----Time Limit: 1 second__\n\nclass Solution:\n    def findMinSegment(self, points: List[List[int]]) -> int:\n        if len(points) < 2:\n            return len(points)\n\n        points.sort()\n\n        left = points[0][0]\n        right = points[-1][0]\n\n        for i in range(1, len(points)):\n            if points[i][0] < left:\n                left = points[i][0]\n            if points[i][0] > right:\n                right = points[i][0]\n\n        ans = right - left + 1\n\n        return ans\n\n-----Time Limit: 1 second__\n\nclass Solution:\n    def findMinSegment(self, points: List[List[int]]) -> int:\n        if len(points) < 2:\n            return len(points)\n\n        points.sort()\n\n        left = points[0][0]\n        right = points[-1][0]\n\n        for i in range(1, len(points)):\n            if points[i][0] < left:\n                left = points[i][0]\n            if points[i][0] > right:\n                right = points[i][0]\n\n        ans = right - left + 1\n\n        return ans\n\n-----Time Limit: 1 second__\n\nclass Solution:\n    def findMinSegment(self, points: List[List[int]]) -> int:\n        if len(points) < 2:\n            return len(points)\n\n        points.sort()\n\n        left = points[0][0]\n        right = points[-1][0]\n\n        for i in range(1, len(points)):\n            if points[i][0] < left:\n                left = points[i][0]\n            if points[i][0] > right:\n                right = points[i][0]\n\n        ans = right - left + 1\n\n        return ans\n\n-----Time Limit: 1 second__\n\nclass Solution:\n    def findMinSegment(self, points: List[List[int]]) -> int:\n        if len(points) < 2:\n            return len(points)\n\n        points.sort()\n\n        left = points[0][0]\n        right = points[-1][0]\n\n        for i in range(1, len(points)):\n            if points[i][0] < left:\n                left = points[i][0]\n            if points[i][0] > right:\n                right = points[i][0]\n\n        ans = right - left + 1\n\n        return ans\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\nprint()\n\nA bad polyline in the first sample.\n\n\"\"\"\nimport sys\nfrom io import StringIO\nfrom collections import defaultdict\nfrom itertools import product"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 -1') == 1\nassert solution('1 1') == 1\nassert solution('1 2') == 2\nassert solution('1 3') == 3\nassert solution('-1 3') == 3\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n\n-----Time Limit (Cached)-----\n\nTime Limit: 1 second\n\nMemory Limit: 1GB\n\n-----Solutions-----\n\n>>> Time limit exceeded\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1, 'The variant of the polyline is not in the second sample'\n\nInput\n1 1\n2 3\n3 2\n\nOutput\n2\n\n\"\"\"\nimport math"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1') == 1\nassert solution('-1 1') == 1\nassert solution('1 3') == 2\nassert solution('-1 3') == 3\nassert solution('1 2') == 3\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '3'\n\n\n\n-----Constraints-----\n0 \u2264 n \u2264 1_000, 0 \u2264 x_i \u2264 10^9, 0 \u2264 y_i \u2264 10^9.\n\n\n-----Time Complexity-----\nRuns to completion if n \u2264 1_000 and computing time of part A takes <= n.\nRuns to completion if n \u2264 1_000 and computing time of part B takes <= n.\nRuns to completion if n \u2264 1_000 and computing time of part C takes <= n.\n\n\n-----Space Complexity-----\nRuns to completion if n < 1_000 and computing time of part A takes <= n.\nRuns to completion if n < 1_000 and computing time of part B takes <= n.\nRuns to completion if n < 1_000 and computing time of part C takes <= n.\nRuns to completion if n < 1_000 and computing time of part D takes <= n.\n\n\n-----Bug Fixes-----\nFix the output.\nFix the input.\nFix the input again.\n\"\"\"\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\", \"Expected 'YES'\"\n\n-----Constraints-----\n1 <= k <= 100\n1 <= stdin.length <= 10^6\n1 <= stdin[i] <= 10^6\n\n-----Time complexity-----\nO(k + k//2) = O(k)\nO(n) = O(n)\nO(n) = O(n) = O(n) = O(n)\nO(n) = O(n) = O(n) = O(n) = O(n)\nO(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n) = O(n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(s) == \"NO\", \"The solution for the Sample must be NO.\"\nassert solution(s) == \"YES\", \"The solution for the Sample must be YES.\"\n\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n0 <= k <= 10^4\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer k\n\nGuaranteed constraints:\n1 <= k <= 100\n\n[output] string\n\nPrint \"YES\" or \"NO\" in the first line if the graph doesn't exist.\n\nIf the graph doesn't exist then the output is \"NO\".\n\n\n[input] string\n\nThe description of the made graph must start with numbers n and m \u2014 the number of vertices and edges respectively. \n\nEach of the next m lines must contain two integers, a and b (1 \u2264 a, b \u2264 n, a \u2260 b), that mean that there is an edge connecting the vertices a and b. A graph shouldn't contain multiple edges and edges that lead from a vertex to itself. A graph must be connected, the degrees of all vertices of the graph must be equal k. At least one edge of the graph must be a bridge. You can print the edges of the graph in any order. You can print the ends of each edge in any order.\n\nThe constructed graph must contain at most 10^6 vertices and 10^6 edges (it is guaranteed that if at least one graph that meets the requirements exists, then there also exists the graph with at most 10^6 vertices and at most 10^6 edges). \n\n[output] string\n\nPrint \"YES\" or \"NO\" in the first line if the graph doesn't exist.\n\nIf the graph doesn't exist then the output is \"NO\".\n\n[Constraints]\n1 <= k <= 100\n\n[input] string\n\nSample Input\n2\n\nSample Output\nNO\n1 2\n2 1\n\nExplanation\nThe graph k-regular consists of k-regular, if the degrees of all its vertices are equal k.\n\nThe description of the made graph must start with numbers n and m \u2014 the number of vertices and edges respectively. \n\nEach of the next m lines must contain two integers, a and b (1 \u2264 a, b \u2264 n, a \u2260 b), that mean that there is an edge connecting the vertices a and b. A graph shouldn't contain multiple edges and edges that lead from a vertex to itself. A graph must be connected, the degrees of all vertices of the graph must be equal k. At least one edge of the graph must be a bridge. You can print the edges of the graph in any order. You can print the ends of each edge in any order.\n\nThe constructed graph must contain at most 10^6 vertices and 10^6 edges (it is guaranteed that if at least one graph that meets the requirements exists, then there also exists the graph with at most 10^6 vertices and at most 10^6 edges). \n\n[Explanation]\n\nThe graph k-regular consists of k-regular, if the degrees of all its vertices are equal k.\nThe description of the made graph must start with numbers n and m \u2014 the number of vertices and edges respectively. \n\nEach of the next m lines must contain two integers, a and b (1 \u2264 a, b \u2264 n, a \u2260 b), that mean that there is an edge connecting the vertices a and b. A graph shouldn't contain multiple edges and edges that lead from a vertex to itself. A graph must be connected, the degrees of all vertices of the graph must be equal k. At least one edge of the graph must be a bridge. You can print the edges of the graph in any order. You can print the ends of each edge in any order.\n\nThe constructed graph must contain at most 10^6 vertices and 10^6 edges (it is guaranteed that if at least one graph that meets the requirements exists, then there also exists the graph with at most 10^6 vertices and at most 10^6 edges). \n\n[Example]\n\nInput\n3\n\nOutput\nYES\n1 2\n2 1\n2 3\n\nExplanation\nThe graph k-regular consists of k-regular, if the degrees of all its vertices are equal k.\nThe description of the made graph must start with numbers n and m \u2014 the number of vertices and edges respectively. \n\nEach of the next m lines must contain two integers, a and b (1 \u2264 a, b \u2264 n, a \u2260 b), that mean that there is an edge connecting the vertices a and b. A graph shouldn't contain multiple edges and edges that lead from a vertex to itself. A graph must be connected, the degrees of all vertices of the graph must be equal k. At least one edge of the graph must be a bridge. You can print the edges of the graph in any order. You can print the ends of each edge in any order.\n\nThe constructed graph must contain at most 10^6 vertices and 10^6 edges (it is guaranteed that if at least one graph that meets the requirements exists, then there also exists the graph with at most 10^6 vertices and at most 10^6 edges). \n\n[Constraints]\n1 <= k <= 100\n\n[input] integer k\n\nGuaranteed constraints:\n1 <= k <= 100\n\n[output] string\n\nPrint \"YES\" or \"NO\" in the first line if the graph doesn't exist.\n\nIf the graph doesn't exist then the output is \"NO\".\n\n[Constraints]\n1 <= k <= 100\n\n[input] string\n\nSample Input\n1\n\nOutput\nNO\n1 2\n2 3\n\n[input] string\n\nSample Output\nNO\n1 2\n2 1\n\nExplanation\nThe graph k-regular consists of k-regular, if the degrees of all its vertices are equal k.\nThe description of the made graph must start with numbers n and m \u2014 the number of vertices and edges respectively. \n\nEach of the next m lines must contain two integers, a and b (1 \u2264 a, b \u2264 n, a \u2260 b), that mean that there is an edge connecting the vertices a and b. A graph shouldn't contain multiple edges and edges that lead from a vertex to itself. A graph must be connected, the degrees of all vertices of the graph must be equal k. At least one edge of the graph must be a bridge. You can print the edges of the graph in any order. You can print the ends of each edge in any order.\n\nThe constructed graph must contain at most 10^6 vertices and 10^6 edges (it is guaranteed that if at least one graph that meets the requirements exists, then there also exists the graph with at most 10^6 vertices and at most 10^6 edges). \n\n[Example]\n\nInput\n3\n\nOutput\nNO\n1 2\n2 3\n2 4\n3 4\n\n[Constraints]\n1 <= k <= 100\n\n[input] integer k\n\nGuaranteed constraints:\n1 <= k <= 100\n\n[output] string\n\nPrint \"YES\" or \"NO\" in the first line if the graph doesn't exist.\n\nIf the graph doesn't exist then the output is \"NO\".\n\n[Constraints]\n1 <= k <= 100\n\n[input] string\n\nSample Input\n1\n\nOutput\nYES\n1 2\n2 3\n2"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"1\"\n) == \"NO\"\nassert solution(\n    \"2\"\n) == \"YES\"\nassert solution(\n    \"3\"\n) == \"NO\"\nassert solution(\n    \"4\"\n) == \"YES\"\nassert solution(\n    \"5\"\n) == \"NO\"\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 1') == 'NO'\nassert solution('5 1') == 'YES'\nassert solution('5 2') == 'YES'\nassert solution('2') == 'YES'\nassert solution('4 3 2') == 'NO'\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'NO', \"Problem\"\n\"\"\""
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"NO\"\nassert solution(\"2\") == \"YES\""
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 3 1\") == \"NO\"\nassert solution(\"2 3 2\") == \"YES\"\nassert solution(\"5 3 3\") == \"YES\"\nassert solution(\"4 5 4\") == \"NO\"\nassert solution(\"0 0 1\") == \"NO\"\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'NO'\nassert solution(stdin) == 'YES'\n\nprint(\"Yes\")\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, \"NO\") == \"NO\"\nassert solution(3, \"NO\") == \"NO\"\nassert solution(2, \"YES\") == \"NO\"\nassert solution(4, \"NO\") == \"NO\"\nassert solution(2, \"YES\") == \"YES\"\n\n\n-----Constraints-----\n0 < k < 100\n\n\n-----Example 1-----\n\nInput\n1\n\nOutput\nYES\n1 2\n2 1\n\n-----Example 2-----\n\nInput\n3\n\nOutput\nNO\n\n2 2\n2 1\n\n\n-----Constraints-----\n1 < k < 100\n\n\n------My Code Starts Here------\nclass graph:\n    def __init__(self):\n        self.vertices = 0\n        self.edges = 0\n\n    def addVertex(self, val):\n        self.vertices += 1\n\n    def addEdge(self, v1, v2):\n        self.edges += 1\n\n    def addEdge(self, v1, v2, weight):\n        self.edges += 1\n        self.edges += weight\n        self.edges += 1\n\ng = graph()\n\nprint(g.vertices)\nprint(g.edges)"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"codeforces\", \"for\", \"1\", \"3\", \"5\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"]) == \"0\"\nassert solution([\"codeforces\", \"for\", \"1\", \"3\", \"5\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"]) == \"0\"\nassert solution([\"aaaaaaaa\", \"ba\", \"aab\", \"aa\", \"ab\", \"aabbb\", \"baa\", \"abab\", \"baaab\", \"aaab\", \"baaabb\", \"baaaab\", \"aabbba\", \"baaabb\", \"ababbb\"]) == \"0\"\nassert solution([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"]) == \"0\"\nassert solution([\"ababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"solution() is not implemented!\"\n\nassert solution(\"codeforces\"), \"solution() is not implemented!\"\n\nassert solution(\"abacabadabacaba\"), \"solution() is not implemented!\"\n\nassert solution(\"baaab\"), \"solution() is not implemented!\"\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == [\"1\", \"0\"]\n\n-----Success-----\nRuntime: 16 ms (44.70%)\nMemory Usage: 14.3 MB (29.01%)\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1 1\") == \"1 1\"\nassert solution(\"1 1 1 1 1 1\") == \"1 1\"\nassert solution(\"3 4 5\") == \"0\"\n\n\n-----Code-----\n\nThe general idea is to use a hashmap to keep track of the occurrences of string $a$ in a substring $s[l_i..r_i]$, using a hashmap.\n\nFor example, the occurrences of $a$ in a substring $s[0..l]$ is {1: {0: 1, 1: 1, 2: 1}}\nThe key is the position of the occurrence, and the value is the number of occurrences of that position in that substring.\n\nThe hashmap for string $s$ is a set of (l, r) pairs for every substring $s[l..r]$, with l <= l_i and r <= r_i.\n\nFor each substring $s_l..s_{l + 1}$, we compute the number of occurrences of $s_l$ in a substring $s[l..r]$.\n\nThe query is the substring $q_i$ (that is, the character in the substring $s_i$ that is located in the query).\n\nGiven the character in the query, we determine the number of occurrences of $q_i$ in a substring $s[l_i..r_i]$ by iterating over the hashmap, and for each occurrence of $q_i$ in that substring, we compute the number of occurrences of $q_i$ in the substring $s[l_i..r_i]$ by calculating the number of occurrences of $q_i$ in a substring $s[l..r]$.\n\nHint: Use a hashmap with a linear time O(1) space.\n\n\"\"\"\n\nclass HashMap:\n    def __init__(self, size: int):\n        self.size = size\n        self.hashmap = [None] * size\n        self.hashmap_size = 0\n\n    def hash(self, ch: str) -> int:\n        return ord(ch) % self.size\n\n    def insert(self, ch: str, pos: int) -> None:\n        hpos = self.hash(ch)\n        if self.hashmap[hpos] is None:\n            self.hashmap[hpos] = (pos, ch)\n            self.hashmap_size += 1\n        else:\n            pos, char = self.hashmap[hpos]\n            if pos == pos:\n                self.hashmap[hpos] = (pos, char)\n                self.hashmap_size += 1\n\n    def search(self, ch: str, pos: int) -> int:\n        hpos = self.hash(ch)\n        if self.hashmap[hpos] is None:\n            return -1\n        pos, char = self.hashmap[hpos]\n        if pos == pos:\n            return char\n        return -1\n\n    def remove(self, ch: str, pos: int) -> int:\n        hpos = self.hash(ch)\n        if self.hashmap[hpos] is None:\n            return -1\n        pos, char = self.hashmap[hpos]\n        if pos == pos:\n            self.hashmap[hpos] = None\n            self.hashmap_size -= 1\n            return char\n        return -1"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= l_i \\le r_i \\le n\n1 <= |s| = n\n1 <= |t| = m\n0 <= l_i, r_i <= n\n\"\"\""
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"solution() should be implemented.\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(sys.stdin.readline()) == '1'\nassert solution(sys.stdin.readline()) == '6'\nassert solution(sys.stdin.readline()) == '1'\nassert solution(sys.stdin.readline()) == '7'"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n            stdin=list(map(int, input().split()))\n            ) == \"3\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 5 2') == 6\nassert solution('4 5 3') == 7\nassert solution('4 5 4') == 2\nassert solution('4 5 5') == 5\nassert solution('4 5 6') == 6\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 7"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 3 2\") == \"3\"\nassert solution(\"4 3 2\") == \"1\"\nassert solution(\"4 5 2\") == \"1\"\nassert solution(\"4 6 2\") == \"1\"\nassert solution(\"4 7 2\") == \"2\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 3 2\") == \"3\"\nassert solution(\"3 3 3\") == \"1\"\nassert solution(\"4 3 2\") == \"4\"\nassert solution(\"4 5 2\") == \"7\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"7\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"BBW\",\"BWBWB\",\"BWBWB\",\"BWWW\",\"BBWW\",\"BBWW\",\"BWWW\",\"BWWW\",\"BWBWB\"]) == \"1\"\nassert solution([\"BWBWB\",\"BWWW\",\"BWWW\",\"BBWW\",\"BBWW\",\"BWWW\",\"BWWW\",\"BWWW\",\"BWBWB\"]) == \"3\"\nassert solution([\"WBBWBW\",\"WBBW\",\"BWBWB\",\"BWBWB\",\"BWBB\",\"BWBWB\",\"BWBB\",\"BWBWB\"]) == \"1\"\nassert solution([\"BBW\",\"BBWW\",\"BBWW\",\"BWWW\",\"BWWW\",\"BWWW\",\"BWWW\",\"BWWW\"]) == \"3\"\nassert solution([\"BWBWB\",\"BWWW\",\"BWWW\",\"BWWW\",\"BWWW\",\"BWWW\",\"BWWW\",\"BWWW\"]) == \"0\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n\n1 <= n <= 2^5\n\nInput Format\n\nThe first line contains an integer, n.\n\nThe second line contains n space-separated strings, representing the crossword.\n\nConstraints\n\n\n\nOutput Format\n\nPrint the integer k, where 0 \u2264 k \u2264 n, and the result of encrypting the input.\n\nSample Input\n\n4\nBBBB\nBBBB\nBWWW\nWWWW\nSample Output\n\n1\n2\n1\n\n\n-----Discussion-----\n\nThe problem is solved by brute force.\n\nBrute force is based on the idea that every row and column will be the same, and even with different elements of the row. The row and column of every number is the same and therefore, there is no need to keep track of every number.\n\nBeware that we need to create a new list and then update the current position of the number to the next highest number.\n\nNote: We use a for loop to generate all the numbers in the row.\n\nAnswer: brute force"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3\\nWBBBB') == '3\\n0\\n'\nassert solution('5\\nWBBBBBWBBBB') == '3\\n1\\n3\\n0\\n'\nassert solution('4\\nBWBWBWBBBWBWBBWWWWWWW') == '3\\n2\\n0\\n'\nassert solution('13\\nWWWWBWWBBWBBWBWBWBWBWB') == '3\\n1 1 1 1\\n3\\n0\\n'\nassert solution('4\\nBWWBBWBWBWBBBWWWWWWWWWWB') == '3\\n2 1 1 3\\n1\\n0\\n'\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 1 1\"\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1 0 1\"\nassert solution(stdin) == \"1 2 1\"\nassert solution(stdin) == \"1 3 0\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"01\"\nassert solution(stdin) == \"23\"\nassert solution(stdin) == \"34\"\nassert solution(stdin) == \"43\"\nassert solution(stdin) == \"45\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"()()()\"\n\nassert solution(input()) == \"(()())()\"\n\nassert solution(input()) == \"(()(()))\"\n\nassert solution(input()) == \"()()\"\n\nassert solution(input()) == \"()\""
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"()\"\nassert solution(stdin) == \"((())\"\nassert solution(stdin) == \"()()\"\nassert solution(stdin) == \"()(())\"\nassert solution(stdin) == \"(\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('()((())') == '(()())'\nassert solution('()(())') == '(()())'\nassert solution('(()((((())))') == '()((())'\nassert solution('(((((((((((((((((((((((((((((()))))))))))))))))))))))))))))))))))))' == '(()())'\nassert solution
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('(())()') == '()'\nassert solution('(()()') == '()()'\nassert solution('(())(())') == '()(())'\nassert solution('(()()()))') == '(()())'\nassert solution('()()()()') == ''\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"()()\"\nassert solution(input) == \"()()\"\nassert solution(input) == \"\"\nassert solution(input) == \"\"\nassert solution(input) == \"\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['(()())(', '(()())']) == '()()()', '\\n'.join(['Wrong answer'])\nassert solution(['(())()()', '()()(())']) == '()()()', '\\n'.join(['Wrong answer'])\nassert solution(['((())(())', '(()()))']) == '(()())', '\\n'.join(['Wrong answer'])\nassert solution(['(()())()', '()())(()']) == '()(),(())', '\\n'.join(['Wrong answer'])\nassert solution(['()()()']) == '(()())', '\\n'.join(['Wrong answer'])\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"(())()()\") == \"()()\"\nassert solution(\"(()(()))\") == \"()(())\"\nassert solution(\"(()())\") == \"()()\"\nassert solution(\"(()(()))\") == \"(()())\"\nassert solution(\"(()())\") == \"()()\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"()\"\nassert solution(stdin) == \")(\"\nassert solution(stdin) == \"(\"\nassert solution(stdin) == \")\"\nassert solution(stdin) == \"()()\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"()()()\"\nassert solution(stdin) == \"(()())\"\nassert solution(stdin) == \"()(())\"\nassert solution(stdin) == \"(()())\"\nassert solution(stdin) == \"(())\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"()\"\n\n\n-----Sample Input-----\n\nInput\n5 4\n((()())(()))\nRRDLD\n\nOutput\n(()(()))\n\nInput\n9 5\n((())(())()))\nRLDLD\n\nOutput\n(()(()))\n\nExplanation\n\nAccording to the problem statement, we can have the correct bracket sequence: (()(()))\n\"\"\""
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\""
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 <= 1 Y <= 3 N\"\n    \"<= -3 N\"\n    \"> = 55 N\"\n) == \"Impossible\"\n\"\"\""
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1<=2<=5\") == \"N\"\nassert solution(\"1<3<=-2\") == \"N\"\nassert solution(\"1<=-2<=3\") == \"N\"\nassert solution(\"1<=-2<2\") == \"N\"\nassert solution(\"1<2<=-2\") == \"N\"\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,1) == 2\nassert solution(3,2) == 12\nassert solution(3,-3) == -1\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['<', '>', '=', '>=', '<=']) == '<=', \"stdin incorrect\"\nassert solution(['<', '>=', '>', '<=', '=', '<=']) == '<=', \"stdin incorrect\"\nassert solution(['<=', '=', '>', '<=', '>=']) == '<=', \"stdin incorrect\"\nassert solution(['<=', '=', '>', '<=', '>=', '<', '=', '<=', '=', '>=']) == '<=', \"stdin incorrect\"\nassert solution(['<=', '=', '>', '<=', '=', '<', '=', '>', '<=', '=', '>', '<', '=', '=', '>=', '<', '=', '>=', '<=', '=', '>', '=', '=', '<=']) == '<=', \"stdin incorrect\"\n\n\"\"\""
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"> 100 Y\") == \"impossible\"\n\n\n----Code----------------"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'Y'\n\nassert solution(stdin) == 'N'\n\"\"\"\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('12>=100') == 'Y'\n\n\n-------------------\nSample Input\n\n6\n> 10 Y\n< 10 N\n<= 10 N\n\nSample Output\n\nN\n\nNote\nThe answer may be an English letter \"Y\" (for \"yes\") or \"N\" (for \"no\").\n\n-----Constraints-----\n\n1 <= stdin.length <= 3000\n-10^9 < stdin[i] < 10^9\n\n-------------------\n'''"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'N'\nassert solution(stdin) == 'Y'"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"< 3 N\") == \"Impossible\"\nassert solution(\"< 10\") == \"Impossible\"\nassert solution(\"< 45\") == \"1\"\nassert solution(\"< 30\") == \"1\"\nassert solution(\"< -30\") == \"0\"\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ABCD\") == 2\n\n\n-----Submissions-----"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"The result of the solution is incorrect.\"\n\nNote that the difference in the number of periods is not significant and this test is intended to test that the result is correct.\n\"\"\""
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == (4)\nassert solution(stdin) == (5)\nassert solution(stdin) == (5)\nassert solution(stdin) == (6)\nassert solution(stdin) == (6)\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(['A','B']) == 2\nassert solution(['A','B']) == 4\nassert solution(['A','B','C','D']) == 5\nassert solution(['A','B','C','D','E','F']) == 6\nassert solution(['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z',' ']) == 10\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 4\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 4') == 4\nassert solution('5 3') == 4\nassert solution('5 3') == 4\nassert solution('2 4') == 2\nassert solution('3 4') == 1\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"ABAABAA\") == \"5\"\nassert solution(\"BBAABB\") == \"5\"\nassert solution(\"AABBBB\") == \"5\"\nassert solution(\"BBBAABAA\") == \"5\"\nassert solution(\"AABBBA\") == \"5\"\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"3\", \"4\"]) == \"5\"\nassert solution([\"2\", \"3\", \"1\"]) == \"1\"\nassert solution([\"2\", \"1\", \"3\"]) == \"3\"\nassert solution([\"2\", \"3\", \"2\"]) == \"1\"\nassert solution([\"2\", \"2\", \"2\"]) == \"0\"\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 4') == 5\nassert solution('5 3') == 5\nassert solution('5 3') == 5\nassert solution('5 3') == 5\nassert solution('3 4') == 4\n\n'''\n\nimport re"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 3') == 4\nassert solution('5 3') == 5\nassert solution('5 3') == 5\nassert solution('5 3') == 5\nassert solution('5 3') == 5"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Na Na Na\"\nassert solution(\"YES\") == \"ADAM BOB BOCPQWER LIMAK\"\nassert solution(\"NO\") == \"Na Na Na\"\nassert solution(\"NO\") == \"Na Na Na\"\nassert solution(\"NO\") == \"Na Na Na\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na Na"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"ADAM\"\nassert solution(stdin) == \"BENBY\"\nassert solution(stdin) == \"ADAMBO\"\nassert solution(stdin) == \"ADABBC\"\nassert solution(stdin) == \"ADAMBLC\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Na Na Na\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 6 7 8') == 'YES'\nassert solution('2 3 1 4 2') == 'NO'\nassert solution('9 2 3 4 8') == 'YES'\nassert solution('1 1') == 'YES'\nassert solution('1 1') == 'YES'\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\nassert solution(stdin) == \"Na Na Na\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 0\nassert solution(stdin) == 3\nassert solution(stdin) == -1\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == -1, 'Not correct solution'\nassert solution(input().replace(' ', '')) == 0, 'Not correct solution'\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 5"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin=f\"{str(input())}\\n\" +\n    str(input())\n) == 0, f\"Found {solution(stdin=f\"{str(input())}\\n\")}\"\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"15 20\") == 0\nassert solution(\"14 8\") == 3\nassert solution(\"6 6\") == -1\nassert solution(\"8\") == 0"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\n\nassert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"10 5\") == \"0\"\nassert solution(\"1 9\") == \"1\"\nassert solution(\"1 8\") == \"3\"\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0\") == -1\nassert solution(\"1\") == -1\nassert solution(\"2\") == 1\nassert solution(\"3\") == -1\nassert solution(\"4\") == 0\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()), \"Not possible\"\n\"\"\""
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == str()\nassert solution(input()) == str()"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 0\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('') == -1\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"1 1 0\") == \"0\"\nassert solution(\"0 0 0\") == \"1\"\nassert solution(\"1 0 0\") == \"1\"\nassert solution(\"0 0 0\") == \"2\"\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0 2 0') == '-1'\nassert solution('0 1 0') == '0'\nassert solution('0 0 1') == '1'\nassert solution('1 0 0') == '0'\nassert solution('1 1 1') == '1'\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 'w'\n\n\nInput\n4\n\nOutput\nwb\nbw\nww\nbw\n\nassert solution(input()) == 'b'\n\n'''\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('bb'), \"No solution found\"\nassert solution('ww'), \"No solution found\"\nassert solution('bbw'), \"No solution found\"\nassert solution('wbbw'), \"No solution found\"\nassert solution('bbwz'), \"No solution found\"\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1, 5) == 'w\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\nw\\"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 'bb'\nassert solution(1) == 'ww'\nassert solution(2) == 'bww'\nassert solution(3) == 'bbw'\nassert solution(4) == 'wwbww'\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == [\n    [\n        [\"bb\", \"ww\", \"ww\"],\n        [\"bb\", \"ww\", \"ww\"],\n        [\"bb\", \"ww\", \"ww\"]\n    ],\n    [\n        [\"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\"],\n        [\"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\"],\n        [\"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\"],\n        [\"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\"],\n        [\"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\", \"w\"]\n    ]\n]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        1\n        ) == \"bb\"\n    assert solution(\n        2\n        ) == \"ww\"\n    assert solution(\n        3\n        ) == \"bb\"\n    assert solution(\n        4\n        ) == \"ww\"\n    assert solution(\n        5\n        ) == \"bb\"\n    "
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == [-1]\nassert solution(2) == [-1, -1, -1]\nassert solution(3) == [1, 1, 1]\nassert solution(4) == [1, 1, 1, 1]\nassert solution(5) == [1, 1, 1, 1, 1]\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '-1'\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == 'bb', 'output error'\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1234) == 'bbw'\nassert solution(1234) == 'bbw'\nassert solution(1234) == 'bbw'\nassert solution(1234) == 'bbw'\nassert solution(1234) == 'bbw'\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\nassert solution(\"6\") == 6\nassert solution(\"12\") == 12\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10\") == 10\nassert solution(\"12\") == 6\nassert solution(\"1\") == 1\nassert solution(\"5\") == 5\nassert solution(\"0\") == 0\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(5) == 6\nassert solution(1) == 1\nassert solution(6) == 1\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4\") == \"6\"\nassert solution(\"2\") == \"3\"\nassert solution(\"4\") == \"6\"\nassert solution(\"4\") == \"6\"\nassert solution(\"2\") == \"3\"\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(10) == 10\nassert solution(12) == 12\nassert solution(999) == 999\nassert solution(4) == 2\nassert solution(6) == 2\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"10\""
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\""
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"10\"\nassert solution(\"12\") == \"12\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(test_case_1) == \"Yes\"\nassert solution(test_case_2) == \"No\"\nassert solution(test_case_3) == \"No\"\nassert solution(test_case_4) == \"Yes\"\nassert solution(test_case_5) == \"No\"\n\n\n-------------------------------\n\nPass\n\n-------------------------------\n\nTest it!"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\"\"\""
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'No'\n\"\"\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"000\", \"001\", \"010\", \"011\", \"100\", \"101\", \"110\", \"111\"]) == \"Yes\"\nassert solution([\"0011\"]) == \"No\"\nassert solution([\"101001010001\", \"010001010001\", \"1010101000101\", \"101001010001\", \"010001010001\"]) == \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"101\",\"001\"]) == \"Yes\"\nassert solution([\"111\",\"1111\"]) == \"No\"\nassert solution([\"111\",\"10011\"]) == \"No\"\nassert solution([\"111\",\"11111\"]) == \"Yes\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(3) == \"No\"\nassert solution(4) == \"Yes\"\n\n\n\"\"\""
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, \"10001\") == \"No\"\nassert solution(5, \"10101\") == \"No\"\nassert solution(7, \"1010010010010011011001001001000001111001011011101110011100110011100100100001101100100101000111011001001010100011001011011010010101100101000111011001001011011010010101100101101101001100011001011011011\") == \"Yes\""
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"100011111\") == \"No\", \"The student gets the right answer.\"\nassert solution(\"101011101\") == \"Yes\", \"The student gets the right answer.\"\nassert solution(\"011110101\") == \"No\", \"The student gets the right answer.\"\n\n\"\"\""
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"1000000011011001001010111110010100001011010\"\n    \"11111010110100010010010100011000000011011\"\n    \"1111011111111110010001000101000000010101\") == \"Yes\"\nassert solution(\n    \"1000000011011001001010111110010100001011010\"\n    \"11111010110100010010010100011000000011011\"\n    \"1111011111111110010001000101000000010101\") == \"No\"\nassert solution(\n    \"1000000011011001001010111110010100001011010\"\n    \"11111010110100010010010100011000000011011\"\n    \"1111011111111110010001000101000000010101\") == \"No\""
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, \"101\") == \"No\"\nassert solution(5, \"10001\") == \"No\"\nassert solution(5, \"1011\") == \"Yes\"\nassert solution(3, \"100011\") == \"No\"\nassert solution(3, \"1010101\") == \"Yes\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"3\"\nassert solution(\"3\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 5 3 6\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1 1\") == \"1\"\nassert solution(\"2 2 2 2 2\") == \"4\"\nassert solution(\"3 3 3 3 3\") == \"3\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4) == \"7\"\nassert solution(1) == \"2\"\nassert solution(5) == \"5\"\nassert solution(3) == \"1\"\nassert solution(6) == \"1\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == '5'\nassert solution(inp) == '5'\nassert solution(inp) == '5'\nassert solution(inp) == '5'\nassert solution(inp) == '5'\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '6'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '1'"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"NO\"\n\n-----Problem-----\n\nThe goal of this problem is to design a team of three participants who are all scores of one participant.\n\nteam_one is A_1, A_2, A_3 and A_4, A_5, A_6.\nteam_two is B_1, B_2, B_3 and B_4, B_5, B_6.\nteam_three is C_1, C_2, C_3 and C_4, C_5, C_6.\n\nteam_score_list = []\nteam_score_list = team_score_list + stdin\nteam_score_list.sort(reverse=True)\nfor i in range(len(team_score_list)):\n    team_score_list[i] = int(team_score_list[i])\n\nTeam_one: score = 0\nTeam_two: score = 0\nTeam_three: score = 0\n\nTeam_one = Team_one + team_score_list[0]\nTeam_two = Team_two + team_score_list[1]\nTeam_three = Team_three + team_score_list[2]\n\nTeam_one = Team_one + team_score_list[4]\nTeam_two = Team_two + team_score_list[5]\nTeam_three = Team_three + team_score_list[6]\n\nTeam_one = Team_one + team_score_list[8]\nTeam_two = Team_two + team_score_list[9]\nTeam_three = Team_three + team_score_list[10]\n\nTeam_one = Team_one + team_score_list[12]\nTeam_two = Team_two + team_score_list[13]\nTeam_three = Team_three + team_score_list[14]\n\nTeam_one = Team_one + team_score_list[16]\nTeam_two = Team_two + team_score_list[17]\nTeam_three = Team_three + team_score_list[18]\n\nTeam_one = Team_one + team_score_list[20]\nTeam_two = Team_two + team_score_list[21]\nTeam_three = Team_three + team_score_list[22]\n\nTeam_one = Team_one + team_score_list[24]\nTeam_two = Team_two + team_score_list[25]\nTeam_three = Team_three + team_score_list[26]\n\nTeam_one = Team_one + team_score_list[28]\nTeam_two = Team_two + team_score_list[29]\nTeam_three = Team_three + team_score_list[30]\n\nTeam_one = Team_one + team_score_list[32]\nTeam_two = Team_two + team_score_list[33]\nTeam_three = Team_three + team_score_list[34]\n\nTeam_one = Team_one + team_score_list[36]\nTeam_two = Team_two + team_score_list[37]\nTeam_three = Team_three + team_score_list[38]\n\nTeam_one = Team_one + team_score_list[40]\nTeam_two = Team_two + team_score_list[41]\nTeam_three = Team_three + team_score_list[42]\n\nTeam_one = Team_one + team_score_list[44]\nTeam_two = Team_two + team_score_list[45]\nTeam_three = Team_three + team_score_list[46]\n\nTeam_one = Team_one + team_score_list[48]\nTeam_two = Team_two + team_score_list[49]\nTeam_three = Team_three + team_score_list[50]\n\nTeam_one = Team_one + team_score_list[52]\nTeam_two = Team_two + team_score_list[53]\nTeam_three = Team_three + team_score_list[54]\n\nTeam_one = Team_one + team_score_list[56]\nTeam_two = Team_two + team_score_list[57]\nTeam_three = Team_three + team_score_list[58]\n\nTeam_one = Team_one + team_score_list[60]\nTeam_two = Team_two + team_score_list[61]\nTeam_three = Team_three + team_score_list[62]\n\nTeam_one = Team_one + team_score_list[64]\nTeam_two = Team_two + team_score_list[65]\nTeam_three = Team_three + team_score_list[66]\n\nTeam_one = Team_one + team_score_list[68]\nTeam_two = Team_two + team_score_list[69]\nTeam_three = Team_three + team_score_list[70]\n\nTeam_one = Team_one + team_score_list[72]\nTeam_two = Team_two + team_score_list[73]\nTeam_three = Team_three + team_score_list[74]\n\nTeam_one = Team_one + team_score_list[76]\nTeam_two = Team_two + team_score_list[77]\nTeam_three = Team_three + team_score_list[78]\n\nTeam_one = Team_one + team_score_list[80]\nTeam_two = Team_two + team_score_list[81]\nTeam_three = Team_three + team_score_list[82]\n\nTeam_one = Team_one + team_score_list[84]\nTeam_two = Team_two + team_score_list[85]\nTeam_three = Team_three + team_score_list[86]\n\nTeam_one = Team_one + team_score_list[88]\nTeam_two = Team_two + team_score_list[89]\nTeam_three = Team_three + team_score_list[90]\n\nTeam_one = Team_one + team_score_list[92]\nTeam_two = Team_two + team_score_list[93]\nTeam_three = Team_three + team_score_list[94]\n\nTeam_one = Team_one + team_score_list[96]\nTeam_two = Team_two + team_score_list[97]\nTeam_three = Team_three + team_score_list[98]\n\nTeam_one = Team_one + team_score_list[100]\nTeam_two = Team_two + team_score_list[101]\nTeam_three = Team_three + team_score_list[102]\n\nTeam_one = Team_one + team_score_list[104]\nTeam_two = Team_two + team_score_list[105]\nTeam_three = Team_three + team_score_list[106]\n\nTeam_one = Team_one + team_score_list[108]\nTeam_two = Team_two + team_score_list[109]\nTeam_three = Team_three + team_score_list[110]\n\nTeam_one = Team_one + team_score_list["
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1 1 1 1 100\") == \"NO\"\nassert solution(\"1 1 1 1 1 111\") == \"YES\"\nassert solution(\"1 1 1 1 1 101\") == \"YES\"\nassert solution(\"1 1 1 1 1 1111\") == \"YES\"\nassert solution(\"1 1 1 1 1 1010\") == \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"0 0 0 0 0 0\") == \"YES\"\nassert solution(\"1 1 1 1 1 1\") == \"NO\"\nassert solution(\"1 1 1 1 1 99\") == \"YES\"\nassert solution(\"2\") == \"NO\""
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"1 1 1 1 1 99\") == \"NO\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1 1 1 1 1 99\"]) == \"YES\"\nassert solution([\"1 1 1 1 1 99\", \"1 2 1 2 1 2\"]) == \"YES\"\nassert solution([\"1 1 1 1 1 99\", \"1 1 2 1 2 1\", \"1 1 4 1 4 2\"]) == \"NO\"\n\nprint(\"The short code solution was not correct.\")\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"2 1 2 2 2\") == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 1 1 1 99\") == \"YES\"\nassert solution(\"1 1 1 1 1 99 1\") == \"NO\"\nassert solution(\"1 1 1 1 1 99 99\") == \"YES\"\nassert solution(\"1 1 1 1 1 99 99 1\") == \"NO\"\n\n\n-----Notes-----\n\nIn the first sample, team score of participant number 1 is very high. Team score of participant number 5 is very high.\n\nIn the second sample, team score of participant number 4 is very high, because it's possible to build two teams with equal scores.\n\"\"\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('yeS') == \"YES\"\n\nassert solution('yeS') == \"NO\"\n\n\"\"\""
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == \"YES\"\nassert solution(5) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"326\"\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 6\nassert solution(stdin) == 3\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"7\"\nassert solution(\"10 2000000000\") == \"5\"\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n\"\"\""
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('', '') == 0\nassert solution('', '100') == 7\nassert solution('', '100 200') == 5\nassert solution('', '100 200 1') == 5\nassert solution('', '100 200 2') == 6\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 10) == 7, \"First example\"\nassert solution(100, 200) == 5, \"Second example\"\nassert solution(1, 2000000000) == 326, \"Third example\"\n\n'''"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 5\n\nassert solution(input) == 5\nassert solution(input) == 5\nassert solution(input) == 5\nassert solution(input) == 5\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 5\nassert solution(stdin) == 326\n\n------Code------"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 10\") == 7\nassert solution(\"100 200\") == 5\nassert solution(\"1 2000000000\") == 326\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == 1, \"1 is not a valid solution\"\nassert solution(0) == 0, \"0 is not a valid solution\"\nassert solution(9) == 0, \"9 is not a valid solution\"\nassert solution(1000000000000000) == 0, \"1000000000000000 is not a valid solution\"\nassert solution(1) == 1, \"1 is not a valid solution\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(123) == 11\nassert solution(123) == 11\nassert solution(123) == 11\nassert solution(123) == 11\nassert solution(123) == 11\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 3 4 5 5\") == \"4\"\nassert solution(\"1 1 2\") == \"1\"\nassert solution(\"0 0 0\") == \"0\"\nassert solution(\"9 11\") == \"4\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(4)\n\nO(4) in the worst case\n\nO(n) in the worst case\n\nO(n) in the best case\n\nO(n) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the best case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO(n^2) in the best case\n\nO(n^2) in the worst case\n\nO"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,1) == 0\nassert solution(2,1) == 0\nassert solution(3,1) == 3\nassert solution(4,1) == 3\nassert solution(5,1) == 1\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n  \"8 0 5 2 3\"\n) == 5\nassert solution(\n  \"5 4 3\"\n) == 3\nassert solution(\n  \"1 0\"\n) == 1\nassert solution(\n  \"1 0\"\n) == 0\nassert solution(\n  \"0 0\"\n) == 0\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1\"), \"1 1\"\nassert solution(\"9 11\"), \"3\"\nassert solution(\"5 0\"), \"1\"\nassert solution(\"3 2\"), \"0\"\nassert solution(\"3 2\"), \"1\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input().lstrip()) == \"1\"\nassert solution(input().rstrip()) == \"2\"\nassert solution(input().lstrip().lstrip()) == \"3\"\nassert solution(input().rstrip().rstrip()) == \"4\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2 3 2 4\") == \"YES\"\nassert solution(\"3 4 1 2\") == \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(10, [10, 4, 7, 6, 5, 3, 1, 2]) == \"NO\"\nassert solution(10, [3, 6, 9, 7, 3, 4, 5]) == \"YES\"\nassert solution(10, [3, 7, 2, 9, 4, 6, 5, 3]) == \"YES\"\nassert solution(10, [7, 3, 1, 2, 5, 4, 6, 9, 10]) == \"YES\"\nassert solution(10, [7, 3, 2, 4, 6, 7]) == \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\nassert solution(stdin) == 'NO'\n\"\"\""
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\nimport math\nimport os\nimport random\nimport re\nimport sys\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 10^9\n1 <= a_i <= 10^9\n\n-----Side Effect-----\n\nDo not modify the input.\n\n------Problem-----\n\ninput:\n3\n1 5 3 2 4\noutput:\nYES\n\ninput:\n3\n1 3 2 2\noutput:\nNO\n\ninput:\n1 3\n4\noutput:\nNO\n\ninput:\n3 4\n2 3 4\noutput:\nYES\n\ninput:\n1 1\n2 3\noutput:\nYES\n\ninput:\n3\n1 3\noutput:\nNO\n\nInput:\n1 5\n4 1\nOutput:\nNO\n\"\"\"\n\nclass Solution:\n    def isNonDegenerateTriangle(self, a: int, b: int, c: int) -> bool:\n        return a**2 + b**2 == c**2"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"3\") == \"NO\"\n\n\nExample 2:\n\nInput\n5\n1 5 3 2 4\n\nOutput\nNO\n\nInput\n3\n3 4 5 3\n\nOutput\nYES\n\"\"\"\n\nclass Solution:\n    def findTriangle(self, a, b, c):\n        if a+b <= c or a+c <= b or b+c <= a:\n            return \"NO\"\n        else:\n            return \"YES\"\n"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nprint(\"Yes\")"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n[1]\nclass Solution:\n    def validTriangle(self, a: int, b: int, c: int) -> bool:\n        x, y, z = a, b, c\n        for i in range(1, min(y, z) + 1):\n            if x == 0:\n                return False\n            elif i == 0:\n                if y == 0:\n                    return False\n                else:\n                    x -= 1\n            elif i == y:\n                if z == 0:\n                    return False\n                else:\n                    x -= 1\n            elif i == z:\n                if y == 0:\n                    return False\n                else:\n                    y -= 1\n            elif y == 0:\n                if x == 0:\n                    return False\n                else:\n                    x -= 1\n            elif z == 0:\n                if x == 0:\n                    return False\n                else:\n                    y -= 1\n        return True\n\nassert solution(stdin) == \"YES\"\n\n\n[2]\nclass Solution:\n    def validTriangle(self, a: int, b: int, c: int) -> bool:\n        x, y, z = a, b, c\n        for i in range(1, min(y, z) + 1):\n            if x == 0:\n                return False\n            elif i == 0:\n                if y == 0:\n                    return False\n                else:\n                    x -= 1\n            elif i == y:\n                if z == 0:\n                    return False\n                else:\n                    x -= 1\n            elif i == z:\n                if y == 0:\n                    return False\n                else:\n                    y -= 1\n            elif y == 0:\n                if x == 0:\n                    return False\n                else:\n                    y -= 1\n            elif z == 0:\n                if x == 0:\n                    return False\n                else:\n                    z -= 1\n            elif x == y:\n                if z == 0:\n                    return False\n                else:\n                    x -= 1\n            elif y == z:\n                if x == 0:\n                    return False\n                else:\n                    z -= 1\n        return True\n\nassert solution(stdin) == \"YES\"\n\n\n[3]\nclass Solution:\n    def validTriangle(self, a: int, b: int, c: int) -> bool:\n        x, y, z = a, b, c\n        for i in range(1, min(y, z) + 1):\n            if x == 0:\n                return False\n            elif i == 0:\n                if y == 0:\n                    return False\n                else:\n                    x -= 1\n            elif i == y:\n                if z == 0:\n                    return False\n                else:\n                    x -= 1\n            elif i == z:\n                if y == 0:\n                    return False\n                else:\n                    y -= 1\n            elif y == 0:\n                if x == 0:\n                    return False\n                else:\n                    y -= 1\n            elif z == 0:\n                if x == 0:\n                    return False\n                else:\n                    z -= 1\n            elif x == y:\n                if y == 0:\n                    return False\n                else:\n                    x -= 1\n            elif y == z:\n                if z == 0:\n                    return False\n                else:\n                    y -= 1\n            elif x == z:\n                if y == 0:\n                    return False\n                else:\n                    z -= 1\n        return True\n\nassert solution(stdin) == \"YES\"\n\n\n[4]\nclass Solution:\n    def validTriangle(self, a: int, b: int, c: int) -> bool:\n        if a + b > c:\n            return False\n        else:\n            if a == c:\n                return True\n            else:\n                return self.validTriangle(a, b, c - a)\n\nassert solution(stdin) == \"YES\"\n\n\n[5]\nclass Solution:\n    def validTriangle(self, a: int, b: int, c: int) -> bool:\n        x, y, z = a, b, c\n        for i in range(1, min(y, z) + 1):\n            if x == 0:\n                return False\n            elif i == 0:\n                if y == 0:\n                    return False\n                else:\n                    x -= 1\n            elif i == y:\n                if z == 0:\n                    return False\n                else:\n                    x -= 1\n            elif i == z:\n                if y == 0:\n                    return False\n                else:\n                    y -= 1\n            elif y == z:\n                if x == 0:\n                    return False\n                else:\n                    y -= 1\n            elif z == x:\n                if x == 0:\n                    return False\n                else:\n                    z -= 1\n            elif x == y:\n                if y == 0:\n                    return False\n                else:\n                    x -= 1\n            elif y == z:\n                if z == 0:\n                    return False\n                else:\n                    y -= 1\n            elif x == z:\n                if y == 0:\n                    return False\n                else:\n                    x -= 1\n            elif x == y:\n                if z == 0:\n                    return False\n                else:\n                    z -= 1\n        return True"
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, [1, 5, 3, 2, 4, 4]) == \"NO\"\nassert solution(3, [1, 5, 3, 2]) == \"YES\"\nassert solution(2, [3, 2, 2, 1, 1, 1]) == \"NO\"\nassert solution(4, [1, 5, 3, 2, 4, 4]) == \"YES\"\n\n\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3\"), \"No\"\nassert solution(\"4 2\"), \"No\"\nassert solution(\"1000 1001\"), \"Yes\"\nassert solution(\"22\"), \"No\"\nassert solution(\"1136\"), \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 1\") == \"Yes\"\nassert solution(\"3 2\") == \"No\"\nassert solution(\"1 1\") == \"No\"\nassert solution(\"4 1\") == \"Yes\"\nassert solution(\"1000 1001\") == \"Yes\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\n\n\"\"\""
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\", \"Incorrect result\"\nassert solution(stdin) == \"No\", \"Incorrect result\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5, 3) == 'Yes'\nassert solution(10, 4) == 'No'\nassert solution(100, 10) == 'Yes'\nassert solution(1000, 1001) == 'Yes'\nassert solution(1000, 1000) == 'No'\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"1000 1001\"\n) == \"Yes\", \"no\"\nassert solution(\n    \"2 1\"\n) == \"No\", \"no\"\nassert solution(\n    \"3 4\"\n) == \"Yes\", \"no\"\nassert solution(\n    \"3 4\"\n) == \"No\", \"no\"\nassert solution(\n    \"3 1\"\n) == \"Yes\", \"no\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution) == \"Yes\"\n\"\"\"\nclass Solution:\n    def can_cut_toys(self, toys: int, k: int) -> bool:\n        count = 0\n        for toy in range(1, 1001):\n            count += toy\n            count += toy * (k - toy)\n            \n        return count >= toys\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 1\") == \"No\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"0 0\") == \"Yes\"\nassert solution(\"0 1\") == \"Yes\"\nassert solution(\"0 0\") == \"No\"\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1,2,3,3,4,5) == 'No', 'incorrect output'\nassert solution(1000,10001,1,2,3,3,4,5) == 'Yes', 'incorrect output'\nassert solution(100,1,1,1,1,1,1,1) == 'Yes', 'incorrect output'\nassert solution(1,1,2,2,2,2,2) == 'Yes', 'incorrect output'\nassert solution(1000,1000,1000,1000,1000,1000,1000,1000) == 'Yes', 'incorrect output'\n"
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(6, 3) == \"Yes\"\nassert solution(4, 2) == \"No\"\nassert solution(1000, 1001) == \"Yes\"\nassert solution(1000, 1000) == \"No\"\nassert solution(0, 0) == \"No\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '20'\n\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 4\") == \"2\"\nassert solution(\"3 8\") == \"5\"\nassert solution(\"2 2\") == \"20\"\nassert solution(\"3 8\") == \"20\"\nassert solution(\"2 2\") == \"5\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 4\\n7 9\\n'\n\"3 8\\n17 15 19\\n\"), '3'\nassert solution('2 3\\n'\n\"1 7\\n17 19\\n\"), '2'\nassert solution('2 2\\n'\n\"99 100\\n\"\n\"1 1\\n\"), '99'\nassert solution('2 2\\n'\n\"2 2\\n\"\n\"2 2\\n\"), '1'\nassert solution('2 3\\n'\n\"2 2\\n\"\n\"2 2\\n\"), '1'\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n\"\"\""
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '20'\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^7\n0 <= a_i <= 100\n\nPROBLEM CONSTRAINTS:\nn = 1, k = 1\n2 <= stdin.length <= 50000\nstdin.length <= 1000\nstdin.length <= 1000\nstdin.length <= 100\nstdin.length <= 100\na_i <= 100\n\n\n-----Time Complexity-----\nTime O(n)\nSpace O(n)\n\n\"\"\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"40\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"25\"\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '20'\n"
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"20\"\nassert solution(\"3 8\") == \"15\"\nassert solution(\"2 2\") == \"5\"\nassert solution(\"3 8\") == \"20\"\nassert solution(\"4 9\") == \"16\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '25'\n\n\"\"\""
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4, [4, 2, 3]) == 5\nassert solution(8, [1, 2, 3, 4, 5, 6, 7, 8]) == 8\nassert solution(8, [1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1\nassert solution(8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\nassert solution(8, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == 1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, [2,4,6]) == 1, \"1\"\nassert solution(8, [1,2,3,4,5,6]) == 24, \"24\"\nassert solution(8, []) == 1, \"1\"\nassert solution(8, [4]) == 5, \"5\"\nassert solution(8, []) == 5, \"5\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9) == 1\nassert solution(1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9) == 5\nassert solution(1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9) == 7\nassert solution(1,2,3,4,5,6,7,8,9,1,2,3,4,5,6,7,8,9) == 25\n\n\n------Test Cases-----\nInput\n4\n1 2 3 4 5 6\n8 7 6 5 4 3 2\nOutput\n1\n\nInput\n5\n1 2 3 4 5 6 7 8\n2 1 2 3 1 4 5 6\n6 7 8 9 2 3 4 5\n7 8 9 1 3 4 5 6\nOutput\n1\n\nInput\n8\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9\n6 7 8 9 2 3 4 5 6 7 8 9\n7 8 9 1 3 4 5 6 7 8 9\nOutput\n1\n\nInput\n9\n1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9\n1 1 2 3 4 5 6 7 8 9 1 2 3 4 5 6 7 8 9"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3\") == \"25\"\nassert solution(\"8 7 6 5 4 3 2 1\") == \"25\"\nassert solution(\"8 7 6 5 4 3 2 1 2\") == \"1\"\nassert solution(\"8 8 9 1 2 3 4 5 6 7 8\") == \"25\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '25'"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '25'\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= m <= n*(n-1)/2\n-2^31 <= a_1, a_2 <= 2^31 - 1\n-2^31 <= b_1, b_2 <= 2^31 - 1\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin, stdout):\n        pass\n\nclass Solution:\n    def solution(self, stdin, stdout):\n        pass"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a=2, b=3, c=4) == 5\nassert solution(a=1, b=1, c=5) == 25\nassert solution(a=3, b=5, c=9) == 1\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"25\"\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == '2'\n\"\"\""
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 222\"\n) == \"2\"\nassert solution(\n    \"4 190\"\n) == \"4\"\nassert solution(\n    \"7 1\"\n) == \"7\"\n\n_________________________________________________________________________________________________________________________\nCodeWars - Python\n1703. \n\nGiven three integers n, k, and the number of minutes Limak needs to get to the party at hour h. Return the maximum possible number of problems that Limak can solve if he can get to the party in exactly h minutes.\n\n\n\nprint(solution(\n    input()\n))\n\nhttps://www.hackerrank.com/challenges/sudoku/problem\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 222\") == 2\nassert solution(\"4 190\") == 2\nassert solution(\"7 1\") == 7\nassert solution(\"7 2\") == 8\nassert solution(\"7 3\") == 4\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 6"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 2\n\n\n-----Constraints-----\n\n1 <= n <= 10^3\n1 <= k <= 240\n\n----Code----\nimport math"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"3 222\") == 2\nassert solution(\"4 190\") == 4\nassert solution(\"7 1\") == 7\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"2\"\nprint(solution(input))\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3) == 2\nassert solution(4) == 2\nassert solution(7) == 2\nassert solution(22) == 7\nassert solution(18) == 7\n"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\n\nassert solution(\"3\") == 1\nassert solution(\"4\") == 3\n\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"5\") == \"1\"\nassert solution(\"1.8\") == \"1\"\nassert solution(\"1.8e+12\") == \"1\"\nassert solution(\"0.00012e+10\") == \"1\"\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(1)\n\n\nassert solution(stdin) == str(1)\n\n\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(10) == 2\nassert solution(100) == 1\nassert solution(10000) == 3\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 2\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2') == '1'\nassert solution('1') == '2'\nassert solution('0') == '0'\nassert solution('9') == '0'\nassert solution('10') == '1'\n"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Known Issues-----\n\nAns:\n\n- No space before $b$, with $[a, \\,\\, 1] = a$, because $[a, \\,\\, 1]$ can be a median.\n\n\n\"\"\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, \"<<><\") == 2\nassert solution(2, \">><<\") == 0\nassert solution(4, \">>>>>\") == 0\n\n\n\nassert solution(0, \"<<><\") == 0\nassert solution(0, \">>>>>\") == 0\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == \"0\", \"Not correct\"\n\n\"\"\""
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"<<<\",\"<->\",\"<->\",\"<->\"]) == 2\nassert solution([\"<\",\"<\",\">\",\">\"]) == 0\nassert solution([\"<<\",\"<<\",\">>\",\">>\"]) == 2\nassert solution([\"<<\",\"<<\",\"<<\",\">>\"]) == 1\nassert solution([\"<<\",\">>>>\",\"<<\",\">>>>\"]) == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10000800015\""
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '10000800015'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 8\n\nInput\n4\n2 4 4 2\n\nOutput\n0\n\"\"\"\n\n\nimport math\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '10000800015'"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4\\n4\\n2\\n2\\n4\\n4\\n2\\n3\\n4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n2\\n2\\n1\\n2\\n1\\n1\\n2\\n3\\n2\\n4\\n4\\n3\\n4\\n2\\n1\\n3\\n3\\n4\\n3\\n3\\n3\\n3\\n2\\n3\\n1\\n4\\n1\\n4\\n4\\n3\\n4\\n2\\n2\\n1\\n1\\n2\\n1\\n3\\n3\\n4\\n3\\n3\\n4\\n1\\n1\\n2\\n3\\n4\\n4\\n3\\n4\\n3\\n4\\n3\\n2\\n3\\n1\\n2\\n2\\n3\\n4\\n4\\n3\\n1\\n3\\n3\\n4\\n4\\n3\\n1\\n2\\n1\\n2\\n1\\n1\\n2\\n1\\n2\\n3\\n3\\n1\\n2\\n3\\n3\\n4\\n3\\n3\\n4\\n4\\n3\\n4\\n4\\n4\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n3\\n1\\n4\\n3\\n3\\n4\\n3\\n1\\n3\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n4\\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('', []) == '0'\nassert solution('1', []) == '0'\nassert solution('1 2', [2]) == '0'\nassert solution('1 1', [2, 3, 4]) == '0'\nassert solution('1 2 3', [4, 5]) == '0'\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4\") == \"8\"\nassert solution(\"4\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"4\") == \"0\"\nassert solution(\"4\") == \"0\"\n"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == '10000800015'"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5') == 0\nassert solution('2') == 1\nassert solution('4') == 2\nassert solution('1') == 2\nassert solution('0') == 0"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"47\"\nassert solution(stdin) == \"136542\"\nassert solution(stdin) == \"44\""
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 47\nassert solution(6) == 5\nassert solution(8) == 8\nassert solution(9) == 9\nassert solution(10) == 10\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcdef\") == 46\nassert solution(\"abcd\") == 10\nassert solution(\"aa\") == 8\nassert solution(\"baa\") == 14\nassert solution(\"gdfggjd\") == 28\n\n\n-----Constraints-----\n1 <= n <= 100\n\nTime Limit: 1 sec\nMemory Limit: 256MB\n\n\n-----Test Cases-----\nTest 1:\nInput:\n10\nab\nde\naj\ngj\n\nOutput:\n4\n\nTest 2:\nInput:\n2\nab\nb\n\nOutput:\n1\n\nTest 3:\nInput:\n2\naa\naa\naa\n\nOutput:\n2\n\nTest 4:\nInput:\n2\nb\nb\n\nOutput:\n2\n\n-----Solution-----\nTime Limit: 1 sec\nMemory Limit: 256 MB\n\nprint(fibonacci(1))\nprint(fibonacci(10))"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\", \"11\"]) == \"136542\"\nassert solution([\"3\", \"4\"]) == \"44\"\nassert solution([\"4\", \"5\"]) == \"22\"\nassert solution([\"2\", \"7\"]) == \"29\"\nassert solution([\"3\", \"8\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '47'\nassert solution(stdin) == '47'\nassert solution(stdin) == '47'\nassert solution(stdin) == '47'\nassert solution(stdin) == '47'\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '47'\nassert solution(input()) == '136542'"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"17\"\nassert solution(stdin) == \"46\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"121\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"47\", \"The answer is incorrect.\"\nassert solution(stdin) == \"47\", \"The answer is incorrect.\"\nassert solution(stdin) == \"47\", \"The answer is incorrect.\"\nassert solution(stdin) == \"47\", \"The answer is incorrect.\"\nassert solution(stdin) == \"47\", \"The answer is incorrect.\"\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '47'\nassert solution(inp) == '136542'\nassert solution(inp) == '44'\nassert solution(inp) == '136542'\nassert solution(inp) == '44'\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aabb\") == \"aabb\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcdee\") == \"abcdee\"\nassert solution(\"abcd12\") == \"abcd12\"\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1 4 3 0 2 6 1 7 3 4 3 5 5 4 0 0 2 0 2 3 0 0 2 4 4 3 2 1 3 0 3 3 3 1 1 3 4 0 0 0 0 0 2 0 0 0 0 2 4 0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4, 5) == 3\nassert solution(3, 5) == 2\nassert solution(1, 5) == 0\n\"\"\"\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 6\") == \"2\"\nassert solution(\"4 5\") == \"3\"\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\n'''\nimport sys\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3\"\n) == 3\n\nassert solution(\n    \"3 2\"\n) == 2\n\nassert solution(\n    \"4 5\"\n) == 3\n\n\nassert solution(\n    \"1 3\"\n) == 3\n\nassert solution(\n    \"2 4\"\n) == 3\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '1'"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"\n    1\n    2\n    \"\"\") == \"3\"\n\"\"\"\n    \"\"\"\")"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 4\") == 2\nassert solution(\"2 5\") == 2\nassert solution(\"4 6\") == 3\nassert solution(\"4 5\") == 3\nassert solution(\"4 4\") == 4\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 5\") == \"3\"\nassert solution(\"1 2\") == \"2\"\nassert solution(\"2 6\") == \"3\"\n\n\nExplanation\nThere are n experienced members and m newbies on the training session.\n\nThe teams are of the three types shown.\n\n\n\"\"\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\n------Reminder-------\n\nThere are two solutions to the problem, one using only the substrings \"AB\" and \"BA\", and the other using only the non-overlapping substrings \"ABC\".\n\nIn both cases, there are some funny rules to apply.\n\nAll the substrings of length 2 are the same.\n\nThe first rule applies to substrings that contain just one character in length, and the second rule applies to the remaining characters of the substring.\n\nIf the substrings \"AB\" and \"BA\" occur in the first rule, then \"A\" is not counted in the solution.\n\nIf the substrings \"ABC\" and \"CDE\" occur in the second rule, then \"C\" is not counted in the solution.\n\nThe second rule applies to substrings that contain one or more characters in length.\n\nSo \"ABAC\" is not counted as a solution.\n\nThe second rule applies to substrings with a length 1.\n\"\"\""
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(ABA) == \"NO\"\nassert solution(BACFAB) == \"YES\"\nassert solution(AXBYBXA) == \"YES\"\nassert solution(NWWW) == \"NO\""
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"ABAB\") == \"YES\"\nassert solution(\"ABAC\") == \"NO\"\nassert solution(\"ABCDEFG\") == \"NO\"\nassert solution(\"ABCDEFGABC\") == \"YES\"\nassert solution(\"ABCDEFGXYZ\") == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\")(()\")) == \"NO\"\nassert solution(\"AB\" + \"ABA\") == \"YES\"\nassert solution(\"ABABAB\" + \"ABABAB\" + \"ABBAB\" + \"ABABA\") == \"YES\"\nassert solution(\"ABBAB\" + \"ABABA\") == \"NO\"\nassert solution(\"ABBABA\" + \"ABBA\") == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('ABCABC') == 'YES'\n\n\n\"\"\"\n\nclass Solution:\n    def contains_twice(self, nums: List[int]) -> bool:\n        count = {}\n        n = len(nums)\n        \n        for i in range(n):\n            if i not in count:\n                count[i] = nums[i]\n            elif count[i] == nums[i]:\n                return True\n            else:\n                return False\n        \n        return False\n            \n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a) == \"YES\"\nassert solution(b) == \"NO\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 2 1 2\") == \"YES\"\nassert solution(\"3 1 1 3\") == \"NO\"\n\"\"\"\n\nclass Queue:\n    def __init__(self, n: int):\n        self.queue = []\n        for _ in range(n):\n            self.queue.append(int(input()))\n\n    def enqueue(self, x: int) -> None:\n        self.queue.append(x)\n\n    def dequeue(self) -> None:\n        if len(self.queue) == 0:\n            return \"NO\"\n        else:\n            self.queue.pop()\n\n    def display(self) -> None:\n        print(self.queue)\n\n    def queue_size(self) -> int:\n        return len(self.queue)"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\",[\"1\",\"2\",\"2\",\"1\",\"2\"]) == \"NO\"\nassert solution(\"5\",[\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"YES\"\nassert solution(\"5\",[\"1\",\"1\",\"1\",\"1\",\"1\",\"3\",\"3\",\"3\"]) == \"YES\"\nassert solution(\"5\",[\"1\",\"1\",\"1\",\"1\",\"1\",\"3\",\"3\",\"3\",\"5\"]) == \"YES\"\nassert solution(\"5\",[\"1\",\"1\",\"1\",\"1\",\"1\",\"3\",\"3\",\"3\",\"5\",\"6\"]) == \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"5 5\") == \"NO\""
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 1 1 1 3 3\") == \"YES\"\nassert solution(\"5 1 1 1 3 3\") == \"NO\"\nassert solution(\"5 1 1 1 3 3\") == \"YES\"\nassert solution(\"5 1 1 1 3 3\") == \"YES\"\nassert solution(\"5 1 1 1 3 3\") == \"NO\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\""
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 2 3 1 4 5 2\") == \"YES\"\nassert solution(\"4 3 2 1 4 5 1\") == \"YES\"\nassert solution(\"5 3 2 1 4 5 3\") == \"NO\""
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1 5\") == \"YES\"\nassert solution(\"5 1 2 3 4\") == \"YES\"\nassert solution(\"3 4 5 2\") == \"NO\"\nassert solution(\"5 6 2 3 1\") == \"YES\"\nassert solution(\"5 5 3 1 2\") == \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"failing\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Yes', 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 3\") == \"Yes\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"2 2\") == \"No\"\nassert solution(\"2 1\") == \"No\"\nassert solution(\"0 1\") == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, 2) == \"No\"\nassert solution(3, 2, 1, 1) == \"No\"\nassert solution(3, 2, 3, 1) == \"Yes\"\nassert solution(5, 5) == \"No\"\nassert solution(3, 1) == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2 2') == 'No'\nassert solution('2 3') == 'No'\nassert solution('1 2') == 'No'\nassert solution('1 2 3') == 'No'\nassert solution('1 0 3') == 'No'\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"0 1\") == \"Yes\"\nassert solution(\"0 0\") == \"No\"\n\nassert solution(\"2 1\") == \"No\"\nassert solution(\"1 0\") == \"No\"\n\nassert solution(\"0 2\") == \"No\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\nassert solution(stdin) == \"No\""
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '16'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == '16'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('0') == '1'\nassert solution('3') == '1'\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"2\"\nassert solution(5) == \"1\"\nassert solution(4) == \"4\"\nassert solution(3) == \"0\"\nassert solution(2) == \"0\"\n\n\n\n---\u0420\u0435\u0448\u0435\u043d\u0438\u0435---\n\u0421\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u0447\u0435\u0442\u044b\u0440\u0435 \u0447\u0438\u0441\u043b\u0430 \u0438\u0437 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0438 \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0445 \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0442\u043e\u043b\u0431\u0438\u043a\u0435. \u041d\u0430 \u0432\u0445\u043e\u0434 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e n (1 \u2264 n \u2264 100), \u0442\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 r.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n80 7 16 4 48\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n0 1 3 5\n\n\n---\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435---\n\u0414\u043b\u044f \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0435\u043b\u044c\u0437\u044f \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u043e\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, r \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 1, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0440\u0430\u0432\u043d\u044b, \u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0434\u0435\u043b\u044f\u0442\u0441\u044f \u043d\u0430 r.\n\n\u0412\u0441\u0451 \u0434\u0435\u043b\u0430\u0435\u0442\u0441\u044f, \u0435\u0441\u043b\u0438 r = 1, \u0438 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a \u043d\u0435\u0447\u0435\u0442\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430, \u0447\u0442\u043e \u043d\u0435 \u0432 \u044d\u0442\u043e\u0439 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.\n\n\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e \u044d\u0442\u0438 \u0438 \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u043f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u0432\u0432\u0435\u0434\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0438\u0441\u0435\u043b, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0430\u044f \ufffd"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5') == '16'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('7') == '21'\nassert solution('80') == '80'\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == \"1\"\nassert solution(80) == \"1\"\nassert solution(16) == \"4\""
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == '2'\nassert solution(8) == '8'\nassert solution(4) == '1'\nassert solution(20) == '6'\nassert solution(1) == '0'\n\n\"\"\""
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['1', '2', '3', '4', '5']) == '1 4'\nassert solution(['1', '2', '4', '5']) == '1 4'\nassert solution(['1', '2', '4', '7']) == '1 1'\nassert solution(['1', '2', '4', '5']) == '1 1'\nassert solution(['1', '2', '5', '10']) == '1 1'\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '16'\nassert solution(stdin) == '16'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 1\") == \"3\"\nassert solution(\"10 10\") == \"8\"\nassert solution(\"10 1\") == \"5\"\nassert solution(\"10 10\") == \"12\"\nassert solution(\"10 1\") == \"10\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10 10 10 10') == '0'\nassert solution('0 0 0 0 0 0') == '0'\nassert solution('2 2 2 2 2') == '2'\nassert solution('1 1 1 1 1 1') == '2'\nassert solution('1 1 2 2 3 4 5 6 7 8 9 10') == '0'"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"22\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3\") == \"1\"\nassert solution(\"3\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3\") == \"2 3\"\nassert solution(\"1 1\") == \"1 3\"\nassert solution(\"9 9\") == \"9 9\"\nassert solution(\"3 4\") == \"3 4\"\nassert solution(\"1 2\") == \"1 2\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 1) == 9\nassert solution(1, 2) == 6\nassert solution(2, 1) == 9\nassert solution(2, 2) == 0\nassert solution(2, 3) == 0\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 6\"\n) == 2\nassert solution(\n    \"10 1\"\n) == 9\nassert solution(\n    \"10 0\"\n) == 9\nassert solution(\n    \"4 2\"\n) == 3\nassert solution(\n    \"10 1\"\n) == 6\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"10\"\n\ninput = \"1 2\"\noutput = 2\n\n\nInput\n1 2\n\nOutput\n2\n\nInput\n1 3\n\nOutput\n3\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 104\n1 <= stdin[i] <= 10^4\n\n'''\n\nimport sys"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\n'''"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 2\") == \"YES\"\nassert solution(\"5 2 3\") == \"NO\"\nassert solution(\"5 2 4\") == \"NO\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n\"\"\"\n\nn = int(stdin)\n\nl, r = map(int, input().split())\ns = []\nfor i in range(l, r + 1):\n    s.append(i)\n\nfor i in s:\n    if i % 2!= 0:\n        print('NO')\n        exit(0)\n\nprint('YES')"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nExplanation\n\nInput:\n\nThe first line contains a single integer $n$ \u2014 the number of segments.\n\nThe $i$-th of the next $n$ lines contain the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contain the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i$-th of the next $n$ lines contains the description of the $i$-th segment \u2014 two integers $l_i$ and $r_i$.\n\nThe $i"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == \"YES\"\nassert solution(1) == \"NO\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"9\", \"12\", \"2\", \"11\", \"3\", \"6\", \"10\", \"5\", \"8\", \"7\", \"4\", \"5\", \"9\", \"6\", \"8\", \"10\", \"7\", \"4\", \"1\", \"3\", \"6\", \"5\", \"10\", \"7\", \"4\", \"1\", \"2\", \"4\", \"2\", \"3\"]) == \"YES\"\nassert solution([\"5\", \"2\", \"8\", \"3\", \"9\", \"1\", \"1\", \"4\", \"2\", \"10\"]) == \"NO\"\nassert solution([\"5\", \"3\", \"1\", \"2\", \"1\", \"2\", \"1\", \"4\", \"3\", \"3\", \"1\", \"2\", \"2\", \"1\", \"1\"]) == \"YES\"\nassert solution([\"1\", \"6\", \"2\", \"4\", \"2\", \"8\", \"5\", \"2\", \"4\", \"8\", \"5\", \"3\", \"5\", \"9\", \"4\", \"10\", \"7\"]) == \"YES\"\nassert solution([\"1\", \"1\", \"2\", \"4\", \"2\", \"4\", \"3\", \"3\", \"1\", \"2\", \"1\", \"2\", \"3\", \"1\", \"4\", \"1\", \"1\", \"2\"]) == \"NO\"\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 5\n\n1 \u2264 l_i < r_i \u2264 2n\n\n0 \u2264 l_i, r_i < n \u2264 1,000\n\n1 \u2264 stdin.length \u2264 10^5\n\n1 \u2264 stdin[i] \u2264 100\n\n-----Time Limit-----\n\nO(n^3)\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n0 < stdin.length <= 50000\n0 < stdin[i] < 10^5\n\n\n-----Time Complexity-----\nO(n^3)\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappush, heappop"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n\"\"\"\nimport sys\nfrom collections import defaultdict\n\nfrom stdnum.exceptions import SolverException\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"The function is not defined!\"\n\nIf you have a function that checks the number of seconds in a given time period (time-segment), and that it is not a DDoS-attack, how many seconds have the function \"is_start_time_ending_period\" that returns True?\n\nInput\n5\n100 200 1 1 1\n\nOutput\n3\n\nInput\n5\n1 2 3 4 5\n\nOutput\n0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['2', '1', '2', '3']) == '3'\nassert solution(['3', '5', '2', '2']) == '0'\nassert solution(['1', '2', '3', '3']) == '0'\nassert solution(['3', '5', '2', '2']) == '1'\nassert solution(['1', '2', '3', '3']) == '1'\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == 1\nassert solution(\"2 3\") == 2\nassert solution(\"2 2\") == 2\nassert solution(\"3 1\") == 3\nassert solution(\"4 1\") == 3\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"99999\") == \"1\"\nassert solution(\"99999\") == \"2\"\nassert solution(\"3\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"1\") == \"0\"\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == 3\nassert solution(\"5\") == 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"100\") == 3\nassert solution(\"2\") == 0\nassert solution(\"101\") == 1\nassert solution(\"0\") == 0\nassert solution(\"1000\") == 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"100 200 1 1 1\") == 3\nassert solution(\"100 200 1 1 1\") == 0\nassert solution(\"100 200 1 1 1\") == 1\nassert solution(\"100 200 1 1 1\") == 0\nassert solution(\"100 200 1 1 1\") == 0\n"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3, \"The function solution was not implemented.\"\n\"\"\""
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"No solution.\"\nprint(solution(stdin))"
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n'''"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"YNNY\") == \"YES\"\nassert solution(\"YNNN\") == \"NO\""
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\", \"expected: YES\"\n\n\"\"\""
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nExample 1:\n\nInput\n5 2\nNYNNY\n\nOutput\nYES\n\nInput\n6 1\n????NN\n\nOutput\nNO\n\n\"\"\"\n\n\nclass Solution:\n    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -> int:\n        a = 0\n        for i in range(len(gas) - 1):\n            a += min(gas[i], cost[i])\n        return a"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\nimport sys\nimport collections\n\nn, k = map(int, input().split())\nd = collections.Counter(list(input()))\ndp = [[0] * (k+1) for _ in range(n+1)]\n\nfor i in range(1, n+1):\n    for j in range(1, k+1):\n        if i == j:\n            dp[i][j] = 1\n        elif d[i] > j:\n            dp[i][j] = dp[i-1][j] + dp[i][j-d[i-1]]\n        else:\n            dp[i][j] = dp[i-1][j]\n\nprint(\"YES\" if dp[n][k] == k else \"NO\")\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 \u2264 stdin.length \u2264 100, 1 \u2264 stdin[i] \u2264 stdin.length, 1 \u2264 stdin[j] \u2264 stdin.length, 0 \u2264 stdin[i]!= \"N\", 0 \u2264 stdin[j]!= \"Y\", 0 \u2264 stdin[i]!= \"?\", 0 \u2264 stdin[j]!= \"?\", stdin.length < 10**6\nstdin contains strings with the digits Y, N, Y, N and Y.\n\nIf k is a valid ordinal number, then the number 1, 2, 3, 4, and 5 can all be written in the standard form YNNN, NNNN, NNNNN and NNNNN.\n\nExamples\nInput\n5 2\nYNNNNN\n\nOutput\nNO\n\n\n\n-----Notes-----\n\nNote that you cannot start with the number 0.\n\"\"\""
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n\n----Constraints----\n\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 stdin.length\nstdin.length <= 100\nstdin consists of only lowercase English letters.\nstdin.length <= 100\n\nConstraints\n2 \u2264 n \u2264 100\nstdin consists of only lowercase English letters.\nstdin.length <= 100\nstdin consists of only lowercase English letters.\n\n\n----Problems----\n\nQuestion 1\n\nTest Case #1: Given n = 5, k = 2.\n\nTest Case #2: Given n = 6, k = 1.\n\nTest Case #3: Given n = 6, k = 3.\n\nTest Case #4: Given n = 5, k = 3.\n\nTest Case #5: Given n = 6, k = 1.\n\nTest Case #6: Given n = 5, k = 2.\n\nTest Case #7: Given n = 5, k = 1.\n\nTest Case #8: Given n = 6, k = 2.\n\nTest Case #9: Given n = 6, k = 1.\n\nTest Case #10: Given n = 6, k = 2.\n\nTest Case #11: Given n = 5, k = 3.\n\nTest Case #12: Given n = 5, k = 2.\n\nTest Case #13: Given n = 6, k = 1.\n\nTest Case #14: Given n = 5, k = 3.\n\nTest Case #15: Given n = 6, k = 2.\n\nTest Case #16: Given n = 5, k = 1.\n\nTest Case #17: Given n = 6, k = 3.\n\nTest Case #18: Given n = 5, k = 2.\n\nTest Case #19: Given n = 6, k = 1.\n\nTest Case #20: Given n = 5, k = 2.\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\", \"solution failed.\"\n\n\n------Code----------\n\nimport sys\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 2\") == \"8\"\nassert solution(\"4 2 1\") == \"8\"\nassert solution(\"1 2 1\") == \"2\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 2\") == \"8\"\nassert solution(\"3 4 2 3 4 6 8\") == \"8\"\nassert solution(\"3 4 2 4\") == \"7\"\nassert solution(\"3 4 2 6\") == \"3\"\nassert solution(\"3 4 2 7\") == \"1\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()), \"You are wrong with input!\"\n\"\"\""
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 2\") == \"8\"\nassert solution(\"4 3 2\") == \"8\"\nassert solution(\"3 2 4\") == \"3\"\nassert solution(\"4 3 2\") == \"3\"\nassert solution(\"3 4 2\") == \"4\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"8\"\n\"\"\"\nn,d=map(int,input().split())\nl=[]\nfor i in range(n):\n    l.append(input().split())\nfor i in range(n):\n    l[i][1] = int(l[i][1])-int(d)\ns=set(l[0][0])\nfor i in range(1,n):\n    s.update(l[i][0])\nfor i in range(n):\n    if (l[i][1]!=0):\n        s.add(l[i][1])\nprint(len(s))"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 4 2\") == \"8\"\nassert solution(\"2 6 8\") == \"8\"\nassert solution(\"4 4 2\") == \"8\"\nassert solution(\"4 6 8\") == \"8\"\nassert solution(\"4 6 8\") == \"8\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 4 2\") == \"8\"\nassert solution(\"4 6 3\") == \"8\"\nassert solution(\"4 7 4\") == \"8\"\nassert solution(\"4 1 5\") == \"6\"\nassert solution(\"3 2\") == \"2\"\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 4 2\") == 8, \"expected 8, got {}\".format(8)\nassert solution(\"5 4 2\") == 8, \"expected 8, got {}\".format(8)\nassert solution(\"4 3 4\") == 5, \"expected 5, got {}\".format(5)\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(['3 4 2', '1 5', '2 6', '3 8', '4 7']) == '8'\nassert solution(['3 4 2', '1 5', '2 6', '3 8', '4 7']) == '8'\nassert solution(['1 3 2', '1 4', '1 5', '2 4', '2 5', '3 6', '3 7', '4 8', '4 9']) == '8'\nassert solution(['1 3 2', '2 4', '1 5', '2 6', '3 8', '4 7']) == '8'\nassert solution(['2 3', '1 4', '1 5', '2 6', '3 8', '4 7']) == '8'\n"
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 6 2\") == \"8\"\nassert solution(\"4 3 2\") == \"4\"\nassert solution(\"4 5 3\") == \"3\"\nassert solution(\"2 4 6\") == \"2\"\nassert solution(\"2 4 5\") == \"1\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2') == 'YES'\nassert solution('1') == 'NO'\nassert solution('3') == 'YES'\nassert solution('4') == 'NO'\nassert solution('5') == 'NO'\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"2\") == \"NO\"\n\"\"\""
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n4\nDGK 2085 2317\nPurbt3 2260 3055\n\nOutput\nNO\nInput\n4\nDGK 2085 2317\nPurbt3 2260 3055\nPinkie_Pie -2500 -2450\n\nOutput\nYES\n\"\"\"\n\nfrom sys import stdin, stdout\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\""
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport collections"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('user1' == 'user1', 'BudAlNik' == '2526' or 'Fluttershy' == '2390' or 'Pinkie_Pie' == '2749'), 'Wrong answer'\nassert solution('user2' == 'user2','subscriber' == '2833' or 'Fluttershy' == '2214' or'subscriber' == '2833' or'subscriber' == '2214') == 'NO', 'Wrong answer'\nassert solution('user3' == 'user3', 'BudAlNik' == '2424' or 'Fluttershy' == '2349' or 'Pinkie_Pie' == '2649' or 'BudAlNik' == '2423' or 'Fluttershy' == '2360' or 'Pinkie_Pie' == '2343' or 'BudAlNik' == '2421' or 'Fluttershy' == '2328' or 'Pinkie_Pie' == '2327' or 'BudAlNik' == '2420' or 'Fluttershy' == '2374' or 'Pinkie_Pie' == '2435' or 'BudAlNik' == '2422' or 'Fluttershy' == '2351' or 'Pinkie_Pie' == '2340' or 'BudAlNik' == '2374' or 'Fluttershy' == '2372' or 'Pinkie_Pie' == '2377' or 'BudAlNik' == '2416' or 'Fluttershy' == '2438' or 'Pinkie_Pie' == '2441' or 'BudAlNik' == '2415' or 'Fluttershy' == '2443' or 'Pinkie_Pie' == '2423' or 'BudAlNik' == '2433' or 'Fluttershy' == '2438' or 'Pinkie_Pie' == '2449' or 'BudAlNik' == '2426' or 'Fluttershy' == '2450' or 'Pinkie_Pie' == '2439' or 'BudAlNik' == '2442' or 'Fluttershy' == '2445' or 'Pinkie_Pie' == '2444' or 'BudAlNik' == '2433' or 'Fluttershy' == '2456' or 'Pinkie_Pie' == '2428' or 'BudAlNik' == '2436' or 'Fluttershy' == '2450' or 'Pinkie_Pie' == '2453' or 'BudAlNik' == '2441' or 'Fluttershy' == '2457' or 'Pinkie_Pie' == '2448' or 'BudAlNik' == '2429' or 'Fluttershy' == '2471' or 'Pinkie_Pie' == '2452' or 'BudAlNik' == '2424' or 'Fluttershy' == '2442' or 'Pinkie_Pie' == '2438' or 'BudAlNik' == '2443' or 'Fluttershy' == '2463' or 'Pinkie_Pie' == '2461' or 'BudAlNik' == '2435' or 'Fluttershy' == '2440' or 'Pinkie_Pie' == '2444' or 'BudAlNik' == '2447' or 'Fluttershy' == '2447' or 'Pinkie_Pie' == '2449' or 'BudAlNik' == '2437' or 'Fluttershy' == '2437' or 'Pinkie_Pie' == '2431' or 'BudAlNik' == '2433' or 'Fluttershy' == '2456' or 'Pinkie_Pie' == '2436' or 'BudAlNik' == '2442' or 'Fluttershy' == '2460' or 'Pinkie_Pie' == '2469' or 'BudAlNik' == '2432' or 'Fluttershy' == '2449' or 'Pinkie_Pie' == '2445' or 'BudAlNik' == '2444' or 'Fluttershy' == '2457' or 'Pinkie_Pie' == '2432' or 'BudAlNik' == '2434' or 'Fluttershy' == '2451' or 'Pinkie_Pie' == '2456' or 'BudAlNik' == '2450' or 'Fluttershy' == '2445' or 'Pinkie_Pie' == '2449' or 'BudAlNik' == '2432' or 'Fluttershy' == '2436' or 'Pinkie_Pie' == '2441' or 'BudAlNik' == '2428' or 'Fluttershy' == '2432' or 'Pinkie_Pie' == '2441' or 'BudAlNik' == '2449' or 'Fluttershy' == '2446' or 'Pinkie_Pie' == '2441' or 'BudAlNik' == '2436' or 'Fluttershy' == '2456' or 'Pinkie_Pie' == '2441' or 'BudAlNik' == '2433' or 'Fluttershy' == '2441' or 'Pinkie_Pie' == '2446' or 'BudAlNik' == '2434' or 'Fluttershy' == '2453' or 'Pinkie_Pie' == '2444' or 'BudAlNik' == '2441' or 'Fluttershy' == '2443' or 'Pinkie_Pie' == '2455' or 'BudAlNik' == '2439' or 'Fluttershy' == '2441' or 'Pinkie_Pie' == '2447' or 'BudAlNik' == '2451' or 'Fluttershy' == '2446' or 'Pinkie_Pie' == '2444' or 'BudAlNik' == '2443' or 'Fluttershy' == '2460' or 'Pinkie_Pie' == '2451' or 'BudAlNik' == '2443' or 'Fluttershy' == '2463' or 'Pinkie_Pie' == '2449' or 'BudAlNik' == '2437' or 'Fluttershy' == '2451' or 'Pinkie_Pie' == '2461' or 'BudAlNik' == '2446' or 'Fluttershy' == '2450' or 'Pinkie_Pie' == '2463' or 'BudAlNik' == '2446' or 'Fluttershy' == '2464' or 'Pinkie_Pie' == '2455' or '"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nprint(solution(\"101_2\"))\n\nprint(solution(\"101_2_1\"))\n\nprint(solution(\"101_2_2\"))\n\nprint(solution(\"101_2_3\"))\n\nprint(solution(\"101_2_4\"))\n\nprint(solution(\"101_2_5\"))\n\nprint(solution(\"101_2_6\"))\n\nprint(solution(\"101_2_7\"))\n\nprint(solution(\"101_2_8\"))\n\nprint(solution(\"101_2_9\"))\n\nprint(solution(\"101_2_10\"))\n\nprint(solution(\"101_2_11\"))\n\nprint(solution(\"101_2_12\"))\n\nprint(solution(\"101_2_13\"))\n\nprint(solution(\"101_2_14\"))\n\nprint(solution(\"101_2_15\"))\n\nprint(solution(\"101_2_16\"))\n\nprint(solution(\"101_2_17\"))\n\nprint(solution(\"101_2_18\"))\n\nprint(solution(\"101_2_19\"))\n\nprint(solution(\"101_2_20\"))\n\nprint(solution(\"101_2_21\"))\n\nprint(solution(\"101_2_22\"))\n\nprint(solution(\"101_2_23\"))\n\nprint(solution(\"101_2_24\"))\n\nprint(solution(\"101_2_25\"))\n\nprint(solution(\"101_2_26\"))\n\nprint(solution(\"101_2_27\"))\n\nprint(solution(\"101_2_28\"))\n\nprint(solution(\"101_2_29\"))\n\nprint(solution(\"101_2_30\"))\n\nprint(solution(\"101_2_31\"))\n\nprint(solution(\"101_2_32\"))\n\nprint(solution(\"101_2_33\"))\n\nprint(solution(\"101_2_34\"))\n\nprint(solution(\"101_2_35\"))\n\nprint(solution(\"101_2_36\"))\n\nprint(solution(\"101_2_37\"))\n\nprint(solution(\"101_2_38\"))\n\nprint(solution(\"101_2_39\"))\n\nprint(solution(\"101_2_40\"))\n\nprint(solution(\"101_2_41\"))\n\nprint(solution(\"101_2_42\"))\n\nprint(solution(\"101_2_43\"))\n\nprint(solution(\"101_2_44\"))\n\nprint(solution(\"101_2_45\"))\n\nprint(solution(\"101_2_46\"))\n\nprint(solution(\"101_2_47\"))\n\nprint(solution(\"101_2_48\"))\n\nprint(solution(\"101_2_49\"))\n\nprint(solution(\"101_2_50\"))\n\nprint(solution(\"101_2_51\"))\n\nprint(solution(\"101_2_52\"))\n\nprint(solution(\"101_2_53\"))\n\nprint(solution(\"101_2_54\"))\n\nprint(solution(\"101_2_55\"))\n\nprint(solution(\"101_2_56\"))\n\nprint(solution(\"101_2_57\"))\n\nprint(solution(\"101_2_58\"))\n\nprint(solution(\"101_2_59\"))\n\nprint(solution(\"101_2_60\"))\n\nprint(solution(\"101_2_61\"))\n\nprint(solution(\"101_2_62\"))\n\nprint(solution(\"101_2_63\"))\n\nprint(solution(\"101_2_64\"))\n\nprint(solution(\"101_2_65\"))\n\nprint(solution(\"101_2_66\"))\n\nprint(solution(\"101_2_67\"))\n\nprint(solution(\"101_2_68\"))\n\nprint(solution(\"101_2_69\"))\n\nprint(solution(\"101_2_70\"))\n\nprint(solution(\"101_2_71\"))\n\nprint(solution(\"101_2_72\"))\n\nprint(solution(\"101_2_73\"))\n\nprint(solution(\"101_2_74\"))\n\nprint(solution(\"101_2_75\"))\n\nprint(solution(\"101_2_76\"))\n\nprint(solution(\"101_2_77\"))\n\nprint(solution(\"101_2_78\"))\n\nprint(solution(\"101_2_79\"))\n\nprint(solution(\"101_2_80\"))\n\nprint(solution(\"101_2_81\"))\n\nprint(solution(\"101_2_82\"))\n\nprint(solution(\"101_2_83\"))\n\nprint(solution(\"101_2_84\"))\n\nprint(solution(\"101_2_85\"))\n\nprint(solution(\"101_2_86\"))\n\nprint(solution(\"101_2_87\"))\n\nprint(solution(\"101_2_88\"))\n\nprint(solution(\"101_2_89\"))\n\nprint(solution(\"101_2_90\"))\n\nprint(solution(\"101_2_91\"))\n\nprint(solution(\"101_2_92\"))\n\nprint(solution(\"101_2_93\"))\n\nprint(solution(\"101_2_94\"))\n\nprint(solution(\"101_2_95\"))\n\nprint(solution(\"101_2_96\"))\n\nprint(solution(\"101_2_97\"))\n\nprint(solution(\"101_2_98\"))\n\nprint(solution(\"101_2_99\"))\n\nprint(solution(\"101_2_100\"))\n\nprint(solution(\"101_3_1\"))\n\nprint(solution(\"101_3_2\"))\n\nprint(solution(\"101_3_3\"))\n\nprint(solution(\"101_3_4\"))\n\nprint(solution(\"101_3_5\"))\n\nprint(solution(\"101_3_6\"))\n\nprint(solution(\"101_3_7\"))\n\nprint(solution(\"101_3_8\"))\n\nprint(solution(\"101_3_9\"))\n\nprint(solution(\"101_3_10\"))\n\nprint(solution(\"101_3_11\"))\n\nprint(solution(\"101_3_12\"))\n\nprint(solution(\"101_3_13\"))\n\nprint(solution(\"101_3_14\"))\n\nprint(solution(\"101_3_15\"))\n\nprint(solution(\"101_3_16\"))\n\nprint(solution(\"101_3_17\"))\n\nprint(solution(\"101_3_18\"))\n\nprint(solution(\"101_3_19\"))\n\nprint(solution(\"101_3_20\"))\n\nprint(solution(\"101_3_21\"))\n\nprint(solution(\"101_3_22\"))\n\nprint(solution(\"101_3_23\"))\n\nprint(solution(\"101_3_24\"))\n\nprint(solution(\"101_3_25\"))\n\nprint(solution(\"101_3"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\n\n-----Constraints-----\n0 < s < 2^100\n\n\n-----Time Limit: 1 seconds--> $40 minutes$\n\n'''"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 3\nassert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\n-----Examples-----\nInput\n1\n\nOutput\n0\n\nInput\n101\n\nOutput\n1\n\nInput\n100\n\nOutput\n1\n\nInput\n10100\n\nOutput\n3\n\nInput\n101010\n\nOutput\n3\n\nInput\n10101000\n\nOutput\n3\n\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\n\n-----IMPORTS-----\n\nstdin = sys.stdin\n\n--------Input parsing--------\n\nThe first line contains a single binary number $s$ ($0 \\leq s < 2^{100}$).\n\n\n--------Output parsing--------\n\nOutput:\nsolution(stdin)\n\"\"\"\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"10110001_2\") == 2\nassert solution(\"10101100_1\") == 2\nassert solution(\"10101100_2\") == 4\nassert solution(\"10101100_3\") == 4\nassert solution(\"10101100_4\") == 4\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 \u2264 s \u2264 10^5\n\nTest cases might contain leading zeroes.\n\n\n\n-----Time Limit: 50ms-----\n\nAccepted\n378\n\nSubmissions\n1952\n\"\"\""
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0 0 1 1 0 0 0 0\") == 2\nassert solution(\"0 0 1 1 0 0 0 0\") == 2\nassert solution(\"0 0 1 1 0 0 0 0\") == 2\nassert solution(\"0 0 1 1 0 0 0 0\") == 3\nassert solution(\"0 0 1 1 0 0 0 0\") == 3\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Example-----\n\nInput\n\n5 5\n0 0 1 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n\nOutput\n\n3\n\n\n-----Example-----\n\nInput\n\n5 5\n0 0 1 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 1\n0 0 0 0 0\n\n\n-----Example-----\n\nInput\n\n10 10\n0 0 0 0 1\n0 0 0 0 0\n\n\nOutput\n\n2\n\n\n-----Example-----\n\nInput\n\n3 3\n0 0 1 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 0\n\n\nOutput\n\n3\n\n\n-----Example-----\n\nInput\n\n6 6\n0 0 0 0 1\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n0 0 0 0 0\n\n\nOutput\n\n2\n\n\n-----Example-----\n\nInput\n\n5 5\n0 0 1 0 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 1 0 0\n0 0 0 1 0\n0 0 0 0 1\n0 0 0 0 0\n\n\nOutput\n\n1\n\n------------------\n\nConstraints:\n\n1 \u2264 n \u2264 100\n1 \u2264 m \u2264 100\n0 \u2264 a[i] \u2264 1\n\nInput\n\n11 10\n0 0 0 0 1\n0 0 0 0 0\n\n\nOutput\n\n2\n\n------------------\n\nConstraints:\n\n1 \u2264 n \u2264 100\n1 \u2264 m \u2264 100\n0 \u2264 a[i] \u2264 1\n\n------------------\n\n\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\nOutput\n3\n\nSample Input\n5 3\n0 0 0 0\n1 1 0\n1 1 0\n0 0 0\n1 1 0\n0 0 0\n0 0 0\n\nSample Output\n3\n\nExplanation\nThe mirroring matrix b of the matrix a is obtained from:\n\n\n\n001\n\n110\n\n110\n\n001\n\nThe mirroring matrix b of the matrix a is obtained from:\n\n\n\n110\n\n001\n\n110\n\n110\n\n001\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\nInput\n4 3\n0 0 1\n1 1 0\n1 1 0\n0 0 1\n\nOutput\n3\n\"\"\"\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^4\n1 \u2264 m \u2264 10^4\n\n\n-----Time complexity-----\n\nO(n + m)\n\n\n-----Space complexity-----\n\nO(n + m)\n\n\n-----Algorithm complexity-----\n\nO(n + m) \u2014 the space complexity of this algorithm is O(1)\n\n-----Brute Force search time complexity-----\n\nO(n + m) \u2014 the search time complexity is O(m)\n\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n'''\nimport sys\n\nimport numpy"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4 3') == '2'\nassert solution('3 3') == '3'\nassert solution('8 1') == '2'\nassert solution('3 1') == '3'\nassert solution('8 1') == '2'\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"001\", 3) == \"3\"\nassert solution(\"110\", 3) == \"3\"\nassert solution(\"001\", 4) == \"4\"\nassert solution(\"110\", 4) == \"4\"\nassert solution(\"001\", 5) == \"5\"\n"
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1 0 1\", \"0 0 1\", \"0 1 0\", \"0 0 1\", \"1 0 1\", \"1 0 1\"]) == \"1 2\"\n\n[1, 0, 0, 0, 0, 0, 0, 1]\n[1, 0, 0, 0, 0, 0, 0, 1]\n[0, 1, 0, 0, 0, 0, 0, 1]\n[0, 0, 1, 0, 0, 0, 0, 1]\n[0, 0, 0, 1, 0, 0, 0, 1]\n[1, 0, 0, 0, 1, 0, 0, 1]\n[1, 0, 0, 0, 0, 1, 0, 1]\n[0, 0, 1, 0, 0, 0, 1, 1]\n[0, 0, 0, 1, 0, 0, 1, 1]\n[0, 0, 0, 0, 1, 0, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[1, 0, 0, 0, 0, 0, 1, 1]\n[0, 0, 1, 0, 0, 0, 1, 1]\n[0, 0, 0, 1, 0, 0, 1, 1]\n[0, 0, 0, 0, 1, 0, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[1, 0, 0, 0, 0, 0, 1, 1]\n\n[1, 0, 0, 0, 0, 0, 1, 1]\n[0, 0, 1, 0, 0, 0, 1, 1]\n[0, 0, 0, 1, 0, 0, 1, 1]\n[0, 0, 0, 0, 1, 0, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[1, 0, 0, 0, 0, 0, 1, 1]\n[1, 0, 0, 0, 0, 0, 1, 1]\n[1, 0, 0, 0, 0, 0, 1, 1]\n[0, 0, 1, 0, 0, 0, 1, 1]\n[0, 0, 0, 1, 0, 0, 1, 1]\n[0, 0, 0, 0, 1, 0, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n\n[0, 1, 0, 0, 0, 0, 1, 1]\n[0, 0, 1, 0, 0, 0, 1, 1]\n[0, 0, 0, 1, 0, 0, 1, 1]\n[0, 0, 0, 0, 1, 0, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n\n[0, 0, 0, 1, 0, 0, 1, 1]\n[0, 0, 0, 0, 1, 0, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n\n[0, 0, 1, 0, 0, 0, 1, 1]\n[0, 0, 0, 1, 0, 0, 1, 1]\n[0, 0, 0, 0, 1, 0, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n\n[0, 0, 0, 1, 0, 0, 1, 1]\n[0, 0, 0, 0, 1, 0, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]\n[0, 0, 0, 0, 0, 1, 1, 1]"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    input().strip().split()\n) == 10"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"4\", \"7\", \"11\", \"8\", \"5\", \"6\", \"1\", \"3\", \"9\"]) == \"3\"\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('2') == '1'\nassert solution('5') == '3'\nassert solution('6') == '1'\nassert solution('7') == '0'\nassert solution('8') == '0'\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 3 3 5 3 2 2 3\"\n) == \"3\"\nassert solution(\n    \"2 5 2 5 2 5 2 3\"\n) == \"1\"\nassert solution(\n    \"4 8 2\"\n) == \"4\"\nassert solution(\n    \"2 3 3 4 5 3 2 2 3\"\n) == \"1\"\nassert solution(\n    \"1 3 4 2 3 2\"\n) == \"0\"\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 2') == 'YES'\nassert solution('2 2') == 'NO'\nassert solution('4 1') == 'NO'\nassert solution('4 1 10 1') == 'YES'\n\"\"\"\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == \"YES\"\n\nInput\n4 1\n4 1\n3 4\n\nOutput\nNO\n\n\n\"\"\"\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nhttps://leetcode.com/problems/rearrange-tables-and-formulas/discuss/173711/Python-solution-1-Space-Complex-Coding-solution\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 2') == 'NO'\nassert solution('2 3') == 'NO'\nassert solution('2 2') == 'NO'\nassert solution('2 1') == 'NO'\nassert solution('2 5') == 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 10') == 'NO'\nassert solution('5 10') == 'YES'\nassert solution('5 10') == 'YES'\nassert solution('5 10') == 'NO'\nassert solution('5 10') == 'YES'\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"YES\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 1' == 'YES') == 'NO'\nassert solution('3 1' == 'NO') == 'YES'\nassert solution('2 3' == 'NO') == 'NO'\nassert solution('2 3' == 'YES') == 'NO'\n\nNotes\n\n0 \u2264 stdin, stdout \u2264 104,147.\n\nFor input file, the stdin is read, and for stdout the process is terminated.\n\nFor output file, the stdout is read, and for stdin the process is terminated.\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5\") == \"YES\"\nassert solution(\"2 2\") == \"NO\"\nassert solution(\"3 3\") == \"NO\"\n\n\n-----Solution-----\n\nfor i in range(int(stdin.strip())):\n    n, k = map(int, stdin.strip().split())\n    print(\"NO\" if n == k else \"YES\")\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"NO\"\n\n-----Constraints-----\n0 < stdin.readlines.count(str) < 100\n\n----Time---\n\nO(N^2 * n)\n\nO(N^2 * n)\n\nO(n)\n\n----Warnings----\n\nI've never tested if the number of variables in this problem is too large or too small.\n\n-----Submissions-----\n\nSubmissions seem to be right.\n\n-----Constraints-----\n1 < stdin.readlines.count(str) < 1000\n\n----Time---\n\nO(N^2 * n)\n\nO(n)\n\nO(n)\n\nO(n)\n\n\"\"\""
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No\"\n\"\"\""
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"Yes\"\n'''\n\nfrom sys import stdin"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\n-----Constraints-----\n\n0 \u2264 k \u2264 100 000\n\n0 \u2264 n \u2264 10 000\n\"\"\"\nfrom math import log\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Yes\"\n\nInput\n1 2\n-1\n?\n\nOutput\nYes\n\nInput\n4 5\n?\n1\n1\n1\n\nOutput\nNo\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100 000, |k| \u2264 10 000\n1 \u2264 x_i \u2264 100 000, |a_i| \u2264 10 000\na_i >= -100 000, |a_i| \u2264 100 000\n-1 \u2264 a_i < a_1, |a_i| < 100 000\n\nExamples\nExample 1:\n\nInput\n3\n?\n?\n?\n?\nOutput\nYes\nExplanation\nThe polynomial Q(x) = 2x^3 - 3x^2 + 5x + 2\n\nExample 2:\n\nInput\n3\n?\n?\n?\n?\nOutput\nNo\nExplanation\nThe polynomial Q(x) = -3x^2 + 3x + 5\n\n\"\"\""
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n\nprint(\"The sample for this problem is correct.\")"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\"\"\"\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n'''\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-----Constraints-----\n\n1 <= n <= 1000, |k| <= 10 000\n0 <= a_{i} < 10 000\n-10 000 < a_{i} <= 10 000\n\nA valid solution has been given.\n\nhttps://www.hackerrank.com/challenges/polynomial-derivative/problem\n"
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"100000\") == \"Yes\"\nassert solution(\"100\") == \"No\"\n\"\"\"\nfrom sys import stdin\n\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop()\n\n    def peek(self):\n        return self.items[-1]\n\n    def empty(self):\n        return self.is_empty()\n\nclass Queue:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        return self.items.pop(0)\n\n    def empty(self):\n        return self.is_empty()\n\nclass Factorial:\n    def __init__(self, n):\n        self.fact = 1\n        for i in range(1, n + 1):\n            self.fact *= i\n\n    def __str__(self):\n        return str(self.fact)\n\n    def __repr__(self):\n        return str(self.fact)"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"14\") == \"6\"\nassert solution(\"20\") == \"15\"\nassert solution(\"8192\") == \"8191\"\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"\"\"\n    7\n    20 7\n    \"\"\"\n) == \"7\"\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1234) == 6\nassert solution(1234) == 15\nassert solution(1234) == 16\nassert solution(1234) == 20"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"15\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 3 * 10^4\n0 <= X_0 <= 10^6\n1 <= X_2 < X_0\n\n----My Approach----\n\ntime: O(n*logn)\nspace: O(n)\n\n\"\"\"\n\nclass Solution:\n    def nextPrime(self, num):\n        l = list(str(num))\n        l.append('2')\n        l.sort()\n        return int(''.join(l[-3:-1])) + 1\n    \n    def nextPrime(self, num):\n        if num == 1:\n            return 2\n        if num % 2 == 0:\n            return 3\n        while num % 4 == 0:\n            num = num // 4\n        if num == 1:\n            return 2\n        if num % 3 == 0:\n            return 5\n        if num % 6 == 0:\n            return 7\n        if num % 10 == 0:\n            return 9\n        if num % 9 == 0:\n            return 11\n        if num % 11 == 0:\n            return 13\n        return self.nextPrime(num + 1)\n        \n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.stdin.readline().strip()) == \"15\"\nassert solution(sys.stdin.readline().strip()) == \"6\"\nassert solution(sys.stdin.readline().strip()) == \"8191\"\nassert solution(sys.stdin.readline().strip()) == \"8192\"\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '15'\nassert solution(stdin) == '8191'"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"8191\"\nassert solution(stdin) == \"8191\"\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 7\nassert solution(stdin) == 15\nassert solution(stdin) == 20\nassert solution(stdin) == 8192\n\n#######\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '15'\nassert solution(stdin) == '8191'\nassert solution(stdin) == '8192'\n"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"15\"\nassert solution(input) == \"8191\""
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n\nSample I/O\n>>> n, p = map(int, stdin.split())\n>>> solution(stdin)\n2\n\n>>> n, p = map(int, input().split())\n>>> solution(stdin)\n2\n\nSample Output\nOutput is: -1\n\"\"\"\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\n)\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"-7\") == 3\nassert solution(\"10\") == -1\nassert solution(\"12\") == -2\nassert solution(\"2\") == 1\nassert solution(\"4\") == -2\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == -1\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\nInput\n24 0\n\nOutput\n2\n\nInput\n24 1\n\nOutput\n3\n\nInput\n24 -1\n\nOutput\n4\n\nInput\n24 -7\n\nOutput\n2\n\nInput\n1 1\n\nOutput\n-1\n\nExplanation\n\nThe minimum number of $p$-binary numbers to represent $24 = (2^4 + 0) + (2^3 + 0)$.\n\nIn the second sample, the minimal number of $p$-binary numbers to represent $24 = (2^4 + 1) + (2^2 + 1) + (2^0 + 1)$.\n\nIn the third sample, the minimal number of $p$-binary numbers to represent $24 = (2^4 - 1) + (2^2 - 1) + (2^2 - 1) + (2^2 - 1)$.\n\nIn the fourth sample, the minimal number of $p$-binary numbers to represent $4 = (2^4 - 7) + (2^1 - 7)$.\n\nIn the fifth sample, no minimal number of $p$-binary numbers to represent $24 = (2^4 - 7) + (2^1 - 7)$.\n\n\"\"\""
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0') == 1, '0'\nassert solution('-1') == -1, '-1'\nassert solution('4') == 2, '4'\nassert solution('24') == 3, '2'\n\n\n-----IMPORTANT-----\n\nWe run the program on a small CPU, so we can accurately identify the minimal number of summands. We run this on a large CPU. If you can't run the program on a large CPU, you can't get a good approximation of the solution. Please only use small CPU, since you'll get memory leaks and it will be extremely difficult to find a solution that does not approach infinity.\n\nIf we run the program on a single CPU, then the solution is very likely to be very large, so it might be a lot slower than the normal approach.\n\nFor the example below, we run the program on a single CPU.\n\n$python3 solution.py\n\n$python3 solution.py\n$python3 solution.py\n$python3 solution.py\n$python3 solution.py\n$python3 solution.py\n\nThis time, the solution is very large, so it might be a lot faster than the normal approach.\n\nIf we run the program on a single CPU, and we have found a solution that is very close to the one in the normal approach, then we can identify that we still have a solution. Otherwise, we probably have a better approach.\n\nWhat if we have a standard way of estimating the number of summands that can be made with $p$-binary numbers (no matter how $p$-binary numbers are in their summands)? How to get that?\n\n$python3 solution.py\n\n$python3 solution.py\n$python3 solution.py\n$python3 solution.py\n$python3 solution.py\n\nIt's possible that we get a solution that is only a single number, but we will find that it can be a multiple of $p$-binary numbers.\n\nWhat is the smallest $p$-binary number that can be formed with $n$ numbers?\n\nHere is a formula for $p$-binary numbers:\n\n$$\np = p \\! \\! 2^n $\n$$\n\nThe $n$-th number is computed as the sum of the $2^(n-1)$ numbers.\n\nFor example, if $n=3$, the sum of the $2^3$ numbers is $14$ (equivalent to $2^2$ + $2^1 + $2^0$).\n\nFor $n=1$, the sum of the $2^0$ numbers is $1$ (equivalent to $2^0$).\n\nFor $n=-3$ (equivalent to $2^-2$), the sum of the $2^-1$ numbers is $1$.\n\nFor $n=1,2,3$, the sum of the $2^0,2,3$ numbers is $0$ (equivalent to $0,2,3$).\n\nHere are some simple examples:\n\n$$\np = 0\n\n$$\np = p \\! \\! 1\n\n$$\np = p \\! \\! 2^3\n$$\n\n$$\np = p \\! \\! 2^2\n$$\n\n$$\np = p \\! \\! 2^0\n$$\n\n$$\np = p \\! \\! 2^-1\n$$\n\n$$\np = p \\! \\! 2^-2\n$$\n\n$$\np = p \\! \\! 2^-3\n$$\n\n$$\np = p \\! \\! 2^-4\n$$\n\n$$\np = p \\! \\! 2^-5\n$$\n\n$$\np = p \\! \\! 2^-6\n$$\n\n$$\np = p \\! \\! 2^-7\n$$\n\n$$\np = p \\! \\! 2^-8\n$$\n\n$$\np = p \\! \\! 2^-9\n$$\n\n$$\np = p \\! \\! 2^-10\n$$\n\n$$\np = p \\! \\! 2^-11\n$$\n\n$$\np = p \\! \\! 2^-12\n$$\n\n$$\np = p \\! \\! 2^-13\n$$\n\n$$\np = p \\! \\! 2^-14\n$$\n\n$$\np = p \\! \\! 2^-15\n$$\n\n$$\np = p \\! \\! 2^-16\n$$\n\n$$\np = p \\! \\! 2^-17\n$$\n\n$$\np = p \\! \\! 2^-18\n$$\n\n$$\np = p \\! \\! 2^-19\n$$\n\n$$\np = p \\! \\! 2^-20\n$$\n\n$$\np = p \\! \\! 2^-21\n$$\n\n$$\np = p \\! \\! 2^-22\n$$\n\n$$\np = p \\! \\! 2^-23\n$$\n\n$$\np = p \\! \\! 2^-24\n$$\n\n$$\np = p \\! \\! 2^-25\n$$\n\n$$\np = p \\! \\! 2^-26\n$$\n\n$$\np = p \\! \\! 2^-27\n$$\n\n$$\np = p \\! \\! 2^-28\n$$\n\n$$\np = p \\! \\! 2^-29\n$$\n\n$$\np = p \\! \\! 2^-30\n$$\n\n$$\np = p \\! \\! 2^-31\n$$\n\n$$\np = p \\! \\! 2^-32\n$$\n\n$$\np = p \\! \\! 2^-33\n$$\n\n$$\np = p \\! \\! 2^-34\n$$\n\n$$\np = p \\! \\! 2^-35\n$$\n\n$$\np = p \\! \\! 2^-36\n$$\n\n$$\np = p \\"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '-1'\n\"\"\""
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 5) == 100\nassert solution(0, 1) == 100\nassert solution(1, 1) == 100\nassert solution(1, 2) == 100\nassert solution(3, 1) == 0\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10028"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '10028'\nassert solution(stdin) == '102'\nassert solution(stdin) == '100'\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10028\n\"\"\"\n\nclass Solution:\n    def minNumber(self, S: str, k: int) -> str:\n        l = len(S)\n        \n        for i in range(l-1):\n            if S[i] == 0 or k < int(S[i]):\n                return ''\n        \n        for i in range(k-1, l):\n            if int(S[i]) > 0:\n                return ''\n            \n        return S[:k-1]\n        \n        \n\"\"\"\nclass Solution:\n    def minNumber(self, S: str, k: int) -> str:\n        i = 0\n        count = 0\n        \n        while i < len(S):\n            if S[i] == 0 or k < int(S[i]):\n                count += 1\n            else:\n                count -= 1\n                \n            if count == 0:\n                return S[:i+1]\n            \n            i += 1\n        \n        return ''\n\"\"\"\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10028\nassert solution(stdin) == 100\nassert solution(stdin) == 100\nassert solution(stdin) == 0\nassert solution(stdin) == 100\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"001\") == 100\nassert solution(\"1010\") == 1001\nassert solution(\"011\") == 10001\nassert solution(\"00111\") == 10011\nassert solution(\"1\") == 1001\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['2', '5', '8', '0', '0']) == '100'\nassert solution(['3', '1', '0']) == '1'\nassert solution(['1', '3', '0', '0']) == '1'\nassert solution(['0', '0', '0', '0', '0']) == '0'\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0101\") == \"0101\"\nassert solution(\"001\") == \"001\"\nassert solution(\"0\") == \"00\"\nassert solution(\"1\") == \"01\"\nassert solution(\"0101010001\") == \"0101010001\"\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\n\nassert solution(stdin) == 100\n\nassert solution(stdin) == 10028\n\nassert solution(stdin) == 100, print(stdin)\n\nassert solution(stdin) == 0, print(stdin)\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10028"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 2 3\") == \"5\"\nassert solution(\"1 2 3 4\") == \"4\"\nassert solution(\"1 4 1 3\") == \"3\"\nassert solution(\"1 3 3 3\") == \"3\"\nassert solution(\"1 1 1 2\") == \"2\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 1 2 3\") == 5\nassert solution(\"1 3 2 3\") == 4\nassert solution(\"2\") == 1\nassert solution(\"1 2\") == 1\nassert solution(\"1 4\") == 1\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 3 2 3') == '5'\nassert solution('1 2 2') == '4'\nassert solution('1 5 5') == '5'\nassert solution('1 2 4') == '3'\nassert solution('2 3 3') == '3'\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 1 2 3\") == \"5\"\nassert solution(\"1 3 2 3\") == \"4\"\nassert solution(\"1 3 2 3\") == \"5\"\nassert solution(\"3\") == \"1 3 2 3\""
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"3\", \"5\"]) == \"4\"\nassert solution([\"1\", \"3\", \"5\"]) == \"3\"\nassert solution([\"1\", \"3\", \"5\"]) == \"4\"\nassert solution([\"1\", \"3\", \"5\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"5\"]) == \"1\"\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2') == '5'\nassert solution('1') == '4'\nassert solution('5') == '5'\nassert solution('2') == '2'\nassert solution('4') == '4'\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 1 2 0 1 2') == '3 1'\nassert solution('1 1 1 -1 -1 2') == '1 1'\nassert solution('-1 -1 -1 -1 2') == '-1 1'\nassert solution('-1 -1 -1 -1 2') == '-1 1'\nassert solution('-1 -1 -1 -1 2') == '-1 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"9 9\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 0 1 2\\n1 1 1 -1 -1 2\\n2 1 0 -1\\n2 2 0\\n0 0 0\\n1 1 1\") == (2,1)\nassert solution(\"5 2 2 0 2 0\\n1 0 0\\n2 2 0\\n0 1 0\\n1 2 0\") == (0,0)\nassert solution(\"5 2 2 0 2 0\") == (0,2)\nassert solution(\"5 2 2 0 2 0\") == (1,1)\nassert solution(\"1 1 1 -1 -1 2\\n2 1 0 -1\\n2 2 0\\n0 0 0\\n1 1 1\") == (1,1)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 1 2 0 1 2\"), \"1 1\"\nassert solution(\"1 1 1 -1 -1 2\"), \"3 1\"\nassert solution(\"\"), \"0 0\"\nassert solution(\"5 1 1 -1 -1 -1 2\"), \"1 1\"\nassert solution(\"-1 1 -1 -1 2\") == \"0 0\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 1 2 0 1 2\") == \"3 1\"\nassert solution(\"1 1 1 -1 -1 2\") == \"1 1\"\nassert solution(\"1 1 1 -1 -1 2 0\") == \"1 1\"\nassert solution(\"1 1 1 -1 -1 2 -1\") == \"1 1\"\nassert solution(\"1 1 1 -1 -1 2 -1 -1\") == \"1 1\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3 1'\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"3 0\"\nassert solution(stdin) == \"3 -1\"\nassert solution(stdin) == \"3 -1\"\nassert solution(stdin) == \"3 -2\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"\"\nprint(stdin)\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3 1'\nassert solution(stdin) == '1 1'\n\n\n------Test Cases-----\n\nInput:\n2 3 5 1 2 0 1 2\nOutput:\n5\n\nInput:\n2 4 1 0 1 1 -1 2 0 1 2\nOutput:\n8\n\nInput:\n2 3 -1 -1 -1 2 -1 2 -1 -1 -1 -1 -1 -1 -1 2 0 1 2 0 1 2\nOutput:\n4\n\nInput:\n1 3 -1 -1 -1 -1 -1 -1 2 -1 2 2 -1 -1 -1 -1 -1 -1 -1 -1\nOutput:\n0\n\"\"\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\n\n\n---Coding Challenge---\n\n---Time---\n\nIn the initial experiment, we found a string of length 26. For example, the string ZS the Coder invented was called 'AaBbCcDeEfFgGgHhIiJjKkLlMmNnOoPqRrSsTtUuVvWwXxYyZyWzZ' which contains all letters in the English alphabet exactly once.\n\nWe now know, because it contains only letters from the English alphabet, which we are trying to solve.\n\nNow, we need to remember, that if ZS has been asked for a letter whose value is a missing character, the value of the missing character is replaced by the upper case letter of the English alphabet.\n\nIn the second sample, we will still have a string of length 26 where there are 26 letters, and ZS will still have a letter whose value is 'a'.\n\nThe second sample will be solved by converting the string to a list and counting the number of missing characters.\n\nIn the third sample, we will need to find all those indexes of the letters 'a', 'e', 'i', 'o', 'u', and 'z' that do not have a missing character. The string will consist of these letters, and we need to find these indexes.\n\nFinally, we want to count the number of times the missing characters occur in the string.\n\nThe second sample, we will count the occurrences of these characters in the string, which is, for example, 'e'.\n\nIn the third sample, we need to find the number of occurrences of these letters in the string, which is, for example, 'o'.\n\nWe will also count the number of occurrences of the letter 'z'.\n\nIn the forth sample, we need to find the number of occurrences of the letter 'a'.\n\nFor example, ZS has been asked for an 'a', we will find 'a' in its index 'a', and we'll count it as a occurrence.\n\nIn the fifth sample, we will also find the number of occurrences of the letter 'z', which is, for example, 'z'.\n\nThe second sample will contain the solution, and the third sample will contain the solution in the answer string.\n\nIn the sixth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', and 'z'.\n\nIn the seventh sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the eighth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the ninth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the tenth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the eleventh sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the nineth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the tenth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the eleventh sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the nineteenth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the twentieth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the twentieth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the second sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the third sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the fifth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the sixth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the seventh sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the eighth sample, we will need to create a copy of the given string, and count the occurrences of the letters 'a', 'e', 'i', 'o', 'u', 'z', and '.'.\n\nIn the ninth sample"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYS'\nassert solution('??????FGHIJKLMNOPQRSTUVWXYZ') == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution('A?BCDEFGHIJKLMNOPQRSTUVWXYZ') == '-1'\n\n-----Time complexity-----\n\n--- O(|s|+|d|) ----> O(d)\n--- O(|s|) ----> O(|s|)\n--- O(|d|) ----> O(|d|)\n\n\"\"\""
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == '-1'\nassert solution('AABCDEFGHIJKLMNOPQRSTUVWXYS') == '-1'\nassert solution('?ABCDEFGHIJKLMNOPQRSTUVWXYS') == '-1'\nassert solution('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == '-1'\nassert solution('WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO') == '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXY?ABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\nassert solution(\"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\") == \"-1\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\") == \"ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1, \"There is no way to replace all the question marks with uppercase letters such that the resulting word is nice\"\n\nassert solution(stdin) == \"-1\", \"There is multiple solutions\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution( \"ABCDEFGHIJKLMNOPQRSTUVWXY\" ) == \"ABCDEFGHIJKLMNOPQRSTUVWXYS\"\nassert solution( \"WELCOMETOCODEFORCESROUNDTHREEHUNDREDANDSEVENTYTWO\" ) == \"-1\"\nassert solution( \"??????????????????????????\" ) == \"-1\"\nassert solution( \"ABCDEFGHIJKLMNOPQRSTUVW?YZ\" ) == \"MNBVCXZLKJHGFDSAQPWOEIRUYT\""
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1 or solution(stdin) == -1 or solution(stdin) == -1"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXY\") == \"-1\"\nassert solution(\"ABCDEFG123456789\") == \"0\"\nassert solution(\"ABCDEFG?123456789\") == \"0\"\nassert solution(\"ABCDEFG123456789\") == \"0\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSTUVWXY\") == \"-1\"\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"1\",\"4\",\"3\",\"1\",\"2\"]) == \"NO\"\nassert solution
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\",\"10\",\"10\",\"10\"]) == \"NO\"\nassert solution([\"4\",\"5\",\"5\",\"4\"]) == \"YES\"\nassert solution([\"3\",\"3\",\"2\",\"1\"]) == \"NO\""
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\""
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().strip()) == \"YES\" or \"NO\"\n\nInput\n5\n100 200 200 100 200 200\n\nOutput\nYES\n\nInput\n5\n100 200 100 100 100 100\n\nOutput\nNO\n\n-----Constraints-----\n\n1 \u2264 n \u2264 104\n1 \u2264 w_1, w_2,..., w_{n} \u2264 100\nw_{i} is in the range [1, 200]\n\nInput\n1\n100 100 100 200 200 200\n\nOutput\nYES\n\nInput\n1\n100 100 100 100 100 100\n\nOutput\nNO\n\n----Examples----\n\nTestcase 1:\nInput\n3\n100 100 100 100 100 100\n\nOutput\nYES\n\nTestcase 2:\nInput\n3\n100 100 100 100 100 100\n\nOutput\nNO\n\n----Examples----\n\nTestcase 3:\nInput\n3\n100 100 100 100 100 100\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    {\n        \"100\": 1,\n        \"200\": 2,\n        \"100\": 2,\n        \"200\": 3\n    }\n) == \"YES\"\n\nassert solution(\n    {\n        \"100\": 100,\n        \"200\": 200,\n        \"100\": 1,\n        \"200\": 2,\n        \"100\": 2,\n        \"200\": 3\n    }\n) == \"YES\"\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5, [120,100,200,50,30]) == \"YES\"\nassert solution(5, [130,10,150,20,90]) == \"NO\"\n\n2\n120 100 100 200\n\nOutput\nNO\n\n3\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        num, weight = [int(i) for i in stdin.split()]\n        result = []\n\n        for i in range(1,num+1):\n            result.append((weight * i)/100)\n\n        return''.join([str(i) for i in result])\n\ntest = Solution()\nprint(test.solution(input()))"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \"YES\"\nassert solution(\"2 2\") == \"NO\""
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 3\"\n    \"001000\"\n    \"000010\"\n    \"01110\"\n    \"01000\"\n    \"000110\"\n    \"000110\"\n    \"000100\"\n    \"001010\"\n    \"001011\"\n    \"110111\"\n    \"110110\"\n    \"110101\"\n    \"110111\"\n    \"000101\"\n    \"000111\"\n) == \"5\"\n\nassert solution(\n    \"4 3\"\n    \"001000\"\n    \"000010\"\n    \"01000\"\n    \"000110\"\n    \"000100\"\n    \"001010\"\n    \"001011\"\n    \"110111\"\n    \"110110\"\n    \"110101\"\n    \"110111\"\n    \"000101\"\n    \"000111\"\n) == \"18\""
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 2\") == \"10\"\nassert solution(\"1 3\") == \"10\"\nassert solution(\"4 4\") == \"10\"\nassert solution(\"2 3\") == \"10\"\nassert solution(\"3 1\") == \"10\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n\"\"\"\n1\n10\n00110\n101010\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n1011011\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"6\"\nassert solution(input) == \"6\"\nassert solution(input) == \"10\"\nassert solution(input) == \"12\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"2 3 4 3 4 4 4 4 5\") == \"22\"\nassert solution(\n    \"3 2 3 2 3 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"18\"\n"
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"10\"\nassert solution(\"3 4\") == \"12\"\nassert solution(\"4 3\") == \"5\"\nassert solution(\"4 3\") == \"9\"\nassert solution(\"4 3\") == \"3\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 3 1 2 10\") == \"3\"\nassert solution(\"7 2 1 1 1 1 1\") == \"2\"\nassert solution(\"7 6 1 3\") == \"2\"\nassert solution(\"7 6 1 3 4 5 6 2 3 6 7 3 2 7 3\") == \"2\"\nassert solution(\"2 3\") == \"2\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5') == '3'\nassert solution('4') == '10'\nassert solution('7') == '2'\nassert solution('1') == '1'\nassert solution('6') == '6'\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1 1 1 1 1\") == \"3\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"1 3\") == \"1\"\nassert solution(\"1 4\") == \"1\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"5\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input().rstrip()) == \"3\"\n\"\"\""
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test) == '3'\nassert solution(test2) == '10'\nassert solution(test3) == '10'\nassert solution(test4) == '10'\nassert solution(test5) == '10'\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5\\n1 2 3 2 10\\n1 3 4 3 3\\n2 4 2 2\\n10 10 10 10\\n10 10 10 10\") == \"3\"\nassert solution(\"5\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\\n10 10 10 10\\n10 10 10 10\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\\n10 10 10 10\\n10 10 10 10\") == \"3\"\nassert solution(\"7\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\\n10 10 10 10\\n10 10 10 10\") == \"3\"\nassert solution(\"5\\n1 1 1 1 1 1 1\\n2 2 2 3 6 7 6\\n10 10 10 10\\n10 10 10 10\") == \"3\"\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == 1\nassert solution('1 3') == 1\nassert solution('1 3 2') == 2\nassert solution('4 3') == 3\nassert solution('1 0') == 2\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 4 -5\") == 3\nassert solution(\"5 1 3\") == 3\nassert solution(\"5 1 3 -1\") == 1\nassert solution(\"5 1 3 7\") == 3\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 2\nassert solution(input()) == 4\nassert solution(input()) == 3\nassert solution(input()) == 0\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"6 2 -5\") == 3\nassert solution(\n    \"5 1 3\") == 4\nassert solution(\n    \"3 2 7\") == 3\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n-100 \u2264 a \u2264 n\n-100 \u2264 b \u2264 100\n0 \u2264 b \u2264 n\n\nSample Input\n\nSTDIN                    Function\n----------                   ----------\n6 2 -5                    solution\n5 1 3                  assert solution\n3 2 7                   solution\nSample Output\n\n3\n\n\n\n-----Constraints-----\n\n0 \u2264 b \u2264 n\n-100 \u2264 a \u2264 n\n0 \u2264 b \u2264 n\n\nSample Input\n\nSTDIN                      Function\n----------                   ----------\n5 1 3                     solution\n3 2 7                     assert solution\nSample Output\n\n4"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('6 2 -5') == 3\nassert solution('5 1 3') == 4\nassert solution('3 2 7') == 3\n\n\n\n-----Constraints-----\n\n0 < n, a, b \u2264 100\n\nn = stdin.length\n\n\n-----Time Limit-----\n\nO(n)\n\nn = stdin.length\n\nInput\n6 2 -5\n\nOutput\n3\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 1000\n\n\n-----Note-----\n\n1. The  number  of  entrance  is  determined by the following formula:\n\nn = stdin.length\n\na = n + stdin.length + 1\n\nb = stdin.length + 1\n\n3 \u2264 a \u2264 b\n\nb \u2265 n\n\ne.g. a = 3, b = 6, n = 3.\n\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Constraints-----\n\n0 \u2264 a, b \u2264 100\n\n0 < stdin.length <= 1000\n\n\n\n-----Example 1-----\n\nInput\n1 3 1\n\nOutput\n0\n\nExample 2\n\nInput\n3 2 2\n\nOutput\n1\n\nExplanation\n\n---1---\n\nIt is impossible to move from b to a.\n\n---1---\n\n3 is the entrance, 1 is the next to entrance, 2 is the next to b.\n\n---1---\n\nThe entrance is the second to last of the last entry.\n\n---1---\n\nThe entrance is the last entry.\n\n---1---\n\nThe next to b is at the first entry.\n\n---1---\n\nThe next to b is the next to b.\n\n---1---\n\nThe next to a is at the last entry.\n\n---1---\n\nThe next to a is the last entry.\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---\n\n---1---"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 1\", \"2\", \"4\"]) == 4\nassert solution([\"4\", \"1\", \"2\"]) == 3\nassert solution([\"1\", \"1\", \"1\"]) == 2\nassert solution([\"1\", \"2\", \"1\"]) == 2\nassert solution([\"3\", \"1\", \"3\"]) == 4\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0 1 3') == 2\nassert solution('1 2 7') == 3\nassert solution('1 1 4') == 4\nassert solution('1 1 6') == 6\nassert solution('0 0 1') == 0\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(9, -5, 2, 3) == 3\nassert solution(6, -5, 2, -4) == 3\nassert solution(6, -5, -2, 2) == 3\nassert solution(6, -5, -2, -2) == 3\nassert solution(9, 5, -2, 4) == 3\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= a <= n\n\n1 <= b <= n\n\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Memory Limit-----\n\nO(1)\n\n\n-----Quick Sort-----\n\nQuick sort is a naive algorithm (korte sort) that iterates through the array of numbers in O(n) time. The primary motivation for it is that it doesn't guarantee that the array is sorted. While the algorithm continues to merge the next array with the current, it has to merge the next array with the next one. If the current array is sorted, it will still return the current array without any further merging.\n\nTime complexity : O(nlog(n))\n\nSpace complexity : O(n)\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n\n------Citations------\n\n[Quick Sort] https://www.geeksforgeeks.org/quick-sort/\n[Bubble sort] https://www.geeksforgeeks.org/algorithm-for-two-pointers-in-sorting/\n[Bubble sort: Heap Sort] https://www.geeksforgeeks.org/heap-sort/\n\n[Test Cases]\nSample Input 1:\n6 2 -5\n\nSample Output 1:\n3\n\nSample Input 2:\n6 1 7\n\nSample Output 2:\n3\n\nSample Input 3:\n4 2 3 1\n\nSample Output 3:\n3\n\nSample Input 4:\n8 5 3 2\n\nSample Output 4:\n3\n\nSample Input 5:\n8 5 3 2 4\n\nSample Output 5:\n3\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\n------Citations------\n\n[Quick Sort] https://www.geeksforgeeks.org/quick-sort/\n[Bubble sort] https://www.geeksforgeeks.org/algorithm-for-two-pointers-in-sorting/\n[Bubble sort: Heap Sort] https://www.geeksforgeeks.org/heap-sort/\n\n\n[Test Cases]\nSample Input 1:\n6 2 -5\n\nSample Output 1:\n3\n\nSample Input 2:\n6 1 7\n\nSample Output 2:\n3\n\nSample Input 3:\n4 2 3 1\n\nSample Output 3:\n3\n\nSample Input 4:\n8 5 3 2\n\nSample Output 4:\n3\n\nSample Input 5:\n8 5 3 2 4\n\nSample Output 5:\n3\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 8 6 4 2 1 4 7 10 2\") == \"3\"\nassert solution(\"5 8 6 4 2 1 4 7 10 2\") == \"2\"\nassert solution(\"5 8 6 4 2 1 4 7 10 2\") == \"2\"\nassert solution(\"5 8 6 4 2 1 4 7 10 2\") == \"3\"\nassert solution(\"5 8 6 4 2 1 4 7 10 2\") == \"3\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\nassert solution(input()) == 5\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 k \u2264 n\n\nsample case:\n\n2\n2\n\nInput:\n\n3\n12\nababab\n\nOutput:\n\n3\n\nInput:\n\n3\n8\naabaa\n\nOutput:\n\n5\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n4\n\n3\naaabaa\n\nOutput:\n\n4\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n4\n\n2\naaaabbb\n\nOutput:\n\n2\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n5\n\n1\naaaaabaa\n\nOutput:\n\n1\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n2\n\n2\na\na\n\nOutput:\n\n2\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n2\n\n1\nbababa\n\nOutput:\n\n1\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n1\n\n12\naab\n\nOutput:\n\n12\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n5\n\n1\naaaabbb\n\nOutput:\n\n3\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n1\n\n1\naaaabbb\n\nOutput:\n\n3\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n4\n\n1\naaaaabab\n\nOutput:\n\n4\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n4\n\n1\naabaaaaa\n\nOutput:\n\n4\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nInput:\n\n1\n\n12\naaaaaa\n\nOutput:\n\n12\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nWhat if the second line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only letters 'a' and 'b'?\n\nWhat if the first line of the input contains only"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin) == 5\n\nassert solution(stdin) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 5\nassert solution(input(\"\")) == 5\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"abba\",\n    \"bbbbaababba\"\n    ) == 5\n\n\nassert solution(\n    \"bbb\",\n    \"bbbbbbbbb\"\n    ) == 4\n\n\nassert solution(\n    \"aaaa\",\n    \"aaa\"\n    ) == 4\n\n\nassert solution(\n    \"aaaaab\",\n    \"aaaa\"\n    ) == 4\n\n\nassert solution(\n    \"aabaaaaa\",\n    \"aabaaaa\"\n    ) == 4\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(solution(stdin)) == 5, \"solution failed\"\n\"\"\""
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5'\n\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '5'\n\n\n\n------Time complexity: O(n) since it uses the stack.\nTime complexity: O(n) as the stack would be used to stack the characters of the string to get the solution.\n\n\"\"\"\n\nimport sys\nimport operator"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1 2\"\nassert solution(\"3\") == \"1 1 2\"\nassert solution(\"4\") == \"1 1 2\"\nassert solution(\"5\") == \"1 2 1\"\nassert solution(\"7\") == \"1 1 2\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 2 4\") == \"0 0 1 2\"\nassert solution(\"2 5 9 9\") == \"2 2 1 3\"\nassert solution(\"3 1 1 1\") == \"1 2\"\nassert solution(\"4 4 4 4\") == \"4 3\"\nassert solution(\"5 6 5 5\") == \"6\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2,2) == 2\nassert solution(4,3) == 0\nassert solution(4,4) == 4\nassert solution(2,2) == 1\nassert solution(3,1) == 1\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"1 2 0\"\nassert solution(inp) == \"1 2 0\"\nassert solution(inp) == \"1 2 0\"\nassert solution(inp) == \"1 2 0\"\nassert solution(inp) == \"1 2 0\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4 2\") == \"1 2 3 4 1\"\nassert solution(\"1 3 4\") == \"1 3 4\"\nassert solution(\"3 2 3 2 1\") == \"1 1\"\nassert solution(\"1 3 2 1 2\") == \"1 2\"\nassert solution(\"1 3 2 2 1\") == \"1 3\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 2 0 0\"\nassert solution(stdin) == \"3 1 1\"\nassert solution(stdin) == \"2 1 0\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"0 1\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 100 50\") == \"1 2\"\nassert solution(\"1 99 50\") == \"1 3 4\"\nassert solution(\"3 5 100 50\") == \"0 1 2\"\nassert solution(\"1 3 5 100 50\") == \"1 1 2\"\nassert solution(\"1 3 5 100 50\") == \"1 1 3 4\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(in_str := \"3 4\") == \"0 1 2 3\"\nassert solution(in_str := \"4 5\") == \"1 2 3\"\nassert solution(in_str := \"5\") == \"1 2 3\"\nassert solution(in_str := \"6 5\") == \"1 2 3\"\nassert solution(in_str := \"7 5\") == \"1 2 3\"\n"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"5\", \"1\"]) == \"1.500000000000\"\nassert solution([\"3\", \"6\", \"1\", \"1\", \"1\"]) == \"2.000000000000\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1.500000000000\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n\n0 <= stdin[i] <= 10^5\n\nBoth the number of contestants that appear on the show must be integers, not strings.\n\nFor example, if the number of contestants in the show is $5$, then there are $5$ contestants on the show.\n\nFor a given $s$ value, the answer must be absolute or relative error of the maximum prize.\n\n\n-----Time Limit-----\n1 minute\n\n-----Memory Limit-----\n256 MB\n\n-----Tutorial-----\nhttps://docs.google.com/presentation/d/1ms-QjBP5fDjOwXpRbfG3_JvIgZS_IpsXb-tM8ZJfRfqRSs8/pub?usp=sharing\n\n\"\"\""
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1.500000000000'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1.25'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10\", \"1\") == \"1.5\"\nassert solution(\"6\", \"1\") == \"2.5\"\nassert solution(\"20\", \"1\") == \"2.5\"\nassert solution(\"30\", \"1\") == \"1.5\"\nassert solution(\"0\", \"1\") == \"2\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(a, b) == '1.500000000000'\nassert solution(a, c) == '1.000000000000'\nassert solution(a, d) == '1.000000000000'\nassert solution(a, e) == '1.000000000000'\nassert solution(a, f) == '1.500000000000'\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1') == '1.500000000000'\n\nassert solution('2') == '1.500000000000'\n\nassert solution('3') == '1.500000000000'\n\nassert solution('4') == '1.500000000000'\n\nassert solution('5') == '1.500000000000'\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1.500000000000\"\nassert solution(stdin) == \"1.00000\"\nassert solution(stdin) == \"1.000000000000\"\nassert solution(stdin) == \"1.00000000\"\nassert solution(stdin) == \"1.000000000\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1.500000000000\"\n\nassert solution(\"a\") == \"1.500000000000\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1.5\"\nassert solution(\"2\") == \"0\"\nassert solution(\"1\") == \"1.000000000000\"\nassert solution(\"2\") == \"0.5\"\nassert solution(\"1\") == \"1.000000000000\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"1.5\"\n\n\n-----Constraints-----\n\n0 < n < 10^5\n\n\n-----Time Limit: 1 sec (py3)\n\nSample Input:\n\n1\n\nSample Output:\n\n1.000000000000\n\n\n-----Bonus-----\n\nSample Input:\n\n2\n\nSample Output:\n\n0.000000000000\n\n\n------Constraints------\n1 <= n <= 10^5\n\n------Time Limit: 1 sec (py3)------\n\n'''"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.5\"\nassert solution(stdin) == \"1.5\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 4\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 2\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == 5\nassert solution(\"9\") == 9\nassert solution(\"2\") == 2\nassert solution(\"3\") == 3\nassert solution(\"4\") == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2 3 5 1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1 2\"\nassert solution(input()) == \"1 2\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(string) == \"1\"\nassert solution(string = string.split()) == \"1\"\nassert solution(string = string.split()) == \"1\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '3 5 1'\nassert solution(input()) == '3 5 1 2'"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, 42) == 10\nassert solution(1, 58) == 0\nassert solution(98765432, 23456789) == 23456789\n\n----------------------\n----------------------\n\nInput\n4\n12\n\nOutput\n0\n\n\nInput\n4\n9\n\nOutput\n9\n\nInput\n1\n9\n\nOutput\n1\n\n\n\n----------------------\n\"\"\"\n\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(4) == 10\nassert solution(18) == 10\nassert solution(987654321) == 23456789\n\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^6\n\n0 <= stdin[i] <= 10^9\n\n\n-----Time Limit-----\ntime limit ( in seconds ) = 32.0 seconds\n\n\n-----Memory Limit-----\nmemory limit (in bytes) = 2^27\n\n\n-----Alternatives-----\n\nAlternatives solutions are the same, but you can compute the answer by recursively solving the problem.\n\n\"\"\""
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"23456789\"\n\nassert solution(input) == \"23456789\"\n\nassert solution(input) == \"23456789\"\n\nassert solution(input) == \"23456789\"\n\nassert solution(input) == \"23456789\"\n\n-----Explanation-----\n\nThe only assumption that matters is that the remainder of division of 42 by 2^1 = 2 is equal to 10.\n\nThe only assumption that matters is that the remainder of division of 42 by 2^2 = 4 is equal to 8.\n\nThe only assumption that matters is that the remainder of division of 42 by 2^3 = 6 is equal to 0.\n\nThe only assumption that matters is that the remainder of division of 42 by 2^4 = 8 is equal to 7.\n\nThe only assumption that matters is that the remainder of division of 42 by 2^5 = 10 is equal to 9.\n\nThe only assumption that matters is that the remainder of division of 42 by 2^6 = 12 is equal to 11.\n\nThe only assumption that matters is that the remainder of division of 42 by 2^7 = 18 is equal to 18.\n\nFor example, if the integer 4 is divided by 2^1 = 2 and 42 is divided by 2^2 = 4, then the answer is 23.\n\n\"\"\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == solution(stdin.replace('0', '2'))\n\nprint(solution(stdin))\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(10)\n\nassert solution(stdin) == str(0)\n\nassert solution(stdin) == str(23456789)\n\n\"\"\""
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"23456789\"\nassert solution(input()) == \"23456789\"\nassert solution(input()) == \"23456789\"\n\n\n\n---------Solution---------\n\n1. We use math.log2 to find the answer\n2. Use a combination of f-string and format functions to format the answer\n3. Use `format` to format the answer\n4. Compare the answer with the correct answer\n5. To get the answer we need to multiply the answer by the number of digits in the answer\n6. We use `%` to get the number of digits\n7. Finally, we use `format` to format the answer\n\nIn the first testcase, log2(2) = 2 log(2), so we need to multiply it by 2 for our answer.\n\nIn the second testcase, log2(3) = 3 log(2) = 2. So we need to multiply it by 3 for our answer.\n\nIn the third testcase, log2(4) = 4 log(2) = 2. So we need to multiply it by 4 for our answer.\n\n\"\"\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input() + \" \") == \"0\"\nassert solution(input() + \" \") == \"0\"\nassert solution(input() + \" \") == \"0\"\nassert solution(input() + \" \") == \"0\"\nassert solution(input() + \" \") == \"0\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(23456789)\n\n-----Sample Input 0-----\n\nSTDIN:\n5\n\nSample Output 0:\n23456789\n\"\"\""
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == solution('2')\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^7,\n1 \u2264 m \u2264 10^7\n\n[execution time limit] 4 seconds (py3)\n\n[input] integer n\n\nGuaranteed constraints:\n2 \u2264 n \u2264 10^8\n\n[input] integer m\n\nGuaranteed constraints:\n1 \u2264 m \u2264 10^7\n\n[output] integer\n\n'''\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, \"weird\") == \"w\"\nassert solution(5, \"word\") == \"w\"\nassert solution(5, \"aaeaa\") == \"aa\"\nassert solution(5, \"aaeaa\") == \"aa\"\nassert solution(5, \"a\") == \"a\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"weird\") == \"werd\"\nassert solution(\"word\") == \"word\"\nassert solution(\"aaeaa\") == \"aaeaa\"\nassert solution(\"aaeaa\") == \"aa\"\nassert solution(\"aaeaa\") == \"a\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"weird\") == \"werd\"\nassert solution(\"word\") == \"word\"\nassert solution(\"aaeaa\") == \"a\"\nassert solution(\"aaeaa\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aaeaa\") == \"a\"\nassert solution(\"aaeaa\") == \"aeaa\"\nassert solution(\"weird\") == \"ew\"\nassert solution(\"weird\") == \"w\"\nassert solution(\"word\") == \"w\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'weird'\nassert solution(stdin) == 'word'\nassert solution(stdin) == 'word'\nassert solution(stdin) == 'word'\nassert solution(stdin) == 'word'\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4, \"weird\") == \"w\"\nassert solution(2, \"word\") == \"w\"\nassert solution(5, \"aaeaa\") == \"a\"\nassert solution(5, \"a\") == \"a\"\nassert solution(5, \"aeaa\") == \"a\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(in_str) == out_str\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'werd'\nassert solution(stdin) == 'word'\nassert solution(stdin) == 'word'\nassert solution(stdin) == 'word'\nassert solution(stdin) == 'word'\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"wer\"\n"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin, 3) == \"wer\"\nassert solution(stdin, 4) == \"w\"\nassert solution(stdin, 5) == \"aaeaa\"\nassert solution(stdin, 6) == \"a\"\nassert solution(stdin, 7) == \"a\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"Fail\"\n\nInput\n6 2 3\n*...*\n\nOutput\n2\n\nInput\n6 2 3\n*...*.\n\nOutput\n4\n\nInput\n11 3 10\n.*....**.*.\n\nOutput\n7\n\nInput\n3 2 3\n***\n\nOutput\n0\n\n\"\"\""
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"8\""
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('*.*.*') == '7'\nassert solution('BBBBB*.*.') == '2'\nassert solution('B*ABAB**.*') == '4'\nassert solution('BBB*A*B*') == '0'\nassert solution('BB*A**B*') == '0'\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '7'\nassert solution(stdin) == '0'\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n1 <= a <= b <= 10^5\n\"\"\"\n\nclass Solution:\n    def largestNumFromSeat(self, seats: str) -> str:\n        d = {'*':'.','.':'*','.':None}\n        \n        for i in d:\n            if i in seats:\n                if d[i] == '.':\n                    return '0'\n                else:\n                    if d[i] == '*':\n                        for j in range(len(seats)):\n                            if seats[j] == i:\n                                return j\n        return '0'"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\""
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), 'There are no students in the railway carriage.'\nassert solution(stdin), 'There are no students in the railway carriage.'\nassert solution(stdin), 'There are no students in the railway carriage.'\nassert solution(stdin), 'There are no students in the railway carriage.'\nassert solution(stdin), 'There are no students in the railway carriage.'\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"4\"\nassert solution(inp) == \"7\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"0\"\n\n\"\"\""
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"10\",\"*\",\"11\",\"3\",\"3\"]) == \"2\"\nassert solution([\"4\",\"***\"]) == \"4\"\nassert solution([\"7\",\"*\",\"7\",\"*\",\"7\"]) == \"7\"\nassert solution([\"6\",\".*.\",\".\"]) == \"0\"\nassert solution([\".\",\".\",\".\"]) == \"0\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\"\n\n\"\"\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 1\") == \"2\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"4 2\") == \"2\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(19) == 1\nassert solution(16) == 'NO'\nassert solution(1) == 'NO'\nassert solution(\"\") == 'NO'\nassert solution(\"\") == 'NO'\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"16\") == 1\nassert solution(\"17\") == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == \"1\"\nassert solution(5) == \"NO\"\nassert solution(8) == \"NO\"\nassert solution(12) == \"NO\"\nassert solution(18) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"19\") == \"1 8\"\nassert solution(\"16\") == \"NO\"\n\n\n-----Reminder-----\n1. Running time: O(N^3) because $H$ is used for each $n$ input and each $x$ input. \n2. Repeated calls to $x$ will only be used $n$ times. \n3. O(1) in the worst case. The average of the input is $O(1)$ in the worst case.\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\",\"16\"]) == \"NO\"\nassert solution([\"16\",\"1\"]) == \"NO\"\nassert solution([\"1\",\"2\"]) == \"NO\"\nassert solution([\"5\",\"6\"]) == \"NO\"\nassert solution([\"3\",\"5\"]) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 8\") == \"1 8\"\nassert solution(\"16\") == \"1 8\"\nassert solution(\"0 0\") == \"NO\"\n\n\n'''\nGiven two positive integers $x, y$ she defines $H(x,y):=x^2+2xy+x+1$.\n\nGiven $x$ and $y$ that are the first and second integers, $x \\in \\{-10^9, 10^9 \\leq x <= 10^9, 1 \\leq x \\leq 10^9 \\}$, find $H(x,y) = r$ and return $x$, if there is no such pair, return \"NO\".\n\nFor example,\n$x = 0$, $y = 0$.\n$x = 10^9$ and $y = 1$.\n$x = 0.1$, $y = 0.1$.\n$x = -10^9$ and $y = -1$.\n$x = 0.1$ and $y = -10^9$.\n\n\n-----Input-----\n\nThe first and only line contains an integer $r$ ($1 \\le r \\le 10^{12}$).\n\n\n-----Output-----\n\nOutput integers $x, y$ such that $H(x,y) = r$ and $x$ is smallest possible, or \"NO\" if no such pair exists.\n\n\n-----Examples-----\nInput\n1\n\nOutput\n0.1\n\n\n'''\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1 1\"\n\nassert solution(stdin) == \"1 2\"\n\nassert solution(stdin) == \"1 2 2\""
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2 2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(s) == '-1'"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2, \"2 3\", 3) == \"-1\"\nassert solution(5, \"10 5\", 10) == \"-1\"\nassert solution(3, \"10 3\", 10) == 0\nassert solution(1, \"1 2\", 1) == 0"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1 2\"\nassert solution(input()) == \"1 2 1\"\nassert solution(input()) == \"1 1\"\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"3\") == 2\nassert solution(\"1\") == -1\nassert solution(\"1 1\") == -1\nassert solution(\"1 2\") == 2\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"-1\"\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\n\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"4\") == \"2 2\"\nassert solution(\"27\") == \"3 9 9\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1 1\"\nassert solution(\"2\") == \"2 2\"\nassert solution(\"4\") == \"4 3\"\nassert solution(\"27\") == \"27 3 9\"\nassert solution(\"31\") == \"31 3 9\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == inp\n\n----Python Code-----\n\nfrom sys import stdin\nfrom itertools import permutations"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == \"1\"\nassert solution(5) == \"1 1\"\nassert solution(27) == \"1 1 1\"\nassert solution(27) == \"2 2 2\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"1\") == \"1 1\"\nassert solution(\"4\") == \"9 9 9\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2222\") == \"2222\"\nassert solution(\"2424\") == \"2424\"\nassert solution(\"2525\") == \"2525\"\nassert solution(\"2626\") == \"2626\"\nassert solution(\"2727\") == \"2727\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 4 7 5 9\") == \"9 1 2\"\nassert solution(\"1 3\") == \"3 1\"\nassert solution(\"1 9 4\") == \"9 4 1\"\nassert solution(\"1 9 4 7\") == \"4 1 1 1 1\"\nassert solution(\"2 6 1 9 4\") == \"6 1 6\"\n"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n0 < stdin.length < 1000\n\n[1, 1, 1, 1] < 10^3\n\n[2, 2] < stdin.length < 1000\n\n[4, 4] < 10^3\n\n-----Time complexity-----\nO(n log n)\n\nO(n)\n\nO(n)\n\n-----Space Complexity-----\nO(1)\n\n\"\"\"\n\nclass Solution:\n    def split(self, s: str) -> List[int]:\n        # for d in range(1, len(s)):\n        #     s = s[:d] + s[d+1:]\n        #     if s.count('0') > 0:\n        #         break\n        \n        l = 0\n        r = 0\n        for i in range(len(s)):\n            if s[i] == '0':\n                l = l + 1\n            else:\n                r = r + 1\n        \n        if l == r:\n            return [1]\n        \n        if l == 0:\n            return [0, r]\n        \n        return [0, l]\n    \n    def splitIntoLess(self, s: str) -> List[int]:\n        n = len(s)\n        if n < 4:\n            return [n, 0, 0, 0]\n        \n        d = []\n        # for i in range(n - 3 + 1):\n        for i in range(n - 2):\n            d.append(s[i: i+3].count('1'))\n        \n        return d\n        \n    def splitIntoAllDifferent(self, s: str) -> List[int]:\n        n = len(s)\n        if n < 4:\n            return [n, 0, 0, 0]\n        \n        d = []\n        # for i in range(n - 3 + 1):\n        for i in range(n - 2):\n            d.append(s[i: i+3].count('1') - s[i+1: i+3].count('1'))\n        \n        return d\n        \n    def splitIntoAllDifferentInBinary(self, s: str) -> List[int]:\n        n = len(s)\n        if n < 4:\n            return [n, 0, 0, 0]\n        \n        d = []\n        \n        # for i in range(n - 3 + 1):\n        for i in range(n - 2):\n            d.append(s[i: i+3].count('1') - (s[i+1: i+3].count('1')))\n        \n        return d\n        \n    def splitIntoAllDifferent(self, s: str) -> List[int]:\n        n = len(s)\n        if n < 4:\n            return [n, 0, 0, 0]\n        \n        d = []\n        \n        # for i in range(n - 3 + 1):\n        for i in range(n - 2):\n            d.append(s[i: i+3].count('1') - (s[i+1: i+3].count('1')))\n        \n        return d\n        \n    def splitIntoAllDifferentInBinary(self, s: str) -> List[int]:\n        n = len(s)\n        if n < 4:\n            return [n, 0, 0, 0]\n        \n        d = []\n        \n        # for i in range(n - 3 + 1):\n        for i in range(n - 2):\n            d.append(s[i: i+3].count('1') - (s[i+1: i+3].count('1')))\n        \n        return d"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"9 7 3 1 5\") == \"9 2\"\nassert solution(\"1 1 1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 1 1 1 1 2\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1 1 1 2\") == \"2\"\nassert solution(\"1 1 1 1 1 1 1 1 1 2\") == \"1\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    inp := stdin.split(),\n    inp := map(int, inp.split())\n    ) == inp[0] + \" \" + inp[1] + \" \" + inp[2]\n    \n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(stdin)) == str(int(stdin.split()[0]))\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, [2,3]) == 2\nassert solution(2, [2,3,4]) == 4\nassert solution(2, [5,2,3,4]) == 2\nassert solution(2, [2,3,4,5,6,7,8,9,0]) == 1\nassert solution(2, [3,1,6,7,8,9]) == 1\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2 2\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3 2\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 1 1\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3\") == \"3 2\"\nassert solution(\"2 3 1\") == \"1 2 1\"\nassert solution(\"2 2 3\") == \"3 1 2\"\nassert solution(\"2 2 1 1\") == \"1 2 1\"\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 1\nassert solution(100) == 4\nassert solution(2) == 1\nassert solution(996) == 4\nassert solution(15000) == 15\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"99813\") == \"986\"\nassert solution(\"3_7\") == \"25\"\nassert solution(\"101_1\") == \"22\"\nassert solution(\"1_2\") == \"3\"\nassert solution(\"1_1\") == \"0\"\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3) == 1\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n\n\n-----Side Effects-----\nYou can assume that Luba has been generated by a generator of its digits.\n\n\n-----Discussion-----\nThe Luba number is a very well-known divisor of the sum of the digits of each number of itself. The sum of all the digits of Luba is a perfect divisor of Luba.\n\nFor example, Luba = 5_0 + 0_0 + 0_0 = 5.\n\nIf it can be divided by 2 and its sum is exactly 1, it's a perfect divisor.\n\nFor example, Luba = 5_0_0 + 0_0_0 = 5.\n\nIf Luba is 2, Luba = 5_0_0 + 0_0_0 = 5.\n\nFor example, Luba = 6_10 = 120_10 = 6.\n\nIf Luba is 3, Luba = 5_0_0_0 = 5.\n\nIf Luba is 6, Luba = 120_10 = 6.\n\nFor example, Luba = 1_10 = 120_10 = 1.\n\nIf Luba is 1, Luba = 1_10 = 120_10 = 1.\n\nLuba is also a prime number.\n\n\n-----IMPORTS-----\nimport math"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(123) == \"2\"\nassert solution(19) == \"4\"\nassert solution(500) == \"10\"\nassert solution(555) == \"120\"\nassert solution(645) == \"36\"\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == (496)\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"11\") == 11\nassert solution(\"1000\") == 1\nassert solution(\"11_11\") == 1\nassert solution(\"1001\") == 1\nassert solution(\"100_1\") == 1\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"496\"\n\"\"\""
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == 1\n\n\n-----Time complexity-----\nThe only change is that we have to use a pair of loop and a counter (1 \u2264 K \u2264 LUB_MAX_SIZE). We are using a loop as a proxy for an integer number.\n\n-----Space complexity-----\nThe space complexity of a loop is O(K). The space complexity of a counter is O(1).\n\n\n-----Algorithm-----\nWe have to solve the problem by testing for a negative number with a loop. To solve this problem we have to use the following algorithm:\n\n(1) For each k in range(1, LUB_MAX_SIZE):\n(2) For each k:\n(3) If k is greater than LUB_MAX_SIZE:\n\n(4) Else:\n(5) k must be divisible by LUB_MAX_SIZE\n(6) If k is less than LUB_MAX_SIZE:\n\n(7) Repeat until k is 0:\n(8) If k is equal to LUB_MAX_SIZE:\n\n(9) Else:\n(10) k must be divisible by LUB_MAX_SIZE\n\nThe above tests will be executed.\n\n\n-----Time complexity-----\n\nHere is the time complexity of each test. We have to use a pair of loop and a counter.\n\n-----Space complexity-----\n\nTime complexity of each test is O(K).\n\nThis method is used to test for a negative number with a loop.\n\n-----Algorithm-----\n\nThere are two cases:\n\n(1) k must be divisible by LUB_MAX_SIZE:\n(2) k is less than LUB_MAX_SIZE:\n(3) k must be divisible by LUB_MAX_SIZE\n(4) If k is less than LUB_MAX_SIZE:\n(5) Else:\n(6) k must be divisible by LUB_MAX_SIZE\n(7) Repeat until k is 0:\n(8) If k is equal to LUB_MAX_SIZE:\n(9) Else:\n(10) k must be divisible by LUB_MAX_SIZE\n\nThe above tests will be executed.\n\n\nTime complexity:\n\nO(K)\n\nSpace complexity:\n\nO(1)\n\nThe above algorithms are only used when k is a non-negative integer.\n\n-----Time complexity-----\n\nHere is the time complexity of each test. We have to use a pair of loop and a counter.\n\n-----Space complexity-----\n\nTime complexity of each test is O(K).\n\nThis method is used to test for a negative number with a loop.\n\n-----Algorithm-----\n\nHere are the main steps of this problem:\n\n(1) For each k in range(1, LUB_MAX_SIZE):\n(2) For each k:\n(3) If k is greater than LUB_MAX_SIZE:\n\n(4) Else:\n(5) k must be divisible by LUB_MAX_SIZE\n(6) If k is less than LUB_MAX_SIZE:\n\n(7) Repeat until k is 0:\n(8) If k is equal to LUB_MAX_SIZE:\n\n(9) Else:\n(10) k must be divisible by LUB_MAX_SIZE\n\nThe above tests will be executed.\n\nTime complexity:\n\nO(K)\n\nSpace complexity:\n\nO(1)\n\nThe above algorithms are only used when k is a non-negative integer.\n\n\n-----Time complexity-----\n\nHere is the time complexity of each test. We have to use a pair of loop and a counter.\n\n-----Space complexity-----\n\nTime complexity of each test is O(K).\n\nThis method is used to test for a negative number with a loop.\n\n-----Algorithm-----\n\nHere are the main steps of this problem:\n\n(1) For each k in range(1, LUB_MAX_SIZE):\n(2) For each k:\n(3) If k is greater than LUB_MAX_SIZE:\n\n(4) Else:\n(5) k must be divisible by LUB_MAX_SIZE\n(6) If k is less than LUB_MAX_SIZE:\n\n(7) Repeat until k is 0:\n(8) If k is equal to LUB_MAX_SIZE:\n\n(9) Else:\n(10) k must be divisible by LUB_MAX_SIZE\n\n\nTime complexity:\n\nO(K)\n\nSpace complexity:\n\nO(1)\n\nThe above algorithms are only used when k is a non-negative integer.\n\n\n-----Time complexity-----\n\nHere is the time complexity of each test. We have to use a pair of loop and a counter.\n\n-----Space complexity-----\n\nTime complexity of each test is O(K).\n\nThis method is used to test for a negative number with a loop.\n\n-----Algorithm-----\n\nHere are the main steps of this problem:\n\n(1) For each k in range(1, LUB_MAX_SIZE):\n(2) For each k:\n(3) If k is greater than LUB_MAX_SIZE:\n\n(4) Else:\n(5) k must be divisible by LUB_MAX_SIZE\n(6) If k is less than LUB_MAX_SIZE:\n\n(7) Repeat until k is 0:\n(8) If k is equal to LUB_MAX_SIZE:\n\n(9) Else:\n(10) k must be divisible by LUB_MAX_SIZE\n\nThe above tests will be executed.\n\n\nTime complexity:\n\nO(K)\n\nSpace complexity:\n\nO(1)\n\nThe above algorithms are only used when k is a non-negative integer.\n\n\n-----Time complexity-----\n\nHere is the time complexity of each test. We have to use a pair of loop and a counter.\n\n-----Space complexity-----\n\nTime complexity of each test is O(K).\n\nThis method is used to test for a negative number with a loop.\n\n-----Algorithm-----\n\nHere are the main steps of this problem:\n\n(1) For each k in range(1, LUB_MAX_SIZE):\n(2) For each k:\n(3) If k is greater than LUB_MAX_SIZE:\n\n(4) Else:\n(5) k must be divisible by LUB_MAX_SIZE\n(6) If k is less than LUB_MAX_SIZE:\n\n(7) Repeat until k is 0:\n(8) If k is equal to LUB_MAX_SIZE:\n\n(9) Else:\n(10) k must be divisible by LUB_MAX_SIZE\n\n\nTime complexity:\n\nO(K)\n\nSpace complexity:\n\nO(1)\n\nThe above algorithms are only used when k is a non-negative integer.\n\n\n-----Time complexity-----\n\nHere is the time complexity of each test. We have to use a pair of loop and a counter.\n\n-----Space complexity-----\n\nTime complexity of each test is O(K).\n\nThis method is used to test for a negative number with a loop.\n\n-----Algorithm-----\n\nHere are the main steps of this problem:\n\n(1) For each k in range(1, LUB_MAX_SIZE):\n(2) For each k:\n(3) If k is greater than LUB_MAX_SIZE:\n\n(4) Else:\n(5) k must be divisible by LUB_MAX_SIZE\n(6) If k is less than LUB_MAX_SIZE:\n\n(7) Repeat until k is 0:\n(8) If k is equal to LUB_MAX_SIZE:\n\n(9) Else:\n(10) k must be divisible by LUB_MAX_SIZE\n\nThe above tests will be executed."
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5_3\") == \"3\"\nassert solution(\"110_1\") == \"5\"\nassert solution(\"11_1\") == \"2\"\nassert solution(\"120_1\") == \"9\"\nassert solution(\"496_5\") == \"6\"\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"496\"\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '8'\nassert solution(input()) == '4'\nassert solution(input()) == '6'\nassert solution(input()) == '10'\nassert solution(input()) == '8'\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2 6\", \"10\", \"99\"]) == \"8\"\nassert solution([\"19 7\", \"1000\", \"9999\"]) == \"4\"\nassert solution([\"19\", \"1000\", \"9999\"]) == \"6\"\nassert solution([\"22 22\", \"22\", \"22\", \"22\", \"22\", \"22\", \"22\"]) == \"22\"\nassert solution([\"2 99\", \"100 9\", \"1000\", \"99999\", \"99999\", \"99999\", \"9999\", \"9999999\"]) == \"9999999\"\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5') == '5'\nassert solution('4') == '4'\nassert solution('1') == '1'\nassert solution('2') == '2'\nassert solution('9') == '9'\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '8'\nprint(\"Example 1:\")\nprint(\"Input : \" + str(stdin))\nprint(\"Exception : \" + str(8))\nprint(\"Output : \" + str(8%10^9+7))\nprint()\n\nassert solution(stdin) == '8'\nprint(\"Example 2:\")\nprint(\"Input : \" + str(stdin))\nprint(\"Exception : \" + str(8))\nprint(\"Output : \" + str(8%10^9+7))\nprint()\n\nassert solution(stdin) == '6'\nprint(\"Example 3:\")\nprint(\"Input : \" + str(stdin))\nprint(\"Exception : \" + str(8))\nprint(\"Output : \" + str(8%10^9+7))\nprint()\n\nassert solution(stdin) == '4'\nprint(\"Example 4:\")\nprint(\"Input : \" + str(stdin))\nprint(\"Exception : \" + str(8))\nprint(\"Output : \" + str(8%10^9+7))\nprint()\n\nassert solution(stdin) == '6'\nprint(\"Example 5:\")\nprint(\"Input : \" + str(stdin))\nprint(\"Exception : \" + str(8))\nprint(\"Output : \" + str(8%10^9+7))\nprint()\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"8\"\nprint(\"Correct!\")\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n        stdin='2 6'\n    ) == '8'\nassert solution(\n        stdin='2 0'\n    ) == '4'\nassert solution(\n        stdin='19 7'\n    ) == '6'\nassert solution(\n        stdin='1000'\n    ) == '99'\nassert solution(\n        stdin='9999'\n    ) == '99'"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 0\") == \"2\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"99\") == \"99\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"9999\") == \"9999\"\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"6\"\n\n\n-----Algorithm-----\n\nLet u = 0.\nu = u + (u^d)mod(10^9 + 7)\nu = u + (u^d)mod(a)\nu = u + (u^d)mod(b)\n\nu = (u^d)mod(a) + (u^d)mod(b)\n\nu = (u^d)mod(a) + (u^d)mod(b) + u^d\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + u^d\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h) + (u^d)mod(i)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h) + (u^d)mod(i) + (u^d)mod(j)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h) + (u^d)mod(i) + (u^d)mod(j) + (u^d)mod(k)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h) + (u^d)mod(i) + (u^d)mod(j) + (u^d)mod(k) + (u^d)mod(l)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h) + (u^d)mod(i) + (u^d)mod(j) + (u^d)mod(k) + (u^d)mod(l) + (u^d)mod(m)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h) + (u^d)mod(i) + (u^d)mod(j) + (u^d)mod(k) + (u^d)mod(l) + (u^d)mod(m) + (u^d)mod(n)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h) + (u^d)mod(i) + (u^d)mod(j) + (u^d)mod(k) + (u^d)mod(l) + (u^d)mod(m) + (u^d)mod(n) + (u^d)mod(o)\n\nu = u + (u^d)mod(a) + (u^d)mod(b) + (u^d)mod(c) + (u^d)mod(d) + (u^d)mod(e) + (u^d)mod(f) + (u^d)mod(g) + (u^d)mod(h) + (u^d)mod(i) + (u^d)mod(j) + (u^d)mod(k) + (u^d)mod(l) + (u^d)mod(m) + (u^d)mod(n) + (u^d)mod(o) + (u^d)mod(p)\n\nu = u + (u^d)mod(a) + (u^d)mod(b"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '8'\n\n\"\"\"\n\nclass Solution:\n    def solution(self, m, d, n):\n        mod = 10**9 + 7\n        return (m * (10**9 + 7) + n) % mod"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 1\") == 4\nassert solution(\"6 4\") == 6\nassert solution(\"5\") == 0\nassert solution(\"2 1\") == 2\nassert solution(\"3 1\") == 3\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('ababcb') == 3\nassert solution('aababcb') == 3\nassert solution('aaabcdabababcdababcdab') == 5\nassert solution('abcabcdede') == 8\nassert solution('ababcdabcdededededede') == 7\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"\"\"3 4 1 7 9 4 1 3\"\"\") == \"4\"\n\nassert solution
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 5\n\n\"\"\"\nimport itertools\nimport collections\n\n\nclass Solution:\n    \"\"\"\n    Runtime: 76 ms, faster than 66.68% of Python3 online submissions for Parentheses of a String.\n    Memory Usage: 17.7 MB, less than 16.13% of Python3 online submissions for Parentheses of a String.\n    \"\"\"\n\n    def count_candies(self, s):\n        cnt = collections.Counter(s)\n        for index in range(len(s)):\n            cnt[s[index]] -= 1\n            if cnt[s[index]] < 0:\n                cnt[s[index]] += 1\n        return sum(cnt.values())\n\n    def __init__(self):\n        self.count = collections.Counter()\n\n    def count_candies(self, s: str) -> int:\n        count = collections.Counter(s)\n        for index, char in enumerate(s):\n            self.count[char] -= count[char]\n            self.count[char] += count[char] <= 0\n        return sum(self.count.values())\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 2\"\n    ) == \"4\"\nassert solution(\n    \"6 4\"\n    ) == \"6\"\nassert solution(\n    \"1 1 2 2 3 3\"\n    ) == \"5\"\nassert solution(\n    \"1 1 2 2 3 3\"\n    ) == \"3\"\nassert solution(\n    \"1 1 2 2 3 3\"\n    ) == \"4\"\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\n        '5',\n        '2',\n        '1',\n        '1',\n        '1'\n    ]) == '4'\n\n\nassert solution(\n    [\n        '6',\n        '4',\n        '2',\n        '3',\n        '2'\n    ]) == '6'\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(sys.argv[1]) == \"4\""
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, 6) == 4\n\n\n-----Constraints-----\n1 <= n <= 100\n\n\n-----Submissions-----\n2ms\n\"\"\""
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"125\"]) == \"3\"\nassert solution([\"43\"]) == \"5\"\nassert solution([\"1000000000\"]) == \"10000000\"\nassert solution([\"1000000000\", \"1000000000\"]) == \"10000000\"\nassert solution([\"1000000000\", \"1000000000\", \"1000000000\"]) == \"10000000\"\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n'''\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 1\nassert solution(\"4\") == 1\nassert solution(\"5\") == 1\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3 6\") == \"10000000\"\nassert solution(\"5 3 1\") == \"3\"\nassert solution(\"1 3 1\") == \"3\"\nassert solution(\"3 5 1\") == \"5\"\nassert solution(\"100 6\") == \"10000000\"\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"100\") == \"1\"\nassert solution(\"50\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"10\") == \"0\"\nassert solution(\"100000\") == \"0\"\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"125\") == 3\nassert solution(\"43\") == 5\nassert solution(\"1000000000\") == 10000000\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"125\") == 3\nassert solution(\"43\") == 5\nassert solution(\"1000000000\") == 10000000\n\n\"\"\""
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"25\") == \"3\"\nassert solution(\"1000000000\") == \"5\"\nassert solution(\"43\") == \"3\"\nassert solution(\"10000\") == \"1\"\nassert solution(\"10000010\") == \"5\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(2) == 0\nassert solution(3) == 4\nassert solution(4) == 6\nassert solution(7) == 328\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == \"0\"\nassert solution(2) == \"0\"\nassert solution(3) == \"0\"\nassert solution(4) == \"0\"\nassert solution(5) == \"0\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp := input().split()) == \"1\"\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10\n\"\"\"\nimport itertools"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 0' ) == '0'\nassert solution('2 0' ) == '0'\nassert solution('3 0' ) == '0'\nassert solution('4 0' ) == '0'\nassert solution('4 1' ) == '0'\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2) == 2\n\nassert solution(4, 1) == 4\n\nassert solution(4, 3) == 6\n\nassert solution(7, 4) == 32"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 0\") == \"0\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"4 1\") == \"4\"\nassert solution(\"4\") == \"6\"\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\n1 <= n <= 10^9\n0 <= k <= n\n\n\n-----Time complexity-----\nO(n*log(n))\n\nO(n)\n\n\n-----Space complexity-----\nO(n)\n\n\n-----Example 1-----\n\nInput\n1\n2\n3\n4\n5\n6\n\nOutput\n1\n7\n\n\n-----Example 2-----\n\nInput\n1\n1\n3\n2\n4\n5\n6\n\nOutput\n0\n\nInput\n1\n3\n4\n5\n6\n7\n\nOutput\n0\n\nInput\n2\n1\n3\n4\n5\n6\n7\n\nOutput\n1\n4\n\nInput\n4\n1\n2\n3\n4\n5\n6\n7\n\nOutput\n0\n\nInput\n5\n4\n1\n2\n3\n4\n5\n6\n7\n\nOutput\n3\n\n\n-----Constraints-----\n0 <= k <= n\n0 <= n <= 10^4\n\n0 <= stdin.length <= 10^4\n\n0 <= stdin[i] <= 10^9\n\n----Level-order----\n----For k=1 ----For k=2 ----For k=3 ----For k=4 ----For k=5 ----For k=6 ----For k=7 ----For k=8 ----For k=9 ----For k=10 ----For k=11 ----For k=12 ----For k=13 ----For k=14 ----For k=15 ----For k=16 ----For k=17 ----For k=18 ----For k=19 ----For k=20 ----For k=21 ----For k=22 ----For k=23 ----For k=24 ----For k=25 ----For k=26 ----For k=27 ----For k=28 ----For k=29 ----For k=30 ----For k=31 ----For k=32 ----For k=33 ----For k=34 ----For k=35 ----For k=36 ----For k=37 ----For k=38 ----For k=39 ----For k=40 ----For k=41 ----For k=42 ----For k=43 ----For k=44 ----For k=45 ----For k=46 ----For k=47 ----For k=48 ----For k=49 ----For k=50 ----For k=51 ----For k=52 ----For k=53 ----For k=54 ----For k=55 ----For k=56 ----For k=57 ----For k=58 ----For k=59 ----For k=60 ----For k=61 ----For k=62 ----For k=63 ----For k=64 ----For k=65 ----For k=66 ----For k=67 ----For k=68 ----For k=69 ----For k=70 ----For k=71 ----For k=72 ----For k=73 ----For k=74 ----For k=75 ----For k=76 ----For k=77 ----For k=78 ----For k=79 ----For k=80 ----For k=81 ----For k=82 ----For k=83 ----For k=84 ----For k=85 ----For k=86 ----For k=87 ----For k=88 ----For k=89 ----For k=90 ----For k=91 ----For k=92 ----For k=93 ----For k=94 ----For k=95 ----For k=96 ----For k=97 ----For k=98 ----For k=99 ----For k=100\n"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"3 2\") == \"4\"\nassert solution(\"4 1\") == \"6\"\nassert solution(\"7 4\") == \"328\"\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 3 4 1 6\") == \"11\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"5 3 4 1 6\") == \"6\"\nassert solution(\"5 3 4 1 6\") == \"11\"\nassert solution(\"5 2\") == \"0\"\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin, 3) == '28'\nassert solution(stdin, 4) == '-1'\nassert solution(stdin, 5) == '-1'\nassert solution(stdin, 6) == '-1'\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 5 1 1 10 8 10 9 9 4 10\") == \"11\"\nassert solution(\"5 3 5 2 3 4 5 6 2\") == \"11\"\nassert solution(\"3 2 3 5\") == -1"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 3 4 1 6\") == \"11\"\nassert solution(\"5 2\") == \"11\"\nassert solution(\"5 3\") == \"11\"\nassert solution(\"5 4\") == \"11\"\nassert solution(\"5 6 3 2 3 4 7 5 4 5 6\") == \"22\"\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == -1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3\") == 11\nassert solution(\"5 2\") == -1\nassert solution(\"5 6\") == 28\nassert solution(\"5 4 3 2 1\") == -1\nassert solution(\"WOORWORROW\") == 28\n\n--------More Hints-----\n\nHow could the solution be improved?\n\nShould the solution be exact? Yes.\n\nWhere does that change in time? If you have already solved the problem, how would you express that in Python?\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()==\"11\")\n\n'''\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"11\"\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 3) == 11\nassert solution(5, 2) == -1\nassert solution(11, 5) == 28\nassert solution(11, 4) == -1\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n0 < stdin.length < 300\n1 \u2264 p, q \u2264 10^18\n1 \u2264 n \u2264 90\na_1, a_2,..., a_{n} > 0\n\n-----Time Limit-----\n1 minute\n\n\n'''\n\nfrom sys import stdin, setrecursionlimit\nsetrecursionlimit(10**6)\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Examples-----\nInput\n10\n1.3 + 1.6\nOutput\nNO\n\nInput\n10\n2 + 4 + 3 + 1 + 3 + 2\nOutput\nNO\n\nInput\n100\n1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 +"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 4\") == \"YES\"\nassert solution(\"3 2\") == \"YES\"\nassert solution(\"3 4\") == \"NO\"\nassert solution(\"4 3\") == \"NO\"\nassert solution(\"4 5\") == \"NO\"\n\nAccepted\n4,120\n\nSubmissions\n9,76\n\nPackages\nflake8, pycodestyle, pytest-cov\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"9 4\"\n) == \"YES\"\nassert solution(\n    \"9 4\"\n) == \"NO\"\nassert solution(\n    \"2 4 4 1\"\n) == \"NO\"\nassert solution(\n    \"1 3 1\"\n) == \"YES\"\nassert solution(\n    \"1 2 2\"\n) == \"YES\"\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\"\"4 9\n2\n3 4\n3 1 2\n1 4 1\"\"\") == \"YES\"\nassert solution(\"\"\"1 7\n1 1 1 1 1 1 1 1 1 1\"\"\") == \"NO\"\nassert solution(\"\"\"1 9\n1 1 1 1 1 1 1 1 1 1\"\"\") == \"NO\"\nassert solution(\"\"\"1 9\n2 1 1 1 1 1 1 1 1 1\"\"\") == \"YES\"\nassert solution(\"\"\"1 4\n1 1 1 1 1 1 1 1 1 1\"\"\") == \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nprint(\"YES\")\n\nAssertionError: Unable to convert '3' to int\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('|+|=||||||') == 'Impossible', 'Should be impossible'\n\n\nassert solution('||+||=||') == 'Impossible', 'Should be impossible'\nassert solution('||||||+||=||') == 'Impossible', 'Should be impossible'\nassert solution('||||||+||=||||') == 'Impossible', 'Should be impossible'\nassert solution('||+||+||=||') == 'Impossible', 'Should be impossible'\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"A + B = C\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\n\nassert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Impossible\"\n\"\"\""
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1+2\") == \"3\"\nassert solution(\"1+-2\") == \"3\"\nassert solution(\"1-2\") == \"3\"\nassert solution(\"1/2\") == \"3\"\nassert solution(\"-1/2\") == \"3\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n'''+|||+||=||\n+|||+|=||\n+||||||\n+||+|=||\n+||||||\n+||+||=||\n+||||||\n+||+||=||\n'''\n) == '''Impossible''', \"No answer\"\n\nassert solution(\n'''|||+||=||\n|||+|=||\n||||||\n||+|=||\n||||||\n||+||=||\n'''\n) == '''Impossible''', \"No answer\"\n\nassert solution(\n'''|||+||=||\n|||+|=||\n||||||\n||+|=||\n||||||\n||+||=||\n'''\n) == '''Impossible''', \"No answer\"\n\nassert solution(\n'''||+||=||\n||+|=||\n||||||\n||+|=||\n||||||\n||+||=||\n'''\n) == '''Impossible''', \"No answer\"\n\nassert solution(\n'''||+||=||\n||+|=||\n||||||\n||+|=||\n||||||\n||+||=||\n'''\n) == '''Impossible''', \"No answer\""
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"{A}+{B}={C}\") == \"Impossible\"\nassert solution(\"{A}+{B}={C}\") == \"Impossible\"\nassert solution(\"{A}+{B}={C}\") == \"Impossible\"\nassert solution(\"{A}{B}={C}{D}\") == \"Impossible\"\nassert solution(\"{A}{B}{C}={D}\") == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('10 + 1 + 2 - 2 * 3') == '4'\nassert solution('10 + 1 + 2 * 3') == '9'\nassert solution('+ + 1 + 2 * 3') == '3'\nassert solution('+ + 1 + 2 + 3') == '4'\nassert solution('- - 1 + 2 + 3') == '1'\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input() == \"Impossible\")"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == str(2)\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\""
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 2'), 2\nassert solution('1 1'), 1\nassert solution('2 2'), 2\nassert solution('3 3'), 3\nassert solution('4 4'), 4\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 8 10\") == \"54\"\nassert solution(\"5 4 1\") == \"3\"\nassert solution(\"5 1 5\") == \"1\"\nassert solution(\"1 2 5\") == \"4\"\nassert solution(\"1 5 9\") == \"6\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"5 6\") == \"2\"\nassert solution(\"10 7\") == \"1\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 5 6\") == \"1\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(n, k) == 2\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"2 0 0 1\") == \"1 2\"\nassert solution(\"1 0 3\") == \"2 1\"\nassert solution(\"2 -1 1 0\") == \"1 2\"\nassert solution(\"1 -1 0 0\") == \"1 2\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5') == '-1'\nassert solution('4') == '2'\nassert solution('0') == '2'\nassert solution('5') == '-1'\nassert solution('4') == '1'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 1 2 3 1 2 3\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\\n3\\n4\\n1\\n2\\n-1\\n3\\n4\\n-2\\n3\\n4\\n-2\\n3\\n4\\n-1\\n-2\\n1\\n-3\\n1\\n3\\n-2\\n-3\\n1\\n-2\\n-1\\n4\\n-2\\n3\\n4\\n1\\n-2\\n1\\n3\\n-1\\n-1\\n2\\n-1\\n1\\n-2\\n-2\\n-2\\n-1\\n-3\\n-3\\n-2\\n-3\\n3\\n-2\\n-1\\n-2\\n1\\n-2\\n1\\n-1\\n2\\n-2\\n-1\\n-3\\n-1\\n-1\\n-1\\n-2\\n-2\\n-1\\n-1\\n-1\\n-1\\n-2\\n-2\\n-2\\n-1\\n-3\\n-3\\n-3\\n-1\\n-1\\n-1\\n1\\n-1\\n-2\\n-3\\n1\\n1\\n2\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1\\n-1"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 2 3 4 5 6 7 8 9\"\nassert solution(input()) == \"LLDRRRUDDDDULD\"\nassert solution(input()) == \"RDRUULDULD\"\nassert solution(input()) == \"RULDDRULD\"\nassert solution(input()) == \"UDRULDRULD\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\\n2\\n2\\n1\\n1\") == \"2\\nR\\nRL\\nU\\nUU\\nDR\\nDR\\nDR\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\nUL\\"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"-1 0\") == \"2\"\nassert solution(\"0 3\") == \"-1\"\nassert solution(\"0 -1\") == \"2\"\nassert solution(\"0 -1 -1\") == \"L\"\nassert solution(\"0 -1 -1 -1\") == \"R\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3\\n5\\n6\\n1\\n0\\n1\\n0\\n0\\n0\\n0') == '2\\n1\\nL\\nR\\nU\\nDR\\nUU'\nassert solution('3\\n5\\n3\\n2\\n0\\n0\\n0\\n0\\n0\\n0') == '2\\n1\\nL\\nR\\nU\\nDR\\nUU'\nassert solution('1\\n-10\\n0\\n0\\n0\\n0\\n0\\n0') == '1\\nL\\nR\\nU\\nDR\\nUU'\nassert solution('1\\n-10\\n0\\n0\\n0\\n0\\n0\\n0') == '1\\nL\\nR\\nU\\nDR\\nUU'\nassert solution('1\\n-10\\n0\\n0\\n0\\n0\\n0\\n0') == '1\\nL\\nR\\nU\\nDR\\nUU'\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3\") == \"L\"\nassert solution(\"-1 0\") == \"-1 0\"\nassert solution(\"0 3\") == \"L R\"\nassert solution(\"0 -1 0\") == \"L R\"\nassert solution(\"0 1 0\") == \"R U\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == \"0 1 2 3\"\nassert solution(\"2\") == \"-1 0\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"***gmg***\""
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2***\"\nassert solution(\"1\") == \"1***\"\nassert solution(\"0\") == \"0***\"\nassert solution(\"3\") == \"3***\"\nassert solution(\"4\") == \"4***\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aogogob\") == \"***a***b\"\nassert solution(\"aogogob\") == \"***a***b\"\nassert solution(\"aogogob\") == \"a***b\""
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'a***b'\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"aogogob\",\n    \"a***b\",\n    ),\n    \"the interview is not the right format\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"a\") == \"a***b\"\nassert solution(\"a\") == \"***a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\nassert solution(\"a\") == \"a\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('aogogob') == 'a***b', 'not a valid answer'"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"***gmg***\"\n\n\"\"\""
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 'a***b'\nassert solution(input) == 'a***b'\nassert solution(input) == 'a***b'\n\nassert solution(input) == '***gmg'\nassert solution(input) == '***gmg'\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"a***b\"\n\nassert solution(stdin) == \"***gmg\"\n\nassert solution(stdin) == \"a***b\"\n\nassert solution(stdin) == \"***gmg\"\n\nassert solution(stdin) == \"a***b\""
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"593574252\"\n\nassert solution(stdin) == \"593574252\"\n\n\n-----Tips-----\n\nUseful links:\nhttps://www.youtube.com/watch?v=E4dYkTzEjA\nhttps://www.geeksforgeeks.org/python-for-loop-in-a-while-loop/\nhttps://www.geeksforgeeks.org/python-slicing-a-list/\nhttps://www.geeksforgeeks.org/python-slicing-a-list-using-a-string/\nhttps://www.python.org/dev/peps/pep-0008/\n\"\"\""
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"363165664\"\n\nassert solution(input()) == \"593574252\"\n\nassert solution(input()) == \"180712661084\""
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10 2') == '2'\nassert solution('20190929 1605') == '363165664'\nassert solution('947 987654321987654321') == '593574252'\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '593574252'\n\"\"\""
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 1') == '2'\nassert solution('20190929 1605') == '363165664'\nassert solution('947 987654321987654321') == '593574252'\n\n'''"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"235849\"\nassert solution(stdin) == \"29165664\"\nassert solution(stdin) == \"798826846579886189426564067\"\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"593574252\"\nassert solution(stdin) == \"947 987654321987654321\"\nassert solution(stdin) == \"62974899\"\n\nRuntime: 32 ms, faster than 54.96% of Python3 online submissions for Fractional Powers.\nMemory Usage: 14.1 MB, less than 33.46% of Python3 online submissions for Fractional Powers.\n\n-----Constraints-----\n\n1 <= x <= 10^9\n1 <= n <= 10^18\n\"\"\"\n\nclass Solution:\n    def FractionalPower(self, x: int, n: int) -> int:\n        def compute(x: int, n: int) -> int:\n            res = 1\n            for i in range(2, min(int(n ** 0.5), n + 1) + 1):\n                if n % i == 0:\n                    res *= i\n                    n //= i\n            return res\n\n        f = lambda a: compute(a, n) if n % a == 0 else compute(a, n) + a * (n // a)\n        return f(x) % (10 ** 9 + 7)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(593574252)\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '593574252'\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"24\"\nassert solution(\"947 987654321987654321\") == \"593574252\"\nassert solution(\"20190929 1605\") == \"363165664\"\nassert solution(\"947 987654321987654321\") == \"593574252\"\nassert solution(\"20190929 1605\") == \"363165664\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()), (\"Solution is incorrect\", 100, True)\nassert solution(input().split(' ')) == (\"Solution is incorrect\", 100, True)\nassert solution(input().split(' ').pop(0)) == (\"Solution is incorrect\", 100, True)\nassert solution(input().split(' ').pop(0).split(' ')) == (\"Solution is incorrect\", 100, True)\nassert solution(input().split(' ').pop(0).split(' ').pop(0)) == (\"Solution is incorrect\", 100, True)\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 1\nassert solution(stdin) == 4\nassert solution(stdin) == 3\nassert solution(stdin) == 0\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 11\nassert solution(stdin) == 10\nassert solution(stdin) == 9\nassert solution(stdin) == 8\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2 9\") == \"3 4 5 8 6\"\nassert solution(\"6 2 9\") == \"6\"\nassert solution(\"1 2 -18\") == \"0\"\nassert solution(\"1\") == \"1\"\nassert solution(\"5\") == \"2\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '1 1 1'\nassert solution(input) == '0'\nassert solution(input) == '2'\nassert solution(input) == '1'\nassert solution(input) == '1'\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '331'\nassert solution(stdin) == '322'\nassert solution(stdin) == '321'\nassert solution(stdin) == '3221'\nassert solution(stdin) == '32498'\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 2 8\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\" or solution(stdin) == \"YES\"\n\n----Good solution----"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 0 0 1 0 1 0 1 0 0 0 1 0 0 0 0 1\") == \"YES\"\nassert solution(\"2 0 0 0 1 0 1 0 0 0 0 0 1 0 0 0 1\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"NO\"\nassert solution(\"5 3 5 3 2 5 2 5 6 2 6 2 4 4 4 4 1 1 1 1 6 3 6 3\") == \"YES\"\nprint(\"ok\")\n\n-----------------------------------------------------------------------------------------------------------------------\n\ninput:\n3 5\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3 3 2\n2 3 2\n3 3 2\n2 2 2\n3"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"NO\"\n\n>>> solution(stdin)\nYES\n\n'''"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"NO\"\n\nassert solution(input()) == \"NO\"\n\nassert solution(input()) == \"YES\"\n\nassert solution(input()) == \"YES\"\n\n\"\"\"\n\nfrom typing import Dict, List, Any"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= stdin.length <= 9\n1 <= a_{i} <= 6\n\nTime Limit: 1 second\n\nspace: n\n\nnotes:\n\n1. A rotation is always made by rotating each square (corresponding to number) clockwise.\n\n\n-----Dev notes-----\n\nOn a (n-1)x(n-1) matrix, a (n-1)x(n-1) matrix is solved by rotating each side clockwise. A rotation is just like a rotation by rotating each square, from top-left to bottom-right in reverse order, with each square having the same color.\n\n2. For a side of a cube, rotating each square clockwise is a rotation of the square.\n\n3. It is not possible to solve cube with 90-degrees rotation.\n\n4. The cube is solved by rotating every square clockwise by 90-degrees, so there are 3 possible rotations.\n\n5. The cube must be solved by rotating every square clockwise by 90-degrees, so it can be solved by rotating every square clockwise by 90-degrees.\n\n5. The cube is solved by rotating every square clockwise by 90-degrees, so it can be solved by rotating every square clockwise by 90-degrees.\n\n6. A rotation is always made by rotating each square (corresponding to number) clockwise.\n\n7. A rotated cube is solved by rotating each square clockwise.\n\n8. All of the given squares can be rotated clockwise, so there are no possible rotations.\n\n-----Advanced-----\na0 0 a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14 a15 a16 a17 a18 a19 a20 a21 a22 a23 a24 a25 a26 a27 a28 a29 a30 a31 a32 a33 a34 a35 a36 a37 a38 a39 a40 a41 a42 a43 a44 a45 a46 a47 a48 a49 a50 a51 a52 a53 a54 a55 a56 a57 a58 a59 a60 a61 a62 a63 a64 a65 a66 a67 a68 a69 a70 a71 a72 a73 a74 a75 a76 a77 a78 a79 a80 a81 a82 a83 a84 a85 a86 a87 a88 a89 a90 a91 a92 a93 a94 a95 a96 a97 a98 a99 a100 a101 a102 a103 a104 a105 a106 a107 a108 a109 a110 a111 a112 a113 a114 a115 a116 a117 a118 a119 a120 a121 a122 a123 a124 a125 a126 a127 a128 a129 a130 a131 a132 a133 a134 a135 a136 a137 a138 a139 a140 a141 a142 a143 a144 a145 a146 a147 a148 a149 a150 a151 a152 a153 a154 a155 a156 a157 a158 a159 a160 a161 a162 a163 a164 a165 a166 a167 a168 a169 a170 a171 a172 a173 a174 a175 a176 a177 a178 a179 a180 a181 a182 a183 a184 a185 a186 a187 a188 a189 a190 a191 a192 a193 a194 a195 a196 a197 a198 a199 a200 a201 a202 a203 a204 a205 a206 a207 a208 a209 a210 a211 a212 a213 a214 a215 a216 a217 a218 a219 a220 a221 a222 a223 a224 a225 a226 a227 a228 a229 a230 a231 a232 a233 a234 a235 a236 a237 a238 a239 a240 a241 a242 a243 a244 a245 a246 a247 a248 a249 a250 a251 a252 a253 a254 a255 a256 a257 a258 a259 a260 a261 a262 a263 a264 a265 a266 a267 a268 a269 a270 a271 a272 a273 a274 a275 a276 a277 a278 a279 a280 a281 a282 a283 a284 a285 a286 a287 a288 a289 a290 a291 a292 a293 a294 a295 a296 a297 a298 a299 a300 a301 a302 a303 a304 a305 a306 a307 a308 a309 a310 a311 a312 a313 a314 a315 a316 a317 a318 a319 a320 a321 a322 a323 a324 a325 a326 a327 a328 a329 a330 a331 a332 a333 a334 a335 a336 a337 a338 a339 a340 a341 a342 a343 a344 a345 a346 a347 a348 a349 a350 a351 a352 a353 a354 a355 a356 a357 a358 a359 a360 a361 a362 a363 a364 a365 a366 a367 a368 a369 a370 a371 a372 a373 a374 a375 a376 a377 a378 a379 a380 a381 a382 a383 a384 a385 a386 a387 a388 a389 a390 a391 a392 a393 a394 a395 a396 a397 a398 a399 a400 a401 a402 a403 a404 a405 a406 a407 a408 a409 a410 a411 a412 a413 a414 a415 a416 a417 a418 a419 a420 a421 a422 a423 a424 a425 a426 a427 a428 a429 a430 a431 a432 a433 a434 a435 a436 a437 a438 a439 a440 a441 a442 a443 a444 a445 a446 a447 a448 a449 a450 a451 a452 a453 a454 a455 a456 a457 a458 a459 a460 a461 a462 a463 a464 a465 a466 a467 a468 a469 a470 a471 a472 a473 a474 a475 a476 a477 a478 a479 a480 a481 a482 a483 a484 a485 a486 a487 a488 a489 a490 a491 a492 a493 a494 a495 a496 a497 a498 a499 a500 a501 a502 a503 a504 a505 a506 a507 a508 a509 a510 a511 a512 a513 a514 a515 a516 a517 a518 a519 a520 a521 a522 a523 a524 a525 a526 a527 a528 a529 a530 a531 a532 a533 a534 a535 a536 a537 a538 a539 a540 a541 a542 a543 a544 a545 a546 a547 a548 a549 a550 a551 a552 a553 a554 a555 a556 a557 a558 a559 a560 a561 a562 a563 a564 a565 a566 a567 a568 a569 a570 a571 a572 a573 a574 a575 a576 a577 a578 a579 a580 a581 a582 a583 a584 a585 a586 a587 a588 a589 a590 a591 a592 a593 a594 a595 a596 a597 a598 a599 a600 a601 a602 a603 a604 a605 a606 a607 a608 a609 a610 a611 a612 a613 a614 a615 a616 a617 a618 a619 a620 a621 a622 a623 a624 a625 a626 a627 a628"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n\nExplanation\n\nInput:\n\nInput:\n\nOutput:\n\nSample Input:\n\n2 5 4 6 1 3 6 2 5 5 1 2 3 5 3 1 1 2 4 6 6 4 3 4\n\nSample Output:\n\nYES\n\n\n-----Constraints-----\n1 <= a_{i} <= 6\n\n\n------Time complexity------\n\nTime complexity of solution function is O(N^2) where N is the number of unique colors.\n\n\n------Space complexity------\n\nSpace complexity of solution function is O(N) where N is the number of unique colors.\n\n\n------Elements of the input are unique!-----\n\nExplanation:\n\nInput :\n\na_{i} = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\nOutput :\n\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\n------Explanation------\n\nThe input array looks like this:\n\nInput :\n\na_{i} = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\nOutput :\n\n{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16}\n\n\"\"\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n\n\"\"\""
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 4 3 5 6\") == \"NO\"\nassert solution(\"1 4 1 2 4 6 4 6 3\") == \"YES\""
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('239') == 0\nassert solution('26') == 2\nassert solution('493') == 0\nassert solution('101') == 0\nassert solution('329') == 8\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"239 10880 9889\"\n    ) == \"0\"\nassert solution(\n    \"26 7258 6123\"\n    ) == \"2\"\nassert solution(\n    \"493 8000 8000\"\n    ) == \"24\"\nassert solution(\n    \"101 6800 6500\"\n    ) == \"8\"\nassert solution(\n    \"329 19913 19900\"\n    ) == \"24\"\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"8\"\nassert solution(\"101 6800 6500\") == \"24\"\n\nPass\n-----Other Solutions-----"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"0\"\nassert solution(\"493 8000 8000\") == \"0\"\nassert solution(\"101 6800 6500\") == \"0\"\nassert solution(\"329 19913 19900\") == \"0\"\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\nstdin: str\n) == 0\n\nassert solution(\nstdin: str\n) == 2\n\nassert solution(\nstdin: str\n) == 7408\n\nassert solution(\nstdin: str\n) == 10400\n\n-----Constraints-----\n\n1 \u2264 p \u2264 100\n1 \u2264 x \u2264 100\n1 \u2264 y \u2264 1000000\n\n1 \u2264 stdin.length <= 1000\nstdin.length <= 30000\nstdin.length <= 30000\nstdin.length <= 30000\nstdin.length <= 30000\nstdin.length <= 30000\nstdin.length <= 30000\nstdin.length <= 30000\n\n'''\nclass Solution:\n    def find_best_hack(self, stdin: str) -> int:\n        x, y = stdin.split()\n        p, x = int(x), int(x)\n        if p % 5 == 0:\n            return min(y, x)\n\n        return min(y, x)\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0\") == 0\nassert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 2\nassert solution(\"4\") == 3\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('239 10880 9889') == '0'\nassert solution('26 7258 6123') == '0'\nassert solution('493 8000 8000') == '0'\nassert solution('101 6800 6500') == '0'\nassert solution('329 19913 19900') == '0'\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"239 10880 9889\") == \"0\"\nassert solution(\"26 7258 6123\") == \"2\"\nassert solution(\"493 8000 8000\") == \"24\"\nassert solution(\"101 6800 6500\") == \"8\"\nassert solution(\"329 19913 19900\") == \"8\"\n"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '24'\nassert solution(stdin) == '8'"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '2'\nassert solution(stdin) == '24'\nassert solution(stdin) == '8'\nassert solution(stdin) == '101'\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 1\") == \"3\"\nassert solution(\"1 2 3\") == \"1\"\nassert solution(\"3 2 1\") == \"2\"\nassert solution(\"1 2 5\") == \"1\"\nassert solution(\"5 3 1 2\") == \"1\""
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n\nInput\n2\n2\n2\n2\n\nOutput\n3\n\nOutput\n0\n\n\n\n-----Notes-----\n\nThe path of the third friend is:\n\nRabbit has to go to the supply store.\n\nRabbit has to go to the store.\n\nThe path of the third friend is:\n\nRabbit has to go to the store.\n\nRabbit has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nRabbit has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nRabbit has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store.\n\nThe path of the third friend is:\n\nEeyore has to go to the supply store.\n\nEeyore has to go to the supply store."
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 3, \"This test should pass\"\nassert solution(input) == 0, \"This test should fail\"\n\nassert solution(input) == 3, \"This test should fail\"\nassert solution(input) == 0, \"This test should fail\"\nassert solution(input) == 3, \"This test should fail\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 100\n1 \u2264 a, b, c \u2264 100\n\n0 \u2264 stdin.length \u2264 10000\n\nstdin.length is guaranteed to be less than or equal to 5000.\n\nstdin is guaranteed to be an integer array of digits.\n\nReferences\nhttps://leetcode.com/problems/minimum-distance-between-two-adjacent-homes/discuss/250716/Python-easy-solution-with-explanation-and-no-tries-and-explanation\n\n\"\"\"\n\nclass Solution:\n    def minimumDistance(self, n: int, a: int, b: int, c: int) -> int:\n        pass\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 1\") == \"3\"\nassert solution(\"3 1 3\") == \"3\"\nassert solution(\"1 2 3\") == \"3\"\n\nassert solution(\"1 5 1\") == \"3\"\nassert solution(\"1 1 2\") == \"0\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\"\n\n-----Known Issues-----\n\n>\n> \n>\n> \n> \n> \n>\n>\n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n> \n>"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\n\nExplanation\nThe optimal path for Winnie is the following:\n* first have a meal in Rabbit's house, then in Owl's house, then in Eeyore's house. So he will pass the distance 2 + 1 = 3.\n\nInput\n1\n2\n3\n5\n\nOutput\n0\n\nInput\n2\n2\n1\n4\n\nOutput\n0\n\n\n\n-----Time complexity-----\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n lg n).\n\nTime complexity of the following solution is O(n l"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"5\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"6\"]) == \"3\"\nassert solution([\"1\", \"3\", \"4\", \"5\"]) == \"0\"\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(60)\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('8 6') == '6'\nassert solution('30 20 10') == '20'\nassert solution('30 20 10') == '20'\nassert solution('30 20 10') == '20'\nassert solution('30 20 10') == '20'\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"30 20 10\") == \"20\"\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '20'\n'''"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"7 1 4\") == \"6\"\nassert solution(\"30 20 10\") == \"20\"\nassert solution(\"30 20 10\") == \"5\"\nassert solution(\"30 20 10\") == \"9\""
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"x_1 5 3\") == 6, \"Incorrect answer\"\nassert solution(\"x_1 20 x_2 10\") == 12, \"Incorrect answer\"\nassert solution(\"x_1 20 x_2 30 x_3 5\") == 4, \"Incorrect answer\"\nassert solution(\"x_1 20 x_2 30 20 x_3 10\") == 12, \"Incorrect answer\"\nassert solution(\"x_1 5 3 x_2 20 x_3 10\") == 13, \"Incorrect answer\"\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '20'"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '20'\n"
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 2 2') == 1\nassert solution('3 5 1') == 2\nassert solution('3 4 6') == 6\nassert solution('3 7 6') == 6\nassert solution('3 1 7') == 7\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == -1"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 2 3 7\", \"1 1 7\"]) == \"0\"\nassert solution([\"1 2 3 7\", \"1 1 7\"]) == \"-1\"\nassert solution([\"1 2 3 7\", \"1 1 7\"]) == \"0\"\nassert solution([\"1 2 3 7\", \"1 1 7\"]) == \"0\"\nassert solution([\"1 2 3 7\", \"1 1 7\"]) == \"0\"\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    input:\n    in:\n    out:\n    ) == \"1\"\n    assert solution(\n    input:\n    in:\n    out:\n    ) == \"0\"\n    assert solution(\n    input:\n    in:\n    out:\n    ) == \"0\"\n    assert solution(\n    input:\n    in:\n    out:\n    ) == \"0\"\n    assert solution(\n    input:\n    in:\n    out:\n    ) == \"0\"\n    "
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == -1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4,3) == 0\nassert solution(2,1) == 1\nassert solution(3,7) == -1\nassert solution(2,4) == 0\nassert solution(3,7) == 1\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1, \"The solution failed\"\nassert solution(stdin) == \"1\", \"The solution failed\"\nassert solution(stdin) == \"0\", \"The solution failed\"\nassert solution(stdin) == \"0\", \"The solution failed\"\nassert solution(stdin) == \"0\", \"The solution failed\"\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n\n\"\"\""
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == -1\n\n\"\"\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\", \"No\"\n\"\"\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"YES\"\nassert solution(\"3 5\") == \"NO\"\nassert solution(\"7 7\") == \"NO\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"3 7\") == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\nassert solution(input()) == 'NO'"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\nassert solution(input()) == \"NO\""
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-------------------------------------------------------------------------------\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nSample Input\n3 6\n......\n..*..\n.****.\n..*..\n..*..\n\nSample Output\nYES\n\nSample Input\n3 7\n.......\n...*...\n..****.\n...*...\n...*...\n.......\n.*.....\n\nSample Output\nNO\n\nInput\n7 7\n.......\n...*..\n.****.\n..*..\n.*...*.\n..*..\n.*...*.\n.**.***.\n.......\n..*.......\n\nSample Input\n5 3\n..*...\n..*..\n...***\n\nSample Output\nNO\n\nInput\n3 5\n..*..\n..*..\n****.\n..*..\n..*..\n..........\n\nSample Input\n5 3\n.***..\n..***.\n..**...\n..**..\n..*...\n..*...\n\nSample Output\nYES\n\nInput\n3 7\n.......\n...*...\n..****.\n..*..\n.*...*.\n..*..\n..*..\n..........\n.*.....\n\nSample Input\n1 1\n.*...*\n\nSample Output\nNO\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n\n1 <= h <= 500\n0 <= w <= 2000\ns contains only \".\" and \"*\".\n\n1 <= s.length <= 500\ns[i].length == 1\ns[i] is \".\" or \"*\".\n\n\n\n-----Elements-----\n\nSample input 1:\n5 6\n..**..\n..**..\n..*...\n..*...\n..*..\n.****.\n..*...\n..*..\n.*****\n\nSample output 1:\nYES\n\nSample input 2:\n7 7\n..*...\n.****.\n.*...*.\n..*..\n..****\n\nSample output 2:\nNO\n\nSample input 3:\n7 7\n..**..\n..**..\n..*...\n..*...\n..*..\n...*...\n.......\n..****.\n..*..\n..*..\n...*...\n.......\n\"\"\"\n\nh = int(input())\nw = int(input())\ns = input()"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('.'), 'NO'\nassert solution('*'), 'NO'\nassert solution('.'), 'NO'\nassert solution('+'), 'NO'\nassert solution('+'), 'YES'\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3 3\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"5 5 3\") == \"YES\"\nassert solution(\"4 4 4\") == \"YES\"\nassert solution(\"2 5 2\") == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 1, 2) == 'NO'\nassert solution(3, 3, 2) == 'YES'\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"11110\") == \"YES\"\nassert solution(\"11100\") == \"YES\"\nassert solution(\"11000\") == \"NO\"\nassert solution(\"11001\") == \"NO\"\nassert solution(\"11010\") == \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nInput\n2 2 2\n\nOutput\nNO\n000\n001\n\nInput\n3 2 2\n\nOutput\nNO\n0 0\n0 1\n0 2\n0 3\n\nassert solution(stdin) == \"YES\"\n\nInput\n3 1 2\n\nOutput\nYES\n0 1 2\n0 2 1\n0 3 1\n\nassert solution(stdin) == \"NO\"\n\n\n'''\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nprint(\"CODE TIME LIMIT EXCEEDED\")"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    '3 3 3'\n) == 'YES'\nassert solution(\n    '3 3 3'\n) == 'YES'\nassert solution(\n    '3 3 3'\n) == 'YES'\nassert solution(\n    '3 3 3'\n) == 'NO'\nassert solution(\n    '3 3 3'\n) == 'NO'\n"
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 6\nassert solution(inp) == 12\nassert solution(inp) == 15\nassert solution(inp) == 17\nassert solution(inp) == 19\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"2 3\") == \"1\"\nassert solution(\"2 4\") == \"3\"\nassert solution(\"3 4\") == \"4\"\nassert solution(\"2 5\") == \"2\"\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 10\n\"\"\""
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\n\nassert solution(stdin) == 2\n\n\"\"\"\n\nimport sys\nimport math\nfrom collections import Counter"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Impossible'\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"KXWLLKP\") == \"ZABCDEFSRQPON\"\nassert solution(\"KXXGVZQNRIWOXXGJLKACPEMDH\") == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"Impossible\"\nassert solution(\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\") == \"Impossible\"\nassert solution(\"BUVTYZFQSNRIWOXXGJLKACPEMDH\") == \"YXWVUTGHIJKLMNOPQRSGTUVWXYZ\"\nassert solution(\"PUWTSAHJVCKEDJDLQHLSWZ\") == \"PUWTSAHJVCKEDJDLQHLSWZ\"\nassert solution(\"ZABCDEFSRQPON\") == \"YXWVUTGHIJKLMNOPQRSGTUVWXYZ\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        \n        \n        \n    ), \"solution does not return anything\"\n    \n    \n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Impossible\"\n'''\n\n\nfrom collections import defaultdict\nfrom itertools import permutations\nfrom collections import deque\nfrom typing import Deque\nimport re\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin = \"\"\"ABCDEFGHIJKLMNOPQRSGTUVWXYZ\n\n\"\"\"\nstdin = \"\"\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\n\n\"\"\"\nassert solution(\n    stdin = \"\"\"VUJWNJDQGKLSVCABX\n\n\"\"\"\nstdin = \"\"\"VUJWNJDQGKLSVCABX\n\n\"\"\"\nassert solution(\n    stdin = \"\"\"FJKLXQKMNRSTWYVVXY\n\n\"\"\"\nstdin = \"\"\"FJKLXQKMNRSTWYVVXY\n\n\"\"\"\nassert solution(\n    stdin = \"\"\"VVWFJKLXQKMNRSTWYVVXY\n\n\"\"\"\nstdin = \"\"\"VVWFJKLXQKMNRSTWYVVXY\n\n\"\"\"\nassert solution(\n    stdin = \"\"\"NJWUHLJKLXQKMNRSTWYVVXY\n\n\"\"\"\nstdin = \"\"\"NJWUHLJKLXQKMNRSTWYVVXY\n\n\"\"\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"Impossible\"\nassert solution(input2) == \"Impossible\"\nassert solution(input3) == \"Impossible\"\nassert solution(input4) == \"Impossible\"\nassert solution(input5) == \"Impossible\"\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"ab\") == \"Impossible\""
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '>'\n\nassert solution(stdin) == '<'\n\nassert solution(stdin) == '='\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \">\", \"Should be <\"\n\n\"\"\""
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3') == '3 2 1'\nassert solution('3 2 3 4') == '1 2 2'\nassert solution('1 2 3 4') == '3 2 3'\nassert solution('1 2 3 4') == '1 2 2'\nassert solution('1 2 3 4') == '1 2 3'\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\") == \">\"\nassert solution(\"5 6\") == \"=\"\nassert solution(\"6 6\") == \"<\"\nassert solution(\"6 6\") == \"=\"\nassert solution(\"6 6\") == \">\"\n\n\"\"\"\nimport math\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0') == '<'\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 8\") == \">\"\nassert solution(\"6 6\") == \"<\"\nassert solution(\"5 3\") == \"=\"\nassert solution(\"1000\") == \">\"\nassert solution(\"20 3\") == \">\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"=\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"=!\"\nassert solution(stdin) == \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \">\"\nassert solution(input()) == \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \">\"\nassert solution(\"6 5\") == \"=\"\nassert solution(\"6 6\") == \"<\"\nassert solution(\"10 3\") == \">=\"\nassert solution(\"10 6\") == \"=\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \">\"\n\n\n\"\"\""
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"4\"\nassert solution(\"3\") == \"5\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1,1) == 1\nassert solution(1,2) == 2\nassert solution(1,3) == 3\nassert solution(1,4) == 5\nassert solution(2,1) == 2\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 2) == 5\nassert solution(1, 2) == 1\nassert solution(2, 1) == 1\nassert solution(5, 2) == 2\n\n\"\"\"\n\nclass Solution:\n    def solution(self, r, h):\n        # 1. define a list of the balls we will take\n        ball_list = []\n\n        # 2. define an integer for the maximum number of balls we can take\n        max_ball_num = 0\n\n        # 3. define a count of the balls we will take\n        ball_num = 0\n\n        # 4. iterate over the h and r wall of the cupboard\n        for i in range(h+1):\n            # 4.1 iterate over the range of the two wall points\n            for j in range(r):\n                # 4.2 iterate over the half of the window\n                for k in range(2*(r-j)):\n                    # 4.3 iterate over the window\n                    for m in range(2*(r-j)):\n                        # 4.4 iterate over the window\n                        ball_list.append(m+j*k)\n                        # 4.5 iterate over the half of the window\n                        if (m+j*k) % 2 == 0:\n                            ball_num += 1\n                        # 4.6 iterate over the half of the window\n                        else:\n                            ball_num += 1\n\n        # 5. find the maximum number of balloons we can take\n        max_ball_num = ball_num\n\n        # 6. return the maximum number of balloons we can take\n        return max_ball_num"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == 3\nassert solution(\"2 2\") == 1\nassert solution(\"3 3\") == 1\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(a=1, b=2) == 3\nassert solution(a=1, b=3) == 1\nassert solution(a=2, b=2) == 2\n\n\nInput\n1 2\n\nOutput\n2\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input() == \"3\") == \"5\"\nassert solution(input() == \"2\") == \"2\"\nassert solution(input() == \"1\") == \"1\"\nassert solution(input() == \"0\") == \"0\"\nassert solution(input() == \"1\") == \"0\""
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp := (1, 1)) == 3, \"Xenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard.\"\nassert solution(inp := (1, 2)) == 2, \"Xenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard.\"\nassert solution(inp := (2, 1)) == 5, \"Xenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard.\"\nassert solution(inp := (2, 2)) == 2, \"Xenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard.\"\nassert solution(inp := (3, 1)) == 2, \"Xenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard.\"\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\""
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"7 3 7 3 20\"\n) == \"26\"\nassert solution(\n    \"7 9 3 1 8\"\n) == \"20\"\nassert solution(\n    \"10 10 10 10 10\"\n) == \"28\"\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('7 3 7 3 20') == '26'\nassert solution('7 9 3 1 8') == '28'\nassert solution('10 10 10 10 10') == '20'\nassert solution('10 10 10 10 10') == '20'\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 3 7 3 20\") == 26, 'expected 26, got {!r}'.format(26)\nassert solution(\"7 9 3 1 8\") == 28, 'expected 28, got {!r}'.format(28)\nassert solution(\"10 10 10 10 10\") == 20, 'expected 20, got {!r}'.format(20)\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 22\n\nassert solution(stdin) == 22\n\nassert solution(stdin) == 22\n\nassert solution(stdin) == 22\n\nassert solution(stdin) == 22"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7 3 7 3 20\") == 28\nassert solution(\"7 9 3 1 8\") == 20\nassert solution(\"10 10 10 10 10\") == 26\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n        stdin =\n        \"7 3 7 3 20\\n\"\n        ) == \"26\"\n\nassert solution(\n        stdin =\n        \"7 9 3 1 8\\n\"\n        ) == \"28\"\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"7 3 7 3 20\") == 26\nassert solution(\"7 9 3 1 8\") == 28\nassert solution(\"10 10 10 10 10\") == 20\n"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 26, 'expect 26'"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('7 3 7 3 20') == 26\nassert solution('7 9 3 1 8') == 28\nassert solution('10 10 10 10 10') == 26\nassert solution('10 10 10 10 10') == 28\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n'''"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '7'\n\nassert solution(stdin) == '10'\n\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '7'\n\n\n-----Bug-----\n\nIn the second sample Vasya has to visit only two checkpoints (distance is 12 - 7 = 5) and then to the point  - 10.\nVasya needs to visit only one checkpoint (distance is 12 - 7 = 5) so it is not possible to visit all the checkpoints. The function should return the minimum possible distance Vasya has to travel in order to visit at least n - 1 checkpoints.\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000,\n1 \u2264 x_1, x_2,..., x_{n} \u2264 10 000,\n0 \u2264 a < 10 000.\n\n\n-----Examples-----\nInput\n3 10\n1 7 12\n\nOutput\n7\n\nInput\n2 0\n11 -10\n\nOutput\n10\n\nInput\n5 0\n0 0 1000 0 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample Vasya has to visit at least two checkpoints. The optimal way to achieve this is the walk to the third checkpoints (distance is 12 - 10 = 2) and then proceed to the second one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\n\nIn the second sample it's enough to visit only one checkpoint so Vasya should just walk to the point  - 10.\nVasya needs to visit only one checkpoint (distance is 12 - 7 = 5) so it is not possible to visit all the checkpoints. The function should return the minimum possible distance Vasya has to travel in order to visit at least n - 1 checkpoints.\n\n\n------Medium ------\n\nFrom the first sample Vasya has to visit at least two checkpoints (distance is 12 - 10 = 2) and then the third one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\n\nFrom the second sample it's enough to visit only one checkpoint so Vasya should just walk to the point  - 10.\nVasya needs to visit only one checkpoint (distance is 12 - 7 = 5) so it is not possible to visit all the checkpoints. The function should return the minimum possible distance Vasya has to travel in order to visit at least n - 1 checkpoints.\n\n\n-----Brute-----\n\nInput\n3 10\n1 7 12\n\nOutput\n7\n\nInput\n2 0\n11 -10\n\nOutput\n10\n\nInput\n5 0\n0 0 1000 0 0\n\nOutput\n0\n\n\n\n-----Note-----\n\nIn the first sample Vasya has to visit at least two checkpoints. The optimal way to achieve this is the walk to the third checkpoints (distance is 12 - 10 = 2) and then proceed to the second one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\n\nIn the second sample it's enough to visit only one checkpoint so Vasya should just walk to the point  - 10.\nVasya needs to visit only one checkpoint (distance is 12 - 7 = 5) so it is not possible to visit all the checkpoints. The function should return the minimum possible distance Vasya has to travel in order to visit at least n - 1 checkpoints.\n\n\n-----Medium ------\n\nFrom the first sample Vasya has to visit at least two checkpoints (distance is 12 - 10 = 2) and then the third one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\n\nFrom the second sample it's enough to visit only one checkpoint so Vasya should just walk to the point  - 10.\nVasya needs to visit only one checkpoint (distance is 12 - 7 = 5) so it is not possible to visit all the checkpoints. The function should return the minimum possible distance Vasya has to travel in order to visit at least n - 1 checkpoints.\n\n\n-----Medium ------\n\nFrom the first sample Vasya has to visit at least two checkpoints (distance is 12 - 10 = 2) and then the third one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\n\nFrom the second sample it's enough to visit only one checkpoint so Vasya should just walk to the point  - 10.\nVasya needs to visit only one checkpoint (distance is 12 - 7 = 5) so it is not possible to visit all the checkpoints. The function should return the minimum possible distance Vasya has to travel in order to visit at least n - 1 checkpoints.\n\n\n-----Medium ------\n\nFrom the first sample Vasya has to visit at least two checkpoints (distance is 12 - 10 = 2) and then the third one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\n\nFrom the second sample it's enough to visit only one checkpoint so Vasya should just walk to the point  - 10.\nVasya needs to visit only one checkpoint (distance is 12 - 7 = 5) so it is not possible to visit all the checkpoints. The function should return the minimum possible distance Vasya has to travel in order to visit at least n - 1 checkpoints.\n\n\n-----Medium ------\n\nFrom the first sample Vasya has to visit at least two checkpoints (distance is 12 - 10 = 2) and then the third one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\n\nFrom the second sample it's enough to visit only one checkpoint so Vasya should just walk to the point  - 10.\nVasya needs to visit only one checkpoint (distance is 12 - 7 = 5) so it is not possible to visit all the checkpoints. The function should return the minimum possible distance Vasya has to travel in order to visit at least n - 1 checkpoints.\n\"\"\""
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7\"\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin):\n        n, a, b, n, x = list(map(int, stdin.split()))\n        return str(abs(a - b) + abs(x - n - 1))\n\n    def solve_prime(self, stdin):\n        n, x = list(map(int, stdin.split()))\n        # return str(abs(a - b) + abs(x - n - 1))\n        return str(abs(n - x))\n        \n        \n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\n\nOutput\n7\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7\"\n\nInput\n3 10\n1 7 12\n\nOutput\n7\n\nInput\n2 0\n11 -10\n\nOutput\n10\n\nInput\n5 0\n0 0 1000 0 0\n\nOutput\n0\n\n-----Note-----\n\nIn the first sample Vasya has to visit at least two checkpoints. The optimal way to achieve this is the walk to the third checkpoints (distance is 12 - 10 = 2) and then proceed to the second one (distance is 12 - 7 = 5). The total distance is equal to 2 + 5 = 7.\n\nIn the second sample it's enough to visit only one checkpoint so Vasya should just walk to the point  - 10.\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\n\n\n\n-----Constraints-----\n\n0 < stdin.length <= 100\n-10 < stdin[i] < stdin[i+1] < 100\n-10 < stdin[i+2] < stdin[i+3] < 100\nstdin.length < n\n1 <= n <= 10\n-10 < x_1, x_2,..., x_{n} < stdin[i]\nx_1 < x_2 <... < x_{n - 1}\n\n[input]\n\n[output]\n\nstr\n\n[input]\n\n2\n-10 -10\n0 0 1000 0 0\n\n[output]\n\n5\n\n[input]\n\n5\n0 0 1000 0 0\n0 0 1000 0 0\n1000 0 1000 0 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n1000 1000 1000 1000 0\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1\nassert solution(110) == 10\nassert solution(4) == -1"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2') == 1, '1'\nassert solution('3') == 2, '2'\nassert solution('5') == -1\nassert solution('10000') == 10, '10'"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('-4') == -1\n\n\n-----Constraints-----\n\n1 <= n <= 10^4\n1 <= x <= 10^9\n\n-----SAMPLE INPUTS-----\n\n2\n\n1\n\n--\n\n-----SAMPLE OUTPUTS-----\n\n-1\n\n\n-----DO NOT TOUCH ANY CODE BELOW THIS LINE -----\n\n'''"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '-1'\n\n-----Constraints-----\n1 <= n <= 10^18\n\n\n\n-----Time complexity-----\n\nO(n)\n\n\n\n-----Space complexity-----\n\nO(n)\n\n\"\"\""
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2) == 1\nassert solution(110) == 10\nassert solution(4) == -1\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1\" or solution(stdin) == \"10\"\nassert solution(stdin) == -1\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1\") == -1\nassert solution(\"10\") == 1\nassert solution(\"4\") == -1\n\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n\n0 <= stdin.length <= 10^9\n\nstdin contains only digits from 1 to 9 (with leading zeros ignored).\n\nAll the digits of n are in the range [1, 10^18].\n\n--- Nguyen Van Duc ---\n\n\"\"\"\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\n\n\n-----Algorithms-----\n\nLet's test your answer by solving this problem.\n\n1) you have to solve this problem using algorithm in %lld\n\n2) you have to test your answer by solving this problem using algorithm in %I\n\n3) you have to test your answer by solving this problem using algorithm in %c\n\n4) you have to test your answer by solving this problem using algorithm in %F\n\n\n-----Algorithm-----\n\n1) loop through the equation x^2 + s(x)\u00b7x - n = 0\n2) initialize counter for s(x)\n3) initally, loop through the equation x^2 + s(x)\u00b7x - n is one-time\n4) initally, if n = 0, then that is the solution\n5) the largest root of x^2 + s(x)\u00b7x - n is the smallest root of x^2 + s(x)\u00b7x\n6) if n is not 0, then loop through the equation x^2 + s(x)\u00b7x - n and compare it to the solution \n7) return the smaller solution\n"
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '1'\n\nassert solution(stdin) == '-1'"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '00:00'\nassert solution(stdin) == '23:00'\nassert solution(stdin) == '00:01'\nassert solution(stdin) == '00:01'\nassert solution(stdin) == '00:00'\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"00:00\"\n\nassert solution(stdin) == \"00:06\"\n\nassert solution(stdin) == \"00:00\"\nassert solution(stdin) == \"00:00\"\nassert solution(stdin) == \"23:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('00:00') == '00:00'\nassert solution('00:01') == '00:01'\nassert solution('00:02') == '00:02'\nassert solution('00:03') == '00:03'\nassert solution('00:04') == '00:04'\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"00:06\"\nassert solution(input()) == \"00:06\"\nassert solution(input()) == \"00:06\"\nassert solution(input()) == \"00:00\"\nassert solution(input()) == \"00:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"00:01\") == \"00:01\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"00:06\"\nassert solution(stdin) == \"00:00\"\nassert solution(stdin) == \"00:01\"\nassert solution(stdin) == \"23:00\"\nassert solution(stdin) == \"23:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"05:50\") == \"00:06\"\nassert solution(\"00:00\") == \"00:00\"\nassert solution(\"01:00\") == \"23:00\"\nassert solution(\"00:01\") == \"00:01\"\nassert solution(\"00:00\") == \"00:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"05:50\", \"05:44\", \"00:00\"]) == \"00:06\"\nassert solution([\"00:01\", \"00:00\", \"01:00\"]) == \"00:01\"\nassert solution([\"00:01\", \"00:00\"]) == \"00:01\"\nassert solution([\"00:01\", \"00:00\", \"01:00\", \"01:00\"]) == \"00:01\"\nassert solution([\"00:01\", \"00:00\", \"00:01\", \"00:01\"]) == \"00:01\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"00:00\"\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"00:06\"\nassert solution(stdin) == \"00:06\"\nassert solution(stdin) == \"23:00\"\nassert solution(stdin) == \"00:01\"\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, [1, 6, 6, 0]) == \"3\"\nassert solution(4, [1, 6, 0, 6]) == \"4\"\nassert solution(4, [1, 6, 6, 0]) == \"3\"\nassert solution(4, [1, 6, 0, 6]) == \"4\"\nassert solution(4, [1, 6, 0, 6]) == \"3\"\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"11 12\"\n\n\nclass Solution:\n    def solve(self, a: str) -> str:\n        def s(n):\n            arr = [0 for _ in range(n)]\n            arr[0] = a[0]\n            for i in range(1, n):\n                arr[i] = max(arr[i-1] + a[i], a[i])\n            return max(arr)\n        \n        \n        return str(s(len(a)))\n\n\"\"\"\nTestcase\nInput\n5\n6 1 6 6 0\n\nOutput\n2\n\nExplanation\nThe longest subsegment with maximum possible arithmetic mean is 5\nExplanation\nThe subsegment is [3, 4]\n\"\"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n-10^9 <= a_i <= 10^9\n$a_l, a_{l+1}, \\dots, a_r$\n$0 < a_i < 10^9$\n\n------Time complexity-----\nO(n)\n\n------Space complexity-----\nO(n)\n\nTime complexity:\n\nO(n) \u2014 space complexity:\n\nO(n) \u2014 time complexity:\n    \n    \n\"\"\""
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\"\"\"\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 2\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(a = [1, 2, 3, 4, 5, 6, 7]) == 12\n\n\"\"\"\nimport math\nimport sys\nsys.setrecursionlimit(10**9)"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n1 \u2264 n \u2264 10^5\n\n0 \u2264 a_i < 10^9\n\n1 \u2264 a_1, a_2, \\dots, a_n < 10^9\n\n-----Time Complexity-----\n\nO(n)\n\nO(n)\n\nO(n)\n\n2\n\n2\n\n2\n\nn\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('7') == 3\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input().split()) == '2'\nassert solution(input().split()) == '10'\nassert solution(input().split()) == '100'\nassert solution(input().split()) == '3'\nassert solution(input().split()) == '7'\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\n\"\"\""
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n      [\"1\", \"0\", \"1\", \"0\", \"1\"],\n      [\"1\", \"1\", \"1\", \"1\", \"0\"],\n      [\"1\", \"0\", \"0\", \"0\", \"1\"],\n      [\"1\", \"0\", \"0\", \"1\", \"1\"]\n      ]\n    ) == \"3\"\n\nExplanation\n\nInput\n\nn = 5\nk = 4\nm = 2\n\nOutput\n\n5\n\nInput\n\nn = 5\nk = 4\nm = 3\n\nOutput\n\n5\n\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"5\"\n\nInput\n3 3 0\n\nOutput\n3\n\nInput\n3 2 1\n\nOutput\n3\n\"\"\"\n\nclass Solution:\n    def countColorings(self, n: int, m: int, k: int) -> str:\n        # brute force:\n        # time: O(n^3)\n        # space: O(k)\n        if k < 0 or m < 0:\n            return ''\n        result = ''\n        for i in range(k, n+1):\n            count = 0\n            for j in range(m):\n                if i % (m-1) == j:\n                    count += 1\n                elif j % 2:\n                    count += 1\n            result += str(count)\n        return result[::-1]"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 4 3\") == \"4\"\nassert solution(\"1 4 0 0\") == \"4\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 3\") == \"4\"\nassert solution(\"2 2 0 0\") == \"2\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(sys.argv[1]) == '12'\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('{2,2,1}'), 'Not all colors differ'\nassert solution('{1,2,1}'), '1'\nassert solution('{3,1,1}'), '2'\nassert solution('{3,2,1}'), '3'\nassert solution('{1,1,2}'), '2'\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"2\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"4 4\") == \"1\"\nassert solution(\"5 5\") == \"1\"\n"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('2 3 0'), '1'\nassert solution('3 3 0'), '3'\nassert solution('3 2 1'), '3'\nassert solution('3 2 1'), '0'\nassert solution('3 3 0'), '1'"
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, 3, 2) == 2\nassert solution(5, 3, 1) == 3\nassert solution(5, 2, 2) == 4\nassert solution(5, 3, 1) == 3\nassert solution(5, 2, 1) == 3\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"YES\"\nassert solution(\"14144\") == \"NO\"\nassert solution(\"141414\") == \"YES\"\nassert solution(\"1411\") == \"NO\"\nassert solution(\"1\") == \"YES\"\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(10) == 'YES'\nassert solution(114114) == 'YES'\nassert solution(1111) == 'NO'\nassert solution(441231) == 'NO'"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"YES\"\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1111') == 'NO', 'n is not a magic number'\nassert solution('441231') == 'YES', 'n is not a magic number'\nassert solution('441231') == 'NO', 'n is not a magic number'\nassert solution('4441231') == 'YES', 'n is not a magic number'\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(11112) == \"YES\"\nassert solution(111111) == \"NO\"\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1111\") == \"NO\"\n\n\n----Examples----\n\nInput\n111122\n\nOutput\nYES\n\nInput\n111231\n\nOutput\nNO\n\n-----Examples-----\n\nInput\n60\n\nOutput\nNO\n\n-----Examples-----\n\nInput\n12\n\nOutput\nYES\n\nInput\n1554\n\nOutput\nNO\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"11234\") == \"YES\", \"Should return YES\"\nassert solution(\"441234\") == \"NO\", \"Should return NO\""
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1111\") == \"NO\", \"NO\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Poor Inna and pony!\"\n\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 7, 1, 3, 2, 2) == 2\nassert solution(5, 7, 1, 3, 2, 1) == 0\nassert solution(5, 7, 1, 3, 2, 4) == 2\nassert solution(5, 7, 1, 3, 2, 5) == 2\nassert solution(5, 7, 1, 3, 2, 7) == 0\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 4 1 2\") == \"2\"\nassert solution(\"1 3 1 3\") == \"Poor Inna and pony!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1, 2, 3, 4, 5, 6, 7, 8, 9) == \"Poor Inna and pony!\""
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\", \"7\", \"1\", \"3\", \"2\"]) == \"Poor Inna and pony!\"\nassert solution([\"5\", \"5\", \"1\", \"1\", \"1\"]) == \"Poor Inna and pony!\"\nassert solution([\"5\", \"5\", \"1\", \"1\", \"1\", \"1\"]) == \"Poor Inna and pony!\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 3 4 5 6') == '2'\nassert solution('1 3 4 5 6 7') == '1'\nassert solution('1 4 5 6 7 8') == '2'\nassert solution('1 1 1 1') == '1'\nassert solution('2 3 4 5 6') == 'Poor Inna and pony!'\n\"\"\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 5 1 2 3\"), \"Poor Inna and pony!\"\nassert solution(\"3 3 5 5 5\"), \"Poor Inna and pony!\"\n\n---"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"Poor Inna and pony!\", \"Example 1 failed\"\n\n\n-----Example-----\n\nInput\n2 2 2\n\nOutput\n2\n\nInput\n2 3 1\n\nOutput\nPoor Inna and pony!\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n1 \u2264 a, b \u2264 10^5\n1 \u2264 i, j \u2264 10^5\n1 \u2264 x, y \u2264 10^5\n\n--------Input sample-------\n\n2 2 2\n\nOutput\n2\n\nIn a single line print a single integer \u2014 the minimum number of moves needed to get the candy.\n\nIf Inna and the pony cannot get the candy playing by Dima's rules, print on a single line \"Poor Inna and pony!\" without the quotes.\n\nSample Tests\nInput\n1 2\n\nOutput\n1\n\nInput\n2 2\n\nOutput\n2\n\nInput\n3 3\n\nOutput\nPoor Inna and pony!\n\n\n-----Note-----\n\nNote to sample 1:\n\nInna and the pony can move the candy to position (1 + 2, 3 + 2) = (3, 5), from there they can move it to positions (3 - 2, 5 + 2) = (1, 7) and (3 + 2, 5 + 2) = (5, 7). These positions correspond to the corner squares of the chess board. Thus, the answer to the test sample equals two.\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Poor Inna and pony!\"\n\nOutput:\nPoor Inna and pony!\n\"\"\""
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 7 1 3 2 2\") == \"2\"\nassert solution(\"5 5 2 3 1 1\") == \"Poor Inna and pony!\""
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, [\"bacabcab\"]) == 4\nassert solution(6, [\"bcda\", \"abbbbb\"]) == 3\nassert solution(7, [\"bcda\", \"abbbbb\", \"bacabcab\"]) == 6\nassert solution(8, [\"bcda\", \"abbbbb\", \"bacabcab\", \"bacaba\"]) == 5\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(f\"{'a'}\") == 1\n\n\n-----Constraints-----\n\n1 <= $|s|$ <= 10^5\n$s$ is a valid string consisting of $s_i$ and $s_i$ are all lowercase letters.\n\nExample\nExample 1:\n\nInput\ns = \"dabcdeefghijklmno\"\n\nOutput\n4\n\nExample 2:\n\nInput\ns = \"aaabcde\"\n\nOutput\n2\n\n\n-----Constraints-----\n\n1 <= $|s|$ <= 10^5\n$s$ is a valid string consisting of $s_i$ and $s_i$ are all lowercase letters.\n\ntime limit per testcase = O(|s|)\nmemory limit per testcase = O(|s|)\n\n\n-----Tags: PSEUDOCODE-----\n\nclass Solution:\n    def solution(self, s: str) -> int:\n        c = set(list('abcdefghijklmnopqrstuvwxyz'))\n        # dict of index to letter\n        d = {}\n        for i, c in enumerate(list('abcdefghijklmnopqrstuvwxyz')):\n            d[i] = c\n        # move through all possible operations\n        moves = {}\n        for i in range(1, len(s)+1):\n            for c in list(s):\n                # only move if not in original alphabet\n                if c not in cnt.keys():\n                    moves[i] = c\n                    break\n                # move on to next iteration\n                else:\n                    # if letter in alphabet, move to next letter\n                    if c in cnt.keys():\n                        moves[i] = c\n                        cnt[c] += 1\n                        break\n        # increment counts if letter not in alphabet\n        for i in d.keys():\n            if i not in cnt.keys():\n                cnt[i] = 1\n        # print(cnt)\n        return max(cnt.values())\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"aab\") == 1\n\nassert solution(\"abab\") == 2\n\nassert solution(\"aabba\") == 3\n\nassert solution(\"bababa\") == 4\n\n\nassert solution(\"babbba\") == 5\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7, \"Problem 1: No\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10, \"failed\"\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == -1\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\""
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == solution(\"5 2 2 200 100 200 100 200 100 100 200\")\nassert solution == solution(\"5 3 5 100 50 50 100 100 100 100 100\")\nassert solution == solution(\"5 4 5 100 50 50 100 100 100 100 100\")\nassert solution == solution(\"1\")\nassert solution == solution(\"10\")\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '5'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '6 20'\nassert solution(inp) == '12 30'\nassert solution(inp) == '1240'\nassert solution(inp) == '1240'\nassert solution(inp) == '1240'\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\ns = 1,\nx_1 = 0,\nx_2 = 4,\nt_1 = 2,\nt_2 = 1\n) == 7\nassert solution(\ns = 1,\nx_1 = 0,\nx_2 = 4,\nt_1 = 2,\nt_2 = -1\n) == -1\nassert solution(\ns = 1,\nx_1 = 0,\nx_2 = 4,\nt_1 = 2,\nt_2 = 1\n) == 0\nassert solution(\ns = 1,\nx_1 = 0,\nx_2 = 4,\nt_1 = 2,\nt_2 = -1\n) == 2\nassert solution(\ns = 1,\nx_1 = 0,\nx_2 = 4,\nt_1 = 2,\nt_2 = 0\n) == 5\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"7\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 2 4\") == \"8\"\nassert solution(\"5 0 4\") == \"7\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('4 2 4') == '8'\nassert solution('5 4 0') == '7'\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"8\"\n\n### Solution: O(n)"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"5\",\"4\",\"2\",\"1\",\"0\"]) == \"7\"\nassert solution([\"3\",\"2\",\"4\",\"1\",\"3\"]) == \"7\"\nassert solution([\"4\",\"3\",\"2\",\"1\",\"3\"]) == \"7\"\nassert solution([\"2\",\"1\",\"4\",\"1\",\"4\"]) == \"7\"\nassert solution([\"3\",\"3\",\"1\",\"3\",\"0\"]) == \"7\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"4 1 0\"\n) == \"7\"\nassert solution(\n    \"1 1\"\n) == \"0\"\nassert solution(\n    \"2 1 0\"\n) == \"2\"\nassert solution(\n    \"2 2\"\n) == \"0\"\nassert solution(\n    \"2 2 2\"\n) == \"2\"\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"3\", \"1\"]) == \"7\"\nassert solution([\"3\", \"2\"]) == \"7\"\nassert solution([\"3\", \"2\", \"1\"]) == \"8\"\nassert solution([\"3\", \"2\", \"1\", \"4\"]) == \"5\"\nassert solution([\"3\", \"2\", \"1\", \"4\", \"5\"]) == \"7\"\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"0\"\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 6) == 2\nassert solution(6, 5) == 4\nassert solution(1, 1) == 0"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n0 \u2264 n, x \u2264 10^9\n\"\"\"\nimport math\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 5\") == 2\nassert solution(\"6 12\") == 4\nassert solution(\"5 13\") == 0\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 13'), 5\nassert solution('6 12'), 2\nassert solution('6 1'), 4\nassert solution('1 4'), 0\nassert solution('1 5'), 2\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"10 5\",\n    \"5\"\n) == \"2\"\n\nassert solution(\n    \"6 12\",\n    \"13\"\n) == \"0\"\n\nassert solution(\n    \"6 12\",\n    \"7\"\n) == \"0\"\n\nassert solution(\n    \"6 12\",\n    \"8\"\n) == \"2\"\n\nassert solution(\n    \"6 12\",\n    \"9\"\n) == \"2\""
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 5') == '2'\nassert solution('6 6') == '2'\nassert solution('5 13') == '0'\nassert solution('6 12') == '0'\nassert solution('5 1') == '1'\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4\") == 2\nassert solution(\"6 12\") == 4\nassert solution(\"6 13\") == 0\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= x <= 10^9\n\n'''\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(10, 1) == 2\nassert solution(6, 12) == 4\nassert solution(5, 13) == 0\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == 'java'\nassert solution(inp) == 'python'\nassert solution(inp) == 'phphp'\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'phphp'\n\n\"\"\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'java'\nassert solution(stdin) == 'python'\nassert solution(stdin) == 'phphp'\nassert solution(stdin) == 'java'\nassert solution(stdin) == 'python'\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"java\") == \"phphp\"\nassert solution(\"python\") == \"phphp\"\nassert solution(\"phphp\") == \"java\"\nassert solution(\"java\") == \"java\"\nassert solution(\"java\") == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'java'\nassert solution(input()) == 'python'\nassert solution(input()) == 'phphp'\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"6 6\") == \"java\"\nassert solution(\"5 2\") == \"python\"\nassert solution(\"7 5\") == \"phphp\"\nassert solution(\"1 3\") == \"java\"\nassert solution(\"1 5\") == \"java\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aabb\") == \"aabb\"\nassert solution(\"bb\") == \"bb\"\nassert solution(\"jj\") == \"jj\"\nassert solution(\"zzzzzzzzz\") == \"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 1\") == \"java\"\nassert solution(\"5 2\") == \"python\"\nassert solution(\"6 6\") == \"phphp\"\nassert solution(\"5 2\") == \"phphp\"\nassert solution(\"6 6\") == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 5\") == \"j\"\nassert solution(\"1 9\") == \"p\"\nassert solution(\"3 3\") == \"phphp\"\nassert solution(\"2 2\") == \"python\"\nassert solution(\"4 2\") == \"phphp\"\n"
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"0123456789\") == \"123456789\"\nassert solution(\"aa\") == \"aabb\"\nassert solution(\"abcde\") == \"abcdef\"\nassert solution(\"chaos\") == \"chaos\"\nassert solution(\"AB\") == \"ba\"\n"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n\n0 <= stdin.length <= 100\n\n0 <= x_1, x_2,..., x_{n} < 10^9\n\n1 <= stdin[i] < 10^9\n\n0 <= i < stdin.length\n\n\n-----Submissions-----\n\nSample Input\n\nSTDIN      Function\n-----      --------\n2 2 6 10\n\nSample Output\n\n1\n\nExplanation\n\nFirst we find the range of integer x_1, x_2,..., x_{n} so that we can find the first moment of the first collision of two particles of the collider.\n\nThen we find the range of integer x_i such that (x_i) = (x_1) + (x_2) + (x_{n}) * (10^-9) = 2^10.\n\n\n2\nL 40 50 60\n\nSample Input\n\nSTDIN        Function\n-----      --------\n6 5 6 10\n\nSample Output\n\n-1\n\nExplanation\n\nHere we can't find the number of microseconds before the first explosion of two particles of the collider.\n\n\n3\nL 50 40 60\n\nSample Input\n\nSTDIN        Function\n-----      --------\n6 5 6 10\n\nSample Output\n\n1\n\nExplanation\n\nHere, we can find the number of microseconds before the first explosion of two particles of the collider.\n\n\n4\nL 50 40 60\n\nSample Input\n\nSTDIN        Function\n-----      --------\n6 5 6 10\n\nSample Output\n\n-1\n\nExplanation\n\nNo two particles would be at the same point when they are colliding.\n\"\"\"\n"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '-1'"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-1'\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\nstdin has the numbers in the range 0 <= i < stdin.length\n\n------Challenge----\nCreate a new function called solution which accepts a string as an argument and return the number of milliseconds after the first explosion of any two particles which will be at the same point."
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n\nInput\n3\nRLLL\n1 1 2 10\n\nOutput\n1\n\nInput\n3\nLLRL\n3 1 6 10\n\nOutput\n-1\n\nInput\n3\nRLLL\n3 1 6 10\n\nOutput\n-1\n\"\"\""
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == str(-1)\n"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == -1\n\"\"\""
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"LRLRR\") == \"1\"\nassert solution(\"LLRRLLRLL\") == \"1\"\nassert solution(\"LRLRRRLRLL\") == \"1\"\nassert solution(\"RRRLLRLL\") == \"-1\"\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 10 9\"), \"1 2 3\"\nassert solution(\"4 2 3\"), \"2 3 4\"\nassert solution(\"3 2 3\"), \"2 3\"\nassert solution(\"3 4 5\"), \"3 4\"\nassert solution(\"3 6 6\"), \"3\"\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 2 2 1 2 1\\n3 1 2\\n2 2 1\\n1 1 2\\n1 2 2\"\n) == \"4\"\nassert solution(\n    \"6 6 6\\n5 3 5\\n5 5 5\\n6 6 6\\n8 7 8\"\n) == \"6\"\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\") == \"56\"\nassert solution(\"4 10 9\") == \"0\"\nassert solution(\"3 10 10\") == \"56\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"4 5 4\") == \"0\"\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 10 9\") == \"56\"\nassert solution(\"5 10 9\") == \"0\"\nassert solution(\"3 10 10\") == \"40\"\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 3 1') == '4'\nassert solution('2 5 9') == '20'\nassert solution('2 2 3') == '0'"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp := input().split()) == '75'\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '56'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 0 0\") == \"0 3\"\nassert solution(\"3 0 0\") == \"0 1\"\nassert solution(\"1 0 0\") == \"0 0\"\nassert solution(\"1 0 1\") == \"0 1\"\nassert solution(\"2 0 0\") == \"0 2\"\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0 3\""
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 1 0 2\") == \"1 1\"\nassert solution(\"2 1 0 2\") == \"1 3\"\nassert solution(\"2 1 0 2\") == \"1 2\"\nassert solution(\"2 1 0 2\") == \"1 2\"\nassert solution(\"2 1 0 2\") == \"1 3\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 300\n0 <= stdin[i] <= 100\n\n\n-----Algorithm-----\n\nA way to get around the problem:\n\n-This is the main problem.\n-With a small number of points, it can be solved by the following algorithm.\n-This algorithm has no graphical output.\n\nWe have to find the location of the point that is not on the boundary of the square, and write it in a format that can be used in this problem.\n\nSee the following example:\n\nFor example, the example of the square problem is:\n\n2\n0 0\n0 1\n0 2\n1 0\n1 1\n1 2\n2 0\n2 1\n2 2\n\nIn this example, we must identify the point that is not on the boundary of the square, which is the line at the bottom left corner.\n\nThe idea is that the coordinates are known for all points on the square.\n\nWe would use the following steps:\n\n-We need to identify the coordinate of the line at the bottom left corner.\n-We first take the \"point of the line\" and then we check if the point is on the boundary of the square.\n-If it is, we know the coordinates of the next point.\n-We then check if the next point is on the boundary of the square.\n-If it is, we know the coordinates of the next point.\n-We then check if the next point is on the boundary of the square.\n-If it is, we know the coordinates of the next point.\n\nHeidi has implemented a few simple algorithms to solve the problem, with a few additional consideration.\n\n------Author: Heidi Yang------\n\"\"\"\nimport math\nfrom sys import stdin"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0 3\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5\\n\") == \"3\\n\", \"Expected output: 2\\n Actual output: \" + str(solution(\"5\\n\"))\nassert solution(\"5\\n3\\n\") == \"1\\n\", \"Expected output: 1\\n Actual output: \" + str(solution(\"5\\n3\\n\"))\nassert solution(\"5\\n3\\n0\\n1\\n2\\n\") == \"3\\n\", \"Expected output: 3\\n Actual output: \" + str(solution(\"5\\n3\\n0\\n1\\n2\\n\"))\nassert solution(\"5\\n3\\n0\\n2\\n\") == \"0\\n\", \"Expected output: 0\\n Actual output: \" + str(solution(\"5\\n3\\n0\\n2\\n\"))\nassert solution(\"5\\n3\\n0\\n2\\n1\\n\") == \"1\\n\", \"Expected output: 1\\n Actual output: \" + str(solution(\"5\\n3\\n0\\n2\\n1\\n\"))\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0 3\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2 1\"\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0 3\"\n\nassert solution(stdin) == \"0 1\"\n\nassert solution(stdin) == \"0 2\"\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 5 10 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"389\") == \"216\", \"389\"\nassert solution(\"7\") == \"7\", \"7\"\nassert solution(\"9999999\") == \"387420489\", \"9999999\"\nassert solution(\"3\") == \"3\", \"3\"\nassert solution(\"4\") == \"4\", \"4\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '387420489'\nassert solution(stdin) == '387420489'\nassert solution(stdin) == '387420489'\nassert solution(stdin) == '387420489'\nassert solution(stdin) == '387420489'\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(string) == '387420489'\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^4\n\nTime Limit: 1sec\n\n\"\"\""
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"389\") == \"216\"\nassert solution(\"7\") == \"7\"\nassert solution(\"1000000000\") == \"387420489\"\n\nassert solution(\"3\") == \"9\"\nassert solution(\"9\") == \"9\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"78\") == \"37\"\nassert solution(\"230\") == \"37\"\nassert solution(\"54\") == \"55\"\nassert solution(\"3\") == \"3\"\nassert solution(\"9\") == \"9\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"387420489\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '387420489'\nassert solution(stdin) == '999999999'\nassert solution(stdin) == '2'\nassert solution(stdin) == '7'\nassert solution(stdin) == '1000000000'\n\n\n-----Constraints-----\n1 <= n <= 2^30\n\n\"\"\"\n\nclass Solution:\n    def findMaximumProduct(self, num: str) -> str:\n        num = num.replace('.', '', -1)\n        max, cur = 0, 0\n        for i in range(len(num) - 1, -1, -1):\n            cur = cur * 10 + int(num[i])\n            if cur > max:\n                max = cur\n        return str(max * cur)"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '387420489'\nassert solution(stdin) == '999'\nassert solution(stdin) == '1673194876'\n\n-----Constraints-----\n1 <= stdin.length <= 200\n0 <= n <= 10^9\n\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n\n-----Space complexity-----\nO(1)\n\n'''\n\nimport math\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"387420489\"\n\n\n------Constraints-----\n\n1 <= stdin.length <= 10^6\n\n0 <= $n$ <= $10^9$\n\n\n------Problems-------\n\nThe max product of digits in $n$ is the largest product that is not larger than the product of the digits in $n$ in reverse order.\n\n________________________________________________________________________________\n\n'''"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5') == '5'\nassert solution('5 1 1 5 1') == '5'\nassert solution('5 1 1 5 1') == '5'\nassert solution('5 1 1 5 1') == '5'\nassert solution('5 1 1 5 1') == '5'\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 3 5 3\") == \"5\"\nassert solution(\n    \"5 3 2 3\") == \"5\"\nassert solution(\n    \"1 1 1 1 5 1\") == \"0\"\nassert solution(\n    \"1 1 1 1 5 1\") == \"1\"\nassert solution(\n    \"2 2 3 2 2\") == \"3\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n\nfrom sys import stdin\n\nN = int(stdin.readline().strip())\nvotes = [int(stdin.readline().strip()) for _ in range(N)]\nk = 1\nfor i in range(N):\n    k = max(k, votes[i])\n\nprint(k)\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 3 3 1 2\") == \"3\"\nassert solution(\"5 3 3 5 2\") == \"5\"\nassert solution(\"5 1 1 1 5 1\") == \"5\"\nassert solution(\"5 2 2 3 2 2\") == \"5\"\nassert solution(\"3 2 2 2 3 2\") == \"3\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 3 4 4\") == \"4\"\nassert solution(\"2 2 3 2 2\") == \"2\"\nassert solution(\"1 1 1 5 1\") == \"5\"\n\n\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('5') == 5\nassert solution('5 3 1 1') == 5\nassert solution('1 2') == 3\nassert solution('1 3') == 2\nassert solution('2 2 3 2 2') == 8\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(aabb) == 2\nassert solution(aabcaa) == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution) == 2\nassert solution(solution) == 1\nassert solution(solution) == 0\nassert solution(solution) == 0\nassert solution(solution) == 0\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aabb\") == 2\nassert solution(\"aabcaa\") == 1\nassert solution(\"aaab\") == 0\nassert solution(\"aaab\") == 1\nassert solution(\"aabcaa\") == 0\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(aabb) == 2\nassert solution(aabcaa) == 1\n\n\n\"\"\"\nclass Solution:\n    def numberOfMatches(self, cardPoints: List[int]) -> int:\n        c = collections.Counter(cardPoints)\n        m, n = len(c), len(c)\n        res = 0\n        for i in range(1, m):\n            if c[i] - c[i - 1] <= 2:\n                res += 1\n        return res"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(aabb) == 2, 'Wrong answer'\nassert solution(aabcaa) == 1, 'Wrong answer'\nassert solution(aabcaa) == 0, 'Wrong answer'\nassert solution(aabcaa) == 3, 'Wrong answer'\nassert solution(aabcaa) == 4, 'Wrong answer'\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(aabb) == 1\nassert solution(aabcaa) == 1\nassert solution(aabcaa) == 1\nassert solution(aabcaa) == 1\nassert solution(aabcaa) == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(aabb) == 2\nassert solution(aabcaa) == 1\nassert solution(aabcaa) == 0\nassert solution(aabcaa) == 1\nassert solution(aabcaa) == 0\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(aabb) == 2\nassert solution(aabcaa) == 1\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('aabb') == 2\nassert solution('aabcaa') == 1\nassert solution('aabcaa') == 0\nassert solution('aa') == 0\nassert solution('aabcaa') == 0\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(aabb) == 2\nassert solution(aabcaa) == 1\nassert solution(aabcaa) == 0\nassert solution(aabcaa) == 0\nassert solution(aabcaa) == 0\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"3 3 2 3 3\") == \"2\"\nassert solution(\"2 1 3 3 3\") == \"1\"\nassert solution(\"3 3 2 3 1\") == \"1\"\nassert solution(\"3 3 2 2 3 3\") == \"3\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Submissions-----\n\nQuestion: You have a gift and you've got the answer for the two valid questions. Write an algorithm that will return the minimum number of triplets (i, j, k) which you need to make the gift with the minimum number of possible triplets possible (i < j < k) in order to have a minimum possible number of possible triplets possible.\n\ninput\n2\n1 2\noutput\n2\n\ninput\n2\n3 3\noutput\n1\n\ninput\n2\n1 2\noutput\n1\n\"\"\"\n\nclass Solution:\n    def get_min_number_of_triplets(self, a: List[int], b: List[int], c: List[int]) -> int:\n        \n        min_number_of_triplets = 0\n        \n        a.sort()\n        b.sort()\n        c.sort()\n        \n        n = len(a)\n        \n        for i in range(n-2):\n            if a[i] < b[i] and b[i] < c[i]:\n                min_number_of_triplets = i+1\n        \n        return min_number_of_triplets"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4\") == 4\nassert solution(\"5\") == 4\nassert solution(\"6\") == 1\nassert solution(\"\") == 0"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1\") == 2\nassert solution(\"1 3 2 3 4\") == 4\nassert solution(\"1 3 3 1 3 2\") == 1\nassert solution(\"1 3 3 1 3 2\") == 2\nassert solution(\"1 3 3 1 3 2\") == 0\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 1\") == \"2\"\nassert solution(\"1 3 3 1 3 2\") == \"1\"\nassert solution(\"1 4 1 1 1\") == \"1\"\nassert solution(\"1 4 3 3 3 2\") == \"1\"\nassert solution(\"1 4 3 3 3\") == \"1\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 3 2 3 4\") == \"4\"\nassert solution(\"1 3 3 1 3 2\") == \"2\"\nassert solution(\"1 3 3 1 3 2 3\") == \"1\"\nassert solution(\"1 3 3 1 3 2 3 4\") == \"2\"\nassert solution(\"1 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1') == 2\nassert solution('2') == 1\nassert solution('3') == 1\nassert solution('4') == 1\nassert solution('5') == 2\n\n\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == '3'\nassert solution(1) == '4'\nassert solution(2) == '5'\nassert solution(3) == '1'\nassert solution(4) == '2'\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2') == 2\nassert solution('4') == 5\nassert solution('0') == 1\nassert solution('2') == 2\nassert solution('2') == 2\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"5\"\n\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 5\n\nassert solution(input('{}'.format(__file__)))) == 5\n\"\"\""
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 5\nassert solution(3) == 4\nassert solution(0) == 0\nassert solution(1) == 1\nassert solution(4) == 2\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input=\n    \"3\"\n)\n\nassert solution(\n    input=\n    \"4\"\n)\n\nassert solution(\n    input=\n    \"5\"\n)\n\nassert solution(\n    input=\n    \"2\"\n)\n\nassert solution(\n    input=\n    \"1\"\n)"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input=\n    '2230'\n    ) == '2230'\nassert solution(\n    input=\n    '-100003'\n    ) == '0'\nassert solution(\n    input=\n    '-100003'\n    ) == 0\nassert solution(\n    input=\n    '11100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100100"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2230) == 2230\nassert solution(100003) == -100003\nassert solution(0) == 0\nassert solution(10000) == 10000\nassert solution(-10000) == -10000\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Bug-----\nIn the first test sample Ilya doesn't profit from using the present.\n\nIn the second test sample you can delete digit 1 and get the state of the account equal to -1.\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1) == -10000\n\n\nassert solution(11) == -10000\n\n\nassert solution(2147483647) == 0\n\n\nassert solution(1) == -10000\n\n\nassert solution(10) == -10000"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2230\n\"\"\"\n\nimport sys\n\nfrom collections import defaultdict\n\nclass Solution:\n    def findMaximum(self, n: int, state: str, allowedState: str) -> int:\n        ans = -1\n        mapping = defaultdict(int)\n        for state in allowedState:\n            mapping[state] = mapping[state] + 1\n        \n        state = 0\n        for letter in state:\n            state = int(state) - mapping[letter]\n        \n        while n:\n            mapping[state] -= 1\n            n -= 1\n        \n        return mapping[state]"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1234) == -12\nassert solution(5678) == 0\nassert solution(50000012345) == 0\nassert solution(123) == 0\nassert solution(1234567890) == 0\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n-----Time Limit-----\n\nO(n) for n = 2, 4, 5, 6, 7, 8, 9, 10, 11, 12\n\n-----Space Limit-----\n\n1 (n = 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n\n\"\"\"\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2230'\nassert solution(stdin) == '2230'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(9) == 0, \"9 is wrong\"\nassert solution(8) == -1, \"8 is wrong\"\nassert solution(5) == 0, \"5 is wrong\"\nassert solution(0) == -1, \"0 is wrong\"\nassert solution(2) == 0, \"2 is wrong\"\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 0\nassert solution(100003) == 10000\n\nassert solution(\"-100003\") == 10000\nassert solution(\"-9\") == 0\nassert solution(\"-0\") == 0\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('< >') == 'undefined'\nassert solution('^ >') == 'cw'\nassert solution('< ^') == 'ccw'\nassert solution('^ v') == 'ccw'\nassert solution('< ^') == 'cw'\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'ccw'\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"lll\") == \"cw\"\nassert solution(\"vvv\") == \"ccw\"\nassert solution(\"> ^\") == \"ccw\"\nassert solution(\"< v\") == \"ccw\"\nassert solution(\"vvvv\") == \"ccw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('< ^') == 'cw'\nassert solution('< ^') == 'ccw'\nassert solution('^ v') == 'undefined'\nassert solution('^ v') == 'undefined'\nassert solution('^ v') == 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"ccw\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'cw'\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"ccw\"\n\nassert solution(stdin) == \"cw\"\n\nassert solution(stdin) == \"undefined\"\n\nassert solution(stdin) == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 4 6\") == \"cw\"\nassert solution(\"1 3\") == \"ccw\"\nassert solution(\"3 2 3\") == \"undefined\"\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'cw'\nassert solution(stdin) == 'ccw'\nassert solution(stdin) == 'undefined'\n"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"< ^\", 0, 0, 0, 0, 0, 0, 0, 0) == \"cw\"\nassert solution(\"< ^\", 0, 0, 0, 0, 0, 0, 0, 0) == \"ccw\"\nassert solution(\"< ^\", 0, 0, 0, 0, 0, 0, 0, 0) == \"undefined\"\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"..L.R..L..\"), 5\nassert solution(\"..R..L..\"), 0\nassert solution(\"L.R..L..\"), 2\nassert solution(\"R.L..\"), 4\nassert solution(\"..L..\"), 4\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1L.R.L..L..R\"\n    ), 0\n\nassert solution(\n    \"R.L.R..L..L..R\"\n    ), 4\n\nassert solution(\n    \"R.L.R..L..L..R..\"\n    ), 0\n\nassert solution(\n    \"R.L.R..L..L..R..L..\"\n    ), 2\n\nassert solution(\n    \"R.L.R..L..L..R..L..L..L..R..R..R..L..R..L..\"\n    ), 2"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"R.L.L.L..\") == 0\nassert solution(\"..R..\") == 1\nassert solution(\"..L.R\") == 4\nassert solution(\"L.R\") == 0\nassert solution(\"L.L.R\") == 4\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,1) == 1\nassert solution(2,1) == 2\nassert solution(3,1) == 0\nassert solution(4,1) == 3\nassert solution(5,1) == 1\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(str) == 0, \"It's not an ideal solution.\"\nassert solution(str) == 1, \"It's not an ideal solution.\"\nassert solution(str) == 2, \"It's not an ideal solution.\"\nassert solution(str) == 3, \"It's not an ideal solution.\"\nassert solution(str) == 4, \"It's not an ideal solution.\"\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == inp\nassert solution(inp) == inp\nassert solution(inp) == inp\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"L.R.L..L..\") == 4\nassert solution(\"L..R..L..\") == 0\nassert solution(\"R..L..R..\") == 2\nassert solution(\"L..L..R..\") == 2\nassert solution(\"L.L.R..L..\") == 0\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5.L.R\") == 4, \"Wrong answer\"\nassert solution(\"5.R\") == 0, \"Wrong answer\"\nassert solution(\"2L.R\") == 1, \"Wrong answer\"\nassert solution(\"2.R\") == 0, \"Wrong answer\"\nassert solution(\"1.L.R\") == 1, \"Wrong answer\"\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0, \"The length of solution() is incorrect.\"\nassert solution(stdin) == 1, \"The length of solution() is incorrect.\"\nassert solution(stdin) == 2, \"The length of solution() is incorrect.\"\nassert solution(stdin) == 3, \"The length of solution() is incorrect.\"\nassert solution(stdin) == 4, \"The length of solution() is incorrect.\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 3 1 4 4\") == \"3 1 2 4\"\nassert solution(\"5 3 1 4 4\") == \"3 1 2 4\"\nassert solution(\"5 3 1 4 4\") == -1\n\nprint(\"The solution is: \" + str(solution(stdin)))\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3 1 2 4\"\nassert solution(input()) == \"-1\"\nassert solution(input()) == \"3 3 1 4 4\""
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, [2, 3, 1, 4, 4]) == \"-1\"\nassert solution(3, [2, 3, 1]) == 3\nassert solution(3, [2, 1, 3]) == 3\nassert solution(3, [2, 3, 1, 3]) == 3\nassert solution(3, [1, 3, 3]) == 5\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5\",\"3\",\"10\",\"15\",\"25\",\"25\",\"35\",\"40\"]) == \"-1\"\nassert solution([\"5\",\"3\",\"10\",\"15\",\"25\",\"25\",\"35\",\"40\"]) == \"3 1 2 4\"\nassert solution([\"5\",\"3\",\"10\",\"15\",\"25\",\"25\",\"35\",\"40\"]) == \"-1\"\nassert solution([\"3\",\"10\",\"15\",\"25\",\"25\",\"35\",\"40\"]) == \"3 1 2 4\"\nassert solution([\"3\",\"10\",\"15\",\"25\",\"25\",\"35\",\"40\"]) == \"-1\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"3\",\"2\",\"1\",\"4\"]) == \"1 2 4\"\nassert solution([\"3\",\"1\",\"2\",\"4\"]) == \"3 1 2 4\"\nassert solution([\"3\",\"1\",\"2\",\"4\"]) == \"3 1 4\"\nassert solution([\"3\",\"1\",\"2\",\"4\"]) == \"3 1 4\"\nassert solution([\"3\",\"1\",\"2\",\"4\"]) == \"4 1 3\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"))(\") == \"1 2 1 2\"\nassert solution(\"))(())\") == \"1 2 3 1 4\"\nassert solution(\"))((()\")) == \"1 3 5 4\"\nassert solution(\"))()(((\")) == \"1 1 2 3 4 5\"\n\n\"\"\""
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3, 2, 5) == 3\nassert solution(5, 4, 2, 1) == 1\nassert solution(10, 10, 10, 10) == -1\nassert solution(4, 4, 4, 2) == 2\nassert solution(0, 0, 0, 0) == -1\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(12, [3, 2, 1, 4]) == '3 1 2 4'\nassert solution(24, [3, 1, 2, 4]) == '3 1 2 4'\nassert solution(45, [3, 1, 2, 4]) == '3 1 2 4'\nassert solution(45, [3, 1, 2, 3]) == '3 1 2 3'\nassert solution(45, [3, 1, 2, 2]) == '3 1 2 2'\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin\n    ) == \"1 3 1 4\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 1 2 4\"\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3104\"\nassert solution(input) == \"9907000008001234\"\nassert solution(input) == \"9190\"\nassert solution(input) == \"9190\"\nassert solution(input) == \"9190\"\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1990 1) == 9190\nassert solution(300 0) == 300\nassert solution(1034 2) == 3104\nassert solution(9090000078001234 6) == 9907000008001234"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"9907000008001234\", \"The solution is incorrect\"\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('123456789') == '123456789'\nassert solution('1234567890123456789123456789') == '123456789'\nassert solution('0') == 0\nassert solution('0.0') == 0\nassert solution('00') == '0'\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1990, 1) == 919\nassert solution(300, 2) == 312\nassert solution(1034, 6) == 704\nassert solution(9090000078001234, 6) == 9907000008001234\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"9190\"\nassert solution(input) == \"300\"\nassert solution(input) == \"300\"\nassert solution(input) == \"3104\"\nassert solution(input) == \"9907000008001234\"\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"300\") == \"300\"\nassert solution(\"9\") == \"9\"\nassert solution(\"1\") == \"1\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"10000000\") == \"10000000\"\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 9190\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3104, \"No answer\"\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1990 1\") == \"9190\"\nassert solution(\"300 0\") == \"300\"\nassert solution(\"1034 2\") == \"300\"\nassert solution(\"9090000078001234 6\") == \"9907000008001234\""
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 334 667 1000') == '-12'\nassert solution('2 1 966 3') == '-13'\nassert solution('2 1 966 13') == '-17'\nassert solution('1 334 667 1000') == '-42'\nassert solution('1 335 728 604') == '-42'\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 1333\nassert solution(stdin) == 42\n\n\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n0 < stdin[i] < 10^5\n\n[input] array.integer stdin\n\n0 < stdin[i] < 10^5\n\n[output] integer\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n        \"1 100 10 100 100\"\n    ) == \"11\"\nassert solution(\n        \"9 38 56 42 77 69\"\n    ) == \"13\"\nassert solution(\n        \"1\"\n    ) == 42\nassert solution(\n        \"3 2\"\n    ) == 37\n\n\n------User input------\n\nInput\n3\n4\n5\nOutput\n-1\n\n\nInput\n3\n1\n8\nOutput\n0\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 2\nassert solution(5) == 6\nassert solution(5) == 12\nassert solution(13) == 12\nassert solution(42) == 42\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 1\") == \"-1\"\nassert solution(\"1 3 4\") == \"45\"\nassert solution(\"2 4 6\") == \"-2\"\nassert solution(\"1 4 2\") == \"2\"\nassert solution(\"2 6 12 4\") == \"3\"\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"42\"\n\"\"\"\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 42\n\"\"\""
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 12\nassert solution(4) == 13\nassert solution(4) == 15\nassert solution(6) == 19\nassert solution(5) == 42\n\n\n\n-----Alternatives-----\n\nInput\n1 3 2 4\n\nOutput\n-3\n\n\nInput\n8 4 2 3 4\n\nOutput\n-3\n\n\nInput\n6 2 4 3 5\n\nOutput\n-5\n\n\nInput\n6 4 5 3 6\n\nOutput\n-4\n\n\nInput\n9 3 2 4 5 6\n\nOutput\n-5\n\n\nInput\n6 9 3 5 2 4\n\nOutput\n-4\n\n\n\"\"\""
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"4 345 789 2 345 667\"\n) == \"3\"\nassert solution(\n    \"3 5 42 3 1 3\"\n) == \"4\"\nassert solution(\n    \"1 5 3 4 1\"\n) == \"2\"\nassert solution(\n    \"1 3 3\"\n) == \"3\"\nassert solution(\n    \"2\"\n) == \"2\"\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 2) == 0\nassert solution(3, 3) == 0\nassert solution(3, 4) == -1\nassert solution(3, -1) == 0\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n\n\"\"\""
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1 1 1\") == 4\nassert solution(\"4 2\") == 2\nassert solution(\"2 2\") == 1\nassert solution(\"1 2 1\") == 2\nassert solution(\"2 2\") == 2\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(f) == \"4\"\nassert solution(g) == \"5\"\nassert solution(h) == \"4\"\nassert solution(i) == \"5\"\nassert solution(j) == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"\"\"1 2 3 2 3\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n        stdin=\"./input.txt\",\n        process=lambda lst: sum([lst[i] - lst[i+1] for i in range(len(lst) - 1)])\n) == 11\n\"\"\""
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test_cases[0]) == 4, \"test_cases[0] is not correct\"\nassert solution(test_cases[1]) == 4, \"test_cases[1] is not correct\"\nassert solution(test_cases[2]) == 8, \"test_cases[2] is not correct\"\nassert solution(test_cases[3]) == 5, \"test_cases[3] is not correct\"\nassert solution(test_cases[4]) == 8, \"test_cases[4] is not correct\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 4\n\"\"\""
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 4 6\") == \"L\"\nassert solution(\"3 3 3\") == \"L\"\nassert solution(\"2 4 4\") == \"L\"\nassert solution(\"2 3 2\") == \"R\"\nassert solution(\"1 3 0\") == \"R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"R\"\n\n\n-----Advanced-----\nWrite an algorithm that takes as input a string of N numbers from 1 to N. The numbers consist of a comma separated list of numbers. The first line contains a single integer, N, which can be:\n\n1. An integer, for example, the number of lanes, the number of desks in each lane.\n\n2. An integer, for example, the number of places on each lane.\n\nIn the next line, each line contains one integer, the number of places on the left and the number of places on the right.\n\nWrite an algorithm that reads from stdin the strings, where each string is a number separated by a comma. For example, the string of 5, 2, 1, 6 would be 1 2 3 4 5. The first example explains the input.\n\n>>> solution(stdin)\n'3'\n\n>>> solution(stdin)\n'1'\n\n>>> solution(stdin)\n'1,2'\n\n>>> solution(stdin)\n'1,2,3'\n\n>>> solution(stdin)\n'1,3'\n\n>>> solution(stdin)\n'1,2,3,4'\n\n>>> solution(stdin)\n'1,2,3,4,5'\n\n>>> solution(stdin)\n'5,6'\n\n>>> solution(stdin)\n'5,6,7,8,9'\n\n>>> solution(stdin)\n'1,3,4,5,6,7,8,9'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10'\n\n>>> solution(stdin)\n'2'\n\n>>> solution(stdin)\n'6,7,8,9,10'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11,12'\n\n>>> solution(stdin)\n'4,5,6,7,8,9,10,11,12'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11,12,13'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11,12,13,14'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11,12,13,14,15'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22'\n\n>>> solution(stdin)\n'1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"R\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 2 2') == '2 1'\nassert solution('4 3 24') == '4 1'\nassert solution('2 4 4') == '1 2'\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 3') == 'R'\nassert solution('2 3') == 'L'\nassert solution('1 3') == 'R'\nassert solution('1 3 4') == 'R'\nassert solution('1 3 24') == 'R'\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 3 4 5 6\") == \"2 1 R\"\nassert solution(\"2 4 8 6 7\") == \"2 1 R\"\nassert solution(\"4 4 3 4 5\") == \"2 1 R\"\nassert solution(\"4 4 4 3 4\") == \"1 1 R\"\nassert solution(\"4 4 4 4 4\") == \"1 1 R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 4\") == \"2 R\"\nassert solution(\"1 3 4\") == \"1 L\"\nassert solution(\"2 3 2\") == \"2 R\"\nassert solution(\"1 3 7\") == \"2 R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"R\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"R\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2 2 R\"\nassert solution(stdin) == \"2 2 L\"\nassert solution(stdin) == \"1 1 L\"\nassert solution(stdin) == \"1 1 R\"\nassert solution(stdin) == \"3 3 L\"\n"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'R'\nassert solution(stdin) == 'L'\nassert solution(stdin) == 'S'\nassert solution(stdin) == 'S'\nassert solution(stdin) == 'S'\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n5\n\"\"\") == \"\"\"GGRR\"\"\"\nassert solution(\"\"\"\n2\n\"\"\") == \"\"\nassert solution(\"\"\"\n3\n\"\"\") == \"GRRR\"\"\"\nassert solution(\"\"\"\n2\n\"\"\") == \"\"\nassert solution(\"\"\"\n5\n\"\"\") == \"BR\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"GGRBBR\"\n\n'''"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"BBRBBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBRBR"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'B'\nassert solution(input()) == 'G'\nassert solution(input()) == 'BR'\nassert solution(input()) == 'GRG'"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"B\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == \"G\"\nassert solution(3) == \"B\"\nassert solution(5) == \"BR\"\nassert solution(6) == \"B\"\nassert solution(10) == \"GRG\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"R\") == \"G\", \"R is not a possible color\"\nassert solution(\"G\") == \"G\", \"G is not a possible color\"\nassert solution(\"B\") == \"R\", \"B is not a possible color\"\nassert solution(\"BB\") == \"G\", \"BB is not a possible color\"\nassert solution(\"GG\") == \"G\", \"GG is not a possible color\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('RRGBB') == 'BR'\nassert solution('R') == 'G'\nassert solution('GBB') == 'GR'\n\n\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"B\") == \"GRBGRR\"\nassert solution(\"BBBBB\") == \"GRBGGR\"\nassert solution(\"BBBBBBBBB\") == \"GRBGGRRB\"\nassert solution(\"R\") == \"BRBGR\"\nassert solution(\"RB\") == \"GRRBB\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == [\"B\", \"G\", \"R\", \"R\", \"G\", \"B\", \"G\", \"R\", \"R\", \"R\"]\nassert solution(stdin) == [\"B\", \"G\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"G\", \"B\"]\nassert solution(stdin) == [\"B\", \"G\", \"R\", \"G\", \"G\", \"G\", \"R\", \"R\", \"G\", \"R\"]\nassert solution(stdin) == [\"B\", \"G\", \"R\", \"R\", \"G\", \"R\", \"R\", \"G\", \"R\", \"R\"]\nassert solution(stdin) == [\"B\", \"G\", \"R\", \"R\", \"G\", \"G\", \"R\", \"R\", \"G\", \"R\"]\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n\n-----See Also-----\n\nhttps://practice.geeksforgeeks.org/problems/solution-to-find-all-possible-combinations/1\nhttps://practice.geeksforgeeks.org/problems/solution-to-find-all-possible-combinations/2\nhttps://www.geeksforgeeks.org/solution-to-find-all-possible-combinations/0\n\n---------------SOLUTION------------------\n\nimport sys\nimport heapq"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n\nimport math\nimport sys\nimport random\nimport string\nimport operator\nimport collections\nfrom itertools import permutations\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n\"\"\"\n\nimport numpy as np\nfrom collections import deque"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\n\nprint(\"OK\")\n-----Testcase-----\ninput:\n8\n1 2\n1 3\n2 4\n2 5\n2 6\n2 7\n3 6\n3 7\nOutput:\nYES\n0 0\n1 0\n0 1\n2 0\n1 -1\n-1 1\n0 2\n1 -1\n-1 1\n0 2\nOutput:\nNO\n\nInput:\n5\n1 2\n1 3\n2 4\n2 5\n3 4\n3 5\nOutput:\nNO\n\nTestcase:\nInput:\n3\n1 2\n2 3\n3 4\nOutput:\nNO\n'''"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"NO\"\n\n\n-----Constraints-----\n1 <= n <= 10^9\n-10^18 <= u_{i}, v_{i} <= 10^18\nEach edge of the tree is from 1 to n - 1.\n\n------Time complexity------\nO(n + m)\n\nO(n + m)\n\"\"\"\n\nclass Solution:\n    def arrangeCoins(self, n: int) -> int:\n        \n        def solve(n, x):\n            if n == 0:\n                return x\n            if n % 3 == 0:\n                return x + solve(n//3, x)\n            else:\n                return x + solve(n//3, x) + solve(n//3 * (n%3), x)\n            \n        return solve(n, 1)"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"7\",\"1\",\"2\",\"2\",\"3\",\"3\",\"6\",\"6\",\"7\"]) == \"YES\"\nassert solution([\"6\",\"6\",\"5\",\"4\",\"4\",\"3\",\"3\",\"2\",\"1\"]) == \"NO\"\nassert solution([\"4\",\"3\",\"3\",\"2\",\"1\",\"1\",\"2\",\"2\",\"0\"]) == \"YES\"\nassert solution([\"4\",\"2\",\"3\",\"4\",\"5\",\"3\",\"5\",\"3\",\"4\"]) == \"YES\"\nassert solution([\"3\",\"4\",\"5\",\"3\",\"4\",\"5\",\"3\",\"4\",\"5\"]) == \"NO\"\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= u_{i}, v_{i} <= n\n-1 <= x_{i}, y_{i} <= 10^18\n\n\n-----Time complexity-----\nO(N*log(N))\n\nO(N)"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"NO\"\n-----Constraints-----\n0 <= n <= 30\n\n1 <= u_i, v_i <= n\n\n1 <= x_i, y_i < 10^18\n\n------Basic Cases-----\n\nInput\n1\n0 0 0 0 1 0\nOutput\nYES\n0 1 0\n\nInput\n1\n0 0 0 1 0\nOutput\nNO\n\nInput\n1\n0 0 0 1 0\nOutput\nNO\n\"\"\""
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(input())) == str(int(str(input())/10))\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"1 3\"\n) == \"7\"\nassert solution(\n    \"5 14\"\n) == \"105\"\nassert solution(\n    \"88005553535 99999999999\"\n) == \"761141116\""
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 761141116"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 761141116\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(0, 0) == 0\nassert solution(0, 1) == 1\nassert solution(1, 0) == 7\nassert solution(1, 1) == 0\nassert solution(2, 0) == 2\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 761141116\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"7\"\nassert solution(inp) == \"105\"\n\n\n-----Time complexity-----\n\nO(l + r)\n\nO(l + r)\n\nO(l + r)\n\nO(1)\n\nO(1)\n\nO(1)\n\nO(1)\n\n\n-----Space complexity-----\n\nO(1)\n\nO(1)\n\nO(1)\n\nO(1)\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7, 'Fail'\n\n-----Constraints-----\n\n1 <= stdin.length <= 2 * 10^4\n1 <= stdin[i] <= 10^9\n\n1 <= l, r <= 10^18\n\nSample Input\n\n3 1\n\nSample Output\n\n7\n\"\"\"\n\nclass Solution:\n    def sumRange(self, start, end):\n        pass"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1, 5) == 7\nassert solution(1, 6) == 9\nassert solution(2, 1) == 2\nassert solution(2, 4) == 10\nassert solution(2, 7) == 11\n"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == str(sum([int(n) for n in inp.split()]))\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 1 1 1 1 0\") == \"Yes\"\nassert solution(\"1 1 0 0 1000 1000\") == \"No\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"No\"\nassert solution(\"1 0 0 0 0 0 0 0 0 0\") == \"No\"\nassert solution(\"1 0 0 0 0 0 0 0 0 0\") == \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == \"Yes\", \"solution(0)\"\nassert solution(1) == \"No\", \"solution(1)\"\nassert solution(2) == \"No\", \"solution(2)\"\nassert solution(3) == \"Yes\", \"solution(3)\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\"]) == \"Yes\"\nassert solution([\"0 1 1 1 1\", \"1 0 0 1000 1000\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\"]) == \"Yes\"\nassert solution([\"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\"]) == \"Yes\"\nassert solution([\"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\"]) == \"No\"\nassert solution([\"0 1 1 1 1 0\", \"1 0 0 1000 1000\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\", \"0.5 0.5 0.5\"]) == \"No\"\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'No'\n\"\"\""
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \n    \"0 1 1 1 1 0\"\n    )\nassert solution(\n    \"1 1 0 0 1000 1000\"\n    )\nassert solution(\n    \"1 1 0 0 1000 1000\"\n    ) == \"No\"\n\"\"\""
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"No\"\n\nInput\n1 1 0 0 1000 1000\n\nOutput\nYes\n\nInput\n1 1 1 1 1 0\n\nOutput\nYes\n\nInput\n1 1 0 1 0 1000 1000\n\nOutput\nNo\n\n'''\n\nimport math\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"No\""
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nassert solution(stdin) == 6\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4'\n\n\n\nNOTE:\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct\n\n----> the input is correct"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == str(4)\n\n-----Test Cases-----\nTest 1:\nInput:\n5 2\n1 1 2 2 4\n\nOutput:\n4\n\nTest 2:\nInput:\n5 3\n1 1 6 4 5\n\nOutput:\n6\n\nTest 3:\nInput:\n5 2\n1 1 2 2 4\n\nOutput:\n2\n\nTest 4:\nInput:\n3 2\n1 2\n1 2 3 2 4\n\nOutput:\n1\n\n-----Constraints-----\n1 \u2264 n \u2264 10^5\n1 \u2264 k \u2264 2\u00b710^5\n\nTime Limit: 1 second\nMemory Limit: 16 megabytes\n\n-----SAMPLE Input-----\n5 2\n1 1 2 2 4\n\n5 3\n1 1 6 4 5\n\n5 3\n1 1 6 4 5\n\n5 3\n1 1 6 4 5\n\n5 3\n1 1 6 4 5\n\n5 3\n1 1 6 4 5\n\n5 3\n1 1 6 4 5\n\nn = 2\u00b710^5\nk = 2\u00b710^5\n\n------SAMPLE Output-----\n\n4\n\n-----SAMPLE Input-----\n5 3\n1 1 2 2 4\n\n5 3\n1 1 6 4 5\n\n5 3\n1 1 6 4 5\n\n5 3\n1 1 6 4 5\n\n5 3\n1 1 6 4 5\n\nn = 2\u00b710^5\nk = 2\u00b710^5\n\n-----SAMPLE Output-----\n\n1\n\n-----SAMPLE Input-----\n3 3\n1 1 2 2 3\n\n3 3\n1 1 2 2 4\n\n3 3\n1 1 2 2 3\n\n3 3\n1 1 2 2 4\n\nn = 2\u00b710^5\nk = 2\u00b710^5\n\n-----SAMPLE Output-----\n\n6\n\n-----SAMPLE Input-----\n10 3\n1 1 2 2 4\n\n10 3\n1 1 2 2 3\n\n10 3\n1 1 2 2 4\n\n10 3\n1 1 2 2 4\n\n10 3\n1 1 2 2 3\n\n10 3\n1 1 2 2 4\n\nn = 2\u00b710^5\nk = 2\u00b710^5\n\n-----SAMPLE Output-----\n\n2\n\n\"\"\""
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n'''"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"6\""
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\n\n\n-----Brute force-----\n\nimport time\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin), \"Empty Input\"\nassert solution(stdin), \"Empty Input\"\nassert solution(stdin), \"Empty Input\"\nassert solution(stdin), \"Empty Input\"\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"Not implemented\"\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 27, \"Not possible\"\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 1 1\") == 27\nassert solution(\"3 0 3\") == 26\n\"\"\""
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"27\"\nassert solution(stdin) == \"26\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 2\u00b710^5, 1 \u2264 a \u2264 20, 1 \u2264 b \u2264 2\u00b710^5\n\nTime Limit: 30 seconds\n\nSpace Limit: 50 megabytes\n\n--- Nguyen Van Duc ---"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"27\"\nassert solution(stdin) == \"26\""
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 27\n\nAssume that we can only use one spells.\nassert solution(stdin) == 26\n\n\"\"\"\n\nn, a, b = map(int, input().split())\nhp = list(map(int, input().split()))\ndmg = list(map(int, input().split()))\n\nmin_hp = min(hp)\nmax_hp = max(hp)\n\nmax_dmg = max(dmg)\n\nsum_hp = sum(hp)\nsum_dmg = sum(dmg)\n\nmod_hp = sum_hp // max_hp\nmod_dmg = sum_dmg // max_dmg\n\nans = sum_hp * max_dmg"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 27, \"solution() should return 27.\"\nassert solution(stdin) == 26, \"solution() should return 26.\"\nassert solution(stdin) == 29, \"solution() should return 29.\"\nassert solution(stdin) == 24, \"solution() should return 24.\"\nassert solution(stdin) == 23, \"solution() should return 23.\"\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 27\nassert solution(\"10 20 4\") == 26\nassert solution(\"10 6\") == 26\nassert solution(\"10 8\") == 28\nassert solution(\"10 15\") == 27\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 27, \"Max can't reach maximum total damage in that way\"\n\nassert solution(stdin) == 26, \"Max can't reach maximum total damage in that way\"\n\n\n\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n###\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 27\n"
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 27, \"The answer should be 27.\"\nassert solution(stdin) == 26, \"The answer should be 26.\"\nassert solution(stdin) == 14, \"The answer should be 14.\"\nassert solution(stdin) == 14, \"The answer should be 14.\"\nassert solution(stdin) == 2, \"The answer should be 2.\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    f\n    ) == \"IMPOSSIBLE\"\n\n    \n\nInput\n4\n**\n**\n**\n**\n\"\"\"\nimport sys\nfrom collections import defaultdict"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\",\"3\",\"*\",\"*\",\".\", \".\", \".\"]) == \"IMPOSSIBLE\"\nassert solution([\"5\",\"6\",\"*\",\".\", \".\", \"X\", \".\"]) == \"DLDDLLLRRRUURU\"\nassert solution([\"3\",\"*\",\"X\",\".\", \".\", \".\", \"*\"]) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('0.01') == \"IMPOSSIBLE\", \"Error: solution() should return IMPOSSIBLE\"\nassert solution('2.0.001') == \"DLLRRLRUURU\", \"Error: solution() should return DLLRRLRUURU\"\nassert solution('2.0011') == \"IMPOSSIBLE\", \"Error: solution() should return IMPOSSIBLE\"\nassert solution('2.3') == \"IMPOSSIBLE\", \"Error: solution() should return IMPOSSIBLE\"\nassert solution('2.5.5') == \"IMPOSSIBLE\", \"Error: solution() should return IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('') == 'IMPOSSIBLE'\nassert solution('.') == 'IMPOSSIBLE'\nassert solution('**') == 'IMPOSSIBLE'\nassert solution('X') == 'IMPOSSIBLE'\nassert solution('*') == 'IMPOSSIBLE'\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"RL\"\n\nassert solution(input()) == \"IMPOSSIBLE\"\n\nassert solution(input()) == \"DLDDLLLRRRUURU\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"*.X.X.X.X.X.X\") == \"IMPOSSIBLE\"\nassert solution(\"L..*X.X.X.X.X.X\") == \"IMPOSSIBLE\"\nassert solution(\"L..**X.X.X.X.X.X\") == \"IMPOSSIBLE\"\nassert solution(\"L..X*X.X.X.X.X.X\") == \"IMPOSSIBLE\"\nassert solution(\"L..X*X.X.X.X.X.X\") == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    '2 3 2'\n) == 'RL'\nassert solution(\n    '5 6 14'\n) == 'IMPOSSIBLE'\n\"\"\"\n\nfrom collections import defaultdict"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n\"\"\""
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"DLDDLLLRRRUURU\"\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == 1\nassert solution(\"2 3\") == 3\nassert solution(\"3 1\") == 2\nassert solution(\"3 6\") == 1\nassert solution(\"1 8\") == 1\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 5\") == \"1\"\nassert solution(\"2 6\") == \"3\"\nassert solution(\"3 7\") == \"1\"\nassert solution(\"4 8\") == \"1\"\nassert solution(\"5 9\") == \"1\"\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2 1) == 2\nassert solution(10 7) == 6\nassert solution(1000000000000 1) == 1\n\n\n\n[GitHub]\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin):\n        a, b = map(int, stdin.split())\n\n        if a >= b:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), \"The solution to the problem does not exist\"\nassert solution(stdin), \"The solution to the problem does not exist\"\nassert solution(stdin), \"The solution to the problem does not exist\"\nassert solution(stdin), \"The solution to the problem does not exist\"\nassert solution(stdin), \"The solution to the problem does not exist\"\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n0 \u2264 a, b \u2264 1,000,000\n\n[input]\n\na: an integer (1 \u2264 a \u2264 10^12)\n\nb: an integer (1 \u2264 b \u2264 10^12)\n\n\n[output]\n\na: an integer (1 \u2264 a \u2264 10^12)\n\n\n[example]\na = 1\nb = 10\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1, \"1 solution not found\"\nassert solution(stdin) == 3, \"3 solutions not found\"\nassert solution(stdin) == 10, \"10 solutions not found\"\nassert solution(stdin) == 26, \"26 solutions not found\"\nassert solution(stdin) == 71, \"71 solutions not found\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 2 3 4\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"5 4 3 1\"\nassert solution(stdin) == \"1 4 3 4 5\"\nassert solution(stdin) == \"5 4 5 3 1\"\n\n\n-----Solution-----\nInput\n5\n4 4 2 3 1\n5 4 5 3 1\nOutput\n5 4 5 3 1\n\nInput\n4\n1 1 3 4\n1 4 3 4\n\nOutput\n5 4 5 3 1\n\nInput\n4\n1 1 2 3\n1 2 5 4\n1 4 3 4\nOutput\n1 2 3 4\n\n\n\n-----Solution-----\nInput\n5\n1 2 3 4\n1 3 2 4\n1 4 2 3\n1 3 4 2\n1 4 5 3\n1 5 4 3\n1 6 4 2\nOutput\n1 2 3 4\n1 3 2 4\n1 4 2 3\n1 5 4 3\n1 6 4 2\n\nInput\n4\n1 1 2 3\n1 3 2 4\n1 4 2 3\n1 5 4 3\n1 6 4 2\n1 7 4 3\n1 8 4 2\n1 9 5 3\nOutput\n1 2 3 4\n1 3 2 4\n1 4 2 3\n1 5 4 3\n1 6 4 2\n1 7 4 3\n1 8 4 2\n1 9 5 3\n1 10 5 3\n\nInput\n4\n1 1 2 3\n1 2 3 4\n1 3 2 4\n1 4 2 3\n1 5 4 3\n1 6 4 2\n1 7 4 3\n1 8 4 2\n1 9 5 3\n1 10 5 3\nOutput\n1 2 3 4\n1 3 2 4\n1 4 2 3\n1 5 4 3\n1 6 4 2\n1 7 4 3\n1 8 4 2\n1 9 5 3\n1 10 5 3\n\n\"\"\""
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1 2 3 4'\n\nassert solution(input()) == '1 2 5 4'\n\nassert solution(input()) == '5 4 2 3 1'\n\nassert solution(input()) == '5 4 5 3 1'\n\n\"\"\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"5 4 2 3 1\"\nassert solution(input()) == \"5 1 4 3\"\nassert solution(input()) == \"5 2 3 1\"\nassert solution(input()) == \"5 3 1\"\nassert solution(input()) == \"5 4 1\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 2 3 4\"\n\nassert solution(stdin) == \"5 4 2 3\"\n\nassert solution(stdin) == \"4 4 2 3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"4 4 2 3 1\"\n\n-----Advanced-----\n\nInput\n\n10\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n0 0"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1 2 3 4 3 1'\n\nassert solution(stdin) == '1 2 5 4 5'\n\nassert solution(stdin) == '1 2 4 3 5'\n\nassert solution(stdin) == '1 2 3 4'\n\nassert solution(stdin) == '1 2 4'"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 5 4\"\nassert solution(stdin) == \"1 2 4 3\"\nassert solution(stdin) == \"1 2 4 5\"\n\n\"\"\"\nimport math\nimport sys\ninput = sys.stdin.readline"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 2 3 4'\n\nassert solution(stdin) == '1 2 3 5 4'\n\nassert solution(stdin) == '1 2 3 4'\n\nassert solution(stdin) == '1 2 5 4'\n\nassert solution(stdin) == '1 2 3 4'"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 2 3 4 3 4 5 1\"\n\nInput\n5\n4 4 2 3 1\n5 4 5 3 1\n\nOutput\n5 4 2 3 1\n\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n\n\n\n-----Elements in Sengoku are digits from 1 to n inclusive, where n is a natural number of the permutation.\n\nFor all permutations, 1 <= a_i \u2264 n - 1 <= b_i <= n - 1 <= a_i + b_i <= n - 1 <= b_i + n - 1 <= n - 1 >= 1.\n\n\n\n-----Constraints for the first permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the second permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the third permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the fourth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the fifth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the sixth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the seventh permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the eighth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the ninth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the tenth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the eleventh permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the nineth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the tenth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the eleventh permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\n\n-----Constraints for the twelfth permutation-----\n\nThere must be exactly one i (1 \u2264 i \u2264 n) such that a_{i} \u2260 p_{i}, and exactly one j (1 \u2264 j \u2264 n) such that b_{j} \u2260 p_{j}.\n\n\"\"\"\n\nimport itertools"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 1 2\"\n\nassert solution(stdin) == \"2 3 4\"\n\nassert solution(stdin) == \"2 4 2\"\n\nassert solution(stdin) == \"2 1 3\"\n\nassert solution(stdin) == \"3 1 4\""
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(test) == \"1 1 2\"\nassert solution(test2) == \"1 2 1\"\nassert solution(test3) == \"2 2 1\"\nassert solution(test4) == \"2 3 3\"\nassert solution(test5) == \"2 4 4\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4 4'\nassert solution(stdin) == '4 1'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '2 2'\nassert solution(stdin) == '2 2'\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"2 1 3\"\nassert solution(input()) == \"3 1 2\"\nassert solution(input()) == \"4 1 2\"\nassert solution(input()) == \"4 2 3\"\nassert solution(input()) == \"4 3 1\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3 15') == '1 2 3'\nassert solution('4 67') == '4 1 2'\nassert solution('4 68') == '4 1 2'\nassert solution('4 69') == '4 1 2'\nassert solution('5') == '5'\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 15\") == \"1 2 3\"\nassert solution(\"4 67\") == \"2 1 3\"\nassert solution(\"4 68\") == \"4 1 2\"\nassert solution(\"4 67\") == \"4 1 2\"\nassert solution(\"4 67\") == \"4 1 2\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('3 15') == '1 2 3'\nassert solution('4 67') == '2 1 3'\nassert solution('4 68') == '4 1 2'\nassert solution('4 67') == '4 2 3'\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 9') == 'YES'\nassert solution('3 1') == 'NO'\nassert solution('3 1 0') == 'NO'\nassert solution('3 3') == 'YES'\nassert solution('3 3 0') == 'YES'\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, \"120\") == \"NO\"\nassert solution(3, \"120\") == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution('3 10 20 30 20 2')) == 'YES'\nassert solution(solution('3 10 20 30 20 2')) == 'NO'\nassert solution(solution('3 120 120 120 120')) == 'YES'\nassert solution(solution('3 120 120 120 120')) == 'NO'\nassert solution(solution('3 120 120 120 120')) == 'NO'"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n  \"3 7 2 5 3 1 6 2 2\"\n  ) == \"YES\"\n\nassert solution(\n  \"3 3 6 6 2 1\"\n  ) == \"NO\"\n\nassert solution(\n  \"3 1 2 4 5 3\"\n  ) == \"NO\"\n\nassert solution(\n  \"4 3 1 2 3 4 3 4 3 4\"\n  ) == \"YES\"\n\nassert solution(\n  \"3 3 3 3 3 3 3 3 3 3 3\"\n  ) == \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"Petr has just bought a new car. He's just arrived at the most known Petersburg's petrol station to refuel it when he suddenly discovered that the petrol tank is secured with a combination lock. The lock has a scale of $360$ degrees and a pointer which initially points at zero:\") == \"YES\"\nassert solution(\n    \"Petr called his car dealer, who instructed him to rotate the lock's wheel exactly $n$ times. The $i$-th rotation should be $a_i$ degrees, either clockwise or counterclockwise, and after all $n$ rotations the pointer should again point at zero.\\n\") == \"NO\"\nassert solution(\n    \"Petr called his car dealer, who instructed him to rotate the lock's wheel exactly $n$ times. The $i$-th rotation should be $a_i$ degrees, either clockwise or counterclockwise, and after all $n$ rotations the pointer should again point at zero.\\n\") == \"NO\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"YES\"\n\n'''\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\nfrom collections import deque"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 2 3') == '3'\nassert solution('4 10 3') == '3'\nassert solution('8 3 2') == '3'\nassert solution('8 3 10') == '3'\nassert solution('2 3 10') == '3'\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"\"\"\n5 3 6 3\n\"\"\") == '2'\nassert solution(\"\"\"\n3 2 1 10\n\"\"\") == '8'\nassert solution(\"\"\"\n5 3 6 3\n\"\"\") == '3'\nassert solution(\"\"\"\n1 1 1\n\"\"\") == '1'\nassert solution(\"\"\"\n5 3 6 3\n\"\"\") == '3'\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"5 2 3 4\", \"2 3 4 10\", \"3 1 5 6\"]) == \"8\"\nassert solution([\"3 1 5 6\", \"1 2 3 4\", \"1 3 4 5\", \"1 4 5 6\", \"1 5 6 7\", \"1 6 7 8\", \"2 3 4 5\", \"2 4 5 6\"]) == \"6\"\nassert solution([\"8 3 3 2\", \"8 3 3 6\", \"8 3 4 6\", \"8 3 4 10\", \"8 3 4 10\"]) == \"3\"\nassert solution([\"3 4 5 3\", \"2 3 4 5\", \"1 3 4 5\", \"1 2 3 4\", \"1 2 2 2\", \"2 3 4 5\", \"2 2 2 4\"]) == \"3\"\nassert solution([\"8 3 3 2\", \"8 3 3 6\", \"8 3 4 6\", \"8 3 4 10\", \"8 3 4 10\"]) == \"3\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 2 3 3\") == \"3\"\nassert solution(\"1 1 5 6\") == \"1\"\nassert solution(\"8 3 3 2\") == \"2\"\nassert solution(\"8 3 3 2\") == \"3\"\nassert solution(\"2 3 10 4\") == \"3\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"\\\"\\\"\n5 2 6 3\n5 1 5 6\n5 3 4 2\n\\\"\\\"\") == 7\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"7\"\nassert solution(\"2 3 5 7 8 9 10 11 12\") == \"4\"\nassert solution(\"3 1 5 6 7 8 9 10 11 12 13\") == \"8\"\nassert solution(\"2 3 4 6 7 8 9 10 11 12 13 14\") == \"3\"\nassert solution(\"5 3 7 8 9 12 11 13 14 16 15\") == \"4\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 2 6 3') == '2'\nassert solution('3 1 5 6') == '8'\nassert solution('3 10 4 6') == '2'\nassert solution('2 3 10') == '2'\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2 6 3\") == \"2\"\nassert solution(\"3 1 5 6\") == \"3\"\nassert solution(\"8 3 3 2\") == \"3\"\nassert solution(\"8 3 3 2\") == \"3\"\nassert solution(\"5\") == \"0\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2'), 'expected \\\"(2,3)\\\"'\nassert solution('3'), 'expected \\\"(0,1)\\\"'\nassert solution('4'), 'expected \\\"(3,4)\\\"'\nassert solution('5'), 'expected \\\"(5,6)\\\"'\nassert solution('6'), 'expected \\\"(6,7)\\\"'\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"1\"\nassert solution(\"7\") == \"1\"\nassert solution(\"7 4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1\n\n----Done----\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 3\") == \"1\"\nassert solution(\"5 1\") == \"0\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"1 5\") == \"0\"\nassert solution(\"1 4\") == \"1\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, 5) == \"3\"\nassert solution(3, 3) == \"1\"\nassert solution(3, 4) == \"2\"\nassert solution(6, 2) == \"1\"\nassert solution(6, 1) == \"2\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"6\") == \"1\"\nassert solution(\"7\") == \"2\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"hello\") == \"he\"\nassert solution(\"hell1\") == \"hello\"\nassert solution(\"hellooo\") == \"hellooo\"\nassert solution(\"hellooo2\") == \"hellooo\"\nassert solution(\"hellooo3\") == \"hellooo\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\n        [\n            [8, -1],\n            [-1, 4]\n        ]\n    ]\n) == 1\nassert solution(\n    [\n        [\n            [3, 5],\n            [-1, 0]\n        ]\n    ]\n) == 2\nassert solution(\n    [\n        [\n            [5, 4],\n            [-1, 1]\n        ]\n    ]\n) == 3\nassert solution(\n    [\n        [\n            [5, 1],\n            [-1, -2]\n        ]\n    ]\n) == -2\nassert solution(\n    [\n        [\n            [2, 7],\n            [-1, 5]\n        ]\n    ]\n) == 0\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution() == 3\n\"\"\""
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n\nimport time\nfrom itertools import permutations\nfrom typing import Generator\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('3 1') == 'Yes'\nassert solution('4 5') == 'No'\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    input:\n    \"3\\n1\\n1 4\\n2\\n1 1\\n1 1\\n1 1\"\n) == \"No\"\nassert solution(\n    input:\n    \"5\\n1\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n1\"\n) == \"No\"\nassert solution(\n    input:\n    \"1\\n1\\n1\\n2\\n1\\n1\\n2\\n3\\n1\\n1\"\n) == \"No\"\nassert solution(\n    input:\n    \"4\\n1\\n1\\n1 4\\n1\\n1 2\\n1\\n1\\n2\\n1\"\n) == \"No\"\nassert solution(\n    input:\n    \"6\\n1\\n1\\n1\\n2\\n1\\n1\\n2\\n2\\n2\\n2\\n3\\n1\\n1\"\n) == \"Yes\"\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\", \"1\", \"3\", \"2\", \"4\", \"5\"]) == \"No\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"Yes\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"]) == \"Yes\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\"]) == \"No\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"]) == \"Yes\"\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"No\"\n\"\"\"\n\nimport sys"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\\n1 -1\\n-1 4\\n-1 6\") == \"Yes\"\nassert solution(\"3\\n1 -1\\n-1 5\\n-1 7\\n\") == \"No\"\n\"\"\"\nfrom collections import defaultdict\nimport operator"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 4 -1 -1 6\"\n) == \"Yes\"\nassert solution(\n    \"3 4 -1 -1 6\"\n) == \"No\""
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"No\""
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"respectable\"\n'''"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"respectable\"\n\"\"\"\nimport sys"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) =='respectable'\n\n\"\"\""
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"not present\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0 0') =='respectable'\nassert solution('0 1') == 'ugly'\nassert solution('1 0') =='respectable'\nassert solution('1 1') == 'ugly'\nassert solution('2 0') == 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == \"respectable\", \"Ugly solution failed\"\nassert solution(1) == \"ugly\", \"Ugly solution failed\"\nassert solution(2) == \"respectable\", \"Ugly solution failed\"\nassert solution(3) == \"ugly\", \"Ugly solution failed\"\nassert solution(4) == \"ugly\", \"Ugly solution failed\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"respectable\"\n\n\n-----Edited by me-----\n\ntime: 52ms (17.07%)\nmemory: 1.5MB (17.07%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n2 2\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\n\"\"\"\n\nclass Solution:\n    def is_even(self, n):\n        return n%2 == 0\n    def find_even(self, n):\n        for i in range(1, n+1):\n            if self.is_even(i):\n                return i\n\n\"\"\"\ntime: 48ms (34.04%)\nmemory: 1.8MB (34.04%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\"\"\"\nclass Solution:\n    def find_even(self, n):\n        for i in range(1, n+1):\n            if not self.is_even(i):\n                return i\n    def is_even(self, n):\n        return n%2 == 0\n\n\"\"\"\ntime: 46ms (28.19%)\nmemory: 1.6MB (28.19%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\"\"\"\n\nclass Solution:\n    def find_even(self, n):\n        for i in range(1, n+1):\n            if not self.is_even(i):\n                return i\n\"\"\"\ntime: 47ms (42.46%)\nmemory: 1.6MB (42.46%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\"\"\"\n\nclass Solution:\n    def is_even(self, n):\n        return n%2 == 0\n    def find_even(self, n):\n        for i in range(1, n+1):\n            if not self.is_even(i):\n                return i\n    def is_odd(self, n):\n        return n%2 == 1\n\"\"\"\ntime: 54ms (30.35%)\nmemory: 1.8MB (30.35%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\"\"\"\n\nclass Solution:\n    def find_even(self, n):\n        for i in range(1, n+1):\n            if not self.is_even(i):\n                return i\n    def find_odd(self, n):\n        for i in range(2, n+1):\n            if not self.is_odd(i):\n                return i\n\n\"\"\"\ntime: 50ms (13.26%)\nmemory: 1.7MB (13.26%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\"\"\"\nclass Solution:\n    def is_even(self, n):\n        return n%2 == 0\n    def find_even(self, n):\n        for i in range(1, n+1):\n            if not self.is_even(i):\n                return i\n    def is_odd(self, n):\n        return n%2 == 1\n\"\"\"\ntime: 63ms (23.59%)\nmemory: 1.6MB (23.59%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\"\"\"\n\nclass Solution:\n    def is_even(self, n):\n        return n%2 == 0\n    def find_even(self, n):\n        for i in range(1, n+1):\n            if not self.is_even(i):\n                return i\n    def is_odd(self, n):\n        return n%2 == 1\n\"\"\"\ntime: 65ms (33.73%)\nmemory: 1.6MB (33.73%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\"\"\"\n\nclass Solution:\n    def is_even(self, n):\n        return n%2 == 0\n    def find_even(self, n):\n        for i in range(1, n+1):\n            if not self.is_even(i):\n                return i\n    def is_odd(self, n):\n        return n%2 == 1\n\"\"\"\ntime: 77ms (46.08%)\nmemory: 1.6MB (46.08%)\nTestcase Example:\nTestcase #1:\nInput\n0 0\n0 1\n0 2\n1 0\n1 2\n2 0\n2 1\n\nOutput\nrespectable\n\nTestcase #2:\nInput\n1 1\n1 2\n1 3\n2 1\n2 2\n2 3\n3 1\n3 2\n\nOutput\nugly\n\"\"\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0 0') =='respectable'\nassert solution('0 1') == 'ugly'\nassert solution('0 2') == 'ugly'\nassert solution('1 0') == 'ugly'\nassert solution('1 1') == 'ugly'\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"ugly\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == \"YES\"\nassert solution(4) == \"NO\"\nassert solution(5) == \"NO\""
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 1\") == \"NO\"\nassert solution(\"1 2\") == \"NO\"\nassert solution(\"2 1\") == \"YES\"\nassert solution(\"2 2\") == \"YES\"\nassert solution(\"2 3\") == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 6\") == \"YES\"\nassert solution(\"5 7\") == \"YES\"\nassert solution(\"5 8\") == \"NO\"\nassert solution(\"5 9\") == \"NO\"\nassert solution(\"5 10\") == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3,1) == \"YES\"\nassert solution(3,2) == \"NO\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"YES\"\nassert solution(\"3 11\") == \"NO\"\nassert solution(\"4 5\") == \"NO\"\nassert solution(\"5 11\") == \"NO\"\n\n--------Test Cases--------\n\nInput\n2\n2 1\n3 4\n\nOutput\nNO\nNO\nYES\nYES\nYES\n\n\"\"\""
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3 2\") == \"YES\"\nassert solution(\"3 2 3\") == \"NO\"\n\"\"\""
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 11\") == \"YES\"\nassert solution(\"5 11\") == \"NO\"\nassert solution(\"5 11\") == \"NO\"\n\n-----Done-----\n\"\"\""
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0123456789\") == -1\nassert solution(\"123456789\") == -1\nassert solution(\"1234567891\") == -1\nassert solution(\"01234567\") == -1\nassert solution(\"123\") == -1\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1000001000001\") == 5 \nassert solution(\"1000001000101\") == 8\nassert solution(\"1000001000110\") == 4\nassert solution(\"1000001000111\") == 9\nassert solution(\"100100100100100\") == 7\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == -1\nassert solution(input()) == -1\nassert solution(input()) == -1\nassert solution(input()) == -1\nassert solution(input()) == -1\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == 1\nassert solution(6) == 2\nassert solution(8) == 8\nassert solution(100) == -1\nassert solution(\"0123456789\") == -1\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == -1\nassert solution(\"1\") == -1\nassert solution(\"1\") == -1\nassert solution(\"1\") == -1\nassert solution(\"1\") == -1\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == -1\n\nassert solution(2) == -1\n\nassert solution(3) == -1\n\nassert solution(4) == -1\n\nassert solution(5) == -1"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(n) == -1, \"Expected a string\"\nassert solution(n) == 0, \"Expected a valid integer\"\nassert solution(n) == 0, \"Expected a valid integer\"\nassert solution(n) == 0, \"Expected a valid integer\"\nassert solution(n) == -1, \"Expected a string\"\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == -1 or solution(\"3\") == -1\nassert solution(\"4\") == -1 or solution(\"4\") == -1\nassert solution(\"5\") == -1 or solution(\"5\") == -1\nassert solution(\"6\") == -1 or solution(\"6\") == -1\nassert solution(\"7\") == -1 or solution(\"7\") == -1\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '62'\nassert solution(stdin) == '119'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1) == -1\nassert solution(2) == -1\nassert solution(3) == -1\nassert solution(4) == -1\nassert solution(5) == -1\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 5) == 2\nassert solution(3, 10) == 2\nassert solution(4, 10) == 1\nassert solution(4, 5) == 2\nassert solution(3, 7) == 2"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 2\nassert solution(inp) == 2\nassert solution(inp) == 2\nassert solution(inp) == 2\nassert solution(inp) == 2\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"abcd\") == \"def\"\nassert solution(\"abcd\") == \"def\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abcd\") == \"abcd\"\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 'abcdefghijklm'\nassert solution(input()) == 'abccbaefghijklm'\nassert solution(input()) == 'abcdefghijklmn'"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\nassert solution(input()) == '5'\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('abc') == ['abc']\nassert solution('abccd') == ['ab', 'c', 'ab', 'cd', 'b']\nassert solution('aaabb') == ['aa', 'ab', 'a']\nassert solution('aaab') == ['aa', 'ab']\nassert solution('abcdef') == ['abc', 'def', 'c']\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin, 2) == 2\nassert solution(stdin, 3) == 2\nassert solution(stdin, 4) == 2\nassert solution(stdin, 5) == 1\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n\n\n-----Constraints-----\n1 <= n, m <= 10^2\n\"\"\"\n\n\nclass Solution:\n    def findGreatestCommonDivisor(self, n: int, m: int) -> int:\n        def get_divisors(m: int):\n            divisors = [x for x in range(1, m+1)]\n            for i in range(1, m+1):\n                if m%i==0:\n                    divisors.append(i)\n            return divisors\n\n        for i in range(n+1):\n            temp = get_divisors(m)\n            temp.sort()\n            if len(temp)>0:\n                m = temp[-1]\n            else:\n                m = 0\n                break\n        return m\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"8 5 2\") == \"4 8\"\nassert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"8 5 2\") == \"-1\"\nassert solution(\"3 3\") == \"0\"\nassert solution(\"3 3 4\") == \"5\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3 2\") == \"1 2\"\nassert solution(\"8 5 2\") == \"1 3\"\nassert solution(\"8 4 2\") == \"3 4\"\nassert solution(\"8 4 2\") == \"1 5\"\nassert solution(\"4 8\") == \"1 1\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 3 2\") == \"1 2\"\nassert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"8 4 2\") == \"4 8\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 3 2') == '1 2'\nassert solution('8 4 2') == '4 8'\nassert solution('8 4 2 3') == '3 4'\nassert solution('3 4 3') == '1 3'\nassert solution('1 2') == '1 2'\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\n\"\"\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 2\"\n\nassert solution(stdin) == \"1 3\"\n\nassert solution(stdin) == \"-1\"\n\nassert solution(stdin) == \"3 2\"\n\nassert solution(stdin) == \"3 4\""
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '1 1 1'\nassert solution(stdin) == '1 3'\nassert solution(stdin) == '1 3 4'\nassert solution(stdin) == '1 3'\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 2 2\") == \"3 2\"\nassert solution(\"8 4 2\") == \"8 4 2\"\nassert solution(\"8 4 5\") == \"1 2\"\nassert solution(\"6 6 5\") == \"1 3\"\nassert solution(\"4 4 4\") == \"3 5\"\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3 2\") == \"1 2\"\nassert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"8 4 2\") == \"4 8\"\nassert solution(\"8 4 2\") == \"1 1\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"100 100\") == \"1.0000000\"\nassert solution(\"2 2\") == \"3.2429392\"\nassert solution(\"3 3\") == \"1.0000000\"\nassert solution(\"4 2\") == \"3.2429392\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 2') == '3.2429392'\nassert solution('2 2') == '4.9593582'\nassert solution('2 2') == '6.4641016'\nassert solution('1 2') == '1.0000000'\nassert solution('1 2') == '1.0000000'\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3.2429392\"\nassert solution(stdin) == \"1.0000000\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"6.4641016\"\nassert solution(\"4 1\") == \"1.0000000\"\nassert solution(\"3 10\") == \"2.5674798\"\nassert solution(\"3 10\") == \"2.5674798\"\nassert solution(\"3 2\") == \"2.0\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1.0000000\"\nassert solution(stdin) == \"3.2429391\"\nassert solution(stdin) == \"3.2429391\"\nassert solution(stdin) == \"2.00000000\"\nassert solution(stdin) == \"3.00000000\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1.0000000\"\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3.2429391'\nassert solution(input()) == '1.0000000'\n\n\"\"\"\nimport math\n\nn = int(input())\nR = int(input())\na = math.ceil(math.log10(R/n))\n\nprint(int(10 ** a))"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1.0000000\"\nassert solution(stdin) == \"6.4641016\"\nassert solution(stdin) == \"3.2429392\"\nassert solution(stdin) == \"0.9671426\"\nassert solution(stdin) == \"5.00000000\"\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), 'The script failed to find a solution.'\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('199', [5, 4, 3, 1]) == '119.4'\nassert solution('199', [5, 4, 3, 2]) == '120.0'\nassert solution('199', [5, 4, 3, 4]) == '119.4'\nassert solution('199', [5, 4, 3, 5]) == '119.4'\nassert solution('199', [5, 4, 3, 6]) == '120.0'\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('199') == '119.4'\nassert solution('199') == '119.5'\nassert solution('199') == '119.6'\nassert solution('199') == '119.7'\nassert solution('199') == '119.8'\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"199\") == \"50\"\nassert solution(\"299\") == \"119.4\"\nassert solution(\"299\") == \"81.6\"\nassert solution(\"299\") == \"81.6\"\nassert solution(\"299\") == \"81.6\"\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"95.95\"\n\n-----Constraints-----\n0 \u2264 stdin.length <= 1000\n1 \u2264 stdin[i] \u2264 500\n1 \u2264 p, q \u2264 500\n1 \u2264 stdin[i] \u2264 10^4\n\n-----Time Limit-----\n1 minute\n\n-----Memory Limit-----\n256 MB\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        def c(p,q):\n            return abs(p-q)\n        \n        def d(p,q):\n            return abs(p-q)//10**4\n        \n        l = int(stdin[1:])\n        if l==1:\n            return \"100\"\n        elif l==2:\n            return \"50\"\n        elif l==3:\n            return \"50\"\n        elif l==4:\n            return \"50\"\n        elif l==5:\n            return \"50\"\n        elif l==6:\n            return \"50\"\n        elif l==7:\n            return \"50\"\n        elif l==8:\n            return \"50\"\n        elif l==9:\n            return \"50\"\n        else:\n            raise ValueError\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        \n        stdin = stdin.split()\n        stdin = int(stdin[0])\n        p = int(stdin[1])\n        q = int(stdin[2])\n        \n        answer = \"\"\n        \n        for i in range(q):\n            answer += str(i+1) + \" \" + str(p*(q-i-1)) + \" \"\n        answer = answer[:-1]\n        \n        answer += str(q-1) + \" \"\n        \n        return answer"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"119.4\"\n\nassert solution(\"199\") == \"100.6\"\n\nassert solution(\"199 10\") == \"100.1\"\n\nassert solution(\"199 100\") == \"100.1\"\n\nassert solution(\"199 100 99\") == \"100.1\""
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"119.4\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"119.4\"\nassert solution(stdin) == \"119.4\"\nassert solution(stdin) == \"119.4\"\nassert solution(stdin) == \"119.4\"\nassert solution(stdin) == \"119.4\"\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"119.4\"\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"119.4\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2015, \"Expected: 2015, got: {}, {}\".format(2015, stdin)\n\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= a_1, a_2,..., a_{n} <= 10^9\n\nSample case:\n\nInput\n\n3\n2014 2016 2015\n\nSample output\n\n2014\n2015\n2015\n\n\nExplanation\n\nThe students are grouped at the university, and they are joined. \n\nThe year of the student's university entrance is in 2015.\n\n2\n2014 2016 2015\n\nThe year of the student's university entrance is in 2015.\n\n3\n2014 2016 2015\n\nThe year of the student's university entrance is in 2015.\n\n\n-----Time Complexity-----\n\nFor every group, we assume that the year of the student's university entrance differ by no more than x from the year of university entrance of this group, where x = 1.\n\nFor every group, we assume that the year of the student's university entrance is the same as the year of the group\u2019s entrance.\n\n\n-----Space Complexity-----\n\nThe space used for the table is O(1).\n\nFor every group, we assume that the number of students in the group is the same as the number of students in the group.\n\nSimilarly for every group, we assume that the number of students in the group is the same as the number of students in the group.\n\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. The query is the year of student's university entrance.\n2. The main algorithm is to check whether the query year is a perfect year.\n3. For every group, we check whether query year is a perfect year for the group.\n4. If the query year is a perfect year for the group, we return the corresponding group.\n5. If the query year is a perfect year for the group, we repeat the main algorithm.\n\nAfter the main algorithm, we return the answer for every group.\n\n\n-----Implementation-----\n\nRepeat the main algorithm for every group in the input data, so that all the group have the same answer.\n\nRepeat the main algorithm for every group in the input data, so that all the group have the same answer.\n\nRepeat the main algorithm for every group in the input data, so that all the group have the same answer.\n\n\n-----Brute-force-----\n\nWe can get the answer from the main algorithm for every group, so that all the group have the same answer.\n\nRepeat the main algorithm for every group, so that all the group have the same answer.\n\n\n\"\"\"\n\nimport sys\n\nclass Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        anagrams = {}\n        for word in strs:\n            key = ''.join(sorted(word))\n            if key in anagrams:\n                anagrams[key].append(word)\n            else:\n                anagrams[key] = [word]\n        return list(anagrams.values())\n    \n        \n        \n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, [2010, 2015, 2016]) == 2015\nassert solution(2, [2010, 2015, 2016]) == 2016\nassert solution(3, [2010, 2015, 2016]) == 2016\nassert solution(4, [2010, 2015, 2016]) == 2016\nassert solution(5, [2010, 2015, 2016]) == 2016\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2015'\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2015\"\n\nassert solution(stdin) == \"2050\"\n\nassert solution(stdin) == \"2016\"\n\nassert solution(stdin) == \"2021\"\n\nassert solution(stdin) == \"1951\"\n\nprint(\"Correct!\")\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2015\"\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2015\"\n'''"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2015"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, [1990, 1990, 2000, 2000, 2000, 2000]) == \"1990\"\nassert solution(2, [1990, 1990, 2000, 2001, 2001, 2001, 2001, 2002, 2002, 2003, 2003, 2003, 2003, 2003]) == \"2000\"\nassert solution(3, [1990, 1990, 2000, 2001, 2001, 2002, 2002, 2001, 2001, 2002, 2003, 2003, 2003, 2003, 2003, 2003, 2003]) == \"2001\"\nassert solution(1, [2010, 2010, 2015, 2015, 2015, 2015, 2015, 2016, 2016, 2016, 2016, 2016, 2016]) == \"2015\"\nassert solution(5, [2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010, 2010]) == \"2015\"\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2\") == \"2015\"\nassert solution(\"1 9\") == \"2015\"\nassert solution(\"2 3\") == \"2017\"\nassert solution(\"3 4\") == \"2016\"\nassert solution(\"3 9\") == \"2016\"\n"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2015'\nassert solution(stdin) == '2015'\nassert solution(stdin) == '2015'\nassert solution(stdin) == '2015'\nassert solution(stdin) == '2015'\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"Yes\"\n\n\n\"\"\""
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(5) == \"Yes\"\nassert solution(3) == \"No\"\nassert solution(3) == \"No\"\nassert solution(5) == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"CYCMY\", \"CYC\", \"Y\", \"C\"]) == \"Yes\"\nassert solution([\"CYCMY\", \"CYC\", \"Y\", \"C\"]) == \"Yes\"\nassert solution([\"CYC\", \"C\", \"Y\", \"C\"]) == \"Yes\"\nassert solution([\"CYCMY\", \"CYC\", \"C\", \"Y\", \"C\"]) == \"Yes\"\nassert solution([\"CYC\", \"C\", \"C\", \"Y\", \"C\"]) == \"Yes\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"CYCMY\") == \"Yes\"\nassert solution(\"CYCMY\") == \"No\"\nassert solution(\"CYCMY\") == \"Yes\"\nassert solution(\"CYCY\") == \"Yes\"\nassert solution(\"CYCY\") == \"No\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\""
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5\") == \"Yes\", \"solution() should return Yes, and not output 'Yes'\"\nassert solution(\"5\") == \"No\", \"solution() should return No, and not output 'No'\"\nassert solution(\"3\") == \"Yes\", \"solution() should return Yes, and not output 'Yes'\"\nassert solution(\"4\") == \"Yes\", \"solution() should return Yes, and not output 'Yes'\"\nassert solution(\"2\") == \"Yes\", \"solution() should return Yes, and not output 'Yes'\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n\"\"\""
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(['CY', 'M', 'C', '?', 'C']) == 'Yes'\nassert solution(['CY', 'C', 'M', 'C', '?', 'C']) == 'No'\nassert solution(['CY', 'C', 'C', 'C', 'C', 'C']) == 'Yes'\nassert solution(['CY', 'C', 'C', 'C', 'C', 'C']) == 'No'\nassert solution(['CY', 'C', 'C', 'C', 'C', 'C']) == 'Yes'\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(s) == \"Yes\" or solution(s) == \"No\" or solution(s) == \"Yes\""
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5) == \"Yes\"\nassert solution(6) == \"Yes\"\nassert solution(1) == \"No\"\nassert solution(3) == \"No\"\nassert solution(4) == \"No\"\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 5 7 9') == '72900'\nassert solution('17 97 41 37 11') == '317451037'\nassert solution('17 97 41 37 11 1') == '317451037'\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"110144999\"\nassert solution(stdin) == \"828700012\"\nassert solution(stdin) == \"52978124\"\nassert solution(stdin) == \"298078069\"\n\n\"\"\""
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '317451037'\nassert solution(stdin) == '2407322054'\nassert solution(stdin) == '4828813584'\nassert solution(stdin) == '7557911278'\n\n\n-----Time Complexity-----\n\nO(n)\nO(n)\nO(n)\nO(n)\n\n\nO(n)\n\nWe have to find $n \\ge 5$ and use a division of $10^{9}+7$.\nWe use an approach to calculate a $n$-digit number $f_{n}$. The number $f_{n}$ is a sum of the digits of $f_{n-1}$ and $f_{n-2}$, concatenated together.\nWe do not know that $f_{n}$ will be a number $f_{n-1}$, which is given by $f_{n-1} \\times 10^{9}$.\nWe use the formula $f_{n} = c^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3}$ to calculate $f_{n}$ as:\n\n$f_{n} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1}$\n\n\n-----Space Complexity-----\n\nO(n)\nO(n)\n\nWe have to calculate the number $n$-digit number $f_{n}$ in the same manner as above, which is defined as $f_{n} = \\left\\lfloor f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot c^{2x-6} \\cdot f_{x} \\cdot f_{n-1} \\right\\rfloor^{2x-6} \\cdot f_{x-1} \\cdot f_{x-2} \\cdot f_{x-3} \\cdot"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"317451037\"\n\n\n------Challenge-----\n\nA solution for this challenge was found in a previous challenge."
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"123456789101112131415161718192021\") == \"92501132345\"\n\nassert solution(\"111\") == \"1111111\"\n\nassert solution(\"99\") == \"99\"\n\nassert solution(\"12\") == \"12\"\n\nassert solution(\"\") == \"\""
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"317451037\"\nassert solution(input) == \"32900\"\nassert solution(input) == \"290\"\nassert solution(input) == \"127\"\nassert solution(input) == \"127\"\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 1 2 5 3\") == \"72900\"\nassert solution(\"17 97 41 37 11\") == \"317451037\"\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\"5 1 2 5 3\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11\",\n    \"17 97 41 37 11"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"317451037\"\n\nassert solution(stdin) == \"317451037\"\n\nassert solution(stdin) == \"317451037\"\n\nassert solution(stdin) == \"317451037\"\n\nassert solution(stdin) == \"317451037\"\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"317451037\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"abab\") == \"xyxwyx\"\nassert solution(\"abcabc\") == \"cabxbcx\"\nassert solution(\"aaaabb\") == \"abbaab\"\nassert solution(\"abbccdd\") == \"abcabcdd\"\nassert solution(\"abbccccdd\") == \"abcabcdd\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"tabbat\"\nassert solution(stdin) == \"ooxxo\"\nassert solution(stdin) == \"xooxx\"\nassert solution(stdin) == \"xxxox\"\nassert solution(stdin) == \"cdefg\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3,2) == 2\nassert solution(2,3) == 0\nassert solution(1,1) == 1\nassert solution(1,2) == 1\nassert solution(1,3) == 2\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 3) == \"tabbat\"\nassert solution(3, 4) == \"bat\"\nassert solution(3, 5) == \"oo\"\nassert solution(3, 6) == \"ox\"\nassert solution(3, 7) == \"xo\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == ''\nassert solution(stdin) == ''\nassert solution(stdin) == '''\n\"\"\".\n\n\\t\"\"\"\"\"\"\"\"\"\"\"\n1234567\n12345\n\n\\t\"\"\"\n\\t\"\"\"\"\"\"\"\"\"\"\"\n1234567\n12345\n\n\\t\"\"\"\n\\t\"\"\"\"\"\"\"\"\"\"\"\n12345\n12345\n\n\\t\"\"\"\n\\t\"\"\"\n\\t\"\"\"\"\"\"\"\"\"\"\"\n12345\n12345\n\n\"\"\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['4', '3', '2']) == '3'\nassert solution(['4', '2']) == '2'\nassert solution(['2', '2', '1']) == '1'\nassert solution(['123', '232', '324']) == '232'\nassert solution(['aaa', 'bbb', 'ccc', 'ccc']) == 'a'\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"xx\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"abab\"\n\nassert solution(stdin) == \"baba\""
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('abab') == 'ba'\nassert solution('abab') == 'ba'\nassert solution('abab') == 'ba'\nassert solution('abab') == 'ba'\nassert solution('abab') == 'ba'\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 20\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3,5) == \"tabbat\", \"the result of solution should be tabbat\"\nassert solution(4,3) == \"abab\", \"the result of solution should be abab\"\nassert solution(9,4) == \"ababwxyzijjizyxwbaba\", \"the result of solution should be ababwxyzijjizyxwbaba\"\nassert solution(9,5) == \"\", \"the result of solution should be empty\"\nassert solution(5,2) == \"\", \"the result of solution should be empty\"\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\", \"1\", \"3\", \"1\"]) == \"1\"\nassert solution([\"3\", \"1\", \"2\", \"3\"]) == \"4\"\nassert solution([\"1\", \"3\", \"1\", \"3\"]) == \"9\"\nassert solution([\"1\", \"2\", \"2\", \"1\"]) == \"6\"\nassert solution([\"1\", \"2\", \"3\", \"3\"]) == \"7\"\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1999982505'\n\nInput\n3\n1 3 2\n\nOutput\n1\n\nInput\n3\n1 4 2\n\nOutput\n1999982505\n\"\"\"\nimport heapq"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5') == '2'\nassert solution('1') == '1'\nassert solution('3') == '1'\nassert solution('1000000000 1000000000 1000000000') == '1999982505'\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n\n\n\"\"\"\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1999982505'\n\n'''"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2000\"\n\"\"\""
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"3\", \"2\"]) == \"1\"\nassert solution([\"1\", \"3\", \"2\", \"4\"]) == \"4\"\nassert solution([\"1\", \"3\", \"2\", \"4\", \"5\"]) == \"3\"\nassert solution([\"1\", \"3\", \"2\", \"4\", \"5\", \"6\"]) == \"6\"\nassert solution([\"1\", \"3\", \"2\", \"4\", \"5\", \"6\", \"7\"]) == \"7\"\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(a=list(\"3 2 2\")) == \"1\"\nassert solution(a=list(\"3 3 2\")) == \"1\"\nassert solution(a=list(\"3 3 3\")) == \"1\"\nassert solution(a=list(\"3 3 2\")) == \"2\"\nassert solution(a=list(\"3 3 1\")) == \"2\"\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '1999982505'\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"2 1 3 1\"\n) == 1\nassert solution(\n    \"2\"\n) == 2\nassert solution(\n    \"420 420\"\n) == 1\nassert solution(\n    \"420\"\n) == 2\nassert solution(\n
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"7 4 1 0 0\") == \"1\"\nassert solution(\"1 2 1 4 5\") == \"3\"\nassert solution(\"2 3 4 4 5\") == \"4\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n\n\n------Constraints------\n1 <= t <= 100\n1 <= n <= 10^4\n\n\n------Coding Rules------\nTime Limit: 1 second\nSpace Limit: 1 megabyte\n\n\n------Time complexity--------\nSpace complexity: O(n)\n\nTime complexity: O(n)\n\"\"\""
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\n\n\n-----Constraints-----\n\n1 \u2264 t \u2264 10^4\n1 \u2264 n \u2264 2 * 10^4\n1 \u2264 a[i] \u2264 10^9\n\n[ ] Two operations for each string is supported, as well as any operations that are not supported.\n[ ] The sum of $n$ over all operations will not exceed $2 \\cdot 10^5$.\n\n\n-----Test Cases-----\n\nTest case #1: pass\nTest case #2: pass\nTest case #3: pass\nTest case #4: pass\nTest case #5: pass\nTest case #6: pass\nTest case #7: pass\n\nTest case #8: fail\nTest case #9: fail\nTest case #10: fail\nTest case #11: fail\nTest case #12: pass\nTest case #13: pass\nTest case #14: pass\nTest case #15: pass\nTest case #16: pass\nTest case #17: fail\nTest case #18: pass\nTest case #19: pass\nTest case #20: pass\nTest case #21: pass\nTest case #22: pass\nTest case #23: pass\nTest case #24: pass\nTest case #25: pass\nTest case #26: pass\nTest case #27: pass\nTest case #28: pass\nTest case #29: pass\nTest case #30: pass\nTest case #31: pass\nTest case #32: pass\nTest case #33: pass\nTest case #34: pass\nTest case #35: pass\nTest case #36: pass\nTest case #37: pass\nTest case #38: pass\nTest case #39: pass\nTest case #40: pass\nTest case #41: pass\nTest case #42: pass\nTest case #43: pass\nTest case #44: pass\nTest case #45: pass\nTest case #46: pass\nTest case #47: pass\nTest case #48: pass\nTest case #49: pass\nTest case #50: pass\nTest case #51: pass\nTest case #52: pass\nTest case #53: pass\nTest case #54: pass\nTest case #55: pass\nTest case #56: pass\nTest case #57: pass\nTest case #58: pass\nTest case #59: pass\nTest case #60: pass\nTest case #61: pass\nTest case #62: pass\nTest case #63: pass\nTest case #64: pass\nTest case #65: pass\nTest case #66: pass\nTest case #67: pass\nTest case #68: pass\nTest case #69: pass\nTest case #70: pass\nTest case #71: pass\nTest case #72: pass\nTest case #73: pass\nTest case #74: pass\nTest case #75: pass\nTest case #76: pass\nTest case #77: pass\nTest case #78: pass\nTest case #79: pass\nTest case #80: pass\nTest case #81: pass\nTest case #82: pass\nTest case #83: pass\nTest case #84: pass\nTest case #85: pass\nTest case #86: pass\nTest case #87: pass\nTest case #88: pass\nTest case #89: pass\nTest case #90: pass\nTest case #91: pass\nTest case #92: pass\nTest case #93: pass\nTest case #94: pass\nTest case #95: pass\nTest case #96: pass\nTest case #97: pass\nTest case #98: pass\nTest case #99: pass\nTest case #100: pass\nTest case #101: pass\nTest case #102: pass\nTest case #103: pass\nTest case #104: pass\nTest case #105: pass\nTest case #106: pass\nTest case #107: pass\nTest case #108: pass\nTest case #109: pass\nTest case #110: pass\nTest case #111: pass\nTest case #112: pass\nTest case #113: pass\nTest case #114: pass\nTest case #115: pass\nTest case #116: pass\nTest case #117: pass\nTest case #118: pass\nTest case #119: pass\nTest case #120: pass\nTest case #121: pass\nTest case #122: pass\nTest case #123: pass\nTest case #124: pass\nTest case #125: pass\nTest case #126: pass\nTest case #127: pass\nTest case #128: pass\nTest case #129: pass\nTest case #130: pass\nTest case #131: pass\nTest case #132: pass\nTest case #133: pass\nTest case #134: pass\nTest case #135: pass\nTest case #136: pass\nTest case #137: pass\nTest case #138: pass\nTest case #139: pass\nTest case #140: pass\nTest case #141: pass\nTest case #142: pass\nTest case #143: pass\nTest case #144: pass\nTest case #145: pass\nTest case #146: pass\nTest case #147: pass\nTest case #148: pass\nTest case #149: pass\nTest case #150: pass\nTest case #151: pass\nTest case #152: pass\nTest case #153: pass\nTest case #154: pass\nTest case #155: pass\nTest case #156: pass\nTest case #157: pass\nTest case #158: pass\nTest case #159: pass\nTest case #160: pass\nTest case #161: pass\nTest case #162: pass\nTest case #163: pass\nTest case #164: pass\nTest case #165: pass\nTest case #166: pass\nTest case #167: pass\nTest case #168: pass\nTest case #169: pass\nTest case #170: pass\nTest case #171: pass\nTest case #172: pass\nTest case #173: pass\nTest case #174: pass\nTest case #175: pass\nTest case #176: pass\nTest case #177: pass\nTest case #178: pass\nTest case #179: pass\nTest case #180: pass\nTest case #181: pass\nTest case #182: pass\nTest case #183: pass\nTest case #184: pass\nTest case #185: pass"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"7\\n6\\n5\\n4\\n3\\n2\\n1\\n\") == \"1\"\n\n\nExplanation\n\nFor example, the password is entered as follows:\n\nInput:\n5\n2 1 3 1\n2\n420 420\n\nOutput:\n2\n\"\"\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"7\", \"4\", \"3\", \"7\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\", \"3\", \"4\", \"5\"]) == \"1\"\nassert solution([\"1\", \"2\", \"1\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"3\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\""
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n\n1 <= n <= 2^30\n0 <= a_i, a_j < 10^9\na_i and a_j are distinct integers between 1 and 10^9.\n1 <= n <= 2^30\na_{i} >= 0\na_{i+1} >= 0\n\n------Time complexity: O(n^2) ------\n\n------Space Complexity: O(1) ------\n\n------Algorithm: Brute Force O(n^2) ------"
    }
]