[
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('4') == '8 10'\nassert solution('4 5') == '8 6 0'\nassert solution('3 4 0') == '8 7 0'\nassert solution('3 5 0') == '8 7 1'\nassert solution('3 6 0') == '8 7 2'\n"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10 20 100'), '10 20 100'\nassert solution('1 1 1 1 1'), '1 1 1 1 1'\nassert solution('3 3 2 3 2'), '3 3 2 3 2'\nassert solution('4 4 4 4 4 4'), '4 4 4 4 4'\nassert solution('5 6 6 6 6 6 5'), '5 6 6 6 6 6 5'\n"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"8 10\"\nassert solution(input) == \"8 10\"\nassert solution(input) == \"8 10\"\nassert solution(input) == \"8 10\"\nassert solution(input) == \"8 10\"\n"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\n"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]) == \"8 10\"\nassert solution([\"1\", \"2\", \"3\", \"6\", \"5\", \"7\", \"8\", \"9\", \"0\"]) == \"10 8\"\nassert solution([\"1\", \"0\", \"1\"]) == \"1 10\"\nassert solution([\"1\", \"0\", \"2\"]) == \"2 10\"\nassert solution([\"1\", \"0\", \"3\"]) == \"3 10\"\n"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\\\"\\\"\\\"\n\\\"\\\"\\\"\n4\n\n1 3\n\n1 4\n\n3 2\n\n3 4\n\n5 7\n\n8 6\n\n7 8\n\n9 10\n\n10 11\n\n14 12\n\n15 13\n\n16 14\n\n17 16\n\n18 18\n\n19 19\n\n20 20\n\n\\\"\\\"\\\"\n\n6\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\n30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56\n55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 88 89 90\n91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 123 124 125 126 127 128 129 130 131 132 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 190 191 192 193 194 195 196 197 198 199 200 201 202 203 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"8 10\""
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"0 0 0 0\"\nassert solution(input()) == \"0 0 0 0\"\nassert solution(input()) == \"1 0 0 0\"\nassert solution(input()) == \"2 0 0 0\"\nassert solution(input()) == \"3 0 0 0\"\n"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"8 10\"\nassert solution(input) == \"8 6\"\nassert solution(input) == \"8 7\"\nassert solution(input) == \"4 8\"\nassert solution(input) == \"5 6\"\n"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '5 6 0'\n'''"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 0 1 0 0 1 0 0 0 0 0\") == \"2\"\nassert solution(\"6 3 6\") == \"5\"\nassert solution(\"4 1 3 0 0 0 0 0 0 0 0\") == \"3\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"1 0 1\") == \"0\"\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('22') == '10'\nassert solution('13') == '6'\nassert solution('12') == '8'\nassert solution('21') == '4'\nassert solution('23') == '1'\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3') == 1\nassert solution('2') == 2\nassert solution('1') == 3\nassert solution('0') == 1\nassert solution('0') == 2\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"6 6 6\") == \"14\", \"test case 1 failed\"\nassert solution(\"6 6 6\") == \"4\", \"test case 2 failed\"\nassert solution(\"1 4 3\") == \"2\", \"test case 3 failed\"\nassert solution(\"1 4 3\") == \"2\", \"test case 4 failed\"\nassert solution(\"1 4 2\") == \"3\", \"test case 5 failed\"\n"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4 7 2 1 3\") == \"0 1 1 1\"\nassert solution(\"1 3 4 2 3\") == \"0 0 0 0\"\nassert solution(\"1 2 3 1\") == \"0 1 1 0\""
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 2\") == \"0 0 0 0\"\nassert solution(\"2 3 1\") == \"0 0 0 0\"\nassert solution(\"3 3 3 3\") == \"0 0 0 0\"\nassert solution(\"4 4 4 4 4 4 4 4 4 4 4\") == \"1 0 1 0\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10 11 12 13\") == \"0 0 0 0\"\n"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    (\n        input\n        [\n            [\"1 2\", \"2 3\", \"2\"],\n            [\"1\", \"1\", \"1\"],\n            [\"1\", \"1\", \"1\"],\n        ]\n    )\n) == \"1 2 1 1\"\n\nassert solution(\n    (\n        input\n        [\n            [\"1 2\", \"2 3\", \"2\"],\n            [\"1\", \"1\", \"1\"],\n            [\"1\", \"1\", \"1\"],\n        ]\n    )\n) == \"0 1 1\"\n\nassert solution(\n    (\n        input\n        [\n            [\"1 2\", \"2 3\", \"2\"],\n            [\"1\", \"1\", \"1\"],\n            [\"1\", \"1\", \"1\"],\n        ]\n    )\n) == \"1 0 1\"\n"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 2 1\") == \"1 1 1\"\nassert solution(\"1 2 3 1\") == \"0 0 0 1\"\nassert solution(\"1 3 1 2\") == \"0 1 0 0\"\n"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 4 5') == \"0 1 2 3 4 5\"\nassert solution('2 3 4') == \"0 1\"\nassert solution('1 3') == \"1 2\"\nassert solution('1') == \"0\"\nassert solution('0 3') == \"0\"\n"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 2') == '1 2 2'\nassert solution('1 2 2 3') == '1 2 2 3'\nassert solution('1 1 1') == '1 1 1'"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 2\") == \"white\"\nassert solution(\"2 3 1\") == \"black\"\nassert solution(\"2 3 3\") == \"white\""
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"1\n0 0\n0 0\n1 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"1\n0 0\n0 0\n1 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"0\"\nassert solution(\"\"\"1\n0 0\n0 0\n1 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"1\"\nassert solution(\"\"\"1\n0 0\n0 0\n1 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n\"\"\") == \"1\"\n"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"\"\"2 2 1\n1 2 1\n1 3 2\n2 3 2\n2 4 2\n2 5 2\n3 4 1\n3 5 2\n4 5 2\n4 6 2\n5 6 2\n\"\"\"), \"2 3 1\"\nassert solution(\"\"\"2 2 1\n1 2 1\n1 3 2\n2 3 2\n2 4 2\n2 5 2\n3 4 1\n3 5 2\n4 5 2\n4 6 2\n5 6 2\n\"\"\"), \"2 3 1\"\n"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 2') == '1 2 2 1'\nassert solution('2 3 1') == '1 2 3'\nassert solution('3 4 2') == '0 1'\nassert solution('3 4 5') == '0 0 1'\nassert solution('3 4 6') == '1 1'\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 2 3 4 5') == '5'\nassert solution('1 3') == '3'\nassert solution('1 2') == '3'\nassert solution('1 4') == '1'\nassert solution('1 2 3 4') == '3'\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(string) == \"4\""
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 2 4') == '5'\nassert solution('3 4 5') == '4'\nassert solution('5 4 7') == '4'\nassert solution('5 5 4') == '1'\nassert solution('5 1 2') == '0'\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('5 2 4') == '5'\nassert solution('5 3 4') == '3'\nassert solution('5 1 2') == '0'\nassert solution('5 2 4') == '5'\nassert solution('5 4 5') == '4'\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"5 4\"\nassert solution(input) == \"5 2 4\"\nassert solution(input) == \"5 1\"\nassert solution(input) == \"5\"\nassert solution(input) == \"4 1\"\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"5\"\n\nassert solution(input) == \"4\"\n\nassert solution(input) == \"1\"\n\nassert solution(input) == \"0\"\n\nassert solution(input) == \"0\"\n\n\n\"\"\""
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4 2 4') == '5'\nassert solution('5 2 4') == '4'\nassert solution('5 3 4') == '1'\nassert solution('1 2 3 4') == '3'\nassert solution('2 4 5 1') == '2'\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 12\n\n'''\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == \"342\", \"incorrect result\"\n\"\"\""
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"72 31 0 7\"\n"
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"92 31\"\n\n\"\"\"\n\nimport heapq"
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0 7 31 141'\n"
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2' == 2) == '2'\nassert solution('0' == 0) == '0'\nassert solution('7' == 1) == '0'\nassert solution('31' == 7) == '0'\nassert solution('141' == 141) == '0'\n"
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == [\"92\", \"31\", \"0\", \"7\"]\nassert solution(stdin) == [\"92\", \"31\", \"7\", \"141\"]\nassert solution(stdin) == [\"92\", \"31\", \"0\", \"7\", \"141\"]\nassert solution(stdin) == [\"92\", \"31\", \"7\", \"141\", \"0\"]\nassert solution(stdin) == [\"92\", \"31\", \"7\", \"141\", \"0\", \"7\"]\n"
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"92 7 31 141\""
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '92 31 31 141'\nExplanation\n\nWhen a student goes to line 1, the queue is [2, 31, 0, 7, 31, 0, 141]. The queue is in reverse order because the second line goes before the first one, which is at line 2.\n\nIn line 2, the queue is [31, 0, 7, 31, 0, 141]. The queue is in forward order because the first line goes before the second one, which is at line 1.\n\nFor example, the queue of students in line 1 and line 2 is [2, 31, 0, 7, 31, 0, 141].\n\nNow, when the next student goes to line 3, the queue is [31, 0, 7, 31, 0, 141]. Similarly, the queue is [31, 0, 7, 31, 0, 141].\n\nSo, when the next student goes to line 4, the queue is [31, 0, 7, 31, 0, 141].\n\nSo, when the next student goes to line 5, the queue is [31, 0, 7, 31, 0, 141].\n\nSo, when the next student goes to line 6, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 7, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 8, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 9, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 10, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 11, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 12, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 13, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 14, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 15, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 16, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 17, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 18, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 19, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 20, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 21, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 22, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 23, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 24, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 25, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 26, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 27, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 28, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 29, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 30, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 31, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 32, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 33, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 34, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 35, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 36, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 37, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 38, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 39, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 40, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 41, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 42, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 43, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 44, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 45, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 46, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 47, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 48, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 49, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 50, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 51, the queue is [31, 0, 7, 31, 0, 141].\nSo, when the next student goes to line 52, the queue is [31,"
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input) == \"92 7 31 141\"\nassert solution(input) == \"92 7 31 141\"\n\n\n-----Solution-----\n\nThe picture illustrates the queue for the first sample. [Image]\nimport sys\nfrom collections import deque\ninput = sys.stdin.readline\n\nstdin = sys.stdin.readline\n\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            print(b[i])\n            break\n    else:\n        print(n)\n\n-----Solution-----\n\nThe picture illustrates the queue for the first sample. [Image]\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\n\n\"\"\""
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"13\"\n\"\"\"\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(n = 2) == 0\nassert solution(n = 3) == 13\nassert solution(n = 4) == 17\nassert solution(n = 5) == 21\nassert solution(n = 6) == 36\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1 1\", \"1 2\", \"1 3\", \"1 4\", \"1 5\"]) == \"13\"\nassert solution([\"2 2\", \"1 2\", \"2 2\"]) == \"5\"\nassert solution([\"3 3\", \"2 3\", \"4 3\", \"2 4\", \"2 4\"]) == \"15\"\nassert solution([\"1 3\", \"2 4\", \"3 2\", \"3 2\", \"3 4\", \"4 1\"]) == \"15\"\nassert solution([\"4 4\", \"2 4\", \"4 1\"]) == \"25\"\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 10 10 2\") == \"1 000 000 007\"\nassert solution(\"9 10 3 4\") == \"1 000 000 000\"\nassert solution(\"100 5 5 1 1 1\") == \"1 000 000 000\"\nassert solution(\"100 5 6 5 4 5\") == \"1 000 000 000\"\nassert solution(\"4 9 4 5 5 5\") == \"0 000 000 000\"\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(solution(solution(stdin))) == str(0)\nassert solution(solution(solution(stdin))) == str(0)\nassert solution(solution(solution(stdin))) == str(0)\nassert solution(solution(solution(stdin))) == str(0)\nassert solution(solution(solution(stdin))) == str(0)\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"13\"\n-----Constraints-----\n1 \u2264 n \u2264 10^4\n0 \u2264 h_i \u2264 10^9\n1 \u2264 h_i \u2264 10^9\n\n---\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1 2 3 4 5 6\") == \"13\"\n\nassert solution(\"3 4 2\") == \"7\"\n\nassert solution(\"2 7 4\") == \"32\"\n\nassert solution(\"1 1\") == \"0\"\n\nassert solution(\"1 2\") == \"0\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 20\n\n\n-----Time Limit (Cached)-----\n\nO(n) time | O(n) space\n\n\"\"\""
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\nassert solution(stdin) == 0\nassert solution(stdin) == 6\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(6)\n"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 2^10,\n1 \u2264 b \u2264 10^9,\n0 \u2264 k < x \u2264 100,\nk is always modulo x.\n"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '6'\n"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"12 1 5 10\") == \"3 5 6 7 8 9 5 1 1 1 1 5\"\nassert solution(\"3 2 1 2\") == \"0\"\nassert solution(\"3 2 1 2\") == \"3\"\nassert solution(\"3 3 4 5\") == \"6\"\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6) == \"3\"\nassert solution(3) == \"1\"\nassert solution(5) == \"1\"\nassert solution(7) == \"2\"\nassert solution(6) == \"2\"\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 1\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 3\nassert solution(5) == 3\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 3 6 2 4\"\nassert solution(stdin) == \"1 3 4\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(6, 3) == \"6\"\nassert solution(5, 3) == \"1\"\nassert solution(5, 4) == \"1\"\nassert solution(4, 4) == \"1\"\nassert solution(4, 5) == \"1\"\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2 3 5 4 6 2\"\nassert solution(stdin) == \"1 2 4 3 6\"\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '2'\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 12\n\"\"\"\nclass Solution:\n    def maxMeetingRooms(self, n: int) -> int:\n        \n        if n==1:\n            return 0\n        \n        pre_heap = [0]\n        heapq.heappush(pre_heap, (0, 0))\n        \n        m, ans = 0, 0\n        while pre_heap:\n            \n            room, cnt = heapq.heappop(pre_heap)\n            \n            if room > n:\n                continue\n            \n            if room+cnt>=n:\n                ans = room+cnt-1\n                break\n            \n            else:\n                ans = room+cnt\n                m = room+cnt\n                heapq.heappush(pre_heap, (room+cnt, cnt))\n            \n        return ans\n                \n                \n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(6)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(6) == \"1 5 3 6 2 4\"\nassert solution(3) == \"1 3\"\nassert solution(1) == \"2\"\nassert solution(4) == \"1 2\"\nassert solution(2) == \"2 3\"\n"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\n\n\"\"\"\nclass Edge:\n    def __init__(self, t, f):\n        self.t = t\n        self.f = f\n    \n    def __str__(self):\n        return \"t = \" + str(self.t) + \", f = \" + str(self.f)\n    \n    def __lt__(self, other):\n        return self.t < other.t\n    \n    def __le__(self, other):\n        return self.t <= other.t\n    \n    def __eq__(self, other):\n        return self.t == other.t\n    \n    def __ne__(self, other):\n        return self.t!= other.t\n\nclass Node:\n    def __init__(self, id):\n        self.id = id\n        self.in_edges = []\n        self.out_edges = []\n        self.sink_node = None\n\nclass DAG:\n    def __init__(self):\n        self.head = Node(0)\n        self.tail = Node(0)\n        self.head.sink_node = self.tail\n        self.tail.sink_node = self.head\n\n    def add_edge(self, t, f):\n        edge = Edge(t, f)\n        self.tail.in_edges.append(edge)\n        self.tail.out_edges.append(edge)\n    \n    def add_node(self, id):\n        node = Node(id)\n        self.head.sink_node = node\n        self.tail.sink_node = node\n        return node\n\n    def get_node(self, id):\n        return self.head.sink_node.sink_node.get_node(id)\n\n    def __str__(self):\n        res = \"DAG:\" + str(self.head) + str(self.tail) + \"\\n\"\n        for edge in self.tail.out_edges:\n            res += \"t: \" + str(edge.t) + \" f: \" + str(edge.f) + \"\\n\"\n        return res"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 2 1 0') == '2'\nassert solution('2 3 1 0') == '2'\nassert solution('1 2 0 0') == '0'\nassert solution('1 2 3 0') == '1'\nassert solution('1 2 3 1 0') == '0'\n"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 3\") == \"1\"\nassert solution(\"4 3\") == \"2\"\nassert solution(\"4 3\") == \"1\"\n"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 3\") == \"2\"\nassert solution(\"4 3 2\") == \"2\"\nassert solution(\"4 3 2 3\") == \"3\"\nassert solution(\"4 3 2 3 4\") == \"4\"\nassert solution(\"4 3 2 3 4 5\") == \"5\"\n"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"3 1 0 1\") == \"2\"\nassert solution(\n    \"3 3 0 1\") == \"2\"\nassert solution(\n    \"2 3 0 1\") == \"1\"\nassert solution(\n    \"0 1 0 1\") == \"2\"\nassert solution(\n    \"3 1 0 1\") == \"3\"\n"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 <= N <= 10^5\n1 <= E_{i} <= 10^5\n0 <= T_1, T_2 <= N\n\n------Time complexity-----\n\nTime O(N * M)\n\nTime O(N + M)\n\n------Space complexity-----\n\n1\n\n\"\"\"\n\nclass Solution:\n    def coprocessor(self, tasks, dependencies):\n        tasks.sort()\n        tasks = [0] + tasks + [len(tasks) + 1]\n        result = []\n        for i in range(len(tasks)):\n            if dependencies[i] == 0:\n                if i == 0:\n                    result.append(0)\n                    result.append(0)\n                    result.append(0)\n                else:\n                    result.append(0)\n                    result.append(0)\n                    result.append(0)\n                    result.append(0)\n                    result.append(0)\n                continue\n            result.append(dependencies[i] + tasks[i + 1])\n        return result"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\nassert solution(input()) == \"1\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"2\"\n\nassert solution(input()) == \"1\""
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3,2,5,0,0,0,3,2,5,0,0,0,3,2,5,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 4 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('Hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0') == '3'\nassert solution('a,5,A,0,a,0,A,0,a,0,A,0') == '2'\nassert solution('A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0') == '4'\nassert solution('A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0') == '4'\nassert solution('A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0') == '2'\n"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"test\""
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0\"\n) == \"hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0\"\nassert solution(\n    \"A,5,A,0,a,0,A,0,a,0,A,0\"\n) == \"A,5,A,0,a,0,A,0,a,0,A,0\"\nassert solution(\n    \"A,5,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\"\n) == \"A,5,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\"\nassert solution(\n    \"A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\"\n) == \"A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\"\nassert solution(\n    \"A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\"\n) == \"A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\"\n"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"hello,2,ok,0,bye,0,test,0,one,1,two,2,a,0,b,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,A,0,"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"a,5,A,0,a,0,A,0,a,0,A,0\") == \"3\"\nassert solution(\"a,5,A,0,a,0,A,0,a,0,A,0\") == \"1\"\nassert solution(\"A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\") == \"4\"\n"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"a,5,A,0,a,0,A,0,a,0,A,0\") == \"3\"\nassert solution(\"A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\") == \"4\"\nassert solution(\"A,5,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\") == \"3\"\nassert solution(\"A,5,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\") == \"3\"\nassert solution(\"A,3,B,2,C,0,D,1,E,0,F,1,G,0,H,1,I,1,J,0,K,1,L,0,M,2,N,0,O,1,P,0\") == \"4\"\n"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1,2,3,4,5,6\") == \"2,3,4,5,6,7\"\nassert solution(\"1,2,3,4,5,6,7\") == \"1,2,3,4,5,6,7\"\nassert solution(\"1,2,3,4,5,6,7,8,9,10\") == \"1,2,3,4,5,6,7,8,9,10\"\nassert solution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\") == \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20\"\nassert solution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\") == \"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21\"\n"
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"R.L\") == 2\nassert solution(\"R.U\") == 2\nassert solution(\"R.L\") == 2\nassert solution(\"R.U\") == 0\nassert solution(\"R.L\") == 0\n"
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    {\n        \"3 4 4\": 5,\n        \"..U..\": 2,\n        \"..U..U\": 3\n    }) == \"0 1 2\"\n    assert solution(\n    {\n        \"2 2 2\": 4,\n        \"..L.R..\": 2\n    }) == \"0 1 2\"\n    assert solution(\n    {\n        \"2 2 2\": 5\n    }) == \"0 0 0\"\n    assert solution(\n    {\n        \"..R.L.R\": 2\n    }) == \"1 1 0\"\n    assert solution(\n    {\n        \"..L.R..\": 2\n    }) == \"1 1 0\"\n    "
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 4 3 4\"\n) == \"0 0 0 0 0 0 0 0\"\n\n\nassert solution(\n    \"2 2 2 2 2\"\n) == \"0 0 1 0 0 0 0 0\"\n\n\nassert solution(\n    \"2 3 4\"\n) == \"0 0 0 0 0 0 0 0\"\n\n\nassert solution(\n    \"3 4 6\"\n) == \"0 0 0 0 0 0 0 0\"\n\n\nassert solution(\n    \"3 6 5\"\n) == \"0 0 0 0 0 0 0 0\"\n\n\"\"\"\n\nimport numpy as np"
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0 0 0'\n\"\"\""
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('2 2 2') == '0 1 3'\nassert solution('3 4 8') == '0 3 4'\nassert solution('2 2 2') == '0 0 2'\n\n\n-----Constraints-----\n0 <= k <= m <= n <= 2000\n\n\"\"\""
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0 2 2\"\n\nassert solution(stdin) == \"1 1\"\n\nassert solution(stdin) == \"1 2 2\"\n\nassert solution(stdin) == \"0 0\"\n\nassert solution(stdin) == \"0 0 0\"\n"
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\n\nassert solution(stdin) == \"1\"\n\n\nassert solution(stdin) == \"0\"\n\n\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"2\", \"U\", \"R\", \"L\", \"D\"]) == \"1 3 3 2 1\"\nassert solution([\"2\", \"U\", \"R\", \"L\"]) == \"0 0 0\"\nassert solution([\"L\", \"D\", \"L\", \"U\"]) == \"0 0 0\"\nassert solution([\"L\", \"R\", \"R\", \"R\", \"R\"]) == \"1 1 2\"\nassert solution([\"L\", \"R\", \"R\", \"U\", \"U\"]) == \"0 0 0\"\n"
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\",\"2\",\"2\",\"3\"]) == \"1\"\nassert solution([\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"4\",\"4\",\"4\",\"5\",\"5\"]) == \"3\"\nassert solution([\"2\",\"2\",\"2\",\"3\",\"3\",\"3\",\"4\",\"4\",\"4\",\"4\",\"5\",\"5\",\"5\",\"6\",\"6\",\"6\",\"6\"]) == \"3\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"1\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"1\",\"2\"]) == \"1\"\n"
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == 1\nassert solution(l) == 1\nassert solution(l) == 2\nassert solution(l) == 2\nassert solution(l) == 3\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 2\") == \"5\"\nassert solution(\"3 5\") == \"4\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"6\"\n\nInput\n4 2\n2 5\n\nOutput\n4\n\nInput\n3 2\n2 5\n\nOutput\n3\n\n------\"\"\""
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '1'"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 2') == 2\nassert solution('3 5') == 3\nassert solution('3 4') == 1\nassert solution('3 11 4 1') == 4\nassert solution('3 12 6 1') == 4\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3 2'\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 2 11 4 1') == '4 2 5 6 1'\nassert solution('3 2') == '3 2'\nassert solution('3 2 4 1 3') == '3 2 3'\nassert solution('3 2 4 3 3 1') == '3 2 3 1'\nassert solution('3 2 4 3 3 4 1') == '3 2 3 4'\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"4 2 5 6 1\"\nassert solution(stdin) == \"4 2 5 1\"\nassert solution(stdin) == \"4 1 2 5\"\nassert solution(stdin) == \"4 1 3\"\nassert solution(stdin) == \"4 1 1\"\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"4 2 5 6 1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"5 4 1\"\nassert solution(stdin) == \"6 5\"\nassert solution(stdin) == \"6 5\"\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('xxxxxx') == 'NO', 'Yes'\nassert solution('xxx') == 'YES', 'No'"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"xoxo\") == \"NO\"\nassert solution(\"xox\") == \"YES\"\nassert solution(\"xxx\") == \"NO\""
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5) == \"NO\"\nassert solution(2) == \"YES\"\nassert solution(6) == \"NO\"\nassert solution(1) == \"YES\"\nassert solution(7) == \"YES\"\n"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"YES\"\n"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3\\nxxo\\nox\\nxox\\noxx\\noxx\\nxoxx\\noxx\\nxoxx\\noxx\\nxxxo\\nxoxo\\noxxo\\noxx\\noxx\\nxxxox\\nxoxox\\noxox\\nxoxox\\noxox\\nxoxox\\noxx\\nxoxoxo\\nxoxoxo\\nxoxoxox\\nxoxoxox\\nxoxoxoxo\\nxoxoxoxox\\nxoxoxoxoxo\\nxoxoxoxoxox\\nxoxoxoxoxox\"\n) == \"YES\"\n"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1') == 'YES', 'passed'\n\nassert solution('2') == 'NO', 'failed'\nassert solution('2') == 'NO', 'failed'\nassert solution('2') == 'NO', 'failed'\nassert solution('1') == 'NO', 'failed'\n"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('xxo') == 'YES'\nassert solution('xox') == 'NO'"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"xxo\") == \"YES\", \"solution(xxo) should return YES.\"\nassert solution(\"xox\") == \"NO\", \"solution(xox) should return NO.\"\nassert solution(\"oxx\") == \"NO\", \"solution(oxx) should return NO.\"\n"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"xxo\") == \"NO\"\nassert solution(\"xox\") == \"YES\"\nassert solution(\"xoxo\") == \"YES\"\nassert solution(\"oxox\") == \"NO\"\nassert solution(\"xxxxx\") == \"NO\"\n"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"YES\"\nassert solution(\"1 2 3 4 5\") == \"NO\"\n\n\"\"\""
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2 4'"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"2 1\"\n"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"1 2\", \"3 4\", \"1 3\", \"2 3\", \"3 2\"]) == \"2 3 4\"\nassert solution([\"1 3\", \"2 4\"]) == \"3 4\"\nassert solution([\"1 3\", \"1 2\", \"2 3\", \"3 2\"]) == \"3 2 3\"\nassert solution([\"1 2\", \"3 1\"]) == \"3 1\"\nassert solution([\"1 2\", \"1 3\"]) == \"1 3\"\n"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 3\"\nassert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 3') == '1 2 1'\nassert solution('4 4') == '3 4 2'\nassert solution('3 2') == '1 3 2'\nassert solution('3 4') == '1 4 2'\n"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 1 3\""
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == (3, 2, 3, 1)\nassert solution(inp) == (3, 2, 1, 1)\nassert solution(inp) == (3, 2, 1, 1)\nassert solution(inp) == (3, 3, 2, 2)\nassert solution(inp) == (3, 3, 2, 2)\n"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"3 2\"\n) == \"1 3 1\"\nassert solution(\n    \"4 1\"\n) == \"1 3 1 2\"\nassert solution(\n    \"4 2\"\n) == \"1 3 1 2 4\"\n"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 1\"\n) == \"2 3\"\nassert solution(\n    \"4 3\"\n) == \"4 1\"\nassert solution(\n    \"2 2\"\n) == \"3\"\nassert solution(\n    \"1 3\"\n) == \"1 2\"\nassert solution(\n    \"3 2\"\n) == \"1 3\"\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2 3\") == \"2 2 3\"\nassert solution(\"3 1 4\") == \"3 1\"\nassert solution(\"3 2 2\") == \"3\"\nassert solution(\"3 1 1\") == \"\"\nassert solution(\"1 3 2\") == \"\"\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"2 3 3\"\nassert solution(\"3\") == \"3 2\"\nassert solution(\"5\") == \"3\"\nassert solution(\"3\") == \"3\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '2 2 3 2'\nassert solution(stdin) == '1 1 1 2'\nassert solution(stdin) == '2 2 3 2'\nassert solution(stdin) == '1 1 2'\nassert solution(stdin) == '1 1 2'\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 3 2\") == \"2 2 3\"\nassert solution(\"1 2 3\") == \"1 2 3\"\nassert solution(\"2 3 2\") == \"2 2 3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"7\") == \"7\"\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\") == \"2 3 2\"\nassert solution(\"2 3 3\") == \"1 2 3\"\nassert solution(\"1 2 3\") == \"1 2 3\"\n\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 100\n\n\n\n-----Examples-----\nInput\n1\n1 2 3\n\nOutput\n1 2 2\n\n\"\"\"\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 2 1\") == \"2 2 3 3\"\nassert solution(\"1 2 3 2\") == \"1 1\"\nassert solution(\"1 2 3\") == \"1 1\"\nassert solution(\"1 2 4 5 6 7 8 9 10 11 12\") == \"12\"\nassert solution(\"1 2 4 3\") == \"1 1\"\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 2 3\"\n\n\n-----Alternatives-----\n\nIn August, 2021, there was an error. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too small to be displayed, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too small to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was an error. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too small to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too small to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too small to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too small to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a bug. It's because the answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to be displayed in a display, so it didn't appear in the output.\n\nIn August, 2021, there was a small error. The answer for the example was too large to"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == 2\nassert solution(\"2\") == 2\nassert solution(\"3\") == 1\nassert solution(\"4\") == 1\nassert solution(\"5\") == 1\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3) == 2\nassert solution(2) == 3\nassert solution(1) == 1\nassert solution(4) == 4\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2 3 2\") == \"2 3 2\"\nassert solution(\"2 2 3 3\") == \"3\"\n\n\"\"\""
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('-1') == 735945883\n"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 9\n\n>>> import math\n>>> math.sqrt(10) % 2\n1\n"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 10\nassert solution(input()) == 9\n\n\n'''"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 735945883\n"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == len(set(map(int,input().split())))"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 17\n"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 735945883\n"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 735945883\n"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 735945883\n\"\"\"\n\nfrom bisect import bisect_left"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin=input,\n    expected_stdout=\n    \"9\"\n) == 6\n\"\"\"\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 7 3 4\") == \"14\"\nassert solution(\"2 8 3 4\") == \"36\"\nassert solution(\"2 9 3 4\") == \"36\"\nassert solution(\"1 3 4 5\") == \"36\"\nassert solution(\"1 2 4 5\") == \"36\"\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 11\nassert solution(input()) == 14\n\"\"\""
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 14\n\n\n'''\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"14\"\nassert solution(\"3\") == \"36\"\nassert solution(\"4\") == \"36\"\nassert solution(\"5\") == \"36\"\nassert solution(\"6\") == \"36\"\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"11\"\nassert solution(\"3 7\") == \"14\"\nassert solution(\"4 2\") == \"36\"\nassert solution(\"7 11\") == \"11\"\nassert solution(\"3 1\") == \"1\"\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 6\\n2\\n\") == \"11\\n14\"\nassert solution(\"1 7\\n2\\n\") == \"36\"\n\n\"\"\""
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '11'\nassert solution(stdin) == '14'\nassert solution(stdin) == '36'\nassert solution(stdin) == '29'\nassert solution(stdin) == '29'\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 6\") == 11\nassert solution(\"1 6 7\") == 14\nassert solution(\"1 6 7 11\") == 36\nassert solution(\"1 6 7 11 13\") == 36\nassert solution(\"1 6 7 11 13 14\") == 36\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 14\nassert solution(stdin) == 36\nassert solution(stdin) == 36\nassert solution(stdin) == 36\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 14\nassert solution(stdin) == 36\n\n\"\"\""
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == 3\n'''\n"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3 12\"\nassert solution(input()) == \"3 9\"\nassert solution(input()) == \"4 7\"\nassert solution(input()) == \"5 12\"\nassert solution(input()) == \"5 9\"\n"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == (\"3 12\", \"3 9\")\nassert solution(inp) == (\"2 3\", \"2 3\", \"1 1\", \"1 1\", \"1 1\")\nassert solution(inp) == (\"3 12\", \"3 9\", \"3 9\")\nassert solution(inp) == (\"3 12\", \"3 9\", \"3 9\", \"1 1\", \"1 1\")"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n15\n-1 1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1 -1\n-1"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3 12'\nassert solution(stdin) == '3 9'\nassert solution(stdin) == '4 7'\nassert solution(stdin) == '5 12'\n"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 12\"\nassert solution(stdin) == \"3 9\"\nassert solution(stdin) == \"4 7\"\nassert solution(stdin) == \"5 12\"\n"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 12\"\nassert solution(stdin) == \"3 9\"\nassert solution(stdin) == \"4 7\"\n"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"-1 1 -2 2 -3\") == \"12\"\nassert solution(\"-1 -1 1\") == \"3\"\nassert solution(\"1 -1\") == \"4\"\nassert solution(\"-1 -1 -1\") == \"7\"\nassert solution(\"1 1 -1 -1 -1\") == \"5\"\n"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 1\") == \"3 3\"\nassert solution(\"-1 -1 -1 -1\") == \"3 9\""
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 3 4\") == \"3 9\"\nassert solution(\"-1 -1 2 3\") == \"3 12\"\nassert solution(\"0 0 0 0\") == \"0 0 0 0\"\nassert solution(\"1 1 1 1\") == \"0 1 1 1\"\nassert solution(\"1 1 1 1 -1 -1\") == \"0 1 1 1\"\n"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0101\") == \"0001\"\nassert solution(\"1000\") == \"0111\"\nassert solution(\"00010111010001011101\") == \"01110100010111010001\"\nassert solution(\"00010111011011000101\") == \"01110110001010100101\"\nassert solution(\"0001011101100011101\") == \"011101100010111010001\"\n"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0001\") == \"0011\"\nassert solution(\"001\") == \"0111\"\nassert solution(\"0010\") == \"0101\"\nassert solution(\"0011\") == \"1000\"\nassert solution(\"000\") == \"1001\"\n"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution( \"0001\" ) == \"0011\"\nassert solution( \"000\" ) == \"0111\"\nassert solution( \"1011\" ) == \"0101\"\nassert solution( \"000\" ) == \"000\"\nassert solution( \"110\" ) == \"110\"\n"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0011\""
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '0111'\nassert solution(stdin) == '00101'\nassert solution(stdin) == '10'\nassert solution(stdin) == '000'\nassert solution(stdin) == '0001'\n"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"00011101\"\n\nprint(\"Example 1:\")\nprint(\"Input : \" + stdin)\nprint(\"Output : \" + solution(stdin))\n\nprint(\"Example 2:\")\nprint(\"Input : \" + stdin)\nprint(\"Output : \" + solution(stdin))"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'impossible'\nassert solution(stdin) == '001'\nassert solution(stdin) == '011'\nassert solution(stdin) == '101'\nassert solution(stdin) == '1011'\n"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'impossible'\n\nTest cases\n--------\nTest case #1:\nInput\n0001\n1011\n\nOutput\n0011\n\nTest case #2:\nInput\n000\n111\n\nOutput\n0111\n\nTest case #3:\nInput\n000\n111\n\nOutput\n0111\n\n\"\"\""
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"0011\"\n\n\nassert solution(stdin) == \"0011\"\nassert solution(stdin) == \"0111\"\nassert solution(stdin) == \"0001\"\n"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '22'\n\"\"\"\n\nimport unittest\n"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '22'\n\n-----Constraints-----\n\n1 <= n <= 1000\n\n1 <= a_1, a_2,..., a_{n} <= 10^6\n\n------Submissions--------\n1\n7\n3\n7\n8\n8\n------Time Limit exceeded---------\n\n> "
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(22 / 3)\n\"\"\""
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 22\n\"\"\"\n"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input().split()) == '22'\nassert solution(input().split()) == '17'\nassert solution(input().split()) == '14'\nassert solution(input().split()) == '2'\nassert solution(input().split()) == '1'\n"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 22\nassert solution(2) == 40\nassert solution(3) == 53\nassert solution(4) == 120\nassert solution(5) == 151\n"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 22"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(6) == 22\n\n\n------Test Cases-----\n\nInput\n10\n2 5 3\n\nOutput\n33\n\nExplanation\nThe first route has a total distance of $33$, so you need $33/2$.\nThe second route has a total distance of $21$, so you need $21/2$.\nThe third route has a total distance of $15$, so you need $15/2$.\nThe fourth route has a total distance of $10$, so you need $10/2$.\nThe fifth route has a total distance of $7$, so you need $7/2$.\nThe sixth route has a total distance of $5$, so you need $5/2$.\nThe seventh route has a total distance of $2$, so you need $2/2$.\nThe eighth route has a total distance of $1$, so you need $1/2$.\nThe ninth route has a total distance of $1$, so you need $1/2$.\nThe tenth route has a total distance of $1$, so you need $1/2$.\nThe eleventh route has a total distance of $0$, so you need $0/2$.\nThe twelfth route has a total distance of $0$, so you need $0/2$.\nThe thirteenth route has a total distance of $0$, so you need $0/2$.\nThe fourteenth route has a total distance of $0$, so you need $0/2$.\nThe ninth route has a total distance of $0$, so you need $0/2$.\nThe tenth route has a total distance of $0$, so you need $0/2$.\nThe eleventh route has a total distance of $0$, so you need $0/2$.\nThe twelfth route has a total distance of $0$, so you need $0/2$.\nThe thirteenth route has a total distance of $0$, so you need $0/2$.\nThe fourteenth route has a total distance of $0$, so you need $0/2$.\nThe ninth route has a total distance of $0$, so you need $0/2$.\nThe tenth route has a total distance of $0$, so you need $0/2$.\nThe eleventh route has a total distance of $0$, so you need $0/2$.\n\n\n-------Test Cases-----\n\nInput\n7\n1 2 4 5\n\nOutput\n12\n\nExplanation\nOne way route is:\n    1) 5 -> 4 -> 2 -> 1 -> 3 -> 2 -> 1\n    2) 3 -> 2 -> 1 -> 2 -> 3 -> 1\n    3) 2 -> 1 -> 3 -> 2 -> 3 -> 1\n    4) 1 -> 3 -> 2 -> 3 -> 2 -> 4 -> 2 -> 3 -> 4 -> 2 -> 3 -> 4 -> 4 -> 3 -> 2 -> 2 -> 1 -> 1 -> 1 -> 2 -> 4 -> 4 -> 1 -> 3 -> 2 -> 4 -> 3 -> 2 -> 4 -> 3 -> 2 -> 4 -> 1 -> 2 -> 1 -> 2 -> 1 -> 2 -> 1 -> 1 -> 2 -> 1 -> 3 -> 2 -> 4 -> 2 -> 4 -> 3 -> 2 -> 4 -> 3 -> 2 -> 4 -> 1 -> 2 -> 2 -> 1 -> 3 -> 2 -> 4 -> 4 -> 4 -> 3 -> 2 -> 4 -> 3 -> 2 -> 4 -> 3 -> 4 -> 3 -> 2 -> 2 -> 4 -> 4 -> 4 -> 3 -> 4 -> 4 -> 4 -> 3 -> 2 -> 4 -> 2 -> 4 -> 2 -> 4 -> 2 -> 4 -> 3 -> 4 -> 3 -> 4 -> 2 -> 4 -> 4 -> 4 -> 3 -> 3 -> 2 -> 4 -> 4 -> 3 -> 2 -> 4 -> 2 -> 4 -> 4 -> 3 -> 3 -> 3 -> 2 -> 4 -> 2 -> 4 -> 2 -> 4 -> 4 -> 4 -> 3 -> 4 -> 3 -> 3 -> 3 -> 4 -> 2 -> 2 -> 4 -> 4 -> 4 -> 3 -> 3 -> 4 -> 3 -> 2 -> 4 -> 2 -> 4 -> 3 -> 3 -> 2 -> 4 -> 3 -> 4 -> 4 -> 4 -> 3 -> 3 -> 2 -> 2 -> 4 -> 4 -> 4 -> 3 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 3 -> 4 -> 2 -> 4 -> 4 -> 3 -> 2 -> 3 -> 4 -> 3 -> 2 -> 3 -> 4 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 3 -> 2 -> 4 -> 4 -> 3 -> 2 -> 4 -> 3 -> 4 -> 3 -> 4 -> 2 -> 3 -> 4 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 3 -> 4 -> 2 -> 4 -> 4 -> 3 -> 3 -> 3 -> 2 -> 4 -> 3 -> 3 -> 4 -> 4 -> 2 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 3 -> 3 -> 4 -> 2 -> 3 -> 4 -> 4 -> 3 -> 3 -> 2 -> 4 -> 4 -> 3 -> 3 -> 4 -> 2 -> 4 -> 4 -> 4 -> 4 -> 4 -> 3 -> 3 -> 2 -> 4 -> 4 -> 4 -> 4 -> 3 -> 3 -> 2 -> 4 -> 3 -> 4 -> 3 -> 4 -> 4 -> 3 -> 4 -> 2 -> 4 -> 4 -> 4 -> 4 -> 4 -> 3 -> 3 -> 3 -> 2 -> 4 -> 4 -> 4 -> 4 -> 3 -> 4 -> 4 -> 3 -> 2 -> 4 -> 3 -> 4 -> 3 -> 2 -> 4 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 4 -> 3 -> 4 -> 3 -> 4 -> 4 -> 3 -> 4 -> 2 -> 4 -> 3 -> 4 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 3 -> 3 -> 4 -> 3 -> 2 -> 4 -> 4 -> 3 -> 4 -> 3 -> 3 -> 2 -> 4 -> 4 -> 3 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 3 -> 3 -> 2 -> 4 -> 3 -> 2 -> 4 -> 4 -> 3 -> 3 -> 4 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 3 -> 3 -> 3 -> 2 -> 4 -> 4 -> 4 -> 3 -> 4 -> 4 -> 4 -> 3 -> 4 -> 3 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 4 -> 3 -> 2 -> 4 -> 4 -> 4 -> 4 -> 3 -> 4"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str(input())) == '22'\nassert solution(str(input())) == '22'\nassert solution(str(input())) == '22'\nassert solution(str(input())) == '22'\nassert solution(str(input())) == '22'\n"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 22"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(9)\n"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('4') == '16'\nassert solution('2') == '10'\nassert solution('1') == '1'\nassert solution('-1 -1') == '9'\nassert solution('0 1') == '9'\n"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n\nprint(solution(stdin))\n\n------Swap-----\n\nThere are two lines containing two horizontal lines and a vertical line.\n\nfor i in range(1, stdin.length - 1):\n    stdin[i] = stdin[i - 1]\n    stdin[i - 1] = stdin[i + 1]\n    stdin[i + 1] = stdin[i]\n\nNow every pair of lines in the picture contains two distinct lines.\n\nFor example, every pair of lines in the picture has a distinct line of the form (i, j).\n\nFor example, every line in the picture has two distinct lines.\n\nIf you write down both lines in the picture, you can look at both lines as a line in the picture.\n\nFor example, the line (1, 2), (2, 3), and (2, 4) are distinct lines.\n\nThe picture contains a pair of lines (i, j) which have a distinct line in the picture.\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013 the number of points.\n\nn lines follow. The (i + 1)-th of these lines contains two integers x_{i}, y_{i} ( - 10^9 \u2264 x_{i}, y_{i} \u2264 10^9)\u00a0\u2014 coordinates of the i-th point.\n\nIt is guaranteed that all points are distinct.\n\nOutput\n\nPrint the number of distinct pairs in the picture.\n\nInput\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5) \u2013"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1') == '16', 'Should be 16'\nassert solution('1 0 0') == '1', 'Should be 1'\nassert solution('1 2 1') == '3', 'Should be 3'\nassert solution('0 -1 -1') == '6', 'Should be 6'\n"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 32\nassert solution(stdin) == 45\nassert solution(stdin) == 105\nassert solution(stdin) == 3\n"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2 2\") == '12'\nassert solution(\"1 2 1 2 2\") == '6'\nassert solution(\"2 1 2\") == '3'\nassert solution(\"2 1 2\") == '5'\nassert solution(\"0 1 2 0 0\") == '1'\n"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == 9\nassert solution(\"3\") == 3\nassert solution(\"4\") == 1\nassert solution(\"4\") == 2\nassert solution(\"5\") == 1\n"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"16\"\nassert solution(inp) == \"9\"\n\"\"\"\n\nimport math"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 9\n\n------Constraints-----\n\n1 <= n <= 10^5\n\n3^2 <= n <= 10^5\n\n-----Time Limit: 1 second -----\n\nSample Input 1:\n\n3\n1 1\n1 2\n2 1\n2 2\n\nSample Output 1:\n\n11\n\nSample Input 2:\n\n1\n-1 -1\n0 1\n\nSample Output 2:\n\n8\n\nSample Input 3:\n\n3\n-1 -1\n0 1\n\nSample Output 3:\n\n5\n\n-----Note-----\n\nIn the first example there are two vertical and two horizontal lines passing through the points. You can get pictures with any subset of these lines. For example, you can get the picture containing all four lines in two ways (each segment represents a line containing it). The first way:   [Image]   The second way:   [Image] \n\nIn the second example you can work with two points independently. The number of pictures is 3^2 = 9.\n\n------Constraints-----\n\n1 <= n <= 10^5\n\n-10^9 < x_{i} < 10^9\n-10^9 < y_{i} < 10^9\n\n------Time Limit: 1 second -----\n\ninput1: stdin\noutput1: stdout\ninput2: stdin\noutput2: stdout\n\ninput3: stdin\noutput3: stdout\ninput4: stdin\noutput4: stdout\n\ninput5: stdin\noutput5: stdout\n\ninput6: stdin\noutput6: stdout\n\ninput7: stdin\noutput7: stdout\n\ninput8: stdin\noutput8: stdout\n\ninput9: stdin\noutput9: stdout\n\ninput10: stdin\noutput10: stdout\n\n-----Note-----\n\nIn the first example there are two vertical and two horizontal lines passing through the points. You can get pictures with any subset of these lines. For example, you can get the picture containing all four lines in two ways (each segment represents a line containing it). The first way:   [Image]   The second way:   [Image] \n\nIn the second example you can work with two points independently. The number of pictures is 3^2 = 9.\n\n-----Time Limit: 1 second -----\n\n'''\nimport sys\nfrom collections import defaultdict\nfrom itertools import permutations"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"pass\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100 000\n1 \u2264 m \u2264 10^9\n1 \u2264 t_i < 10^k for 1 \u2264 t_i \u2264 10^9\n\"\"\"\n"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"1 1 1 1 2 2 2 2 2 2 2 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3, 7) == 2\nassert solution(4, 14) == 2\n\n\n-----Constraints-----\n\n1 <= n <= 100 000\n1 <= m <= 10^9\n1 <= a_1, a_2,..., a_{n} < 10^9\n\n\n\n-----Usage-----\nRuntime: 40 ms, faster than 94.85% of Python3 online submissions for Optimal Toys in Heap.\nMemory Usage: 14.2 MB, less than 39.53% of Python3 online submissions for Optimal Toys in Heap.\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 5\"\n\"\"\""
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"4\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"4\"\n"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\"]) == \"21\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"]) == \"21\"\nassert solution([\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"]) == \"21\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 30\nstdin.length <= 10^9\nstdin contains only lowercase letters.\n0 <= stdin[i] <= 10^9\nstdin contains only lowercase letters.\n\n'''\n\nimport sys"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3 4\") == \"2 5\"\nassert solution(\"4 14\") == \"4 6 12 8\"\nassert solution(\"4 10\") == \"10\"\nassert solution(\"10\") == \"10\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\n\n\n-----Time complexity-----\n\nTo maximize the number of distinct toys possible, Tanya has to spend all the toys that it has so that the number of distinct toys in her collection is maximal possible. The rest of the remaining information is not used.\n\n------Logic-----\n\nInput:\n3 7\n1 3 4\n\nOutput:\n2\n2 5 \n\nInput:\n4 14\n4 6 12 8\n\nOutput:\n4\n7 2 3 1\n\nInput:\n10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4, 7) == 3\nassert solution(4, 6) == 1\nassert solution(4, 12) == 4\nassert solution(6, 4) == 5\nassert solution(10, 10) == 2\n"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 0"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4\") == \"2\"\nassert solution(\"6\") == \"3\"\nassert solution(\"6\") == \"2\"\nassert solution(\"10\") == \"0\"\nassert solution(\"100\") == \"0\"\n"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"\"\"\n    1 5\n    1 9 4\n    2 9 5\n    3 9 1\n    4 9 3\n    5 3 0\n    6 1 0\n    7 6 0\n    \"\"\"\n) == 7\n\nassert solution(\n    \"\"\"\n    1 2\n    1 3\n    2 1\n    2 3\n    3 2\n    3 1\n    4 2\n    \"\"\"\n) == 1\n\nassert solution(\n    \"\"\"\n    1 5\n    4 4\n    3 4\n    3 3\n    1 2\n    4 4\n    \"\"\"\n) == 2\n\nassert solution(\n    \"\"\"\n    0 1\n    0 1\n    0 1\n    0 1\n    0 1\n    1 1\n    \"\"\"\n) == 0\n\nassert solution(\n    \"\"\"\n    4 3\n    4 2\n    3 2\n    1 2\n    1 1\n    3 1\n    3 3\n    \"\"\"\n) == 4"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n\n\"\"\"\nimport unittest\nimport sys\n\nsys.setrecursionlimit(10000)\n\nfrom time import time"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"0\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"0\"\n"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= a_1, a_2,..., a_{n} <= 10^9\n\nA + B = 10^9\n\n--- Nguyen Van Duc ---\n\ninput:\n4\n12 14 30 4\n\noutput:\n2\n\ninput:\n6\n120 110 23 34 25 45\n\noutput:\n3\n\ninput:\n6\n121 56 78 81 45 100 1 0 54 78\n\noutput:\n0\n\n\n\ninput:\n6\n120 110 23 34 25 45\n\noutput:\n6\n121 56 78 81 45 100 1 0 54 78\n\ninput:\n10\n120 110 23 34 25 45\n\noutput:\n3\n\ninput:\n10\n121 56 78 81 45 100 1 0 54 78\n\noutput:\n0\n\n\n\n----Time Complexity---\n\nO(n)\n\nO(n)\n\nO(1)\n\nTime Complexity: O(n)\n\n\n\n----Sample Input----\n\ninput:\n6\n120 110 23 34 25 45\n\noutput:\n3\n\ninput:\n10\n121 56 78 81 45 100 1 0 54 78\n\noutput:\n3\n\ninput:\n10\n120 110 23 34 25 45\n\noutput:\n0\n\n\n\n----Sample Output----\n\noutput:\n0\n\n\n--- Nguyen Van Duc ---\n\ninput:\n6\n120 110 23 34 25 45\n\noutput:\n0\n\n\n\ninput:\n10\n120 110 23 34 25 45\n\noutput:\n2\n\ninput:\n10\n121 56 78 81 45 100 1 0 54 78\n\noutput:\n0\n\n\n\ninput:\n10\n120 110 23 34 25 45\n\noutput:\n6\n121 56 78 81 45 100 1 0 54 78\n\ninput:\n10\n120 110 23 34 25 45\n\noutput:\n2\n\ninput:\n10\n120 110 23 34 25 45\n\noutput:\n1\n\ninput:\n10\n120 110 23 34 25 45\n\noutput:\n1\n\n\n----time complexity---\n\nO(n)\n\nO(1)\n\nO(n)\n\nO(n)\n\nO(1)\n\nTime Complexity: O(n)\n\nSample Output:\n\noutput:\n0\n\n--- Nguyen Van Duc ---\n\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        candies = list(map(int,stdin.split()))\n        candies.sort()\n        n = len(candies)\n        ans = 0\n        \n        for i in range(n):\n            remain = candies[i]\n            for j in range(i, n):\n                remain -= candies[j]\n                if remain < 0:\n                    break\n                if remain == 0:\n                    ans += 1\n                    break\n                \n        return str(ans)\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        candies = list(map(int,stdin.split()))\n        candies.sort()\n        n = len(candies)\n        ans = 0\n        \n        for i in range(n):\n            remain = candies[i]\n            for j in range(i, n):\n                remain -= candies[j]\n                if remain < 0:\n                    break\n                if remain == 0:\n                    ans += 1\n                    break\n                \n        return str(ans)\n'''\n\n'''\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        candies = list(map(int,stdin.split()))\n        candies.sort()\n        n = len(candies)\n        ans = 0\n        \n        for i in range(n):\n            remain = candies[i]\n            for j in range(i, n):\n                remain -= candies[j]\n                if remain < 0:\n                    break\n                if remain == 0:\n                    ans += 1\n                    break\n                \n        return str(ans)\n\n'''\n"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '0'\n"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == 0\nassert solution(\"5 3\") == 0\nassert solution(\"2 1 0\") == 1\nassert solution(\"2 0 1 0\") == 3\nassert solution(\"2 0 1 1\") == 3\n\n\n-----Test-----\n\nExpected output:\n3\n3\n\nInput:\n4\n121 110 23 34 25 45\n\nOutput:\n3\n\nInput:\n6\n120 110 23 34 25 45\n\nOutput:\n0\n\n\"\"\""
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"12 14 30 4\") == \"2\"\nassert solution(\"6 0 0 0 0 0\") == \"6\"\nassert solution(\"6 0 0 0 0 0\") == \"3\"\nassert solution(\"6 0 0 0 0 0\") == \"3\"\nassert solution(\"10 121 56 78 81 45 100 1 0 54 78\") == \"0\"\n"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 10\") == \"1\"\nassert solution(\"10 10\") == \"2\"\nassert solution(\"10 20\") == \"2\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"10 10\") == \"1\"\n"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 1\n\"\"\""
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 10\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"10 10\") == \"1\"\nassert solution(\"10 10\") == \"0\"\nassert solution(\"10 10\") == \"1\"\n"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1\"\n\"\"\"\n\nfrom collections import deque\n\nT = int(stdin.readline())\n\nfor _ in range(T):\n    n, m = map(int, stdin.readline().split())\n    st = []\n    for _ in range(n):\n        st.append(stdin.readline().rstrip())\n    q = deque(st)\n    visited = {s: False for s in st}\n    while len(q):\n        x = q.popleft()\n        if x == '.':\n            if len(q) == 0:\n                return '0'\n            q.append('.')\n        else:\n            for i in range(len(x)):\n                if x[:i+1] in visited:\n                    continue\n                visited[x[:i+1]] = True\n                q.append(x[i+1:])\n    print(''.join(q))\n"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n'''"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(''.join(input() for _ in range(int(input())))) == '0'\n\"\"\""
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '4'\n\nassert solution(stdin) == '5'"
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('10 8') == 'B-B'\nassert solution('2 2') == 'B-B'\nassert solution('2 3') == 'B-B'\nassert solution('2 4') == 'B-B'\nassert solution('1 1') == 'W-B'\n"
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"B\"\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"-.\") == \"-B\"\nassert solution(\"-.\") == \"-B\"\nassert solution(\".\") == \"-W\"\nassert solution(\"W\") == \"-B\"\nassert solution(\"W\") == \"-B\"\n"
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"B-B\"\nassert solution(input()) == \"BW\"\nassert solution(input()) == \"B-B\"\nassert solution(input()) == \"B-B\"\nassert solution(input()) == \"B-B\"\n"
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'W'\nassert solution(stdin) == 'B'\nassert solution(stdin) == 'W-'\nassert solution(stdin) == 'B-'\nassert solution(stdin) == '-B'\n"
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"2 3......................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................."
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"B-B\"\n\n\n------Sample Output-----\n\nInput\n1 1\n.\n\nOutput\nB\n\nInput\n2 2\n..\n..\n\nOutput\nB-B\n---\n--B\n\n\n------Sample Input-----\n\nInput\n1 1\n-\nOutput\nB\n\nInput\n2 2\n.\n\nOutput\nB\n\nInput\n3 3\n.-.\n---\n--.\nOutput\n-B-B\n---\n--B\n\n\n------Expected Output------\n\nInput\n1 1\n.\n\nOutput\nB\n\nInput\n2 2\n-\nOutput\nB\n\nInput\n3 3\n.-.\n---\n--.\nOutput\n-B-B\n---\n--B\n\"\"\"\n\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        \n        def get_color(s,i):\n            if s[i] == \"-\":\n                return \"B\"\n            elif s[i] == \"W\":\n                return \"W\"\n            else:\n                return \"-\"\n        \n        def set_color(s,i,color):\n            if i == len(s)-1:\n                if s[i] == \"-\":\n                    return color\n                else:\n                    return \"B\"\n            if s[i] == \"-\":\n                return \"B\"\n            else:\n                return \"W\"\n        \n        n,m = map(int,stdin.split())\n        chars = list(stdin.split())\n        good = {}\n        bad = set()\n        \n        # for j in range(m):\n        for j in range(m):\n            if chars[j] == \".\":\n                bad.add(j)\n        \n        for i in range(n):\n            current_color = set_color(chars,i,get_color(chars,i))\n            \n            if current_color == get_color(chars,i):\n                good[i] = True\n            else:\n                bad.add(i)\n            \n        if len(bad) > 0:\n            return \"-\"\n        \n        for i in range(n):\n            if good[i]:\n                chars[i] = \"B\"\n                set_color(chars,i,get_color(chars,i))\n        return \"\".join(chars)\n        "
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"BWB-BWB-BWB\"\n\n\n===== Solutions =====\n\n- DZY is the solution, but it's hard to prove that it is correct. It's not an obvious solution.\n- it is even better, because you can put 2 black cells on a chessboard and you can only place a black chessman in the center cell.\n- it is better, because you can put black cells in a wrong position if there is a black cell on the board with the same color.\n- it is better, because you can put black cells in a wrong position if there is a black cell on the board with opposite color.\n- it is better, because you can put black cells in a wrong position if there are adjacent black cells.\n\n---\n\n===== Notes =====\n\n- For the sake of simplicity, the input is in standard format.\n- the input will always consist of two non-negative integers n and m, and will contain the following format:\n .\n .\n .\n .\n\n- a valid string of length <= m is considered valid if there are no invalid characters in it.\n- a valid string of length <= n is considered valid if there are no invalid characters in it.\n\n- a valid string of length <= m contains exactly one of the characters \"W\", \"B\" or \".\".\n- a valid string of length <= n contains exactly one of the characters \"W\", \"B\" or \".\".\n- it is guaranteed that there are no two black cells on the board with the same color.\n- it is guaranteed that there are no two black cells on the board with opposite color.\n- it is guaranteed that no two adjacent black cells are adjacent.\n- it is guaranteed that there is only one black cell with the same color, and it is possible that the board is a valid one.\n\"\"\""
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"B\"\n\nassert solution(stdin) == \"BW\"\n\nassert solution(stdin) == \"B-B\"\n\nassert solution(stdin) == \"WB\"\n\n-----Sample Input-----\n\nInput\n1 1\n.\n\nOutput\nB\n\nInput\n2 1\n..\n\nOutput\nB\n\nInput\n1 1\n-\n\nOutput\nB\n\nSample Input:\n1 1\n-\nSample Output:\nB-B\n\nSample Input:\n2 1\n.\nSample Output:\nB\n\nSample Input:\n3 3\n-.-\nSample Output:\nB-B\n\nSample Input:\n1 2\n.\nSample Output:\nB\n\nSample Input:\n2 2\n-..\nSample Output:\nB\n\nSample Input:\n1 3\n-\nSample Output:\nB\n\nSample Input:\n2 2\n-\nSample Output:\nB-B\n\nSample Input:\n3 3\n-.-\nSample Output:\nB-B\n\n'''\n\nimport sys\n"
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 1\") == \"B\"\nassert solution(\"2 2\") == \"B\"\nassert solution(\"3 3\") == \"BW\"\nassert solution(\"4 4\") == \"BW\"\nassert solution(\"5 5\") == \"B\"\n"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2 1 1 0 0\"\nassert solution(stdin) == \"0 1 1 2 1 1 0 0\"\nassert solution(stdin) == \"0 1 1 2 1 1 0 0\"\nassert solution(stdin) == \"0 1 1 2 1 1 0 0\"\nassert solution(stdin) == \"2 2 1 1 0 0\"\n"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"aa\") == \"2 2 1 1 0 0\"\nassert solution(\"axbaxxb\") == \"0 1 1 2 1 1 0 0\"\nassert solution(\"ab\") == \"0 1 1 2 1 1 0 0\"\nassert solution(\"a\") == \"0 1 1 2 1 1 0 0\"\nassert solution(\"\") == \"\""
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"axbaxxb\") == \"1 1 1 1 1 0 0\"\nassert solution(\"aa\") == \"1 1 1 1 1 0 0\"\nassert solution(\"aaa\") == \"1 1 1 1 1 0 0\"\nassert solution(\"aaaaa\") == \"2 2 1 1 1 0 0\"\nassert solution(\"axbaxxb\") == \"0 1 1 1 1 1 1 0 0\"\n"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('aa') == 2\nassert solution('axbaxxb') == 2\nassert solution('aaaaa') == 1\nassert solution('aaaaa') == 2\nassert solution('aaaa') == 1\n"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 2 1 1 0 0\"\n\n\n-----Constraints-----\n\n1 <= s.length <= 2 * 10^4\n\n\n-----Time complexity-----\n\nBest Case = O(|s|)\n\n\n\n-----Submissions-----\n\nYou can use dynamic programming to solve this problem. The idea is to explore the substrings of s and create a new solution for the string whose length is p. \n\nNote that you have to calculate $\\operatorname{ans}(s^{\\prime}, p)$ so that the same length of each substring is replaced by the maximal number of non-overlapping substrings that can be obtained by removing exactly x characters from s.\n\n\"\"\"\n\nclass Solution:\n    def numOptimalStrings(self, s: str, p: int) -> int:\n        def num_of_non_overlapping(s, p):\n            return sum(1 for _ in range(len(s)) if s[_]!= p)\n        \n        def solve(s, p):\n            if not s:\n                return 0\n            \n            if len(s) == 1:\n                return 1\n            \n            if len(s) == 2:\n                return 2 if s[0] == s[1] else 3\n            \n            d = num_of_non_overlapping(s, p)\n            \n            return solve(s[1:], p) + solve(s, p) + d\n        \n        return solve(s, p)"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aaaaa\") == 1\nassert solution(\"axbaxxb\") == 2\nassert solution(\"ab\") == 1\nassert solution(\"a\") == 1\nassert solution(\"\") == 0\n"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('a') == 2, 'expected answer to be 2, got: {}'.format(2)\nassert solution('aaaa') == 3, 'expected answer to be 3, got: {}'.format(3)\nassert solution('axbaxxb') == 1, 'expected answer to be 1, got: {}'.format(1)\nassert solution('abaxxbab') == 0, 'expected answer to be 0, got: {}'.format(0)\nassert solution('aaaab') == 2, 'expected answer to be 2, got: {}'.format(2)\n"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 1 1 1 1 0 0\"\n\"\"\""
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"axbaxxb\") == \"2 1 1 1 0 0\"\nassert solution(\"abab\") == \"0 1 1 2 1 1 0 0\"\nassert solution(\"\") == \"0 1 1 2 1 1 0 0\"\nassert solution(\"a\") == \"1 0 0 0 1 0 0 0\"\n"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('aaa'), '0 1 1 1 2 1 1 0'\nassert solution('axbaxxb'), '0 1 1 1 2 1 1 0'\nassert solution('ab'), '0 1 1 2 1 1 0'\nassert solution('aa'), '0 1 1 2 1 1 0'\nassert solution('aaaaa'), '0 1 1 2 1 1 0'\n"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"(8 1 2 3) 5 (1) 4 (8) 2 (6)\") == \"1\"\nassert solution(\n    \"(8 1 2 3) 5 (1) 4 (8) 2 (6)\") == \"2\"\nassert solution(\n    \"(8 1 2 3) 5 (1) 4 (8) 2 (6)\") == \"5\"\nassert solution(\n    \"(8 1 2 3) 5 (1) 4 (8) 2 (6)\") == \"4\"\nassert solution(\n    \"(8 1 2 3) 5 (1) 4 (8) 2 (6)\") == \"8\"\n"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 8) == 2, \"Incorrect answer\"\nassert solution(3, 8) == 5, \"Incorrect answer\"\nassert solution(3, 4) == 2, \"Incorrect answer\"\nassert solution(3, 2) == 5, \"Incorrect answer\"\nassert solution(4, 2) == 2, \"Incorrect answer\"\n"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 4 8 2\"\n) == 5, \"Error on line 1\"\nassert solution(\n    \"3 5 6\"\n) == 2, \"Error on line 2\"\nassert solution(\n    \"3\"\n) == 1, \"Error on line 3\"\n\"\"\"\nimport sys\n\nn, *_ = map(int, sys.stdin.read().split())\na = [int(i) for i in sys.stdin.read().split()]"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\n\nInput\n1\n5 4\n\nOutput\n1\n"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n3\n4 8 2\n\nOutput\n5\n\"\"\"\n\nimport math"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"3 2 3\"\n\nassert solution(stdin) == \"2 1\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"5\"\n\n------Test Input-----\n3\n4 8 2\n\n------Test Output-----\n2\nInput\n3\n3 5 6\nOutput\n5\n\n\n------Test Input-----\n2\n1\n1 2 3 4 5 6\nOutput\n1\n\n\n------Test Output-----\n2\n2\nInput\n3\n4 2 3 8 2 4\nOutput\n3\n\n\n------Expected Output------\n2\nInput\n3\n3 5 6\nOutput\n5\n\n\n------Expected Output------\n1\nInput\n3\n4 2 3 8 2 4\nOutput\n3\n\n\n------Expected Output------\n2\nInput\n3\n4 2 3 8 2 4\nOutput\n1\n\n\n------Expected Output------\n2\nInput\n2\n5\nOutput\n1\n\n\n-----Bye-----\n'''\n\nclass Solution:\n    def volume(self, a):\n        if a == 0:\n            return 0\n        return pow(a, 3) / (3 * (3 - 1))"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 5\n\nassert solution(stdin)!= 2\nassert solution(stdin)!= 5\n\nassert solution(stdin)!= 2\n"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"5\"\n\n\n\"\"\""
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4 8 2\") == \"2\"\nassert solution(\"3 5 6\") == \"5\"\nassert solution(\"3\") == \"0\"\nassert solution(\"3 2 3\") == \"0\"\nassert solution(\"3 5 6 2\") == \"1\"\n"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == solution(stdin)\n'''\nimport sys\nimport math\nfrom collections import Counter"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"4 3 2\") == \"3\"\nassert solution(\"4 3 1\") == \"1\"\nassert solution(\"4 1\") == \"2\"\nassert solution(\"4 2\") == \"1\"\nassert solution(\"1 1\") == \"2\"\n"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n\n\nExplanation\nNura needs 5 days to buy k gadgets.\nn = 4\nm = 2\nk = 1\ns = 200\nt = 2\nc = 2\nd = 3\nq = 1\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 3 2\") == \"-1\"\nassert solution(\"4 3 1\") == \"1\"\nassert solution(\"4 3 1\") == \"3\"\nassert solution(\"4 4 1\") == \"1\"\nassert solution(\"4 4 1\") == \"4\"\n"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"-1\""
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"3 2\"\nassert solution(inp) == \"3 1\"\nassert solution(inp) == \"3 2 2\"\nassert solution(inp) == \"3 2\"\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"001111111100011\") == \"2\"\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1111111011\",\"1111111111\",\"1100111111\",\"1101111111\",\"1111111111\"]) == \"2\"\nassert solution([\"1111111011\",\"1111111111\",\"1100111111\",\"1101111111\",\"1111111111\"]) == \"2\"\nassert solution([\"11111000011\",\"1111011111\",\"11111100001\",\"11011111111\",\"111111000011\"]) == \"2\"\nassert solution([\"1111111111\",\"1101111111\",\"1111111111\",\"1101111111\",\"1111111111\"]) == \"2\"\nassert solution([\"1111111111\",\"1111111111\",\"1100111111\",\"1101111111\",\"1101111111\"]) == \"2\"\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\"\"\"\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n-----Constraints-----\n0 < stdin.length < 100\n\nExplanation\nInput will be input in a standard input format.\nThe first line of input will contain a single integer n (1 \u2264 n \u2264 100).\nThe next n lines will contain a binary string with n characters denoting the state of the i-th row of the room.\nThe i-th character on this line is '1' if the j-th square in the i-th row is clean, and '0' if it is dirty.\n\nTest Cases\n\nInput:\n4\n0101\n1000\n1111\n0101\n\nOutput:\n2\n\nInput:\n3\n111\n111\n111\n\nOutput:\n3\n\nExplanation:\n\nIn the first sample, Ohana can sweep the 1st and 3rd columns. This will make the 1st and 3rd rows be completely clean.\n\nIn the second sample, everything is already clean, so Ohana doesn't need to do anything.\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('11100') == 2\nassert solution('111000') == 2\nassert solution('111000') == 2\nassert solution('110000') == 3\nassert solution('110101') == 3\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\n--------------------------\n\ndp[i][j] denotes the result of applying the state of the ith row of the grid to the ith column of the jth column of the grid.\n\ndp[i][j] = dp[i][j] + dp[i][j+1] + dp[i][j+2] +... dp[i][j+n]\n\ndp[i][j] = max(dp[i][j], dp[i][j+1] + dp[i][j+2] +... dp[i][j+n])\n\n----------------------------\n\ndp[i][j] = dp[i][j] + max(dp[i][j], dp[i][j+1] + dp[i][j+2] +... dp[i][j+n])\n\n\"\"\"\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('00111100') == 5\nassert solution('00001111') == 4\nassert solution('00011111') == 2\nassert solution('111011010') == 3\nassert solution('101101111') == 0\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"111100001101000010011010000111000100110010110010111101001010101101111011\"\n) == 7\nassert solution(\n
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"30\"\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 1 0\"\nassert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"4 3 2\"\nassert solution(stdin) == \"1 4 1\"\nassert solution(stdin) == \"1 2 1\"\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4\") == \"-1\"\nassert solution(\"5 3 1 2 1\") == 10\nassert solution(\"2 3 3 1 3 2 1 3 4\") == 3\nassert solution(\"5 3 2 2 2 3\") == -1\nassert solution(\"3 5 1 4 3 4\") == -1\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"6\"\nassert solution(\"1 3 2\") == \"3\"\nassert solution(\"1 1 3\") == \"3\"\nassert solution(\"1 3 1\") == \"3\"\nassert solution(\"1 3 2 3\") == \"3\"\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(in_) == out_\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"4 3\") == 6\nassert solution(\"3 2\") == 3\nassert solution(\"3 2 3\") == 3\nassert solution(\"3 2 3 4\") == -1\nassert solution(\"8 6\") == 30\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 6\"\n    ), \"true\"\nassert solution(\n    \"4 3\"\n    ), \"true\"\nassert solution(\n    \"6 5\"\n    ), \"true\"\nassert solution(\n    \"8 9\"\n    ), \"true\"\nassert solution(\n    \"10 1\"\n    ), \"true\"\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 33\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"2 1\", \"3 2\"]) == \"1 3\"\nassert solution([\"2 1\", \"1 2\"]) == \"1 2\"\nassert solution([\"2 1\", \"3 1\", \"1 2\"]) == \"3 2\"\nassert solution([\"2 3\", \"3 2\"]) == \"2 3\"\nassert solution([\"3 2\", \"1 2\", \"1 1\"]) == \"2 1\"\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 7\") == \"5 1 6 2 7 3 4\"\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('99') == '99'\nassert solution('58') == '58'\nassert solution('22') == '22'\nassert solution('13') == '13'\nassert solution('1') == '1'\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 22\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5 1 6 2 7 3 4'\nassert solution(stdin) == '19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18'\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('7 1 5 4 2 3 6 4 5 7'), '3 5 6 7'\nassert solution('9 36'), '7 3 6 2'\nassert solution('9 36'), '6 3 5 2'\nassert solution('9 36'), '6 4 2 5'\nassert solution('9 36'), '6 7 5 4'\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1,1) == 1\nassert solution(1,2) == 2\nassert solution(1,3) == 3\nassert solution(1,4) == 4\nassert solution(1,5) == 5\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 18\n"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"ioi\", \"io\", \"i\", \"o\", \"i\", \"o\"]) == \"26\"\nassert solution([\"ioi\", \"io\", \"i\", \"o\", \"i\", \"o\", \"i\"]) == \"0\"\nassert solution([\"ioi\", \"io\", \"i\", \"o\", \"i\", \"o\", \"i\", \"i\"]) == \"0\"\nassert solution([\"ioi\", \"io\", \"i\", \"o\", \"i\", \"o\", \"i\", \"i\"]) == \"0\"\nassert solution([\"ioi\", \"io\", \"i\", \"o\", \"i\", \"o\", \"i\", \"i\", \"o\"]) == \"0\"\n"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0\"\n\n\n\nInput\n6 2\nioi\n1 3\n\nOutput\n0\n\nInput\n5 2\nioi\n1 2\n\nOutput\n1\n\n\n\n------Constraints-----\n\n1 <= n <= 10^6\n1 <= p <= 10^6\n\nExample 1:\n\nInput:\nn = 6\np = 2\ny_1 = 1\ny_2 = 3\ny_3 = 2\ny_4 = 1\ny_5 = 4\n\nOutput:\n2\n\n\nExample 2:\n\nInput:\nn = 6\np = 1\ny_1 = 1\ny_2 = 1\ny_3 = 1\ny_4 = 1\ny_5 = 2\n\nOutput:\n1\n\"\"\"\n"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Incorrect output\"\nassert solution(stdin), \"Incorrect output\"\nassert solution(stdin), \"Incorrect output\"\n\nInput\n6 2\nioi\n1 3\n\nOutput\n26\n\nInput\n5 2\nioi\n1 2\n\nOutput\n0\n\n\"\"\"\n\nimport math\n\nclass Solution:\n    # use naive approach\n    def getMod(self, n, p):\n        answer = 0\n        while n > 0:\n            answer += math.factorial(n)\n            n -= 1\n        answer *= p\n        return answer\n    \n    def getMod2(self, n, p):\n        if n <= 0:\n            return 1\n        p = 1\n        answer = 1\n        while n > 0:\n            answer *= p\n            answer += 1\n            n -= 1\n            p += 1\n        answer *= p\n        return answer\n\n    def solution(self, stdin, p):\n        # 0\n        if p == 1:\n            return 0\n\n        # 1\n        if p == 2:\n            return 1\n        \n        # 2\n        if p == 3:\n            return self.getMod2(self.getMod(self.getMod(stdin, 1), 1), 1)\n        \n        # 3\n        if p == 4:\n            return self.getMod2(self.getMod(self.getMod(stdin, 2), 2), 2)\n\n        # 4\n        if p == 5:\n            return self.getMod2(self.getMod(self.getMod(stdin, 3), 3), 3)"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\n\"\"\"\nimport math"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 26, \"Pass\"\n"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\""
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Explanation-----\n\nTest 1\n\nInput\n4\nioi\nioioi\n\nOutput\n0\n\nTest 2\n\nInput\n5\nioiioiioiioiioiioiioiioiioiioioiioioiioiioi\n\nOutput\n0\n\n\n-----Explanation-----\n\nTest 3\n\nInput\n5\nioiioiioiioioiioiioiioiioiioiioiioiioioiioiioioiioiioioioioiioiioiioiioiioiioioiioiioiioiioiioiioioiioiioiioioiioioiioioiioiioioiioiioiioioiioioiioioiioiioiioiioioiioiioiioiioioiioioioiioiioiioioiioioiioiioiioiioiioiioiioiioiioiioiioiioiioiioioiioiioiioiioioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiioiio"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('ioi') == '0'\nassert solution('ioiio') == '0'\nassert solution('ioiio') == '0'\nassert solution('ioiiiioi') == '0'\nassert solution('ioiiiioioi') == '0'\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 13\nassert solution(\"3\") == 13\nassert solution(\"4\") == 11\nassert solution(\"5\") == 12\nassert solution(\"6\") == 12\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"12\") == \"13\"\nassert solution(\"0\") == \"0\"\nassert solution(\"45\") == \"45\"\nassert solution(\"15\") == \"15\"\nassert solution(\"99\") == \"9\"\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\n    \"5\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n    \"9\",\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2\") == \"3\"\nassert solution(\"0\") == \"2\"\nassert solution(\"1\") == \"0\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"3\"\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3) == 13, \"soltion failed\"\nassert solution(\"1\") == 12, \"soltion failed\"\nassert solution(\"12\") == 10, \"soltion failed\"\nassert solution(\"0\") == 0, \"soltion failed\"\nassert solution(\"1\") == 1, \"soltion failed\"\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == \"1\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 3000\n1 <= stdin[i] <= 10^9\n\n\n-----Time Complexity-----\nO(n)\n\n-----Submissions-----\nclass Solution:\n    def solve(self, stdin: str) -> str:\n        pass\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1\"]) == \"1\"\nassert solution([\"5\"]) == \"5\"\nassert solution([\"6\"]) == \"6\"\nassert solution([\"7\"]) == \"7\"\nassert solution([\"2\"]) == \"2\"\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3) == 13\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 15\n0 \u2264 $a$ \u2264 15\n\nOutput Format\nOutput the number of lines that give the solution.\n\"\"\""
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3\") == 13, \"Wrong solution\"\nassert solution(\"5\") == 12, \"Wrong solution\"\nassert solution(\"5\") == 12, \"Wrong solution\"\nassert solution(\"2\") == 11, \"Wrong solution\"\nassert solution(\"0\") == 0, \"Wrong solution\"\n"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2,3\"\nassert solution(stdin) == \"1,2\"\n"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5\") == \"4\"\nassert solution(\"2 3 1 4 5\") == \"5\"\n\n\n-----Constraints-----\n\n0 < stdin.length <= 3000\n\n------Time Limit Exceeded------\nRuntime: 32 ms (2.23%)\nMemory Usage: 15.7 MB (15.7 MB)\n\n------Testcase Example-------\nTestcase #1:\nInput:\n3 2\n1 2 3\n2 3 1\n\nOutput:\n4\n\nTestcase #2:\nInput:\n5 6\n1 2 3 4 5\n2 3 1 4 5\n3 4 5 1 2\n3 5 4 2 1\n2 3 5 4 1\n1 2 3 4 5\n\nOutput:\n2\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= n, m <= 10^5\n-10^4 <= a_i <= 10^4\n\n------------------\n\n\"\"\"\n\nimport math\nimport sys\nfrom itertools import combinations"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 2 1\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''\nassert solution(input()) == ''"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 10^5\nstdin[i] is a valid permutation of stdin, where $1 \\le stdin[i] \\le n$ is the number of possible families.\n\n-----See also-----\nhttps://leetcode.com/problems/number-of-ways-to-delete-some-prefix-and-some-suffix/\nhttps://www.geeksforgeeks.org/word-search-is-it-solution-in-python-part-1/\nhttps://www.youtube.com/watch?v=0NrF3pLXE&ab_channel=CrazyFiction\n\"\"\""
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 2 3 4 5 6\\n1 2 3 4 5 1 2\\n1 2 3 4 5 2 1\\n1 2 3 4 5 1\\n2 3 4 1 2\\n2 3 4 2 1\\n3 4 1 1 2\\n4 5 1 2 1\\n5 6 1 1 2\\n6 7 1 1 2\"\n) == \"4\"\n\n\n------Constraints-----\n0 <= stdin.length <= 25\n1 <= stdin.length <= 10^4\nstdin is a console input from a non-sequence of characters.\n1 <= stdin[i] <= 10^9\n0 <= a_i <= n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1 2 3 4 5\", \"2 3 1 4 5\", \"3 4 5 1 2\"]) == \"5\"\nassert solution([\"1 2 3 4 5\", \"2 3 1 4 5\", \"3 4 5 1 2\"]) == \"5\"\nassert solution([\"1 2 3 4 5\", \"2 3 4 5 1\", \"3 4 5 1 2\", \"2 3 4 5\"]) == \"4\"\nassert solution([\"1 2 3 4 5\", \"2 3 4 5 1\", \"3 4 5 1 2\", \"2 3 4 5\"]) == \"4\"\nassert solution([\"1 2 3 4 5\", \"2 3 4 5 1\", \"3 4 5 1 2\", \"2 3 4 5\"]) == \"4\"\n"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5\") == \"5\"\nassert solution(\"1 2 3 4 5\") == \"2\"\nassert solution(\"1 2 3 4 5\") == \"1\"\nassert solution(\"1 2 3 4 5\") == \"2 1 2 3\"\nassert solution(\"1 2 3 4 5\") == \"1 1 2 2 3\"\n"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2000000000\"\n"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 12\n'''"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 163 164 165 166 167 168 169 170 171 171 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 196 197 198 199 200 201 201 202 203 204 205 206 207 208 208 209 210 211 211 212 213 214 215 216 217 218 219 220 220 221 221 222 223 223 224 225 226 227 228 229 230 230 231 231 232 233 234 245 245 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 268 268 269 270 271 271 272 273 274 275 275 276 277 278 279 280 281 282 283 284 285 286 287 288 288 289 290 291 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 308 308 309 310 311 311 310 313 313 314 315 316 317 318 319 320 321 322 323 324 325 326 325 327 328 329 329 330 331 331 332 332 333 333 334 333 334 341 341 342 342 343 344 345 346 347 348 349 350 351 351 352 353 354 355 356 357 358 359 359 360 361 360 361 362 363 363 363 363 366 366 367 366 367 366 369 369 371 372 373 374 375 376 377 378 379 380 380 381 382 383 383 384 383 386 385 389 386 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389 389"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"2000000000\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2000000000'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2000000000'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8.000000000000 11.000000000000\""
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 0 3 4 4 4 4 4 4 4 4 4\") == \"11.000000000000\"\nassert solution(\"2 5 0 0 1 4 5 0 5 5 0 5 5 5 5 5 5 5 5\") == \"10.000000000000\"\nassert solution
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"8 8 0 2 8 3 4 5\",\"4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 5 1 -9 8 0 -3 5\") == \"5.000000000000 5.000000000000\"\nassert solution(\"4 5 -8 3 8 4 2 1\") == \"10.000000000000 5.000000000000\"\nassert solution(\"4 2 1 -2 3 0 -2\") == \"7.000000000000 3.000000000000\"\nassert solution(\"2 5 1 -9 8 0 -3 5\") == \"11.000000000000\"\nassert solution(\"-1000 -1000 -1000 -1000 -1000 -1000 -1000 -1000 -1000 -1000 -1000 -1000 -1000\") == \"1.000000000000 1.000000000000\""
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4 2 5\") == \"11.000000000000 3.000000000000\"\nassert solution(\"1 3 2 5\") == \"11.000000000000 5.000000000000\"\nassert solution(\"1 4 2 3\") == \"11.000000000000 8.000000000000\"\nassert solution(\"1 1 0 1\") == \"3.000000000000\"\nassert solution(\"1 8 2 0 2 3 4 5\") == \"3.000000000000 10.000000000000\"\n"
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    ['8 8 0 2 8 3 4 5']\n) == '8.000000000000 11.000000000000'\nassert solution(\n    ['5 0 3 4 6 1 8']\n) == '5.000000000000 13.000000000000'\nassert solution(\n    ['4 2 1 6 0 4 3']\n) == '5.000000000000 13.000000000000'\nassert solution(\n    ['3 2 0 0 4 1 8']\n) == '13.000000000000 11.000000000000'\nassert solution(\n    ['6 2 1 6 0 4 3']\n) == '13.000000000000 12.000000000000'\n"
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('8 8 0 2 8 3 4 5') == '8.000000000000 11.000000000000'\nassert solution('2 2 0 2 3 0 4 5') == '2.000000000000 3.000000000000'\nassert solution('2 2 0 2 3 0 4 5') == '2.000000000000 2.000000000000'\nassert solution('2 2 0 2 3 0 4 5') == '2.000000000000 0.000000000000'\nassert solution('2 2 0 2 3 0 4 5') == '2.000000000000 0.000000000000'\n"
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"8.000000000000 11.000000000000\"\n"
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    input=\n    \"8 8 0 2 8 3 4 5\\n\"\n    \"2 6 0 3 3 4 5\\n\"\n    \"2 0 2 3 3 4 5\\n\"\n    \"0 2 0 3 3 4 5\\n\"\n    \"0 0 3 2 3 4 5\\n\"\n    \"0 0 2 0 3 3 4 5\\n\"\n    \"0 0 0 0 3 3 4 5\\n\"\n    \"4 7 2 3 4 5 6\\n\"\n    \"2 2 2 3 3 3 4\\n\"\n    \"2 0 2 3 3 3 4\\n\"\n    \"3 3 0 3 3 3 4\\n\"\n    \"3 3 3 0 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3 3 3 3\\n\"\n    \"3 3 3 3"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    inp: \"2\\n1\\n3\"\n) == \"1\"\nassert solution(\n    inp: \"3\\n1\\n2\"\n) == \"1\"\nassert solution(\n    inp: \"4\\n1\\n3\\n2\"\n) == \"1\"\nassert solution(\n    inp: \"1\\n1\\n1\"\n) == \"0\"\nassert solution(\n    inp: \"1\\n2\"\n) == \"0\"\n"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, [1, 3, 2]) == 1\nassert solution(3, [1, 2, 3]) == 4\nassert solution(3, [2, 1, 3]) == 7\nassert solution(5, [1, 2, 3, 4, 5]) == 15"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 4\nassert solution(3) == 4\nassert solution(4) == 0\nassert solution(5) == 1"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 1 2\") == \"1\"\nassert solution(\"1 1 3\") == \"3\"\nassert solution(\"1 2 1\") == \"1\"\nassert solution(\"2 3 1\") == \"1\"\nassert solution(\"2 1 3\") == \"3\"\n"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\nfrom collections import Counter\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input().rstrip())\n\na = list(map(int, input().rstrip().split()))\n\nres = [0] * n"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str(input())) == str(4)\n'''"
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"YES\"\nassert solution(inp) == \"NO\"\n\n'''"
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"1\"]) == \"NO\"\nassert solution([\"5\", \"1\", \"A\"]) == \"YES\"\nassert solution([\"5\", \"1\", \"B\"]) == \"YES\"\nassert solution([\"5\", \"1\", \"A\", \"B\"]) == \"NO\"\nassert solution([\"5\", \"1\", \"B\", \"C\"]) == \"NO\"\n"
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 1', 'AABBB') == 'YES'\nassert solution('5 1', 'ABABB') == 'NO'\nassert solution('5 1', 'ABABBBB') == 'NO'\nassert solution('5 1', 'ABABBBBBB') == 'YES'\n\nInput\n5 1\nAABBB\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5 1\", \"AABBB\", \"ABABB\", \"ABABB\", \"ABABB\"]) == \"YES\"\nassert solution([\"5 1\", \"AABBB\", \"ABABB\", \"ABABB\", \"ABABB\"]) == \"NO\"\nassert solution([\"5 1\", \"AB\", \"AABB\", \"ABABB\", \"ABABB\"]) == \"YES\"\nassert solution([\"5 1\", \"AB\", \"ABABB\", \"ABABB\", \"ABABB\"]) == \"NO\"\nassert solution([\"5 1\", \"AABBB\", \"ABABB\", \"ABABB\", \"ABABB\"]) == \"NO\""
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"5 1\",\n    \"AABBB\"\n) == \"NO\"\nassert solution(\n    \"5 1\",\n    \"ABABB\"\n) == \"YES\"\n"
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\",\"1\",\"A\",\"B\",\"A\",\"C\"]) == \"NO\"\nassert solution([\"5\",\"1\",\"B\",\"C\",\"A\",\"A\",\"D\",\"D\"]) == \"YES\"\nassert solution([\"5\",\"1\",\"A\",\"A\",\"C\",\"A\",\"A\",\"C\",\"A\",\"A\",\"D\"]) == \"YES\"\nassert solution([\"5\",\"1\",\"C\",\"A\",\"A\",\"C\",\"A\",\"C\",\"A\",\"A\",\"D\"]) == \"YES\"\nassert solution([\"5\",\"1\",\"A\",\"C\",\"C\",\"C\",\"A\",\"C\",\"A\",\"C\",\"D\"]) == \"NO\"\n"
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 1') == 'YES'\nassert solution('5 1') == 'NO'"
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1\"), \"NO\"\nassert solution(\"5 1\"), \"NO\"\nassert solution(\"5 1\"), \"YES\"\nassert solution(\"5 1\"), \"YES\"\nassert solution(\"5 1\"), \"YES\"\n"
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 5\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\nassert solution(\"5 6\") == \"NO\"\nassert solution(\"5 5\") == \"YES\"\n"
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 1 2 3 3') == '200'\nassert solution('1 1 2 3 4') == '300'\nassert solution('1 1 4 2') == '302'\nassert solution('1 1 3 2') == '303'\nassert solution('1 1 3 4') == '302'\n"
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\", \"100\", \"50\", \"0\", \"50\", \"0\", \"100\", \"50\", \"0\", \"0\"]) == \"100 - 50 + ( - 50) + ( 0 - 50) + (50 - ( - 100))\"\n\n\n-----END OF MAIN-----\n"
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"100-50 50 0 -50 0 50 -100 50 50 0 -50 0 50 -50 50 0 -50 0 50 0 -50 50 0 -50 50 0 0 0 0 0\"\nassert solution(stdin) == \"100 0 -50 50 50 -100 50 50 -100 50 50 0 -50 0 50 -50 50 -50 0 0 0 0 0 0\"\nassert solution(stdin) == \"100-50 0 50 0 -50 50 -100 50 50 0 -50 50 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"100 0 -50 0 50 -100 50 50 0 -50 50 0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 7 4\") == \"100 0 50 0 50\"\nassert solution(\"5 7 4 3 3\") == \"100 0 50 0 50\"\nassert solution(\"1 5 5 -1 5 -1 5 -1 5 -1 5 -1 5\") == \"1000\"\nassert solution(\"2 4 5 -1 -1 -1\") == \"0\"\nassert solution(\"2 5 -1 -1 -1\") == \"0\"\n"
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"100 - 50 0 50 - 100\"\nassert solution(stdin) == \"100 - 50 0 50 - 50\"\nassert solution(stdin) == \"100 - 50 0 50 - 50\"\nassert solution(stdin) == \"100 - 50 0 50 - 50\"\nassert solution(stdin) == \"100 - 50 0 50 - 100\"\n"
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '200'\n\n'''\nimport sys\nimport math"
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"200\"\nassert solution(\"1 - 1\") == \"1\"\nassert solution(\"0 0 0 0\") == \"0\"\nassert solution(\"0 0 -1 0 0\") == \"0\"\nassert solution(\"1 0 -2 0 0 0\") == \"0\"\n"
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '200'\n\n\n-----Submissions-----\n\n1\n10\n10\n10\n10\n\n3\n5\n1\n5\n0\n7\n\nOutput\n200\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 a_1, a_2,..., a_{n} \u2264 100\n0 \u2264 x_i, x_{i} \u2264 10^9\n\n0 \u2264 a_i, x_i,..., x_{n} < 1000\n\n\"\"\""
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 7 -10\") == \"100 -10 50 -1 -1 -1 50 0 50 -1 -1 -1 50 -1 -1 -1 50 50 0 50 -10 10\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"1 2 3 4 5 6 7 8 9 10\""
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5\", \"100\", \"50\", \"0\", \"50\"]) == \"100 - ( - 50) + (( - 50) - 0) + (0 - 50) + (50 - ( - 100))\"\nassert solution([\"10\", \"100\", \"5\", \"1\", \"4\"]) == \"10 (10 - ( 4 + 1) + 1) + (10 (10 - ( 4 + 1)) + 1) + (4 (4 + 1) + 1) + (4 (4 + 1)) + (10 (10 - ( 4 + 1)) + 1) + (10 (10 - ( 4 + 1)) + 1) + (10 (10 - ( 4 + 1)) + 1) + (10 (10 - ( 4 + 1)) + 1)\"\nassert solution([\"10\", \"10\", \"10\", \"10\", \"10\"]) == \"10\"\nassert solution([\"5\", \"100\", \"50\", \"50\", \"50\"]) == \"50 - ( - 50) + (( - 50) - 0) + (0 - 50) + (50 - ( - 100))\"\nassert solution([\"10\", \"10\", \"10\", \"10\", \"10\"]) == \"10\"\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 1) == \"7\"\nassert solution(5, 5) == \"11\"\nassert solution(10, 2) == \"104\"\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 5\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"104\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(9, 4) == \"7\"\nassert solution(1, 2) == \"2\"\nassert solution(1, 3) == \"3\"\nassert solution(2, 2) == \"2\"\nassert solution(2, 3) == \"3\"\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"104\"\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1\") == \"1\"\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == 7"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"11\""
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == str(104)\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"No such subproblems exist, or one of the subproblems is invalid.\"\nassert solution(stdin), \"No such subproblems exist, or one of the subproblems is invalid.\"\nassert solution(stdin), \"No such subproblems exist, or one of the subproblems is invalid.\"\n\n\n\"\"\"\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5,2) == 0\nassert solution(3,2) == 1\nassert solution(3,5) == 0\nassert solution(3,3) == 1\nassert solution(3,1) == 1\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 2 3\") == \"2\"\nassert solution(\"3 3\") == \"0\"\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), 'no solution'\nassert solution(stdin), 'no solution'\nassert solution(stdin), 'no solution'\nassert solution(stdin), 'no solution'\nassert solution(stdin), 'no solution'\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"3\"\nassert solution(\"3 2 3 4 5 6 7 8 9 10 11 12\") == \"5\"\nassert solution(\"3 2 3 4 5 6 7 8 9 10 11 12 13\") == \"0\""
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"0\"\n\nassert solution(inp) == \"4\"\n\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 2) == 3\nassert solution(2, 1) == 2\nassert solution(2, 3) == 4\nassert solution(3, 3) == 0\nassert solution(3, 2) == 2\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n\n\n-----Constraints-----\n1 <= n, m <= 10^5\n1 <= a_i <= 10^9\n1 <= b_i <= 10^9\n\n\n-----Time Limit-----\n1 second\n\n\"\"\"\nclass Solution:\n    def minimumOperations(self, n: int, m: int, a: List[int], b: List[int]) -> int:\n        \n        def solution(n, m, a, b):\n            a_min = a\n            b_min = b\n            answer = 0\n            \n            def find_min(a, b):\n                if a < b:\n                    answer += 1\n                    return\n                if a > b:\n                    answer += 1\n                    return\n                \n                for i in range(n):\n                    if a[i] < b[i]:\n                        a[i], b[i] = b[i], a[i]\n                        find_min(a, b)\n                        a[i], b[i] = b[i], a[i]\n                        answer += 1\n            \n            find_min(a, b)\n            return answer\n        \n        answer = solution(n, m, a, b)\n        return answer"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 4\") == \"1\"\nassert solution(\"2 4 2\") == \"2\"\nassert solution(\"2 4 3\") == \"2\"\nassert solution(\"2 5 6\") == \"0\"\nassert solution(\"2 5 6 4\") == \"3\"\n"
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\"\n\nassert solution(input()) == \"1\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"1\""
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(0)\n"
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 3\n\n'''\n\n\nimport math\n\nn = int(input())\nm = int(input())\nk = int(input())\n\nmemory = [[] for _ in range(n + 1)]\n\nfor _ in range(m):\n    a, b = map(int, input().split())\n    memory[a].append(b)\n    memory[b].append(a)\n\ncycle = 0\nwhile True:\n    cycle += 1\n    for i in range(n):\n        for j in range(n - i):\n            if len(memory[i + j]) == 0:\n                continue\n            else:\n                for k in range(len(memory[i + j])):\n                    memory[i + j][k] = 1\n        if len(memory[i]) == 0:\n            break\n\n    if len(memory[n]) == 0:\n        print(cycle)\n        break\n    else:\n        cycle = 0\n        for i in range(n):\n            memory[i] = list(set(memory[i]))\n        for i in range(n):\n            for j in range(n - i):\n                if len(memory[i + j]) == 0:\n                    continue\n                else:\n                    for k in range(len(memory[i + j])):\n                        memory[i + j][k] = 1\n        if len(memory[n]) == 0:\n            print(cycle)\n            break\n        else:\n            cycle = 0\n            for i in range(n):\n                memory[i] = list(set(memory[i]))\n            for i in range(n):\n                for j in range(n - i):\n                    if len(memory[i + j]) == 0:\n                        continue\n                    else:\n                        for k in range(len(memory[i + j])):\n                            memory[i + j][k] = 1\n            if len(memory[n]) == 0:\n                print(cycle)\n                break\n            else:\n                cycle = 0\n                for i in range(n):\n                    memory[i] = list(set(memory[i]))\n                for i in range(n):\n                    for j in range(n - i):\n                        if len(memory[i + j]) == 0:\n                            continue\n                        else:\n                            for k in range(len(memory[i + j])):\n                                memory[i + j][k] = 1\n                if len(memory[n]) == 0:\n                    print(cycle)\n                    break\n                else:\n                    cycle = 0\n                    for i in range(n):\n                        memory[i] = list(set(memory[i]))\n                    for i in range(n):\n                        for j in range(n - i):\n                            if len(memory[i + j]) == 0:\n                                continue\n                            else:\n                                for k in range(len(memory[i + j])):\n                                    memory[i + j][k] = 1\n                    if len(memory[n]) == 0:\n                        print(cycle)\n                        break\n                    else:\n                        cycle = 0\n                        for i in range(n):\n                            memory[i] = list(set(memory[i]))\n                        for i in range(n):\n                            for j in range(n - i):\n                                if len(memory[i + j]) == 0:\n                                    continue\n                                else:\n                                    for k in range(len(memory[i + j])):\n                                        memory[i + j][k] = 1\n                        if len(memory[n]) == 0:\n                            print(cycle)\n                            break\n                        else:\n                            cycle = 0\n                            for i in range(n):\n                                memory[i] = list(set(memory[i]))\n                            for i in range(n):\n                                for j in range(n - i):\n                                    if len(memory[i + j]) == 0:\n                                        continue\n                                    else:\n                                        for k in range(len(memory[i + j])):\n                                            memory[i + j][k] = 1\n                            if len(memory[n]) == 0:\n                                print(cycle)\n                                break\n                            else:\n                                cycle = 0\n                                for i in range(n):\n                                    memory[i] = list(set(memory[i]))\n                                for i in range(n):\n                                    for j in range(n - i):\n                                        if len(memory[i + j]) == 0:\n                                            continue\n                                        else:\n                                            for k in range(len(memory[i + j])):\n                                                memory[i + j][k] = 1\n                                if len(memory[n]) == 0:\n                                    print(cycle)\n                                    break\n                                else:\n                                    cycle = 0\n                                    for i in range(n):\n                                        memory[i] = list(set(memory[i]))\n                                    for i in range(n):\n                                        for j in range(n - i):\n                                            if len(memory[i + j]) == 0:\n                                                continue\n                                            else:\n                                                for k in range(len(memory[i + j])):\n                                                    memory[i + j][k] = 1\n                                    if len(memory[n]) == 0:\n                                        print(cycle)\n                                        break\n                                    else:\n                                        cycle = 0\n                                        for i in range(n):\n                                            memory[i] = list(set(memory[i]))\n                                        for i in range(n):\n                                            for j in range(n - i):\n                                                if len(memory[i + j]) == 0:\n                                                    continue\n                                            else:\n                                                for k in range(len(memory[i + j])):\n                                                    memory[i + j][k] = 1\n                                    if len(memory[n]) == 0:\n                                        print(cycle)\n                                        break\n                                    else:\n                                        cycle = 0\n                                        for i in range(n):\n                                            memory[i] = list(set(memory[i]))\n                                        for i in range(n):\n                                        "
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 0"
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 2\") == \"0\"\nassert solution(\"1 1 0\") == \"1\"\nassert solution(\"2 3 1\") == \"3\"\nassert solution(\"3 2 2\") == \"0\"\nassert solution(\"4 3 5\") == \"4\"\n"
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == str(0)\nassert solution(input()) == str(1)\nassert solution(input()) == str(3)\nassert solution(input()) == str(0)\nassert solution(input()) == str(1)\n"
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"0 0 0\") == \"1\"\nassert solution(\"1 0 0\") == \"1\"\nassert solution(\"2 0 0\") == \"1\"\nassert solution(\"3 0 0\") == \"1\"\nassert solution(\"4 0 0\") == \"1\"\n"
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n\"\"\""
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\""
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1\", \"2\", \"3\", \"4\", \"5\"]) == \"4\"\nassert solution([\"4\", \"1\", \"3\", \"2\", \"5\"]) == \"5\"\nassert solution([\"1\", \"2\", \"4\", \"5\", \"3\"]) == \"4\"\n\nclass Solution:\n    def minRemoveToMakeValid(self, s: str) -> str:\n        for i in range(1, len(s)):\n            if s[i] not in '+-*/':\n                s = s.replace(s[i], '+')\n            if s[i] not in '+-*/':\n                s = s.replace(s[i], '-')\n        return s"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1\nassert solution(1) == 1\nassert solution(1) == 1\nassert solution(5) == 5\n\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= p_1, p_2,..., p_{n} <= 10^5\n\n-----Time Limit-----\n1 second\n\n\nclass Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i - 1]:\n                nums[i] = nums[i - 1]\n        return len(nums)\n\"\"\"\n"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    '''\n    4\n    4 3 2 1\n    3 2 4 1\n    1 3 2 4\n    '''\n) == 5\n\n\n\n-----Extra-----"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(1,1) == 1\nassert solution(5,1) == 5\nassert solution(5,2) == 5\nassert solution(5,5) == 5\nassert solution(6,5) == 5\n"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(5) == 1\nassert solution(5) == 1\nassert solution(1) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"5 1 2 3 4\") == \"2\"\nassert solution(\"2 3 4 5\") == \"2\"\nassert solution(\"5 5 2 4 3 1\") == \"1\"\nassert solution(\"5 2 3 1 4 5\") == \"2\"\n"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5, [1, 1, 2, 2, 3, 3, 4, 4, 4]) == 1\nassert solution(5, [5, 5, 5]) == 5\nassert solution(5, [2, 2, 2, 3, 3, 3]) == 2\n\n\nInput\n\n2\n2 1 3 4\n\nOutput\n\n2\n\nInput\n\n1\n5 2 3 4\n\nOutput\n\n1\n\n\nExplanation\n\nAfter removing the second element to make the number of records the maximum possible, we remove the third element, which is the only element that can be removed.\n"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4 3 1 2\") == \"1\"\nassert solution(\"2 2 1 3 4\") == \"3\"\nassert solution(\"2 4 3 1\") == \"2\"\nassert solution(\"2 4 3\") == \"2\"\nassert solution(\"4 3 1 2\") == \"4\"\n"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 17\n\"\"\""
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 17\n"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 17\n\nassert solution(stdin) == 27\n\nassert solution(stdin) == 12\n\nassert solution(stdin) == 14\n\nassert solution(stdin) == 11"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 3\") == \"17\"\nassert solution(\"2 10\") == \"6\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 17\n\nExplanation\nThere are 12 segments, $12$ broken segments, each broken segment is placed at positions $s$ on the new tape. So, the total length of the pieces is $17$ + $16$, $17$ + $17$ + $17$ = $17$, that is, $s \\le 3$. The gap of the piece is $s + 1$ which is the total length of the broken segments. The gap of the piece is $s + 2$ which is the total length of the pieces. The gap of the piece is $s + 3$ which is the total length of the pieces.\n\nNote:\nThe gap of each segment is $s + 1$ except that segment $s$ contains no other pieces of length $1$.\nInput\n\n2\n1 2\n\nOutput\n\n2\n\nInput\n\n3\n1 2 3\n\nOutput\n\n2\n\nInput\n\n4\n1 2 4 6\n\nOutput\n\n5\n\n\n\n------Hints---------------------\nUse a Python dictionary to store the data you need.\nUse a for loop to print the keys and the values from the dictionary.\n\"\"\"\n\nn, m, k = map(int, input().split())\nbroken_segments = []\nfor _ in range(n):\n    broken_segments.append(map(int, input().split()))\n\nd = {}\nfor i in range(n):\n    for j in range(m):\n        if broken_segments[i][j] > 0:\n            d[j+1] = broken_segments[i][j]\nprint(len(d))"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == '17'\n"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 17\nassert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 6\n\n--------------------------------------------------\n\nOutput of this function have been verified.\n"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"17\"\n\nassert solution(stdin) == \"36\""
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 17\n\ninput 1\n3\n20 30 75 80\noutput 1\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n0 <= n <= 10^5\n0 <= a[i] <= 10^9\na[i] is unique\na[i] is distinct from a[i+1]\n\nCONSTRAINTS:\n\n1 <= n <= 10^5\n\n1 <= a[i] <= 10^9\n\n2 <= stdin.length <= 10^4\n\nstdin.length <= 10^6\n\nstdin is a valid input.\n\"\"\"\n\nimport math"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 4 5 2 1 4 3 2\"\nassert solution(stdin) == \"3 4 5 2 1 4 3 2\"\nassert solution(stdin) == \"3 4 5 2 1 4 3 2\"\nassert solution(stdin) == \"3 4 5 2 1 4 3 2\"\nassert solution(stdin) == \"3 4 5 2 1 4 3 2\"\n"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 4 6 5 7\"\n\"\"\"\nn = int(stdin.strip())\na = list(map(int,stdin.split()))"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 4 5 2 1 4 3 2\"\n"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n-----Known Issues-----\n\n1.\n\n2.\n\n3."
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2\") == \"3 4 5 2 1 4 3 2\"\nassert solution(\"4\") == \"3 4 2 1 4 2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1 2\"\nassert solution(\"7\") == \"-1\"\n"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3, \"Example 3\"\nassert solution(stdin) == -1, \"Example 4\"\nassert solution(stdin) == -1, \"Example 5\"\nassert solution(stdin) == -1, \"Example 6\"\nassert solution(stdin) == -1, \"Example 7\"\n"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3 4 5 2 1 4 3 2'\nassert solution(stdin) == '-1'\n\n\n-----Solutions-----\n\nPrint all possible permutations of $a$ in the first line and then the first line of each of the lines.\n\nPrint all possible permutations of $a$ in the second line.\n\nPrint all possible permutations of $a$ in the third line.\n\"\"\"\n\nimport sys\nimport math\n"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3 4 5 2 1 4 3 2'\nassert solution(stdin) == '3 4 5 2 1 4 3 2'\nassert solution(stdin) == '3 4 5 2 1 4 3 2'\nassert solution(stdin) == '3 4 5 2 1 4 3 2'\nassert solution(stdin) == '3 4 5 2 1 4 3 2'\n"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"142857\"\n\n\n-----Basic onemore tests-----\n\nSample 1:\nInput\n3\nOutput\n0\n\nSample 2:\nInput\n1\nOutput\n1\n\nSample 3:\nInput\n2\nOutput\n1\n\n-----Approach---"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(solution()) == answer\n\n-----Constraints-----\n1 <= p <= 10^6\n1 <= x <= 9\n\"\"\"\n"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Impossible\"\n\n\n-----Constraints-----\n0 \u2264 p \u2264 10^9, 0 \u2264 x \u2264 9\n\nclass Solution:\n    def isVeryBigSum(self, nums: List[int]) -> bool:\n        sum = 0\n        for n in nums:\n            sum += n\n            if sum > p:\n                return False\n        return True\n"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(str(input())) == \"Impossible\"\nassert solution(str(input())) == \"102564\"\nassert solution(str(input())) == \"142857\"\nassert solution(str(input())) == \"142857\"\nassert solution(str(input())) == \"142857\"\n"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2\") == \"142857\"\nassert solution(\"1 2 4\") == \"102564\"\nassert solution(\"4 1\") == \"102564\"\nassert solution(\"1 2 2\") == \"3\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Imperable\"\nassert solution(stdin) == \"Imperable\"\n\nExplanation\nGiven integer x and integer p, so that x < p, the number that's approximately equal to p*x does not exist.\n\nThe number that's approximately equal to p*x does not exist.\n\nThe number that's approximately equal to p*x does not exist.\n\nThe number that's approximately equal to p*x does not exist.\n\nIn fact, the number that's approximately equal to p*x does not exist.\n\nNow we can generate the test, that is:"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1,5\"]) == \"142857\"\nassert solution([\"2,1\"]) == \"102564\"\nassert solution([\"1,1\"]) == \"1\"\nassert solution([\"2,2\"]) == \"102564\"\nassert solution([\"3,3\"]) == \"14285\"\n"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2\") == \"142857\"\nassert solution(\"4 3\") == \"102564\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 20000\n1 <= p, x <= 10^6\n\n142857 \u00b7 5 = 714285\n\"\"\""
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"Impossible\"\nassert solution(input()) == \"142857\"\nassert solution(input()) == \"102564\""
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 357\n"
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2\") == \"9\"\nassert solution(\"11\") == \"111\"\nassert solution(\"1\") == \"11\"\nassert solution(\"2\") == \"22\"\nassert solution(\"5\") == \"5000\""
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 257\n\n\"\"\"\nclass Solution:\n    def solution(self,n):\n        str_n = str(n)\n        for i in range(len(str_n)-1):\n            temp_n = str_n[i]+str_n[i+1]\n            if int(temp_n) > 9:\n                str_n[i+1] = '9'\n                temp_n = str_n[i] + '9' + str_n[i+2]\n        str_n = ''.join(str_n)\n        return int(str_n)\n"
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12"
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 265359409\nassert solution(stdin)!= 1\n\n\nclass Solution:\n    def __init__(self):\n        self.flag = 0\n    def solution(self, stdin: str) -> str:\n        n = int(stdin[:stdin.find(' ')])\n        m = int(stdin[stdin.find(' ') + 1:])\n        while (m % 10)!= 9:\n            m = m // 10\n        if n < m:\n            n, m = m, n\n        if m % 10 > 9:\n            m = m - 10\n        if n == 1:\n            self.flag = m\n        else:\n            self.flag = m + (n - 1)\n        return str(self.flag)\n\nassert Solution().solution(stdin) == \"265359409\"\nassert Solution().solution(stdin)!= \"1115598\"\nassert Solution().solution(stdin)!= \"1\"\n\nclass Solution:\n    def __init__(self):\n        self.flag = 0\n    def solution(self, stdin: str) -> str:\n        n = int(stdin[:stdin.find(' ')])\n        m = int(stdin[stdin.find(' ') + 1:])\n        while (m % 10)!= 9:\n            m = m // 10\n        if n < m:\n            n, m = m, n\n        if m % 10 > 9:\n            m = m - 10\n        if n == 1:\n            self.flag = m\n        else:\n            self.flag = m + (n - 1)\n        return str(self.flag)\n"
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2\") == \"7\"\nassert solution(\"1 2\") == \"6\"\nassert solution(\"1 3 4\") == \"6\"\nassert solution(\"123 45 6 7 8 9 12\") == \"45\"\nassert solution(\"123 456 7 8 9 12\") == \"12\"\n"
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == str(265359409)"
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == str(1)\nassert solution(\"11\") == str(11)\nassert solution(\"5\") == str(5)\nassert solution(\"3\") == str(3)\nassert solution(\"2\") == str(2)\n"
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 265359409"
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 265359409"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == 18\nassert solution(\"6\") == 6\nassert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"3\") == 2\n"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"1800\"\nassert solution(\"5\") == \"18\"\nassert solution(\"8\") == \"18\"\nassert solution(\"6\") == \"6\"\nassert solution(\"9\") == \"9\"\n"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == 18\nassert solution(\"6\") == 6\nassert solution(\"4\") == 3\nassert solution(\"2\") == 0\nassert solution(\"1\") == 1\n"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == 18\nassert solution(5) == 1800\nassert solution(10) == 18\nassert solution(1) == 1\nassert solution(10) == 1000\n"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 18\nassert solution(input()) == 1800"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 18\nassert solution(5) == 1800\nassert solution(0) == 1\nassert solution(1) == 0\nassert solution(7) == 30\n"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 3 3 3 4 3 3 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 18\n\nassert solution(8) == 18\nassert solution(6) == 6\nassert solution(4) == 2\nassert solution(7) == 1"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(1, 1) == 1\nassert solution(2, 2) == 1\nassert solution(3, 2) == 3\nassert solution(4, 3) == 4\nassert solution(5, 3) == 18\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"2\") == \"1\"\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('0 0') == '0 0'\nassert solution('1 0') == '0 1'\nassert solution('2 0') == '1 1'\nassert solution('3 0') == '1 2'\nassert solution('4 0') == '1 3'\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, 4) == '1 3'\nassert solution(2, 2) == '0 2'\nassert solution(4, 2) == '0 4'\nassert solution(4, 3) == '0 3'\nassert solution(5, 1) == '0 1'"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == 2, \"passed\"\nassert solution(3) == 1, \"passed\"\nassert solution(1) == 0, \"passed\"\nassert solution(2) == 1, \"passed\"\nassert solution(3) == 3, \"passed\"\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"\") == 0, \"Solution incorrect!\"\nassert solution(\"2\") == 2, \"Solution incorrect!\"\nassert solution(\"3\") == 3, \"Solution incorrect!\"\nassert solution(\"4\") == 4, \"Solution incorrect!\"\nassert solution(\"5\") == 5, \"Solution incorrect!\"\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str(stdin)) == 4\nassert solution(str(stdin)) == 0\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10\n\"\"\""
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 0\nassert solution(input()) == 1\nassert solution(input()) == 2\nassert solution(input()) == 3\nassert solution(input()) == 4\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(str(int(i) for i in input())) == int(i)\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1 3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"2\"\nassert solution(inp) == \"0\"\n\n------------------\n\nThis solution is not efficient. The smallest number of breaks Vasya can take is $2$, which is 1.\n\nThe largest number of breaks Vasya can take is $L$, which is 2.\n\nOn the other hand, the smallest number of breaks Vasya can take is $L$, which is 2.\n\nOn the other hand, the largest number of breaks Vasya can take is $L$, which is 2.\n\nInput\n0 5 2\n0 1\n\nOutput\n2\nInput\n0 2\n\nOutput\n2\n\"\"\"\nimport math\n"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n\n\n\"\"\"\n\nimport unittest"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\n\n-----IMPORTANT-----\nYour solution should pass the test cases. There are a minimum of 10 test cases to pass.\n\nOutput for each test case should be printed in a new line.\n\n.\n\n-----Constraints-----\n1 <= stdin.length <= 1000\n0 <= stdin[i] <= 10\nstdin[i]!= stdin[i - 1] for all the test cases\nstdin[i]!= stdin[i - 1] for all the test cases\nstdin.length >= 10\n\n\n-----Time complexity-----\nThe time complexity of the above is O(N).\n\nThe space complexity of the above is O(N)\n\n-----Problems-----\nThe problem is to get the standard dev of the break times of the three main problems.\n\n\n-----Time limit-----\nEven the test cases are too long, so the time complexity is O(N).\n\nO(N) is the total time required to execute all the test cases.\n\n\n-----Constraints-----\nInput size is between 10 and 300.\n\nOutput size is between 10 and 300.\n\nN is in the range 10 <= N <= 300.\n\n\n-----Sample Input-----\n\nSample Input:\n\n2 11 3\n0 1\n1 1\n\nSample Output:\n\n3\n\n-----Sample Output-----\n\nOutput\n0\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\nstdin[i]!= stdin[i - 1] for all the test cases\nstdin[i]!= stdin[i - 1] for all the test cases\nstdin.length >= 10\n\n\n-----Algorithm-----\n\nWe have to solve the problem as follows:\n\nCreate a set of break times.\n\nWe iterate through all the break times and create a set of sizes.\n\nIf there is any two break times that are larger, they are grouped together.\n\nCreate a new set of sizes.\n\nSort the set of sizes.\n\nFinally, sort the set of sizes, they are now in the order.\n\nCreate a new set of break times, all the sizes are taken into consideration.\n\nCreate a dictionary of sizes and break times.\n\nSort the dictionary.\n\nOnce again, sort the dictionary, it is always in ascending order.\n\nCreate a set of sizes that are grouped together.\n\nSort the set of sizes.\n\nOnce again, sort the set of sizes, they are now in the order.\n\nCreate a new set of break times, all the sizes are taken into consideration.\n\nSort the set of break times.\n\nOnce again, sort the set of break times, they are now in the order.\n\nCreate a dictionary of sizes that are grouped together.\n\nSort the set of sizes.\n\nOnce again, sort the set of sizes, they are now in the order.\n\n\n[EASY]\n\n[HARD]\n\n[CUT IT IN ONE SOLUTION]\n\nIntuition: \n\nThe number of rows N = 100\nThe number of columns L = 4\nThe columns have numbers 1,2,3,4\n\nThe columns can be represented as the following:\n\n1 0 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n\n\n\n[Easy]\n\n[Hard]\n\n[Cut it in one solution]\n\n1 0 0 0 0 0 0 0 0\n1 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n\n\n\n[Constant]\n\n[Constant]\n\n1 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n\n\n\n[Medium]\n\n[Medium]\n\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n\n\n\n[Hard]\n\n[Hard]\n\n1 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\"\"\nL\\t1\\t5\nL\\t3\\t2\nL\\t1\\t0\nL\\t2\\t1\nL\\t2\\t2\nL\\t3\\t0\nL\\t4\\t1\nL\\t4\\t2\nL\\t4\\t2\nL\\t5\\t0\nL\\t6\\t1\nL\\t6\\t2\nL\\t7\\t0\nL\\t8\\t1\nL\\t8\\t2\nL\\t8\\t2\nL\\t9\\t0\nL\\t10\\t1\nL\\t10\\t2\nL\\t10\\t3\nL\\t10\\t4\nL\\t11\\t0\nL\\t12\\t1\nL\\t12\\t2\nL\\t12\\t3\nL\\t12\\t4\nL\\t12\\t5\nL\\t12\\t6\nL\\t12\\t7\nL\\t12\\t8\nL\\t12\\t9\nL\\t12\\t10\nL\\t12\\t11\nL\\t12\\t12\nL\\t12\\t13\nL\\t12\\t14\nL\\t12\\t15\nL\\t12\\t16\nL\\t12\\t17\nL\\t12\\t18\nL\\t12\\t19\nL\\t12\\t20\nL\\t12\\t21\nL\\t12\\t22\nL\\t12\\t23\nL\\t12\\t24\nL\\t12\\t25\nL\\t12\\t26\nL\\t12\\t27\nL\\t12\\t28\nL\\t12\\t29\nL\\t12\\t30\nL\\t12\\t31\nL\\t12\\t32\nL\\t12\\t33\nL\\t12\\t34\nL\\t12\\t35\nL\\t12\\t36\nL\\t12\\t37\nL\\t12\\t38\nL\\t12\\t39\nL\\t12\\t40\nL\\t12\\t41\nL\\t12\\t42\nL\\t12\\t43\nL\\t12\\t44\nL\\t12\\t45\nL\\t12\\t46\nL\\t12\\t47\nL\\t12\\t48\nL\\t12\\t49\nL\\t12\\t50\nL\\t12\\t51\nL\\t12\\t52\nL\\t12\\t53\nL\\t12\\t54\nL\\t12\\t55\nL\\t12\\t56\nL\\t12\\t57\nL\\t12\\t58\nL\\t12\\t59\nL\\t12\\t60\nL\\t12\\t61\nL\\t12\\t62\nL\\t12\\t63\nL\\t12\\t64\nL\\t12\\t65\nL\\t12\\t66\nL\\t12\\t67\nL\\t12\\t68\nL\\t12\\t69\nL\\t12\\t70\nL\\t12\\t71\nL\\t12\\t72\nL\\t12\\t73\nL\\t12\\t74\nL\\t12\\t75\nL\\t12\\t76\nL\\t12\\t77\nL\\t12\\t78\nL\\t12\\t79\nL\\t12\\t80\nL\\t12\\t81\nL\\t12\\t82\nL\\t12\\t83\nL\\t12\\t84\nL\\t12\\t85\nL\\t12\\t86\nL\\t12\\t87\nL\\t12\\t88\nL\\t12\\t89\nL\\t12\\t90\nL\\t12\\t91\nL\\t12\\t92\nL\\t12\\t93\nL\\t12\\t94\nL\\t12\\t95\nL\\t12\\t96\nL\\t12\\t97\nL\\t12\\t98\nL\\t12\\t99\nL\\t12\\t100\nL\\t12\\t101\nL\\t12\\t102\nL\\t12\\t103\nL\\t12\\t104\nL\\t12\\t105\nL\\t12\\t106\nL\\t12\\t107\nL\\t12\\t108\nL\\t12\\t109\nL\\t12\\t110\nL\\t12\\t111\nL\\t12\\t112\nL\\t12\\t113\nL\\t12\\t114\nL\\t12\\t115\nL\\t12\\t116\nL\\t12\\t117\nL\\t12\\t118\nL\\t12\\t119\nL\\t12\\t120\nL\\t12\\t121\nL\\t12\\t122\nL\\t12\\t123\nL\\t12\\t124\nL\\t12\\t125\nL\\t12\\t126\nL\\t12\\t127\nL\\t12\\t128\nL\\t12\\t129\nL\\t12\\t130\nL\\t12\\t131\nL\\t12\\t132\nL\\t12\\t133\nL\\t12\\t134\nL\\t12\\t135\nL\\t12\\t136\nL\\t12\\t137\nL\\t12\\t138\nL\\t12\\t139\nL\\t12\\t140\nL\\t12\\t141\nL\\t12\\t142\nL\\t12\\t143\nL\\t12\\t144\nL\\t12\\t145\nL\\t12\\t146\nL\\t12\\t147\nL\\t12\\t148\nL\\t12\\t149\nL\\t12\\t150\nL\\t12\\t151\nL\\t12\\t152\nL\\t12\\t153\nL\\t12\\t154\nL\\t12\\t155\nL\\t12\\t156\nL\\t12\\t157\nL\\t12\\t158\nL\\t12\\t159\nL\\t12\\t160\nL\\t12\\t161\nL\\t12\\t162\nL\\t12\\t163\nL\\t12\\t164\nL\\t12\\t165\nL\\t12\\t166\nL\\t12\\t167\nL\\t12\\t168\nL\\t12\\t169\nL\\t12\\t170\nL\\t12\\t"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"3\"\n"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\n"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(3)\n\nassert solution(stdin) == str(0)\n\nassert solution(stdin) == str(0)\n\nassert solution(stdin) == str(0)\n\nassert solution(stdin) == str(0)"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aabaaaba\") == 3\nassert solution(\"abana\") == 1\nassert solution(\"aabba\") == 1\nassert solution(\"ababaaab\") == 1\nassert solution(\"ababbaaaa\") == 3\n"
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"abaaaba\", \"Incorrect output\"\n\nassert solution(input()) == \"ababa\", \"Incorrect output\"\n\nassert solution(input()) == \"abbabaaababaab\", \"Incorrect output\"\n\nassert solution(input()) == \"abcabababcaaababab\", \"Incorrect output\"\n\nassert solution(input()) == \"ababab\", \"Incorrect output\""
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\", \"Correct solution is 3\"\n\nassert solution(stdin) == \"5\", \"Correct solution is 5\"\n\nassert solution(stdin) == \"123456789\", \"Correct solution is 123456789\"\n\n\n\"\"\""
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"abaaaba\"\nassert solution(stdin) == \"abanana\"\nassert solution(stdin) == \"ababbbababab\"\nassert solution(stdin) == \"abababababab\"\nassert solution(stdin) == \"ababbbaababab\"\n\n\n\n\"\"\""
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ab\") == \"ab\"\nassert solution(\"abab\") == \"abab\"\nassert solution(\"abaaaaa\") == \"abaaaaa\"\nassert solution(\"abababab\") == \"ababababab\"\nassert solution(\"abcabcabcabc\") == \"abcabcabcabc\"\n"
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"1\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"5\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"abaaaba\"\nassert solution(stdin) == \"abanana\"\nassert solution(stdin) == \"abababa\"\nassert solution(stdin) == \"abababb\"\nassert solution(stdin) == \"aabaaabb\"\n"
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"abaaaba\"\n\n\n-----Known Issues-----\n\nInput:\n3\naaabbbcc\nb\na\na\naaabbbcc\n\nOutput:\n3\n\nInput:\n4\naabaaabbbc\nb\na\na\na\na\nbabaaabbbcc\n\nOutput:\n4\n\n\n-----Solutions-----\n\nSolution 1:"
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"abaaaba\", \"Your solution must be abaaaba\"\n\nassert solution(stdin) == \"ababbab\", \"Your solution must be ababbab\"\n\nassert solution(stdin) == \"abbaaba\", \"Your solution must be aabbaaba\"\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == -1\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 5\") == 4\nassert solution(\"5 5\") == -1\nassert solution(\"5 4\") == -1\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 3 4 5\") == \"4\"\nassert solution(\"1 4\") == \"3\"\nassert solution(\"1 4\") == \"4\"\nassert solution(\"1 3 4 5\") == \"4\"\nassert solution(\"1 3 3 4 3\") == \"4\"\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"0\") == \"0\"\nassert solution(\"21\") == \"21\"\nassert solution(\"53\") == \"53\"\nassert solution(\"41\") == \"41\"\nassert solution(\"53\") == \"53\"\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 4 1 0 2 1 2 0 1\") == \"1\"\nassert solution(\"1 4 1 0 2 1 2 0 2\") == \"1\"\nassert solution(\"1 3 0 0 3 1 3 0 1\") == \"3\"\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '4'\nassert solution(input()) == '-1'"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == '4'\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 4\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin\n    ) == '-1'\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(['aAbB', 'aBaCaB', 'xYyXzZaZ', 'zZ']) == '0'\nassert solution(['aAbB', 'aBaCaB', 'xYyXzZaZ', 'zZ']) == '3'\nassert solution(['aAbB', 'aBaCaB', 'xYyXzZaZ', 'zZ']) == '1'\n"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"5\",\"1\"]) == \"0\"\nassert solution([\"5\",\"3\",\"1\",\"2\",\"3\"]) == \"1\"\nassert solution([\"3\",\"2\",\"1\",\"2\",\"3\"]) == \"3\"\nassert solution([\"4\",\"1\",\"2\",\"3\",\"1\",\"2\",\"3\"]) == \"3\"\nassert solution([\"4\",\"3\",\"1\",\"2\",\"3\",\"1\",\"2\",\"3\",\"1\",\"2\"]) == \"0\"\n"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0, \"Not possible\"\nassert solution(stdin) == 3, \"Not possible\"\nassert solution(stdin) == 5, \"Not possible\"\nassert solution(stdin) == 2, \"Not possible\""
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(list(map(str, input()))) == int(input())"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('aAbB') == 0\nassert solution('aBaCaB') == 3\nassert solution('aBaCaB') == 4\nassert solution('aBaCaB') == 5\nassert solution('aBaCaB') == 2\n"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == 0, \"Error\"\n"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n\nimport sys\nsys.setrecursionlimit(100000)\n\nclass Solution:\n    def numberOfRooms(self, n: int) -> int:\n        self.ans = 0\n        def dfs(x):\n            if x == n:\n                self.ans += 1\n                return\n            \n            for i in range(2, x+1):\n                if i % 2 == 0:\n                    dfs(i/2)\n                else:\n                    dfs(x/2)\n        \n        dfs(1)\n        return self.ans"
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 4 1 2 5 3 7 1\") == \"10\"\nassert solution(\"1 2 3 1 5 3 7 1\") == \"0\"\nassert solution(\"1 4 7 1 3 5 2\") == \"10\"\nassert solution(\"1 3 5 2 3 4\") == \"10\"\nassert solution(\"1 1 3 1 5 3 7 1\") == \"0\"\n\n1\n2 3 1 5 3 7 1"
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '0'\n\nassert solution(stdin) == '0'\nassert solution(stdin) == '10'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"8 3\") == 5\nassert solution(\"3 3\") == 0\nassert solution(\"3 1\") == 2\nassert solution(\"3 1 2\") == 1\nassert solution(\"5 4 5\") == 4\n"
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 3 1 1\") == 0\nassert solution(\"3 3 1 2\") == 10\nassert solution(\"3 3 1 3\") == 0\nassert solution(\"3 3 1 4\") == 0\nassert solution(\"3 3 1 5\") == 0\n"
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"Input:\") == \"Output: 10\"\nassert solution(\"Input:\") == \"Output: 0\"\n\"\"\""
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\n\"\"\""
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '10'\n\n\n-----Constraints-----\n0 <= n <= 10^5\n0 <= k <= 10^5\n0 <= a_i <= k\n0 <= b_i <= 10^9\n\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\n\"\"\""
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 3\") == \"10\"\n\nassert solution(\"5 7 4 8 1 3 5 2\") == \"0\""
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"RRLRL\") == 2\n"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"RLLLLRRLL\") == 2\nassert solution(\"RLRRLL\") == 0\nassert solution(\"LL\") == 0\nassert solution(\"RLLLL\") == 0\nassert solution(\"RRRRR\") == 0\n"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(RRLRL) == 0, \"Test failed\"\nassert solution(RRLRL) == 2, \"Test failed\"\nassert solution(RRLRL) == 1, \"Test failed\"\nassert solution(RRLRL) == 1, \"Test failed\"\n"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('RRLRL'), 'Not implemented yet'\nassert solution('RLLLL'), 'Not implemented yet'\nassert solution('RLRRL'), 'Not implemented yet'\nassert solution('RLLLLLL'), 'Not implemented yet'\nassert solution('RLRRLLL'), 'Not implemented yet'\n"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\"RRLRL\"]\n) == \"1 1 1 1\"\nassert solution(\n    [\"LLRLRR\"]\n) == \"2 1 2 1\"\nassert solution(\n    [\"RLRRRL\"]\n) == \"2 1 1 1\"\n"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(r'''RRLRL''') == '0 1 2 1 1'\n'''"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"RRLRL\") == \"1 1 1 1\"\n"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"RRLRLRRLLRLRRLLRLLLLRRLLRLLLLL\"\n) == 10\n\nassert solution(\n    \"RLRRLLLLLLRLLLRLRLLLLRLLLLRLLL\"\n) == 12\n\nassert solution(\n    \"LRLRRLLRLLLRLRLLRLLRLLLLRLLLLL\"\n) == 0\n\nassert solution(\n    \"RLLLLLRRLLRLLRLLRLLRLLRLLRLLRLLLLL\"\n) == 1\n\nassert solution(\n    \"RLRRLLLLLRLRLLRLLRLLRLLRLLRLLRLLLLL\"\n) == 1"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(RRLRL) == 0, 'fail'\nassert solution(RRLRL) == 0, 'fail'\nassert solution(RRLRL) == 0, 'fail'\nassert solution(RRLRL) == 0, 'fail'\nassert solution(RRLRL) == 0, 'fail'\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1,3,2,1) == \"1\"\nassert solution(1,2,2,2) == \"0\"\nassert solution(1,2,3,2) == \"1\"\nassert solution(1,3,3,1) == \"1\"\nassert solution(1,4,4,2) == \"1\"\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n'''"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"5\", \"3\", \"2\", \"1\"]) == \"1\"\nassert solution([\"5\", \"1\", \"4\", \"3\", \"2\"]) == \"0\"\nassert solution([\"5\", \"1\", \"2\", \"3\"]) == \"3\"\nassert solution([\"5\", \"1\", \"3\", \"2\"]) == \"3\"\nassert solution([\"5\", \"4\", \"2\", \"3\"]) == \"1\"\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n\"\"\"\n-----Constraints-----\n - H is an integer between 1 and 100 (inclusive).\n - W is an integer between 1 and 8 (inclusive).\n - K is an integer between 1 and W (inclusive).\n\n-----Input-----\nInput is given from Standard Input in the following format:\nH W K\n\n-----Output-----\nPrint the number of the amidakuji that satisfy the condition, modulo 1\\ 000\\ 000\\ 007.\n\n-----Sample Input-----\n1 3 2\n\n-----Sample Output-----\n1\n\nOnly the following one amidakuji satisfies the condition:\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == \"1\"\n\nGood luck!\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['1', '2', '3', '3', '2', '1']) == '1'\nassert solution(['2', '1', '3', '2', '1', '3']) == '3'\nassert solution(['4', '3', '3', '2', '1', '2', '1']) == '1'\nassert solution(['4', '3', '2', '2', '1', '1', '1']) == '2'\nassert solution(['1', '1', '2', '1', '1', '1']) == '1'\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"1\"\n'''\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4 3\") == \"7\"\nassert solution(\"5 4\") == \"5\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 2 4 2\") == \"4\"\nassert solution(\"3 2 3 4 3\") == \"3\"\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp: str) == \"1\"\n'''\n\nimport math"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"2\", \"5\", \"4\"]) == \"1\"\nassert solution([\"1\", \"2\", \"4\"]) == \"2\"\nassert solution([\"3\", \"5\", \"4\"]) == \"2\"\nassert solution([\"3\", \"3\", \"3\"]) == \"1\"\nassert solution([\"5\", \"3\", \"2\"]) == \"2\"\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"2\",\"5\",\"4\"]) == \"2\"\nassert solution([\"4\",\"3\",\"2\"]) == \"1\"\nassert solution([\"5\",\"5\"]) == \"1\"\nassert solution([\"2\",\"5\",\"5\"]) == \"2\"\n\n'''\nclass Solution:\n    def minOps(self, A, B, C):\n        if not A and not B and not C:\n            return 0\n        if A and B and C:\n            A = A - 1\n            B = B + 1\n            C = C - 2\n            return max(1, self.minOps(A, B, C))\n        else:\n            return 0\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == 5\nassert inp == \"5\"\nassert inp == \"4\"\nassert inp == \"4\"\n\nprint(\"The input is correct!\")"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 5 4\") == \"2\"\nassert solution(\"3 4 2\") == \"3\"\nassert solution(\"5 5 5\") == \"5\"\nassert solution(\"4 6 6\") == \"5\"\nassert solution(\"0 0 0\") == \"0\"\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 2, 3) == 3\nassert solution(1, 1, 1) == 2\nassert solution(1, 1, 2) == 2\nassert solution(1, 3, 1) == 3\nassert solution(4, 1, 1) == 2\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2 5 4') == '2'\nassert solution('2 6 4') == '2'\nassert solution('2 5 5') == '2'\nassert solution('2 6 5') == '1'\nassert solution('2 5 4 7') == '2'\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"2\",\"5\",\"4\",\"4\"]) == 2, \"solution(['2','5','4','4'])\"\nassert solution([\"3\",\"1\",\"3\",\"1\"]) == 0, \"solution(['3','1','3','1'])\"\nassert solution([\"4\",\"5\",\"6\",\"4\"]) == 2, \"solution(['4','5','6','4'])\"\nassert solution([\"4\",\"3\",\"2\",\"2\"]) == 0, \"solution(['4','3','2','2'])\"\n"
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(A, B, C) == '2'\nassert solution(A, B, D) == '2 2 3'\nassert solution(A, B, E) == '2 4'\nassert solution(A, B, F) == '2 4 3'\nassert solution(A, B, G) == '2 4 3 5'\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n'''"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"4\"\n\n'''\nimport unittest\nclass Solution(object):\n\n    def __init__(self):\n        self.max_moves = 0\n\n    def solution(self, stdin):\n        \"\"\"\n        :type stdin: str\n        :rtype: str\n        \"\"\"\n        line = stdin.splitlines()\n        self.H, self.W = map(int, line[0].split())\n        self.maze = [list(map(int, input().strip().split())) for _ in range(self.H)]\n\n        for i in range(self.W):\n            for j in range(self.H):\n                if self.maze[i][j] == 1:\n                    self.find_wall(i, j)\n\n        self.maze[self.H-1][self.W-1] = 0\n\n        return str(self.max_moves)\n\n    def find_wall(self, i, j):\n        if i == self.H-1 and j == self.W-1:\n            self.max_moves += 1\n\n        for x in range(max(0, i-1), min(self.H, i+1)+1):\n            for y in range(max(0, j-1), min(self.W, j+1)+1):\n                if self.maze[x][y] == 1:\n                    self.maze[x][y] = 0\n                    self.find_wall(x, y)\n\n        return"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 8\n\n\n'''\n\n\nimport sys\nimport math\n\nfrom collections import deque\n\n\nclass Maze:\n    def __init__(self, matrix):\n        self.maze = matrix\n        self.H, self.W = len(matrix), len(matrix[0])\n\n    def get_dynamic_graph(self):\n        maze_list = [[0 for _ in range(self.W)] for _ in range(self.H)]\n        for i in range(self.H):\n            for j in range(self.W):\n                if self.maze[i][j] == '.':\n                    if i > 0:\n                        maze_list[i][j] = maze_list[i - 1][j]\n                    if j > 0:\n                        maze_list[i][j] = maze_list[i][j - 1]\n                    if i < self.H - 1:\n                        maze_list[i][j] = maze_list[i + 1][j]\n                    if j < self.W - 1:\n                        maze_list[i][j] = maze_list[i][j + 1]\n        return maze_list\n\n    def get_available_square(self, i, j):\n        available_squares = []\n        if i > 0:\n            if self.maze[i - 1][j] == '..':\n                available_squares.append((i - 1, j))\n        if i < self.H - 1:\n            if self.maze[i + 1][j] == '..':\n                available_squares.append((i + 1, j))\n        if j > 0:\n            if self.maze[i][j - 1] == '..':\n                available_squares.append((i, j - 1))\n        if j < self.W - 1:\n            if self.maze[i][j + 1] == '..':\n                available_squares.append((i, j + 1))\n        return available_squares\n\n    def solve(self, start, end):\n        start_node = start\n        end_node = end\n\n        # \u6c7a\u3081\u8fbc\u307f\n        maze_list = self.get_dynamic_graph()\n        frontier = []\n        # \u8a2a\u554f\n        visited = set()\n        # \u59cb\u70b9\n        node = (start_node, start_node)\n\n        # \u30b9\u30bf\u30fc\u30c8\u30ce\u30fc\u30c9\u306e\u8ffd\u52a0\n        maze_list[start_node][start_node] = 1\n\n        # \u8fd4\u5374\u30ce\u30fc\u30c9\u306e\u8ffd\u52a0\n        maze_list[end_node][end_node] = 2\n\n        # \u5230\u9054\n        frontier.append(node)\n\n        while len(frontier)!= 0:\n            i, j = frontier.pop()\n            # \u5168\u3066\u306e\u30ce\u30fc\u30c9\u3092\u9078\u629e\n            available_squares = self.get_available_square(i, j)\n\n            # \u5168\u3066\u306e\u30ce\u30fc\u30c9\u3092\u9806\u63a5\u3059\u308b\n            for available_square in available_squares:\n                # \u6df1\u3055\u3092\u8a2a\u554f\n                node_i = i + available_square[0]\n                node_j = j + available_square[1]\n\n                # \u9078\u629e\u304c\u3042\u308c\u3070\u3001\u540c\u3058\u30ce\u30fc\u30c9\u306e\u8ffd\u52a0\n                if (node_i, node_j) in visited:\n                    continue\n                # \u9078\u629e\u3057\u305f\u30ce\u30fc\u30c9\u3067\u306f\u5168\u3066\u306e\u30ce\u30fc\u30c9\u3092\u9078\u629e\n                if (node_i, node_j) == end_node:\n                    return visited.pop()\n                # \u5168\u3066\u306e\u30ce\u30fc\u30c9\u3092\u9078\u629e\u3059\u308b\n                if (node_i, node_j) not in maze_list:\n                    continue\n                # \u5168\u3066\u306e\u30ce\u30fc\u30c9\u3092\u9078\u629e\u3057\u305f\u30ce\u30fc\u30c9\u306e\u8ffd\u52a0\n                visited.add((node_i, node_j))\n                # \u9078\u629e\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\n                maze_list[node_i][node_j] = 2\n                # \u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n                frontier.append((node_i, node_j))\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 3\"\n    ), 'incorrect input'\nassert solution(\n    \"3 3\"\n    ), 'incorrect input'\nassert solution(\n    \"3 3\"\n    ), 'incorrect input'\nassert solution(\n    \"3 3\"\n    ), 'incorrect input'\nassert solution(\n    \"3 3\"\n    ), 'incorrect input'\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"..#...#..#..#\") == \"4\"\nassert solution(\"..#....#..#..#\") == \"3\"\nassert solution(\"..#...#..#..#\") == \"4\"\nassert solution(\"..#....#..#..#\") == \"4\"\nassert solution(\"..#...#..#..#\") == \"4\"\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n\"\"\"\nfrom sys import stdin\n\n\"\"\"\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '4'\nassert solution(input().split()) == '5'\nassert solution(input().split()) == '4'\nassert solution(input().split()) == '5'\nassert solution(input().split()) == '5'\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3,3) == 4, 'incorrect solution'\nassert solution(5,2) == 1, 'incorrect solution'\nassert solution(5,5) == 7, 'incorrect solution'\nassert solution(3,4) == 4, 'incorrect solution'\nassert solution(6,5) == 7, 'incorrect solution'\n"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"4\"\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in a level-N burger.\n\n[output]\n\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\n[constraints]\n\n[input]\n\nThe first line contains an integer, N, denoting the number of lines in the input.\n\nThe next N lines each contains a line of integer, the size of each layer in"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 6\n\n-----Time complexity-----\n- O(N^2)\n\n- O(N^2)\n\"\"\"\n"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 5\") == \"2\"\nassert solution(\"1 5 6\") == \"3\"\nassert solution(\"1 6 7 8\") == \"6\"\n"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"4\"\n\n-----Basic Problem-----\nGiven N and X, write a function to print the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\nInput:\nThe first line of input consists of two integers N and X.\n\nOutput:\nPrint the number of patties in the bottom-most X layers from the bottom of a level-N burger.\n\nExample:\nN = 5\nX = 7\nThe function should print 4.\n\nInput:\n4\n7\nOutput:\n4\n\n------------------Test Cases-------------------\nInput:\n4\n5\nOutput:\n4\n\nInput:\n1\n2\nOutput:\n3\n\nInput:\n2\n1\nOutput:\n2\n\nInput:\n3\n3\nOutput:\n2\n\nInput:\n1\n3\nOutput:\n2\n\nInput:\n3\n5\nOutput:\n2\n\nInput:\n1\n3\nOutput:\n1\n\n------------------Constraints-------------------\n\u2022 1 <= N <= 10^6\n\u2022 1 <= X <= 10^6\n\n\u2022 0 <= X <= 10^6\n\nOutput:\nInteger\n\nExample:\nInput:\n1\n2\nOutput:\n2\n\nInput:\n1\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n3\n1\nOutput:\n3\n\nInput:\n1\n1\nOutput:\n2\n\nInput:\n2\n2\nOutput:\n1\n\nInput:\n2\n3\nOutput:\n2\n\nInput:\n2\n5\nOutput:\n1\n\n------------------Constraints-------------------\n\u2022 1 <= N <= 10^6\n\u2022 1 <= X <= 10^6\n\n\u2022 0 <= X <= 10^6\n\nOutput:\nInteger\n\nExample:\nInput:\n1\n1\nOutput:\n1\n\nInput:\n1\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n2\nOutput:\n2\n\nInput:\n2\n3\nOutput:\n1\n\nInput:\n2\n4\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n3\n2\nOutput:\n3\n\nInput:\n2\n1\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n3\n4\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n3\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n3\n1\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n1\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n3\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n2\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n3\n3\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n4\n3\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n3\n1\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n3\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n2\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n2\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n4\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n3\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n4\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n4\n3\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n4\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n4\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n3\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n3\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n3\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n1\n2\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n2\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n3\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n2\n3\nOutput:\n3\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n2\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n3\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n3\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n2\n2\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n1\n1\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n2\n2\nOutput:\n2\n\n------------------Solution-------------------\nInput:\n2\n1\nOutput:\n1\n\n------------------Solution-------------------\nInput:\n3\n1\nOutput:\n"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 7\",\n    \"2 7\"\n) == 4\n\nassert solution(\n    \"2 8\",\n    \"2 8\"\n) == 4\n\nassert solution(\n    \"3 3\",\n    \"3 3\"\n) == 1\n\nassert solution(\n    \"3 6\",\n    \"3 6\"\n) == 1\n\nassert solution(\n    \"2 2\",\n    \"2 2\"\n) == 1"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    input:\n    \"2 7\"\n) == 4\nassert solution(\n    input:\n    \"1 3\"\n) == 1\nassert solution(\n    input:\n    \"1 6\"\n) == 0\nassert solution(\n    input:\n    \"1 1\"\n) == 0\nassert solution(\n    input:\n    \"2 2\"\n) == 2\n"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    input=stdin\n) == \"10\"\n\n\"\"\"\n"
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '4'\n\nTODO:\n  - More constraints?\n  - Why is this even necessary?\n    - Don't print the result unless you know what you are doing.\n    - Perhaps we can split our code into smaller pieces that will do this.\n\"\"\""
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('L \\geq 2') == '4'\nassert solution('L \\geq 2') == '2'\nassert solution('BBPPPBPBPPPBB') == '2'\nassert solution('L \\geq 2') == '2'\nassert solution('L \\geq 2') == '2'\n"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(test_input) == 'OMG>.< I don't know!'\nassert solution(test_input) == 'OMG>.< I don't know!'\nassert solution(test_input) == 'OMG>.< I don't know!'\nassert solution(test_input) == 'Freda's'\nassert solution(test_input) == 'Rainbow's'\n"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10 11 12\") == \"OMG>.< I don't know!\"\nassert solution(\"15 2 3 4 5 6 7 8 9 10 11 12\") == \"OMG>.< I don't know!\"\nassert solution(\"miao.lala.miao.lala.miao.lala.miao.lala\") == \"OMG>.< I don't know!\"\nassert solution(\"I will go to play with you lala. I will go to play with you lala. I will go to play with you lala. I will go to play with you lala.\") == \"OMG>.< I don't know!\"\nassert solution(\"miao.lala.miao.lala.miao.lala.miao.lala.miao.lala\") == \"OMG>.< I don't know!\"\n"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"I will go to play with you lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"I won't play with you lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"I won't play with you lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"miao.lala.\", \"I won't play with you lala.\", \"miao.lala.\", \"miao.lala.\", \"I won't play with you lala.\", \"miao.lala.\", \"miao.lala.\", \"I won't play with you lala.\", \"miao.lala.\", \"miao.lala.\", \"I won't play with you lala.\", \"miao.lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I won't play with you lala.\", \"I"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"Freda's\"\nassert solution(stdin) == \"Rainbow's\"\nassert solution(stdin) == \"OMG>.< I don't know!\"\nassert solution(stdin) == \"OMG>.< I don't know!\"\nassert solution(stdin) == \"Omnidirectional\"\n"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'OMG>.< I don\\'t know!', \"solution failed\"\n\"\"\"\n\nfrom collections import defaultdict\nfrom typing import DefaultDict\nfrom itertools import combinations"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 'Freda's miao.lala. miao.lala.'\nassert solution(inp) == 'Freda's miao.lala.'\nassert solution(inp) == 'OMG>.< I don\\'t know!'\nassert solution(inp) == 'OMG>.< I don\\'t know!'\nassert solution(inp) == 'OMG>.< I don\\'t know!'\n\n'''"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"I will go to play with you lala.\", \"wow, welcome.\", \"miao. lala.\"]) == \"OMG>.< I don't know!\"\nassert solution([\"I will go to play with you lala.\", \"lala.\", \"miao. lala.\"]) == \"OMG>.< I don't know!\"\nassert solution([\"I will go to play with you lala.\", \"miao. lala.\", \"lala.\", \"lala.\"]) == \"OMG>.< I don't know!\"\nassert solution([\"I will go to play with you lala.\", \"lala.\", \"miao. lala.\", \"lala.\"]) == \"OMG>.< I don't know!\"\nassert solution([\"I will go to play with you lala.\", \"lala.\", \"lala.\", \"lala.\"]) == \"OMG>.< I don't know!\"\n"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Freda's miao.lala. I will go to play with you lala. miao.lala. miao.lala. miao.lala. miao.lala. miao.lala. I don\u2019t know!\"\n"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Freda's\"\nassert solution(stdin) == \"OMG>.< I don't know!\"\nassert solution(stdin) == \"Rainbow's\"\nassert solution(stdin) == \"OMG>.< I don't know!\"\nassert solution(stdin) == \"Rainbow's\"\n"
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"I will go to play with you lala.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you miao.\\n I will go to play with you m"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4 2 3 1 6'\n"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == \"4 2 3 1 6\"\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u043f\u0440\u043e\u0448\u043b\u043e \u0443\u0432\u0435\u0440\u0435\u043d\u043e \u0447\u0442\u043e \u0443\u0441\u043f\u0435\u0445 \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0435. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e \u044d\u0442\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043b\u044e\u0431\u044b\u043c\u0438. \u0414\u0440\u0430\u0439\u0432\u0435\u0440\u044b \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0431\u0443\u0434\u0443\u0442 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430\u0447\u043d\u0435\u0442 \u0441\u0432\u043e\u0438 \u0447\u0438\u0441\u043b\u0430.\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u043f\u0440\u043e\u0448\u043b\u043e \u0443\u0432\u0435\u0440\u0435\u043d\u043e \u0447\u0442\u043e \u0443\u0441\u043f\u0435\u0445 \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0435. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e \u044d\u0442\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043b\u044e\u0431\u044b\u043c\u0438. \u0414\u0440\u0430\u0439\u0432\u0435\u0440\u044b \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0431\u0443\u0434\u0443\u0442 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430\u0447\u043d\u0435\u0442 \u0441\u0432\u043e\u0438 \u0447\u0438\u0441\u043b\u0430.\n\n\n\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 stdin, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 \u0434\u0432\u0443\u0445 \u0441\u0442\u0440\u043e\u043a:\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u2014 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e, \u0432\u0442\u043e\u0440\u0430\u044f \u2014 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0447\u0438\u0441\u0435\u043b, \u0442.\u0435. \u043e\u0434\u043d\u043e \u0438\u0437 \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b \u043d\u0430 \u0434\u0430\u043d\u043d\u043e\u043c \u0447\u0438\u0441\u043b\u0435.\n\u0418\u0437 \u044d\u0442\u0438\u0445 \u0447\u0438\u0441\u0435\u043b \u0441\u0443\u043c\u043c\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u043e\u0435 \u0447\u0438\u0441\u043b\u043e \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u043e\u0442 0 \u0434\u043e 2,000,000.\n\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u043f\u0440\u043e\u0448\u043b\u043e \u0443\u0432\u0435\u0440\u0435\u043d\u043e \u0447\u0442\u043e \u0443\u0441\u043f\u0435\u0445 \u0432 \u0440\u0435\u0448\u0435\u043d\u0438\u0438 \u0437\u0430\u0434\u0430\u0447\u0438 \u043c\u043e\u0436\u043d\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u044c \u0441\u043a\u0440\u0438\u043f\u0442\u044b \u0440\u0430\u0437\u0431\u043e\u0440\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0432 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0430\u0439\u0432\u0435\u0440\u0435. \u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u043a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e \u044d\u0442\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435\u043b\u0438 \u043d\u0435 \u0431\u0443\u0434\u0443\u0442 \u043b\u044e\u0431\u044b\u043c\u0438. \u0414\u0440\u0430\u0439\u0432\u0435\u0440\u044b \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0431\u0443\u0434\u0443\u0442 \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u043f\u043e\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u043d\u0430\u0447\u043d\u0435\u0442 \u0441\u0432\u043e\u0438 \u0447\u0438\u0441\u043b\u0430.\n\n\u041e\u0442\u0432\u0435\u0442:\n4 4\n\"\"\""
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '4 2 3 1 6'\n"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(5) == \"4 2 3 1 6\"\nassert solution(6) == \"1 2 3 4\"\nassert solution(7) == \"1 2 3 4 5 6\"\nassert solution(8) == \"1 2 3 4 5 6 7 8 9\"\nassert solution(9) == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 4 2\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == 4\nassert solution(5) == 4"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"2 4 1 5\"\nassert solution(\"5 2 4 3\") == \"2 4 2 4\"\n"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1 2 3\", \"1 2 4\", \"1 3 2\", \"1 1 2\", \"1 1 1\"]) == \"1 2 3 4 1 2 1\"\nassert solution([\"1 2 3\", \"1 2 4\", \"1 3 2\", \"1 1 2\", \"1 1 1\"]) == \"1 1 2 1 2\"\nassert solution([\"2 3 3\", \"2 3 4\", \"2 3 5\", \"2 1 2\", \"1 1 2\", \"1 1 1\", \"2 2 2\", \"2 1 1\", \"1 2 1\"]) == \"2 1 1 2 1 1 1 1 1\"\n\n\n-----\u041f\u0420\u041e\u0421\u0422\u0420\u0410\u041d\u0421\u0422\u0412\u0415\u041d\u0418\u042f-----\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2 2 2 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n2 2 2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2 2 2 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4\n4 2 3 1 6\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 1 1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4\n4 2 3 1 6\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4 2 3 1 6\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n4 2 3 1 6\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4 2 3 1 6\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n4 2 3 1 6\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4 2 3 1 6\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n2 3 4\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n1 2 3\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2 2 2 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 1 1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n2 2 2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2 2 2 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n3 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n4 2 3 1 6\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4 2 3 1 6\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 1 1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2\n2 2 2\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n2 2 2 2\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1\n1 2 3\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n1 1 1 1\n\n\u041f\u0440\u0438\u043c\u0435\u0440\u044b\n\u0412\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n5\n4 2 3 1 6\n\n\u0412\u044b\u0445\u043e\u0434\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435\n4"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"4 2 3 1 6\"\nassert solution(input) == \"1 2 3\"\nassert solution(input) == \"1 2\"\nassert solution(input) == \"1 2 4\"\n"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"stdin\""
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8, \"The expected output is '8' but got: '{}'\".format(solution(stdin))\n\nExplanation\nInput\n5\n1 2 3 1 2\nOutput\n8 1\n1 \n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        # get the input\n        n, *a = stdin\n        \n        # make a list\n        a = a[::-1]\n        \n        # calculate number of trees\n        n_trees = int(n)\n        \n        # calculate the total esthetic appeal\n        k = 1\n        \n        # loop over the input\n        for _ in range(n_trees):\n            \n            # check if all trees have been checked\n            if all(i == 0 for i in a):\n                k += 1\n                continue\n            \n            # calculate the total esthetic appeal\n            est_app = a[0]\n            for i in range(1, len(a)):\n                if a[i] == 0:\n                    est_app = est_app + a[i]\n                else:\n                    est_app = est_app + a[i]\n            \n            # check if all trees have been checked\n            if est_app >= 10**9:\n                k += 1\n            \n        return str(k)\n"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 3 1 2') == '8 1'\nassert solution('4 7 6 2 3') == '7'\nassert solution('10 9 8 1 5') == '14'\nassert solution('4 4 2 5 3 4 5') == '3'\n"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 8, \"A=0\"\nassert solution(stdin) == 5, \"A=1\"\nassert solution(stdin) == 2, \"A=-2\"\nassert solution(stdin) == 1, \"A=-1\""
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin) == 2\n"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 1 0 3 1 2') == 7\nassert solution('1 0 0 0 0 1 0') == 7\nassert solution('1 0 0 3 1 2 0') == 3\nassert solution('0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 11\n\nassert solution(input) == 9\n\nassert solution(input) == 5\n\nassert solution(input) == -1\n\nassert solution(input) == -2"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stderr) == \"5 1\"\nassert solution(stdin) == \"0\"\nassert solution(stderr) == \"3\"\n"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 3 5\"\nassert solution(stdin) == \"4 5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 10\nassert solution(input()) == 23\nassert solution(input()) == 9\nassert solution(input()) == 33\nassert solution(input()) == 7\n"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"1 1 1\"\nassert solution(\"2\") == \"1 1\"\nassert solution(\"3\") == \"1 1 1\"\nassert solution(\"4\") == \"1 1\"\nassert solution(\"5\") == \"1 1 1\"\n"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1\"\n\nExample:\n\nInput:\n2\n\nOutput:\n1\nInput:\n3\n\nOutput:\n1 1\n\nExplanation:\n\nThe subset of $S$ has two subsets of size 2 and 3.\n\nSolution:\n\nTime complexity: O(n^2)\n\nSpace Complexity: O(n^2)\n\nExplanation:\n\nKate is a very neat girl and for each $k \\in \\{2, \\dots, n\\}$ she wants to find a subset that has the smallest imperfection among all subsets in $S$ of size $k$. There can be more than one subset with the smallest imperfection and the same size, but you don't need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size $k$, will name it $I_k$. \n\nNote: We need to pass the input as string. \n\nInput:\n3\n\nOutput:\n1 1\n\nExplanation:\n\nKate has a set of $S$ of $n$ integers, which are not in the set $S$. For example, $S = {1, 2, 3, 4, 5}$, $S = {1, 2, 3, 4, 6}$.\n\nSolution:\n\nTime Complexity: O(n^2)\n\nSpace Complexity: O(n^2)\n\nExplanation:\n\nKate is a very neat girl and for each $k \\in \\{2, \\dots, n\\}$ she wants to find a subset that has the smallest imperfection among all subsets in $S$ of size $k$. There can be more than one subset with the smallest imperfection and the same size, but you don't need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size $k$, will name it $I_k$. \n\nNote: We need to pass the input as string. \n\nInput:\n4\n\nOutput:\n1 1\n\nExplanation:\n\nKate has a set of $S$ of $n$ integers, which are not in the set $S$. For example, $S = {1, 2, 3, 4, 5}$, $S = {1, 2, 3, 4, 6}$.\n\nSolution:\n\nTime Complexity: O(n^2)\n\nSpace Complexity: O(n^2)\n\nExplanation:\n\nKate is a very neat girl and for each $k \\in \\{2, \\dots, n\\}$ she wants to find a subset that has the smallest imperfection among all subsets in $S$ of size $k$. There can be more than one subset with the smallest imperfection and the same size, but you don't need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size $k$, will name it $I_k$. \n\nNote: We need to pass the input as string. \n\nInput:\n5\n\nOutput:\n1 1 \n\nExplanation:\n\nKate has a set of $S$ of $n$ integers, which are not in the set $S$. For example, $S = {1, 2, 3, 4, 5}$, $S = {1, 2, 3, 4, 6}$, $S = {1, 2, 3, 4, 7}$, $S = {1, 2, 3, 4, 8}$, $S = {1, 2, 3, 4, 9}$, $S = {1, 2, 3, 4, 10}$, $S = {1, 2, 3, 4, 11}$.\n\nSolution:\n\nTime Complexity: O(n^2)\n\nSpace Complexity: O(n^2)\n\nExplanation:\n\nKate is a very neat girl and for each $k \\in \\{2, \\dots, n\\}$ she wants to find a subset that has the smallest imperfection among all subsets in $S$ of size $k$. There can be more than one subset with the smallest imperfection and the same size, but you don't need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size $k$, will name it $I_k$. \n\nNote: We need to pass the input as string. \n\nInput:\n6\n\nOutput:\n1 1 1 1\n\nExplanation:\n\nKate has a set of $S$ of $n$ integers, which are not in the set $S$. For example, $S = {1, 2, 3, 4, 5}$, $S = {1, 2, 3, 4, 6}$, $S = {1, 2, 3, 4, 7}$, $S = {1, 2, 3, 4, 8}$, $S = {1, 2, 3, 4, 9}$, $S = {1, 2, 3, 4, 10}$, $S = {1, 2, 3, 4, 11}$, $S = {1, 2, 3, 4, 12}$, $S = {1, 2, 3, 4, 13}$, $S = {1, 2, 3, 4, 14}$.\n\nSolution:\n\nTime Complexity: O(n^2)\n\nSpace Complexity: O(n^2)\n\nExplanation:\n\nKate is a very neat girl and for each $k \\in \\{2, \\dots, n\\}$ she wants to find a subset that has the smallest imperfection among all subsets in $S$ of size $k$. There can be more than one subset with the smallest imperfection and the same size, but you don't need to worry about it. Kate wants to find all the subsets herself, but she needs your help to find the smallest possible imperfection for each size $k$, will name it $I_k$. \n\nNote: We need to pass the input as string. \n\nInput:\n7\n\nOutput:\n1 1 1 1 1\n\nExplanation:\n\nKate has a set of $S$ of $n$ integers, which are not in the set $S$. For example, $S = {1, 2, 3, 4, 5}$, $S = {1, 2, 3, 4, 6}$, $S = {1, 2, 3, 4, 7}$, $S = {1, 2, 3, 4, 8}$, $S = {1, 2, 3, 4, 9}$, $S = {1, 2, 3, 4, 10}$, $S = {1, 2, 3, 4, 11}$, $S = {1, 2, 3, 4, 12}$, $S = {1, 2, 3, 4, 13}$, $S = {1, 2, 3, 4, 14}$, $S = {1, 2,"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1 1\""
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1,2,3,4,5,6,7\") == \"4\"\nassert solution(\"2,3,4,5,6,7,8,9,10,11\") == \"8\"\nassert solution(\"2,3,4,5,6,7,8,9,10,11,12\") == \"10\"\nassert solution(\"2,3,4,5,6,7,8,9,10,11,12,13\") == \"12\"\nassert solution(\"1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40\") == \"28\"\n"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\n\nExample 1:\n\nInput:\n2\n\nOutput:\n1\nInput:\n3\n\nOutput:\n1 1 \n\"\"\""
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2') == '1'\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 10,000.\n\n\n-----Time complexity-----\nThe given input is represented as a string.\n\n\n-----Space complexity-----\nDoes not count the space of $S$.\n\n\n-----Elements of the input are all integers.\n\n\n-----Constraints for each line.\nThere are $k$ subsets of size $k$ with sizes $2, 3$ and $1$, and each subset is composed of $k$ integers.\n\n\n-----Sample Input\n\nInput for the sample program.\n\n2\n\nSample Output\n\nOutput for the sample program.\n\n\n-----Sample Output.\n\nOutput for this sample program is $n - 1$ integers.\n'''"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\nassert solution(7) == 1\n"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\nExample input\n1\n2\n\nExample output\n1 1 \n\nExplanation\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all pairs $(a, b)$ such that both $a$ and $b$ are in $M$ and $a \\neq b$. \n\nKate has a set $S$ of $n$ integers $\\{1, 2, 3\\}$.\nShe thinks that imperfection of a subset $M \\subseteq S$ is equal to the maximum of $gcd(a, b)$ over all"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == \"1\"\nassert solution(2) == \"1 1\"\nassert solution(3) == \"1 1 1\"\nassert solution(4) == \"1 1 1 1\"\nassert solution(5) == \"1 1 1 1 1 1\"\n"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"3\") == \"1\"\nassert solution(\"4\") == \"1\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"NO\"\nassert solution(input()) == \"NO\"\nassert solution(input()) == \"YES\"\n"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"YES\"\n\n\n-----Constraints-----\n\n1 <= n <= 100\n0 < s_{i} < s_{j} <= 100\n\n### Solutions"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"Error\"\nassert solution(stdin), \"Error\"\nassert solution(stdin), \"Error\"\n"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(test_case[1]) == 'YES','solution should be \"YES\" for test case 1'\nassert solution(test_case[2]) == 'NO','solution should be \"NO\" for test case 2'\nassert solution(test_case[3]) == 'NO','solution should be \"NO\" for test case 3'\n\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 100\n0 \u2264 s_{i} \u2264 s_{j} \u2264 10^6\n\n\n-----Time Limit: 1.0s (10^9 ms)-----\n\nTime Limit: 1.0s (10^9 ms)\n\n\n-----Submissions-----\n\nSample Input\n4\ntom\nlucius\nginny\nharry\nginny\n\nSample Output\nYES\nYES\nNO\nNO\n\n\n-----Constraints-----\n\n0 \u2264 n \u2264 100\n0 \u2264 s_{i} \u2264 s_{j} \u2264 10^6\n\n\n\"\"\",\n\"\"\"\\\n5\ntrd\nhrt\ntgt\n\n\"\"\",\n\"\"\"\\\n3\ncgbs\ntgr\ncgs\n\n\"\"\",\n\"\"\"\\\n4\nayy\nhty\ntyy\n\n\"\"\",\n\"\"\"\\\n1\nhry\nyrh\n\n\"\"\",\n\"\"\"\\\n1\nhry\nyrh\n\n\"\"\",\n\"\"\"\\\n2\ncyy\ngyy\nycy\n\n\"\"\",\n\"\"\"\\\n1\nhry\ncyy\nycy\n\n\"\"\",\n\"\"\"\\\n2\ncyy\ngyy\nycy\n\n\"\"\",\n\"\"\"\\\n3\nghs\ntgy\n\n\"\"\",\n\"\"\"\\\n3\nghs\ntgy\n\n\"\"\",\n\"\"\"\\\n2\ngyy\ngsf\nygy\n\n\"\"\",\n\"\"\"\\\n2\ngyy\ngsf\nygy\n\n\"\"\",\n\"\"\"\\\n3\ngsf\nygy\n\n\"\"\",\n\"\"\"\\\n1\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nNO\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nNO\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nNO\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nNO\nYES\nNO\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nNO\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nYES\nYES\nYES\nNO\nNO\nNO\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nNO\nNO\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nNO\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n\n\"\"\",\n\"\"\"\\\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\nYES\n"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"tom hucy nlg, rh gi nwq, ge lk nnk, gr jt nnj, j lqx wcj, a nb wqd, i ln wqx, i nx jz, nv xnf, h wi nwq, wi lwq, wi wj xnj, wj nlk, wj nnj, wi lj wlk, wi wlj nlk, wi wlj nnj, wi jl xnj, wi lj nnj, wi nx jz, wf qwe nnx, f fjn, lwf jqwe nxj, wf qwe xnj, lwf jqwe xnj, lwf njqx, lwf jnx nlk, lwf qwe xnj, lwf jnx nxj, lwf njqx, lwf njqx, lwf jnx nxj, lwf jqwe nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf njqx, lwf jnx nxj, lwf njqx, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf jnx nxj, lwf njqx, lwf njqx, lwf jnx nxj, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jnx nxj, lwf njqx, lwf jn"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nclass Solution:\n    def exist(self, board: List[List[str]], word: str) -> bool:\n        \n        self.visited = set()\n        self.index = {}\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == word[0]:\n                    self.index[board[i][j]] = [i, j]\n                \n                if self.is_valid(board, i, j, word):\n                    self.visited.add(board[i][j])\n                    \n                if self.is_valid(board, i, j+1, word):\n                    self.visited.add(board[i][j+1])\n                    \n                if self.is_valid(board, i+1, j, word):\n                    self.visited.add(board[i+1][j])\n                    \n        return len(self.visited) == len(word)"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '4'\nassert solution(inp) == 2\n\"\"\"\nimport math\n"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == 22\nassert solution(abba) == 0\nassert solution(bab) == 2\nassert solution(bab) == 3"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2\n\"\"\"\n"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"aabbbca\") == \"a\"\nassert solution(\"abca\") == \"a\"\nassert solution(\"bba\") == \"b\"\nassert solution(\"bba\") == \"b\"\nassert solution(\"babba\") == \"b\"\n"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"abba\") == 2\nassert solution(\"bab\") == 2\nassert solution(\"abba\") == 1\nassert solution(\"baab\") == 2\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\nstdin.length is always 10^4.\nstdin contains only lowercase English letters.\n\nTime Limit: 1 sec\nSpace Limit: O(1)\n\n__\n\"\"\""
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 4\n\"\"\""
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"abba\") == 4\nassert solution(\"bab\") == 2\n\n-----Constraints-----\n1 <= stdin.length <= 105\nstdin.length <= 105\n\n'''\n"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin)!= 7\nassert solution(stdin)!= 7\n"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n\"\"\"\n\nclass Solution:\n    def countLetters(self, s):\n        count_dict = {}\n        for c in s:\n            count_dict[c] = count_dict.get(c, 0) + 1\n        return max(count_dict.values())"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(abba) == 2\nassert solution(bab) == 4\n\"\"\""
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\"\"\""
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n-----Constraints-----\n1 <= stdin.length <= 10^4\n1 <= stdin[i] <= 10^4\nstdin consists of two lines, separated by spaces\n\n'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n'''\n"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 6\n\n-----Constraints-----\n1 \u2264 n \u2264 1000\n-10^4 \u2264 x_0, y_0 \u2264 10^4\n\nThe input string represents an integer that represents the number of stormtroopers on the battle field, x_0, y_0.\n\nThe gun coordinates are provided as two integers.\n\n[Example]\n\nInput 1:\n\n2 1 2\n1 1\n1 0\n\nOutput 1:\n\n1\n\n[Explanation]\n\nIn the first sample, Han Solo is located at (1, 1) and the gun coordinates are (2, 1).\n\nIn the second sample, Han Solo is located at (1, 2) and the gun coordinates are (2, 2).\n\nIn the third sample, Han Solo is located at (1, 2) and the gun coordinates are (1, 2).\n\nIn the fourth sample, Han Solo is located at (1, 1) and the gun coordinates are (2, 2).\n\nIn the fifth sample, Han Solo is located at (1, 2) and the gun coordinates are (2, 2).\n\nIn the sixth sample, Han Solo is located at (1, 1) and the gun coordinates are (1, 2).\n\n[Example]\n\nInput 2:\n\n3 0 0\n1 1\n1 0\n1 0\n\nOutput 2:\n\n2\n\n[Explanation]\n\nIn the second sample, Han Solo is located at (1, 1) and the gun coordinates are (3, 0).\n\nIn the third sample, Han Solo is located at (1, 2) and the gun coordinates are (3, 1).\n\nIn the fourth sample, Han Solo is located at (1, 2) and the gun coordinates are (3, 2).\n\nIn the fifth sample, Han Solo is located at (1, 1) and the gun coordinates are (3, 2).\n\nIn the sixth sample, Han Solo is located at (1, 2) and the gun coordinates are (3, 2).\n\nIn the seventh sample, Han Solo is located at (1, 1) and the gun coordinates are (3, 0).\n\n[Constraints]\n\n-10^4 \u2264 x_0, y_0 \u2264 10^4\n-10^4 \u2264 stdin.length \u2264 10^4\n-10^4 \u2264 stdin[i].length \u2264 10^4\n-10^4 \u2264 x_0, y_0 \u2264 10^4\n\n[Time limit]\n\nO(n log n)\n\n[Memory limit]\n\nO(n)\n'''\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 1\n\nExplanation to the third and fourth samples from the statement, respectively:  [Image]\n"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 1 2'), 2\nassert solution('3 0 0'), 3\nassert solution('2 1 2'), 1\nassert solution('2 1 2'), 1\n\n\n-----Bug Fix-----\n"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 2\n\nExplanation to the third sample from the statement, respectively:  [Image]\n"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 2\n"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12, \"Not 12\"\n\"\"\""
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6 5 2 1 0 1 1 0 1\"\n\nassert solution(stdin) == \"8 0 1 1 0 1 1 0 1\"\n\nassert solution(stdin) == \"4 5 1 6 7 8 0 0\"\n\nassert solution(stdin) == \"4 5 1 6 7 8\"\n\nassert solution(stdin) == \"5 1 3 0\"\n\n-----Advanced-----\n\nIn this case, the $n$ points consist of two pairs of distinct points: $a_{1}$, $b_{1}$. That is, we can remove the two points $(x_i, y_i, z_i)$ from the set of points $(a_i, b_i)$, where $a_i, b_i \\le n$. For example, the $i$-th pair of points $a_i, b_i$ is $a_i$, $b_i$, and $x_i, y_i, z_i \\le $x_i$, $y_i, z_i \\le y_i$, $z_i, x_i \\le z_i$, and $y_i, z_i \\le y_i$, $z_i, x_i \\le y_i$, and $z_i, x_i \\le y_i$. For each pair, we can remove a point $a_i$, $b_i$, and remove a point $x_i$, $y_i$, $z_i$.\n\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 2000$; $n$ is even), denoting the number of points.\n\nEach of the next $n$ lines contains three integers $x_i$, $y_i$, $z_i$ ($-10^8 \\le x_i, y_i, z_i \\le 10^8$), denoting the coordinates of the $i$-th point.\n\nNo two points coincide.\n\n\n-----Output-----\n\nOutput every pair of integers $a_i, b_i$ ($1 \\le a_i, b_i \\le n$), denoting the indices of points removed on snap $i$. Every integer between $1$ and $n$, inclusive, must appear in your output exactly once.\n\nWe can show that it is always possible to remove all points. If there are many solutions, output any of them.\n\n\n-----Examples-----\nInput\n3\n0 0 1\n0 1 0\n0 1 1\n1 0 0\n1 1 0\n1 1 1\n2 2 2\n3 2 2\n2 3 2\n3 2 2\n3 2 3\n\nOutput\n3 6\n5 1\n2 4\n\nInput\n2\n0 0 1\n0 1 0\n1 1 0\n1 1 1\n2 2 2\n3 2 2\n2 3 2\n3 2 3\n\nOutput\n5 6\n1 6\n2 7\n\nExplanation\n\nIn this case, $n = 3$, all points are removed on snap 1.\n\nFinally, $n = 2$, $a_{1}$, $b_{1}$ are removed on snap 2. $x_i, y_i, z_i \\le $x_i$, $y_i, z_i \\le y_i$, $z_i, x_i \\le z_i$, $y_i, z_i \\le y_i$, $z_i, x_i \\le y_i$, $z_i, x_i \\le y_i$.\n\nIf we remove the two points $(0, 0)$, $(0, 1)$ and $(1, 0)$, then the set of points $(x_i, y_i, z_i)$ should be $a_{1}, b_{1}$, and $x_i, y_i, z_i \\le x_i$, $y_i, z_i \\le y_i$, $z_i, x_i \\le z_i$, $y_i, z_i \\le y_i$, $z_i, x_i \\le y_i$, $z_i, x_i \\le y_i$.\n\n\n-----Advanced-----\n\nIn this case, the $n$ points consist of two pairs of distinct points: $a_{1}$, $b_{1}$. That is, we can remove the two points $(x_i, y_i, z_i)$ from the set of points $(a_i, b_i)$, where $a_i, b_i \\le n$. For example, the $i$-th pair of points $a_i, b_i$ is $a_i$, $b_i$, and $x_i, y_i, z_i \\le $x_i$, $y_i, z_i \\le y_i$, $z_i, x_i \\le z_i$, $y_i, z_i \\le y_i$, $z_i, x_i \\le y_i$, $z_i, x_i \\le y_i$, $z_i, x_i \\le y_i$. For each pair, we can remove a point $a_i$, $b_i$, and remove a point $x_i$, $y_i$, $z_i$.\n\n\n\n-----Input-----\n\nThe first line contains a single integer $n$ ($2 \\le n \\le 2000$; $n$ is even), denoting the number of points.\n\nEach of the next $n$ lines contains three integers $x_i$, $y_i$, $z_i$ ($-10^8 \\le"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5 0 0 0 0\") == \"3 6\"\nassert solution(\"0 1 1 1 0\") == \"5 1\"\nassert solution(\"0 1 1 1 1\") == \"5 1\"\nassert solution(\"0 0 0 0 0\") == \"1 4\"\nassert solution(\"0 0 0 0 0 0\") == \"1 4\"\n"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"1 6\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3 6\"\n\"\"\""
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin.splitlines()\n    ) == \"3 6\"\n\n-----Advanced-----\n\nIn the first example, we show that if we remove points $a$ and $b$ that have not been removed yet, the surface of the bounding box that $a$ and $b$ are not on will form a perfectly balanced pair. In other words, a pair of points $a$ and $b$ is perfectly balanced if $a$ and $b$ are not in the same snap.  [Image]\n"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1 0\") == \"3 6\"\nassert solution(\"8\") == \"5 1\"\nassert solution(\"5 1 0\") == \"5 1\"\nassert solution(\"4 5\") == \"1 6\"\nassert solution(\"3 6\") == \"2 7\"\n"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 0 1\"\n"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('6') == '3 6'\nassert solution('8') == '4 5'\nassert solution('3 1 0') == '4 1 0'\nassert solution('3 1 0 1') == '5 1 0'\nassert solution('3 1 0 1 2') == '5 1 0 2'\n"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5 1 0\\n\"\nassert solution(stdin) == \"5 1\\n\"\nassert solution(stdin) == \"5\\n\"\n\nassert solution(stdin) == \"1 2 1\\n1 1 1\\n\"\nassert solution(stdin) == \"1 2\\n\"\n"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 4\"\n\n\n-----Constraints-----\n0\n1\n\nSample Input\n\n4\n0 1 2\n1 0 3\n2 1 0\n3 1 2\n4 1 3\n\nSample Output\n\n5 1\n4 4\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == '2'\n\n\n-----Constraints-----\n0 <= n <= 2000\n\n\n-----Usage-----\nThe only input that is needed is the standard input, and the only output is the standard output.\n\nError handling\n\nIf the input is incorrect, incorrect input will cause a syntax error in the program.\n\nInput\n2\nBWWW\nWBBB\nWBBB\nWWWB\n\nOutput\n2\n\nInput\n5\nBWBBB\nBBBBB\nBBBBB\nWBBBW\nWBBW\nBWBWB\n\nOutput\n2\n\nInput\n3 3\nBWBWB\nBBBBB\nBBBBB\nWBBBWB\nWBBBWB\n\nOutput\n3\n\n\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 1') == '4'\nassert solution('5 3') == '4'\nassert solution('2 1') == '3'\nassert solution('2 1') == '4'\nassert solution('2 1') == '3'\n"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"4 2\"\n) == \"1\"\nassert solution(\n    \"3 1\"\n) == \"3\"\nassert solution(\n    \"2 1\"\n) == \"2\"\nassert solution(\n    \"2 3\"\n) == \"1\"\nassert solution(\n    \"2 5\"\n) == \"2\"\n"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '4'\n\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n\nOutput:\n3\n\nInput:\n2\nBWWW\nWBBW\nWBBW\nBBBBB\nBBBBB\nWBBW\n\nOutput:\n4\n\nInput:\n3\nBW\nWBBB\n\nOutput:\n2\n\nInput:\n5\nBWWBWBWB\nWBBBBBBBB\nBBBBBBBBBB\nBBBBBBBBBB\nBWBBBBBBWB\nWBBBBBWBWB\nWBBBBBWBWB\nWBBBBBBBWB\nBWBBBBBBBW\nBBBBBBBBBBB\nBBBBBBBBBBB\nWBBBBBBBBBBW\nWBBBBBWBWBB\n\nOutput:\n3\n\nExplanation\n\nBWWW\n\nWWBBW\n\nBWBBBBBB\n\nBBBBBBBBB\n\nBWBBBBBBB\n\nBBBBBBBBBB\n\nBBBBBBBBBB\n\nBBBBBBBBBB\n\nBWBBBBBBBW\n\nWWBBBWBWW\n\nBWBBBBWBWW\n\nBWBBBBWBWW\n\nBWBBBBBBWB\n\nBWBBBBBBWB\n\nBBBBBBBBBBB\n\nBWBBBBBBBW\n\nWWBBBWBWWB\n\nBWBBBBBBBB\n\nBBBBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB\n\nBWBBBBBBBB"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    [\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n    ]\n    ) == \"4\"\n\n\nassert solution(\n    [\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \"WWWB\", \"BWB\", \"BWB\", \"BBBBB\", \"BBBBB\", \"WBBW\", \"WWW\", \"WBB\", \"WBB\"],\n        [\"BWWW\", \"WBBW\", \"WBBW\", \""
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '4'\n\nOutput\n4\n\"\"\""
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, [1,2,3]) == 1\nassert solution(4, [4, 2, 4, 3]) == 2\nassert solution(6, [2, 2, 2, 2, 2, 2, 2]) == 2\nassert solution(6, [4, 4, 4, 4, 4, 4, 4]) == 4\nassert solution(6, [3, 3, 4, 3, 3, 3]) == 3\n"
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, [1, 2, 3]) == 1, \"invalid\"\nassert solution(4, [1, 2, 3, 1, 2]) == 2, \"invalid\"\nassert solution(4, [3, 4, 5, 4, 2, 1]) == 2, \"invalid\"\nassert solution(2, [2, 3, 5, 1, 3, 4, 2, 2]) == 1, \"invalid\"\nassert solution(1, [1, 4]) == 1, \"invalid\"\n"
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3 4\") == \"2\"\nassert solution(\"4 2 3\") == \"3\"\nassert solution(\"1 3 4\") == \"1\"\nassert solution(\"1 4 5\") == \"0\"\nassert solution(\"1 4 5 6 7\") == \"0\"\n"
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"1\"\n\n\n-----Brute-Force---"
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n1 <= n <= 5000\n\n\n-----Time Limit Exceeded Explaination-----\n\nSince n = 5000, Mishka can put boxes into any other boxes i.e. boxes with side lengths a_{i} < a_{j} for each i.\n\nFor all boxes, Mishka can put a box i into another box j if:\n1. a_{i} < a_{j}.\n\n2. i-th box is not put into another box j.\n\n3. a_{i} < a_{j}.\n\nFor the purpose of this problem, a_1 <= a_2 <=... <= a_{n}.\n\nFor more details on input and output, please refer to the question Link.\n\n---Related Topics Hash Table ---\n\ud83d\udc4d 120 \ud83d\udc4e 0\n\nhttps://leetcode.com/problems/minimum-number-of-visible-boxes/\nhttps://leetcode.com/problems/minimum-number-of-visible-boxes/discuss/912763/Easy-to-understand-Python-python-solution\n\n@lc examples=\n[3]\n>>> 3\n>>> 2\n>>> 1\n>>> 5\n>>> 1\n>>> 5\n\n@lc examples=\n@lc group=\n@lc rank=\n\n@lc code=start\n\nclass Solution:\n    def minVisibleBoxes(self, nums: List[int]) -> int:\n        Mishka = collections.Counter()\n        n = len(nums)\n        for i in range(n):\n            for j in range(i + 1, n):\n                a = nums[i]\n                b = nums[j]\n                Mishka[a] += 1\n                Mishka[b] += 1\n                if a < b:\n                    Mishka[a] -= 1\n                else:\n                    Mishka[b] -= 1\n        def is_box_in_another_box(box, another_box):\n            if box < another_box:\n                return True\n            if box > another_box:\n                return False\n            return box in Mishka\n\n        def solve(Mishka):\n            i, j = 0, n - 1\n            while i < n:\n                if is_box_in_another_box(nums[i], nums[j]):\n                    nums[i], nums[j] = nums[j], nums[i]\n                else:\n                    i += 1\n            return nums\n        return solve(Mishka)\n\n@lc code=end\n"
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4"
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 3\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n\nTime Limit: 1 sec\n\nSample Input:\n\n3\n1 2 3\n\nSample Output:\n\n2\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n\nTime Limit: 1 sec\n\nSample Input:\n\n4\n4 2 4 3\n\nSample Output:\n\n1\n\n\n-----Constraints-----\n0 \u2264 a_{i} < 10^9\n\nTime Limit: 0 sec\n\nSample Input:\n\n1 2 3\n\nSample Output:\n\n2\n\n-----Constraints-----\n0 \u2264 a_{i} < 10^9\n\nTime Limit: 0 sec\n\nSample Input:\n\n1 2 3 4\n\nSample Output:\n\n2\n\n------Sample Output------\n\n2\n\n\n-----Sample Input-----\n\n2\n2 2 2\n\nSample Output:\n\n1\n\n-----Sample Output-----\n\n2\n\n\n-----Constraints-----\n0 \u2264 a_{i} \u2264 10^9\n\nTime Limit: 0 sec\n\nSample Input:\n\n1 2 3 4 5\n\nSample Output:\n\n1\n\n-----Sample Output-----\n\n2\n\n\"\"\""
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4 3') == '2'\nassert solution('4 2 4 3') == '2'\nassert solution('3') == '1'\nassert solution('4 2 4') == '1'\nassert solution('4 4') == '1'\n"
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 3\") == \"1\"\nassert solution(\"4 4 4\") == \"2\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 1e5\n1 <= a_i <= 10^9\n\n-----Time Limit-----\n\nO(n^2)\n\n\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin, stdout):\n        if not stdin:\n            stdout.append(str(len(set(map(int,stdout[0].strip().split())))))\n            return stdout\n\n        n = int(stdin.readline())\n        a_list = list(map(int,stdin.readline().strip().split()))\n\n        for i in range(n):\n            j = 1\n            for j in range(i,n):\n                if a_list[i] > a_list[j]:\n                    a_list[i], a_list[j] = a_list[j], a_list[i]\n\n            a_list[i] -= 1\n            a_list[j] -= 1\n        \n        for i in range(n):\n            stdout.append(str(a_list[i]))\n        \n        return stdout"
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin=input,\n    expected_output=0\n) == 0, \"The test cases are not passing\"\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('7') == 2\nassert solution('2') == 1\nassert solution('8') == 4\nassert solution('3') == 2\nassert solution('6') == 8\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n\nInput\n3\n2 5 2\n3 4 1\n\nOutput\n8\n\n\"\"\"\n\nimport sys\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 0\n\"\"\"\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2\\n') == 0, 'incorrect'\nassert solution('3\\n') == 1, 'incorrect'\nassert solution('4\\n') == 1, 'incorrect'\nassert solution('5\\n') == 2, 'incorrect'\nassert solution('6\\n') == 2, 'incorrect'\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"\"\"\n    for _ in range(int(input())):\n        n,l,d=map(int,input().split())\n        for i in range(1,n+1):\n            for j in range(1,i+1):\n                if l % j == 0 and l//j == i:\n                    d -= j\n        print(d)\n    \"\"\"\n    )\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2') == '0'\nassert solution('3') == '0'\nassert solution('4') == '0'\nassert solution('1') == '0'\nassert solution('5') == '0'\n"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1 1 1\") == \"1 1 1 1\"\nassert solution(\"1 0 1 1\") == \"1 0 1 1\"\nassert solution(\"1 1 1 1\") == \"1 1 1 1\"\nassert solution(\"1 0 1 1\") == \"1 0 1 1\"\nassert solution(\"1 1 1 1\") == \"1 0 1 1\"\n"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0 3 1 0 0 1 2\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 0 1 1\"\nassert solution(stdin) == \"1 1 1 0\"\nassert solution(stdin) == \"1 0 0 0\"\n"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"1 3 1 2 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 3 0\"\n\"\"\""
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0 2 3 0\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3 3 1\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 0 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 0 1 1\"\n"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"0 3 3 0\"\nassert solution(stdin) == \"1 1 1 0\"\nassert solution(stdin) == \"1 1 0 0\"\nassert solution(stdin) == \"1 0 1 0\"\nassert solution(stdin) == \"1 1 1\"\n"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('5 7') == '10'\nassert solution('3 3') == '0'\nassert solution('3 3 1') == '0 0 1'\nassert solution('3 3 1 1') == '0 0 1'\nassert solution('1 3 0') == '0 1 1'\n"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"2 3 2 2 3 2 3 1 3 3 3 3 3 3 2 2 2 2 3 3 3 3 3 2 2 3 2 3 3 2 2 2 3 3 3 3 3 3 3 2 2 3 2 3 2 3 2 3 3 3 2 2 3 3 2 3 2 2 3 3 3 2 2 3 3 3 2 2 2 3 3 3 3 2 2 3 2 3 3 2 3 2 3 3 3 3 3 3 2 2 3 3 2 3 2 3 3 2 2 3 2 3 3 2 3 3 2 3 3 2 2 2 3 3 3 2 2 3 3 3 2 3 3 2 3 3 3 2 2 3 3 2 3 2 3 3 3 2 3 2 3 3 3 2 2 3 2 3 3 2 3 3 2 3 3 2 3 2 3 3 3 3 2 3 3 2 3 2 3 3 3 2 3 3 2 3 3 3 2 2 3 3 2 3 3 2 3 2 3 3 3 3 2 3 2 3 3 3 2 3 2 3 3 2 3 2 3 3 3 2 3 2 3 3 3 2 2 3 3 3 2 3 3 3 2 3 2 3 3 3 2 2 3 3 3 3 2 2 3 3 3 2 3 2 3 3 3 2 2 3 3 3 2 3 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 3 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 3 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 3 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3 3 3 2 2 3"
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\")) == \"left\"\nassert solution(\" \") == \"right\"\nassert solution(\"[\") == \"balance\"\nassert solution(\"[\") == \"balance\"\nassert solution(\"[0]\") == \"balance\"\n"
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"[^1]\" + \"=^=\" + \"^\") == \"balance\"\nassert solution(\"[^1]\" + \"=\" + \"^\") == \"balance\"\nassert solution(\"[^1]\" + \"=\" + \"=\" + \"1\") == \"balance\"\nassert solution(\"[^1]\" + \"=\" + \"=\" + \"2\") == \"balance\"\nassert solution(\"[^1]\" + \"=\" + \"=\" + \"3\") == \"balance\"\n"
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"9===^==1\") == \"left\"\nassert solution(\"2==^7==\") == \"balance\"\nassert solution(\"41^52==\") == \"right\"\n\n\"\"\"\nimport math\nimport sys\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    https://leetcode.com/problems/string-to-integer-atoi/\n    \"\"\"\n\n    def intToRoman(self, num: int) -> str:\n        symbol = [\n            (1000, \"M\"),\n            (900, \"CM\"),\n            (500, \"D\"),\n            (400, \"CD\"),\n            (100, \"C\"),\n            (90, \"XC\"),\n            (50, \"L\"),\n            (40, \"XL\"),\n            (10, \"X\"),\n            (9, \"IX\"),\n            (5, \"V\"),\n            (4, \"IV\"),\n            (1, \"I\"),\n        ]\n        result = \"\"\n        for i in range(len(symbol)):\n            if num > symbol[i][0]:\n                num = num - symbol[i][0]\n            if num >= symbol[i][1]:\n                result += symbol[i][1]\n        return result\n"
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"left\"\n\n\n[Constraints]\n\n1 <= |stdin| <= 10^4\n\n[Time Limit]\n\n1 second\n\n\n[Example]\n\nInput\n=^==\n\nOutput\nbalance\n\nInput\n9===^==1\n\nOutput\nleft\n\nInput\n2==^7==\n\nOutput\nright\n\nInput\n41^52==\n\nOutput\nbalance\n\n\n[Constraints]\n\n1 <= |stdin| <= 10^4\n\n[Time Limit]\n\n1 second\n\n\n[Idea]\n\nHere, we'll have to consider the case that the number of digits for the lever is too high. \n\nThe idea here is that the number of digits for the lever is given as a pointer.\n\nFor each character, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 1, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 1, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not, if it is 1, we check if the i-th character is 0 or not, if it is 0, we check if the i-th character is 1 or not,"
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"[3, 7]\\\") == \"left\"\nassert solution(\\\"[1, 4]\\\") == \"left\"\nassert solution(\\\"[2, 3]\\\") == \"right\"\nassert solution(\\\"[4, 1]\\\") == \"balance\"\nassert solution(\\\"[4, 2]\\\") == \"left\"\n"
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2==^7==') == 'left'\nassert solution('2==^7==') == 'balance'\nassert solution('2==^7==') == 'right'\n\n\"\"\""
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"balance\"\nassert solution(stdin) == \"left\"\nassert solution(stdin) == \"right\"\nassert solution(stdin) == \"balance\"\nassert solution(stdin) == \"left\"\n"
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('2==^7==') == \"left\""
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"^==^\"\n) == \"left\"\n\nassert solution(\n    \"9==^==1\"\n) == \"left\"\n\nassert solution(\n    \"2==^7==\"\n) == \"right\"\n\nassert solution(\n    \"41^52==\"\n) == \"balance\"\n\nassert solution(\n    \"4==^7==\"\n) == \"balance\""
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"^^^^\") == \"left\"\nassert solution(\"^\") == \"right\"\nassert solution(\"=^\") == \"balance\"\n\"\"\"\nfrom math import ceil, sqrt\n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 10 8 6 11\",\n    \"3 10 8 6 11\") == \"0 4 1 5\"\nassert solution(\n    \"3 10 8 6 11\",\n    \"3 1 1 1\") == \"3\"\nassert solution(\n    \"3 3 1 1 1\",\n    \"3\") == \"1 1 1 1\"\nassert solution(\n    \"3 3 1 1 1\",\n    \"3 3 1 1 1\") == \"3 3 1 1 1\"\nassert solution(\n    \"3 3 1 1 1\",\n    \"2\") == \"0 1 1 1\"\n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3 10 8 6 11\") == 0\nassert solution(\"4 1 10\") == 4\nassert solution(\"4 1 10 3\") == 2\nassert solution(\"4 1 10 4\") == 1\nassert solution(\"4 1 10 5\") == 0\n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0\n\n\nTime Limit: 0.01s\nSpace Limit: 0\n\nclass Solution:\n    def cookPack(self, n: int, x: List[int]) -> int:\n        return [n-x[i] for i in range(len(x))]\n        \n        \n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(read().split(' ')) == '0'\n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"The correct output of the function does not match the expected output.\""
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 3 10 8 6 11\") == \"0 4 1\"\nassert solution(\"5 3 10 8 6 11\") == \"5 0 3\"\nassert solution(\"5 3 10 8 6 11\") == \"5 0 0\"\nassert solution(\"5 3 10 8 6 11\") == \"0 3 0\"\nassert solution(\"5 3 10 8 6 11\") == \"0 0 1\"\n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3 10 8 6 11\") == \"0 1 5\"\nassert solution(\"5 3 10 8 6 11\") == \"1 2\"\nassert solution(\"5 3 10 8 6 11\") == \"1 1\"\nassert solution(\"5 3 10 8 6 11\") == \"1 4\"\nassert solution(\"5 3 10 8 6 11\") == \"1 3\"\n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 4 4 9 9 6 4 8 2 1 10 8 9 10 4 10 6 2 9 1 10 4 5 3 4 5 4 3 5 2 10 6 4 2 5 6 3 4 6 1 4 5 10 7 4 5 10 3 9 5 10 5 3 2 3 1 10 4 10 5 4 10 5 10 10 4 10 5 3 2 5 5 4 4 5 3 3 4 5 4 5 4 5 5 10 7 5 3 4 5 1 5 9 10 3 4 4 5 4 5 5 4 5 5 5 9 10 2 10 7 10 3 9 3 10 3 10 4 6 3 3 10 5 5 10 7 5 4 10 3 5 3 5 5 5 5 3 5 2 10 10 9 5 4 4 5 3 5 10 10 3 4 5 3 5 3 4 4 10 4 6 3 5 4 4 4 3 5 3 10 5 10 5 3 10 5 2 4 5 4 5 5 10 5 10 9 5 4 9 10 4 10 5 10 5 4 10 2 5 3 5 3 4 3 10 3 4 3 6 5 3 3 5 5 3 4 10 3 4 6 4 6 3 3 5 3 10 5 3 10 4 2 5 4 4 4 5 2 3 5 4 3 4 10 3 2 5 10 5 4 4 4 5 4 5 5 4 3 4 5 10 4 4 10 3 10 5 5 5 4 10 3 10 2 5 5 3 10 4 4 3 10 4 10 3 4 6 3 10 3 10 3 5 5 3 10 3 4 3 4 10 3 5 5 3 3 10 3 4 3 4 5 3 10 3 5 5 5 3 10 2 5 3 5 3 3 10 3 5 2 10 3 10 3 10 4 5 6 3 10 3 10 3 4 10 3 5 10 2 10 5 5 3 3 10 3 10 2 10 3 4 10 2 4 5 10 4 10 2 4 3 4 2 3 10 2 3 10 3 5 10 5 4 3 4 3 4 5 3 10 5 2 3 5 10 3 4 5 5 10 3 10 10 2 10 2 3 4 10 3 2 3 2 10 10 5 10 3 4 6 5 5 4 10 2 3 5 2 3 5 2 3 4 4 3 2 3 10 2 3 3 4 5 3 4 3 4 5 3 10 2 4 3 5 4 5 3 10 3 4 3 5 3 10 3 2 3 5 4 2 3 2 10 4 10 2 10 3 10 3 2 10 10 3 4 4 6 10 2 10 3 4 10 3 2 3 3 3 10 4 10 4 10 3 10 4 3 10 2 10 3 10 3 10 3 10 4 2 4 10 2 3 10 2 3 4 4 2 10 2 3 2 10 2 3 2 10 2 4 10 3 2 10 3 10 2 3 10 2 3 10 3 2 10 3 2 10 3 2 10 3 10 2 3 2 10 3 2 10 3 2 10 2 3 2 2 10 2 3 10 3 2 10 2 3 2 10 2 3 2 10 2 3 2 10 2 3 2 10 2 3 2 10 2 3 2 10 2 3 2 10 2 3 2 10 2 3 10 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 12\nassert solution(2) == 24\nassert solution(1) == 1\nassert solution(5) == 12\nassert solution(10) == 24\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == '24'\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"24\""
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"-5 R 0 -5\") == \"10\"\nassert solution(\"-5 R 0\") == \"10\"\nassert solution(\"-5 R 0 5\") == \"10\"\nassert solution(\"-5 R 0 5 7\") == \"10\"\nassert solution(\"10 R 0\") == \"10\"\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"-5 R\") == 12\nassert solution(\"-5 B\") == 24\nassert solution(\"10 R\") == 11\nassert solution(\"10 B\") == 11\nassert solution(\"14 R\") == 12\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12\nprint('Example 1:')\nprint('Input : ')\nprint('n : 4')\nprint('x : 0')\nprint('c : -10')\nprint('Output :')\nprint(str(solution(stdin)))\n\nassert solution(stdin) == 24\nprint('Example 2:')\nprint('Input : ')\nprint('n : 3')\nprint('x : 0')\nprint('c : -10')\nprint('Output :')\nprint(str(solution(stdin)))\n\nassert solution(stdin) == 24\nprint('Example 3:')\nprint('Input : ')\nprint('n : 3')\nprint('x : 0')\nprint('c : -10')\nprint('Output :')\nprint(str(solution(stdin)))"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 12\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 12, \"output is incorrect\"\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('-5 R', ['-5 R', '0 P', '3 P', '7 B', '14 B', '16 B', '21 R', '32 R']) == 12\nassert solution('-5 R', ['-5 R', '0 P', '3 P', '7 B', '14 B', '16 B', '21 R', '32 R']) == 24\n\n\n\"\"\"\n\"\"\"\nfrom itertools import combinations, permutations\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution == 0, \"bug\"\n"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7, \"Error\""
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 24\n\nInput\n2\n\nOutput\n0\n"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 5\nassert solution(2) == 2\nassert solution(3) == 5\nassert solution(4) == 3\nassert solution(5) == 7\n\n\"\"\""
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(2) == 24\n\nInput\n2\n\nOutput\n2\n\nExplanation\nOne way to place all the pennants on the table is:\n\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\nNote: The first line of the input contains the number of tables in the company.\nThe second line contains the number of rows.\nThe third line contains the number of columns.\n\n\n--------Examples--------\nInput\n1\n\nOutput\n1\n\nExplanation\nOne way to place all the pennants on the table is:\n\n2 1\n1 2\n2 3\n1 3\n2 4\n2 5\n1 4\n1 5\n2 6\n2 7\n1 6\n2 8\n2 9\n1 9\n2 10\n2 11\n2 12\n2 13\n2 14\n2 15\n2 16\n2 17\n2 18\n2 19\n2 20\n2 21\n2 22\n2 23\n2 24\n2 25\n2 26\n2 27\n2 28\n2 29\n2 30\n2 31\n2 32\n2 33\n2 34\n2 35\n2 36\n2 37\n2 38\n2 39\n2 40\n2 41\n2 42\n2 43\n2 44\n2 45\n2 46\n2 47\n2 48\n2 49\n2 50\n2 51\n2 52\n2 53\n2 54\n2 55\n2 56\n2 57\n2 58\n2 59\n2 60\n2 61\n2 62\n2 63\n2 64\n2 65\n2 66\n2 67\n2 68\n2 69\n2 70\n2 71\n2 72\n2 73\n2 74\n2 75\n2 76\n2 77\n2 78\n2 79\n2 80\n2 81\n2 82\n2 83\n2 84\n2 85\n2 86\n2 87\n2 88\n2 89\n2 90\n2 91\n2 92\n2 93\n2 94\n2 95\n2 96\n2 97\n2 98\n2 99\n3 0\n3 1\n3 2\n3 3\n3 4\n3 5\n3 6\n3 7\n3 8\n3 9\n3 10\n3 11\n3 12\n3 13\n3 14\n3 15\n3 16\n3 17\n3 18\n3 19\n3 20\n3 21\n3 22\n3 23\n3 24\n3 25\n3 26\n3 27\n3 28\n3 29\n3 30\n3 31\n3 32\n3 33\n3 34\n3 35\n3 36\n3 37\n3 38\n3 39\n3 40\n3 41\n3 42\n3 43\n3 44\n3 45\n3 46\n3 47\n3 48\n3 49\n3 50\n3 51\n3 52\n3 53\n3 54\n3 55\n3 56\n3 57\n3 58\n3 59\n3 60\n3 61\n3 62\n3 63\n3 64\n3 65\n3 66\n3 67\n3 68\n3 69\n3 70\n3 71\n3 72\n3 73\n3 74\n3 75\n3 76\n3 77\n3 78\n3 79\n3 80\n3 81\n3 82\n3 83\n3 84\n3 85\n3 86\n3 87\n3 88\n3 89\n3 90\n3 91\n3 92\n3 93\n3 94\n3 95\n3 96\n3 97\n3 98\n3 99\n4 0\n4 1\n4 2\n4 3\n4 4\n4 5\n4 6\n4 7\n4 8\n4 9\n4 10\n4 11\n4 12\n4 13\n4 14\n4 15\n4 16\n4 17\n4 18\n4 19\n4 20\n4 21\n4 22\n4 23\n4 24\n4 25\n4 26\n4 27\n4 28\n4 29\n4 30\n4 31\n4 32\n4 33\n4 34\n4 35\n4 36\n4 37\n4 38\n4 39\n4 40\n4 41\n4 42\n4 43\n4 44\n4 45\n4 46\n4 47\n4 48\n4 49\n4 50\n4 51\n4 52\n4 53\n4 54\n4 55\n4 56\n4 57\n4 58\n4 59\n4 60\n4 61\n4 62\n4 63\n4 64\n4 65\n4 66\n4 67\n4 68\n4 69\n4 70\n4 71\n4 72\n4 73\n4 74\n4 75\n4 76\n4 77\n4 78\n4 79\n4 80\n4 81\n4 82\n4 83\n4 84\n4 85\n4 86\n4 87\n4 88\n4 89\n4 90\n4 91\n4 92\n4 93\n4 94\n4 95\n4 96\n4 97\n4 98\n4 99\n5 0\n5 1\n5 2\n5 3\n5 4\n5 5\n5 6\n5 7\n5 8\n5 9\n5 10\n5 11\n5 12\n5 13\n5 14\n5 15\n5 16\n5 17\n5 18\n5 19\n5 20\n5 21\n5 22\n5 23\n5 24\n5 25\n5 26\n5 27\n5 28\n5 29\n5 30\n5 31\n5 32\n5 33\n5 34\n5 35\n5 36\n5 37\n5 38\n5 39\n5 40\n5 41\n5 42\n5 43\n5 44\n5 45\n5 46\n5 47\n5 48\n5 49\n5 50\n5 51\n5 52\n5 53\n5 54\n5 55\n5 56\n5 57\n5 58\n5 59\n5 60\n5 61\n5 62\n5 63\n5 64\n5 65\n5 66\n5 67\n5 68\n5 69\n5 70\n5 71\n5 72\n5 73\n5 74\n5 75\n5 76\n5 77\n5 78\n5 79\n5 80\n5 81\n5 82\n5 83\n5 84\n5 85\n5 86\n5 87\n5 88\n5 89\n5 90\n5 91\n5 92\n5 93\n5 94\n5 95\n5 96\n5 97\n5 98\n5 99\n6 0\n6 1\n6 2\n6 3\n6 4\n6 5\n6 6\n6 7\n6 8\n6 9\n6 10\n6 11\n6 12\n6 13\n6 14\n6 15\n6 16\n6 17\n6 18\n6 19\n6 20\n6 21\n6 22\n6 23\n6 24\n6 25\n6 26\n6 27\n6 28\n6 29\n6 30\n6 31\n6 32\n6 33\n6 34\n6 35\n6 36\n6 37\n6 38\n6 39\n6 40\n6 41\n6 42\n6 43\n6 44\n6 45\n6 46\n6 47\n6 48\n6 49\n6 50\n6 51\n6 52\n6 53\n6 54\n6 55\n6 56\n6 57\n6 58\n6 59\n6 60\n6 61\n6 62\n6 63\n6 64\n6 65\n6 66\n6 67\n6 68\n6 69\n6 70\n6 71\n6 72\n6 73\n6 74\n6 75\n6 76\n6 77\n6 78\n6 79\n6 80\n6 81\n6 82\n6 83\n6 84\n6 85\n6 86\n6 87\n6 88\n6 89\n6 90\n6 91\n6 92\n6 93\n6 94\n6 95\n6 96\n6 97\n6 98\n6 99\n7 0\n7 1\n7 2\n7 3\n7 4\n7 5\n7 6"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == 6\nassert solution(\"6\") == 13\nassert solution(\"5\") == 6\nassert solution(\"4\") == 1\nassert solution(\"2\") == 1\n"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 24\nassert solution(4) == 32\nassert solution(3) == 6\nassert solution(1) == 1\nassert solution(4) == 2\n"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(2) == 12\nassert solution(3) == 12\nassert solution(4) == 6\nassert solution(5) == 24\nassert solution(6) == 24\n"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == 48\n\n\n\n>>> import sys\n>>> sys.setrecursionlimit(10000)\n>>> #\n>>> def solution(stdin: str) -> str:\n    pass\n\nassert solution(\"5\") == 6\n"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '2'\nassert solution('4') == '3'\nassert solution('5') == '2'\n"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2') == '24'\nassert solution('5') == '27'\nassert solution('3') == '16'\nassert solution('6') == '12'\nassert solution('4') == '3'\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, \"aab\"), \"3\"\nassert solution(10, \"abcdeabcde\"), \"10\"\nassert solution(20, \"abcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcdeabcde"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"4 3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == (6, 3, 3, 4, 2)\nassert solution(stdin) == (8, 4, 3, 2, 2)\nassert solution(stdin) == (9, 4, 3, 3, 1, 1, 1, 1, 1, 1, 1)\nassert solution(stdin) == (16, 7, 5, 4, 3, 1, 1, 1, 1, 1, 1, 1)\nassert solution(stdin) == (17, 7, 5, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == \"1001\"\nassert solution(stdin) == \"1001\"\nassert solution(stdin) == \"1001\"\nassert solution(stdin) == \"1001\"\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aab\") == 2\nassert solution(\"aaa\") == 3\nassert solution(\"a\") == 3\nassert solution(\"abc\") == 3\nassert solution(\"abcde\") == 401\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '3'\n\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\n\nassert solution(stdin) == '2'\n\n\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 2 3 4 5\"\nassert solution(input()) == \"3 2 1 3\"\nassert solution(input()) == \"2 3 1 4\"\nassert solution(input()) == \"1 1 2 3 4 5\"\nassert solution(input()) == \"1 3 2 5 4 1\"\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5\") == \"1 2 3 4 5\"\nassert solution(\"6 5 1 3\") == \"5 6 1 3\"\nassert solution(\"6 5 1 4\") == \"5 6 1 4\"\nassert solution(\"6 5 2 1\") == \"5 6 2 1\"\nassert solution(\"6 5 2 3\") == \"5 6 2 3\"\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\" or solution(stdin) == \"-1\"\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"5 6 1 2 3 4 5 1 3 4 5\"\n) == \"1 2 4 5 3 6\"\nassert solution(\n    \"6 5 1 2 3 4 5 1 3 4 5\"\n) == \"1 2 3 4 5\"\nassert solution(\n    \"5 6 5 4 3 1\"\n) == \"1 2 3 4 5\"\nassert solution(\n    \"5 6 5 4 3 1 2\"\n) == \"1 2 3 4 5\"\nassert solution(\n    \"5 6 5 4 3 1 2 3 4 5\"\n) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(str(stdin)) == \"1 2 3 4 5\"\nassert solution(str(stdin)) == \"1 2 3 4 5 6\"\nassert solution(str(stdin)) == \"1 2 3 4 5 6 1\"\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1 2 3 4 5 -1\"\n\npass\nimport sys"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution == \"1 2 3 4 5\"\nassert solution == \"1 2 3 4 5 3\"\nassert solution == \"2 3 4 1 5\"\nassert solution == \"2 3 4 1 5 3\"\nassert solution == \"2 3 4 1 5 3 4\"\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution == '-1'\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(['1 2 3 4 5', '2 3 4 5 1', '3 4 5 1 2', '4 5 1 2 3', '5 1 2 3 4', '6 1 3 4 5']), 'First line contains correct number of numbers!'\nassert solution(['1 2 3 4 5', '2 3 4 5 1', '3 4 5 1 2', '4 5 1 2 3', '5 1 2 3 4', '6 1 3 4 5']), 'Second line contains correct number of numbers!'\nassert solution(['1 2 3 4 5', '2 3 4 5 1', '3 4 5 1 2', '4 5 1 2 3', '5 1 2 3 4', '6 1 3 4 5']), 'Third line contains correct number of numbers!'\nassert solution(['1 2 3 4 5', '2 3 4 5 1', '3 4 5 1 2', '4 5 1 2 3', '5 1 2 3 4', '6 1 3 4 5']), 'Fourth line contains correct number of numbers!'\nassert solution(['1 2 3 4 5', '2 3 4 5 1', '3 4 5 1 2', '4 5 1 2 3', '5 1 2 3 4', '6 1 3 4 5']), 'Fifth line contains correct number of numbers!'\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4 1 3\"\nassert solution(input()) == \"2 2 1\"\nassert solution(input()) == \"1 2 2\"\nassert solution(input()) == \"1 3 1\"\nassert solution(input()) == \"1 5 1\"\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"\"\"5\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3 3\") == \"1 1 3\"\nassert solution(\"5 3 5\") == \"1 1 1\"\nassert solution(\"5 1 1\") == \"1 0 0\"\nassert solution(\"1 2 2\") == \"1 0 0\"\nassert solution(\"1 2 1\") == \"1 0 1\"\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 1 3'\n\nassert solution(stdin) == '3 1 3'\n\nassert solution(stdin) == '3 1 3'\n\nassert solution(stdin) == '3 1 3'\n\n-----Guidelines-----\n\nExercise\n\n1. Write an algorithm called paintable_area() that takes a list of lists of the form: [rows, columns, cells] and returns the area of the rectangle.\n\n\n\n2. Write an algorithm called paintable_area_2() that takes a list of lists of the form: [rows, columns, cells] and returns the area of the rectangle.\n\n\n\n3. Write an algorithm called paintable_area_3() that takes a list of lists of the form: [rows, columns, cells] and returns the area of the rectangle.\n\n\"\"\"\n\n\nfrom typing import List"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"1 1 3\"\nassert solution(input()) == \"2 2 1\"\nassert solution(input()) == \"1 3 1\"\nassert solution(input()) == \"1 5 1\"\nassert solution(input()) == \"2 1 1\"\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin=\n    \"3 3 3\\n1 1 3\\n1 3 1\\n1 2 1\\n1 3 1\\n1 5 1\\n2 1 1\\n2 2 1\\n1 1 0\\n2 1 2\\n3 1 1\\n3 5 1\\n\"\n) == \"1 1 1\"\nassert solution(\n    stdin=\n    \"5 3 5\\n1 1 1\\n1 3 1\\n1 5 1\\n2 1 1\\n2 2 1\\n3 1 1\\n3 5 1\\n\"\n) == \"1 0 0\"\nassert solution(\n    stdin=\n    \"5 3 5\\n1 1 1\\n1 3 1\\n1 5 1\\n2 1 1\\n2 2 1\\n3 1 1\\n3 5 1\\n\"\n) == \"0 0 0\"\nassert solution(\n    stdin=\n    \"1 1 1\\n1 2 2\\n1 3 3\\n2 3 3\\n2 4 4\\n3 4 4\\n3 5 5\\n\"\n) == \"0 0 0\"\nassert solution(\n    stdin=\n    \"1 2 2\\n1 3 3\\n2 4 4\\n3 4 4\\n3 5 5\\n\"\n) == \"0 1 0\"\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3 3\"), \"3 3 3\"\nassert solution(\"5 5 5\"), \"5 5 5\"\nassert solution(\"5 5 4\"), \"5 5 4\"\nassert solution(\"5 5 2\"), \"5 5 2\"\nassert solution(\"5 5 1\"), \"5 5 1\"\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 1 3 1 1 1\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"2 1 1\"\nassert solution(stdin) == \"0 1 1\"\nassert solution(stdin) == \"0 1 1 1\"\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 0 1\"\nassert solution(stdin) == \"1 0 1\"\nassert solution(stdin) == \"1 1 0\"\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"4 4 4\"\nassert solution(stdin) == \"5 5 5\"\n"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input: str) == '26'\n[1 1 2 2 3 3]\n[2]\n\n\n[Image]\n\n[Image]\n"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('Input: '), 'Input string is not correct'\nassert solution('Output: '), 'Output string is not correct'\nassert solution('Input: 1 1 3 4 5 8 10 12 16 19 23 24 27 28 30 31 32 33 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 95 96 97 98 99 100 101 110 111 120 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 143 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 190 194 195 196 196 197 198 199 200 201 202 203 204 205 206 207 208 208 210 210 211 212 212 213 213 214 215 216 217 218 219 220 220 221 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 245 244 245 246 247 248 249 250 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 275 275 276 277 278 279 280 281 282 283 284 285 286 287 287 288 289 290 291 291 293 294 295 295 296 297 298 299 299 300 301 302 303 303 304 305 306 308 308 309 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310 311 310"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '26'\n[Good]\n"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '20'\n\nOutput\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nThe first line contains a single integer $n$, the number of sticks Alexey got as a present.\n\nThe second line contains $n$ integers $a_1, \\ldots, a_i$ ($1 \\le a_i \\le 10\\,000$) \u2014 the lengths of the sticks.\n\nOutput\n\n[output format]\n\nA square number of the length of the tree.\n\n[output] string\n\nThe solution string.\n\nConstraints\n1 \u2264 n \u2264 10^4\n1 \u2264 a_i \u2264 10^4\n\"\"\"\nimport math"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"25\"\n\n\n[Challenge]\nThere are a total of $100\\,000$ sticks. Alexey wants to grow a tree this way.\n\n\n\n[Reminder]\nWe want to count the number of sticks to be aligned first (horizontally). We will use the formula:\n\n\n\n$a_i$ = \\sum_{i=0}^{N} \\left( \\text{if} $i=0 \\le j \\le N \\right).\n\n\n[Input]\n\nThe first line contains an integer $N$ (\\,000\\,000$) \u2013 the number of sticks Alexey got as a present.\n\nThe second line contains $N$ integers $a_1, \\ldots, a_i$ (\\,000\\,000$) \u2013 the lengths of the sticks.\n\n\n[Output]\n\nPrint one integer\u00a0\u2014 the squares of the largest possible distances from $(0, 0)$ to the tree end.\n\n\n[Example]\n\nInput\n\n3\n2 4\n1 2\n1 3\n\nOutput\n\n3\n\n\n[Constraints]\n\n1\u2264N\u226410^5\n1\u2264a_i\u2264100\n\n\n\n[Note]\n\nThe following pictures show optimal trees for example tests. The squared distance in the first example equals $5 \\cdot 5 + 1 \\cdot 1 = 26$, and in the second example $4 \\cdot 4 + 2 \\cdot 2 = 20$.\n\"\"\"\nimport math\n"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3\") == \"26\", \"The solution should be $26$.\"\nassert solution(\"4\") == \"20\", \"The solution should be $20$.\"\nassert solution(\"4\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n1\\n"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"26\""
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"26\"\n"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"40\"\nassert solution(stdin) == \"20\"\n"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 26\nassert solution(stdin) == 20\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input().split()\n) == \"4\"\n\nassert solution(\n    input().split()\n) == \"3\"\n\nassert solution(\n    input().split()\n) == \"4\"\n\nassert solution(\n    input().split()\n) == \"3\"\n\nassert solution(\n    input().split()\n) == \"5\""
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '6 4 10'\nassert solution(stdin) == '4 5 4'\nassert solution(stdin) == '4 4 5 1'\nassert solution(stdin) == '5'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"6 4 10\", \"3 1 1 1 2 2\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\"]) == \"4\"\nassert solution([\"4 5 4\", \"4 4 5 1\", \"15\", \"9\", \"13\", \"6\", \"1\", \"2\", \"3\", \"4\", \"5\", \"1\"]) == \"5\"\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('6 4 10') == '4'\nassert solution('4 5 4') == '3'\nassert solution('4 4 5 1') == '3'\nassert solution('4 4 5 1 2') == '4'\nassert solution('4 4 5 1 3') == '4'\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"6\", \"4\", \"4\", \"2\", \"3\", \"4\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"3\"\nassert solution([\"5\", \"3\", \"3\", \"4\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]) == \"4\"\nassert solution([\"7\", \"7\", \"7\", \"8\", \"8\", \"9\", \"9\", \"10\", \"10\", \"11\", \"11\", \"12\"]) == \"9\"\nassert solution([\"4\", \"1\", \"3\", \"1\", \"1\", \"1\", \"1\", \"3\", \"1\", \"1\"]) == \"5\"\nassert solution([\"2\", \"6\", \"1\", \"2\", \"3\", \"4\", \"3\", \"1\", \"2\", \"4\"]) == \"4\"\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '9'\nassert solution(stdin) == '10'\nassert solution(stdin) == '13'\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    stdin=input,\n    solution_input
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"10\""
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"024\", \"The solution is not correct\"\n"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '024'\n\"\"\"\n\n\nclass Solution:\n    def solution(self, n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 0\n        elif n > 2:\n            return self.solution(n - 1) + self.solution(n - 2)\n"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1,1) == '0142'\nassert solution(2,9) == '024'\nassert solution(4,4) == '0142'\n\"\"\"\n\nclass Solution:\n    def display(self, num):\n        # write code here\n        # print(num)\n        for i in range(num, 0, -1):\n            print(i, end=' ')\n            \n        return ''\n    def lock(self, num: int, d: int) -> str:\n        if d == 0:\n            return '0'\n        elif d == 1:\n            return '1'\n        elif d == 2:\n            return str(num)\n        else:\n            d_list = [str(num * 10 + i) for i in range(10)]\n            d_list.sort(key=lambda x: int(x), reverse=True)\n            \n            for i in range(len(d_list)):\n                if int(d_list[i]) == 1:\n                    return str(num * 10 + i)\n            return '0'"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"024\"\nassert solution(input()) == \"0142\"\nassert solution(input()) == \"0342\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"024\"\n"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3) == \"0142\", 'incorrect return value'"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '024'\n\"\"\"\n\nclass Solution:\n    def display(self, num):\n        print(num)\n\n    def next_digit(self, num):\n        digs = num % 10\n        num = num // 10\n        \n        if (digs - 1) <= 3:\n            self.display(num)\n        else:\n            self.display(num*9 + (digs - 1))\n        \n        return digs\n\n    def check(self, num):\n        if num == 0:\n            return True\n        digs = self.next_digit(num)\n        return num == 9 * digs or num == 9 * (digs + 1)\n        \n        \n        \n    def display(self, num):\n        if num == 0:\n            return\n        if not self.check(num):\n            return\n        print(num, end=' ')\n        self.display(num - 1)\n        \n        \n"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin=\n    \"3\\n579\\n9\\n7\\n3\\n\"\n) == \"024\"\nassert solution(\n    stdin=\n    \"4\\n2015\\n9\\n7\\n3\\n\"\n) == \"0142\"\nassert solution(\n    stdin=\n    \"5\\n214\\n6\\n\"\n) == \"1\"\nassert solution(\n    stdin=\n    \"0\\n\"\n) == \"0\"\nassert solution(\n    stdin=\n    \"13\\n514\\n9\\n6\\n\"\n) == \"13\"\n"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(3, \"579\") == \"024\", \"The result is wrong\"\nassert solution(4, \"2014\") == \"0142\", \"The result is wrong\"\n"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"024\""
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 999\") == \"500000.000000000000000000000000000000\"\nassert solution(\"2 1000\") == \"400000.000000000000000000000000000000\"\nassert solution(\"2 1001\") == \"400000.000000000000000000000000000000\"\nassert solution(\"2 1002\") == \"400000.000000000000000000000000000000\"\nassert solution(\"2 1003\") == \"400000.000000000000000000000000000000\"\n"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 999', 1) == '500000'\nassert solution('2 1000', 1) == '400000'\nassert solution('2 1001', 1) == '400000'\nassert solution('2 999', 2) == '400000.000000000000000000000000000000'\nassert solution('2 1000', 2) == '400000.000000000000000000000000000000'\n"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"500000.000000000000000000000000000000\"\nassert solution(stdin) == \"500.000000000000000000000000000000\"\n\n'''\n\nimport math"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '8'\nassert solution(stdin) == '8'\nassert solution(stdin) == '5'\nassert solution(stdin) == '1000'\n"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"500000.000000000000000000000000000000\"\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 999\") == \"500000.000000000000000000000000000000\"\nassert solution(\"2 1000\") == \"400.000000000000000000000000000000\"\nassert solution(\"2 10000\") == \"400.000000000000000000000000000000\"\nassert solution(\"2 100000\") == \"400.000000000000000000000000000000\"\n"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"500000.000000000000000000000000000000\"\n"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"500000.000000000000000000000000000000\""
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 999\") == 500000\nassert solution(\"2 1000\") == 0\nassert solution(\"2 999\") == 0\nassert solution(\"2 999\") == 0\nassert solution(\"2 999\") == 0\n"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 999') == '500000.000000000000000000000000000000'\nassert solution('2 1000') == '500000.000000000000000000000000000000'\nassert solution('2 1000') == '500000.000000000000000000000000000000'\nassert solution('2 1000') == '500000.000000000000000000000000000000'\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 2\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 1 1 3 2') == '1'\nassert solution('1 1 1 1 2') == '0'\nassert solution('1 1 3 2') == '0'\nassert solution('2 2 2 2 2') == '0'\nassert solution('3 1 2 2 1') == '0'\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == 0\n\n\n-----Constraints-----\n1 <= stdin.length <= 5000\nstdin.length <= n\n1 <= t_i <= 3\nt_i >= 1\nt_i <= n\n\"\"\""
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 5\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 1 1 3 1 3 2 1 2\") == \"2\"\nassert solution(\"1 2 1 3 1 4 1 3 1\") == \"1\"\nassert solution(\"1 1 1 2\") == \"1\"\nassert solution(\"2 2 1 1 1 2 2 2 1 2\") == \"1\"\nassert solution(\"2 2 1 2 2 1 2 2 2 1 1 1 1\") == \"1\"\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('010110') == '00'\nassert solution('000100') == '0'\nassert solution('0010000') == '1'\nassert solution('0001101') == '2'\nassert solution('0001011') == '2'\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2\"\n'''\nimport sys\ninput = sys.stdin.readline\nfrom collections import Counter"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"2\"\nassert solution(inp) == \"3\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"5\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"3\"\n\n\"\"\"\nimport math\nimport sys"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"5 7\") == \"3\"\nassert solution(\"10 10\") == \"4\"\nassert solution(\"5 10\") == \"5\"\nassert solution(\"10 10\") == \"4\"\nassert solution(\"5 10\") == \"4\"\n"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"4\""
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == str(5)\nassert solution(inp) == str(3)\nassert solution(inp) == str(1)\nassert solution(inp) == str(4)"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 7\") == \"3\"\nassert solution(\"10 10\") == \"4\"\nassert solution(\"5 10\") == \"5\"\nassert solution(\"10 10\") == \"4\"\n\n\n-----Solution-----"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\n\n\n[input]\n\nAlyona wants to put a bottle on a shelf.\n\n\n\n[output]\n\nAlyona can put a bottle on a shelf if the shelf is at least as tall as the bottle. If he does not have enough space at the shelf, then Alyona cannot put the bottle.\n\n\n\n[input]\n\nAlyona wants to put a bottle on a shelf.\n\n\n\n[output]\n\nAlyona can put a bottle on a shelf if the shelf is at least as tall as the bottle. If he does not have enough space at the shelf, then Alyona cannot put the bottle."
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"\"\"5 7\n2 3 5 4 1\"\"\") == \"3\"\nassert solution(\"\"\"10 10\n9 1 1 1 1 1 1 1 1 1\n\"\"\") == \"5\"\nassert solution(\"\"\"10 10\n3 1 4 2 4\n\"\"\") == \"5\"\nassert solution(\"\"\"10 10\n9 1 1 1 1 1 1 1 1 1\n\"\"\") == \"3\"\nassert solution(\"\"\"10 10\n9 1 1 1 1 1 1 1 1 1\n\"\"\") == \"5\"\n"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 5 4 1\") == \"3\"\nassert solution(\"10 10\") == \"5\"\nassert solution(\"9 1 1 1 1 1 1 1 1 1\") == \"4\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == \"4\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1\") == \"5\"\n"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"9\"\nassert solution(\"2 2 3 2 4 2 1 2 2\") == \"5\"\nassert solution(\"5 3 5 5\") == \"5\"\nassert solution(\"4 4 4 4 4 4 4 4 4 4 4 4\") == \"3\"\nassert solution(\"3 3 3 3 2\") == \"3\"\n"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"5 -1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 -1\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 2 3 4 1\\n1 2 3 4 5\\n1 2 3 4 5\\n2 3 1 1 1\\n2 3 1 1 1\\n2 3 1 1 1\\n2 3 1 1 1') == '1\\n1 5\\n4 7'\nassert solution('2 3 1 1 1\\n2 3 1 1 1\\n2 3 1 1 1\\n2 3 1 1 1') == '-1'\nassert solution('2 3 1 1 1\\n2 3 1 1 1\\n2 3 1 1 1\\n2 3 1 1 1') == '1\\n2\\n3 7'"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input(\"1 2 3 4\")) == \"2\"\nassert solution(input(\"1 2 1 3\")) == \"1\"\nassert solution(input(\"1 1 1 1\")) == \"-1\"\n"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '1 5'\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"-1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1 5\"\nassert solution(input()) == \"1 5 6\"\nassert solution(input()) == \"1 5 6 7\"\n"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\", \"1\"]) == \"-1\"\n\n------Explanation-----\n\nThe input is:\n\n0\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\n\nInput\n5\n1 2 3 4 1\n\nOutput\n1\n1 5\n\n\"\"\"\n\nimport sys\nimport math\n\nn = int(input())\nlst = list(map(int, input().split()))\n\ncount = 0\nmax_good_segments = 0\n\nfor i in range(0, len(lst) - 1):\n    if lst[i] == lst[i + 1]:\n        count += 1\n    else:\n        if count > max_good_segments:\n            max_good_segments = count\n        count = 0\n\nprint(max_good_segments)\n"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"1 5\"\nassert solution(inp) == \"-1\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '-1'\nassert solution(input()) == '1 5'\nassert solution(input()) == '1 1 5'"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('2 3 2'), '2'\nassert solution('3 2'), '3'\nassert solution('3 3'), '3'\nassert solution('3 2'), '2'\nassert solution('3 2'), '3'\n"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10\n0 \u2264 m \u2264 100\n\n------Time Limit: O(n^2)\n------Space: O(n)\n'''\n\nfrom collections import deque\nimport sys"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\nassert solution(input) == \"No\"\n"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('0') == 'Yes'\nassert solution('1') == 'Yes'\nassert solution('2') == 'Yes'\nassert solution('3') == 'Yes'\nassert solution('4') == 'Yes'\n"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 'Yes'\n\"\"\"\n\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\nfrom math import sqrt\n"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\"\n\n\nExplanation\nInput\n3 3\n>>>>\n>>>>\n>>>>\n\nOutput\nYes\n1 1 1 1 1 \n\nInput\n3 4\n>>>\n<<<\n>>>\n\nOutput\nNo\n\nInput\n3 3\n=\n=\n=\n\nOutput\nNo\n\nThe number of numbers are the same.\n\nThe table is contradictory\u00a0\u2014 there is no possible evaluation of the dishes that satisfies it.\n\n\n-----Solution-----\n\nInput\n3 3\n>>>>\n>>>>\n>>>>\n\nOutput\nYes\n1 1 1 1 1 \n\nInput\n3 4\n<<<\n<<<\n\nOutput\nNo\n\nInput\n3 3\n=\n=\n=\n\nOutput\nNo\n\nThe numbers are the same.\n\nThe table is contradictory\u00a0\u2014 there is no possible evaluation of the dishes that satisfies it.\n\n\n\n\n-----Coding Comment-----\nWe have added a line of code to make a mistake (the line \u00a0of code that will be interpreted as a test case) and we are not interested in how it will be interpreted. We do not want to introduce ourselves into the actual problem.\n\nThis is because it is a mistake and we are not interested in the task we are looking to solve.\n\nWe only want to explain how the task will be solved, we want to solve it in a specific language.\n\nWe want to make sure the task is marked as \"correct\".\n\nWe want to solve it in a specific language, not all the languages are translated into a standard English language.\n\nIf we wanted to solve it in a specific language, we would like to make sure that it was translated in the correct language in the original language, and that the language of the translation is correct.\n\nWe are also interested in implementing the errors that can be identified. We don't want to identify some errors, it is more difficult to identify errors that we do not know how to solve.\n\nWe are interested in identifying some errors. We want to solve the problem in a specific language, not all the languages are translated into a standard English language, so we want to know how to translate the problem in a specific language.\n\nWe can find out which language has the minimal number of possible errors.\n\n\n\n-----Language Interpreter-----\nLet us add some code to our program that calculates the number of possible errors.\n\nWe want to calculate the number of possible errors, so we will store the number of possible errors in a variable called \"nErrors\".\n\nLet us look at the language: English.\n\nTherefore, we know that the language is English and the number of errors is nErrors.\n\nLet us look at the language: English.\n\nTherefore, we know that the language is English and the number of possible errors is nErrors.\n\nLet us look at the language: English.\n\nTherefore, we know that the language is English and the number of possible errors is nErrors.\n\nHere, we want to count the number of possible errors, which means, if we start at 0, we get the wrong answer.\n\nNow, we have to write a function called \"nErrorCorrection\" that counts the number of possible errors and returns the correct answer.\n\n\n\n\"\"\"\n"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\n\nInput\n3 4\n>>>>\n>>>>\n>>>>\n\nOutput\nYes\n3 1 3 \n2 2 2 \n\nInput\n3 3\n>>>\n<<<\n>>>\n\nOutput\nYes\n3 1 3 \n2 2 2 \n\n\"\"\"\n\n\nn, m = map(int, input().split())\nd = [[None] * m for _ in range(n)]\n\nfor i in range(n):\n    d[i] = list(map(int, input().split()))"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4\") == \"Yes\", \"Error\"\nassert solution(\"3 3\") == \"No\", \"Error\"\nassert solution(\"3 2\") == \"No\", \"Error\"\nassert solution(\"3 3\") == \"Yes\", \"Error\"\nassert solution(\"3 2\") == \"Yes\", \"Error\"\n"
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution == '5 4 3 5 5', 'incorrect input'"
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5 4 0 5 5'\n\"\"\""
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == \"5 4 3 5 -1\"\n"
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5 4 0 5 5'"
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"5 4 3 5 5\"\n"
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 3 1\") == \"5 4 3 5\"\nassert solution(\"5 3 1\") == \"5 4 0 5 5\"\nassert solution(\"5 3 1\") == \"5 1 4 5 5\""
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"5 4 3 5 5\"\nassert solution(inp) == \"5 4 3 5 -1\"\nassert solution(inp) == \"5 0 1\"\nassert solution(inp) == \"5 0 -1\"\nassert solution(inp) == \"5 0 2\"\n"
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '5 4 3 5 -1'\n"
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5 4 3 5 -1'\n\"\"\"\n\n\nclass Solution:\n    def search(self, arr: int, x: int) -> int:\n        # \uc624\ub984\ucc28\uc21c\n        arr.sort()\n\n        n = len(arr)\n        left, right = 0, n - 1\n\n        while left <= right:\n            mid = (left + right) // 2\n            if x == arr[mid]:\n                return mid\n            elif arr[mid] < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1\n"
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0, 0, 5, 5, 10, 5, 5, 5) == 12\nassert solution(0, 0, 1, 1, 10, 1, 1, 1) == 10\nassert solution(0, 0, 1, 2, 10, 1, 1, 1) == -1\nassert solution(0, 0, 1, 1, 10, 1, 1, 1) == -1\nassert solution(0, 0, 1, 1, 10, 1, 1, 1) == -1\n"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '4'\n\"\"\"\n"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('') == ''\n"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '2'\n\nassert solution(stdin) == 'STRIKE'\nassert solution(stdin) == 'STRIKE'\n\nassert solution(stdin) == 'STRIKE'\n"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4, \"Wrong output\"\n'''"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == 4\n\"\"\""
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\"\"\""
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('5 5 4') == '4'\nassert solution('2 5 4') == '1'\nassert solution('2 5 2') == '0'\nassert solution('2 5 1') == '0'\nassert solution('2 1') == '0'\n"
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\n\nprint(solution(stdin))\n"
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5,\n0 \u2264 r \u2264 10^9,\n0 \u2264 avg \u2264 min(r, 10^6)\n\nInput\n3\n4 4 5\n3 4 4 4\n2 5 2\n4 3 2\n5 2 5\n\nOutput\n3\n\nInput\n2\n2 2\n2 5\n\nOutput\n0"
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"4\"\n"
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0,'stdin should be solution(stdin)'\n"
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 2\") == \"0\"\nassert solution(\"3 2\") == \"0\"\nassert solution(\"3 2\") == \"1\"\nassert solution(\"3 2\") == \"2\"\nassert solution(\"3 2\") == \"1\"\n"
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4, \"Number of students: n, r, avg, minimum score must be a multiple of 4\"\nassert solution(stdin) == 1, \"Number of students: n, r, avg, minimum score must be a multiple of 4\""
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nInput\n2 5 4\n5 2\n5 2\n\nOutput\n4\n\nInput\n2 5 4\n5 2\n5 2\n\nOutput\n0\n"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100100\"\nassert solution(stdin) == \"100100\"\n\nInput\n2\n3\n45\n\nOutput\n150\n\nInput\n5\n7\n2\n4\n\nOutput\n150\n\ninput\n2\n5\n8\n8\n\nOutput\n10\n\ninput\n8\n4\n4\n\nOutput\n10\n\ninput\n3\n1\n1\n\nOutput\n2\n\ninput\n6\n1\n3\n\nOutput\n4\n\nInput\n4\n\nOutput\n2\n\ninput\n2\n5\n4\n\nOutput\n2\n\nInput\n5\n12\n\nOutput\n5\n\n'''"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"100100\"\n\n-----Constraints-----\n\n1 <= L <= 10^5\n1 <= A <= 10^{100 000}\n\nTime Limit: O(N)\nSpace Limit: O(1)\n\n-----Notes-----\n\nBrute force approach: O(N^2)\n"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, \"123456\") == 124124\nassert solution(3, \"12345\") == 100100\n"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3\") == \"124124\", \"Expected output: 3\"\nassert solution(\"3 1\") == \"124124\", \"Expected output: 3 1\"\nassert solution(\"1 1\") == \"1\", \"Expected output: 1 1\"\nassert solution(\"12345\") == \"100100\", \"Expected output: 100100\"\n"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"100100\"\nassert solution(input()) == \"100101\"\nassert solution(input()) == \"123456\"\n"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"100100\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 1e5\n1 <= L <= 10^5\n1 <= A <= 10^100\n\nInput\n\n1\n123456\n\nOutput\n\n124124\n\nInput\n\n1\n12345\n\nOutput\n\n100100\n\n-----Usage-----\npython3 sol.py <file>\n\n'''"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"100100\"\nassert solution(input()) == \"124124\"\nassert solution(input()) == \"100100\""
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"124124\"\n\n\n-----IMPORTANT-----\n\nIn our case, the smallest positive integer with period L = 3 is $L$ = 3, with digits 1, 2,..., and 9.\n\nIn our case, the smallest positive integer with period L = 3 is $L$ = 3, with digits 1, 2,..., and 9.\n\nIn this case, for example, if $L = 3$, there are $L^3 = 6$, $L^4 = 6$, and $L^5 = 6$.\n\nIf $L = 4$, there are $L^4 = 24$, $L^5 = 120$, and $L^6 = 120$.\n\nIf $L = 5$, there are $L^5 = 25$, $L^6 = 100$, and $L^7 = 100$.\n\nIf $L = 6$, there are $L^6 = 400$, $L^7 = 250$.\n\nIf $L = 7$, there are $L^7 = 600$, $L^8 = 600$ and $L^9 = 400$.\n\nThe smallest positive integer with period L = 4 is $L$ = 4, with digits 1, 2,..., and 9.\nThe smallest positive integer with period L = 5 is $L$ = 5, with digits 1, 2,..., and 9.\nThe smallest positive integer with period L = 6 is $L$ = 6, with digits 1, 2,..., and 9.\nThe smallest positive integer with period L = 7 is $L$ = 7, with digits 1, 2,..., and 9.\n\n\n-----PART 1-----\n\nThe problem is to write a program that reads a number from the user.\n\nIf the input is a positive integer, it should be written as a string such that the length is $L$ (1 \\leq L \\leq 10^5).\n\nIf the input is a negative integer, it should be written as a string such that the length is $L$ (1 \\leq L \\leq 10^5).\n\nIf the input is zero or less, it should be written as a string such that the length is $L$ (1 \\leq L \\leq 10^5).\n\nExample\n\nThe input is 1234, the output should be \"1234\".\n\nThe input is 12, the output should be \"12\".\n\nThe input is -1, the output should be \"-1\".\n\nThe input is 0, the output should be \"0\".\n\n\n-----PART 2-----\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\n\n-----Example 1-----\n\nInput:\n\n6\n\nOutput:\n\n3\n\n------PART 2---------\n\nthe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\n\nInput:\n\n1234\n\nOutput:\n\n34\n\n------PART 2---------\n\nthe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\n\n\nInput:\n\n0\n\nOutput:\n\n0\n\n\n\n-----Example 2-----\n\nInput:\n\n-1\n\nOutput:\n\n-1\n\n\n------PART 2---------\n\nthe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\n\nInput:\n\n-10\n\nOutput:\n\n-1\n\n------PART 2---------\n\nthe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\n\nInput:\n\n-2\n\nOutput:\n\n-1\n\n------PART 2---------\n\nthe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\n\n\nInput:\n\n-10\n\nOutput:\n\n0\n\n------PART 2---------\n\nthe program should print the smallest positive integer smaller than $L$ that is periodic with digits from 1 to 9.\nThe program should print the smallest positive integer smaller than $L$ that is periodic with digits from"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"123456\") == \"100100\"\nassert solution(\"12345\") == \"100100\"\nassert solution(\"100100\") == \"100100\"\n"
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 100100\n\"\"\""
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\\nr\\nb\") == 1\nassert solution(\"5\\nrb\\nb\") == 2\nassert solution(\"3\\nbr\") == 0\nassert solution(\"3\\nbr\") == 0\nassert solution(\"3\\nr\") == 2\n"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n\n-----Constraints-----\n0 <= stdin.length <= 100\n0 <= stdin[i] <= 'b' or 'r'\n\nn is an integer between 1 and 100.\n\n-----Time Limit-----\n1 second\n\n-----Memory Limit-----\n512 MB\n\n-----Solutions-----\n5\n\n11\n\n'''"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 1, \"The minimum number of moves Anatoly has to perform in order to make the colors of cockroaches in the line to alternate.\"\n\n\n-----Constraints-----\n1 \u2264 n \u2264 1000000\n1 \u2264 stdin.length \u2264 10^3\n\ninput = \"5\"\noutput = \"1\"\nassert input == output, \"The minimum number of moves Anatoly has to perform in order to make the colors of cockroaches in the line to alternate.\"\n__________________________________________________________________________________________________________\n\n\n\nclass Solution:\n    def minTurns(self, stdin: str) -> int:\n        def swap(a, b):\n            if a > b:\n                a, b = b, a\n            return b - a + 1\n        \n        n = len(stdin)\n        return self.minTurns(swap(stdin[0], stdin[1])) + 1 if stdin[0] == 'r' and stdin[1] == 'b' else self.minTurns(stdin[1:])\n"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5\") == \"1\"\nassert solution(\"3\") == \"0\"\nassert solution(\"1\") == \"2\"\nassert solution(\"2\") == \"0\"\nassert solution(\"5\") == \"1\"\n"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1\") == 1\nassert solution(\"1\") == 1\nassert solution(\"2\") == 2\nassert solution(\"2\") == 0\nassert solution(\"3\") == 3\n"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 2\n'''"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 2\n\n\n---Solution---\n\nanatoly solution(stdin)"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0\n\n\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= stdin.length <= 100\n\nstdin contains only lowercase 'b' and 'r'.\n\n\n------SAMPLE INPUT-------\n\n5\nrbbrr\n\n------SAMPLE OUTPUT-------\n\n1\n\n------SAMPLE INPUT-------\n\n3\nrbrr\n\n------SAMPLE OUTPUT-------\n\n0\n\n\n------SAMPLE INPUT-------\n\n4\nbbrrr\n\n------SAMPLE OUTPUT-------\n\n0\n\n\n------SAMPLE INPUT-------\n\n5\nbrrrrr\n\n------SAMPLE OUTPUT-------\n\n2\n"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \n    1,\n    2,\n    2,\n    2,\n    2,\n    2,\n    2\n) == \"3\"\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('**. **')) == '3'\nassert solution('... *') == '1'\nassert solution('...') == '1'\nassert solution('..') == '1'\nassert solution('**. **') == '0'\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(0)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(4)\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n\n\n-----Constraints-----\n\n1 <= n <= 1e9\n0 <= m <= 1e6\n1 <= k <= 2e6\n\n\n-----Examples-----\nInput\n4 5\n...\n\nOutput\n4\n\nInput\n2 2 2\n..\n\nOutput\n1\n\nInput\n2 2 2\n.\n...\n\nOutput\n2\n\nInput\n3 3 4\n.\n*\n**\n\n\n-----Constraints-----\n\n1 <= n <= 1e6\n1 <= m <= 1e6\n0 <= k <= 1e6\n\n\n-----See also-----\n\n-----Time complexity-----\nO(n*m*2^k)\n\nO(n*m*2^k)\n\nO(n*m)\n\nO(n)\n\nO(n^2)\n\nO(n^3)\n\nO(n^2)\n\nO(n^3)\n\nO(n^2)\n\n\n-----Space complexity-----\nO(n)\n\nO(n^2)\n\n\n-----Submissions-----\nAditya    O(n*m*2^k)\nArjun    O(n*m*2^k)\nHarsh    O(n*m*2^k)\nSuresh    O(n*m*2^k)\nAnand    O(n*m*2^k)\nMohammad    O(n*m*2^k)\n\nTime Complexity: O(n*m*2^k)\nSpace Complexity: O(n*m*2^k)\nSubmissions: O(n*m*2^k)\n\n\n\n-----Bonus points-----\n1. A solution can be written as $sum(1/2)$ (no additive or multiplicative factors).\n2. If $sum(1/2)$ is not possible with $k$ consecutive empty seats, then you cannot find $k$ consecutive empty seats.\n3. A solution has the following property: If there are $k$ consecutive empty seats, then the solution can be written as $sum(1/k)$ (no additive or multiplicative factors).\n\n\n-----Constraints-----\n\n1 <= k <= 1e6\n1 <= n <= 1e6\n\n1 <= sum(1/2) <= 1e6\n\n1 <= n <= 1e6\n\n\n-----Example 1-----\nInput\n2 2 2\n**.\n...\n\nOutput\n3\n\n\n-----Example 2-----\nInput\n1 3\n..\n\nOutput\n2\n\nInput\n1 3\n..\n\nOutput\n0\n\n\n-----Example 3-----\nInput\n1 2 2\n.\n\nOutput\n1\n\n\n-----Example 4-----\nInput\n1 2 2\n.\n*\n**\n\nOutput\n2\n\nInput\n1 2 2\n.\n*\n**\n\nOutput\n1\n\n\n-----Example 5-----\nInput\n1 2 2\n..\n\nOutput\n0\n\n\n-----Example 6-----\nInput\n1 2 2\n..*\n**.\n...\n\nOutput\n0\n\n\n-----See also-----\n\n-----Time complexity-----\nO(n*m*2^k)\n\nO(n*m*2^k)\n\nO(n*m*2^k)\n\nO(n*m*2^k)\n\n\n-----Space complexity-----\nO(n*m*2^k)\n\nO(n*m*2^k)\n\nO(n*m*2^k)\n\n\n-----Submissions-----\nArjun    O(n*m*2^k)\nHarsh    O(n*m*2^k)\nSuresh    O(n*m*2^k)\nAnand    O(n*m*2^k)\nMohammad    O(n*m*2^k)\n\nTime Complexity: O(n*m*2^k)\nSpace Complexity: O(n*m*2^k)\nSubmissions: O(n*m*2^k)\n\n\n\n-----Bonus points-----\n1. A solution can be written as $sum(1/2)$ (no additive or multiplicative factors).\n2. If $sum(1/2)$ is not possible with $k$ consecutive empty seats, then you cannot find $k$ consecutive empty seats.\n3. A solution has the following property: If there are $k$ consecutive empty seats, then the solution can be written as $sum(1/k)$ (no additive or multiplicative factors).\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 3 2\"\n    \"*.*\"\n    \"..\"\n    \"*.*\"\n    \"*.*\"\n    \"*.*\"\n    \"*.*\"\n    \"*.*\"\n    \"*.*\") == '0'\n\n\"\"\"\nclass Solution:\n    def solve(self, n: int, m: int, k: int) -> int:\n        \n        def dist(x,y):\n            return abs(x-y)\n        \n        def dfs(x,y,row,col,path):\n            if row>=n or col>=m: return\n            if len(path)==k: return\n            if x+dist(path[-1],y)>=n or col+dist(path[-1],y)>=m: return\n            path.append(x)\n            dfs(x+1,y,row+1,col,path)\n            path.pop()\n            dfs(x,y+1,row,col+1,path)\n            path.pop()\n            dfs(x,y,row+1,col,path)\n            \n        \n        def dfs(x,y,row,col,path):\n            if col>=m or row>=n: return\n            if len(path)==k: return\n            if x+dist(path[-1],y)>=n or row+dist(path[-1],y)>=m: return\n            path.append(x)\n            dfs(x+1,y,row+1,col,path)\n            path.pop()\n            dfs(x,y+1,row,col+1,path)\n            path.pop()\n            dfs(x,y,row+1,col,path)\n        \n        dfs(1,1,1,1,[])\n        \n        return len(set(map(lambda x:dist(x,x),range(1,n+1))))"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0\"\n\n\n-----Constraints-----\n\n1 <= n, m <= 30\n\n\n-----Example 1-----\n\nInput\n2 3 2\n**.\n...\n\nOutput\n3\n\nInput\n1 2 2\n..\n\nOutput\n1\n\n\n-----Example 2-----\n\nInput\n1 1 1\n.\n.\n\nOutput\n0\n\n\n-----Example 3-----\n\nInput\n1 3 3\n..\n\nOutput\n1\n\nInput\n3 3 3\n*..\n*..\n\nOutput\n2\n\n\n-----Note-----\n\nIn the first sample, there are three ways to arrange those seats. You can take the following seats for your arrangement.   $(1,1)$, $(1,2)$  $(1,3)$, $(2,1)$\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3, 'An unexpected result'\n\"\"\"\n\n\n\nfrom collections import Counter\n"
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(15)\n"
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 3, 2, 5, 1, 2, 3, 1, 1, 1, 1) == 8, 'incorrect solution'\nassert solution(3, 3, 2, 1, 2, 2, 3, 1, 1, 1, 1) == 15, 'incorrect solution'\nassert solution(3, 3, 2, 1, 1, 2, 2, 2, 2, 2, 1) == 6, 'incorrect solution'\nassert solution(3, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2) == 6, 'incorrect solution'\nassert solution(3, 3, 2, 1, 1, 1, 2, 1, 1, 1, 2) == 10, 'incorrect solution'\n"
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"15\""
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"3\", \"3\", \"3\", \"3\", \"2\", \"1\", \"1\", \"1\", \"2\", \"3\", \"3\", \"3\", \"2\", \"2\", \"2\"]) == \"15\""
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"15\""
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 3 3 2\") == \"6\"\nassert solution(\"3 5 3 2\") == \"15\"\nassert solution(\"3 6 3 2\") == \"6\"\nassert solution(\"3 1 1\") == \"1 1\"\nassert solution(\"3 2 1\") == \"1 2\"\n"
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"11\"\n"
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '15'"
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"15\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '15'\n\"\"\"\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == 3\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 6"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution == 3\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution == 2, \"incorrect answer\"\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '4'\nassert solution(input()) == '3'\nassert solution(input()) == '5'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_input) == \"3\""
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 2\nassert solution(5) == 3\nassert solution(4) == 3\nassert solution(1) == -1"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abababababababab\") == \"3\"\nassert solution(\"aabbabaaaaaaaaaab\") == \"5\"\nassert solution(\"abababaaaaababab\") == \"3\"\nassert solution(\"aabbabaaaaaaaaabbababab\") == \"3\"\nassert solution(\"aaaaaaaabbaaaaaaaaa\") == \"3\"\n"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, \"abababbbababa\") == 2\nassert solution(1, \"a\") == 3\nassert solution(7, \"abbbabababa\") == -1\nassert solution(3, \"aaab\") == 3\nassert solution(2, \"abab\") == 2\n"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == 3\n"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abab') == -1\nassert solution('aabb') == 3\nassert solution('babb') == -1\nassert solution('ababaa') == 3\nassert solution('ababab') == -1\n"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == -1"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution( \"baababababab\" ) == 2, \"solution()\"\nassert solution( \"ababababab\" ) == 2, \"solution()\"\nassert solution( \"aabbab\" ) == 0, \"solution()\"\nassert solution( \"a\" ) == -1, \"solution()\"\nassert solution( \"b\" ) == -1, \"solution()\"\n"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"abab\"\n    ), 0\nassert solution(\n    \"aabb\"\n    ), 2\nassert solution(\n    \"aaab\"\n    ), 2\nassert solution(\n    \"bbb\"\n    ), 3\nassert solution(\n    \"aaaa\"\n    ), 0\n"
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, '1234567') == 1801\nassert solution(3, '101') == 11\n\"\"\""
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1801'\n"
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1801\"\nassert solution(stdin) == \"11\"\n\"\"\""
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1801\"\n\n\n\"\"\"\nclass Solution:\n    def Dima_workday_split(self, l, n, d):\n        # Init\n        res = 0\n        for i in range(len(d)):\n            if d[i] == 1:\n                # d[i] = n\n                # res += n\n                # n = n * n\n                # print(n)\n                return n * n\n            else:\n                # d[i] = -1\n                # res += -n\n                # n = -n * n\n                # print(n)\n                return n * -1\n"
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1801\""
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 11\n\"\"\"\nfrom itertools import combinations\n"
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1801\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1801\n"
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"01\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"01\"\nassert solution
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1801'\nassert solution(stdin) == '11'\nassert solution(stdin) == '1'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 'Yes'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 5\nstdin.length <= N\nstdin contains only digits and characters 0 and 9.\n\n\"\"\""
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"100\") == \"Yes\"\nassert solution(\"1000000\") == \"No\""
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"6\") == \"No\"\nassert solution(\"6\") == \"Yes\"\nassert solution(\"6\") == \"Yes\"\nassert solution(\"6\") == \"Yes\"\nassert solution(\"6\") == \"No\"\n"
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"6\") == \"Yes\"\nassert solution(\"5\") == \"Yes\"\nassert solution(\"4\") == \"No\"\nassert solution(\"3\") == \"No\"\nassert solution(\"2\") == \"No\"\n"
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1') == 'No'\nassert solution('0') == 'Yes'"
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n        \"6\"\n    ), \"No\"\nassert solution(\n        \"0000\"\n    ), \"Yes\"\n\nassert solution(\n        \"5\"\n    ), \"No\"\nassert solution(\n        \"01\"\n    ), \"Yes\"\n\nassert solution(\n        \"1\"\n    ), \"No\"\n"
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'Yes'\n\"\"\"\n\nimport math\nfrom heapq import heappop, heappush\n\nn, m = map(int, stdin.split())\n\nboard = [list(map(str, input())) for _ in range(n)]\n\n_board = []\nfor i in range(n):\n    _board.append([])\n    for _ in range(m):\n        _board[i].append(int(input()))\n\nclass Cell:\n    def __init__(self, i, j, dir, dist):\n        self.i, self.j = i, j\n        self.dir, self.dist = dir, dist\n        self.active = True\n        self.corner_points = []\n        self.corners = 0\n        self.line_points = []\n        self.zones = []\n        self.vertex = (i, j)\n\n    def __lt__(self, other):\n        return self.dist < other.dist\n\n    def __gt__(self, other):\n        return self.dist > other.dist\n\n    def __eq__(self, other):\n        return self.dist == other.dist\n\n    def __str__(self):\n        return '{:d}_{:d}'.format(self.i, self.j)"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 16\n\"\"\""
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"100\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 502395\nassert solution(stdin) == 502445\nassert solution(stdin) == 502445\nassert solution(stdin) == 502445\nassert solution(stdin) == 502445\n"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 48\n"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 1\") == \"0\"\nassert solution(\"4 1\") == \"0\"\nassert solution(\"5 1\") == \"0\"\n"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 7\") == \"0\"\nassert solution(\"3 7\") == \"1\"\nassert solution(\"500000 1\") == \"1\"\nassert solution(\"1 1\") == \"0\"\nassert solution(\"1 1\") == \"1\"\n"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 3 1 3 1\") == 2\nassert solution(\"2 4 2 2 1\") == 1\nassert solution(\"2 5 2 4 2\") == 1\nassert solution(\"2 4 5 3 2\") == 2\nassert solution(\"2 7 3 5 1\") == 1\n"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '2000001'\nassert solution(input()) == '2000010'\nassert solution(input()) == '2000020'\nassert solution(input()) == '2000030'\nassert solution(input()) == '2000040'\n"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(len(set(str(i) for i in range(1, int(stdin) + 1)))), f\"{stdin}\"\n\nstdin = \"1\"\nassert solution(stdin) == str(len(set(str(i) for i in range(1, int(stdin) + 1))))"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 7\"\n) == \"15\"\nassert solution(\n    \"1337 42\"\n) == \"95147305\"\nassert solution(\n    \"1 1\"\n) == \"1\"\nassert solution(\n    \"500000 1\"\n) == \"500000\"\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 5 1 1 1') == '20', 'incorrect answer'\nassert solution('5 5 3 4 5') == '35', 'incorrect answer'\nassert solution('5 5 3 4 5') == '35', 'incorrect answer'\nassert solution('5 5 3 4 5') == '35', 'incorrect answer'"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '35'\nassert solution(\"2 2\") == '35'\nassert solution(\"1 2 2 1\") == '6'\nassert solution(\"1 3 1 1\") == '3'\nassert solution(\"1 1 1 1 1\") == '1'\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"35\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '35'\n\nassert solution(stdin) == '35'\n\nassert solution(stdin) == '35'\n\nassert solution(stdin) == '35'\n\nassert solution(stdin) == '35'"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"4 5 5 3 5\") == \"20\"\nassert solution(\"5 3 1 1 3\") == \"15\"\nassert solution(\"5 5 3 4 5\") == \"35\"\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '20'\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '35'\nprint(\"Correct\")\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '35'\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '35'\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('4 5 5 3 5') == '20'\nassert solution('5 5 5 4 5') == '15'\nassert solution('5 5 3 4 5') == '35'\n\n\n-----Done-----\n'''\n\nn, A, B, C, T = map(int, input().split())\nA -= 1\nB -= 1\nC -= 1\nT -= 1\n\nans = n * (C + B + A * T)"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3 2'\nassert solution(stdin) == '1 2 0'\nassert solution(stdin) == '1 3 0'\nassert solution(stdin) == '1 4 0'\n"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(test_input) == answer\n\n\"\"\""
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('2 1') == '1 2 0'\nassert solution('4 4') == '3 4 1'\nassert solution('8 9') == '3 3 1'\nassert solution('8 7') == '1 5 1'\nassert solution('8 7') == '1 7 0'\n"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"2 1\",\n    \"1 2 0\",\n    \"1 3 0\",\n    \"2 3 1\",\n    \"3 4 1\",\n    \"3 5 1\",\n    \"4 6 1\",\n    \"5 7 0\",\n    \"6 8 0\",\n    \"8 7 0\",\n) == \"3\"\n\nassert solution(\n    \"8 9\",\n    \"1 2 0\",\n    \"8 3 0\",\n    \"2 3 1\",\n    \"3 4 1\",\n    \"3 5 1\",\n    \"4 6 1\",\n    \"5 7 0\",\n    \"6 8 0\",\n    \"8 7 0\",\n) == \"3\"\n\nassert solution(\n    \"8 9\",\n    \"1 2 0\",\n    \"8 3 0\",\n    \"2 3 1\",\n    \"3 4 1\",\n    \"3 5 1\",\n    \"4 6 1\",\n    \"5 7 0\",\n    \"6 8 0\",\n    \"8 7 0\",\n) == \"1\"\n\nassert solution(\n    \"8 9\",\n    \"1 2 0\",\n    \"8 3 0\",\n    \"2 3 1\",\n    \"3 4 1\",\n    \"3 5 1\",\n    \"4 6 1\",\n    \"5 7 0\",\n    \"6 8 0\",\n    \"8 7 0\",\n) == \"2\"\n\nassert solution(\n    \"8 9\",\n    \"1 2 0\",\n    \"8 3 0\",\n    \"2 3 1\",\n    \"3 4 1\",\n    \"3 5 1\",\n    \"4 6 1\",\n    \"5 7 0\",\n    \"6 8 0\",\n    \"8 7 0\",\n) == \"3\""
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 3"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"1\", \"1\", \"2\", \"0\", \"1\", \"0\"]) == \"1\"\nassert solution([\"1\", \"0\", \"1\", \"0\", \"1\", \"0\"]) == \"1\"\nassert solution([\"1\", \"1\", \"2\", \"0\", \"1\", \"0\"]) == \"1\"\nassert solution([\"1\", \"0\", \"1\", \"0\", \"1\", \"0\"]) == \"1\"\nassert solution([\"1\", \"1\", \"2\", \"1\", \"0\", \"0\"]) == \"1\"\n"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 2 3 0 0 0 1 0 0 0 0 0') == '1'\nassert solution('1 2 1 0 1 0 0 1 0 1') == '1 2'\nassert solution('8 9') == '1 2 3 4'\nassert solution('5 6 7 8') == '2'\nassert solution('5 6 1') == '1 2 3'\n"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m <= 1,000,000\n\n0 <= x, y <= n\n\nConstraints of Operation\n\n0 <= x, y <= n\n\n0 <= z <= 1\n\n\n-----Examples-----\nInput\n2 1\n1 2 0\n\nOutput\n1\n1 2 0\n\nInput\n4 4\n1 2 1\n1 3 0\n2 3 1\n3 4 1\n\nOutput\n3\n2 3 0\n1 3 1\n2 3 0\n\nInput\n8 9\n1 2 0\n8 3 0\n2 3 1\n1 4 1\n8 7 0\n1 5 1\n4 6 1\n5 7 0\n6 8 0\n\nOutput\n3\n2 3 0\n1 5 0\n6 8 1\n"
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution( \"1 7\" ) == 1\nassert solution( \"1 3\" ) == 3\nassert solution( \"1 1\" ) == 0\nassert solution( \"1 9\" ) == 0\nassert solution( \"1 2\" ) == 1\n"
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 0, \"The function should return 0.\""
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12\n\nInput\n3 5\n\nOutput\n4\n'''"
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['3', '17', '4', '5']) == '13'\nassert solution(['1', '2', '3', '4', '5']) == '0'\nassert solution(['1', '1', '2', '3', '3']) == '0'\nassert solution(['1', '1', '1', '2', '2']) == '0'\nassert solution(['1', '1', '1', '1', '1']) == '0'\n"
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 1, 1, \"sfsds\") == \"sfsds\"\nassert solution(1, 1, 1, \"asdasds\") == \"sfsds\"\nassert solution(1, 1, 2, \"asdsasd\") == \"sfsds\"\nassert solution(5, 0, 0, \"asdasd\") == \"sfsds\"\nassert solution(3, 2, 4, \"sdsasdas\") == \"sfsds\"\n"
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0,0,0,0,0,0) == 0, \"1\"\nInput\n5\n\nOutput\n12\n"
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\")\") == 0, \"Incorrect input\"\n\nInput\n5 3\n\nOutput\n3\nassert solution(\"(\") == 0, \"Incorrect input\"\n\n\"\"\""
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 13\n\nInput\n7 10\n\nOutput\n30\n\nassert solution(input()) == 30\n\"\"\""
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 55\n\"\"\""
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 24"
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"aab\",\"bbb\",\"aaa\",\"aaaa\",\"aaaaa\"]) == \"12\"\nassert solution([\"aab\",\"ba\",\"baab\",\"baaa\",\"baabaaa\"]) == \"24\"\nassert solution([\"abab\",\"bbb\",\"aaa\",\"aaaa\",\"aaaaa\"]) == \"0\"\nassert solution([\"abcdefghijklmnopqrstuvwxyz\"]) == \"0\"\nassert solution([\"abcdefghijklmnopqrstuvwxyz\"]) == \"0\"\n"
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12\n\nInput\ndoge\ndoge\n\nOutput\n24\n"
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 24\n\n-----Explanation-----\n\nThe first operation (i.e. $T$) in the first operation is the substring: $T$ is a prefix of $S$.\n\nThe second operation (i.e. $T$) in the second operation is the substring: $S$ is a prefix of $T$. The third operation (i.e. $A$) is a substring of $T$: $T$ is a prefix of $A$.\nThe fourth operation (i.e. $A$) is a substring of $A$: $A$ is a prefix of $A$.\n\nThe fourth operation is more complicated than the second operation. It has a different number of operations to do. In the second operation, the operation is to add an empty string $A$ to the end of $A$ and then add the string $T$ at the front of $A$.\n\nIn the third operation, the operation is to delete the first character of $T$ and add it at the end of $A$.\n\nIn the fourth operation, the operation is to delete the first character of $T$ and add it at the back of $A$.\n\nNote that $T$ is a prefix of $S$ and $A$ is not a prefix of $S$.\n\n\n\"\"\"\n\n\nimport math\n\nt = int(input())\nfor i in range(t):\n    a, b, c = map(str, input().split())\n    if a == \"T\":\n        print(math.gcd(int(b), int(c)))\n    elif a == \"S\":\n        print(int(b) * int(c))"
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"aab\"), 1\nassert solution(\"aabb\"), 2\nassert solution(\"baab\"), 2\nassert solution(\"bbaa\"), 2\nassert solution(\"baab\"), 1\n"
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 24\nassert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\nstdin) == \"12\"\n\n\n-----Reference-----\n\n[Wikipedia](https://en.wikipedia.org/wiki/Magic_spell_sequence#Hanning_of_a_spell_sequence)\n\"\"\""
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abab\") == \"12\"\nassert solution(\"ba\") == \"24\"\nassert solution(\"\") == \"0\"\nassert solution(\"\"\"cacdcdbbbb\n\"\"\") == \"24\"\nassert solution(\"\"\"\n\n\"\"\") == \"0\""
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"abab\"\n    \"ba\"\n    \"ba\") == 12"
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12\n\"\"\""
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\"\"\""
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 12"
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 10\n\npass\n'''"
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1 1 1\") == \"1 2 2 2\"\nassert solution(\"1 1 1 1 2\") == \"1 2 2 2\"\nassert solution(\"1 1 1 1 3\") == \"1 2 2 2\"\nassert solution(\"1 1 1 1 4\") == \"1 2 2 2\"\nassert solution(\"1 1 1 1 5\") == \"1 2 2 2\"\n"
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input().strip()) == 3\n\n-----Time Complexity-----\n\nO(n^2)\n\nO(n)\n\n-----Space Complexity-----\n\nO(n)\n\nclass Solution:\n    def longestSubsequence(self, a: List[int]) -> int:\n        def dfs(index, path):\n            if len(path) == len(a):\n                return len(path)\n            if index == len(a):\n                return 0\n            res = 0\n            for i in range(index, len(a)):\n                res = max(res, dfs(i+1, path+[a[i]]))\n            return res\n        return dfs(0, [])\n\"\"\"\n"
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == 4\n'''\n"
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(10, [1,2,3,5,8,13,21,34,55,89]) == 10\nassert solution(5, [1,2,3,5,8,13,21,34,55,89]) == 2\nassert solution(3, [1,2,3,5,8,13,21,34,55,89]) == 2\nassert solution(0, []) == 0\n\"\"\""
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input().strip()) == 12\n"
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10\n\n-----Notes-----\n\nYour answer may be different than the expected. You may not print anything except this example.\n\nThis is the only way you could complete the challenge.\n\"\"\""
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '110'\nassert solution(stdin) == '110'\nassert solution(stdin) == '110'\nassert solution(stdin) == '110'\nassert solution(stdin) == '110'\n"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == str(231)\n\nassert solution(stdin) == str(231)\n\nassert solution(stdin) == str(231)\n\nassert solution(stdin) == str(231)\n\nassert solution(stdin) == str(231)\n"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4 5 5 2 3 4 3 2 3 3 3 4 4 3 2 4 3 2 3 3 3 4 3 2 2 4 3 2 3 2 3 2 3 2 2 3 2 3 2 3 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"111\"\n\"\"\"\n"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 113\nassert solution(stdin) == 7\nassert solution(stdin) == 55\nassert solution(stdin) == 100\nassert solution(stdin) == 44\n"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(s) == 46\n\n\nExplanation\n\nHow many friends are in the company?\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\nOutput\n111\n\nExplanation\n\nThe company can be solved by only the first friend.\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\nOutput\n111\n\n\n\n\nThe maximum total friendship factir that can be reached was 8834.\n\nInput\n\nThe first line of the input contains two space-separated integers, n and d (1 \u2264 n \u2264 10^5, $1 \\leq d \\leq 10^{9}$) \u2014 the number of Kefa's friends and the minimum difference between the amount of money in order to feel poor, respectively.\n\nNext n lines contain the descriptions of Kefa's friends, the (i + 1)-th line contains the description of the i-th friend of type m_{i}, s_{i} (0 \u2264 m_{i}, s_{i} \u2264 10^9) \u2014 the amount of money and the friendship factor, respectively.\n\nThe first line of the input contains two space-separated integers, n and m (1 \u2264 n \u2264 10^5, $1 \\leq m \\leq 10^{9}$) \u2014 the total degree of friendship.\n\nThe second line contains the friendship factor in respect to Kefa.\n\nHow many friends are in the company?\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\nOutput\n100\n\n\n\n-----Explanation-----\n\nHere the companies are named as 1 and 2.\nThe maximum friend factor is 8.\nThe minimum degree of friendship is 7.\nThe friends are as follows:\n1. Dingy\n2. Dingy\n3. Dingy\n4. Dingy\n5. Dingy\n\nHow many friends are in the company?\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\nOutput\n100\n\n\n\nExplanation\n\nThe first company is the company with minimal degree of friendship.\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\nOutput\n100\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n100\n\nThe first company has the minimum friend factor.\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n1\n\nInput\n4 5\n75 5\n0 100\n150 20\n75 1\n\nOutput\n1\n\n\n\"\"\"\n\nn,m,d=map(int,input().split())\na=[int(i) for i in input().split()]\n\ncount=0\nfor i in range(n):\n    count+=a[i]\n    for j in range(i+1,n):\n        if(count<m):\n            count+=a[j]\n        else:\n            break\nprint(count)\n"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == answer\n"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"75 5\") == \"100\"\nassert solution(\"75 7\") == \"110\"\nassert solution(\"75 1\") == \"100\"\nassert solution(\"5 100\") == \"100\"\nassert solution(\"0 7\") == \"110\"\n"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"100\"\n\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\nOutput\n100\n\nInput\n5 100\n0 7\n11 32\n99 10\n46 8\n87 54\n\nOutput\n100\n"
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 100\nassert solution(stdin) == 100\n\n\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('5 4') == '2'\nassert solution('7 4') == '-1'\nassert solution('3 4') == '-1'\n\n\n-----Solution-----\n"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(\"2 2 3\") == \"2\"\nassert solution(\"2 3 4\") == \"3\"\nassert solution(\"2 4 5\") == \"4\"\nassert solution(\"3 4 5\") == \"4\"\n"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 1\") == \"-1\"\nassert solution(\"2 1\") == \"1\"\nassert solution(\"3 1\") == \"-1\"\nassert solution(\"2 3\") == \"-1\"\nassert solution(\"3 2\") == \"-1\"\n"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"5 6\"\n) == \"2\"\n\n\n\n-----IMPORTS-----\n\nfrom collections import defaultdict\n\nstdin: str = input().rstrip()\nn: int = int(stdin)\ndata = defaultdict(lambda: 0)\nfor i in range(n):\n    stdin: str = input().rstrip()\n    data[stdin] = 1"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1 1\") == \"1\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"2 1 3\") == \"2\"\nassert solution(\"1 2 3 4\") == \"2 3\"\nassert solution(\"1 3 2 4 5\") == \"2 3\"\n"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"5 6\"\n    ) == \"2\"\n"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == '-1'\n"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"5 6\",\"1 2\",\"1 3\",\"2 3\",\"2 4\",\"3 4\",\"4 5\",\"5 1\"]) == \"1\"\nassert solution([\"7 4\",\"2 1\",\"3 6\",\"5 1\"]) == \"1\"\nassert solution([\"7 4\",\"2 1\",\"3 6\",\"5 1\"]) == \"-1\""
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"10 15 2\\n\"\n    \"2\\n\"\n    \"10 13\\n\"\n) == 12\nassert solution(\n    \"8 17 3\\n\"\n    \"4\\n\"\n    \"3 4 5\\n\"\n) == 2\nassert solution(\n    \"8 17\\n\"\n    \"4\\n\"\n    \"3 4 5\\n\"\n) == 4\nassert solution(\n    \"8 17 4\\n\"\n    \"3 4 5\\n\"\n    \"3 4 5 8\\n\"\n) == 4\nassert solution(\n    \"8 17\\n\"\n    \"4\\n\"\n    \"3 4 5\\n\"\n    \"3 4 5 8\\n\"\n) == 2\n"
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('10 15 2') == 12\nassert solution('8 17 3') == 2\nassert solution('10 13') == 3\nassert solution('3 4 5 8') == 4\nassert solution('7 4 5 8 9 8 9 10') == 7\n"
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 8 9 10\") == \"12\"\n\n\nInput\n8 5 5 4 6 3 7\n6\nInput\n1 4 4 6 5 3 7\n3\nInput\n4\n1 2 3 4\nOutput\n4\nInput\n6\n4\nOutput\n6\n\nassert solution(\"2 5 6 1 4 3 7\") == \"12\"\n\n\nInput\n5 1 4 1 2 4 5\n2\nInput\n1 2\nOutput\n1\n\nassert solution(\"3\") == \"1\"\n"
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"10 15 2\") == \"12\"\nassert solution(\"8 17 3\") == \"2\"\nassert solution(\"1 3 4\") == \"1\"\n\n\n-----Constraints-----\n1 <= n <= 100000\n0 <= t_{s} < t_{f} <= 10^12\n\n\"\"\""
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"12\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"12\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"12\"\n"
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"10 15 2\") == 12\nassert solution(\"8 17 3\") == 2\nassert solution(\"8 7 7 7 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8"
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"8 17 3\") == \"12\"\nassert solution(\"10 13\") == \"2\"\nassert solution(\"8 17 4\") == \"2\"\nassert solution(\"8 17 5 8\") == \"3\"\nassert solution(\"8 17 6\") == \"3\"\n"
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '12'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"17\"\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"erfdcoeocs\") == \"techno\"\nassert solution(\"z\") == \"codeforces\"\nassert solution(\"z\") == \"z\"\nassert solution(\"z\") == \"z\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"t\") == \"techno\"\nassert solution(\"z\") == \"z\"\nassert solution(\"techno\") == \"t\"\nassert solution(\"erfdcoeocs\") == \"co\"\nassert solution(\"s\") == \"s\"\n\n\nInput\nabc\n\nOutput\nabc\n\nExplanation\n\nNote: for this problem, it is used to check if the string $s$ is a palindrome.\n\nExample:\nInput:\nabc\n\nOutput:\nabc\n\nExplanation:\n\nFor palindrome string $s$:\n\n\"a\" is a palindrome.\n\"b\" is not a palindrome.\n\"c\" is not a palindrome.\n\"e\" is not a palindrome.\n\"f\" is not a palindrome.\n\"g\" is not a palindrome.\n\"h\" is not a palindrome.\n\"i\" is not a palindrome.\n\"j\" is not a palindrome.\n\"k\" is not a palindrome.\n\"l\" is not a palindrome.\n\"m\" is not a palindrome.\n\"n\" is not a palindrome.\n\"o\" is not a palindrome.\n\"p\" is not a palindrome.\n\"q\" is not a palindrome.\n\"r\" is not a palindrome.\n\"s\" is not a palindrome.\n\"t\" is not a palindrome.\n\"u\" is not a palindrome.\n\"v\" is not a palindrome.\n\"w\" is not a palindrome.\n\"x\" is not a palindrome.\n\"y\" is not a palindrome.\n\n\"\"\"\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('techno') == 'techno', \"Correct\"\nassert solution('erfdcoeocs') == 'erfdcoeocs', \"Correct\"\nassert solution('z') == 'z', \"Correct\"\nassert solution('123') == '123', \"Correct\"\nassert solution('z') == 'z', \"Correct\"\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('ncteho') == 'techno'\n\n\n-----Constraints-----\n1 <= T <= 2^10\n1 <= S.length <= 2^10\nS contains only lowercase Latin letters.\n\nTime Limit: 1 sec\n\nSubmissions\n1,1\n\nSubmissions\n4,514\n\nSubmissions\n5,939\n\nSubmissions\n5,498\n\nSubmissions\n2,100\n\nSubmissions\n2,525\n\nSubmissions\n2,547\n\nSubmissions\n1,10\n\"\"\"\n\nfrom collections import defaultdict\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"techno\") == \"t\"\nassert solution(\"techno\") == \"t\"\nassert solution(\"techno\") == \"t\"\nassert solution(\"techno\") == \"t\"\nassert solution(\"techno\") == \"t\"\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('z') == 'z'\nassert solution('ncteho') == 'ncteho'\nassert solution('techno') == 'techno'\n\n------Constraints-----\n1 <= stdin.length <= 50\n\n1 <= $t$ <= $10^9$\n\n\n------Coding Time Complexity-----\nBest case: O(1)\nAverage case: O(n)\nWorst case: O(n)\n\n\n------Space Complexity-----\nBest case: O(n)\nAverage case: O(n)\nWorst case: O(n)\n\n\n------Algorithm Execution-----\nruntime: O(n)\nmemory: O(n)\nspace: O(n)\n\"\"\"\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('ncteho') == 'techno'\nassert solution('erfdcoeocs') == 'codeforces'\nassert solution('z') == 'z'"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"techno\") == \"ncteho\"\n\n\n-----Examples-----\nInput\nt\n\nOutput\ntechno\n\nInput\nt\n\nOutput\nt\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"techno\") == \"t\"\nassert solution(\"stihj\") == \"s\"\nassert solution(\"cte\") == \"t\"\nassert solution(\"cteh\") == \"t\"\nassert solution(\"ncteho\") == \"t\"\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"z\") == \"z\"\nassert solution(\"defer\") == \"defer\"\nassert solution(\"\") == \"\"\nassert solution(\"techno\") == \"techno\"\nassert solution(\"techno\") == \"techno\"\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Friendship\"\n\n\n\nfor s in [\n    \"ABBAB\",\n    \"AABAB\",\n    \"AABBAB\",\n    \"ABABAB\",\n    \"ABAAAB\",\n    \"ABABA\",\n    \"AABA\",\n    \"ABAA\",\n    \"AABA\"]:\n    answer = solution(s)\n    print(answer)\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"AAAAAA\") == \"Anton\"\nassert solution(\"AAAAA\") == \"Anton\"\nassert solution(\"AAAAA\") == \"Anton\"\nassert solution(\"A\") == \"Anton\"\nassert solution(\"DD\") == \"Danik\"\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"6\") == \"Friendship\"\nassert solution(\"7\") == \"Anton\"\nassert solution(\"6\") == \"Danik\"\nassert solution(\"6\") == \"Friendship\"\nassert solution(\"7\") == \"Anton\"\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin), \"solution() does not work\"\n\n-----Advanced-----\nNow you've seen the complicated result of the problem.\n\n\n\nclass Solution:\n    def gameWon(self, n: int, s: str) -> str:\n        lst = []\n        for i in range(n):\n            lst.append(s[i])\n        \n        for i in range(n-1):\n            if s[i] == lst[i+1] or s[i] == s[i+1] and lst[i] == s[i]:\n                return lst[i]\n        \n        return \"Friend\"\n        \n\nOutput\nFriend\n\nInput\n3\nAAAABBB\nAAAABBB\nAAAABBB\n\nOutput\nFriend\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('AADA') == 'Anton'\nassert solution('AAAD') == 'Anton'\nassert solution('AAADD') == 'Danik'\nassert solution('DDADA') == 'Anton'\nassert solution('AADA') == 'Anton'\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"Friendship\"\nassert solution(input) == \"Anton\"\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Friendship\"\nassert solution(stdin) == \"Anton\"\nassert solution(stdin) == \"Danik\"\nassert solution(stdin) == \"Friendship\"\nassert solution(stdin) == \"Anton\"\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'Friendship'\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Friendship\""
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Friendship\"\nassert solution(stdin) == \"Anton\"\nassert solution(stdin) == \"Danik\""
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\nfrom typing import List\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(2) == 1\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\nassert solution(6) == 1\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 1\nassert solution(input) == 1\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"1\"\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 1\") == \"1\"\nassert solution(\"1 2\") == \"3\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"0\"\nassert solution(\"4\") == \"2\"\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == 1,'should be solution'\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == 1\nassert solution(\"4\") == 1\nassert solution(\"3\") == 0\nassert solution(\"4\") == 1\nassert solution(\"9\") == 1\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(2)\nassert solution(stdin) == str(1)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 2 5 7 8 12\") == \"1\"\nassert solution(\"1 3 8 9 12\") == \"3\"\nassert solution(\"2 4 7 5 12\") == \"4\"\nassert solution(\"3 3 8 6 12\") == \"3\"\nassert solution(\"2 1 12\") == \"1\"\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(in_str) == 6\n"
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 1\", \"5 1\", \"5 5\"]) == \"1\"\nassert solution([\"1 1\", \"5 1\", \"5 5\", \"1 1\"]) == \"1\"\nassert solution([\"3 2\", \"3 3\"]) == \"2\"\nassert solution([\"3 4\", \"1 1\"]) == \"1\"\nassert solution([\"3 4\", \"3 4\", \"1 1\"]) == \"3\"\n"
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\""
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\u20183\u2019) == \u20181\u2019,\u2019Solution\u2019 should return \u20181\u2019.\nassert solution(\u20183 2 4 5\u2019) == \u20183\u2019,\u2019Solution\u2019 should return \u20183\u2019.\nassert solution(\u20183 2 4 7 5 6\u2019) == \u20186\u2019,\u2019Solution\u2019 should return \u20186\u2019.\nassert solution(\u20181 2 3 4 5 6 7 8 9 10\u2019) == \u201810\u2019,\u2019Solution\u2019 should return \u201810\u2019.\nassert solution(\u20181 3 5 9 7\u2019) == \u20189\u2019,\u2019Solution\u2019 should return \u20189\u2019.\n"
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\n\"\"\""
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 4\") == \"4\"\nassert solution(\"4 5\") == \"5\"\nassert solution(\"5 5\") == \"5\"\nassert solution(\"2 4\") == \"2\"\nassert solution(\"3 2\") == \"3\"\n"
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 1, \"Failed to complete test!\"\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"1 2 1 3 2 3 3 4 2 1 2 3 2 3 3 4 3 3 4 3 3 4 3 3 4 3 3 4 3 3 3 4 3 3 3 4 3 3 3 4 3 3 3 3 4 3 3 3 3 3 4 3 3 3 3 3 4 3 3 3 3 3 4 3 3 3 3 3 4 3 3 3 3 3 4 3 3 3 3 3 3 4 3 3 3 3 3 4 3 3 3 3 3 3 3 3 4 3 3 3 3 3 3 3 3 4 3 3 3 3 3 3 3 3 3 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3 1\"]) == \"2\"\nassert solution([\"3 1\", \"1 2 1\"]) == \"2\"\nassert solution([\"3 1\", \"1 2 1\", \"2 3 2\"]) == \"2\"\nassert solution([\"3 1\", \"1 2 1\", \"2 3 2\", \"3 4 3\"]) == \"2\"\nassert solution([\"3 1\", \"1 2 1\", \"2 3 2\", \"3 4 3\", \"3 5 4\"]) == \"2\"\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 3\") == \"6\"\nassert solution(\"1 2 1 4 3\") == \"6\"\nassert solution(\"1 3 1 1\") == \"1\"\nassert solution(\"0 1 0 0 1 0 1\") == \"1\"\nassert solution(\"3 1 1 2 1\") == \"1\"\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"3 1\"\n) == \"2\"\nassert solution(\n    \"1 2 1\"\n) == \"2\"\nassert solution(\n    \"1 1 1\"\n) == \"0\"\nassert solution(\n    \"1 1 1 1\"\n) == \"1\"\nassert solution(\n    \"1 1 1 1 1\"\n) == \"2\"\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 1\", \"1 2\", \"1 3\", \"1 4\", \"1 5\"]) == \"2\"\nassert solution([\"4 3\", \"5 4\", \"6 4\"]) == \"3\"\nassert solution([\"1 6\", \"1 5\", \"1 7\"]) == \"4\"\nassert solution([\"3 1\", \"3 2\", \"3 3\", \"3 4\", \"3 5\"]) == \"3\"\nassert solution([\"3 1\", \"3 2\", \"3 3\", \"3 4\", \"3 5\", \"4 1\", \"4 2\", \"4 3\", \"4 4\"]) == \"3\"\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nN, M, X, Y, Z = map(int, input().rstrip().split())\n\nmagic = 1\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1,2,3) == 2\nassert solution(2,3,1) == 2\nassert solution(2,3,2) == 2\nassert solution(2,3,3) == 3\nassert solution(2,3,4) == 0\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == 2\nassert solution(\"2 2 2\") == 4\nassert solution(\"3 3\") == 3\nassert solution(\"3 4\") == 3\nassert solution(\"3 5\") == 3\n"
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"10\"\n\"\"\""
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '5'\nassert solution('2 3') == '5'\n"
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '5'\n\"\"\""
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(()) == '5'\nassert solution('1') == '1'\nassert solution('2') == '3'\nassert solution('3') == '1'\nassert solution('4') == '2'\n"
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 5\n\n\n'''"
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '5'\n\"\"\""
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    '3 2'\n) == '5'\n\nassert solution(\n    '4 3'\n) == '5'\n\nassert solution(\n    '2 4'\n) == '3'\n\nassert solution(\n    '1 1'\n) == '0'\n\nassert solution(\n    '10 3'\n) == '0'\n"
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == 0\nassert solution(2) == 0\nassert solution(0) == 1\nassert solution(0) == 1\nassert solution(3) == 1\n"
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"{2,3}\") == \"5\"\nassert solution(\"{2,3}\") == \"8\""
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"17\"\n"
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '17'\n"
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\")\") == \"(3,3)\"\nassert solution(\"()()\") == \"()\"\nassert solution(\"2(3(1)))\") == \"2(3(1))\"\nassert solution(\"(((((2))))))\") == \"()\"\nassert solution(\"(((())))))\") == \"()\"\n"
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 17, \"test failed\""
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"\"\n\"\"\""
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"25\") == \"17\"\nassert solution(\"24\") == \"24\"\nassert solution(\"2\") == \"0\"\nassert solution(\"7\") == \"1\"\nassert solution(\"0\") == \"1\"\n"
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\\\"\\\"\\\"\nABCDEFGHIJKLMNOPQRSTUVWXYZ\nabcdefghijklmnopqrstuvwxyz\n123456789\nABCDEFGHIJKLMNOPQRSTUVWXYZ\n123456789\n\\\".\\\"\\\")\n"
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution( \"21\") == \"17\", \"21 should be 21\"\nassert solution( \"5\") == \"17\", \"5 should be 17\"\nassert solution( \"11\") == \"4\", \"11 should be 4\"\nassert solution( \"13\") == \"6\", \"13 should be 6\"\nassert solution( \"11\") == \"1\", \"11 should be 1\"\n"
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"17\"\n"
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('10') == '10'\nassert solution('11') == '11'\nassert solution('101') == '1'\nassert solution('101010') == '0'\nassert solution
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '45.0000000000'\n\"\"\"\n\nfrom math import pi\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2 4\") == \"45\"\n\nTest cases:\nTestcase #1:\nInput:\n2 2 4\n\nOutput:\n45\n\nTestcase #2:\nInput:\n2 2 6\n\nOutput:\n70.5\nExplanation\nThe bottle is half-full, so we tilt it.\n\nTestcase #3:\nInput:\n2 4\n\nOutput:\n27.5\nExplanation\nThe bottle is half-full, so we tilt it.\n\nTestcase #4:\nInput:\n2 3\n\nOutput:\n44.5\nExplanation\nThe bottle is half-full, so we tilt it.\n\"\"\"\n\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        try:\n            a, b = map(int, stdin.split())\n            x = b ** 2 / a\n            num = x * (3 / 2)\n            res = -(math.pi / 2) + math.acos(math.exp(num))\n            if res <= math.pi / 2:\n                return str(res)\n            else:\n                return '0'\n        except Exception:\n            return '0'\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(A,B,X) == 45, \"Should be '45.0000000000'\"\nassert solution(A,B,X) == solution(A,B,X/2), \"Should be '45.0000000000' or '45.0000000000'\"\nassert solution(A,B,X) == solution(A,B,X/2), \"Should be '45.0000000000' or '45.0000000000'\"\nassert solution(A,B,X) == solution(A,B,X), \"Should be '45.0000000000' or '45.0000000000'\"\nassert solution(A,B,X) == solution(A,B,X/2), \"Should be '45.0000000000' or '45.0000000000'\"\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == 45\n\n-----Sample Input-----\n4\n\n-----Sample Output-----\n100\n\"\"\"\nimport math"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, 2) == 45\nassert solution(1, 1) == 90\nassert solution(2, 2) == 90\nassert solution(1, 2) == 90\nassert solution(1, 1) == 90\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '45'\n'''\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('a b x') == 45\nassert solution('a b a x') == 45\nassert solution('a b b a x') == 45\nassert solution('a b b a b x') == 45\nassert solution('a b b a a b x') == 45\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 2\") == \"45.0000000000\"\nassert solution(\"1 2 5\") == \"90.0000000000\"\nassert solution(\"2 5 3\") == \"360.0000000000\"\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    \"2 3 4\"\n) == 45.0\nassert solution(\n    \"2 2 4\"\n) == 45.0\nassert solution(\n    \"2 2 4\"\n) == 45.0\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\"\n) == 45.0\nassert solution(\n    \"1 2 3 4 5 6 7 8 9 10\"\n) == 45.0\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(str) == '45.0000000000'\n\"\"\"\n\nimport sys\ninput = sys.stdin.readline\n\nfrom math import pi, acos, sqrt, floor\n\na, b = map(int, input().split())\nx = float(input())\n\nl = b / a\nr = sqrt(l * l + a * a)\n\nangle = acos(l / r)"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\nassert solution(\"{}{}\") == \"1\"\nassert solution(\"{}{}\") == \"2\"\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"1\"\nassert solution(\"4\") == \"2\"\nassert solution(\"5\") == \"2\"\nassert solution(\"10\") == \"2\"\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(6, 6) == 4\nassert solution(8, 2) == 5\nassert solution(12, 3) == 7\nassert solution(6, 4) == 6\nassert solution(12, 5) == 9\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == \"1\"\n\"\"\"\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(s) == \"3\"\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"3 4 2 1\"]) == \"2\"\nassert solution([\"2 3 4 1\"]) == \"3\"\nassert solution([\"1 3 4 1\"]) == \"2\"\nassert solution([\"1 3 2 1\"]) == \"1\"\nassert solution([\"2 3 4 1\"]) == \"2\"\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\n\"\"\""
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(X Y) == 3, \"The function should return a string with the maximum possible length.\"\n"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 5\") == \"5\"\nassert solution(\"2 2\") == \"2\"\nassert solution(\"6 10\") == \"10\"\nassert solution(\"5 9\") == \"9\"\nassert solution(\"2 3\") == \"3\"\n"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"18\"\n\n\"\"\"\n"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4\") == \"3\"\nassert solution(\"3 3\") == \"3\"\nassert solution(\"3 1\") == \"3\"\nassert solution(\"3 2\") == \"3\"\nassert solution(\"3 7\") == \"3\"\n"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 8\n\n-----Bug Fixes-----\n 1. Fix all of the case when i=1 and j=2\n 2. Fix all of the case when i=1 and j=3\n 3. Fix all of the case when i=1 and j=4\n 4. Fix all of the case when i=1 and j=5\n 5. Fix all of the case when i=1 and j=6\n 6. Fix all of the case when i=1 and j=7\n 7. Fix all of the case when i=1 and j=8\n 8. Fix all of the case when i=1 and j=9\n 9. Fix all of the case when i=1 and j=10\n10. Fix all of the case when i=1 and j=11\n11. Fix all of the case when i=1 and j=12\n12. Fix all of the case when i=1 and j=13\n13. Fix all of the case when i=1 and j=14\n14. Fix all of the case when i=1 and j=15\n15. Fix all of the case when i=1 and j=16\n16. Fix all of the case when i=1 and j=17\n17. Fix all of the case when i=1 and j=18\n18. Fix all of the case when i=1 and j=19\n19. Fix all of the case when i=1 and j=20\n20. Fix all of the case when i=1 and j=21\n21. Fix all of the case when i=1 and j=22\n22. Fix all of the case when i=1 and j=23\n23. Fix all of the case when i=1 and j=24\n24. Fix all of the case when i=1 and j=25\n25. Fix all of the case when i=1 and j=26\n26. Fix all of the case when i=1 and j=27\n27. Fix all of the case when i=1 and j=28\n28. Fix all of the case when i=1 and j=29\n29. Fix all of the case when i=1 and j=30\n30. Fix all of the case when i=1 and j=31\n31. Fix all of the case when i=1 and j=32\n32. Fix all of the case when i=1 and j=33\n33. Fix all of the case when i=1 and j=34\n34. Fix all of the case when i=1 and j=35\n35. Fix all of the case when i=1 and j=36\n36. Fix all of the case when i=1 and j=37\n37. Fix all of the case when i=1 and j=38\n38. Fix all of the case when i=1 and j=39\n39. Fix all of the case when i=1 and j=40\n40. Fix all of the case when i=1 and j=41\n41. Fix all of the case when i=1 and j=42\n42. Fix all of the case when i=1 and j=43\n43. Fix all of the case when i=1 and j=44\n44. Fix all of the case when i=1 and j=45\n45. Fix all of the case when i=1 and j=46\n46. Fix all of the case when i=1 and j=47\n47. Fix all of the case when i=1 and j=48\n48. Fix all of the case when i=1 and j=49\n49. Fix all of the case when i=1 and j=50\n50. Fix all of the case when i=1 and j=51\n51. Fix all of the case when i=1 and j=52\n52. Fix all of the case when i=1 and j=53\n53. Fix all of the case when i=1 and j=54\n54. Fix all of the case when i=1 and j=55\n55. Fix all of the case when i=1 and j=56\n56. Fix all of the case when i=1 and j=57\n57. Fix all of the case when i=1 and j=58\n58. Fix all of the case when i=1 and j=59\n59. Fix all of the case when i=1 and j=60\n60. Fix all of the case when i=1 and j=61\n61. Fix all of the case when i=1 and j=62\n62. Fix all of the case when i=1 and j=63\n63. Fix all of the case when i=1 and j=64\n64. Fix all of the case when i=1 and j=65\n65. Fix all of the case when i=1 and j=66\n66. Fix all of the case when i=1 and j=67\n67. Fix all of the case when i=1 and j=68\n68. Fix all of the case when i=1 and j=69\n69. Fix all of the case when i=1 and j=70\n70. Fix all of the case when i=1 and j=71\n71. Fix all of the case when i=1 and j=72\n72. Fix all of the case when i=1 and j=73\n73. Fix all of the case when i=1 and j=74\n74. Fix all of the case when i=1 and j=75\n75. Fix all of the case when i=1 and j=76\n76. Fix all of the case when i=1 and j=77\n77. Fix all of the case when i=1 and j=78\n78. Fix all of the case when i=1 and j=79\n79. Fix all of the case when i=1 and j=80\n80. Fix all of the case when i=1 and j=81\n81. Fix all of the case when i=1 and j=82\n82. Fix all of the case when i=1 and j=83\n83. Fix all of the case when i=1 and j=84\n84. Fix all of the case when i=1 and j=85\n85. Fix all of the case when i=1 and j=86\n86. Fix all of the case when i=1 and j=87\n87. Fix all of the case when i=1 and j=88\n88. Fix all of the case when i=1 and j=89\n89. Fix all of the case when i=1 and j=90\n90. Fix all of the case when i=1 and j=91\n91. Fix all of the case when i=1 and j=92\n92. Fix all of the case when i=1 and j=93\n93. Fix all of the case when i=1 and j=94\n94. Fix all of the case when i=1 and j=95\n95. Fix all of the case when i=1 and j=96\n96. Fix all of the case when i=1 and j=97\n97. Fix all of the case when i=1 and j=98\n98. Fix all of the case when i=1 and j=99\n99. Fix all of the case when i=1 and j=100\n100. Fix all of the case when i=1 and j=101\n101. Fix all of the case when i=1 and j=102\n102. Fix all of the case when i=1 and j=103\n103. Fix all of the case when i=1 and j=104\n104. Fix all of the case when i=1 and j=105\n105. Fix all of the case when i=1 and j=106\n106. Fix all of the case when i=1 and j=107\n107. Fix all of the case when i=1 and j=108\n108. Fix all of the case when i=1 and j=109\n109. Fix all of the case when i=1 and j=110\n110. Fix all of the case when i=1 and j=111\n111. Fix all of the case when i=1 and j=112\n112. Fix all of the case when i=1 and j=113\n113. Fix all of the case when i=1 and j=114\n114. Fix"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 6 18\") == 3\nassert solution(\"5 5 7\") == 5\nassert solution(\"3 1 3 4\") == 2\n\"\"\"\n"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == '20'\n\n-----Sample Input-----\n3 3\n\n-----Sample Output-----\n2\n\nThe sequence 3,3,3 satisfies the conditions.\n"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 14\n"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 20\n---Time Complexity---\nO(n^2) as we are traversing all the elements in the array.\nO(n) as we are creating the binary tree.\nO(n^2) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO(n) as we are creating the binary tree in place of traversing all the elements in the array.\nO("
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n\"\"\"\n\nfrom sys import stdin"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(46080)\n"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(int(stdin)) == 4, \"stdin: \" + str(stdin) + \" f(12) = \" + str(f(12))\n"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(12) == \"5\"\n\"\"\"\nimport sys\n"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3) == 6, \"The function does not return a result\"\nassert solution(11) == 9, \"The function does not return a result\"\nassert solution(123) == 17, \"The function does not return a result\"\nassert solution(5) == 4, \"The function does not return a result\"\nassert solution(12) == 0, \"The function does not return a result\"\n"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(12) == 2\nprint(f(12))"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '4'\n\n\"\"\"\n"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(12) == '1'"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5, \"f(12) = 12 \u00d7 10 \u00d7 8 \u00d7 6 \u00d7 4 \u00d7 2 = 46080, which has one trailing zero.\""
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(112) == 2\n\n-----python version of solution----\n"
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"12\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"\") == \"0\"\nassert solution(\"-10\") == \"0\"\n\"\"\""
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 2\n"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 2\n\nSample1\n\nN = 10\nc_1 = 'WWW'\nc_2 = 'RWWW'\nc_3 = 'RRWWW'\nc_4 = 'RRW'\nc_5 = 'RWW'\nc_6 = 'W'\nc_7 = 'W'\nc_8 = 'WW'\nc_9 = 'WWW'\nc_10 = 'RRWWW'\nc_11 = 'RWW'\nc_12 = 'RWW'\nc_13 = 'WW'\nc_14 = 'W'\nc_15 = 'W'\nc_16 = 'WW'\nc_17 = 'RR'\nc_18 = 'RR'\nc_19 = 'RR'\nc_20 = 'R'\nc_21 = 'R'\nc_22 = 'W'\nc_23 = 'WW'\nc_24 = 'W'\nc_25 = 'W'\nc_26 = 'W'\nc_27 = 'W'\nc_28 = 'W'\nc_29 = 'W'\nc_30 = 'R'\nc_31 = 'R'\nc_32 = 'R'\nc_33 = 'R'\nc_34 = 'R'\nc_35 = 'R'\nc_36 = 'R'\nc_37 = 'R'\nc_38 = 'R'\nc_39 = 'R'\nc_40 = 'R'\nc_41 = 'R'\nc_42 = 'R'\nc_43 = 'R'\nc_44 = 'R'\nc_45 = 'R'\nc_46 = 'R'\nc_47 = 'R'\nc_48 = 'R'\nc_49 = 'R'\nc_50 = 'R'\nc_51 = 'R'\nc_52 = 'R'\nc_53 = 'R'\nc_54 = 'R'\nc_55 = 'R'\nc_56 = 'R'\nc_57 = 'R'\nc_58 = 'R'\nc_59 = 'R'\nc_60 = 'R'\nc_61 = 'R'\nc_62 = 'R'\nc_63 = 'R'\nc_64 = 'R'\nc_65 = 'R'\nc_66 = 'R'\nc_67 = 'R'\nc_68 = 'R'\nc_69 = 'R'\nc_70 = 'R'\nc_71 = 'R'\nc_72 = 'R'\nc_73 = 'R'\nc_74 = 'R'\nc_75 = 'R'\nc_76 = 'R'\nc_77 = 'R'\nc_78 = 'R'\nc_79 = 'R'\nc_80 = 'R'\nc_81 = 'R'\nc_82 = 'R'\nc_83 = 'R'\nc_84 = 'R'\nc_85 = 'R'\nc_86 = 'R'\nc_87 = 'R'\nc_88 = 'R'\nc_89 = 'R'\nc_90 = 'R'\nc_91 = 'R'\nc_92 = 'R'\nc_93 = 'R'\nc_94 = 'R'\nc_95 = 'R'\nc_96 = 'R'\nc_97 = 'R'\nc_98 = 'R'\nc_99 = 'R'\nc_100 = 'R'\nc_101 = 'R'\nc_102 = 'R'\nc_103 = 'R'\nc_104 = 'R'\nc_105 = 'R'\nc_106 = 'R'\nc_107 = 'R'\nc_108 = 'R'\nc_109 = 'R'\nc_110 = 'R'\nc_111 = 'R'\nc_112 = 'R'\nc_113 = 'R'\nc_114 = 'R'\nc_115 = 'R'\nc_116 = 'R'\nc_117 = 'R'\nc_118 = 'R'\nc_119 = 'R'\nc_120 = 'R'\nc_121 = 'R'\nc_122 = 'R'\nc_123 = 'R'\nc_124 = 'R'\nc_125 = 'R'\nc_126 = 'R'\nc_127 = 'R'\nc_128 = 'R'\nc_129 = 'R'\nc_130 = 'R'\nc_131 = 'R'\nc_132 = 'R'\nc_133 = 'R'\nc_134 = 'R'\nc_135 = 'R'\nc_136 = 'R'\nc_137 = 'R'\nc_138 = 'R'\nc_139 = 'R'\nc_140 = 'R'\nc_141 = 'R'\nc_142 = 'R'\nc_143 = 'R'\nc_144 = 'R'\nc_145 = 'R'\nc_146 = 'R'\nc_147 = 'R'\nc_148 = 'R'\nc_149 = 'R'\nc_150 = 'R'\nc_151 = 'R'\nc_152 = 'R'\nc_153 = 'R'\nc_154 = 'R'\nc_155 = 'R'\nc_156 = 'R'\nc_157 = 'R'\nc_158 = 'R'\nc_159 = 'R'\nc_160 = 'R'\nc_161 = 'R'\nc_162 = 'R'\nc_163 = 'R'\nc_164 = 'R'\nc_165 = 'R'\nc_166 = 'R'\nc_167 = 'R'\nc_168 = 'R'\nc_169 = 'R'\nc_170 = 'R'\nc_171 = 'R'\nc_172 = 'R'\nc_173 = 'R'\nc_174 = 'R'\nc_175 = 'R'\nc_176 = 'R'\nc_177 = 'R'\nc_178 = 'R'\nc_179 = 'R'\nc_180 = 'R'\nc_181 = 'R'\nc_182 = 'R'\nc_183 = 'R'\nc_184 = 'R'\nc_185 = 'R'\nc_186 = 'R'\nc_187 = 'R'\nc_188 = 'R'\nc_189 = 'R'\nc_190 = 'R'\nc_191 = 'R'\nc_192 = 'R'\nc_193 = 'R'\nc_194 = 'R'\nc_195 = 'R'\nc_196 = 'R'\nc_197 = 'R'\nc_198 = 'R'\nc_199 = 'R'\nc_200 = 'R'\nc_201 = 'R'\nc_202 = 'R'\nc_203 = 'R'\nc_204 = 'R'\nc_205 = 'R'\nc_206 = 'R'\nc_207 = 'R'\nc_208 = 'R'\nc_209 = 'R'\nc_210 = 'R'\nc_"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n        stdin=input()\n    ) == \"2\"\n"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\\n4\\nRWWR\") == 2\nassert solution(\"1\\n3\\nRRWW\") == 2\nassert solution(\"1\\n2\\nRRR\") == 0\nassert solution(\"1\\n1\") == 0\nassert solution(\"1\\n1\\nW\") == 1\n"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 2, \"\\\"An altar shall only contain two stones from the left, not from the right.\"\n"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input) == 2\n"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"2\"\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin):\n        \"\"\"\n        :type stdin: str\n        :rtype: int\n        \"\"\"\n        N = int(stdin)\n        c = [list(map(int, list(stdin[0:i]))) for i in range(1, N+1)]\n        c.sort(key=lambda x: x[0])\n\n        ans = 0\n        for i in range(N-1, 0, -1):\n            if c[i][0]!= c[i-1][1]:\n                if c[i][1] == c[i-1][0]:\n                    ans += 2\n                else:\n                    ans += 1\n            elif c[i][0] == c[i-1][1]:\n                ans += 1\n            else:\n                ans += 1\n\n        return ans"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == 2\nassert solution(input()) == 2\nassert solution(input()) == 1"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input=input\n) == \"2\"\n\nassert solution(\n    input=input\n) == \"2\"\n"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(a) == (1 - 1) + (4 - 1) + (5 - 1) + (6 - 1) + (7 - 1) + (8 - 1) == (8 - 3) + (8 - 6) == 7\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"3 4 5\"\n) == \"2\"\nassert solution(\n    \"1 4 5\"\n) == \"1\"\nassert solution(\n    \"1 4 5 2 3 4 5\"\n) == \"1 1 1 1 1 1 1 1\"\nassert solution(\n    \"2 3 4 5\"\n) == \"1\"\nassert solution(\n    \"5 6 3 4 2 1 4 3 3\"\n) == \"5\"\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '1000001'\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"2\"\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '1'\nassert solution(input) == '2'\nassert solution(input) == '3'\nassert solution(input) == '5'\nassert solution(input) == '100000'\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(0) == 0\nassert solution(1) == 1\nassert solution(4) == 3\nassert solution(10) == 8\nassert solution(0.5) == 0.5\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('1 0 0 1 0 0 0') == '0'\nassert solution('1 0 1 0 0 0') == '1'\nassert solution('1 0 1 1 0 0') == '0'\nassert solution('1 0 1 1 1 0') == '1'\nassert solution('1 0 1 0 0 0') == '1'\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2 2\\n0 0 0 1\\n1 0 1 1\\n1 0 1 0') == '2'\nassert solution('1 3\\n1 1 0 1 0\\n0 1 1 1 1\\n0 0 1 0 0') == '1'\n\n\n\"\"\"\nclass Solution:\n    def solution(self, n, m):\n        def flat(i, x):\n            if i % 2 == 0:\n                return x + 1\n            else:\n                return x - 1\n        \n        n = n // 2\n        m = m // 2\n        print(n, m)\n        print(n, m)\n        if n < m:\n            return '0' * n + '1' * m\n        else:\n            return '1' * n + '0' * m\n\nprint(Solution().solution(2, 2))\nprint(Solution().solution(1, 3))\nprint(Solution().solution(1, 1))\nprint(Solution().solution(2, 2))\nprint(Solution().solution(2, 1))\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    \"2 3\") == \"3\"\nassert solution(\n    \"1 2\") == \"1\"\nassert solution(\n    \"1 1\") == \"1\"\nassert solution(\n    \"0 0 0 1\") == \"2\"\nassert solution(\n    \"0 0 0 0\") == \"1\"\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= m <= 100\n\nExamples:\nInput\n2 2\n0 0 0 1\n1 0 1 1\n\nOutput\n3\n\nInput\n1 3\n1 1 0 1 0 0\n1 0 1 1\n\nOutput\n2\n\n\n\"\"\"\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n\n\n-----Format-----\n\nFunction Description\n\nComplete the solution in the editor below.\n\n\nsolution has the following parameter:\n\nint n: the number of floors in the house\nint m: the number of flats in each floor\n\nConstraints\n\n\nInput Format\n\nThe first line contains an integer n and m (1 \u2264 n \u2264 100).\nThe second line contains an integer array of two space-separated integers, e.g. 1 2 3 4 5 6 7 8 9, indicating the number of windows on each floor.\n\nConstraints\n\n\nOutput Format\n\nPrint a single integer denoting the number of flats that are on the same floor.\n\n\nSample Input\n\n2\n1 3 1 2\n\nSample Output\n\n1\n\n-----Sample Input Memory Limit-----\n\n3\n1 2 1 2 0 0 0 1 1 0 1\n\n-----Sample Output Memory Limit-----\n\n1\n\n-----Constraints----\n\n1 <= n <= 100\n1 <= m <= 50\n1 <= floor_a, floor_b <= n + floor_c\n\n-----Time Limit-----\n\n4\n\n-----Sample Input Memory Limit-----\n\n3\n1 3 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2\n\n-----Sample Output Memory Limit-----\n\n1\n\n-----Constraints----\n\n1 <= floor_a, floor_b <= n + floor_c\n\nfloor_c <= floor_a + floor_b + floor_c\n\n\n-----Time Limit-----\n\n20\n\n-----Sample Input Memory Limit-----\n\n4\n1 3 2 1 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2\n\n-----Sample Output Memory Limit-----\n\n1\n\n-----Constraints----\n\n1 <= floor_a <= floor_c\n1 <= floor_b <= floor_c\nfloor_a + floor_b <= n + floor_c\nfloor_c <= floor_b + floor_c\n\n\n------Time Limit-----\n\n30\n\n\n------SAMPLE INPUT-------\n\n1 3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 1 1 1 1 1 1 1\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2 1 2 1 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2 1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2 1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2 1 2 1 2 1 2\n\n3\n1 1 1 1 1 1 1 1 1 1\n\n2\n1 2 1 2"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"4\"), \"4\"\nassert solution(\"3\"), \"2\"\nassert solution(\"5\"), \"5\"\nassert solution(\"23\"), \"59\"\nassert solution(\"9\"), \"9\"\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input) == '167'\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('4') == '167'\nassert solution('3') == '582491518'\nassert solution('4') == '582491518'\nassert solution('3') == '53'\nassert solution('4') == '53'\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1\") == \"8\"\nassert solution(\"2\") == \"20\"\nassert solution(\"3\") == \"22\"\nassert solution(\"4\") == \"42\"\nassert solution(\"5\") == \"48\"\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == answer\n\"\"\"\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('3 2 3 4 5') == '8'\nassert solution('4 2 2 2 2') == '10'\nassert solution('3 1 2 2 1') == '20'\nassert solution('3 1 3 2 3') == '17'\nassert solution('3 2 3 4 5') == '5'\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '582491518'\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5\") == \"582491518\"\nassert solution(\"3\") == \"582491518\"\nassert solution(\"4\") == \"53\"\nassert solution(\"5\") == \"582491518\"\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '582491518'\nassert solution(input()) == '582491518'\nassert solution(input()) == '582491518'\nassert solution(input()) == '582491518'\nassert solution(input()) == '582491518'\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == answer\n\n\n\nInput\n\n4\n1 2 4 3 5\n\nOutput\n63\n\"\"\"\n\nimport itertools\n\nn = int(input())\n\nmatrix = []\nfor _ in range(n):\n    row = list(map(int, input().split()))\n    matrix.append(row)"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 3\") == \"4\"\nassert solution(\"10 3 1\") == \"7\"\nassert solution(\"10 3 1 2\") == \"3\"\nassert solution(\"10 3 1 2 3\") == \"3\"\nassert solution(\"10 3 1 2 3 4\") == \"3\"\n"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '4'"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['1', '1', '1', '2', '2', '3']) == '1'\nassert solution(['1', '2', '1', '3', '3', '2']) == '3'\nassert solution(['1', '3', '1', '1']) == '1'\nassert solution(['1', '2', '2', '2']) == '1'\nassert solution(['1', '1', '1', '1', '2', '2', '3', '3', '3']) == '3'\n"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n    [\n        (5, 3, 1),\n        (5, 3, 2),\n        (5, 3, 3),\n        (5, 3, 1)\n    ]) == \"9\"\n    \nassert solution(\n    [\n        (5, 3, 1),\n        (5, 3, 2),\n        (5, 3, 3),\n        (5, 3, 1)\n    ]) == \"9\"\n    \nassert solution(\n    [\n        (5, 3, 1),\n        (5, 3, 2),\n        (5, 3, 3),\n        (5, 3, 1)\n    ]) == \"9\"\n    \nassert solution(\n    [\n        (5, 3, 1),\n        (5, 3, 2),\n        (5, 3, 3),\n        (5, 3, 1)\n    ]) == \"9\"\n    \nassert solution(\n    [\n        (5, 3, 1),\n        (5, 3, 2),\n        (5, 3, 3),\n        (5, 3, 1)\n    ]) == \"9\"\n    \n"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"4\"\nassert solution(\"10 3\") == \"4\"\nassert solution(\"10 3\") == \"4\"\nassert solution(\"10 3\") == \"4\"\nassert solution(\"10 3\") == \"4\"\n"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 4') == '3'\nassert solution('2 1 1') == '3'\nassert solution('1 5') == '3'\nassert solution('3 4') == '4'\nassert solution('4 4') == '3'\n"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 10\"\nassert solution(stdin) == \"12 7\"\n\"\"\"\n\nclass Solution:\n    def maxQueueSize(self, tasks: List[int]) -> int:\n        tasks.sort()\n        \n        size = 0\n        \n        for i in range(1, len(tasks)):\n            if tasks[i-1] - tasks[i] > size:\n                size = tasks[i] - tasks[i-1] + 1\n        \n        return size"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '12 7'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '1000010 10'\n"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 1') == '3 10'\nassert solution('2 1 1 1') == '2 7'\nassert solution('3 1 1 1 1') == '12 7'\nassert solution('3 3 3 3') == '0'\nassert solution('3 3 3 4 4 4 4') == '3'\n"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"7 10\"\nassert solution(inp) == \"7 10\"\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        N = len(stdin)\n        N1 = N//2\n        N2 = N - N1\n        Queue = list(range(N+1))\n        T = []\n        for i in range(N1):\n            T.append([0, Queue.pop(0)])\n        T.sort()\n        max_Queue = 0\n        for i in range(N2):\n            max_Queue += T[i][1]\n        print(max_Queue)\n        return str(max_Queue)"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(1000010 10)\nassert solution(stdin) == str(1000010 10)\nassert solution(stdin) == str(1000010 10)\n\n\n-----References-----\n\n[Bubble Sort](https://www.jianshu.com/p/4a7e3a3e1b45)\n[Bubble Sort](https://www.dafenw.com/computer-science/recipes/2021/01/23/bubble-sort)\n[Heapsort](https://www.geeksforgeeks.org/heapsort/)\n[Insertion sort](https://www.geeksforgeeks.org/insertion-sort/)\n[Merge Sort](https://www.geeksforgeeks.org/merge-sort/)\n[Merge Sort](https://www.geeksforgeeks.org/merge-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick sort](https://www.geeksforgeeks.org/quick-sort/)\n[Quick"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 1 1\") == \"3 1 1\"\nassert solution(\"3 1 1\") == \"12 7\"\n\n\"\"\"\n\nclass Node:\n    def __init__(self, key):\n        self.key = key\n        self.left = None\n        self.right = None"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"14\"\n\nprint(solution(input()))\n\n-----Constraints-----\n\n1 <= n <= 10^6\nt_i < t_i + 1 for all integer i (1 \u2264 i < n)\n0 <= c_i <= 10^6\n\n-----Time Limit-----\n1 minute\n\nExample 1:\n\nInput\n2\n1 1\n2 1\n\nOutput\n1 10\n\nExample 2:\n\nInput\n1\n2\n3 2\n4 3\n5 3\n\nOutput\n2 2\n\nExplanation:\nThe first two tasks are (2, 2), (3, 3), and (4, 2).\nThe last two tasks are (2, 1), (3, 2), (4, 2).\nThus, the maximum queue size is 2.\nExample 3:\n\nInput\n3\n3 3\n4 3\n5 3\n\nOutput\n4 4\n\nExplanation:\nThe last three tasks are (2, 1), (3, 3), and (4, 2).\nThe maximum queue size is 4.\nExample 4:\n\nInput\n1\n3\n3 1\n4 3\n5 3\n\nOutput\n1\n\nExplanation:\nThe last one is (2, 1), and the maximum queue size is 1.\n\"\"\"\nimport time\nfrom collections import deque\n"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"12 7\"\n"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2 3 4 5 6 7 8 9 10 11 12\") == \"11 10 11 10 10\"\nassert solution(\"1 3 5 7\") == \"5\"\nassert solution(\"1 3 5 1\") == \"5\"\nassert solution(\"1 2 4 4 1 2 3 3\") == \"3\"\nassert solution(\"1 1 1 1 1 1 1 1 1\") == \"1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"1000110\"\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2.8284272\""
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"2 2\") == \"-1\"\nassert solution(\"2 1\") == \"1.4142136\"\nassert solution(\"2 -2\") == \"2\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"2 -2\") == \"2\"\n"
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"2.8284271\"\nassert solution(input()) == \"1.4142136\"\n"
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"-1\"\n"
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2 3 2\") == \"2.4142136\"\nassert solution(\"2 2\") == \"2.4142136\"\nassert solution(\"4 999998\") == \"-1\"\n"
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"2 2 3\") == \"1.4142136\""
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"5 7 1000 6\"\n) == \"-1\"\nassert solution(\n    \"5 7 1000 4\"\n) == \"10.2833688\"\nassert solution(\n    \"5 7 1000 4\"\n) == \"10.2833688\"\n"
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 2 3 4\") == \"-1\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n1 <= stdin[i] <= 10^6\n1 <= stdin[i][j] <= 10^9\nstdin[i] is one of the following integers:\n\n1,\n2,\n3,\n4\n\n1 <= x_i, y_i, k_i <= 10^5\nk_i is a positive integer.\n\n1 <= x_i <= 100\n0 <= y_i <= 100\n1 <= k_i <= 10^5\n\nThe city is surrounded by n other locations.\n\n0 <= x_i, y_i, r <= 100\n0 <= x_i <= 100\n0 <= y_i <= 100\n0 <= k_i <= 10^5\n\nExample 1:\n\nInput:\n2 1 3 4\n2 2 1\n2 3 2\n3 3 1\n3 2 1\n3 -2 1\n3 4 5\n\nOutput:\n3.41421356\n\nExample 2:\n\nInput:\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n1 1 1\n\nOutput:\n1.41421356\n\"\"\"\n\nclass Solution:\n    def __init__(self):\n        self.population = list()\n        self.r = float('inf')\n\n    def diameter(self, edges: List[List[int]]) -> int:\n        self.population = edges\n        self.r = self.get_r()\n\n        return self.r\n\n    def get_r(self):\n        def calc_r(x1, y1, x2, y2, k):\n            return (y2 - y1) / (x2 - x1) * (k + 1) + y1\n\n        result = 0\n\n        for i in range(len(self.population) - 1):\n            x1, y1, x2, y2 = self.population[i], self.population[i + 1], self.population[i + 2], self.population[i + 3]\n            k1 = self.population[i + 4]\n            k2 = self.population[i + 5]\n\n            result += calc_r(x1, y1, x2, y2, k1)\n            result += calc_r(x1, y1, x2, y2, k2)\n        return result + 2\n\n    def get_r_bfs(self):\n        if len(self.population) == 0:\n            return -1\n\n        result = 0\n\n        queue = collections.deque([(self.population[0], 0)])\n\n        for x, y in self.population[1:]:\n            if not queue:\n                queue.append((x, y))\n\n            while queue:\n                _, r = queue.popleft()\n\n                if r > result:\n                    result = r\n\n                if x < r <= y:\n                    queue.append((x + 1, y))\n                    queue.append((x - 1, y))\n                    queue.append((x, y + 1))\n                    queue.append((x, y - 1))\n\n        return result\n"
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1.4142136\"\n"
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"2.8284271\"\n\nassert solution(stdin) == \"1.4142136\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == m\nassert inp[0] + 1 == m\nassert m > 0\nassert all(int(i) <= m for i in inp[1:])"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4 9\") == 1\nassert solution(\"1 2\") == 1\nassert solution(\"1 16\") == 1\nassert solution(\"1 16\") == 2\nassert solution(\"1 16\") == 2\n"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '2'\n\nassert solution(\"3 2 3 5 2 4 3 3\") == '2'\n\nassert solution(\"3 3 1 3 2 3 3\") == '3'\n\nassert solution(\"7 4 2 4 4\") == '2'\n"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(1,2,1,2,8,1,16,1) == 1\nassert solution(4,9,1,2,8,1,16,1) == 1\nassert solution(9,3,1,2,8,1,16,1) == 3\nassert solution(4,9,1,2,8,1,16,1) == 3\nassert solution(9,3,1,2,8,1,16,1) == 4"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n        \"1 2 3 4 5 6 7 8 9\",\n        \"2 8\",\n        \"1 16\"\n    ) == \"1 1\"\nassert solution(\n        \"1 2 3 4 5 6 7 8 9\",\n        \"2 8\",\n        \"1 16\"\n    ) == \"3 2\"\nassert solution(\n        \"1 2 3 4 5 6 7 8 9\",\n        \"2 8\",\n        \"1 16\"\n    ) == \"3 2 1\"\nassert solution(\n        \"1 2 3 4 5 6 7 8 9\",\n        \"2 8\",\n        \"1 16\"\n    ) == \"2 1\"\nassert solution(\n        \"1 2 3 4 5 6 7 8 9\",\n        \"2 8\",\n        \"1 16\"\n    ) == \"1 2 3 4 5 6 7 8 9\"\n"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"1 2 4 2 3 2\"\n    \"5\"\n    \"2 1 4 3\"\n    \"1 1\"\n    \"1 2 4\"\n    \"5\"\n    \"2 2 2 2 1\"\n    \"4\"\n    \"1 3 1\"\n    \"3\"\n    \"1 2\"\n    \"2 3\"\n    \"2 3\"\n    \"3 3\"\n    \"2 3 2\"\n    \"3 4\"\n    \"1 1\"\n    \"2 1\"\n    \"2 2 2 2 1\"\n    \"1\"\n    \"4\"\n    \"4\"\n    \"3\"\n    \"2 1 3\"\n    \"4 1 4\"\n    \"1 1 4 3\"\n    \"2 2 4\"\n    \"3 4 1\"\n    \"3 2 2\"\n    \"2 3 3\"\n    \"3 2 3\"\n    \"3 4 4\"\n    \"2 3 3 4\"\n    \"3 3 3 4\"\n    \"1 1 4\"\n    \"2 2 2 2 1\"\n    \"3 3 3 4\"\n    \"2 3 3\"\n    \"3 3\"\n    \"2 2 3\"\n    \"4 4 2\"\n    \"2\"\n    \"1 3\"\n    \"2 1\"\n    \"1 3 2\"\n    \"1 1 2\"\n    \"2 2\"\n    \"2 3 3 2\"\n    \"3 3 4 3\"\n    \"3 4 3\"\n    \"4 4 3 2\"\n    \"3 4 3 4\"\n    \"2 2 4\"\n    \"4 4 3\"\n    \"1 1\"\n    \"1 2\"\n    \"1 3 2\"\n    \"1 3\"\n    \"3 2 3\"\n    \"3 3 4\"\n    \"2 3 3\"\n    \"2 4 3\"\n    \"3 4 3\"\n    \"2 3 3 2\"\n    \"2 4 3 4\"\n    \"3 4 3\"\n    \"3 4 3\"\n    \"4 4 3 2\"\n    \"3 4 3 4\"\n    \"3 4 3\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4 4 3\"\n    \"4 4 3\"\n    \"4 4 3 2\"\n    \"4 4 3 4\"\n    \"4"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == [1, 4]\n"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1 2'"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == str(1)\nassert solution(input()) == str(1)\nassert solution(input()) == str(1)\nassert solution(input()) == str(1)\nassert solution(input()) == str(1)\n"
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == 2\nassert solution(\"4\") == 2\nassert solution(\"5\") == -1\nassert solution(\"4 3\") == 2\nassert solution(\"5 1\") == 3\n\nRuntime: 28 ms, faster than 9.34% of Python3 online submissions for Set S.\nMemory Usage: 18.1 MB, less than 46.83% of Python3 online submissions for Set S.\n\nclass Solution:\n    def setSize(self, S: int) -> int:\n        return math.ceil(math.log2(S + 1))\n"
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(0) == '-1'\nassert solution(1) == '-1'\nassert solution(2) == '-1'\nassert solution(3) == '-1'\nassert solution(4) == '-1'\n"
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(5, 5) == 2\nassert solution(4, 3) == 3\nassert solution(5, 1) == -1\nassert solution(1, 1) == -1\nassert solution(5, 4) == 3\n"
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(test) == \"3\"\nassert solution(input) == \"2\"\nassert solution(map(int,input().split())) == \"3\""
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 2\nassert solution(5) == 3\nassert solution(4) == -1\n\n\n-----IMPORTS-----\n\nimport itertools\nimport math\n\nn = int(input())\n\nL = input().split()\n\na = list(itertools.product([0, 1], repeat=n))\n\nfor i in a:\n    print(sum(i))\n\nassert solution(n) == -1\n"
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\nassert solution(input()) == '-1'\n"
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5,5) == 2\nassert solution(4,3) == 3\nassert solution(5,1) == -1\n\n\"\"\""
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0') == '-1', 'The solution function failed!'\nassert solution('1') == '-1', 'The solution function failed!'\nassert solution('2') == '-1', 'The solution function failed!'\nassert solution('3') == '-1', 'The solution function failed!'\nassert solution('4') == '-1', 'The solution function failed!'\n"
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('') == -1\nassert solution('1') == 3\nassert solution('2') == 1\nassert solution('3') == 3\nassert solution('4') == 1\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('qux' == 'qxx') == 1, 'expected 1, got {}'.format(solution('qux' == 'qxx'))\nassert solution('m') == 3, 'expected 3, got {}'.format(solution('m'))\nassert solution('qux') == 0, 'expected 0, got {}'.format(solution('qux'))\nassert solution('c') == 2, 'expected 2, got {}'.format(solution('c'))\nassert solution('aaaa') == 2, 'expected 2, got {}'.format(solution('aaaa'))\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"oi\") == \"2\"\nassert solution(\"oii\") == \"0\"\nassert solution(\"ooo\") == \"0\"\nassert solution(\"oiio\") == \"0\"\nassert solution(\"oiio\") == \"0\"\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 1\nassert solution(stdin) == 3\nassert solution(stdin) == 0\n\"\"\""
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"ouuokarinn\") == 4\nassert solution(\"banana\") == 1\nassert solution(\"nnn\") == 3\nassert solution(\"amanda\") == 0\nassert solution(\"owokarim\") == 0\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('banana') == 3\nassert solution('amanda') == 0\nassert solution('apple') == 1\nassert solution('appleappleapple') == 0\nassert solution('appppapppapppppapppppppappppp') == 3\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"banana\", \"woooow\"]) == \"4\"\nassert solution([\"banana\", \"nnn\"]) == \"1\"\nassert solution([\"bana\", \"wo\"]) == \"0\"\nassert solution([\"bana\"]) == \"0\"\nassert solution([\"banana\", \"w\", \"o\", \"d\", \"e\", \"i\", \"n\", \"n\", \"m\"]) == \"3\"\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"ouuokarinn\", \"ouuokarim\", \"owokarim\", \"owokarinn\"]) == \"4\"\nassert solution([\"banana\"]) == \"1\"\nassert solution([\"nnn\"]) == \"3\"\nassert solution([\"amanda\"]) == \"0\"\nassert solution([\"mn\", \"mn\"]) == \"0\"\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ouuokarinn\") == 4\nassert solution(\"banana\") == 1\nassert solution(\"nnn\") == 3\nassert solution(\"amanda\") == 0\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"ouuokarinn\", \"ouuokarim\", \"owokarim\", \"owokarinn\"]) == \"3\"\nassert solution([\"banana\"]) == \"0\"\nassert solution([\"amanda\"]) == \"0\"\nassert solution([\"hnoparim\", \"hnoparim\", \"hnoparim\", \"hnoparim\"]) == \"0\"\nassert solution([\"nmm\"]) == \"0\"\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\n\"\"\"\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '11'\n'''\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 11\n\n\"\"\""
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 11\n\nInput\n3\ngennady\ngalya\nboris\nbill\ntoshik\nbilbo\ntorin\ngendalf\nsmaug\ngaladriel\n\nOutput\n11\n4 1\n2 5\n1 3\n5 2\n3 4\n\n\n\n-----Note-----\n\nThe second test from the statement the match looks as follows:   bill  \u2192  bilbo (lcp = 3)  galya  \u2192  galadriel (lcp = 3)  gennady  \u2192  gendalf (lcp = 2)  toshik  \u2192  torin (lcp = 0)  boris  \u2192  smaug (lcp = 0)\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"gennady\") == \"gennady\"\nassert solution(\"gennady\") == \"gennady\"\nassert solution(\"gennady\") == \"gennady\"\nassert solution(\"gennady\") == \"gennady\"\nassert solution(\"gennady\") == \"gennady\"\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 11\n\n-----Reference-----\nhttps://www.geeksforgeeks.org/minimum-common-prefix-length-of-a-string/\nhttps://www.geeksforgeeks.org/minimum-common-prefix-length-of-a-string/\n\n\"\"\"\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 11, 'output is incorrect'\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"gennady\") == \"bilbo\"\nassert solution(\"gennady\") == \"galadriel\"\nassert solution(\"gennady\") == \"gendalf\"\nassert solution(\"gennady\") == \"toshik\"\nassert solution(\"gennady\") == \"torin\"\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == 5, 'Solution is incorrect'\n\n'''\nclass Solution:\n    def solution(self,n):\n        n = n.lower()\n        n = list(n)\n        n = [c for c in n if c in 'abcdefghijklmnopqrstuvwxyz']\n        \n        result = ''\n        \n        for i in range(len(n)):\n            result += n[i]\n            if i < len(n)-1:\n                result += '-'\n        \n        return result\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 10, 'Your solution is not correct.'"
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"110\") == \"010\"\nassert solution(\"010\") == \"010\"\nassert solution(\"0111001100111011101000\") == \"0011001100001011101000\"\nassert solution(\"00011111\") == \"0000000\"\nassert solution(\"0111001100001011101000\") == \"0011001100001011101000\""
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0111001100111011101000\") == \"0111001100111011101000\"\nassert solution(\"0111001100111011101000\") == \"0011001100001011101000\"\nassert solution(\"0111001100111011101000\") == \"0111001100111011101000\"\nassert solution(\"0111001100111011101000\") == \"010\"\nassert solution(\"0001111\") == \"10111010010\"\n"
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"010\"\n\"\"\"\n"
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"011010110101\"\n"
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"010\"\nassert solution(stdin) == \"01011\"\nassert solution(stdin) == \"011010\"\nassert solution(stdin) == \"011011\"\nassert solution(stdin) == \"01110\"\n"
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"011\") == \"10\"\nassert solution(\"010\") == \"0101\"\nassert solution
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(['010', '011', '100', '101', '1011']), 5\nassert solution(['011', '010']), 2\nassert solution(['100', '1011']), 1\nassert solution(['010']), 1\nassert solution(['010']), 0\n"
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '010'\nassert solution(stdin) == '0111001100111011101000'\nassert solution(stdin) == '0011001100001011101000'\nassert solution(stdin) == '01111101000110010010'\nassert solution(stdin) == '01111101000110010010'\n"
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"010\"\nassert solution(stdin) == \"010100110100000101\"\nassert solution(stdin
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '010'\nassert solution(stdin) == '010'\nassert solution(stdin) == '011'\nassert solution(stdin) == '011'\nassert solution(stdin) == '011'\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '1'\nassert solution(input()) == '3'\nassert solution(input()) == '1'\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"1 6\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"..#\") == \"1\"\nassert solution(\"..##\") == \"0\"\nassert solution(\"######\") == \"1\"\nassert solution(\"###.#\") == \"0\"\nassert solution(\"....##\") == \"0\"\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4 3 2 1 6 5 3 6 1') == '1 1'\nassert solution('#......') == '0 0'\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(string=\"3 4\") == solution(string=\"5\")\nassert solution(string=\"3 4 3\") == solution(string=\"6 6\")\nassert solution(string=\"2 3\") == solution(string=\"5 6\")\nassert solution(string=\"2 5\") == solution(string=\"4\")\nassert solution(string=\"1 6\") == solution(string=\"2 6\")\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1 2 1 3 5 6 0\"\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 2 3 4 5 6') == '1 1 1 2 2 2 0 1 2 2 0 1 2'\nassert solution('3 5') == '5 5'\nassert solution('1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1') == '1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 2\n\n- Repeat with a different input:"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= stdin.length <= 1000\n1 <= h_{i} <= 10^9\n\n\n------Code-------\n\nh_{i} = 10^9\n1 <= h_{i} <= 10^9\n\n\"\"\"\n\n\nimport math"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    stdin = '3'\n    ) == '3'\nassert solution(\n    stdin = '4'\n    ) == '2'\n\n\n\n-----Constraints-----\n0 <= stdin.length <= 10000\n\n.\n\n\n'''"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 5\") == \"3\"\nassert solution(\"5 5\") == \"2\"\nassert solution(\"7 3\") == \"2\"\nassert solution(\"9 7\") == \"3\"\nassert solution(\"1 2\") == \"1\"\n"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '2'\n\n\n-----My Solution-----\n\nPartitioning the sorted blocks can be accomplished using a map and a for-loop to achieve this.\n\nDefine a for-loop that builds a partitioning of the blocks (from 1 to n) that are ordered by their height.\n\nThe partitioning is made up of blocks with equal heights that are ordered by their heights.\n\nThen, split the blocks in order that makes the partitioning satisfying this condition.\n\nThe partitioning should satisfy this condition. \n\nIf the partitioning has to be made, you should return the length of the block partitioning. \n\nExample\n\nFor input = 1, the partitioning is [1] which should return 2.\n\nFor input = 2, the partitioning is [1, 2] which should return 3.\n\nFor input = 3, the partitioning is [1, 2, 3] which should return 4.\n\nInput\n\n3\n1 2 3\n\nOutput\n\n4\n\n------Solution-----\n\nPartitioning the sorted blocks could be accomplished by a map and a for-loop. The partitioning is made up of blocks with equal heights that are ordered by their heights.\n\nThen, split the blocks in order that makes the partitioning satisfying this condition.\n\n\n\n\"\"\""
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin = \"3 2 4 3\"\n    ) == \"2\"\n\n\n-----Constraints-----\n0 \u2264 stdin.length \u2264 100,000\n1 \u2264 h_{i} \u2264 10^9\n0 \u2264 i < stdin.length\n\nExample 1:\nInput:\n3\n1 2 4\n\nOutput:\n3\n\nExplanation:\nsquidward is in [1, 2, 4].\npatrick is in [1, 2, 3].\npatrick and squidward are not in the same block.\npatrick and squidward are in the same block.\npatrick and squidward are in a block.\npatrick and squidward are in the same block.\n\n\nExample 2:\nInput:\n3\n2 1 3 4\n\nOutput:\n2\n\nExplanation:\nsquidward is in [1, 2, 3].\npatrick is in [1, 2, 4].\npatrick is in the same block.\npatrick is in the same block.\npatrick and squidward are not in the same block.\npatrick and squidward are in the same block.\npatrick and squidward are in a block.\npatrick and squidward are in the same block.\n\n\nExample 3:\nInput:\n3\n1 2 3 4 5\n\nOutput:\n5\n\nExplanation:\npatrick and squidward are in the same block.\npatrick is in the same block.\npatrick and squidward are in a block.\npatrick and squidward are in the same block.\npatrick is in the same block.\npatrick and squidward are in a block.\npatrick and squidward are in the same block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\npatrick and squidward are in a block.\n\n\n------------------Example--------------\nInput:\n3\n2 1 2\n\nOutput:\n2\n\n------------------Example--------------\n\nInput:\n2\n2\n\nOutput:\n2\n\n------------------Example--------------\n\nInput:\n2\n5\n\nOutput:\n1\n\n\n\n\n\nInput:\n1\n1\n\nOutput:\n1\n\n------------------Example--------------\n\nInput:\n1\n5\n\nOutput:\n1\n\n------------------Example--------------\n\nInput:\n2\n1\n\nOutput:\n2\n\n------------------Example--------------\n\nInput:\n3\n1 2 3\n\nOutput:\n1\n\n------------------Example--------------\n\nInput:\n3\n1 2\n1 3 4\n\nOutput:\n3\n\n------------------Example--------------\n\nInput:\n4\n2 3 4 2\n\nOutput:\n1\n\n------------------Example--------------\n\nInput:\n6\n1 3 2 4 5 6\n\nOutput:\n10\n\n\n------------------Example--------------\n\nInput:\n5\n5\n2 3 4\n5 2 3\n5 5 6\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5 4\n5 5 4\n5 4 3\n4 3 5\n5 5"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == 2\nassert solution(4) == 3\n\n\n-----Constraints-----\n1 \u2264 n \u2264 100 000.\n\n\n-----Time Limit: 1 Minute-----\nO(n)\n\n\n-----Space Complexity: O(n) -----\nO(n)\n\n\n-----Efficiency-----\nO(n)\n"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 2 3\") == \"3\"\nassert solution(\"1 2 3\") == \"2\"\nassert solution(\"1 2 3\") == \"3\"\nassert solution(\"2\") == \"1\"\nassert solution(\"1 2 3\") == \"3\"\n"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 0\") == \"1 1\"\nassert solution(\"1 3 0\") == \"1 4\"\nassert solution(\"1 5 0\") == \"1 6\"\nassert solution(\"1 7 0\") == \"1 8\"\nassert solution(\"1 8 0\") == \"1 9\"\n"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"3 5\"\n\nassert solution(stdin) == \"4 5\"\nassert solution(stdin) == \"5 1\"\n\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 6\"\n\n\n-----Advanced-----\n\nFirst, you have to remove points from the n points that are not perfectly balanced. Then, for each point $x_i$, $y_i$, $z_i$ (and so on), remove all points with indices $a_i, b_i$ (and so on).\n\nThen, remove all points that are not perfectly balanced.\n\nThen, remove all points that are not perfectly balanced.\n\nAfter removing points from the two points that are perfectly balanced, return a list of the indices of the points that remain.\n\nFor example, for n = 10, and you have $a_1 = 1, b_1 = 1$, then $a_2 = 2, b_2 = 0$, $a_3 = 2, b_3 = 3, a_4 = 1, b_4 = 0$, and so on.\n\n$n$ is odd, so you can remove every pair of points, and each pair of points are represented by $a_i, b_i$.\n\nIn this case, $a_1 = 1, b_1 = 1$, and $a_2 = 2, b_2 = 0$, $a_3 = 2, b_3 = 3, and so on.\n\nNow, you can remove $a_i, b_i$ because they are perfectly balanced.\n\nIn this case, you are removing all pairs of points that are perfectly balanced.\n\nNow, you are removing $a_i, b_i$ because they are not perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nThen, you are removing all pairs of points that are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_i$ because they are perfectly balanced.\n\nFinally, you are removing $a_i, b_"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 6'\n\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= x_i, y_i, z_i <= 10^8\n\n------Time Complexity------\nO(n)\n\n------Space Complexity------\nO(n)\n'''\nclass Solution:\n    def removePoints(self, points: List[List[int]]) -> List[int]:\n        def closestPoint(p, a, b):\n            return min(abs(p[0] - a[0]), abs(p[1] - a[1]), abs(p[2] - a[2])) + abs(p[0] - b[0]) + abs(p[1] - b[1]) + abs(p[2] - b[2])\n        \n        def possible(p, l, u, a, b):\n            return (closestPoint(p, a, b) > closestPoint(p, a, l) + closestPoint(p, l, b)) or (closestPoint(p, a, b) > closestPoint(p, l, a) + closestPoint(p, a, u) + closestPoint(p, b, u))\n        \n        def binSearch(l, u, a, b, index):\n            mid = int((l + u) / 2)\n            if possible(p[index], l, mid, a, b):\n                return binSearch(mid + 1, u, a, b, index + 1)\n            else:\n                return binSearch(mid + 1, l, a, b, index + 1)\n        \n        p = [[0 for j in range(3)] for i in range(len(points) + 1)]\n        for i in range(len(points) + 1):\n            p[i] = [0 for j in range(3)]\n        \n        for i in range(len(points)):\n            for j in range(i + 1):\n                if possible(points[i], j, i, points[j], points[i]):\n                    p[i] = p[j]\n                else:\n                    p[i] = [0, 0, 0]\n        \n        distances = []\n        for i in range(len(points)):\n            for j in range(i + 1):\n                if possible(points[i], j, i, points[j], points[i]):\n                    distances.append(i)\n                else:\n                    distances.append(i)\n        distances.sort()\n        \n        index = distances[0]\n        result = []\n        for i in range(len(points)):\n            result.append(points[index])\n            index = binSearch(distances[0], distances[-1], points[i], points[index], index)\n        \n        return result"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"1 6\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3 6\"\n\n\n-----Constraints-----\n1 <= n <= 50\n\n1 <= x_i, y_i, z_i \\le 10^8\n\n0 <= a_i, b_i \\le n\n\n\"\"\")"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"2 4\", \"1 4\", \"1 5\", \"0 3\", \"1 1\", \"0 0\"]) == \"2 1\"\nassert solution([\"0 0\", \"0 0\", \"0 0\"]) == \"3 7\"\nassert solution([\"0 0\", \"0 0\", \"1 0\", \"1 0\", \"0 0\"]) == \"3 4\"\nassert solution([\"0 0\", \"0 0\", \"1 0\", \"1 0\", \"1 0\", \"0 0\"]) == \"3 7\"\n\nInput\n\n13\n0 1 0\n1 0 1\n1 1 0\n1 1 0\n1 1 0\n1 1 0\n1 1 0\n\nOutput\n1 3\n2 6\n3 5\n\nInput\n\n7\n0 1 1\n1 0 1\n1 1 0\n1 1 0\n1 1 0\n1 1 0\n1 1 0\n1 1 0\n1 1 0\n\nOutput\n4 7\n3 5\n\n'''"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"4 5\"\nassert solution(stdin) == \"1 6\"\n\n-----Performance-----\nFor $i = 1, 2,..., n$, there are $n$ unique points and $n \\le 5$, there are $n \\le 2$, there are $n \\le 1$, and we can delete any pair of points $a$ and $b$ that are not in the same snap. For example, if there are $n \\le 5$, then it is possible to delete any pair of points $a$ and $b$ that are not within the bounding box of the first pair of points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered from $1$ to $n$, and there are $n \\le 50\\,000$ unique points.\n\nThere are $n$ distinct points in three-dimensional space numbered"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3 6\"\n\nassert solution(stdin) == \"5 1\"\n\nassert solution(stdin) == \"4 5\"\n\nassert solution(stdin) == \"1 6\"\n\nassert solution(stdin) == \"1 7\""
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"3 6\"\nassert solution(input()) == \"3 6\"\nassert solution(input()) == \"3 6\"\nassert solution(input()) == \"3 6\"\nassert solution(input()) == \"3 6\"\n"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, [3, -1, -2, 3, -6, 6, 0]) == 6\nassert solution(3, [0, -3, 4, 2, -4]) == 2\nassert solution(5, [5, -3, 4, 2, -6, -1, 0, 2, 3, -1, 1, 3, 0]) == 3\nassert solution(4, [-1, -2, 0, 3, 2, 0, 4, 2]) == 4\nassert solution(6, [-1, 0, 3, 2, 0, 4, 2, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == 4\n\n-----Constraints-----\n1 <= n <= 10^4\n1 <= a_i <= 10^9\n\nn!= 1\na_i!= 0\na_i is not used in any position.\n\n1 <= f(a_i, a_i) <= 10^7\nf(a_1, a_2) = f(a_2, a_1) = f(a_1, a_2) = f(a_1, a_2) = f(a_1, a_2) = f(a_1, a_2)\n\n1 <= f(f(a_1, a_2), a_2) <= 10^7\nf(f(f(a_1, a_2), a_2), a_2) = f(f(a_1, a_2), a_2) = f(f(a_1, a_2), a_2) = f(f(a_1, a_2), a_2)\n\n1 <= a_i <= 10^9\n-10^6 <= f(a_i, -10^6) <= 10^7\nf(a_1, a_i) = f(a_i, -10^6) = f(a_i, -10^6)\nf(a_i, -10^6) = f(a_i, -10^6) = f(a_i, -10^6)\n\n$[0, 10^6, 1, 10^6, 4, 0, 0, 6, 4, 0, 0]$ is also a valid answer\n$[0, 10^6, 1, 10^6, 4, 0, 0, 6, 4, 0, 0, 0, 0]$ is also a valid answer\n$[0, 10^6, 1, 10^6, 4, 0, 0, 6, 4, 0, 0, 0, 0, 0]$ is also a valid answer\n$[0, 10^6, 1, 10^6, 4, 0, 0, 6, 4, 0, 0, 0, 0, 0, 0]$ is also a valid answer\n$[0, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]$ is also a valid answer\n$[0, 2, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]$ is also a valid answer\n$[0, 1, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]$ is also a valid answer\n$[0, 2, 1, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]$ is also a valid answer\n\n\"\"\""
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '10'\nassert solution(input()) == '11'\nassert solution(input()) == '13'\nassert solution(input()) == '13'\nassert solution(input()) == '13'\n"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"11 6 4\"\n\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n\n\n-----SAMPLE CASE 1-----\nInput\n2\n3 0 1 2\n\nOutput\n2\n\n\n-----SAMPLE CASE 2-----\nInput\n3\n3 1 0 3\n\nOutput\n3\n\n\n-----SAMPLE CASE 3-----\nInput\n4\n3 5 7 0\n\nOutput\n5\n\n\n-----SAMPLE CASE 4-----\nInput\n4\n4 4 0 1\n\nOutput\n0\n\n\n-----SAMPLE CASE 5-----\nInput\n3\n3 3 3 3\n\nOutput\n0\n\n\n-----SAMPLE CASE 6-----\nInput\n3\n3 3 3 2\n\nOutput\n2\n\n-----SAMPLE CASE 7-----\nInput\n1\n0 1 2\n\nOutput\n0\n\n\n-----SAMPLE CASE 8-----\nInput\n0\n3 0 1 2\n\nOutput\n3\n\n\n-----SAMPLE CASE 9-----\nInput\n1\n0 1 2\n\nOutput\n0\n\n\n-----SAMPLE CASE 10-----\nInput\n0\n5 0 1 2\n\nOutput\n5\n\n-----SAMPLE CASE 11-----\nInput\n2\n2 2 1 2\n\nOutput\n1\n\n\"\"\"\nn = int(input())\na = list(map(int, input().split()))\n\ndic = {}\n\nfor i in range(n):\n    if a[i] not in dic:\n        dic[a[i]] = [a[i]]\n    else:\n        dic[a[i]].append(a[i])\n\nresult = 0\n\nfor i in dic.values():\n    if len(i) > 1:\n        result = max(result, len(i))\n\nprint(result)"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"2 2\") == \"6 0\"\nassert solution(\"3 3\") == \"3 3\"\nassert solution(\"1 1\") == \"1 1\""
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 1\") == \"4 0\"\nassert solution(\"0 0 0 0 0 0\") == \"6\"\nassert solution(\"0 0 0 0 1\") == \"6\"\nassert solution(\"0 0 0 2 0 0\") == \"4\"\nassert solution(\"1 0 0 0 0 0\") == \"1\"\n"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('0') == '11'\nassert solution('0') == '9'\nassert solution('0') == '9'\nassert solution('0') == '9'\nassert solution('0') == '9'\n"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(test_cases) == \"11 6 4\"\nprint(solution(input()))\n------------------\ninput:\n5\n10\n11 -4 5\n6 6 -1 2\n10 -6 -6 3\n8 2 -1 7\n7 -8 -1 -3 -4 -5\n10 2 -2 -2 -2 -2 -2\n\nanswer:\n11 6 4\n11 -4 5\n10 6 -1 2\n10 -6 -6 3\n8 2 -1 7\n7 -8 -1 -3 -4 -5\n8 2 -2 -2 -2 -2 -2\n11 6 4\n10 6 -1 2\n10 -6 -6 3\n11 -4 5\n\n'''\n\nimport math"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '9'\nassert solution(stdin) == '11'\nassert solution(stdin) == '13'\nassert solution(stdin) == '11'\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('[11, 6, 4, 0]') == '11 6 4 0'\nassert solution('[1, 13]') == '13'\nassert solution('[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]') == '13 14 15 16'\nassert solution('[1, 2, 3, 4, 5, 6]') == '14 15 16'\nassert solution('[1, 2, 3, 4, 5, 6, 7, 8, 9]') == '14 15 16 7'\n"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(stdin) == \"11 6 4 0\""
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"fuyukai desu\""
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == 24\nassert solution == 9\nassert solution == 28\nassert solution == 10\nassert solution == 15\n"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == (\"12\", \"15\")\nassert solution == (\"1\", \"1\")\nassert solution == (\"1 1\", \"2 2\")\nassert solution == (\"1 1\", \"1 1\")\nassert solution == (\"1 4\", \"1 4\")\n"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"25\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"17\"\n"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"6\", \"4\", \"2\", \"7\", \"2\", \"7\", \"2\"]) == \"24\"\nassert solution([\"3\", \"2\", \"6\", \"1\", \"1\", \"2\", \"4\"]) == \"9\"\nassert solution([\"3\", \"2\", \"6\", \"1\", \"1\", \"2\", \"4\"]) == \"28\"\nassert solution([\"3\", \"2\", \"6\", \"1\", \"1\", \"2\", \"4\"]) == \"15\"\nassert solution([\"3\", \"2\", \"6\", \"1\", \"1\", \"2\", \"4\"]) == \"15\"\n"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    \"6 4 2 7 2 7\"\n    ) == \"24\"\nassert solution(\n    \"6 4 2 7 2 7\"\n    ) == \"24\"\nassert solution(\n    \"6 4 2 7 2 7\"\n    ) == \"24\"\nassert solution(\n    \"6 4 2 7 2 7\"\n    ) == \"24\"\nassert solution(\n    \"6 4 2 7 2 7\"\n    ) == \"24\"\n"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"fuyukai desu\"\n\n\n-----Quick Sort-----\n\nGiven an array of size n, partition the array into as many parts as possible such that the resulting array is in lexicographical order.\n\nThis means that the elements of the array have to be in the same order as they appear in the original array.\n\nFor example,\nInput: arr[] = {1, 3, 2, 5, 6, 4, 7}, n = 5\nOutput: [1, 3, 3, 2, 2, 4, 5, 6, 6, 7]\n\nNOTE: The last part of the array has to be sorted in non-decreasing order.\n\nSince the size of the array is limited by 32-bit integer types, we can solve this problem by quick sort.\n\n- The idea is that we can split the array into several parts which are guaranteed to be in non-decreasing order, and split the array to the two parts that contain the largest difference.\n- The maximum difference between the two parts is equal to the smallest difference between the two parts.\n- The array contains the pivot, the second maximum, and the first minimum.\n- If the smallest difference between the two parts is equal to 0, then we can just return the array.\n- Let dp[i] be the largest difference between the two parts.\n- If dp[i] == 0, then we can just return the array.\n- So, we can use the partitioning logic described in the description.\n\n---\n\nThe idea here is to try to partition the array into two sub-arrays, so that if the difference between two sub-arrays is 0, then the two sub-arrays are in non-decreasing order.\nThen we can partition the array into two sub-arrays by picking the minimum difference between the two sub-arrays.\n\nLet a[i] = min(a[i-1], a[i+1])\n\nWe need to decide if we can partition the array into two sub-arrays by selecting the minimum difference between the two sub-arrays.\n\nIf the difference between two sub-arrays is less than or equal to 0, then we can simply partition the array into two sub-arrays that contain the minimum difference between the two sub-arrays.\n\n--This is a more intuitive approach--\n\nUse the following logic to decide whether we can partition the array into two sub-arrays that contain the minimum difference between the two sub-arrays:\n\nIf dp[i] = min(a[i-1], a[i+1])\n\nIf dp[i] = 0, then we can just partition the array into two sub-arrays, whose elements are the minimum of the difference between the two sub-arrays.\n\n--OR--\n\nIf dp[i] = 0, then we can take a[i-1] < a[i] and we can take a[i+1] > a[i].\nIf dp[i] = a[i], then we can take a[i] < a[i+1] and we can take a[i+1] > a[i].\n\nWe need to use a counter to track the index of the next sub-array.\nWe can start at index j, count up from the next sub-array index, but when we reach the end of the array, we want to move back to the next sub-array.\n\n--While loop as we are moving back to the next sub-array, we still want to move forward to the next sub-array.\n--Then we want to move forward to the next sub-array if we reach the next sub-array.\n--Then we want to move back to the next sub-array if we reach the end of the array.\n\n- IMPORTANT NOTE--\n\nWhen we compare the difference between two sub-arrays, we cannot guarantee that they are both non-decreasing.\nIn addition, if the sub-array is in non-decreasing order, then we must guarantee that it contains the minimum difference between the sub-arrays.\n\n---\n\nAlgorithm:\n\nwhile dp[i]!= 0:\n    if dp[i] >= 0:\n        break\n    else:\n        if a[i] > a[i+1]:\n            a[i], a[i+1] = a[i+1], a[i]\n            i += 1\n        else:\n            break\n    if i == n-1:\n        break\n\nWe want to move forward and back to the next sub-array if we reach the end of the array, and we want to move back to the next sub-array if we reach the end of the array.\n-\n\nwhile dp[j]!= 0:\n    if dp[j] >= 0:\n        break\n    else:\n        if a[i] > a[j]:\n            a[i], a[j] = a[j], a[i]\n            i = j\n        else:\n            break\n    if i == n-1:\n        break\n    \n---"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4, [3, 2, 7, 2, 7]) == \"fuyukai desu\"\nassert solution(4, [3, 2, 7, 2, 7]) == \"fuyukai desu\"\nassert solution(4, [3, 2, 7, 2, 7]) == \"fuyukai desu\"\nassert solution(4, [3, 2, 7, 2, 7]) == \"fuyukai desu\"\nassert solution(4, [3, 2, 7, 2, 7]) == \"fuyukai desu\"\n"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"fuyukai desu\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('6', [6, 4, 2, 7, 2, 7, 2]) == '24'\nassert solution('4', [5, 5, 2, 7, 2]) == '9'\nassert solution('10', [10, 10, 10, 10]) == '28'\nassert solution('1', [1, 3, 1, 1]) == '15'\nassert solution('1', [1, 1, 1, 1]) == '15'\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"7\"\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n\nassert solution(stdin) == '3'\n\nassert solution(stdin) == '7'\n\nassert solution(stdin) == '9'\n\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2\") == \"3\"\nassert solution(\"1 2 3\") == \"4\"\nassert solution(\"1 2 3 4 5 6 7\") == \"3\"\nassert solution(\"1 2 4\") == \"7\"\nassert solution(\"1 2 3 4 5 6 7 8 9 10\") == \"11\"\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3'\n\n\n----Constraints----\n1 <= n, k <= 10^5\n0 <= l_i < 10^9\n0 <= r_i < 10^9\n\n-----Time Limit (C)-----\ntime limit (in seconds) 10^5\n\n-----Divide and Conquer-----\n\nnested recursion depth of 2\nnested recursion depth of 3\nnested recursion depth of 5\nnested recursion depth of 10\n\n----Submissions----\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 1 \\n3 1 \\n1 3 \\n1 1 \\n1 1 \\n2 2 \\n2 2 \\n1 3 \\n1 2 \\n2 3 \\n1 4 \\n1 4 \\n1 5 \\n2 5 \\n2 5 \\n1 6 \\n1 6 \\n2 6 \\n1 7 \\n1 7 \\n2 7 \\n2 7 \\n1 8 \\n1 8 \\n1 8 \\n2 8 \\n2 8 \\n1 9 \\n1 9 \\n1 9 \\n1 9 \\n2 9 \\n2 9 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\n1 10 \\"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1, \"Check the answer!\"\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"0\"\n\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"n : 3, k : 1\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"3\")\nprint()\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"n : 3, k : 2\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"1\")\nprint()\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"n : 5, k : 3\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"7\")\nprint()\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"n : 10, k : 2\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"9\")\nprint()\nprint(\"Example 5:\")\nprint(\"Input : \")\nprint(\"n : 10, k : 1\")\nprint(\"Exception :\")\nprint(\"0\")\nprint(\"Output :\")\nprint(\"8\")\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, 2) == 1\nassert solution(3, 3) == 0\nassert solution(3, 4) == 7\nassert solution(3, 5) == 0\nassert solution(3, 6) == 0\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 5\"\nassert solution(stdin) == \"2 7\"\nassert solution(stdin) == \"2 5\"\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"bb\", \"baab\", \"babb\", \"babaa\"]) == 2\nassert solution([\"bb\", \"baab\", \"bb\", \"bb\"]) == 2\nassert solution([\"bb\", \"baab\", \"babaa\", \"baab\"]) == 3\nassert solution([\"bb\", \"baab\", \"babaa\", \"bbaaa\"]) == 3\nassert solution([\"bb\", \"baab\", \"babaa\", \"babab\"]) == 2\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == solution('baab')\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abab\") == \"2 4\"\nassert solution(\"abba\") == \"2 5\"\nassert solution(\"babb\") == \"2 7\"\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin) == [\n        2, \n        5\n    ]\n\nassert solution(\n    stdin) == [\n        3, \n        4\n    ]\n\nassert solution(\n    stdin) == [\n        1, \n        2\n    ]\n\nassert solution(\n    stdin) == [\n        1, \n        1\n    ]\n\nassert solution(\n    stdin) == [\n        2, \n        4\n    ]\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n\n------Time complexity------\n\nTo implement this problem, we will use a dictionary in the constructor.\n\nWe will use a queue to create a solution in order to maintain a window of odd length.\n\nWe will use a set to store the substrings of odd length, as well as a dictionary to maintain the substrings of even length.\n\nAt the end, if a subset of odd length has a sum of even length, it means the substrings in odd length are good.\nAt the beginning, if a subset of even length has a sum of odd length, it means the substrings in even length are good.\n\nTo keep track of odd-length and even-length substrings, we will use the dictionary to keep track of the maximum sum of odd length substrings and even length substrings.\n\nSince, we can keep track of the even-length substrings and odd-length substrings, we will maintain a dictionary of all odd-length substrings and the even-length substrings.\n\nAfter, we will call the recursive function to find the odd-length and even-length substrings that makes the string palindrome.\n\nAfter that, we will return the maximum sum of odd-length substrings and even-length substrings.\n\nWe will call this function even number of time.\n\nIn the end, we will return the number of good substrings in odd length and even length substrings.\n\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin), \"Solution for n = 4\"\nassert solution(stdin), \"Solution for n = 2\"\nassert solution(stdin), \"Solution for n = 5\"\nassert solution(stdin), \"Solution for n = 3\"\nassert solution(stdin), \"Solution for n = 0\"\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"bb\") == 1\nassert solution(\"baab\") == 2\nassert solution(\"babb\") == 2\nassert solution(\"babaa\") == 4\nassert solution(\"babab\") == 4\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"aab\", \"aba\", \"baab\", \"bbaa\", \"baba\", \"bbba\", \"baab\"]) == 7, \"should be 7\"\n\nassert solution([\"ab\", \"a\", \"a\", \"b\"]) == 2, \"should be 2\"\n\nassert solution([\"aa\", \"aa\", \"bb\", \"bba\"]) == 4, \"should be 4\"\n\nassert solution([\"abc\"]) == 3, \"should be 3\"\n\nassert solution([\"a\"]) == 1, \"should be 1\""
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(good_substrings) == 2\nassert solution(good_substrings) == 2\nassert solution(good_substrings) == 2\nassert solution(good_substrings) == 2\nassert solution(good_substrings) == 2\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aabb\") == \"2 5\"\nassert solution(\"bbaaa\") == \"2 7\"\nassert solution(\"baab\") == \"2 5\"\nassert solution(\"babaa\") == \"2 7\"\nassert solution(\"aaabb\") == \"2 5\"\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n      [\"2\", \"1\", \"0\"],\n      [\"0\", \"2\", \"1\"],\n      [\"1\", \"0\", \"0\"],\n      [\"0\", \"1\", \"1\"]\n    ]) == \"01001\"\nassert solution(\n    [\n      [\"2\", \"1\", \"0\"],\n      [\"0\", \"2\", \"1\"],\n      [\"1\", \"0\", \"0\"],\n      [\"0\", \"1\", \"1\"]\n    ]) == \"01001\"\nassert solution(\n    [\n      [\"1\", \"0\", \"1\"],\n      [\"0\", \"1\", \"1\"],\n      [\"1\", \"1\", \"1\"],\n      [\"0\", \"0\", \"1\"]\n    ]) == \"01001\"\nassert solution(\n    [\n      [\"1\", \"0\", \"1\"],\n      [\"0\", \"1\", \"1\"],\n      [\"1\", \"1\", \"0\"],\n      [\"0\", \"0\", \"1\"]\n    ]) == \"01001\"\nassert solution(\n    [\n      [\"1\", \"0\", \"1\"],\n      [\"0\", \"1\", \"1\"],\n      [\"1\", \"0\", \"1\"],\n      [\"0\", \"1\", \"1\"]\n    ]) == \"01001\"\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 1 1\") == \"01001\"\nassert solution(\"0 1 1\") == \"01001\"\nassert solution(\"1 0 0\") == \"01001\"\nassert solution(\"0 0 0\") == \"01001\"\nassert solution(\"1 1 0\") == \"01001\"\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(3, \"1 0 0 0\") == \"01001\"\nassert solution(3, \"1 1 1\") == \"111111\"\nassert solution(3, \"0 0 0 0\") == \"111010\"\nassert solution(3, \"1 1 1 1\") == \"111111\"\nassert solution(3, \"2 3\") == \"01001\"\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2 2') == '01001', \"Solution doesn't work\"\nassert solution('0 1 1') == '01001', \"Solution doesn't work\"\nassert solution('1 1 1') == '01001', \"Solution doesn't work\"\nassert solution('1 2 3') == '01001', \"Solution doesn't work\"\nassert solution('1 3 2') == '01001', \"Solution doesn't work\"\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, \"1 1 1\") == \"0011\"\nassert solution(4, \"1 1 0 1 1\") == \"0001\"\nassert solution(4, \"0 1 0 1 1\") == \"0001\"\nassert solution(4, \"0 1 0 0 0\") == \"0001\"\nassert solution(2, \"1 1 1\") == \"01001\"\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '01001'\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '01001'\n\"\"\""
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3,1,1,0,12,3,3) == \"01001\"\nassert solution(3,1,1,0,12,3,3,1) == \"01001\"\nassert solution(3,1,1,0,12,3,3,1,1) == \"01001\"\nassert solution(3,1,1,0,12,3,3,1,1,1) == \"01001\"\nassert solution(3,1,1,0,12,3,3,1,1,3) == \"01001\"\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1 1') == '0 1 1'\nassert solution('2 3 3') == '0 0 0'\nassert solution('3 3 3') == '0 0 0'\nassert solution('1 3 3') == '0 0 0'\nassert solution('0 1 0') == '0 1 0'\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 2 1 2 3\") == \"01001\"\nassert solution(\"3 2 1 3\") == \"01001\"\nassert solution(\"3 2 1 2 3\") == \"01001\"\nassert solution(\"3 2 1 3\") == \"01001\"\nassert solution(\"3 2 1 2 3\") == \"01001\"\n"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('', n, k) == 2\nassert solution('', n, 1) == 1\nassert solution('', 1, k) == 1\nassert solution('', 1, 2) == 1\nassert solution('', 2, k) == 2\n"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\"]) == \"2\"\nassert solution([\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\",\"1 1\"]) == \"12\"\n\n\n\n-----Constraints-----\n1 <= stdin.length <= 20\n\n0 <= stdin[i] <= 10^6\n\n\n\n-----Time complexity-----\nO(n^2)\n\nO(n)\n\n\n-----Space complexity-----\nO(1)\n\n\n------Binary Search---------\n\nmax(stdin)"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1') == 2\nassert solution('2') == 2\nassert solution('3') == 2\nassert solution('4') == 1\nassert solution('5') == 1\n"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 7\n\n------Reminder-----\n\nMore elegant solution (c) https://github.com/k1/python/blob/master/exercises/solutions/08-sudoku.ipynb\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10\n\n1 \u2264 k \u2264 n\n\n\n-----Time complexity-----\n\nO(n * k) = O(n * k * k) = O(n*k^2) = O(n^2) = O(n^3) = O(n^4) = O(n^5) = O(n^6) = O(n^7)\n\n1 \u2264 n, k \u2264 10\n\n\"\"\"\nimport sys\nfrom heapq import heappop, heappush"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == 12, \"Correct!\"\nassert solution(inp) == \"12\", \"Incorrect!\"\n\n\n\n-----Constraints-----\n0 \u2264 n, k \u2264 1000\n0 \u2264 row, col < 2n\n\n$2 \\le n \\le 1000$\n$1 \\le k \\le 2n$\n\nTime Limit: 1sec\n\n\n------Code--------"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1,2) == 2\nassert solution(1,4) == 4\nassert solution(1,1) == 1\nassert solution(2,2) == 1\nassert solution(2,4) == 4\n\n\nclass Solution:\n    def countBicolorings(self, n: int, k: int) -> str:\n        nums = []\n        nums.append(list(map(int, list(str(n)))))\n        nums.append(list(map(int, list(str(n - 1)))))\n        nums.append(list(map(int, list(str(n - 2)))))\n        nums.append(list(map(int, list(str(n - 3)))))\n        return ''.join(str(x[0]) + str(x[1]) for x in nums[0] + nums[1]) % (998244353)\n"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 12\nassert solution(5) == 2\n"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(1, 1) == 2, \"1\"\nassert solution(2, 1) == 2, \"2\"\nassert solution(2, 2) == 1, \"2\"\nassert solution(3, 2) == 2, \"2\"\nassert solution(4, 3) == 2, \"2\"\n"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n\n\n-----Constraints-----\n0 < stdin.length <= 1000\n0 < stdin[i].length <= 20\n0 < stdin[i][j] <= 1\n\n\n-----Time complexity-----\nO(n^2) = n^2\nO(n^2) = n^2\nO(k) = k\nO(n) = n\nO(n) = n\nO(n^2) = n^2\n\n\n-----Space complexity-----\nO(n^2) = n^2\nO(n^2) = n^2\nO(n) = n\nO(1) = n\n\n'''\n\nclass Solution:\n    def beautifulBicolorings(self, stdin: str) -> int:\n        \n        def count(k, n):\n            return (n * (n - 1) * 2) // (k * (k - 1))\n        \n        def check(i):\n            return i >= 0 and i % 2 == 0\n        \n        def check_col(i, j):\n            return 0 <= i < 2 and 0 <= j < n and check(i) and check(j)\n        \n        def check_row(i):\n            return 0 <= i < n and check_col(i, i) and check(i - 1)\n        \n        def is_neighbor(i, j):\n            return 0 <= i < n and 0 <= j < n and not check(i) and not check_row(i) and not check_col(i, j)\n        \n        def count_neighbors(i, j):\n            if not is_neighbor(i, j):\n                return 0\n            return sum(1 for k in range(j) if is_neighbor(i, k))\n        \n        def solution(stdin: str) -> int:\n            \n            n = int(stdin[:stdin.index(':')])\n            k = int(stdin[stdin.index(':') + 1:])\n            if not is_neighbor(n, k):\n                return 0\n            \n            grid = [list(map(int, input().split())) for _ in range(n)]\n            \n            count = 0\n            \n            for i in range(n):\n                for j in range(k):\n                    if not is_neighbor(i, j):\n                        count += 1\n            \n            return count\n"
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"10 2\") == 2\nassert solution(\"10 3\") == 0\nassert solution(\"10 4\") == 1\nassert solution(\"10 4\") == 0\nassert solution(\"10 5\") == 2\n"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '15'\n\nassert solution(stdin) == '100'\n\nassert solution(stdin) == '101'\n\nassert solution(stdin) == '100'\n\nassert solution(stdin) == '11'"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == (5, 10)\n"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(15)\n\nassert solution(stdin) == str(1)\n"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"5\"\n\n\n\n-----Constraints-----\n\n1 <= n <= 1000\n\n\n-----Example 1-----\n\nInput\n1\n1\n\nOutput\n1\n\nInput\n4\n3 10 12 20 15\n\nOutput\n4\n\nInput\n2\n1 1\n\nOutput\n2\n\n\"\"\"\n\nclass Solution:\n    def count(self, nums, n):\n        d = {}\n        count = 0\n        for i in range(n):\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n\n        for i in range(n):\n            if i not in d:\n                count += 1\n\n        return count\n    \n    def count_recursive(self, nums, n, d):\n        if len(nums) == 0:\n            return 0\n        if n == 0:\n            return 1\n        \n        if n in d:\n            return d[n]\n        \n        if n == 0:\n            return 0\n        \n        count = 0\n        for i in range(len(nums)):\n            count += self.count_recursive(nums[:i] + nums[i + 1:], n - i, d)\n            \n        d[n] = count\n        return count\n"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 100\n"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5, \"solution failed\"\n\npass\n-----\n"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '100'\n\n\n\n\n----Discussion----\n\nYou are asked to write a program that takes in a sequence of numbers and checks whether each number is coprime to n. \nInput\n6\n2 4 3 1\n\nOutput\nTrue\n\n---Constraints---\n\n1 <= stdin.length <= 100\n0 <= stdin[i] <= 10^9\n\n\n\n-----Example 1-----\n\nInput\n3\n1 2 3\n\nOutput\nFalse\n\nExample 2\n\nInput\n2\n1 1 1\n\nOutput\nTrue\n\n\n\"\"\"\n"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 5\n\n>>> def solution(n):\n    def gcd(a, b):\n        while b!= 0:\n            a, b = b, a % b\n        return a\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    lcm = lcm(2, 3)\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            a[i] = lcm(a[i], a[j])\n    return str(len(a))\n\nassert solution(5) == 5\n\n>>> def solution(n):\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    lcm = lcm(2, 3)\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            a[i] = lcm(a[i], a[j])\n    return str(len(a))\n\nassert solution(5) == 5\n\n>>> def solution(n):\n    def lcm(a, b):\n        return a * b // gcd(a, b)\n    lcm = lcm(2, 3)\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    for i in range(1, n - 1):\n        for j in range(i + 1, n):\n            a[i] = lcm(a[i], a[j])\n    return str(len(a))\n\nassert solution(5) == 5\n\n\"\"\"\n"
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 7\n\n\"\"\""
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1') == '1'\nassert solution('2') == '1'\nassert solution('3') == '1'\nassert solution('4') == '1'\nassert solution('5') == '1'\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('', '') == ''\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, [3,2,3,2]) == [1,3,2]\nassert solution(4, [1,2,3]) == [1,2,3,4]\nassert solution(2, [2,2,3]) == [2,2,3,4]\nassert solution(5, [1,2,3,4,5]) == [1,3,4,5,2]\n\n----------\n\"\"\"\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3 2\") == \"1 3 2\"\nassert solution(\"2 2 3 3\") == \"2 1 3 4\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"0\") == \"0\"\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"1 3 2\"\nassert solution(input) == \"2 1 3\"\nassert solution(input) == \"1 1 1\"\nassert solution(input) == \"1 1 1\"\nassert solution(input) == \"1 1\"\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 1 2\"\nassert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"1 1 4\"\nassert solution(stdin) == \"1 2 1\"\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1, 2, 3, 4, 1) == [1, 3, 2, 4]\nassert solution(1, 2, 3, 4, 3) == [2, 1, 3, 4]\nassert solution(2, 1, 3, 4, 2) == [1, 3, 2, 4]\nassert solution(1, 1, 1, 1, 1) == 1\nassert solution(4, 1, 4, 1, 1) == 1"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(3) == 1\nassert solution(4) == 2\nassert solution(1) == 1\nassert solution(2) == 3\nassert solution(3) == 3\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2 2 3 3 3\"\nassert solution(stdin) == \"2 1 3 3 4\"\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == '1 3 2'\nassert solution(input()) == '2 1 3 4'\nassert solution(input()) == '2 1 3 4'\nassert solution(input()) == '1 3 2'\nassert solution(input()) == '2 1 3 4'\n"
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1 3 2\"\n\nassert solution(input()) == \"2 1 3 4\"\n\nassert solution(input()) == \"2 1 3 4\"\n\nassert solution(input()) == \"1 3 2\"\n\nassert solution(input()) == \"2 1 3 4\""
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 2) == \"1 5 2 4 3\"\nassert solution(3, 0) == \"1 2 3\"\nassert solution(3, 1) == \"3 2 1\"\nassert solution(3, 2) == \"3 2 1 2\""
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 2) == \"1 5 2 4 3\"\nassert solution(3, 0) == \"1 3\"\nassert solution(3, 1) == \"3\"\nassert solution(3, 2) == \"3 2\""
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '1 5 2 4 3'\n\nassert solution(input()) == '1 5 2 4 3'\nassert solution(input()) == '1 5 2 4 3'\nassert solution(input()) == '1 5 2 4 3'\nassert solution(input()) == '1 5 2 4 3'\n"
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == '5 3'\n\nassert solution(input) == '3 2 1'\n\nassert solution(input) == '3 2 1'\n\nassert solution(input) == '1 2 3'\n\nassert solution(input) == '1 2 3'"
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 5 2 4 3\"\nassert solution(stdin) == \"1 5 2 4 3\"\nassert solution(stdin) == \"3 0 2 1 4\""
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1 5 2 4 3\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"3\""
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1 5 2 4 3'\nassert solution(stdin) == '1 5 2 4 3'\n"
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 5 2 4 3\",\n    \"1 2 3\",\n    \"0\",\n    \"0\",\n    \"0\",\n    \"0\"\n) == \"1 5 2 4 3\"\n"
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 2\") == \"1 5 2 4 3\", \"Test failed\"\nassert solution(\"3 0\") == \"1 2 3\", \"Test failed\"\nassert solution(\"3 2\") == \"1 2 3\", \"Test failed\"\nassert solution(\"3 3\") == \"1 2 3 1\", \"Test failed\"\nassert solution(\"3 5\") == \"3 2 1\", \"Test failed\"\n"
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"1 2 3\"\n\"\"\"\n"
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3\",\"5\"]) == \"1\"\nassert solution([\"5\",\"4\",\"5\",\"3\",\"4\",\"2\"]) == \"1\"\nassert solution([\"1\",\"2\",\"2\",\"3\",\"1\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"1\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"1\",\"1\"]) == \"1\"\n"
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 1\") == \"1\"\nassert solution(\"5 4 3 2 1\") == \"11\"\nassert solution(\"5 20 4 3 2 1\") == \"11\"\nassert solution(\"5 20 4 3 2 1\") == \"6\"\nassert solution(\"5 20 4 3 2 1\") == \"6\"\n"
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input) == \"11\"\n\"\"\""
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"11\"\n\n\n-----Search-----\n\nGiven a rod length, find the minimum length of a convex polygon that can be formed from it.\n\n\n-----Example 1-----\nInput\n3\n4 1 2\n\nOutput\n2\n\nInput\n5\n2 4 1\n\nOutput\n2\n\n\n-----Example 2-----\nInput\n3\n4 1 3 2\n\nOutput\n1\n\nInput\n5\n2 4 1\n\nOutput\n1\n\n\n-----Constraints-----\n1 <= n <= 10^5\n0 <= l_i <= 10^9\n\n------Submissions------\n189 ms\n5.5 MB\n\nclass Solution:\n    def smallestSubarray(self, nums: List[int], l: int, r: int) -> int:\n        def search(nums, start, end):\n            if start == end:\n                return 0\n            \n            mid = (start + end) // 2\n            \n            if mid < l:\n                return search(nums, start, mid)\n            elif mid > r:\n                return search(nums, mid + 1, end)\n            else:\n                return search(nums, mid + 1, end) + 1\n        \n        return min(search(nums, 0, len(nums) - 1), search(nums, 0, len(nums) - 1))\n\n\n------Time complexity-----\nSpace complexity: O(1)\n"
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 1\") == \"2\"\nassert solution(\"5 4 3 2 1\") == \"11\"\nassert solution(\"5 5 5\") == \"15\"\nassert solution(\"10 20 5\") == \"15\"\n\n[Time Limit] 4 sec (29.46%)\n[Space Limit] 4,000,000\n\n[Formula] x = 5 * (1 + 1 + 1 + 2) + 5 * (2 + 2 + 2 + 1) + 5 * (3 + 3 + 3 + 1) + 5 * (4 + 4 + 4 + 1)\n\n[Test Case] 1, 2, 3, 4, 5\n\nTest Cases:\n\n1, 2, 5\n\n1 2 1\n\n4 20 3 2 1\n\n10 20 4 3 2\n\n5 15\n\n\"\"\""
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3\"), \"no\"\nassert solution(\"5\"), \"no\"\nassert solution(\"3\"), \"no\"\nassert solution(\"5\"), \"no\"\nassert solution(\"4\"), \"no\"\n"
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(3, 1) == 1\nassert solution(5, 20) == 11\nassert solution(5, 4) == 4\nassert solution(5, 3 + 2) == 11\nassert solution(5, 3 + 1 + 1) == 11"
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(test) == '1'\nassert solution(dev) == '11'\n\n\"\"\"\n\nclass Solution:\n    def minimumLength(self, stones: int, n: int) -> int:\n        \n        return 0\n"
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\n\nprint(\"Example 1:\")\nprint(\"Input :\")\nprint(\"3\")\nprint(\"Output :\")\nprint(\"3\")\nprint(\"Explanation:\")\nprint(\"Triangle with sides {1 + 1 = 2, 2, 1} can be formed from a set of lengths {1, 1, 1, 2}. \")\nprint(\"Example 2:\")\nprint(\"Input :\")\nprint(\"5\")\nprint(\"Output :\")\nprint(\"5\")\nprint(\"Explanation:\")\nprint(\"Triangle with sides {1 + 1 = 2, 2, 1} can be formed from a set of lengths {1, 1, 1, 2}. \")\nprint(\"-----Convex Polygon-----\")\nprint(\"Input :\")\nprint(\"5\")\nprint(\"Output :\")\nprint(\"10\")\nprint(\"Explanation:\")\nprint(\"Convex Polygon with 5 vertices is a convex polygon with two rods, one side with length 1 and the other with length 1, one side with length 2, and one side with length 3. \")\nprint(\"-----Solution-----\")\nprint(\"Input :\")\nprint(\"3\")\nprint(\"Output :\")\nprint(\"5\")\nprint(\"Explanation:\")\nprint(\"Convex Polygon with 3 vertices is a convex polygon with two rods, one side with length 1 and the other with length 2, and one side with length 3. \")"
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('') == '', 'Expected \"YES\".'\nassert solution('1000') == '', 'Expected \"NO\".'\nassert solution('99999') == '', 'Expected \"NO\".'"
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 4 2 1\") == \"YES\"\nassert solution(\"2 10 11\") == \"NO\"\n"
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == \"NO\"\nassert solution(inp) == \"YES\""
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"NO\""
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"4 5 4 3\") == \"NO\"\nassert solution(\"4 7 2 3\") == \"YES\"\nassert solution(\"1 1 1 1 1\") == \"YES\"\nassert solution(\"1 2 3 4 5 6 7 8 9\") == \"NO\"\n"
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nprint(\"Coding complete? Click 'Check' to earn cool rewards!\")\n"
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 7\") == 4\nassert solution(\"6 5\") == 4\nassert solution(\"6 6 8 9 10 5\") == 11\n"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3 7\\n4 5 14\\n\", 5, 1) == 4\nassert solution(\"6 1\\n1 1 1 1 1 1\\n\", 1, 2) == 1\nassert solution(\"6 5\\n7 6 8 9 10 5\\n\", 5, 2) == 11\nassert solution(\"6 6\\n7 6 8 9 10 5\\n\", 6, 1) == 6\nassert solution(\"6 6\\n7 6 8 9 10 5\\n\", 6, 2) == 6\n"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 11\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 h \u2264 10^6\n\n\n------Time complexity--------\n\nTo solve this problem, we first add any particular width of the person to the min width of the road, and then move forward a row each time.\nWe consider the total number of friends, height, and each person.\n\nComplexity\n\nTime: O(n)\n\nSpace: O(n)\n\n\"\"\""
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 11"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 11\n\n-----Bug-----\nprint(solution(input()))\n"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 11\n\"\"\""
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2 4 7 6 10 5\") == 12\n\nassert solution(\"2 4 3 5\") == 2\n\nassert solution(\"2 1 3 5 3 5\") == 2\n\nassert solution(\"1 1 2 3 3 3\") == 2\n\nassert solution(\"3 4 5 2\") == 2"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"3\",\"5\",\"7\"]) == \"6\"\nassert solution([\"1\",\"6\"]) == \"6\"\nassert solution([\"6\",\"5\"]) == \"6\"\nassert solution([\"3\",\"2\",\"3\"]) == \"6\"\nassert solution([\"2\",\"3\"]) == \"6\"\n"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 3\") == \"0\"\nassert solution(\"2 4\") == \"1\"\nassert solution(\"3 7\") == \"0\"\nassert solution(\"4 7\") == \"1\"\nassert solution(\"4 7\") == \"2\"\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '1'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    [\n    [1, 2],\n    [1, 4],\n    [3, 7]\n    ]\n    ) == 0, \"0\"\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0, \"The output should be zero.\"\nassert solution(stdin) == 1, \"The output should be one.\"\nassert solution(stdin) == 2, \"The output should be two.\"\nassert solution(stdin) == 3, \"The output should be three.\"\nassert solution(stdin) == 4, \"The output should be four.\"\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3 7') == '0'\nassert solution('4 7') == '1'\nassert solution('5 7') == '2'\nassert solution('6 7') == '2'\nassert solution('7 7') == '2'\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    [\"1 1 2\", \"1 1 2\"]\n) == 0\nassert solution(\n    [\"2 2 3\", \"2 3 4\", \"3 3 5\", \"4 3 6\", \"5 3 7\", \"6 4 7\"]\n) == 2\nassert solution(\n    [\"1 2 3\", \"2 1 3\", \"3 3 2\", \"4 3 1\", \"5 3 4\", \"6 3 2\"]\n) == 4\nassert solution(\n    [\"2 2 3 4\", \"1 2 3 4\", \"3 3 2 4\", \"4 3 1 4\", \"5 3 4 4\", \"6 3 2 4\"]\n) == 6\nassert solution(\n    [\"1 2 3 4 5\", \"2 1 3 4 5\", \"3 3 2 4 5\", \"4 3 1 4 5\", \"5 3 4 4 5\", \"6 3 2 4 5\"]\n) == 0\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"7\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2 3\\n1 2\\n3 4\\n\"), \"Error\"\nassert solution(\"3 7\\n1 2\\n3 4\\n\"), \"Error\"\nassert solution(\"3 7\\n2 3\\n1 2\\n4 8\\n\"), \"Error\"\nassert solution(\"3 7\\n1 3\\n2 2\\n4 7\\n\"), \"Error\"\nassert solution(\"3 7\\n1 2\\n1 3\\n4 7\\n\"), \"Error\"\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == solution(inp1)\nassert solution(inp2) == solution(inp3)\nassert solution(inp4) == solution(inp5)\nassert solution(inp6) == solution(inp7)\nassert solution(inp8) == solution(inp9)\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^6\n1 <= a_1 <= a_i\n\nTime Limit: 1 sec\nSpace Limit: 1M\n\n-----Tags-----\nhidden\n\n'''"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 1\n\n-----Constraints-----\n1 <= n <= 10^5\n\n0 <= a[i] <= 10^6\n\na[i]!= a[i] + a[i] for all valid i.\n\nA subsequence of array $a$ can be obtained from $a$ by deletion of several (possibly, zero or all) elements.\n\n\n-----Time complexity-----\nO(n^3) for each array $a$\n\n\nO(n^2) for each array $a$\n\nO(n) for each array $a$\n\nO(n^2) for each array $a$\n\nO(n) for each array $a$\n\nO(n^2) for each array $a$\n\n\n\"\"\""
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == str(-1)"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, [1,4,6,6,6,15,10]) == 1\nassert solution(4, [1,4,6,6,15,10]) == 3\nassert solution(4, [6,6,15,10]) == -1\n"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == -1, \"1 should be a subsequence of a\"\nassert solution(6) == 3, \"6 should be a subsequence of a\"\nassert solution(4) == -1, \"4 should be a subsequence of a\"\nassert solution(2) == 2, \"2 should be a subsequence of a\"\nassert solution(5) == 3, \"5 should be a subsequence of a\""
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"-1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"3\"\n\"\"\"\nn=int(input())\na=list(map(int,input().split()))\n\nmax_div=0\nmax_i=0\nfor i in range(len(a)):\n    temp=a[i]\n    if temp%3==0 and temp%5==0:\n        max_div=max(temp,max_div)\n        max_i=max(max_i,i)"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(3, [1, 4, 6, 6]) == 1\nassert solution(4, [2, 3, 3, 6]) == 3\nassert solution(3, [1, 4, 15]) == -1\nassert solution(3, [6, 15, 10]) == 3\nassert solution(3, [6, 15]) == -1\n"
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1 5 9 21'\n\nassert solution(stdin) == '1 10 28 64 136'\n\nassert solution(stdin) == '1 5 9 21'\n\nassert solution(stdin) == '1 10 28 64 136'\n\nassert solution(stdin) == '1 5 9 21'"
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"f_1 5 9 21\"\n\"\"\"\n\nfrom sys import stdin\n\nn = int(stdin.readline().strip())\n\nset_n = set(map(int, stdin.readline().split()))\n\nanswer = 0\nfor k in range(1, n+1):\n    if (k % 10 == 0):\n        answer += (set_n & set(map(str, range(1, n+1))))\n        set_n = set(map(str, range(1, n+1)))\n    answer += (set_n & set(map(str, range(1, n+1))))\n    set_n = set(map(str, range(1, n+1)))\nanswer += len(set_n)\n\nprint(answer)\n\n\"\"\"\n7\n3 10 25 6 4 7\n\"\"\""
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1 10 28 64 136'\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= k <= 10^9\n\n-----Algorithm-----\n\nFind the sum of all possible functions values. It can be shown that under the constraints of the problem, the ball always gets back to the $1$-st player after finitely many steps, and there are no more than $10^5$ possible fun values for given $n$.\n\n\"\"\"\n"
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('4') == '21', \"output is not as expected.\"\nassert solution('3') == '8', \"output is not as expected.\"\nassert solution('1') == '5', \"output is not as expected.\"\nassert solution('3') == '21', \"output is not as expected.\"\nassert solution('4') == '9', \"output is not as expected.\"\n"
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"1 11 56 64 136\"\n\"\"\""
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"10 5 28 64 136\"\n"
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('3') == '5 14 21'\nassert solution('6') == '1 5 9 21'\nassert solution('16') == '1 10 28 64 136'\n\n\"\"\""
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('6') == '1 5 9 21'\nassert solution('16') == '1 10 28 64 136'\nassert solution('16') == '1 10 28 64 136'\nassert solution('16') == '1 5 10 10 20'\nassert solution('16') == '1 5 10 10 20'\n"
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1') == '1 1'\nassert solution('2 2') == '3 2'\nassert solution('3 3') == '4 3'\nassert solution('4 4') == '5 4'\nassert solution('5 5') == '6 5'\n"
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == '1 10 28 64 136'\n\n\"\"\"\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\n'''\n\nclass Solution:\n    def getHeight(self, box):\n        box = [box[0], box[1]]\n        height = box[0] + 1 + box[1]\n        while box[0] < box[1] + 1:\n            box[0] += 1\n            box[1] += 1\n            height += 1\n        return height\n    \n    def landing(self, boxes: List[int], h: int) -> List[int]:\n        stack = []\n        for i in boxes:\n            while stack and i > stack[-1] and h > 0:\n                h -= 1\n                stack.pop()\n            stack.append(i)\n        \n        while stack and h > 0:\n            h -= 1\n            i = stack.pop()\n            boxes[i] += h\n        \n        return boxes"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '33'\nassert solution(stdin) == '13'\nassert solution(stdin) == '23'\nassert solution(stdin) == '33'\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 5\") == \"2 3\"\nassert solution(\"3 2 2\") == \"1 2\"\nassert solution(\"5 5\") == \"6\"\nassert solution(\"5 1 2 3 6 6\") == \"1\"\nassert solution(\"3 4 3 5 5\") == \"5\"\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 12\n\"\"\"\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 23, 'Expected 23, got:'+ str(23)\n\nassert solution(stdin) == 23, 'Expected 23, got:'+ str(23)\n\nassert solution(stdin) == 23, 'Expected 23, got:'+ str(23)\n\nassert solution(stdin) == 23, 'Expected 23, got:'+ str(23)\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3 6 6\") == \"1 3 2 6\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 10 1 10 10\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 10\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 10\") == \"1 1 1 1 1 1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input().strip()) == '3'\nassert solution(input().strip()) == '1'\nassert solution(input().strip()) == '1 1'\nassert solution(input().strip()) == '1 1'\nassert solution(input().strip()) == '1 1'\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('2 3 4 5 6 2 2 6 6 3 3') == '3'\nassert solution('4 1 3 5 1 3') == '3'\nassert solution('1 1 1 1') == '1'\nassert solution('10 1 10 1') == '1'\nassert solution('1 1 1 1 1 1') == '1'\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution == \"YES\", \"Expected: YES, got: %s\" % solution\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 0 0 0') == 'YES'\nassert solution('2 0 0 0') == 'NO'\nassert solution('2 0 2 0') == 'NO'\nassert solution('3 0 0 0') == 'NO'\nassert solution('3 0 1 0') == 'NO'\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'YES'\n\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= x0, y0, z0 <= 10^5\n1 <= m <= 100 000\n\n'''\nclass Solution:\n    def check_connectivity(self, polygon, num_edges, num_points):\n        def is_connected(x1, y1, z1, x2, y2, z2):\n            if not is_same_point(x1, y1, z1, x2, y2, z2):\n                return False\n            if not is_same_point(x1, y1, z1, x2, y2, z2):\n                return False\n            if not is_same_point(x1, y1, z1, x2, y2, z2):\n                return False\n            return True\n        \n        def is_same_point(x1, y1, z1, x2, y2, z2):\n            if x1 == x2 and y1 == y2:\n                return False\n            if x1 == x2 and y1!= y2:\n                return False\n            if x1!= x2 and y1!= y2:\n                return False\n            return True\n        \n        \n        num_edges = num_edges * (num_edges - 1) // 2\n        num_points = num_points * (num_points - 1) // 2\n        \n        if num_edges == 0:\n            return True\n        \n        edges = []\n        for i in range(num_edges):\n            x1, y1, z1 = polygon[i]\n            for i2 in range(i+1, num_edges):\n                x2, y2, z2 = polygon[i2]\n                if is_connected(x1, y1, z1, x2, y2, z2):\n                    edges.append(i2)\n        \n        if len(edges) < num_points:\n            return False\n        \n        for edge in edges:\n            for i2 in range(edge + 1, num_edges):\n                x2, y2, z2 = polygon[i2]\n                if not is_same_point(x1, y1, z1, x2, y2, z2):\n                    return False\n        return True\n        \n    def solution(stdin: str) -> str:\n        pass\n\nassert solution(stdin) == 'YES'\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"YES\"\n\n\nclass Solution:\n    def isConnected(self, edges: List[List[int]]) -> bool:\n        visited = {0}\n        queue = deque([(0, 0)])\n        \n        while queue:\n            node, index = queue.popleft()\n            \n            if index == len(edges) - 1:\n                return True\n            \n            for neighbor in edges[index + 1:]:\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append((node, index + 1))\n                    \n        return False\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"YES\"\n\n----My Solution----\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 0 0\") == \"YES\"\nassert solution(\"2 0 0\") == \"NO\"\nassert solution(\"1 2 0\") == \"YES\"\nassert solution(\"1 3 0\") == \"YES\"\nassert solution(\"1 4 0\") == \"NO\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"ba\"\nassert solution(input()) == \"aab\"\nassert solution(input()) == \"ab\"\nassert solution(input()) == \"ba\"\nassert solution(input()) == \"abba\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin = 3) == \"ba\", \"Incorrect answer\"\nassert solution(stdin = 4) == \"aba\", \"Incorrect answer\"\nassert solution(stdin = 5) == \"abca\", \"Incorrect answer\"\nassert solution(stdin = 1) == \"\", \"Incorrect answer\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(2) == 'bb'\nassert solution(3) == 'abc'\n\n\"\"\"\n\nclass Solution:\n    def reverseString(self, s: str) -> None:\n        \"\"\"\n        Do not return anything, modify s in-place instead.\n        \"\"\"\n        l = len(s)\n        for i in range(l//2):\n            temp = s[i]\n            s[i] = s[l-1-i]\n            s[l-1-i] = temp\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"aba\"\n\nInput\n6\n\nOutput\na c c b a b c a\n\nInput\n8\n\nOutput\na b a c c a b\n\nInput\n3\n\nOutput\na\n\nInput\n4\n\nOutput\na\n\nInput\n2\n\nOutput\nc\n\n-----Constraints-----\n1 \u2264 n \u2264 2\u00b710^5\n\nTime Limit: 1 second\n\n=======Problem Details=======\nThis problem is a palindrome.\n\nProblems solved are:\n\n1. There are n characters.\n2. There are n-1.\n3. There is a palindrome in the sub-string.\n4. The length of the string is 4.\n\n---Time---\n\nBrute-force approach:\n\nTime: O(n)\nSpace: O(1)\n\n---Example 1---\nInput:\n1\nOutput:\naba\n\n---Example 2---\nInput:\n1\nOutput:\nc\n\n---Example 3---\nInput:\n1\nOutput:\na\n\n---Example 4---\nInput:\n1\nOutput:\na\n\n---Example 5---\nInput:\n1\nOutput:\na\n\n\"\"\""
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(4) == \"aabb\"\nassert solution(5) == \"baabc\"\nassert solution(5) == \"bbac\"\nassert solution(6) == \"aacb\"\nassert solution(6) == \"abcba\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"123\", \"aa\", \"bb\", \"aab\", \"aabc\", \"aabcc\"]) == \"bbbabc\"\nassert solution([\"aaa\", \"aa\", \"aa\", \"aa\"]) == \"aab\"\nassert solution([\"ab\", \"abc\", \"ba\"]) == \"aab\"\nassert solution([\"aabb\"]) == \"aabb\"\nassert solution([\"aabb\", \"abbbb\"]) == \"abbbb\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(0) == \"\", \"0\"\nassert solution(1) == \"bba\", \"1\"\nassert solution(2) == \"abbbaa\", \"2\"\nassert solution(3) == \"babbbbaababab\", \"3\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"abc\") == \"aab\"\nassert solution(\"abca\") == \"aab\"\nassert solution(\"aba\") == \"aab\"\nassert solution(\"abca\") == \"bba\"\nassert solution(\"abc\") == \"a\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 'ba'\n\n______________________________________________________________________________________\n______________________________________________________________________________________"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == stdin\n\"\"\""
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"abcbbc\"), 41\nassert solution(\"abcddc\"), 46\nassert solution(\"abcdde\"), 45\nassert solution(\"abcddf\"), 46\nassert solution(\"abcdef\"), 47\n"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"abcd\") == 1\nassert solution(\"abdbcaa\") == 1\nassert solution(\"abcdefghijklmnopqrstuvwxyz\") == 2\nassert solution(\"abcdefg\") == 5\nassert solution(\"cdefghijklmnopqrstuvwxyz\") == 4\n"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 41\n\n----Good luck ----\n"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution([\"aabbc\", 3, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"ABCbcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBcBc"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"41\"\n\n\n-----Discussion-----\n\nIf the function is solving the problem, it is very simple to calculate the result of the problem using a dictionary,\nwhich means that the solution is constant. In this case the dictionary values are the solution.\n\nIf the function is solving the problem, the solution can be calculated using a more convenient function.\n\nIn order to solve the problem, the best case scenario is if a solution is in terms of the solution array, we can use an upper bound as follows.\n\nIn the worst case, we can directly calculate the solution of the problem using a dictionary.\n\nThe upper bound of solution is the maximum of the dictionary values.\n\nThe best case scenario is when we have a dictionary with values in [0, 10^9].\n\nIn this case, the upper bound is 10^9 \u2212 maximum(the dictionary values).\n\nThe best case scenario is when we have a dictionary with values in [0, 10^9].\n\nIn this case, the upper bound is 10^9 \u2212 maximum(the dictionary values).\n\nSo, the result should be the maximum of the dictionary values.\n\n\n-----Constraints-----\n\n1 \u2264 k \u2264 10^3\n\n1 \u2264 |s| \u2264 10^3\n\n\n-----Time complexity-----\n\nO(|s| + |k|).\n\nO(|s| + |k|)\n\nExample 1:\n\nInput\n\n6\n
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 1\n'''"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"41\"\n"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin), \"1. solution() failed\"\nassert answer == 41, \"2. solution() failed\"\n"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"cbdehjiyjklmnopqrstvwxyz\"\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"cdefghijklmnopqrstvwxyz\"\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"cdefghijklmnopqrstvwxyz\"\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"cdefghijklmnopqrstvwxyz\"\nassert solution(\n    \"abcdefghijklmnopqrstuvwxyz\"\n) == \"cdefghijklmnopqrstvwxyz\"\n"
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\"\"\"\n\nimport sys\nfrom collections import defaultdict\n\nn, m = map(int, sys.stdin.readline().split())"
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 4\", 5) == \"YES\"\nassert solution(\"5 4\", 6) == \"YES\"\nassert solution(\"5 4\", 7) == \"NO\"\nassert solution(\"5 4\", 8) == \"NO\"\nassert solution(\"5 4\", 9) == \"YES\"\n"
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 'YES'\n\n\n-----Side-effects-----\nThe input string is already sorted according to the chronological order.\n'''"
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"NO\"\n"
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(2, 5) == \"YES\"\nassert solution(2, 4) == \"NO\""
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('1 2 3') == 'NO'\nassert solution('1 3 4') == 'NO'\nassert solution('2 2') == 'YES'\nassert solution('2 3 1') == 'NO'\nassert solution('3 2 3 1') == 'YES'\n"
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"1 4 3 1 2 1 2 3 1\"\n) == \"NO\"\n\nassert solution(\n    \"2 4\"\n) == \"YES\"\n"
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"YES\""
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"NO\""
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5 7'\nassert solution(stdin) == '5 31'\nassert solution(stdin) == '5 31'\nassert solution(stdin) == '5 31'\nassert solution(stdin) == '5 31'\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 4 2 3 4 5 6 7\"\n) == \"5 7\"\nassert solution(\n    \"5 1 5\"\n) == \"5 31\"\nassert solution(\n    \"5 1 1\"\n) == \"5 7\"\nassert solution(\n    \"5 1 4\"\n) == \"5 31\"\nassert solution(\n    \"5 1 5\"\n) == \"5 31\"\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 1 5') == '5'\nassert solution('5 1 7') == '5'\nassert solution('5 1 9') == '5'\nassert solution('5 1 4') == '5'\nassert solution('5 1 20') == '5'\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"5 31\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"4 2 2\"\n    ) == \"5 7\"\n    assert solution(\n    \"5 1 5\"\n    ) == \"5 31\"\n    assert solution(\n    \"5 1 5\"\n    ) == \"5 31\"\n\nExplanation\nThere are 3 distinct numbers in the array, namely:\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"5 7\"\n\nassert solution(input()) == \"5 31\"\n\n\n\"\"\"\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"10\") == \"10\"\nassert solution(\"100\") == \"100\"\nassert solution(\"1000\") == \"1000\"\nassert solution(\"10000\") == \"10000\"\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 2 2\") == \"5 7\"\nassert solution(\n    \"5 1 5\") == \"5 31\"\nassert solution(\n    \"5 1 3\") == \"5 21\"\nassert solution(\n    \"5 1 2\") == \"5 7\"\nassert solution(\n    \"4 1 1\") == \"1 0\"\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"5 7\"\nassert solution(input()) == \"5 31\"\n\"\"\"\nimport math\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '51'\nassert solution(inp) == '73'\nassert solution(inp) == '37'\nassert solution(inp) == '12'\n"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == str(164)\nassert solution(input()) == str(27)\n"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(4, 8, 5, 2, 3) == 164\nassert solution(6, 1, 1, 2, 2) == 27\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 3 * 10^4\n0 \u2264 a_i \u2264 10^4\n\nExample 1:\n\nInput\n\n10\n1 2 3 4 5 6 7 8 9\n\nOutput\n\n11\n\n\n\nExample 2:\n\nInput\n\n6\n1 1 1 2 2 2 2 2 2 2 2 2\n\nOutput\n\n8\n\n\nConstraints:\n\n1 \u2264 n \u2264 3 * 10^4\n1 \u2264 a_i \u2264 10^4\n\n\"\"\"\n\nimport sys\n\ninput = sys.stdin.readline\n\nn = int(input())\n\na_1, a_2, a_3, a_4 = map(int, input().split())\n\nn_1 = int(a_1 / 2)\nn_2 = int((a_1 - n_1) / 2)\nn_3 = int((a_2 - n_2) / 2)\nn_4 = int((a_3 - n_3) / 2)\n\nsquares = [n_1, n_2, n_3, n_4]\n\nfor i in range(5):\n    print(sum(squares[i:i + 3]))\n"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == '164'\nassert solution(input) == '27'"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == '27'\nassert solution(input()) == '164'"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"27\"\n\nassert solution(stdin) == \"164\"\n\n\n\"\"\""
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(1) == 1\nassert solution(4) == 6\nassert solution(6) == 27\nassert solution(7) == 81\nassert solution(8) == 881\n"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 4 6 8') == '164'\nassert solution('6 5 3 1') == '27'\n"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"27\"\n\nassert solution(stdin) == \"164\"\n"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '29'\nassert solution(stdin) == '183'\nassert solution(stdin) == '7'\nassert solution(stdin) == '6'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"224\"\n\n\n-----Submissions-----\n\nCorrectness\n\nChallenge\n\nIf you have completed the challenge, you can check it by printing the number of groups in the original paper. The paper has $n$ integers in it, and each integer has $m$ elements. In the paper, $n$ is the number of groups, and each group has $m$ elements. You want to find $m$ groups whose sum is minimal.\n\nThe paper does not have enough information to do that. In other words, each group needs at least $2$ elements to have a sum of $s$ in it. Find $m$ such that the sum of all the square of the values of the groups, is $s$, and the sum of the squares of the numbers in the groups, is $s$.\n\nNote that if $n$ is even, the last group has $s$ elements.\n\nInput\n\nThe first line of input contains an even integer $n$ (1 <= n <= 200), denoting that there are $n$ integers on the paper.\n\nThe next $n$ lines contains $m$ integers, where $m$ is an even number.\n\nOutput\n\nA single line containing the integer of the minimum sum of the square of the values of the groups, and the sum of the squares of the numbers in the groups.\n\"\"\"\n\nimport math"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '14'\nassert solution(input('Test')) == '14'\nassert solution(input('Test')) == '14'\nassert solution(input('Test')) == '14'\nassert solution(input('Test')) == '14'\n"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1') == '14'\nassert solution('4') == '14'\n"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 2 3 4') == '14'\nassert solution('4 1 2') == '5'\nassert solution('4 1 2 3') == '6'\nassert solution('4 1 2 3 4') == '12'\nassert solution('4 1 2 3 4 5 6') == '21'\n"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"14\"\n\"\"\"\nimport math"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"14\""
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution([\"1\",\"2\",\"3\",\"4\"]) == \"14\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"13\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"14\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"13\"\nassert solution([\"1\",\"2\",\"3\",\"4\"]) == \"14\"\n"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '14'\n\n\n\n\"\"\"\nclass Solution:\n    def maxBeautifulNumber(self, n: int) -> int:\n        MAX_MAX = pow(2, n) - 1\n        \n        def helper(n: int) -> int:\n            if n == 0:\n                return 1\n            \n            return helper(n-1) + (n-1) * helper(n-2)\n        \n        return helper(MAX_MAX)\n"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"14\"\nprint(stdin)\n\n\"\"\""
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 13\n'''\n"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(s) == solution(l)\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 2\u00b710^6\n\n\n\n-----Time Complexity-----\n\nO(n + n)\n\nO(n)\n\nInput\n4\n1 2 3 4\n\nOutput\n14\n\nInput\n4\n1 2 3 4\n\nOutput\n14\n\n\n\n-----Searching a perfect square-----"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\",\"3\",\"4\",\"2\",\"1\"]) == \"8\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\"]) == \"7\"\nassert solution([\"1\",\"3\",\"4\",\"2\",\"5\",\"6\"]) == \"1\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\"]) == \"3\"\nassert solution([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]) == \"1\"\n"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"32400\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^4\n\n2 \u2264 k \u2264 n/2\n\n1 \u2264 a_i, b_i \u2264 10^9\n\n1 \u2264 a_{i}, b_{i} \u2264 n\n\nTest 32\n\n\n-----Alternatives-----\n\nIn this problem, we are going to write a function solution which, given two sets of numbers and a pair of non-negative integers, d, e, return the value of the integer numbers in d, e separated by a space and a \"-\" (minus).\n"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin), \"Failed!\"\n'''"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '32400'\n\nInput\n10 2\n3 4\n
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '32400'\n\n------Examples-----\nInput\n2 2\n38 56 49\n8 4 3 2\n\nOutput\n14\n\nInput\n4 2\n1 22 3 44\n5 4 3 2\n\nOutput\n16"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()), \"Your code has failed\"\nassert solution(input().split()) == \"32400\", \"Your code has failed\"\n\n\"\"\"\n\nimport sys\nimport math"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"32400\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"800000\"\nassert solution(input()) == \"33\"\n"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n1 <= n <= 100,000\n1 <= k <= min(n, 9)\n2 <= stdin.length <= 20\n\n2 <= a_1, a_2,..., a_{n} / k <= 10^9\nstdin.length <= 20\nstdin.length <= 10^9\n\n1 <= b_i <= 10^9\nstdin.length <= 10^9\nstdin.length <= 10^9\n\n2 <= c_1, c_2,...,c_{k} <= 10^9\nstdin.length <= 10^9\nstdin.length <= 10^9\n\n2 <= a_i <= 10^9\nstdin.length <= 10^9\nstdin.length <= 10^9\n\n2 <= b_i <= 10^9\nstdin.length <= 10^9\nstdin.length <= 10^9\n\n3 <= c_i <= 10^9\nstdin.length <= 10^9\nstdin.length <= 10^9\n\nstdin.length <= 20\n\n1 <= n <= 10^9\nstdin.length <= 20\n\n2 <= k <= min(n, 9)\nstdin.length <= 20\nstdin.length <= 10^9\n\n\nExplanation\n\n---> 5 modulo 10^9 + 7 = 8 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 8 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 8 modulo 10^9 + 3 = 8 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 8 modulo 10^9 + 3 = 8 modulo 10^9 + 3 = 8 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 8 modulo 10^9 + 3 = 8 modulo 10^9 + 7 = 8 modulo 10^9 + 3 = 8 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 5 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 5 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3 = 7 modulo 10^9 + 7 = 7 modulo 10^9 + 3"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 7\n\"\"\"\n\nclass Solution:\n    def solution(self, n, k):\n        def check(x):\n            x = str(x)\n            result = ''.join([x[i:i+k] for i in range(len(x))])\n            return int(result) % 10**9 + 7\n\n        return sum(list(map(check, map(str, range(1, n+1))))) % (10**9 + 7)\n"
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"\"\n"
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == [\"1 4\", \"6 7\"]\n\n\n\n\"\"\""
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\nassert solution(stdin) == \"\"\n"
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(f) == \"1 4 6 7\"\n\nassert solution(f) == \"2 5 6 7\"\n\nassert solution(f) == \"1 2 1 2 1\"\n\nassert solution(f) == \"1 4\"\n\nassert solution(f) == \"1 4 1 2\""
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n\"\"\"\n1\n2 1 4 3\n\"\"\"\n) == \"1 4 5 1 3\"\nassert solution(\n\"\"\"\n1\n2 1 4 3\n\"\"\"\n) == \"2 3 4\"\nassert solution(\n\"\"\"\n1\n2 1 4 3\n\"\"\"\n) == \"1 4 2 1\"\nassert solution(\n\"\"\"\n1\n2 1 4 3\n\"\"\"\n) == \"1 4 4 3 1\"\nassert solution(\n\"\"\"\n1\n2 1 4 3\n\"\"\"\n) == \"1 4 4\"\n"
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"5 5 3 3\") == \"4 4\"\nassert solution(\"1 2 1 2 1\") == \"1 5\"\nassert solution(\"7 28 57 39 66 69 68\") == \"7 2 1 2 1\"\nassert solution(\"5 1 4 3\") == \"5 1\"\nassert solution(\"1 5\") == \"1 5\"\n"
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"\"\nassert solution(input()) == \"24\"\n\nassert solution(input()) == \"\"\nassert solution(input()) == \"1 3 1 3 1 2\"\n\nassert solution(input()) == \"\"\n"
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4') == '1 4', 'wrong solution'\nassert solution('7') == '6 7', 'wrong solution'\nassert solution('5') == '2 5', 'wrong solution'\nassert solution('36 28 57 39 66 69 68') == '6 7', 'wrong solution'\nassert solution('100') == '', 'wrong solution'"
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(n, a) == solution(n, a_1, a_2, a_3, a_4, a_5, a_6, a_7)\n"
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"1 4\",\"2 1 4\",\"3 4\",\"1 2 1 2 1\",\"1 3 2 3 3\"]) == [\"1 4\",\"2 5\",\"3 4\",\"3 4\",\"3 2\",\"4 3\",\"4 2\",\"3 2\"]\nassert solution([\"1 3\",\"2 1\",\"1 4\",\"2 3\",\"1 1\",\"3 2\",\"1 1\",\"2 2\",\"1 2\"]) == [\"1 3\",\"2 4\",\"1 2\",\"3 1\",\"2 2\",\"3 2\",\"1 2\",\"3 1\",\"1 1\",\"1 1\"]"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"x\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"y\"\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"x\"), \"x\"\nassert solution(\"xyxy\"), \"xyxy\"\nassert solution(\"xyxyxy\"), \"xyxyxy\"\nassert solution(\"xxyyy\"), \"xxyyy\"\nassert solution(\"xy\"), \"x\"\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"x\"\n\"\"\"\n\nclass Solution:\n    def reverse(self, str: str) -> str:\n        if str == \"\": return \"\"\n        \n        left = 0\n        right = len(str) - 1\n        while left < right:\n            str[left], str[right] = str[right], str[left]\n            left += 1\n            right -= 1\n        \n        return \"\".join(str)\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"x\"\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"x\") == \"x\", \"Example 1 failed.\"\nassert solution(\"y\") == \"y\", \"Example 2 failed.\"\nassert solution(\"xxxxxy\") == \"xxxx\", \"Example 3 failed.\"\nassert solution(\"xxyyy\") == \"x\", \"Example 4 failed.\"\nassert solution(\"xyy\") == \"y\", \"Example 5 failed.\"\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"x\"\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(string s) == string, \"Your solution should return a string that is equal to s\"\n\n\n-----Time Complexity-----\n\nO(N) (where N = len(s))\n\nO(N) (where N = len(s))\n\nO(N) (where N = len(s))"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"xxxxxxyyyyyy\") == \"xxxx\"\nassert solution(\"xyxxxxy\") == \"x\"\nassert solution(\"xyxxy\") == \"x\"\nassert solution(\"xxxy\") == \"x\"\nassert solution(\"xxyy\") == \"x\"\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"x\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"xxxx\"\n\nassert solution(stdin) == \"yy\"\n\nassert solution(stdin) == \"xy\"\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"x\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"x\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"x\"\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 3 3'\nassert solution(stdin) == '3 3 3'\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5 4\"\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 4\") == \"3 2 5 4\"\nassert solution(\"5 2\") == \"3 2 0 2 7\"\nassert solution(\"3 2 0\") == \"3 2 0 0 0\"\nassert solution(\"3 3\") == \"1 1 3 6\"\nassert solution(\"2 3\") == \"2 1 1\"\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == solution(stdin), 'No solution'\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()), \"The solution() function does not work.\"\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '1 2 3'\nassert solution(inp) == '1 2'\nassert solution(inp) == '2 3'\nassert solution(inp) == '2 1'\nassert solution(inp) == '2 1 4'\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"3 2 5 4\"\nassert solution(inp) == \"1 2 1 2\"\nassert solution(inp) == \"1 1\"\nassert solution(inp) == \"1 2\"\nassert solution(inp) == \"2\"\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp := list(map(int, stdin.split()))) == str(s)\n\"\"\""
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3 1 6\") == \"3 2 5 4\"\nassert solution(\"5 2\") == \"3 1 5\"\nassert solution(\"2 3\") == \"2 3\"\nassert solution(\"3 1\") == \"3 1\""
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stderr.readlines()) == 'YES'\nassert solution(stderr.readlines()) == 'YES'\nassert solution(stderr.readlines()) == 'YES'\nassert solution(stderr.readlines()) == 'NO'\n\n\n-----My Answer-----\n\n//\nINNOKENTE BYTECODE.\n//\nINNOKENTE DINAMODBCHE.\n//\nINNOKENTE PLAYFOOTBCHE.\n//\nINNOKENTE GOGOPARCELICE.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE GOPARCARCELE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBIBYL.\n//\nINNOKENTE ZAURDUCIELLE.\n//\nINNOKENTE DINAMODEIR.\n//\nINNOKENTE PLEIAUTOPLACIELLE.\n//\nINNOKENTE ENCANADOR.\n//\nINNOKENTE LYOUYSON.\n//\nINNOKENTE FEILDER.\n//\nINNOKENTE ZOBI"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"3\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"1\") == \"NO\"\nassert solution(\"3\") == \"YES\"\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('2') == 'YES'\nassert solution('3') == 'NO'\n\nassert solution('4') == 'NO'\nassert solution('5') == 'YES'\nassert solution('6') == 'NO'\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(5) == \"YES\"\nassert solution(4) == \"NO\"\nassert solution(3) == \"YES\"\nassert solution(5) == \"YES\"\nassert solution(7) == \"NO\"\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"YES\"\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"3\") == \"NO\"\nassert solution(\"2\") == \"NO\"\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2\") == \"YES\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"2\") == \"NO\"\nassert solution(\"3\") == \"YES\"\nassert solution(\"4\") == \"YES\"\n"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input().split()) == \"Impossible\""
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"ghjlnopefikdmbcqrstuvwxyz\"\nassert solution(stdin) == \"acbdefhijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"agjlnopefikdmbcqrstuvwxyz\"\nassert solution(stdin) == \"gjlnopefikdmbcqrstuvwxyz\"\nassert solution(stdin) == \"agjlnopefikdmbcqrstuvwxyz\"\n"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"Impossible\"\n\n\n-----Constraints-----\n0 < n <= 100\n\nTime Limit: 1 second\n\nSample Tests:\n>>> import math\n>>> math.is_prime(5)\nFalse\n>>> math.is_prime(16)\nTrue\n>>> math.is_prime(36)\nFalse\n>>> math.is_prime(24)\nFalse\n>>> math.is_prime(51)\nTrue\n>>> math.is_prime(73)\nFalse\n>>> math.is_prime(10000)\nFalse\n\n-----Submissions-----\n>>> 1\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10\n>>> 10\n10"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"zabrdefghjmnpqrsatuvwxyz\"), \"something is wrong\""
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"rivest shamir\") == \"bdehifgutnzbavrhklf\"\nassert solution(\"rivest shamir\") == \"cdeifhgtnfbrkopqrugv\"\nassert solution(\"rivest adelman\") == \"cijfaqnfrwtnlvxo\"\nassert solution(\"rivest adelman\") == \"ciejfrwxoedvmpa\"\nassert solution(\"rivest adelman\") == \"ccejfqoetnvrmn\"\n"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'Impossible'\n"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"rivest\") == \"bcdefghijklmnopqrstuvwxyz\"\nassert solution(\"shamir\") == \"cgfadilmouozvjbucwjmzmqjd\"\nassert solution(\"adleman\") == \"bcdefghijklmnopqrstuvwxyz\"\nassert solution(\"tourist\") == \"acbdefhijklmnopqrstuvwxyz\"\nassert solution(\"petr\") == \"agjlnopefikdmbcqrstuvwxyz\"\n"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 'agdf'\nassert solution(stdin) == 'ag'\nassert solution(stdin) == 'r'\nassert solution(stdin) == 'j'\nassert solution(stdin) == 'x'\n"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"Impossible\"\n\n\n-----Constraints-----\n1 <= n <= 100\n\nTime Limit: 10 seconds\n\nSample Input\n\n5\nF\nA\nA\nC\nH\nB\nC\n\nSample Output\n\nC\nA\nB\nC\nA\nC\nC\nA\nA\n\n-----Sample Output-----\n\nA\nB\nC\nC\nA\nB\nC\nA\nC\nC\nC\nC\nA\nB\nC\nC\n\n\"\"\"\nimport collections\n\nN = int(input())\n\n_id = 0\n_num = 0\n_dict = {}\nfor i in range(N):\n    name = input()\n    _id += 1\n    _num += 1\n    _dict[i] = name\n\n_dict = collections.OrderedDict(_dict)\n\n_dict_sorted = sorted(_dict.keys())\nprint(''.join([_dict[key] for key in _dict_sorted]))"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"agjlnopefikdmbcqrstuvwxyz\"\nassert solution(stdin) == \"cgyforever\"\nassert solution(stdin) == \"dmitriyh\"\nassert solution(stdin) == \"jovon\"\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.0101024047'\nassert solution(stdin) == '0.0102305859'\nassert solution(stdin) == '0.0545454545'\n\nNote\nInput string is case-sensitive.\n\nOutput string is case-sensitive.\n\n\n\n\"\"\"\n\n\nclass Solution:\n    def fair_game(self, n: int) -> int:\n        def to_sum(sum, n):\n            return (sum + n) % n\n\n        def get_max(total, n):\n            return (n * total) % n\n\n        def binomial_coeff(a, b):\n            if a == 0:\n                return b\n            return binomial_coeff(a - 1, b - 1)\n\n        def solution(stdin: str) -> int:\n            arr = []\n            for std in stdin:\n                arr.append(int(std))\n            arr = sorted(arr)\n            res = 0\n            for i in range(len(arr)):\n                if arr[i] % 2 == 1:\n                    res += binomial_coeff(arr[i], arr[i + 1])\n            return res % (10 ** 9 + 7)\n\n        return solution(stdin)\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0.0740740741\"\nassert solution(stdin) == \"0.0000000000\"\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(['1', '1', '1']) == '1'\nassert solution(['1', '2', '1']) == '1'\nassert solution(['1', '2', '2']) == '1'\nassert solution(['1', '2', '3']) == '1'\nassert solution(['1', '2', '4']) == '1'\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2\") == \"3.5\"\nassert solution(\"1 2 5\") == \"2.75\"\nassert solution(\"1 2 7\") == \"0.874451360\"\nassert solution(\"1 2 10\") == \"0.0042050695\"\nassert solution(\"2 2\") == \"0.0045517773\"\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"0.0740740741\"\n\"\"\"\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0.0000000000'\n\n\n\n\nInput\n\nFirst line contains a single integer n (2 \u2264 n \u2264 2000) \u2014 the number of balls in the jar.\n\nThe next n lines each contain n integers a_{i} (1 \u2264 a_{i} \u2264 5000) \u2014 the number written on the ith ball. It is guaranteed that no two balls have the same number.\n\nSecond line contains n integers b_{i} (1 \u2264 b_{i} \u2264 5000) \u2014 the number written on the ith ball. It is guaranteed that no two balls have the same number.\n\nThird line contains a single integer $k$ \u2014 the number of balls in the jar.\n\nFourth line contains $k$ lines each contains $k$ integers a_{i} b_{i} c_{i} d_{i} $i$ \u2014 the numbers written on the ith ball. It is guaranteed that no two balls have the same number.\n\nFifth line contains $k$ lines each contains $k$ integers a_{i} b_{i} c_{i} d_{i} $i$ \u2014 the numbers written on the ith ball. It is guaranteed that no two balls have the same number.\n\nThe final line contains an integer $k$ \u2014 the number of balls in the jar.\n\n-----Output-----\n\nPrint a single real value \u2014 the probability that Jerry has a higher total, given that Andrew wins the first two rounds and Jerry wins the third. Your answer will be considered correct if its absolute or relative error does not exceed 10^{ - 6}. \n\nNamely: let's assume that your answer is a, and the answer of the jury is b. The checker program will consider your answer correct, if $\\frac{|a - b|}{\\operatorname{max}(1, b)} \\leq 10^{ - 6}$.\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5\") == \"7\"\nassert solution(\"1\") == \"3\"\nassert solution(\"1 1\") == \"3\"\nassert solution(\"1 10\") == \"8\"\nassert solution(\"1 2 10\") == \"1\"\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2) == 0.0\nassert solution(3) == 0.1428571429\nassert solution(5) == 0.0\nassert solution(1000) == 0.0\nassert solution(2) == 0.0740740741\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == '0.0000000000'\nassert solution(3) == '0.0740740741'\nassert solution(10) == '0.0740740741'\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3' == '22') == '0.0740740741'\nassert solution('5') == '0.0000000000'\nassert solution('6') == '0.0000000000'"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0, \"Test failed\"\n"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"2 3 6\"\n) == \"5\"\nassert solution(\n    \"2 3 2\"\n) == \"0\""
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1'\n\"\"\"\n\nimport sys\nimport itertools\n"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(2, 4, 5, 2, 3, 4, 1, 2, 1, 3, 3, 1, 1, 4, 1, 1, 5, 3, 1, 1) == 4\nassert solution(2, 4, 5, 2, 3, 4, 1, 2, 1, 3, 3, 1, 1, 4, 1, 1, 5, 3, 1, 1) == 0\nassert solution(2, 4, 5, 2, 3, 4, 1, 2, 1, 3, 3, 1, 1, 4, 1, 1, 5, 3, 1, 1) == 5\n"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == 0, \"Pasha has failed\"\nprint('Congrats! Pasha is the solution!')"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 3 7 19\") == \"7\"\nassert solution(\"4 3 2 1\") == \"3\"\nassert solution(\"100 100 8 100\") == \"78\"\nassert solution(\"100 1000 8 100\") == \"16\"\nassert solution(\"1 1000 8 100\") == \"2\""
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 5 2 1\") == \"12\"\nassert solution(\"3 5 2 1\") == \"12\"\nassert solution(\"4 4 4\") == \"16\"\nassert solution(\"3 5\") == \"16\"\nassert solution(\"1 3 7 19\") == \"3\"\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 12\n-----Constraints-----\n1 <= stdin.length <= 10^4\n1 <= c_1, c_2, c_3, c_4 <= 1000\n0 <= n <= 1000\n0 <= m <= 1000\n\nTime Limit: 1 sec\n\nDoes not return anything, only prints the minimum sum.\n\"\"\"\n\nfrom collections import deque\nfrom sys import stdin\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '12'\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n1 <= stdin[i] <= 1000\n1 <= c_1, c_2, c_3, c_4 <= 1000\n1 <= n, m < 1000\n1 <= a_i < 1000\n\n\"\"\"\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('4 3 2 1') == '12'\nassert solution('3 5') == '1'\nassert solution('100 100 8 100') == '16'\nassert solution('3 2 7 19') == '2'\nassert solution('100 1 47 0 42') == '2'\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    stdin = '''\n1 3 7 19\n2 3\n2 5\n4 4 4\n\nOutput\n12\n\n1 3\n798\n1 2 3\n\nOutput\n1\n\n3 5\n7 94 12\n1 2 3\n'''\n    ) == '1'\n\nInput\n3 3 2\n2 3\n2 5\n4 4 4\n\nOutput\n16\n'''\n    ) == '1'\n\nassert solution(\n    stdin = '''\n3 3 2\n2 3\n2 5\n4 4 4\n\nOutput\n1\n\n1 3\n798\n1 2 3\n\nOutput\n1\n\n3 5\n7 94 12\n1 2 3\n'''\n    ) == '1'\n\nassert solution(\n    stdin = '''\n3 3 2\n3 3\n2 5\n4 4 4\n\nOutput\n1\n\n3 5\n7 94 12\n1 2 3\n\nOutput\n1\n\n3 5\n7 94 12\n1 2 3\n'''\n    ) == '1'\n\nassert solution(\n    stdin = '''\n1 2 3\n4 5\n3 4\n\nOutput\n16\n\n1 2\n\n1 3\n\n1 4\n1 5\n\n1 6\n1 7\n'''\n    ) == '1'\n\nassert solution(\n    stdin = '''\n1 1 1\n1 1\n1\n1\n1 1\n1\n1\n1 1\n1\n1\n1 1\n1 1\n1\n\nOutput\n5\n\n1 1 1\n1 1\n1\n1 1 1\n1 1\n1 1 1\n1 1\n1 1 1\n1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1\n1 1 1 1 1\n1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1\n\nOutput\n13\n\n1 1 1\n1 1\n1\n1\n1 1\n1 1\n1\n1 1\n1 1\n1 1\n1 1\n1 1 1\n1 1 1 1\n1 1 1 1 1\n1 1 1 1 1 1\n1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 3 7 19') == '1'\nassert solution('4 3 2 1') == '1'\nassert solution('100 100 8 100') == '1'\nassert solution('97 97') == '1'\nassert solution('100 100 8 100') == '1'\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 16\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\nstdin contains only digits from 1 to 1000\n0 <= c_1, c_2, c_3, c_4 < 1000\n0 <= n, m <= 1000\n0 <= a_i < 1000\n0 <= b_i < 1000\n\nExample 1:\n\nInput:\n\n2 3 7 19\n\nOutput:\n\n1\n\nExample 2:\n\nInput:\n\n3 3 7 19\n\nOutput:\n\n5\n\nExample 3:\n\nInput:\n\n2 3 6 19\n\nOutput:\n\n2\n\nExample 4:\n\nInput:\n\n3 5 6 19\n\nOutput:\n\n0\n\n------Constraints----\n1 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n, m <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\nInput:\n\n2 3\n3 5\n\nOutput:\n\n0\n\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n, m <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= n <= 1000\n\n1 <= m <= 100\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n------Constraints----\n0 <= b_i < 1000\n\n1 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\nInput:\n\n1 3\n\nOutput:\n\n2\n\nExample 2:\n\nInput:\n\n2 2\n\nOutput:\n\n2\n\nExample 3:\n\nInput:\n\n6 6\n\nOutput:\n\n2\n\n------Constraints----\n1 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3, c_4 < 1000\n\n1 <= n <= 1000\n\n0 <= a_i < 1000\n\n0 <= b_i < 1000\n\n------Constraints----\n0 <= c_1, c_2, c_3,"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5, 1 3 2 1 2) == 3\nassert solution(6, 2 1 2 2 4 1) == 2\nassert solution(6, 1) == 0\nassert solution(6, 3) == 2\nassert solution(6, 4) == 2"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(0) == \"2\"\nassert solution(1) == \"1\"\nassert solution(2) == \"1\"\nassert solution(3) == \"2\"\n"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 1 2\") == 1\nassert solution(\"2 1 2 2 4 1\") == 2\nassert solution(\"2 3 2 1 2\") == 2\nassert solution(\"2 4 1 1 2\") == 2"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\n\n\"\"\"\n\nn=int(input())\nd=list(map(int,input().split()))\nfor i in range(n):\n    d.append(int(input()))\n"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(5) == 3\nassert solution(6) == 2\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(1) == 3\n"
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"YES\"\n\nassert solution(input()) == \"NO\"\n"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 0 0\") == \"NO\"\nassert solution(\"2 0 0 1 2\") == \"YES\"\nassert solution(\"0 0 0\") == \"NO\"\nassert solution(\"0 0 0 1 2\") == \"YES\""
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('3\\n2\\n0\\n1\\n2\\n0\\n1\\n0\\n2\\n1\\n2\\n3\\n') == 'YES'\nassert solution('3\\n2\\n0\\n1\\n2\\n0\\n1\\n2\\n0\\n0\\n1\\n2\\n3\\n') == 'NO'"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1\\n2\\n2\\n3\\n2\\n5\\n7\\n1\\n2\\n4\\n5\\n3\\n6\\n6\\n7\\n4\\n1\\n2\\n5\\n6\\n1\\n2\\n5\\n1\\n2\\n3\\n5\\n6\\n1\\n2\\n1\\n5\\n2\\n3\\n5\\n1\\n2\\n4\\n5\\n1\\n3\\n2\\n4\\n5\\n1\\n2\\n3\\n5\\n2\\n1\\n2\\n1\\n5\\n2\\n1\\n5\\n1\\n1\\n3\\n3\\n4\\n5\\n1\\n3\\n2\\n4\\n5\\n1\\n1\\n2\\n3\\n4\\n1\\n2\\n3\\n3\\n4\\n2\\n3\\n5\\n1\\n2\\n1\\n1\\n2\\n3\\n5\\n1\\n1\\n1\\n1\\n3\\n5\\n2\\n1\\n2\\n2\\n4\\n4\\n5\\n1\\n3\\n3\\n2\\n5\\n1\\n1\\n1\\n2\\n2\\n1\\n3\\n2\\n3\\n1\\n5\\n1\\n3\\n2\\n1\\n3\\n4\\n3\\n5\\n1\\n3\\n3\\n1\\n2\\n2\\n4\\n4\\n5\\n1\\n3\\n1\\n2\\n5\\n2\\n1\\n3\\n3\\n2\\n2\\n1\\n5\\n1\\n3\\n2\\n4\\n5\\n1\\n1\\n3\\n2\\n3\\n1\\n2\\n3\\n4\\n4\\n5\\n1\\n2\\n2\\n3\\n4\\n3\\n1\\n2\\n2\\n4\\n4\\n3\\n5\\n2\\n1\\n2\\n1\\n2\\n3\\n3\\n1\\n2\\n3\\n1\\n1\\n5\\n1\\n2\\n3\\n3\\n2\\n3\\n1\\n1\\n3\\n2\\n1\\n1\\n3\\n2\\n3\\n1\\n5\\n1\\n1\\n1\\n1\\n1\\n5\\n1\\n5\\n1\\n5\\n3\\n1\\n1\\n1\\n2\\n1\\n1\\n3\\n1\\n2\\n3\\n2\\n3\\n2\\n3\\n1\\n3\\n1\\n2\\n1\\n1\\n3\\n3\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n5\\n1\\n1\\n3\\n1\\n2\\n1\\n3\\n1\\n3\\n1\\n2\\n1\\n3\\n1\\n1\\n2\\n3\\n3\\n1\\n2\\n1\\n2\\n3\\n3\\n1\\n1\\n1\\n5\\n1\\n3\\n3\\n1\\n1\\n3\\n1\\n5\\n2\\n1\\n3\\n1\\n3\\n2\\n1\\n1\\n3\\n3\\n1\\n1\\n2\\n1\\n3\\n1\\n3\\n1\\n5\\n1\\n1\\n2\\n1\\n3\\n1\\n1\\n1\\n3\\n3\\n1\\n1\\n1\\n3\\n3\\n1\\n3\\n3\\n2\\n2\\n3\\n1\\n1\\n3\\n1\\n3\\n2\\n1\\n3\\n1\\n3\\n3\\n2\\n1\\n1\\n2\\n2\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n3\\n3\\n2\\n2\\n1\\n1\\n2\\n3\\n1\\n3\\n1\\n2\\n3\\n1\\n1\\n3\\n1\\n1\\n1\\n1\\n3\\n2\\n1\\n3\\n1\\n3\\n1\\n1\\n1\\n3\\n1\\n1\\n2\\n3\\n1\\n1\\n3\\n1"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'NO'\n\n\n\n\n\n-----Alternatives-----\n\nIf we want to test a set of n points on the coordinate plane, we can write a function solution_set(x, y) that takes a point and a set of n points as arguments, and returns a list of those points that belong to the set.\n\nSuppose all points in the set are non-negative integers, then the points can be expressed as follows:\n\n\u00a0x = y = a\n\u00a0a = b = c = d = e = f = g = h = i\n\nwhere a, b, c, and d are unique values.\n\nHere, a, b, and c are distinct integers, and a, d, e, f, and g are unique values.\n\nFor example, if there is a set of n points (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0) and (6, 0), then they belong to the set, satisfying the same conditions.\n\nThe point that gets number i in any aesthetically pleasing numbering is a point in the set, such that a_{i} = b_{i} + c_{i} = d_{i} + e_{i} = f_{i} + g_{i} = h_{i} = i, such that 0 \u2264 a_{i} \u2264 b_{i} \u2264 c_{i} \u2264 d_{i} \u2264 e_{i} \u2264 f_{i} \u2264 g_{i} \u2264 h_{i} \u2264 i.\n\nFor example, say, we have n points (0, 0), (1, 0), (2, 0), (3, 0), (4, 0), (5, 0) and (6, 0). Then we want to prove that the points a_1, a_2, a_3, a_4, a_5, a_6 = 0, 0, 0, 0, 0, 0, since these points are all distinct,"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('1 0 0 -1 -1 -1') == 'NO'\nassert solution('1 -1 0 0') == 'YES'\nassert solution('1 0 1') == 'YES'\nassert solution('-1 0 0') == 'YES'\nassert solution('1 -1 -1') == 'NO'\n"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"NO\"\n\"\"\"\n"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == 'YES'\n"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('3 2') == 3\nassert solution('3 3') == 3\nassert solution('5 3') == 0\nassert solution('5 3') == 0\nassert solution('5 3') == 0\n"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3 0 3\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\n"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0 0 0 0\"\n"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 2\") == \"0 0 3\", \"Not right answer\"\nassert solution(\"5 3\") == \"0 0 4\", \"Not right answer\"\nassert solution(\"5 3 2\") == \"0 0 5\", \"Not right answer\"\n\nhttps://leetcode.com/problems/subsets/discuss/177272/Facebook-Python-Solution-with-2-lines-of-code"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3 0 3\"\n\n-----Constraints-----\n1 <= stdin.length <= 300\nstdin contains only the integers 1, 2, 3, and/or -1.\nstdin.length will not exceed 300.\nstdin contains only positive integers.\nstdin is guaranteed to be unique.\nstdin contains at most 10^9.\n\n\n-----Bug Fixes-----\n1. All the possible problems are in the same format.\n2. If any one of the first problem is a positive number, it is not possible to assign the second problem to the first.\n3. The initial value of $u_i$ and $v_i$ is not the same as $u_i$, $v_i$.\n4. No one likes to write a contest without any team.\n5. No one likes to write a contest with one person that's not included in the problem.\n6. The input problem consists of two problems: one score on the first problem and the first score on the second problem.\n7. No one likes to write a contest without any team.\n8. No one likes to write a contest with one person that's not included in the problem.\n9. No one likes to write a contest without any team.\n10. No one likes to write a contest with one person that's not included in the problem.\n10. No one likes to write a contest without any team.\n10. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one likes to write a contest with one person that's not included in the problem.\n11. No one likes to write a contest without any team.\n11. No one"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2\" \"1 3\") == \"3 0 3 \nassert solution(\"3 3\" \"-1 3\") == \"0 0 0 \nassert solution(\"2 2\" \"-1 3\") == \"0 0 0 \nassert solution(\"1 1\" \"1 3\") == \"3 0 3 \nassert solution(\"1 1\" \"1 2\") == \"2 1 2 \n"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0 0 0\"\n\"\"\""
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"3 5\") == \"1 3 2\"\nassert solution(\"3 3\") == \"1 3\"\nassert solution(\"3 1\") == \"1 1\"\nassert solution(\"3 3\") == \"2 3\"\nassert solution(\"3 4\") == \"3 4\"\n"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"4 14 4 16 10\"\n\"\"\""
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 6) == \"10 6 6\"\nassert solution(1, 1) == \"1 2 3 2 1\"\nassert solution(1, 10) == \"1 2 3 2 1\"\nassert solution(3, 6) == \"10 6 6\"\nassert solution(3, 5) == \"10\"\n"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '5'\n\"\"\"\nimport sys\nimport math"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n-----Constraints-----\n\n1 <= n <= 1e6\n1 <= m_1, m_2, m_3 <= 10^9\n1 <= a_i, m_i <= 10^9\n\n-----Grammar-----\n\nspace complexity: O(n)\ntime complexity: O(n)\n\nwhere n is the number of plots\n\n\"\"\""
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '10 6 6'\nassert solution(stdin) == '10 6 6'\nassert solution(stdin) == '10 6 8'\n"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == str(1)\nassert solution(stdin) == str(3)\nassert solution(stdin) == str(10)\nassert solution(stdin) == str(6)\nassert solution(stdin) == str(6)\n"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '5'\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\n1 <= m_i <= 10^9\n0 <= a_i <= 10^9\n1 <= n <= 1000\nm_1 <= m_i <= 10^9\nm_i >= 1\nm_1 < m_i < 10^9\n\n------Basic Cases---------\n\nTime Limit: O(n^2)\nSpace Complexity: O(n^2)\n\n\n-----Time complexity-----\n\nFor the constraints, the time complexity of our algorithm is O(n^2) as the number of skyscrapers are built per plot.\n\nFor the worst case, the time complexity of the algorithm is O(n^2) as the tallest skyscraper can fit.\n\nFor the best case, the time complexity of the algorithm is O(n^2) as all the skyscrapers are built in the tallest window of the plot.\n"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1 2 3 2 1'\nassert solution(stdin) == '1 2 3 2 1'\nassert solution(stdin) == '1 2 3 2 1'\nassert solution(stdin) == '1 2 3 2 1'\nassert solution(stdin) == '1 2 3 2 1'\n"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1 2 3 2 1'\nassert solution(stdin) == '10 6 6'\nassert solution(stdin) == '10 6 6'\nassert solution(stdin) == '10 6 8'\nassert solution(stdin) == '10 6 6'\n"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"10 6 6\"\n\"\"\"\n"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == '10 6 8'\nassert solution(inp) == '10 6 6'\nassert solution(inp) == '10 6 6'\nassert solution(inp) == '10 6 6'\nassert solution(inp) == '10 6 6'\n"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"6\"\n    ), \"There is no non-decreasing subsegment of sequence.\"\nassert solution(\n    \"3\"\n    ), \"There is no non-decreasing subsegment of sequence.\"\nassert solution(\n    \"3 2 1 4 3 2\"\n    ), \"There is no non-decreasing subsegment of sequence.\"\nassert solution(\n    \"6 3 9 1 7 3\"\n    ), \"There is no non-decreasing subsegment of sequence.\"\nassert solution(\n    \"6 2 1 5 4 1 3 3\"\n    ), \"There is no non-decreasing subsegment of sequence.\"\n"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin = \"7 5 2 4 3 3 9 8 3 4 3 3 5 1 2 4 2 2 7 6 4 3 6 4 3 6 3\"\n    ) == 12"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\n\n\n\n\n----Constraints----\n1 <= n <= 10^5\n\n\n----Side-effects----\nYou can not read the input or write to the input.\nYou can not read the input or write to the output.\n\n\"\"\""
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 5\n\"\"\"\n\nimport math"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    stdin = \"6 2 2 1 3 4 1\"\n) == 3\nassert solution(\n    stdin = \"3 2 9\"\n) == 10\n\n\nassert solution(\n    stdin = \"1 2 3\"\n) == 3\nassert solution(\n    stdin = \"2 3 1\"\n) == 2\nassert solution(\n    stdin = \"9 1 9\"\n) == 8\n"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '3'\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n\n-----Elements Used-----\nPython 3.8\n"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\"\"\"\n"
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(test_input) == \"3\"\nassert solution(test_input_2) == \"6\""
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin, \"\") == '-8'"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 4\n\n\n-----Reference-----\nhttps://stackoverflow.com/questions/24017664/calculating-sum-of-multiplication-and-division\n\n\"\"\"\n\nn = int(input())\narr = list(map(int, input().split()))"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '-8'\n"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"2 3\") == \"2\"\nassert solution(\"4 6 5 5\") == \"-8\"\nassert solution(\"4 6 6 4\") == \"0\"\nassert solution(\"6 6 5 5\") == \"0\"\n"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == str(sum(inp))\nassert (stdin == inp.rstrip()) or (stdin == \"\".join(list(map(str, inp))))\n"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('4') == '4'\nassert solution('6 6 5 5') == '0'\n"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == str(0)"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\") == \"-8\"\nassert solution(\"5\") == 0\nassert solution(\"6\") == 0\nassert solution(\"4\") == -8\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n'''\nimport math\nimport sys\nimport time\ninput = sys.stdin.readline\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 2\") == \"10\"\nassert solution(\"1 2\") == \"10\"\nassert solution(\"2 10 8\") == \"20\"\nassert solution(\"2 4\") == \"20\"\nassert solution(\"1 2 1\") == \"10\"\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '50'\nassert solution(stdin) == '60'\nassert solution(stdin) == '60'\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 1 8 10\", \"10 8\", \"5 7\", \"11 9\", \"3\") == 10\nassert solution(\"2 2 10 18\", \"10 4\", \"20 6\", \"5 3\", \"3\") == 20\nassert solution(\"2 2 10 18\", \"10 4\", \"20 6\", \"5 3\", \"3\", \"2\") == 20\nassert solution(\"2 2 10 18\", \"10 4\", \"20 6\", \"5 3\", \"3\", \"2\", \"1\") == 20\nassert solution(\"2 2 10 18\", \"10 4\", \"20 6\", \"5 3\", \"3\", \"2\", \"1\", \"1\") == 20\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '10'\n'''"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1 8 10\", \"10 8\", \"5 7\", \"11 9\", \"3\") == \"10\", \"Unexpected result\"\nassert solution(\"2 2 10 18\", \"10 4\", \"20 6\", \"5 3\", \"3\") == \"20\", \"Unexpected result\"\nassert solution(\"2 2 10 18\", \"10 4\", \"20 6\", \"5 3\", \"1\") == \"20\", \"Unexpected result\"\nassert solution(\"2 2 10 18\", \"10 4\", \"20 6\", \"5 3\", \"2\") == \"20\", \"Unexpected result\"\nassert solution(\"2 2 10 18\", \"10 4\", \"20 6\", \"5 3\", \"3\") == \"20\", \"Unexpected result\"\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\nprint('solution test passed')"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"3 1 8 10\") == 10\nassert solution(\"2 2 10 18\") == 10\nassert solution(\"5 7\") == 10\nassert solution(\"5 3\") == 20\nassert solution(\"11 9\") == 10\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.0000000000'\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == '0.3535533906'\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1.0000000000'\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"3 4 5 0 0\") == \"0.3535533906\"\nassert solution(\"3 4 5 0 3\") == \"0.3535533906\"\nassert solution(\"3 4 5 0 1\") == \"0.934366088\"\n\n\"\"\"\n\nclass Solution:\n    def maxDistanceToConvexPolygon(self, points: List[List[int]]) -> float:\n        points.sort(key=lambda x: (x[0], x[1]))\n        x_points, y_points = zip(*points)\n        if (sum(x_points) - sum(y_points) > 10 ** -6):\n            return max(1, math.sqrt(sum(x_points) - sum(y_points) / 2))\n        else:\n            return sum(x_points) / len(x_points)\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(inp) == \"0.3535533906\"\nassert solution(inp) == \"1.0000000000\"\nassert solution(inp) == \"0.9218750000\"\nassert solution(inp) == \"0.4537837818\"\nassert solution(inp) == \"0.9077320996\"\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0.3535533906'\n'''\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '1.0000000000'\nassert solution(stdin) == '0.3535533906'\nassert solution(stdin) == '1.0000000000'\nassert solution(stdin) == '0.3535533906'\nassert solution(stdin) == '1.0000000000'\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 0 0\") == \"0.3535533906\"\nassert solution(\"5 0 -1 1\") == \"0.18285714285714285\"\nassert solution(\"5 -4 -8 -3 -2 -1\") == \"1.0000000000\"\nassert solution(\"10 -8 -8 -8 -8 -8 -8 -8\") == \"2.0000000000\"\nassert solution(\"10 -8 -8 -8 -8 -8 -8 -8\") == \"3.0000000000\"\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '0.3535533906'\n\n-----Constraints-----\n\n1 <= n <= 10^5\n-10^9 \u2264 x_1, y_1, x_2, y_2,..., x_{n}\n-10^9 \u2264 x_i, y_i, x_j, y_j,..., x_{n}\nx_i = -10^9 \u2264 x_{i} < 10^9\n\n\"\"\""
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0.3535533906\"\n\n-----Constraints-----\n\n1 <= n <= 10^4\n\n0 <= x_i <= 10^9\n\n0 <= y_i <= 10^9\n\n0 <= D <= 10^6\n\n-------\"\"\"\n"
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"101\"\nassert solution(stdin) == \"0111010111101000110101001010101010101\"\nassert solution(stdin) == \"0001111011000111011000111011000111101\"\n"
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"0011110\"\nassert solution(stdin) == \"01110011\"\nassert solution(stdin) == \"0100010\"\nassert solution(stdin) == \"01100001\"\nassert solution(stdin) == \"01100000\"\n"
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '010'\n\"\"\""
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '010'\nassert solution(stdin) == '010'\nassert solution(stdin) == '1011'\nassert solution(stdin) == '0111'\nassert solution(stdin) == '0111'\n"
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"010\"\nassert solution(stdin) == \"0101110111001011101\"\nassert solution(stdin) == \"011\"\nassert solution(stdin) == \"0100101000100010101\"\nassert solution(stdin) == \"01110110011100110001\"\n"
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"0010\"\nassert solution(stdin) == \"000100\"\nassert solution(stdin) == \"0001000\"\n"
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '010'\n\nassert solution(stdin) == '000'\n\nassert solution(stdin) == '000'\n\nassert solution(stdin) == '010'\n\nassert solution(stdin) == '000'"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(6, [3, 2, 1]) == 6\nassert solution(5, [1, 2, 3, 4]) == 3\nassert solution(2, [1, 3]) == 3\nassert solution(2, [3, 4]) == 1\nassert solution(3, [1, 2, 3]) == 3\n"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '6'\n'''\n"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"2 5 1\", \"2 3\", \"1\") == 6\nassert solution(\"1 3 1\", \"3 2\", \"1\") == 4\nassert solution(\"2 5 2\", \"2 3\", \"1\") == 4\nassert solution(\"1 3 3\", \"3 2\", \"1\") == 3\nassert solution(\"4 6 2\", \"3 4\", \"1\") == 2\n"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(4, 1) == 5\nassert solution(3, 2) == 7\nassert solution(5, 4) == 14\nassert solution(4, 5) == 16\nassert solution(2, 3) == 9\n"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == '6'\nassert solution(input()) == '4'\n"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '5'\nassert solution(input()) == '6'\nassert solution(input()) == '4'"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == \"6\"\n\nassert solution(input()) == \"5\"\n\nassert solution(input()) == \"3\"\n\nassert solution(input()) == \"2\"\n\nassert solution(input()) == \"1\""
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '6'\n\n-----Constraints-----\n0 \u2264 n \u2264 100 000\n-10^9 \u2264 a_{i} \u2264 10^9\n-10^9 \u2264 b_{i} \u2264 10^9\n-10^9 \u2264 h_{i} \u2264 10^9\n\n\n-----Time complexity-----\nO(n)\n\n\n-----Space Complexity-----\nO(n)\n\n\n'''\n\nimport sys"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1,5,1,2,3,3,4,5) == 6, \"Expected 6 but got {}\".format(6)\nassert solution(1,6,1,2,3,3,4,5) == 6, \"Expected 6 but got {}\".format(6)\nassert solution(1,6,1,2,3,3,4,5) == 4, \"Expected 4 but got {}\".format(4)\nassert solution(1,1,2,3,2,1,1,2) == 1, \"Expected 1 but got {}\".format(1)\n"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"1\"\n\nassert solution(input()) == \"4\"\n\n\n\n-----Submissions-----"
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nInput\n3\n1 2 -3\n1 2 -3\n\nOutput\n5\n\"\"\""
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution([\"3\", \"1 -2\", \"2 2 -1\", \"-1 -2\"]) == \"3\"\nassert solution([\"3\", \"1 -2\", \"2 2 -1\", \"-1 -2\"]) == \"1\"\nassert solution([\"3\", \"1 -2\", \"2 2 -1\", \"-1 -2\"]) == \"3\"\nassert solution([\"3\", \"1 -2\", \"2 2 -1\", \"-1 -2\"]) == \"1\"\nassert solution([\"3\", \"1 -2\", \"2 2 -1\", \"-1 -2\"]) == \"3\"\n"
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\n\n\n\"\"\"\n"
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 5\n\n\"\"\""
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\n\n\"\"\""
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('2 3 -1 2 3') == 5\n\nassert solution('1 -2 2 3') == 3\n\nassert solution('1 0 2 -1 3') == 3\n\nassert solution('0 2 -1 0 1') == 1\n\nassert solution('2 -1 0 3 1') == 2"
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n'''\n"
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 3"
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input().strip()) == \"5\"\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 a_i \u2264 10^9\n\n-----Time Limit-----\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\nExample Input:\n\n3\n
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4, \"1001\", \"1\") == \"100\"\nassert solution(1, \"101\", \"1\") == \"1\"\nassert solution(1, \"1100\", \"1\") == \"1\"\nassert solution(1, \"1001\", \"1\") == \"1\"\nassert solution(1, \"1001\", \"1010\") == \"1001\"\n"
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '100'\n\"\"\"\n"
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(4, \"1001\") == 1001\nassert solution(1, \"1001\") == 1\nassert solution(2, \"1001\") == 1\nassert solution(3, \"1001\") == 1\nassert solution(4, \"1010\") == 1001\n"
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1000100001\") == \"1000100001\"\nassert solution(\"00100001\") == \"1\"\nassert solution(\"10001\") == \"1\"\nassert solution
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"100\"\nassert solution(stdin) == \"01\"\nassert solution(stdin) == \"001\"\nassert solution(stdin) == \"0001\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\n    stdin.readline().split()\n) == \"1010\"\n\n\n------Variables-----\n\nstdin: str\nstring: str\n\nstring: str = \"1001\"\nstring: str = \"1010\"\nstring: str = \"1100\"\nstring: str = \"100\"\n\n----------------------"
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"001\"\n\nassert solution(inp) == \"0\"\n\nassert solution(inp) == \"000\"\n\nassert solution(inp) == \"000\"\n\nassert solution(inp) == \"111\""
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(inp) == inp\nassert solution(inp) == \"1001\"\nassert solution(inp) == \"1111101011\"\nassert solution(inp) == \"1001\"\nassert solution(inp
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"100\"\nassert solution(input()) == \"101\"\nassert solution(input()) == \"1101\"\n\n\n-----Example-----\n\nInput 1:\n\n3\n1\n1 1 1 1\n\n\nInput 2:\n\n4\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nExample 3:\n\nInput 3:\n\n
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"100\"\n\nassert solution(stdin) == \"100\"\n\nassert solution(stdin) == \"1010\"\n\nassert solution(stdin) == \"1010\"\n\nassert solution(stdin) == \"1100\""
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '7'\nassert solution(stdin) == '10'\n"
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"rrrrrrrrrrr\") == \"rrrrrrrrrrr\"\nassert solution(\"wooch\") == \"w\"\nassert solution(\"deeeeeeeeeeeeee\") == \"eeeeeeeeeeeeeee\"\nassert solution(\"aabbccddeefghi\") == \"deeeeeeeeeeeeee\"\nassert solution(\"aabbaabbbbbcccdddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd"
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"input\") == '2'\nassert solution(\"3\") == '1'\nassert solution(\"8\") == '1'\nassert solution(\"5\") == '2'\nassert solution(\"1\") == '0'\n"
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3 2 7 2'\n\"\"\""
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '6'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'\n\nassert solution(stdin) == '2'"
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('abcd') == '2'\nassert solution('aabbddee') == '6'\nassert solution('abb') == '3'\nassert solution('dee') == '1'\nassert solution('deef') == '3'\n"
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"7\"\n\n\"\"\""
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '8'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(5, \"abdc\") == \"abdcd\"\nassert solution(8, \"drpepper\") == \"drdpqp\"\nassert solution(8, \"cocacola\") == \"cocacola\"\nassert solution(8, \"a\") == \"a\"\nassert solution(8, \"b\") == \"b\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 3\") == \"1\"\nassert solution(\"5 2\") == \"1\"\nassert solution(\"5 2\") == \"2\"\nassert solution(\"5 3\") == \"2\"\nassert solution(\"5 4\") == \"1\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"3\"\nassert solution(input) == \"6\"\nassert solution(input) == \"1\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"5 3\"), \"2\"\nassert solution(\"5 3\"), \"1\"\nassert solution(\"5 3\"), \"1\"\nassert solution(\"5 3\"), \"3\"\nassert solution(\"5 3\"), \"6\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"5 3 2\") == \"3\"\nassert solution(\"5 3 1 2\") == \"3\"\nassert solution(\"5 3 1 1 2\") == \"3\"\nassert solution(\"5 3 1 1 3\") == \"3\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"1\"\n\nassert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 3') == '3'\nassert solution('5 3') == '3'\nassert solution('5 3') == '3'\nassert solution('5 3') == '3'\nassert solution('5 3') == '3'\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 3') == '3'\nassert solution('5 3 1') == '3'\nassert solution('5 3 1 2') == '3'\nassert solution('5 3 2') == '3'\nassert solution('5 3 2 3') == '4'\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"5\",\"3\"]) == \"3\"\nassert solution([\"5\",\"3\",\"4\"]) == \"2\"\nassert solution([\"5\",\"3\",\"4\",\"3\",\"2\"]) == \"1\"\nassert solution([\"5\",\"3\",\"4\",\"3\",\"2\",\"3\",\"4\",\"2\",\"4\",\"3\",\"2\",\"4\",\"3\",\"2\"]) == \"4\"\nassert solution([\"5\",\"3\",\"4\",\"3\",\"2\",\"3\",\"4\",\"2\",\"4\",\"3\",\"2\",\"4\",\"3\",\"2\",\"4\"]) == \"2\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"5 4\") == \"0\"\nassert solution(\"5 3\") == \"1\"\nassert solution(\"5 4\") == \"1\"\nassert solution(\"5 5\") == \"3\"\n"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == \"Yes\"\nassert solution(2) == \"No\"\n"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('3 2 4') == 'Yes'\nassert solution('1 3 2 4') == 'No'"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input) == 'No'\n"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"Yes\"\nassert solution(\"1 3 3\") == \"Yes\"\nassert solution(\"1 4 5\") == \"No\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"1 1 3\") == \"No\"\n"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"1 2 3 4\"\n) == \"Yes\"\n\"\"\""
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"1 2 3 4\") == \"Yes\"\nassert solution(\"2 3 4\") == \"Yes\"\nassert solution(\"3 4 1\") == \"No\"\nassert solution(\"3 4 2\") == \"No\"\nassert solution(\"3 4 3\") == \"No\"\n"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1, 2, 4) == 'Yes'\nassert solution(4, 4, 4) == 'No'\nassert solution(2, 1, 4) == 'No'\nassert solution(1, 1, 1) == 'Yes'\nassert solution(1, 3, 2) == 'Yes'\n"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1 3 2 4\") == \"Yes\"\nassert solution(\"1 2 1 3\") == \"No\""
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3 2 4\") == \"Yes\"\nassert solution(\"1 2 1\") == \"Yes\"\nassert solution(\"1 1 1\") == \"No\"\nassert solution(\"1 1 2\") == \"No\"\n"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"1 3 2 4\") == \"Yes\"\nassert solution(\"4 4 2\") == \"No\"\nassert solution(\"3 4 4 5\") == \"No\"\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 1\") == \"1\"\nassert solution(\"1 10\") == \"1 5\"\nassert solution(\"1 100\") == \"1 4\"\nassert solution(\"2 10\") == \"1 5\"\nassert solution(\"2 100\") == \"1 2\"\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"1 2\") == \"1\"\nassert solution(\"1 3\") == \"2\"\nassert solution(\"1 5\") == \"5\"\nassert solution(\"1 1\") == \"4\"\nassert solution(\"1 2 2\") == \"3\"\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"101\") == 5\nassert solution(\"100\") == 5\nassert solution(\"11\") == 5\nassert solution(\"10\") == 5\nassert solution(\"5\") == 5\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(10) == 5\nassert solution(5) == 7\nassert solution(1) == 2\nassert solution(2) == 1\nassert solution(5) == 2\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input) == 0, \"The problem is not solved.\"\n\"\"\"\n\nimport math\nfrom itertools import combinations\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(5) == 5\n\n-----Expected Output-----\nExpected output:\n5\n\nInput Format:\nThe first line contains an integer, L.\nThe next L lines contains a positive integer, L.\n\nOutput Format:\nPrint the number of pairs (a, b) that satisfy the conditions, modulo 10^9 + 7.\n\nSample Input:\n3\n5\nSample Output:\n3\n5\nSample Input:\n0\n2\nSample Output:\n0\nSample Input:\n1\n2\nSample Output:\n2\nExplanation:\nThe pairs (0, 0) and (0, 2) satisfy the conditions (0, 0) \\leq (0, 2).\nThere are two pairs (0, 0) and (0, 2) that satisfy the conditions (0, 0) \\leq (0, 2).\nThere are two pairs (0, 0) and (2, 0).\n\nInput Format:\nThe first line contains an integer, L, denoting the length of the array.\nThe next L lines contains an integer, L, denoting the numbers of the array elements.\nOutput Format:\nPrint the number of pairs (a, b) satisfying the conditions, modulo 10^9 + 7.\n\nSample Input:\n0\n2\n3\nSample Output:\n2\n\"\"\""
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 5\n\n-----Time complexity-----\ntime O(n^3)\n\ntime O(n)\n\n-----Space Complexity-----\nn\n\n\"\"\"\n\nimport math\nfrom typing import List\n\n\nclass Solution:\n    def xorCount(self, L: int) -> int:\n        x = 1\n        for k in range(L // 2):\n            x ^= int(math.log2(k + 1))\n        return 2 ** x - 1\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"0\") == \"2\"\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(0) == \"5\"\nassert solution(1) == \"5\"\nassert solution(2) == \"5\"\nassert solution(3) == \"5\"\nassert solution(4) == \"5\"\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"5\"\n\"\"\""
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str(inp)) == \"Yes\" or solution(str(inp)) == \"No\"\n"
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"Yes\" or \"No\"\n"
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"4 5\") == \"No\"\nassert solution(\"4 3\") == \"No\"\nassert solution(\"3 2\") == \"Yes\""
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(solution) == \"Yes\" or \"No\"\n"
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"10 20\") == \"No\"\nassert solution(\"60\") == \"No\"\nassert solution(\"1\") == \"Yes\"\nassert solution(\"3\") == \"Yes\"\n"
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == 'Yes'\nassert solution(input()) == 'No'"
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n'''\n"
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\u201c2 2 \u201d) == \"Yes\"\nassert solution(\u201c2 2 2\u201d) == \"Yes\"\nassert solution(\u201c5 2 5\u201d) == \"No\"\nassert solution(\u201c10 2\u201d) == \"No\"\n\"\"\""
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('1 1') == 'No'\nassert solution('1 2') == 'Yes'\nassert solution('3 2') == 'Yes'\nassert solution('3 4') == 'No'\nassert solution('5 1') == 'No'\n"
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()), \"No\""
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"dreamer\") == \"YES\"\nassert solution(\"dreamer\") == \"NO\"\nassert solution(\"eraser\") == \"NO\"\nassert solution(\"eraser\") == \"YES\"\n"
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"dreamer\", \"erase\", \"eraser\", \"erasure\"]) == \"YES\"\nassert solution([\"dreamer\"]) == \"NO\"\nassert solution([\"eraser\", \"erase\", \"eraser\", \"erasure\"]) == \"NO\"\n\"\"\"\n\nclass Solution:\n    def solution(self, input):\n        result = False\n        \n        #create empty string\n        output = \"\"\n        \n        #create loop to append each input into the output string\n        for char in input:\n            output += char\n            \n        #check if output is equal to input\n        if output == input:\n            result = True\n        \n        return result"
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"dreamer\") == \"YES\"\nassert solution(\"eraser\") == \"NO\"\nassert solution(\"erase\") == \"NO\"\nassert solution(\"dreamerer\") == \"YES\"\n"
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('dreamer') == 'YES'\nassert solution('erase') == 'NO'\nassert solution('eraser') == 'NO'\nassert solution('erase') == 'YES'\nassert solution('erase') == 'NO'\n"
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"dreamer\") == \"YES\"\nassert solution(\"erase\") == \"NO\"\nassert solution(\"eraser\") == \"NO\""
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(erasedream) == 'YES'\n\"\"\""
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"dreamer\") == \"YES\"\nassert solution(\"eraser\") == \"NO\"\n\nassert solution(\"dreamerer\") == \"NO\"\nassert solution(\"eraser\") == \"NO\"\n\nassert solution(\"eraserear\") == \"NO\"\n"
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"dreamer\") == \"YES\"\n\nassert solution(\"eraser\") == \"NO\"\n"
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"AABCCBAAB\", \"ABCB\", \"A\", \"B\", \"A\", \"C\", \"B\", \"A\"]) == \"10\"\nassert solution([\"A\", \"A\", \"A\", \"B\", \"A\", \"C\", \"B\", \"A\"]) == \"0\"\nassert solution([\"ABC\", \"AA\", \"BC\", \"A\", \"B\", \"C\", \"A\", \"D\"]) == \"1\"\nassert solution([\"A\", \"A\", \"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"D\"]) == \"1\"\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10011\"\n\n\"\"\"\nfrom collections import defaultdict\nimport heapq\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n\"\"\""
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"AB\") == \"1\"\nassert solution(\"AAB\") == \"0\"\n\n-----Example-----\nInput\nAABCCBAAB\nABCB\n5\n1 3 1 2\n2 2 2 4\n7 9 1 1\n3 4 2 3\n4 5 1 3\n\nOutput\n10011\n\n\n-----Note-----\n\nIn the first query we can achieve the result, for instance, by using transitions $A A B \\rightarrow A A A C \\rightarrow \\operatorname{AAA} A B \\rightarrow A B$.\n\nThe third query asks for changing AAB to A\u00a0\u2014 but in this case we are not able to get rid of the character 'B'.\n\nThe fourth query asks for changing AAB to AA\u00a0\u2014 but in this case we are not able to get rid of the character 'A'.\n\nThe fifth query asks for changing AAB to A and changes the string to contain only A and B.\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('AabcB') == '1'\nassert solution('AabcB') == '0'\nassert solution('ABCB') == '0'\nassert solution('ABCB') == '1'\nassert solution('AABB') == '1'\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin), 'Illegal input'\n\"\"\"\n\nfrom collections import Counter\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\n\n\n-----Constraints-----\n\n1 \u2264 T \u2264 Q \u2264 10^5\n1 \u2264 a, b, c \u2264 |S|\na \\in S\nb \\in S\nc \\in S\n1 \u2264 d \u2264 |T|\n4 \u2264 |S| \u2264 10^5\n\n\n\n-----Time Complexity-----\n\nO(n^2)\n\n\"\"\"\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('AABCCBAAB') == '10011'\nassert solution('ABCB') == '1'\nassert solution('ABC') == '0'\nassert solution('AB') == '0'\nassert solution('AC') == '0'\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aa?ab?a\") == \"baab\"\nassert solution(\"??b?\") == \"azbz\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"abcdabac\") == \"abcdabac\"\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"?\") == \"baab\"\nassert solution(\"ab\") == \"baab\"\nassert solution(\"abab\") == \"baab\"\nassert solution(\"abababab\") == \"baababab\"\nassert solution(\"a?b\") == \"ababab\"\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"baab\"\nassert solution(input()) == \"abab\"\nassert solution(input()) == \"abab\"\nassert solution(input()) == \"azbz\"\nassert solution(input()) == \"abab\"\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abab\") == \"baab\", \"expect 'baab' but got '%s'\" % solution(\"abab\")\nassert solution(\"aab\") == \"abab\", \"expect 'abab' but got '%s'\" % solution(\"aab\")\nassert solution(\"abc\") == \"abc\", \"expect 'abc' but got '%s'\" % solution(\"abc\")\nassert solution(\"abacaba\") == \"abacaba\", \"expect 'abacaba' but got '%s'\" % solution(\"abacaba\")\nassert solution(\"a?\") == \"?\", \"expect '?' but got '%s'\" % solution(\"a?\")\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"baab\") == \"baab\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"z\") == \"z\"\nassert solution(\"??b\") == \"?\"\nassert solution(\"aab\") == \"?\"\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aa?\",\"ab\",), \"aaab\"\nassert solution(\"??b?\",\"za\",), \"za\"\nassert solution(\"abcd\",\"abacaba\",), \"abacaba\"\nassert solution(\"a\",\"a\",), \"a\"\nassert solution(\"aa\",\"a\",), \"a\"\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"aa??\") == \"baab\", \"Failed to convert string to alphabet\"\nassert solution(\"aa?b?\") == \"baab\", \"Failed to convert string to alphabet\"\nassert solution(\"abcd?\") == \"abcd\", \"Failed to convert string to alphabet\"\nassert solution(\"aaab??\") == \"baab\", \"Failed to convert string to alphabet\"\nassert solution(\"baab??\") == \"abab\", \"Failed to convert string to alphabet\"\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"baab\") == \"abab\"\nassert solution(\"za\") == \"zabz\"\nassert solution(\"abcd\") == \"abcd\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(?aa?) == 'baab'\nassert solution(?ab) == 'abab'\nassert solution(?abz) == 'abab'\nassert solution(??b?) == 'baab'\nassert solution(??b) == 'baab'\n"
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"baab\"\n\nassert solution(stdin) == \"azbz\"\n\nassert solution(stdin) == \"baab\"\n\nassert solution(stdin) == \"azbz\"\n\n------------------\n\nInput\n\nZa\n\nOutput\nA\n\nExplanation\n\nString Za only contains 'a' and 'z', so it is not suitability of string Ba.\n\nZa contains only 'a', 'z' and 'b', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'z' and 'c', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'z' and 'd', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd' and 'z' and 'e', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z' and 'e', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z' and 'e', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z' and 'e', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h' and 'i', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i' and 'j', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i' and 'j', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j' and 'k', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l' and'm', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o' and 'p', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p' and 'q', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v' and 'w', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x' and 'y' so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y' and 'z', so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z' and 'x' so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'x' and 'y' so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'x', 'y' and 'z' so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'x', 'y', 'z' so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'x', 'y', 'z' so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'x', 'y', 'z' so it is suitability of string Ba.\n\nZa contains only 'a', 'b', 'c', 'd', 'z', 'e', 'f', 'g', 'h', '"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin), \"incorrect format\"\n"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\n\n\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n\n0 < L_i < 10^9\n\n------Time Limit---------\n1 second\n\n------Memory Limit---------\n256 megabytes\n\n------solution-------\n"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '3'\n\n\n\"\"\""
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin), \"The function is not implemented\"\n"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(2) == 2\nassert solution(1) == 2\nassert solution(4) == 4\nassert solution(0) == 0\nassert solution(1) == 1\n"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 1\n\nInput\n4\n0 1 0 10\n\nOutput\n1\n\nInput\n2\n0 0\n\nOutput\n2\n\nInput\n10\n1 1 3 0 0 0 2 1 0 3\n\nOutput\n3\n"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input().split()) == \"4\"\n\"\"\""
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 2\") == \"1\"\nassert solution(\"0 0\") == \"0\"\nassert solution(\"3 3\") == \"1\"\n"
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input(\"A\")) == \"2\"\n\n\n----------------------\n\nInput\nvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nNote: the \"v\"s are consecutive and \"v\"s can never occur in the string.\n\n\n----------------------\n\nInput\nvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n\n-------------------\n\nInput\nvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv\n\nOutput\n0\n\n------------------\n\nInput\nvvvvvvvvvvvvvvvvvv"
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 4\n\n\n\n----------Test Cases-------------\n\nstdin: \"vvvv\"\nOutput: 99\nExplanation: We have a large wow factor of 4.\n\nstdin: \"vvvovvv\"\nOutput: 99\nExplanation: The string \"vvvv\" can be replaced with \"vvvv\" without breaking the \"v\"s.\n\nstdin: \"vvvvvvvvvvvvv\"\nOutput: 100\nExplanation: The string \"vvvvvvvvvvvvv\" can be replaced with \"vvvvvvvvvvvvv\" without breaking the \"v\"s.\n\nstdin: \"vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 110\n\n-----Guidelines-----\n\nThe quick brown fox jumps over the lazy dog.\nThe tired dog sleeps at the end, and the dog slept it evening.\nWhen the dog was born, he did not sleep.\nWhen the dog was a wolf, he did not sleep.\nThe wolf do not sleep."
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 4\n\n\"\"\""
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"vovvvvvvvv\") == 3\nassert solution(\"vvvvvvvvv\") == 2\nassert solution(\"vvvvvvvvvv\") == 1\nassert solution(\"vvvvvvvvvv\") == 0\nassert solution(\"vvvvvvvvvv\") == 0\n"
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"wowowowoowoowoowoowoowoowowowowoowowoowoowoowowoowowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowoowo"
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"vvvvvvvvv\"), \"wow\"\nassert solution(\"vwvvvwvvvvv\"), \"vvvvv\"\nassert solution(\"vvvvvwvvvwwvvvvvvvvvvv\"), \"vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv"
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == 4\n\nSee Also\n\n- https://www.geeksforgeeks.org/in-a-string-check-if-two-strings-are-equal/\n\"\"\""
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 100\n\n\"\"\"\n"
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 1\") == \"0.5000000000\"\nassert solution(\"1 100\") == \"-1\"\nassert solution(\"3 5\") == \"0.5000000000\"\nassert solution(\"4 3\") == \"0.5000000000\"\nassert solution(\"5 2\") == \"0.5000000000\"\n"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"0.5000000000\"\n'''\n"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 2 1\") == \"2\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"3 5\") == \"0.5\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"5 2\") == \"0.5\"\n"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '1.0000000000'\n\nassert solution(stdin) == '1.0000000000'\nassert solution(stdin) == '1.0000000000'\nassert solution(stdin) == '0.5000000000'\nassert solution(stdin) == '0.0000000000'\n"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"0.5000000000\"\n\n\n-----Examples-----\nInput\n1 10\n5 2\n5 2\n5 6\n6 1\n\nOutput\n0.5000000000\n\n\n-----Notes-----\n\nIn sample test 1, you can charge the first device for the entire time until it hits zero power. The second device has enough power to last this time without being charged.\n\nIn sample test 2, we can use the device indefinitely.\n\nIn sample test 3, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\n\nIn sample test 4, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\n\nIn sample test 5, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\n\nIn sample test 6, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 7, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 8, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 9, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 10, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 11, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 12, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 13, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 14, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 15, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 16, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 17, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 18, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 19, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 20, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 21, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 22, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 23, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 24, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 25, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 26, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 27, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 28, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 29, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 30, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 31, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 32, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 33, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 34, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 35, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 36, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 37, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 38, we can charge the third device for 2 / 5 of a second, then switch to charge the second device for a 1 / 10 of a second.\nIn sample test 39"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p <= 10^9\n\n1 <= a_{i} <= 100 000\n1 <= b_{i} <= 100 000\n\"\"\"\nimport math\nimport sys\n"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"2.0000000000\"\n"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"0.5000000000\"\n"
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"2 1\") == \"0\"\nassert solution(\"3 5\") == \"0.5000000000\"\nassert solution(\"4 3\") == \"0\"\nassert solution(\"5 2\") == \"0\"\nassert solution(\"6 1\") == \"0\"\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2') == 5\nassert solution('5') == 0\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, 1) == 8\nassert solution(3, 2) == 6\nassert solution(3, 3) == 6\nassert solution(3, 4) == 5\nassert solution(3, 5) == 5\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 3\\n2 3\\n1 2 3\\n1 2 3\") == 4\nassert solution(\"4\\n3 2 3\\n1 2 3\") == 6\nassert solution(\"2 2\\n3 3\\n1 2 3\") == 4\nassert solution(\"4\\n2 2\\n3 3\\n1 2 3\") == 3\nassert solution(\"2 1\\n3 1\") == 3\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"9\"\n\nInput\n3 3\n1 2 3\n\nOutput\n8\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 3\") == 8\nassert solution(\"5 5\") == 1\n\n'''\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == 8\nassert solution(\"2 1 4\") == 2\nassert solution(\"3 1 4\") == 4\nassert solution(\"3 3\") == 3\nassert solution(\"4 3\") == 2\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '8'\n'''\nclass Solution:\n    # @param A : list of list of integers\n    # @param B : list of integers\n    # @param C : list of list of integers\n    # @return a strings\n    def solve(self,A,B,C):\n        visited = [False for _ in range(len(A))]\n        dist = [10000 for _ in range(len(A))]\n        dist[0] = 0\n        for i in range(len(A)):\n            for j in range(len(C[i])):\n                if visited[j] == False and A[i][j] < B[i]:\n                    dist[i] = min(dist[i], dist[j] + 1)\n        for i in range(len(dist)):\n            if dist[i] < C[i][len(C[i])-1]:\n                return str(i)"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 3\\n2 3\\n3 3\\n3 3\") == \"7\"\nassert solution(\"1 3\\n1 3\\n3 3\\n3 3\") == \"4\"\nassert solution(\"1 3\\n2 2\\n1 2\\n2 2\\n3 3\\n3 3\") == \"1\"\nassert solution(\"1 3\\n2 2\\n3 2\\n3 2\\n3 3\") == \"0\"\nassert solution(\"1 3\\n2 2\\n3 3\\n3 3\") == \"0\"\n"
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(4, 1) == 3\nassert solution(8, 12) == 6\nassert solution(1, 2) == 1\nassert solution(10, 10) == 20\nassert solution(1, 2) == 1\n"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '22'\n\nAssumptions\n\nstdin must contain 7 integers, each separated by a space (1 \u2264 int(stdin[i]) \u2264 10^9).\n\nExplanation\n\nInput\n5 7\n+ 5\n- 10\n- 20\n+ 40\n- 20\n\nOutput\n22 1\n\n\"\"\""
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"1 2 2 2 1 2 2 2 1 2 2 1 2 2\"\n\"\"\""
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3 2\"\n\"\"\"\nclass IceCream:\n    def __init__(self, buffer=None):\n        self.buffer = buffer if buffer else []\n    def add(self, buffer):\n        self.buffer.append(buffer)\n    def insert(self, index, buffer):\n        self.buffer.insert(index, buffer)\n    def pop(self, buffer):\n        self.buffer.pop()\n    def remove(self, buffer):\n        self.buffer.remove(buffer)\n    def size(self):\n        return len(self.buffer)\n    def empty(self):\n        return bool(self.buffer) == []\n"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"22 1\"\n"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"5 7\") == \"22 1\"\nassert solution(\"5 17\") == \"3 2\"\nassert solution(\"5 17\") == \"22 1\"\nassert solution(\"5 17\") == \"3 2\"\nassert solution(\"5 17\") == \"22 1\"\n"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '22'\nassert solution(stdin) == '1'\nassert solution(stdin) == '3'"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution('5 7\\n+ 5\\n- 10\\n+ 40\\n- 20\\n+ 100\\n+ 98') == '22 1'\n\n\n-----Constraints-----\n1 <= n <= 1000\n1 <= x <= 10^9\n\n------Time Limit: 0.01 seconds per testcase.-------------------\nclass Solution:\n    def nextPermutation(self, nums: List[int]) -> None:\n        \"\"\"\n        Do not return anything, modify nums in-place instead.\n        \"\"\"\n        for i in range(len(nums)-1,0,-1):\n            if nums[i] > nums[i-1]:\n                break\n        if i!= 0:\n            for j in range(i):\n                if nums[j] > nums[i-1]:\n                    nums[i-1], nums[j] = nums[j], nums[i-1]\n                    break\n        # print(nums)\n        for i in range(len(nums)//2,0,-1):\n            if nums[i] > nums[i-1]:\n                nums[i-1], nums[i] = nums[i], nums[i-1]\n                break\n        # print(nums)\n"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"22\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"22\"\nassert solution(stdin) == \"22\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"The Python program does not work\"\n"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 3\n\n\n------Examples-----\nInput\n3 3\n1 2 1\n2 3 2\n3 1 3\n\nOutput\n1\n\nInput\n6 7\n1 2 1\n3 2 5\n2 4 2\n2 5 2\n2 6 9\n5 4 3\n4 3 4\n\nOutput\n5\n\nInput\n3 3\n1 2 1\n2 3 2\n3 1 3\n\nOutput\n2\n\nInput\n6 7\n1 2 1\n3 2 5\n2 4 2\n2 5 2\n2 6 9\n5 4 3\n4 3 4\n\nOutput\n4\n\nInput\n5 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1 11\n1 12\n1 13\n1 14\n1 15\n1 16\n1 17\n1 18\n1 19\n1 20\n1 21\n1 22\n1 23\n1 24\n1 25\n1 26\n1 27\n1 28\n1 29\n1 30\n1 31\n1 32\n1 33\n1 34\n1 35\n1 36\n1 37\n1 38\n1 39\n1 40\n1 41\n1 42\n1 43\n1 44\n1 45\n1 46\n1 47\n1 48\n1 49\n1 50\n1 51\n1 52\n1 53\n1 54\n1 55\n1 56\n1 57\n1 58\n1 59\n1 60\n1 61\n1 62\n1 63\n1 64\n1 65\n1 66\n1 67\n1 68\n1 69\n1 70\n1 71\n1 72\n1 73\n1 74\n1 75\n1 76\n1 77\n1 78\n1 79\n1 80\n1 81\n1 82\n1 83\n1 84\n1 85\n1 86\n1 87\n1 88\n1 89\n1 90\n1 91\n1 92\n1 93\n1 94\n1 95\n1 96\n1 97\n1 98\n1 99\n1 100\n1 101\n1 102\n1 103\n1 104\n1 105\n1 106\n1 107\n1 108\n1 109\n1 110\n1 111\n1 112\n1 113\n1 114\n1 115\n1 116\n1 117\n1 118\n1 119\n1 120\n1 121\n1 122\n1 123\n1 124\n1 125\n1 126\n1 127\n1 128\n1 129\n1 130\n1 131\n1 132\n1 133\n1 134\n1 135\n1 136\n1 137\n1 138\n1 139\n1 140\n1 141\n1 142\n1 143\n1 144\n1 145\n1 146\n1 147\n1 148\n1 149\n1 150\n1 151\n1 152\n1 153\n1 154\n1 155\n1 156\n1 157\n1 158\n1 159\n1 160\n1 161\n1 162\n1 163\n1 164\n1 165\n1 166\n1 167\n1 168\n1 169\n1 170\n1 171\n1 172\n1 173\n1 174\n1 175\n1 176\n1 177\n1 178\n1 179\n1 180\n1 181\n1 182\n1 183\n1 184\n1 185\n1 186\n1 187\n1 188\n1 189\n1 190\n1 191\n1 192\n1 193\n1 194\n1 195\n1 196\n1 197\n1 198\n1 199\n1 200\n1 201\n1 202\n1 203\n1 204\n1 205\n1 206\n1 207\n1 208\n1 209\n1 210\n1 211\n1 212\n1 213\n1 214\n1 215\n1 216\n1 217\n1 218\n1 219\n1 220\n1 221\n1 222\n1 223\n1 224\n1 225\n1 226\n1 227\n1 228\n1 229\n1 230\n1 231\n1 232\n1 233\n1 234\n1 235\n1 236\n1 237\n1 238\n1 239\n1 240\n1 241\n1 242\n1 243\n1 244\n1 245\n1 246\n1 247\n1 248\n1 249\n1 250\n1 251\n1 252\n1 253\n1 254\n1 255\n1 256\n1 257\n1 258\n1 259\n1 260\n1 261\n1 262\n1 263\n1 264\n1 265\n1 266\n1 267\n1 268\n1 269\n1 270\n1 271\n1 272\n1 273\n1 274\n1 275\n1 276\n1 277\n1 278\n1 279\n1 280\n1 281\n1 282\n1 283\n1 284\n1 285\n1 286\n1 287\n1 288\n1 289\n1 290\n1 291\n1 292\n1 293\n1 294\n1 295\n1 296\n1 297\n1 298\n1 299\n1 300\n1 301\n1 302\n1 303\n1 304\n1 305\n1 306\n1 307\n1 308\n1 309\n1 310\n1 311\n1 312\n1 313\n1 314\n1 315\n1 316\n1 317\n1 318\n1 319\n1 320\n1 321\n1 322\n1 323\n1 324\n1 325\n1 326\n1 327\n1 328\n1 329\n1 330\n1 331\n1 332\n1 333\n1 334\n1 335\n1 336\n1 337\n1 338\n1 339\n1 340\n1 341\n1 342\n1 343\n1 344\n1 345\n1 346\n1 347\n1 348\n1 349\n1 350\n1 351\n1 352\n1 353\n1 354\n1 355\n1 356\n1 357\n1 358\n1 359\n1 360\n1 361\n1 362\n1 363\n1 364\n1 365\n1 366\n1 367\n1 368\n1 369\n1 370\n1 371\n1 372\n1 373\n1 374\n1 375\n1 376\n1 377\n1 378\n1 379\n1 380\n1 381\n1 382\n1 383\n1 384\n1 385\n1 386\n1 387\n1 388\n1 389\n1 390\n1 391\n1 392\n1 393\n1 394\n1 395\n1 396\n1 397\n1 398\n1 399\n1 400\n1 401\n1 402\n1 403\n1 404\n1 405\n1 406\n1 407\n1 408\n1 409\n1 410\n1 411\n1 412\n1 413\n1 414\n1 415\n1 416\n1 417\n1 418\n1 419\n1 420\n1 421\n1 422\n1 423\n1 424\n1 425\n1 426\n1 427\n1 428\n1 429\n1 430\n1 431\n1 432\n1 433\n1 434\n1 435\n1 436\n1 437\n1 438\n1 439\n1 440\n1 441\n1 442\n1 443\n1 444\n1 445\n1 446\n1 4"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '3'\nassert solution(stdin) == '6'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(inp) == expected\n\"\"\""
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(3,2) == \"3\"\nassert solution(3,3) == \"3\"\nassert solution(6,2) == \"6\"\nassert solution(6,5) == \"6\"\n\n\n------Reminder-----\n\nThe input of the function is usually written as, for example:\n\nBreadth First Search:\n\nu\nv\nw\n\nwhere B is the vertice, u is the source, v is the destination, and w is the weight.\n\nIn the given example, there is no graph with the given weight.\n\n\n-----Input-----\n\nThe first line contains two integers n and m (2 \u2264 n \u2264 3\u00b710^5; 1 \u2264 m \u2264 min(n\u00b7(n - 1), 3\u00b710^5)). Then, m lines follows. The i-th line contains three space separated integers: u_{i}, v_{i}, w_{i} (1 \u2264 u_{i}, v_{i} \u2264 n; 1 \u2264 w_{i} \u2264 10^5).\n\nIt's guaranteed that the graph doesn't contain self-loops and multiple edges.\n\n\n-----Output-----\n\nPrint a single integer \u2014 the answer to the problem.\n\nIn the given example, the path can be found using a Breadth First Search algorithm (with a maximum number of edges).\n\nExample 1:\nInput\n3 3\n1 2 1\n2 3 2\n3 1 3\n\nOutput\n1\n\nExample 2:\nInput\n4 3\n1 2 1\n1 3 1\n3 2 3\n3 3 3\n\nOutput\n1\n\nExplanation:\nThe path is: 1, 2, 3, 4, starting from 1.\nThe maximum trail can be found as 1, 2, 4, 3, 3, 3.\n\n\"\"\"\n"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 6\n\n\n-----Constraints-----\n1\u2264n,m\u226410^5\n1\u2264u_i,v_i,w_i\u2264n\n\n-----Time Limit 1:30 seconds (SS)\n1\u2264u_i,v_i,w_i\u2264n\n2\u2264w_i<=10^5\n\n-----Space Limit 20\n\n-----Tip: To draw a complete graph, use all the edges, all the vertices, all the edges of the graph, and then a cycle.\n\n-----Extra Information for your solution:"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"1 2 1\", \"2 3 2\", \"3 1 3\", \"3 2 3\", \"4 3 4\", \"5 4 3\", \"6 4 4\"]) == \"1\"\nassert solution([\"1 2 1\", \"2 3 2\", \"3 1 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\", \"3 2 3\","
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"6\"\n\nNotes\nDoes the graph exist? Yes\nDoes the graph have the correct number of edges? No\nDoes the graph have non-simple edges? Yes\n\nFormat\n\nThe first line contains an integer n, m (2 \u2264 n \u2264 3\u00b710^5;\u00a01 \u2264 m \u2264 min(n\u00b7(n - 1), 3\u00b710^5)). Then, m lines follow.\n\nThe i-th line contains two space separated integers: u_{i}, v_{i} (1 \u2264 u_{i} \u2264 n;\u00a01 \u2264 v_{i} \u2264 n).\n\nHelp Pashmak, print the number of edges in the required path.\n\n-----Example-----\n\nThe first line contains two integers n, m (2 \u2264 n \u2264 3\u00b710^5;\u00a01 \u2264 m \u2264 min(n\u00b7(n - 1), 3\u00b710^5)). Then, m lines follows. The i-th line contains three space separated integers: u_{i}, v_{i}, w_{i} (1 \u2264 u_{i} \u2264 n;\u00a01 \u2264 w_{i} \u2264 10^5).\n\nOutput\n1\n\nExplanation\n\nPashmak's graph does not have simple edges, so the answer should be 1.\n\n-----Explanation-----\n\nIn the first sample, the maximum trail can be any of this trails: $1 \\rightarrow 2,2 \\rightarrow 3,3 \\rightarrow 1$.\n\nIn the second sample, the maximum trail is $1 \\rightarrow 2 \\rightarrow 3 \\rightarrow 1$.\n\nIn the third sample, the maximum trail is $1 \\rightarrow 2 \\rightarrow 5 \\rightarrow 4 \\rightarrow 3 \\rightarrow 2 \\rightarrow 6$.\n\nWe got this solution in a difflactic way.\n\n\"\"\"\n\nimport math"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('3 3') == '3'\nassert solution('6 7') == '6'\nassert solution('3 4') == '2'\nassert solution('4 3') == '3'\nassert solution('4 4') == '3'\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == 0\nassert solution(\"5 3\") == 0\nassert solution(\"5 3\") == 3\nassert solution(\"5 3\") == 5\nassert solution(\"5 3\") == 5\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1, [10, 20, 30, 40]) == 3\nassert solution(2, [10, 20, 30, 40]) == 0\nassert solution(3, [10, 20, 30, 40]) == 0\nassert solution(4, [10, 20, 30, 40]) == 0"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == 3\nassert solution(input()) == 0\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"3\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(3)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\nassert solution(stdin) == str(0)\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 3\") == \"3\"\nassert solution(\"2 1\") == \"0\"\nassert solution(\"1 0\") == \"0\"\nassert solution(\"1 2\") == \"1\"\nassert solution(\"2 1\") == \"0\"\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\""
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\"\"\""
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(5) == 5\nassert solution(6) == 5\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(0) == 0\n"
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input().strip()) == solution(input().strip()), 'incorrect'"
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"7 3 2\") == 3\nassert solution(\"5 3 2\") == 3\nassert solution(\"5 5 5 3\") == 3\nassert solution(\"5 1 2 3 4 5\") == 3\nassert solution(\"3 1 2 3 4 5\") == 3\n"
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"5\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(5) == 5\nassert solution(6) == 5\nassert solution(7) == 7\nassert solution(10) == 7\nassert solution(9) == 5\n"
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"5\"\n\"\"\"\n"
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    b=\n    [\n        [5, 1, 2, 3, 4],\n        [6, 1, 2, 2, 3, 5, 7],\n    ]) == \"5\"\nassert solution(\n    b=\n    [\n        [3, 1, 2],\n        [4, 1, 2]\n    ]) == \"5\"\nassert solution(\n    b=\n    [\n        [1, 2, 3],\n        [1, 2, 3],\n    ]) == \"6\"\nassert solution(\n    b=\n    [\n        [1, 1, 2, 3],\n        [1, 2, 2, 3],\n    ]) == \"10\"\nassert solution(\n    b=\n    [\n        [4, 5, 1, 2],\n        [4, 5, 2, 1],\n    ]) == \"9\"\n"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(str) == \"42\""
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 42\n"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 42, \"The result is incorrect!\"\n"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 42\n\n\n\nInput\n108\n\nOutput\n64\n\nInput\n123\n\nOutput\n121\n\n\"\"\""
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 42\n\n\n\n-----Note-----\n\nThis is just a test file, not a full solution.\n\n-----Constraints-----\n\n1 <= $n <= 10^{6}\n$0 \\le n < 10^{10}$\n'''\n"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 42\n\nInput\n13\n\nOutput\n13\n\nInput\n2\n\nOutput\n1\n\n'''\nclass Solution:\n    def minCost(self, costs):\n        # costs: list of list of str\n        #return cost\n\n        # if len(costs) == 1:\n        #     return costs[0][0]\n\n        \n        # if len(costs) == 2:\n        #     return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1])\n        # elif len(costs) >= 3:\n        #     return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1]) + min(costs[0][2], costs[1][2]) + min(costs[0][3], costs[1][3])\n        # else:\n        #     return min(costs[0][0], costs[1][0]) + costs[0][1] + costs[1][1]\n\n        # def solution(costs):\n        #     if len(costs) == 1:\n        #         return costs[0][0]\n\n        #     if len(costs) == 2:\n        #         return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1])\n\n        #     elif len(costs) >= 3:\n        #         return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1]) + min(costs[0][2], costs[1][2]) + min(costs[0][3], costs[1][3])\n        #     else:\n        #         return min(costs[0][0], costs[1][0]) + costs[0][1] + costs[1][1]\n\n        # return min(solution(costs))\n        \n        # print(costs)\n        # return sum(costs[0][0:3]) + sum(costs[1][0:3])\n\n        # return sum(costs[0][0:3]) * (sum(costs[1][0:3]) - sum(costs[0][0:3]))\n        \n        # if len(costs) == 1:\n        #     return costs[0][0]\n\n        # if len(costs) == 2:\n        #     return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1])\n\n        # elif len(costs) >= 3:\n        #     return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1]) + min(costs[0][2], costs[1][2]) + min(costs[0][3], costs[1][3])\n\n        # else:\n        #     return min(costs[0][0], costs[1][0]) + costs[0][1] + costs[1][1]\n\n        # return sum(costs[0][0:3]) + sum(costs[1][0:3]) + min(costs[0][0:3], costs[1][0:3])\n\n        # return min(sum(costs[0][0:3]), sum(costs[1][0:3]), costs[0][0:3] + costs[1][0:3])\n\n        # if len(costs) == 1:\n        #     return costs[0][0]\n\n        # if len(costs) == 2:\n        #     return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1])\n\n        # elif len(costs) >= 3:\n        #     return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1]) + min(costs[0][2], costs[1][2]) + min(costs[0][3], costs[1][3])\n\n        # else:\n        #     return min(costs[0][0], costs[1][0]) + costs[0][1] + costs[1][1]\n\n        # return sum(costs[0][0:3]) + sum(costs[1][0:3]) + min(costs[0][0:3], costs[1][0:3])\n\n        # return min(sum(costs[0][0:3]), sum(costs[1][0:3]), costs[0][0:3] + costs[1][0:3])\n\n        # return min(sum(costs[0][0:3]), sum(costs[1][0:3]), costs[0][0:3] + costs[1][0:3])\n\n        # if len(costs) == 1:\n        #     return costs[0][0]\n\n        # if len(costs) == 2:\n        #     return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1])\n\n        # elif len(costs) >= 3:\n        #     return min(costs[0][0], costs[1][0]) + min(costs[0][1], costs[1][1]) + min(costs[0][2], costs[1][2]) + min(costs[0][3], costs[1][3])\n\n        # else:\n        #     return min(costs[0][0], costs[1][0]) + costs[0][1] + costs[1][1]\n\n        # return sum(costs[0][0:3]) + sum(costs[1][0:3]) + min(costs[0][0:3], costs[1][0:3])\n\n        # return min(costs[0][0], costs[1][0]) + costs[0][1] + costs[1][1]"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '42'\nassert solution(stdin) == '43'\nassert solution(stdin) == '437'\nassert solution(stdin) == '2175'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"428101984\"\n"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"42\"\n\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n\n-----Time Limit-----\n1 minute\n\n-----Divide and Conquer-----\n\nTime Limit: 1 minute\n\n-----Space Leakage-----\n\nIf the input is too long, it is divided into two parts to find the sum of the two parts. Therefore,\nthe sum of the sub-part is also the sum of the two parts, or the sum of the three parts. In general, if the sum of the two parts is greater than $10^9 + 7$, then we can use one of these constraints to create a triple of numbers.\n\nLikewise, if the sum of the three parts is greater than $10^9 + 7$, then we can use one of these constraints to create a triple of numbers.\n\nIn the very first example, the sum of the two parts is the only constraint. Therefore, we can use the triple of numbers to create a triple of numbers.\n\n----Examples----\nInput\n100500100500\n\nOutput\n428101984\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n\n----Examples----\nInput\n100500100500\n\nOutput\n42\n\nInput\n100500100500\n\nOutput\n42\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n\n----Examples----\nInput\n100500100500\n\nOutput\n42\n\nInput\n100500100500\n\nOutput\n42\n\n\n-----Note-----\n\nThe only constraints for solving the problem:\n\n1. Vova can only have $0$, $7$ or $10$ digits\n2. Vova can only have $7$ or $10$ digits\n\nThe second constraint is not needed.\n\nIn the third example, the sum of the three parts is the only constraint. Therefore, we can use the triple of numbers to create a triple of numbers.\n\n----Examples----\nInput\n100500100500\n\nOutput\n42\n\nInput\n100500100500\n\nOutput\n42\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n\n----Examples----\nInput\n100500100500\n\nOutput\n42\n\nInput\n100500100500\n\nOutput\n42\n"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"42\"\n\n\"\"\""
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"0\"\n\n-----Constraints-----\n0 < n <= 1000\n\n1.\n'''\nclass Solution:\n    def minimumOperations(self, n: int) -> int:\n        res, tmp, k = 0, \"\", n\n        \n        while True:\n            tmp = \"\"\n            for i in range(k):\n                tmp += str(res % 10)\n                res = (res + int(tmp[i])) % 10\n            \n            if res == 0:\n                return k\n            \n            k = tmp\n"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"def max(stdin):\\n    return stdin[0]^stdin[1]+stdin[2]^stdin[3]+stdin[4]^stdin[5]\\n\\n\"\nassert solution(stdin) == \"def min(stdin):\\n    return stdin[0]^stdin[1]+stdin[2]^stdin[3]+stdin[4]^stdin[5]\\n\\n\"\nassert solution(stdin) == \"def solution(stdin):\\n    return stdin[0]^stdin[1]+stdin[2]^stdin[3]+stdin[4]^stdin[5]\\n\\n\"\n"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(1) == 1,'stdin: 1'\nassert solution(2) == 3,'stdin: 2'\nassert solution(3) == 2,'stdin: 3'\nassert solution(4) == 4,'stdin: 4'\nassert solution(5) == 3,'stdin: 5'\n"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == 'def solution(stdin: str) -> str:', \"Must return solution(stdin: str) + check if stdin.__class__ == str\"\n\nassert solution(1) == \"def solution(stdin: str) -> str:\", \"Must return solution(stdin: str) + check if stdin.__class__ == str\"\n\nassert solution(2) == \"def solution(stdin: str) -> str:\", \"Must return solution(stdin: str) + check if stdin.__class__ == str\"\n\nassert solution(3) == \"def solution(stdin: str) -> str:\", \"Must return solution(stdin: str) + check if stdin.__class__ == str\"\n\nassert solution(4) == \"def solution(stdin: str) -> str:\", \"Must return solution(stdin: str) + check if stdin.__class__ == str\""
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('c=aa#bb') == 'c=aa\\nbb'\nassert solution('d12=c') == 'd12=c\\nc^d12'\nassert solution('tmp=aa$c') == 'tmp=aa\\naa$c^tmp'\n"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    \"2 4\"\n) == \"0\"\nassert solution(\n    \"2 3\"\n) == \"1\"\nassert solution(\n    \"3 1\"\n) == \"0\"\nassert solution(\n    \"3 5\"\n) == \"2\"\nassert solution(\n    \"3 2\"\n) == \"0\"\n"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(4) == 2\nassert solution(2) == 1\nassert solution(3) == 0\n\n\n'''\n\nimport re"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(2) == '0'\n"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"1,3,4,5,6\"\n) == \"5,6\"\n\nassert solution(\n    \"2,2,0,0,0\"\n) == \"3,0,0\"\n\nassert solution(\n    \"1,1,1,1,0\"\n) == \"2,0,1\"\n\nassert solution(\n    \"1,1,0,1,0\"\n) == \"0,1,1\"\n\nassert solution(\n    \"1,1,0,1,1\"\n) == \"1,0,0\""
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0 1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1 2'\nassert solution(stdin) == '1 3'\nassert solution(stdin) == '2 4'\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == '0'\n\"\"\"\n\nfrom typing import List\n\n\nclass Solution:\n    \"\"\"\n    kruskal's algorithm\n    Runtime: 184 ms, faster than 81.17% of Python3 online submissions for Prim's Minimum Spanning Tree.\n    Memory Usage: 14.4 MB, less than 7.93% of Python3 online submissions for Prim's Minimum Spanning Tree.\n    \"\"\"\n\n    def find(self, parent, i, min_edges):\n        if parent[i] < 0:\n            return i\n        parent[i] = self.find(parent, parent[i], min_edges + 1)\n        return parent[i]\n\n    def union(self, parent, a, b):\n        a = self.find(parent, a)\n        b = self.find(parent, b)\n        if a < b:\n            parent[b] = a\n        else:\n            parent[a] = b\n\n    def kruskal(self, n: int, edges: List[List[int]]) -> int:\n        parent = [-1] * n\n        for edge in edges:\n            a, b = edge\n            self.union(parent, a, b)\n\n        edges.sort()\n        result = 0\n        for i in range(n):\n            result += edges[i][1] - edges[i][0]\n        return result\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\n\n------Reminder-----\n\nThe input problem is formed by lines $n$ - $n$ separate. So we need to distinguish the initial and final edges and the edge labels.\n\nWe need to look at the edge labels, to get the edge label. In this way, the corresponding edge can be decided.\n\nThe edge labels will be a list of integers, which contains three integers: $i, j, $k$.\n\nFor example, $i=0, j=2, k=2$\n\nFirst, the edge labels are the first edge's label.\n\nSecond, the edge labels are the second edge's label.\n\nThird, the edge labels are the edge label of the edge.\n\nThe final edge labels will be the largest integer $k$, and will also have $i=j$ or $i=j$ and $i=k$ or $i=k$ and $j=k$ or $j=k$ and $k$ or $k$ and $k$ and $k$ and $k$ and $j$ or $j$ and $j$ and $k$ or $k$ and $k$ and $k$ and $k$ and $j$ or $j$ and $k$ and $j$ and $k$ and $k$ and $k$ and $j$ or $j$ and $k$ and $k$ and $k$ and $k$ and $j$ or $k$ and $k$ and $j$ or $k$ and $j$ and $k$ and $k$ and $j$ or $j$ and $k$ and $k$ and $j$ and $k$ and $k$\n\nAfter knowing the edge labels, the program is to write the edge labels into a given tree, using the data described above, and return the edge labels.\n\n-----Submissions-----\n\nOverall, given a tree with $n$ nodes, the solution will be valid. The problem is to write the edge labels from the edge labels of the tree on a given edge.\n\n---Time---\n\nO(n)\n\n---Memory---\n\nO(n)\n\n---Input Format---\n\nThe first line contains an integer $n$ ($2 \\le n \\le 10^5$).\n\nThe next $n$ lines contains $n$ space-separated integers $u$ and $v$ ($1 \\le u,v \\le n$) that mean there's an edge between nodes $u$ and $v$.\n\nThe second $n$ lines contains $n$ space-separated integers $i,j$ ($1 \\le i,j \\le n$) that mark which edge is an edge.\n\nThe third $n$ lines contains $n$ space-separated integers $k$, $i$, $j$, $k$ ($0 \\le i,j \\le j$, $i,k \\le j$, $i,k$ $0 \\le i,k \\le j$, $i,k$ $0 \\le i,k$ $0 \\le j$, $i,k$ $0 \\le k$, $i,k$ $0 \\le k$, $j,k$ $0 \\le j$, $j,k$ $0 \\le k$ $0 \\le k$, $j,k$ $0 \\le k$, $k,k$ $0 \\le k$, $k,k$ $0 \\le j$, $k,k$ $0 \\le j$ and $k$, $k$ and $j$, $k$ and $j$\n\nThe fourth line contains an integer $m$ ($2 \\le m \\le 10^5$).\n\nThe second $m$ lines contains $m$ space-separated integers $u$ and $v$ ($0 \\le u,v \\le n$) that mark which edges are the edge labels.\n\nThe last $m$ lines contains $m$ space-separated integers $i$, $j$ ($0 \\le i,j \\le n$) that mark which edges are the edge labels.\n\nThe output will be the edge labels, which is a list of integers.\n\nFor example, $i=0, j=2, k=2$\n\n-----Solution-----\n\nclass Solution:\n    def edgeLabelsToNumbers(self, edges):\n        pass\n\n[Test Execution]\n>>> 1\n3\n3 2\n1 3\n2 4\n0 1\n0 2\n1 0\n2 2\n2 2\n2 3\n2 2\n0 2\n1 2\n2 2\n\n>>> 2\n3\n3 2\n1 3\n2 4\n0 1\n0 2\n1 0\n2 2\n2 2\n2 3\n2 2\n2 3\n2 2\n2 2\n2 3\n2 2\n1 2\n2 2\n\n>>> 2\n2 3\n3 2\n1 3\n2 0\n2 2\n1 0\n2 2\n2 3\n2 2\n2 3\n\n>>> 2\n3\n3 2\n1 3\n2 0\n2 2\n1 0\n2 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n1 2\n2 2\n\n>>> 4\n3\n2 0\n0 2\n0 1\n0 2\n2 3\n2 2\n0 2\n1 2\n1 0\n1 2\n1 2\n2 3\n1 0\n1 2\n\n>>> 3\n2\n2 0\n0 2\n0 1\n0 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 0\n2 2\n\n>>> 2\n3\n3 2\n1 3\n2 0\n2 2\n1 0\n2 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n1 2\n\n>>> 1\n0\n0 2\n1 0\n1 2\n1 2\n1 3\n1 0\n1 2\n1 0\n0 2\n\n>>> 1\n0\n0 2\n1 0\n1 2\n1 3\n1 0\n1 2\n1 2\n0 2\n\n>>> 2\n3\n2 0\n0 2\n0 1\n0 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 0\n2 2\n\n>>> 2\n3\n3 2\n1 3\n2 0\n2 2\n1 0\n1 2\n1 2\n1 0\n1 2\n0 2\n\n>>> 3\n2\n2 0\n0 2\n0 1\n0 2\n0 2\n0 1\n0 2\n2 0\n2 0\n\n>>> 2\n3\n3 2\n2 0\n2 2\n2 0\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 0\n2 2\n\n>>> 2\n3\n3 2\n2 0\n2 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 3\n2 2\n2 0\n\n>>> 1\n0\n0 2\n0 1\n0 2\n0 1\n0 2\n0 1\n0 2\n0 1\n1 2\n1 0\n1 2\n1 2\n1 0\n1 2\n\n>>> 3\n2\n2 0\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"0\"\n\n\n    pass\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(0)\n'''\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution('2 4 2 2') == '2 1 1'\nassert solution('2 4 2 1') == '2 2 1'\nassert solution('2 4 4') == '0 0 0 0'\nassert solution('2 4 5 2') == '0 1 0 0'\nassert solution('2 4 6 3') == '0 0 1 0'\n"
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 3\n\n\nInput\n2 4 2 2\n\nOutput\n0\n"
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2 4 2\"\n\n\n-----IMPROVEMENT-----\n\nimplement the solution with an explicit recursive solution, where the variables c_i, d_i is the number of heads Vasya and Petya got in the i-th outcome of the game, respectively. The function accepts two arguments x, y, a, b (1 \u2264 a \u2264 100, 1 \u2264 b \u2264 y \u2264 100).\n\nIn the first line there is a single integer x (the player's number of tosses), between 1 and 9.\n\nIn the second line there is a single integer y (the number of tosses the player has) between 1 and 9, and between 1 and 9.\n\nAfter all the variables are defined, a function must be implemented. The function should return the number of possible outcomes of the game, according to the format described above.\n\nFunction Description\n\nComplete the solution function in the editor below. It should return a string of length 10, containing the number of possible outcomes of the game.\n\nsolution has the following parameters:\n\nstdin       a string of length 4\n    x, y, a, b\n\nConstraints\n\nx <= 100\ny <= 100\na <= 100\nb <= 100\n\nPrints\n\nPrints the number of possible outcomes of the game. Print each pair of integers (c_{i}, d_{i}), in the strictly increasing order.\n\nSample Input\n\n3 2 1 1\n\nSample Output\n\n0\n0 0 0\n\nExplanation\n\nImplement the solution function here with recursive, as shown in the sample input."
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0 2 3 3'\n"
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == \"3 4 2 2\"\nassert solution(input()) == \"1 2 1\"\nassert solution(input()) == \"1 1 1\"\nassert solution(input()) == \"0 0 0\"\nassert solution(input()) == \"0 0 0\"\n"
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2 1 1\") == \"3 1\"\nassert solution(\"2 4 2 2\") == \"0\"\nassert solution(\"1 2 2 1\") == \"2 1\"\nassert solution(\"0 0 0 0\") == \"0 0 0\""
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin=\"3 2 1 1\") == \"3 1 2\"\n\n\n\"\"\""
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input()) == '3 3'\nassert solution(input()) == '3 3'\nassert solution(input()) == '3 3'\nassert solution(input()) == '3 3'\nassert solution(input()) == '3 3'\n"
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"0 1\"\n\n'''\n"
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(input()) == \"0 1\"\n\n\n-----Constraints-----\n1 \u2264 x \u2264 100\n1 \u2264 y \u2264 100\n1 \u2264 a \u2264 b\n1 \u2264 p_1, q_1 \u2264 b\n1 \u2264 p_2, q_2 \u2264 b\n0 \u2264 c_1, c_2 \u2264 b\n1 \u2264 d_1, d_2 \u2264 b\n0 \u2264 s_i < s_j < s_n <= 100\n1 \u2264 s_i < s_j < s_n <= 100\n\n'''\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 10 6 8 5 7 6\") == \"7\"\nassert solution(\"1000 6 1 2 3 4\") == \"3\"\nassert solution(\"1000 5 5 4 5\") == \"2\"\nassert solution(\"1000 5 7 4 5\") == \"2\"\nassert solution(\"1000 5 7 8 5\") == \"1\"\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"10 4\") == 3\nassert solution(\"6 2\") == 2\nassert solution(\"6 2 4\") == 5\nassert solution(\"1 1 2 7 3 4 8 5 6\") == 8\nassert solution(\"2 1 2 3 14 36\") == 7"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"7\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '6'\nassert solution(stdin) == '7'\nassert solution(stdin) == '2'\nassert solution(stdin) == '7'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('8') == 7\nassert solution('6') == 2\nassert solution('1 2 7 3 4 8 5 6') == 7\nassert solution('1 1 2 3 2 4') == 2\nassert solution('1 2 3 4 2 5 6 7 8 9') == 3\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input().strip()) == \"7\"\nassert solution(input().strip()) == \"7\"\nassert solution(input().strip()) == \"7\"\nassert solution(input().strip()) == \"7\"\nassert solution(input().strip()) == \"7\"\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"7\"\n\n\n-----Constraints-----\n1 <= n <= 10^5\n\n0 <= a_1, a_2 < 10^9\n\n1 <= k <= 10^5\n\n\n-----Example 1-----\n\nInput\n6\n6 6 6 6\n\nOutput\n2\n\nExplanation\n\nThe shark is moving to the second location as a short distance.\n\nThe first day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe second day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe third day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe fourth day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\n\nExplanation\n\nThe first day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe second day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe third day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe fourth day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\n\nInput\n6\n5 6 6 5\n\nOutput\n7\n\nExplanation\n\nThe shark is moving into two locations as a short distance, then one location is visited as a short distance.\n\nThe first day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe second day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe third day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe fourth day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\n\nInput\n6\n1 2 3 4\n\nOutput\n2\n\nExplanation\n\nThe shark is moving to the third location as a short distance.\n\nThe first day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe second day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe third day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe fourth day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\n\nInput\n6\n1 2 3 4\n\nOutput\n1\n\nExplanation\n\nThe shark is moving into two locations as a short distance, then one location is visited as a short distance.\n\nThe first day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe second day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe third day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe fourth day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\n\nInput\n6\n1 1 1 1\n\nOutput\n1\n\nExplanation\n\nThe shark is moving from the first location as a short distance to the second location.\n\nThe first day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe second day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe third day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe fourth day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\n\nInput\n6\n1 1 3 4\n\nOutput\n1\n\nExplanation\n\nThe shark is moving from the first location as a short distance to the third location.\n\nThe first day's distance is {6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6}\nThe second day's distance is {6, 6, 6, 6, 6, 6, 6, 6"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input()) == 7\nassert solution(input()) == 2\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"7\") == 7\nassert solution(\"6\") == 2\nassert solution(\"25\") == 4\nassert solution(\"1\") == 1\nassert solution(\"0\") == 0\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\nassert solution(inp) == \"0\"\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"3\"\n\n\n------Harder tests-----"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution([\"3\", \"2\", \"1234\", \"0600\", \"2\", \"1337\", \"1337\", \"4\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\"]) == \"0\"\nassert solution([\"2\", \"1234\", \"0600\", \"2\", \"1337\", \"1337\", \"4\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\"]) == \"1234\"\nassert solution([\"1234\", \"0600\", \"2\", \"1337\", \"1337\", \"4\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\"]) == \"0600\"\nassert solution([\"2\", \"1234\", \"0600\", \"2\", \"1337\", \"1337\", \"4\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\"]) == \"2\"\nassert solution([\"1234\", \"0600\", \"2\", \"1337\", \"1337\", \"4\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\", \"3139\"]) == \"1\"\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '0'\n\n-----Constraints-----\n1 <= t <= 10^4\n0 <= n <= 10^5\n1 <= p_i <= 10^4\n\n------Time complexity-----\nO(t * n * 2^(n-1) )\nO(t * n)\n\n------Space complexity-----\nO(t * n)\n\n------Algorithm complexity-----\nO(n * 2^(n-1))\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"1\",\"1\",\"1\",\"1\"]) == \"123\"\nassert solution([\"2\",\"3\",\"4\",\"5\"]) == \"1234\"\nassert solution([\"3\",\"3\",\"3\",\"3\"]) == \"4321\"\nassert solution([\"3\",\"3\",\"3\",\"4\"]) == \"4321\"\nassert solution([\"4\",\"4\",\"4\",\"4\"]) == \"4221\"\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '12'\nassert solution(stdin) == '1337'\nassert solution(stdin) == '4330'\nassert solution(stdin) == '9990'\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\n    stdin\n    ) == ['2', '1234', '0600', '1', '3139', '3139', '3139', '3139', '3139', '3139']\nassert solution(\n    stdin\n    ) == ['0', '1234', '0600', '2', '3139', '3139', '3139', '3139', '3139', '3139']\nassert solution(\n    stdin\n    ) == ['0', '1234', '0600', '1', '3139', '3139', '3139', '3139', '3139', '3139']\nassert solution(\n    stdin\n    ) == ['0', '1234', '0600', '2', '3139', '3139', '3139', '3139', '3139', '3139']\nassert solution(\n    stdin\n    ) == ['0', '1234', '0600', '1', '3139', '3139', '3139', '3139', '3139', '3139']\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 2 1234 6 00 1234\"\nassert solution(stdin) == \"1 2 1234 6 1234\"\nassert solution(stdin) == \"1 2 1234 6\"\nassert solution(stdin) == \"1 2 1234\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    str(input().strip())) == 7013\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 2 1234\"\n) == \"1234\"\nassert solution(\n    \"2 2\"\n) == \"234\"\nassert solution(\n    \"1 7\"\n) == \"7\"\nassert solution(\n    \"1\"\n) == \"1\"\nassert solution(\n    \"4\"\n) == \"4\"\n"
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nassert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nassert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nassert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nassert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\n"
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n  (a+) + (b) ) # using +: \n\"\"\""
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('10') == '(a+++ +4c )>> :d b->+10>>:e'\nassert solution('(a+)') == 'a+'\nassert solution('(((()') == '()+'\nassert solution('(((()') == '()+'\nassert solution('(((((()') == '()+'\n"
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input() == \"solution\")\nassert solution(input()) == \"solution\"\n\"\"\""
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"fun while return var { } ( ), ; > = + ++ - --\") == \"fun while return var { } ( ), ; > = + ++ - --\"\nassert solution(\"fun fib(num) { } ( ), ; > = + ++ - --\") == \"fun fib(num) { } ( ), ; > = + ++ - --\"\nassert solution(\"fun fib(num) { } ( ), ; > = + ++ - --\") == \"fun fib(num) { } ( ), ; > = + ++ - --\"\nassert solution(\"fun fib(num) { } ( ), ; > = + ++ - --\") == \"fun fib(num) { } ( ), ; > = + ++ - --\"\nassert solution(\"fun fib(num) { } ( ), ; > = + ++ - --\") == \"fun fib(num) { } ( ), ; > = + ++ - --\"\n"
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('( a + (b)') == '( a ) + ( b )'\nassert solution('($val1++ + +4 kb) >> :out') == '($val1++ + ( +4 kb ) >> :out'\nassert solution('( b )') == 'b'\nassert solution('( 2 )') == '2'\nassert solution('( 3 )') == '3'\n"
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(s) == \"fun\"\n\"\"\""
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution([\"fun\", \"while\", \"return\", \"var\", \"fib\", \"\", \"\", \"fun\", \"while\", \"return\", \"var\", \"fib\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"fun\"\nassert solution([\"(\", \")\", \")\", \"}\", \".\", \".\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"()\"\nassert solution([\"(\", \")\", \")\", \"}\", \".\", \".\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]) == \"{\"\nassert solution([\"(\", \")\"]) == \"()\"\nassert solution([\"(\", \")\", \")\"]) == \"()\"\n"
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(input) == \"a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\n\n\n-----Constraints-----\n1 <= $n <= 10^5\n1 <= $m <= 10^6\n$1 \\le n \\le 40\n$1 \\le m \\le 40\n1 <= $val1 <= 10^9\n$1 \\le $val2 <= 10^9\n$val2 <= 40\n$1 \\le $val3 <= 10^9\n$1 \\le $val4 <= 10^9\n$val4 <= 40\n$1 \\le $val5 <= 10^9\n$val5 <= 40\n$1 \\le $val6 <= 10^9\n$val6 <= 40\n$1 \\le $val7 <= 10^9\n$val7 <= 40\n$1 \\le $val8 <= 10^9\n$val8 <= 40\n$1 \\le $val9 <= 10^9\n$1 \\le $val10 <= 10^9\n$val10 <= 40\n$1 \\le $val11 <= 10^9\n$val11 <= 40\n$1 \\le $val12 <= 10^9\n$val12 <= 40\n$1 \\le $val13 <= 10^9\n$val13 <= 40\n$1 \\le $val14 <= 10^9\n$val14 <= 40\n$1 \\le $val15 <= 10^9\n$val15 <= 40\n$1 \\le $val16 <= 10^9\n$val16 <= 40\n$1 \\le $val17 <= 10^9\n$val17 <= 40\n$1 \\le $val18 <= 10^9\n$val18 <= 40\n$1 \\le $val19 <= 10^9\n$val19 <= 40\n$1 \\le $val20 <= 10^9\n$val20 <= 40\n$1 \\le $val21 <= 10^9\n$val21 <= 40\n$1 \\le $val22 <= 10^9\n$val22 <= 40\n$1 \\le $val23 <= 10^9\n$val23 <= 40\n$1 \\le $val24 <= 10^9\n$val24 <= 40\n$1 \\le $val25 <= 10^9\n$val25 <= 40\n$1 \\le $val26 <= 10^9\n$val26 <= 40\n$1 \\le $val27 <= 10^9\n$val27 <= 40\n$1 \\le $val28 <= 10^9\n$val28 <= 40\n$1 \\le $val29 <= 10^9\n$val29 <= 40\n$1 \\le $val30 <= 10^9\n$val30 <= 40\n$1 \\le $val31 <= 10^9\n$val31 <= 40\n$1 \\le $val32 <= 10^9\n$val32 <= 40\n$1 \\le $val33 <= 10^9\n$val33 <= 40\n$1 \\le $val34 <= 10^9\n$val34 <= 40\n$1 \\le $val35 <= 10^9\n$val35 <= 40\n$1 \\le $val36 <= 10^9\n$val36 <= 40\n$1 \\le $val37 <= 10^9\n$val37 <= 40\n$1 \\le $val38 <= 10^9\n$val38 <= 40\n$1 \\le $val39 <= 10^9\n$val39 <= 40\n$1 \\le $val40 <= 10^9\n$val40 <= 40\n$1 \\le $val41 <= 10^9\n$val41 <= 40\n$1 \\le $val42 <= 10^9\n$val42 <= 40\n$1 \\le $val43 <= 10^9\n$val43"
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution([\"a\"]) == \"a\"\nassert solution([\"fun\", \"while\"]) == \"fun\"\nassert solution([\"fun\", \"while\"]) == \"fun\"\nassert solution([\"fun\", \"while\"]) == \"fun\"\nassert solution([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == \"a\"\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"MC\",\n    \"CSKA\",\n    [\n        [\"CSKA\", \"9\", \"28 a 3 y\"],\n        [\"CSKA\", \"9\", \"62 h 25 y\"],\n        [\"CSKA\", \"9\", \"66 h 42 y\"],\n        [\"CSKA\", \"9\", \"70 h 25 y\"],\n        [\"CSKA\", \"9\", \"77 a 4 y\"],\n        [\"CSKA\", \"9\", \"79 a 25 y\"],\n        [\"CSKA\", \"9\", \"82 h 42 r\"],\n        [\"CSKA\", \"9\", \"89 h 16 y\"],\n        [\"CSKA\", \"9\", \"90 a 13 r\"],\n    ]\n) == \"MC 25 70\"\n\nassert solution(\n    \"MA\",\n    \"CSKA\",\n    [\n        [\"CSKA\", \"3\", \"31 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n    ]\n) == \"MA 31 33 33\"\n\nassert solution(\n    \"CSKA\",\n    \"MA\",\n    [\n        [\"CSKA\", \"3\", \"31 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n        [\"CSKA\", \"3\", \"33 y\"],\n    ]\n) == \"CSKA 31 33 33\"\n\nassert solution(\n    \"MA\",\n    \"CSKA\",\n    [\n        [\"CSKA\", \"1\", \"31 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n        [\"CSKA\", \"1\", \"33 y\"],\n    ]\n) == \"MA 31 33 33\"\n\nassert solution(\n    \"MA\",\n    \"MA\",\n    [\n        [\"MA\", \"1\", \"31 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n        [\"MA\", \"1\", \"33 y\"],\n    ]\n) == \"MA 31 33 33\""
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"MC\") == \"MC 25 70\"\nassert solution(\"CSKA\") == \"MC 42 82\"\nassert solution(\"9\") == \"31\"\nassert solution(\"28 a 3 y\") == \"31\"\nassert solution(\"62 h 25 y\") == \"31\"\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\n    \"MC\"\n) == \"MC 3 14\"\n\n\nassert solution(\"MC\") == \"MC\"\n\n\nassert solution(\"CSKA\") == \"CSK 42\"\n\n\nassert solution(\"9\") == \"9 a 3\"\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('MC') == 'MC 13 90'\nassert solution('CSKA') == 'CSKA 13 90'\nassert solution('9') == '9'\nassert solution('28 a 3 y') == '28 a 3 y'\nassert solution('62 h 25 y') == '62 h 25 y'\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(input()) == 'MC'\nassert solution(input()) == 'CSKA'\nassert solution(input()) == '9'\nassert solution(input()) == '28'\nassert solution(input()) == '62'\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 'MC 25 70'\nassert solution(stdin) == 'MC'\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(1) == \"MC\"\nassert solution(2) == \"CSKA\"\nassert solution(3) == \"9\"\nassert solution(4) == \"28 a 3 y\"\nassert solution(5) == \"62 h 25 y\"\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"ABCDEFGHI\") == \"ABCDHEFGHI\"\n\n\n\"\"\"\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\"\"\"\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n    input:\n    lines:\n    )\n    assert \"CSKA\" in lines\n    assert \"MC\" in lines\n    assert \"97\" in lines\n    assert \"15\" in lines\n    "
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"MC\"), \"MC\"\nassert solution(\"CSKA\"), \"CSKA\"\nassert solution(\"9\"), \"9\"\nassert solution(\"28 a 3 y\"), \"28 a 3 y\"\nassert solution(\"62 h 25 y\"), \"62 h 25 y\"\n"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"23\"\n"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '0'\nassert solution(input()) == '2'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\nassert solution(input()) == '3'\n"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"0\"\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Usage-----\nThe input consists of two lines. The first line contains the number of servers.\nThe second line contains the sequence of non-negative integers m_1, m_2,..., m_{n} (0 \u2264 m_{i} \u2264 2\u00b710^4), where m_{i} is the number of tasks assigned to the i-th server.\n\nConstraints:\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\n-----Example-----\nInput:\n2\n1 6\n\nOutput:\n0\n\nExplanation:\nIf we choose task #6 from a server, the tasks are assigned to the 1-th server and the 6-th server. We then move task from server #1 to #2, the remaining servers are assigned to the 2-th server.\n\nIn this example, it is possible to balance the load of two servers.\n\nInput:\n5\n1 2 3 4 5\n\nOutput:\n3\n\nExplanation:\nIf we choose task #5 from a server, the tasks are assigned to the 1-th server and the 5-th server. We then move task from server #1 to #2, the remaining servers are assigned to the 2-th server.\n\nInput:\n1\n2\n3 6\n\nOutput:\n3\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Usage-----\nThe input consists of two lines. The first line contains the number of servers.\nThe second line contains the sequence of non-negative integers m_1, m_2,..., m_{n} (0 \u2264 m_{i} \u2264 2\u00b710^4), where m_{i} is the number of tasks assigned to the i-th server.\n\nConstraints:\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\n-----Example-----\nInput:\n2\n1 6\n\nOutput:\n0\n\nExplanation:\nThe sequence is empty, so the load is already balanced.\n\nInput:\n7\n10 11 10 11 10 11 11 11\n\nOutput:\n3\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Usage-----\nThe input consists of two lines. The first line contains the number of servers.\nThe second line contains the sequence of non-negative integers m_1, m_2,..., m_{n} (0 \u2264 m_{i} \u2264 2\u00b710^4), where m_{i} is the number of tasks assigned to the i-th server.\n\nConstraints:\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Example-----\nInput:\n5\n1 2 3 4 5\n\nOutput:\n3\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Usage-----\nThe input consists of two lines. The first line contains the number of servers.\nThe second line contains the sequence of non-negative integers m_1, m_2,..., m_{n} (0 \u2264 m_{i} \u2264 2\u00b710^4), where m_{i} is the number of tasks assigned to the i-th server.\n\nConstraints:\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Example-----\nInput:\n3\n1 2 3 4 5\n\nOutput:\n3\n\nExplanation:\nThe sequence is empty, so the load is already balanced.\n\nInput:\n1\n2\n3\n4\n\nOutput:\n0\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Usage-----\nThe input consists of two lines. The first line contains the number of servers.\nThe second line contains the sequence of non-negative integers m_1, m_2,..., m_{n} (0 \u2264 m_{i} \u2264 2\u00b710^4), where m_{i} is the number of tasks assigned to the i-th server.\n\nConstraints:\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Example-----\nInput:\n2\n1 2 3 4 5\n\nOutput:\n0\n\nExplanation:\nThe sequence is empty, so the load is already balanced.\n\nInput:\n7\n10 11 10 11 10 11 11 11\n\nOutput:\n3\n\nExplanation:\nThe sequence is empty, so the load is already balanced.\n\nInput:\n1\n2\n3 6\n\nOutput:\n3\n\nExplanation:\nThe sequence is empty, so the load is already balanced.\n\nInput:\n5\n1 2 3 4 5\n\nOutput:\n3\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Usage-----\nThe input consists of two lines. The first line contains the number of servers.\nThe second line contains the sequence of non-negative integers m_1, m_2,..., m_{n} (0 \u2264 m_{i} \u2264 2\u00b710^4), where m_{i} is the number of tasks assigned to the i-th server.\n\nConstraints:\n1 <= n <= 10^5\n0 <= m_i < 2\u00b710^4\n\nTime Limit: 1 second\nMemory Limit: 30 megabytes\n\n-----Example-----\nInput:\n2\n1 2 3 4 5\n\nOutput:\n0\n\nExplanation:\nThe sequence is empty, so the load is already balanced.\n\nInput:\n5\n1 2 3 4 5\n\nOutput:\n3\n\nExplanation:\nThe sequence is empty, so the load is already balanced.\n\nInput:\n5\n1 2 3 4 5\n\nOutput:\n0"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3\") == 0\nassert solution(\"5\") == 0\nassert solution(\"5 1 4\") == 0\nassert solution(\"2 3 2\") == 3\nassert solution(\"3 2 3\") == 3\n"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3 3\""
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 5\") == \"5\"\nassert solution(\"3 3\") == \"1\"\nassert solution(\"7 4 3\") == \"1\"\nassert solution(\"3 4\") == \"3\"\nassert solution(\"6 4 3\") == \"1\"\n"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '1'\n\n-----Test-----\n\nTest 1:\n\nInput\n4\n1 6\n\nOutput\n1\n\nTest 2:\n\nInput\n5\n1 2 3 4 5\n\nOutput\n2\n\nTest 3:\n\nInput\n5\n1 2 3 4 5\n\nOutput\n0\n\nTest 4:\n\nInput\n4\n1 6\n\nOutput\n3\n\n-----Solution-----"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"2\") == \"0\"\nassert solution(\"7\") == \"0\"\nassert solution(\"5\") == \"1\"\nassert solution(\"10\") == \"1\"\nassert solution(\"11 10 11 11 11 11 11\") == \"2\"\n"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"0\"\nprint('Example 1:')\nprint('Input : ')\nprint('s = 2')\nprint('Exception :')\nprint('0')\nprint('Output :')\nprint('0')\n\nassert solution(stdin) == '0'\nprint('Example 2:')\nprint('Input : ')\nprint('s = 2 6')\nprint('Exception :')\nprint('3')\nprint('Output :')\nprint('3')\n\nassert solution(stdin) == '3'\nprint('Example 3:')\nprint('Input : ')\nprint('s = 3 1')\nprint('Exception :')\nprint('0')\nprint('Output :')\nprint('0')\n\nassert solution(stdin) == '0'\nprint('Example 4:')\nprint('Input : ')\nprint('s = 7 10 11')\nprint('Exception :')\nprint('4')\nprint('Output :')\nprint('4')\n\nassert solution(stdin) == '3'\nprint('Example 5:')\nprint('Input : ')\nprint('s = 5 1 3 4')\nprint('Exception :')\nprint('3')\nprint('Output :')\nprint('3')"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"6\"\n    ), \"Mismatch in number of groups\"\nassert solution(\n    \"10\"\n    ), \"Mismatch in number of groups\"\nassert solution(\n    \"10\"\n    ), \"Mismatch in number of groups\"\nassert solution(\n    \"10\"\n    ), \"Mismatch in number of groups\"\nassert solution(\n    \"10\"\n    ), \"Mismatch in number of groups\"\n"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(1) == 3\nassert solution(2) == 3\nassert solution(4) == 2\nassert solution(5) == 2\nassert solution(6) == 1\n\nNotes\n\n0 \u2264 stdin \u2264 1,000,000,000\n1 \u2264 stdin \u2264 2,000,000,000\n\n0 \u2264 stdin \u2264 1,000,000,000\n1 \u2264 stdin \u2264 2,000,000,000\n\nInput\n\nSample Input\n\n1\n10\n10\n10\n\nSample Output\n\n3\n\nExplanation\n\nMike placed five magnets in a horizontal manner. (step 1)\nMike placed three magnets in a horizontal manner, one and two. (step 2)\nMike placed two magnets in a horizontal manner, one and one. (step 3)\nMike placed three magnets in a horizontal manner, one and one. (step 4)\nMike placed three magnets in a horizontal manner, one and two. (step 5)\nMike placed one magnet in a horizontal manner, one and one. (step 6)\nMike placed one magnet in a horizontal manner, one and one.\n"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\nstdin) == 3\n\nassert solution(\"1+1\") == 2\n\nassert solution(\"0110\") == 1\n\nassert solution(\"10\") == 1\n\nassert solution(\"101\") == 1"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(5, \"01\") == \"1\"\nassert solution(4, \"01\") == \"1\"\nassert solution(2, \"01\") == \"2\"\nassert solution(3, \"01\") == \"3\"\nassert solution(6, \"01\") == \"1\"\n"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 3\n\nTestcase 2\nInput\n1\n01\n01\n01\n01\n01\n01\n01\n\nOutput\n1\n\"\"\""
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(4) == 3, \"TEST CASE NOT PASSED\"\nassert solution(10) == 3, \"TEST CASE NOT PASSED\"\nassert solution(10) == 2, \"TEST CASE NOT PASSED\"\nassert solution(10) == 1, \"TEST CASE NOT PASSED\"\nassert solution(10) == 1, \"TEST CASE NOT PASSED\"\n"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Explanation-----\n\nThe diagram for this problem is as follows:\n\n\n\nThe first line of the input contains an integer n (1 \u2264 n \u2264 100000) \u2014 the number of magnets.\nThen n lines follow.\n\nThe i-th line contains either characters \"01\", if the i-th magnet puts the ith magnet in the \"plus-minus\" position, or characters \"10\", if the ith magnet puts the ith magnet in the \"minus-plus\" position.\n\n\n\nThe second line of the input contains n lines. The i-th line contains exactly one magnet, with that magnet not positioned as close as possible to the previous magnet. The i-th line contains a number that represents the number of groups the magnet forms.\n\nThe third line contains a character that indicates, if the magnet forms two groups,\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input().strip()) == '998244353'\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 8\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 3\") == \"8\"\nassert solution(\"1 7 3 5\") == \"9\"\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"1 7 3 5\") == \"8\"\nassert solution(\"5 5\") == \"8\"\nassert solution(\"5 10 100 1000 10000\") == \"8\"\nassert solution(\"3 5 3 4\") == \"8\"\nassert solution(\"10 100 1000 10000\") == \"8\"\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"1 2 2 3 2 3 5\") == \"8\"\nassert solution(\"3 5 2 5 4\") == \"9\"\nassert solution(\"0 1 0 1 0 1\") == \"9\"\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(['1', '2', '3', '4', '5']) == '8'\nassert solution(['1', '2', '3', '4', '5', '6']) == '9'\n\n\n-----Constraints-----\n1 <= k <= 10^5\n1 <= n <= 10^5\n2 <= a_1, a_2, a_3, a_4 <= 10^9\n\n-----Time Limit-----\nO(n * k)\n\n\n-----Submissions-----\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"9\"\n\n-----Constraints-----\n1 <= k <= 10^5\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\nTime Limit: 1 sec\nMemory Limit: 1 MB\n\nhttps://leetcode.com/problems/beauty-of-an-array/discuss/117077/Solution-with-very-large-array\n\"\"\"\nfrom functools import lru_cache"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == '8'\nassert solution(stdin) == '9'\nassert solution(stdin) == '9'\nassert solution(stdin) == '8'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    \"3 5 3 6\"\n    ), \"8\"\n    \nassert solution(\n    \"4 2 1\"\n    ), \"12\"\n    \nassert solution(\n    \"5 4 2\"\n    ), \"10\"\n    \nassert solution(\n    \"10 100 1000 10000\"\n    ), \"12\"\n    \nassert solution(\n    \"101000 1010101 100101\"\n    ), \"42\"\n    \n"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1010'\n\nassert solution(stdin) == '1010'\n\nassert solution(stdin) == '1010'\n\nassert solution(stdin) == '1010'\n\nassert solution(stdin) == '1010'"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"7 3\") == \"54\"\nassert solution(\"5 5\") == \"1010\"\nassert solution(\"8 1\") == \"1009\"\nassert solution(\"6 3\") == \"1110\"\nassert solution(\"2 1\") == \"1011\"\n"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"54\"\nassert solution(input()) == \"1009\"\nassert solution(input()) == \"41\"\nassert solution(input()) == \"52\"\nassert solution(input()) == \"21\"\n"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"1010\"\n\n\n-----Original Solution-----\nInput\n7 3\n1 5 16 18 7 2 10\nbaaaaca\n\nOutput\n54\n\nInput\n5 5\n2 4 1 3 1000\naaaaa\n\nOutput\n1009\n\nInput\n8 1\n10 15 2 1 4 8 15 16\nqqwweerr\n\nOutput\n41\n\nInput\n6 3\n14 18 9 19 2 15\ncccccc\n\nOutput\n52\n\nInput\n2 1\n10 10\nqq\n\nOutput\n10\n\"\"\""
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 61\nassert solution(stdin) == 18\nassert solution(stdin) == 100\nassert solution(stdin) == 51\n"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('1 2 4 6 1 2 3 10') == '1009'\nassert solution('1 2 4 6 1 2 3 100') == '10'\nassert solution('1 2 4 6 1 2 3 100') == '8'\nassert solution('1 2 4 6 1 2 3 100') == '2'\nassert solution('1 2 4 6 1 2 3 100') == '0'\n"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"1010\"\n\"\"\""
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '54'\nassert solution(stdin) == '1010'\nassert solution(stdin) == '1009'\nassert solution(stdin) == '41'\n"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\n[\n    3,\n    5,\n    4,\n    4,\n    2,\n    1,\n    8,\n    7,\n    10,\n    10,\n    3,\n    7,\n    1,\n    10,\n    4,\n    7,\n    3,\n    3,\n    8,\n    6,\n    6,\n    1,\n    4,\n    3,\n    6,\n    4,\n    6,\n    3,\n    1,\n    6,\n    8,\n    1,\n    1,\n    2,\n    8,\n    1,\n    3,\n    4,\n    3,\n    1,\n    3,\n    4,\n    8,\n    4,\n    7,\n    2,\n    1,\n    1,\n    4,\n    5,\n    3,\n    8,\n    2,\n    1,\n    1,\n    8,\n    1,\n    3,\n    5,\n    6,\n    1,\n    2,\n    1,\n    2,\n    1,\n    7,\n    4,\n    1,\n    6,\n    2,\n    1,\n    3,\n    3,\n    5,\n    3,\n    6,\n    1,\n    1,\n    1,\n    3,\n    6,\n    2,\n    1,\n    3,\n    1,\n    2,\n    2,\n    1,\n    2,\n    3,\n    6,\n    5,\n    1,\n    3,\n    1,\n    3,\n    1,\n    2,\n    8,\n    1,\n    1,\n    2,\n    5,\n    5,\n    4,\n    5,\n    5,\n    3,\n    5,\n    1,\n    5,\n    4,\n    6,\n    4,\n    3,\n    2,\n    2,\n    1,\n    1,\n    1,\n    2,\n    8,\n    1,\n    4,\n    3,\n    3,\n    2,\n    3,\n    2,\n    2,\n    4,\n    1,\n    1,\n    1,\n    4,\n    6,\n    2,\n    3,\n    2,\n    4,\n    4,\n    5,\n    2,\n    1,\n    1,\n    1,\n    1,\n    1,\n    6,\n    1,\n    2,\n    6,\n    1,\n    1,\n    1,\n    2,\n    1,\n    1,\n    1,\n    1,\n    4,\n    4,\n    4,\n    2,\n    6,\n    4,\n    6,\n    3,\n    2,\n    4,\n    3,\n    4,\n    3,\n    2,\n    1,\n    3,\n    2,\n    4,\n    4,\n    1,\n    2,\n    2,\n    2,\n    3,\n    2,\n    3,\n    3,\n    3,\n    3,\n    1,\n    5,\n    5,\n    2,\n    1,\n    1,\n    2,\n    1,\n    1,\n    4,\n    1,\n    5,\n    3,\n    1,\n    3,\n    3,\n    6,\n    1,\n    4,\n    1,\n    2,\n    3,\n    6,\n    2,\n    5,\n    1,\n    1,\n    1,\n    2,\n    4,\n    1,\n    1,\n    4,\n    5,\n    1,\n    4,\n    1,\n    1,\n    4,\n    2,\n    6,\n    3,\n    5,\n    3,\n    4,\n    1,\n    3,\n    1,\n    3,\n    4,\n    1,\n    5,\n    3,\n    2,\n    3,\n    2,\n    2,\n    5,\n    1,\n    3,\n    1,\n    3,\n    5,\n    1,\n    3,\n    1,\n    5,\n    4,\n    3,\n    4,\n    5,\n    4,\n    1,\n    1,\n    5,\n    2,\n    3,\n    1,\n    3,\n    5,\n    2,\n    5,\n    4,\n    4,\n    3,\n    2,\n    1,\n    5,\n    3,\n    4,\n    1,\n    3,\n    2,\n    5,\n    1,\n    2,\n    4,\n    2,\n"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"3 4 1 3 1000\") == 1009\nassert solution(\"1 2 1 4 8 15 16\") == 5\nassert solution(\"1 3 5 7 10 15\") == 10\nassert solution(\"1 2 1 3 1000\") == 0\nassert solution(\"2 4 1 3 1000\") == 1010\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 5 2\") == \"2 1 0\"\nassert solution(\"2 1 4\") == \"2 2 0\"\nassert solution(\"2 5 2\") == \"2 1 0\"\nassert solution(\"2 1 5\") == \"2 1 0\"\nassert solution(\"2 5 2\") == \"2 1 0\"\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution == 1\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"2 0\"\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\n  [\n    [\"5 3\",\"2\",\"3\",\"2\",\"2\",\"3\",\"3\",\"1\",\"1\",\"1\",\"1\",\"3\",\"2\",\"1\",\"3\"],\n    [\"1\",\"3\",\"2\",\"1\",\"2\",\"2\",\"2\",\"2\",\"3\",\"1\",\"1\",\"1\",\"2\",\"2\",\"2\"],\n    [\"2\",\"2\",\"3\",\"2\",\"1\",\"1\",\"3\",\"1\",\"2\",\"1\",\"1\",\"1\",\"2\",\"1\",\"3\"],\n    [\"3\",\"1\",\"3\",\"3\",\"2\",\"3\",\"3\",\"2\",\"3\",\"2\",\"1\",\"1\",\"3\",\"3\",\"3\"],\n    [\"2\",\"3\",\"1\",\"1\",\"3\",\"3\",\"2\",\"3\",\"2\",\"1\",\"1\",\"1\",\"3\",\"3\",\"3\"]\n  ]\n)\n\nExplanation\nThe number of games played for each team, sorted in descending order, are as follows:\n\n\n----Input----\n\n3 3\n1 2 2\n2 1 1\n1 3 3\n\n-----Output-----\n\n2 1\n3 0\n2 1\n3 0\n\n----Input----\n\n3 2\n1 2 1\n1 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n2 2 2\n3 0 3\n\n-----Output-----\n\n2 3\n3 0\n2 2\n3 0\n2 1\n2 1\n3 0\n2 1\n3 0\n2 2\n3 0\n2 2\n3 0\n2 2\n3 0\n2 1\n3 0\n2 1\n3 0\n\n-----Explanation-----\n\nThe number of games played for each team is as follows:\n\n\n\"\"\""
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"2 0 2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2 0 3\"\nassert solution(stdin) == \"2 1 3\""
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '1 1'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '1 1'\nassert solution(stdin) == '1 1'\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"1 2 3\") == \"1 3\"\nassert solution(\"1 4 3\") == \"2 3\"\nassert solution(\"1 1 1\") == \"1 1\"\nassert solution(\"1 2 1\") == \"1 2\"\nassert solution(\"2 2 1\") == \"2 2\"\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"1 2 0\"\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == (\"1\", \"0\")\nassert solution(stdin) == (\"1\", \"0\")\nassert solution(stdin) == (\"2\", \"0\")\nassert solution(stdin) == (\"2\", \"0\")\nassert solution(stdin) == (\"1\", \"0\")\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(inp) == \"2 0\"\n"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 2\") == \"12\"\nassert solution(\"4 1\") == \"2 12\"\nassert solution(\"4 3\") == \"3 12\"\nassert solution(\"4 3\") == \"4 12\"\nassert solution(\"4 1\") == \"4 1\"\n"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    \"5 1\"\n) == \"11 19 -1 21 22\"\nassert solution(\n    \"4 1\"\n) == \"10 18 27 -1\"\nassert solution(\n    \"4 2\"\n) == \"10 18 27\"\nassert solution(\n    \"4 2\"\n) == \"10 18 27\"\nassert solution(\n    \"4 4\"\n) == \"10 18 27\"\n"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('5 1') == '1 11 19'\nassert solution('4 1') == '2 11 19'\nassert solution('4 1') == '10 9'\nassert solution('4 1') == '19 2'\n"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('1 2') == '1 3'\nassert solution('2 2') == '2 3'\nassert solution('4 3') == '4 4'\nassert solution('5') == '5'\nassert solution('11') == '-1'\n"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(['5', '1', '2', '4', '10', '15', '19']) == '10 18 27 -1 21 22'\nassert solution(['4', '8', '9', '10', '15', '19', '23']) == '18 24 -1 20 22'\nassert solution(['5', '1', '2', '4', '10', '15', '19']) == '23 -1 2 20 19'\n"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '5 8 9 9 10 9 1 19 18 19 -1 21 22 -1 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19 19"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 1\") == \"11 19 -1 21 22\"\nassert solution(\"4 1\") == \"10 18 27 -1\""
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('3,5,1') == '1,2,3,4,5,21'\nassert solution('1,3,2') == '1,2,3,4,5,21'\nassert solution('1,3,2,4') == '1,2,3,4,5,21'\nassert solution('1,4,2,3') == '1,2,3,4,5,21'\nassert solution('1,5,2,3') == '1,2,3,4,5,21'\n"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5 1\") == \"11 19\"\nassert solution(\"4 1\") == \"10 18\"\nassert solution(\"4 4\") == \"10 18 27\""
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 3\") == \"18 19 -1 21 22\"\nassert solution(\"4 4\") == \"10 9\"\nassert solution(\"4 7\") == \"10 9\"\nassert solution(\"3 2\") == \"11 19 -1 21 22\"\nassert solution(\"3 1\") == \"10 18 27 -1\""
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"3\"\nassert solution(10) == \"3\"\nassert solution(20) == \"3\"\nassert solution(30) == \"3\"\nassert solution(50) == \"3\"\n"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin), \"Your solution is not correct\"\n\"\"\"\nn = int(input())\nsequence = list(map(int,input().split()))"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 15\nassert solution(stdin) == 18\nassert solution(stdin) == 14\n\nassert solution(stdin)!= 1\nassert solution(stdin)!= 2\n"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(3, 4) == 5\n\nassert solution(3, 2) == 3\n\nassert solution(3, 1) == 3\n\nassert solution(3, 0) == 4\n\nassert solution(3, 10) == 10"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(4, [3, 5, 10]) == 2\nassert solution(5, [3, 10]) == 3\nassert solution(1, [1]) == 1\nassert solution(1, [3]) == 1\nassert solution(4, [3, 10]) == 3\n"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\n    \"4 5 1 3 6 7 8 9 10 19 20 20 22\",\n    \"5 1 3 6 7 8 9 10 19 20 20 22\"\n    ) == 5\nassert solution(\n    \"3 5 3 2 2 1 3\",\n    \"2 3 1 3 2\"\n    ) == 2\nassert solution(\n    \"1 1 1 1 1 1\",\n    \"1 1 1 1 1 1\"\n    ) == 3\nassert solution(\n    \"1 1 1 1 1 1 2\",\n    \"1 1 1 1 1 1 2\"\n    ) == 2\nassert solution(\n    \"5 1 1 3 6 7 8 9 10 19 20 20 22\",\n    \"5 1 3 6 7 8 9 10 19 20 20 22\"\n    ) == 5\n"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 8\n\n-----Constraints-----\n0 <= n <= 2 * 10^5\n\n-----Time Limit-----\n1 second\n\n-----Solutions-----\n3\n\n\n-----Tests-----\n>>> 10, 5, 10, 20, 10\n3\n>>> 10, 10, 20, 10\n3\n"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 3, 'The solution is not correct'\n\nInput\n4\n3 7 5\n\nOutput\n5\n\nInput\n10 20 5 7 6 5 3 7 4 5 6 5\n\nOutput\n11"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '4'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"10 2 3 4 -1\") == \"5\"\nassert solution(\"2 -1 3 -1\") == \"4\"\nassert solution(\"1 2 3 -1\") == \"3\"\nassert solution(\"-1 -2 3 -1\") == \"3\"\nassert solution(\"-1 -2 -3\") == \"2\"\n"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"4\"\n\n------Expected Results------\n\nOutput for input 1:\n5\nInput for input 1:\n3\nOutput for input 1:\n3\nInput for input 2:\n-1\nOutput for input 2:\n0\nInput for input 3:\n-2\nOutput for input 3:\n1\nInput for input 3:\n-2\nOutput for input 3:\n0\nInput for input 4:\n-2\nOutput for input 4:\n3\nInput for input 4:\n-2\nOutput for input 4:\n2\nInput for input 5:\n-2\nOutput for input 5:\n0\n\n\"\"\""
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"5\"\n\n\n-----Constraints-----\n1 <= stdin.length <= 20\n-100000 <= stdin[i] <= 100000\n1 <= t <= 10^4\n\n-----Time Limit-----\nO(nlogn)\n\n\n------Binary Search-----"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '5'\nassert solution(stdin) == '3 2 -3 -2 3 -3 3 -2 3 3'\nassert solution(stdin) == '3 4 -1 -2 1 -3 -2 1 -3 -2 1 -2 3'\nassert solution(stdin) == '3 4 -1 -2 1 -3 -2 1 -3 -2 1 -2 3'\n"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"5 3 -1 3 4 -1\") == \"5\"\nassert solution(\"3 0\") == \"3\"\nassert solution(\"4 -1\") == \"3\"\nassert solution(\"-2 1 -2 3\") == \"3\"\nassert solution(\"-2 -2 -2 -2 -2 -2\") == \"3\"\n"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('5 4') == 5\nassert solution('3 0') == 3\nassert solution('4 -1') == 4\nassert solution('-1 2 -3') == 2\nassert solution('-2 1 -2 3') == 1\n"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(inp) == \"5\""
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 4\", [\"5 -1 3 4 -1\", \"5 -1 3 4 -1\", \"5 -1 3 4 -1\", \"5 -1 3 4 -1\", \"5 -1 3 4 -1\"]) == \"4\"\nassert solution
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(3+9)\nassert solution(stdin) == str(3)\n\n\n-----Sample 1-----\n\nInput\n4\n00010001\n\nOutput\n22\n\nSample 2\n\nInput\n8\n
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(3, \"1011001\") == 3\nassert solution(9, \"11111010\") == 2031\nassert solution(100, \"10101010\") == 0\n"
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 2031\nprint(\"Example 1:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"5\")\n\nprint(\"Example 2:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"18\")\n\nprint(\"Example 3:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"5\")\n\nprint(\"Example 4:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"18\")\n\nprint(\"Example 5:\")\nprint(\"Input : \")\nprint(\"stdin : \")\nprint(stdin)\nprint(\"Exception :\")\nprint(\"5\")"
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(0) == \"0\" and solution(1) == \"1\"\nassert solution(2) == \"00\" and solution(3) == \"10\"\nassert solution(4) == \"101\" and solution(5) == \"11101\"\nassert solution(6) == \"1111\" and solution(7) == \"11111111\"\nassert solution
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 13\nassert solution(stdin) == 35\nassert solution(stdin) == 11\nassert solution(stdin) == 121"
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(input()) == '3', 'Input is not correct'"
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '2031'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2031'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 23\nassert solution(stdin) == 29\nassert solution(stdin) == 51\nassert solution(stdin) == 69\nassert solution(stdin) == 69\n"
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\"\nclass Solution:\n    def numberToString(self, num: int) -> str:\n        convert = [str(x) for x in str(num)]\n        convert.insert(0, \"0\")\n        convert.insert(0, \"1\")\n        return \"\".join(convert)\n"
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"321\"\n\nassert solution(stdin) == \"121\"\n"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(6)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^4\n\nExample 1:\n\nInput:\n\n4 1\n0 3 2 1\n\nOutput:\n\n4\n\nExplanation:\n\nthe sequence is a sequence with 4 pairs of integers (1, 3), (1, 5), (2, 3), (2, 4), (3, 4), (5, 6), (6, 7), (7, 8).\neach pair should be k-interesting.\n\nExample 2:\n\nInput:\n\n6 0\n200 100 100 100 200 200\n\nOutput:\n\n6\n\nExplanation:\n\nall pairs of integers with equal bit-length are k-interesting.\n\nExample 3:\n\nInput:\n\n6 0\n200 100 100 100 200 200\n\nOutput:\n\n6\n\nExplanation:\n\nall pairs of integers with equal bit-length are k-interesting.\n\"\"\""
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == \"4\""
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 6 10 6 6') == '6'\nassert solution('6 0 0 2 1 2') == '3'\nassert solution('6 0 0 2 1 2') == '4'\nassert solution('6 0 0 2 1 2') == '5'\nassert solution('6 0 0 2 1 2') == '6'\n"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == \"4\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"4\"\nassert solution(inp) == \"6\"\n"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == len(stdin)\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^4\n\n-----Time Limit-----\ntime limit (in seconds) is 10^5.\n\nExample 1:\n\nInput\n\n5\n6\n7 1 2 3 4 5 6\n\nOutput\n\n3\n\nExplanation\n\nVasya has two pairs of integers: (1, 3) and (1, 4).\n\nVasya wants to know how many pairs of indexes (i, j) are in his sequence so that i < j and the pair of integers a_{i} and a_{j} is k-interesting.\n\nExample 2:\n\nInput\n\n5\n6\n7 1 2 3 4 5 6\n\nOutput\n\n0\n\nExplanation\n\nVasya doesn't have any pairs of indexes k-interesting.\n\nExample 3:\n\nInput\n\n5\n6\n7 1 2 3 4 5 6\n\nOutput\n\n3\n\nExplanation\n\nVasya has three pairs of integers: (1, 5), (1, 6), (2, 3), (2, 4).\n\nVasya wants to know how many pairs of indexes (i, j) are in his sequence so that i < j and the pair of integers a_{i} and a_{j} is k-interesting.\n\nExample 4:\n\nInput\n\n6\n7 1 2 3 4 5 6\n\nOutput\n\n0\n\nExplanation\n\nVasya has all pairs of indexes.\n\nExample 5:\n\nInput\n\n6\n7 1 2 3 4 5 6\n\nOutput\n\n4\n\nExplanation\n\nVasya has four pairs of integers: (1, 5), (1, 6), (2, 3), (2, 4).\n\nVasya wants to know how many pairs of indexes (i, j) are in his sequence so that i < j and the pair of integers a_{i} and a_{j} is k-interesting.\n\nExample 6:\n\nInput\n\n8\n7 1 2 3 4 5 6 7\n\nOutput\n\n1\n\nExplanation\n\nVasya has one pair of indexes (1, 5), (1, 6), (2, 3), (2, 4).\n\nVasya wants to know how many pairs of indexes (i, j) are in his sequence so that i < j and the pair of integers a_{i} and a_{j} is k-interesting.\n\nExample 7:\n\nInput\n\n9\n8 1 2 3 4 5 6 7 8 9\n\nOutput\n\n0\n\n\nExplanation\n\nVasya doesn't have any pairs of indexes k-interesting.\n\nExample 8:\n\nInput\n\n8\n7 1 2 3 4 5 6 7 8 9\n\nOutput\n\n0\nExplanation\n\nVasya doesn't have any pairs of indexes k-interesting.\n\nExample 9:\n\nInput\n\n7\n8 1 2 3 4 5 6 7 8 9\n\nOutput\n\n0\nExplanation\n\nVasya doesn't have any pairs of indexes k-interesting.\n\"\"\"\n\nclass Solution:\n    def solution(self, stdin: str, stdout: str) -> str:\n        n, k = map(int, stdin)\n        a_l = []\n        a_r = []\n        for i in range(n):\n            a = list(map(int, stdin.split()))\n            a_l.append(a[:k])\n            a_r.append(a[k:])\n        \n        for i in range(n):\n            for j in range(i+1, n):\n                if a_r[i][j]!= a_r[i][j-1]:\n                    stdout.write(str(k-1)+\"\\n\")\n                    return\n        \n        return"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 6\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\nstdin = \"\"\"\n6 0\n200 100 100 100 200 200\n\"\"\") == \"\"\"\n4\n\"\"\"\n"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"6\"\n\n----Examples----\nSample 1:\n\nInput:\naaabbac\naabbccac\n\nOutput:\n6\n\nSample 2:\n\nInput:\na\nz\n\nOutput:\n-1\n'''\n\n'''\nThe following is a test case:\nInput:\naaabbac\naabbccac\n\nOutput:\n3\n'''\n\n'''\nThe following is a test case:\nInput:\na\nz\n\nOutput:\n1\n'''\n\n'''\nThe following is a test case:\nInput:\nz\na\n\nOutput:\n1\n'''\n\n'''\nThe following is a test case:\nInput:\na\nz\na\n\nOutput:\n-1\n'''\n\n'''\nThe following is a test case:\nInput:\naaabbac\naabbccac\naabbcbad\n\nOutput:\n6\n'''"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"aaabbac\") == \"6\"\nassert solution(\"aab\") == \"7\"\nassert solution(\"aabb\") == \"5\"\nassert solution(\"aabaa\") == \"1\"\nassert solution(\"aaabbb\") == \"0\"\n"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"abab\") == -1\n\n\n\"\"\""
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"6\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= z\n1 <= color of the pieces of paper <= 10^6\n\n\"\"\""
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"aaabbac\") == \"6\"\n\nassert solution(\"a\") == -1\n\nassert solution(\"aabccac\") == \"6\"\n\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n\n-----Side-effects-----\n\nCorrectness\nTime Limit: 0.01 seconds\nMemory Limit: 256 megabytes\n\nSubmissions\n7175 ms\n\"\"\"\n"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"z\", \"a\", \"b\", \"c\"]) == \"6\"\nassert solution([\"a\", \"b\", \"z\"]) == \"1\"\nassert solution([\"a\", \"c\"]) == \"1\"\nassert solution([\"z\", \"c\", \"a\"]) == \"1\"\nassert solution([\"a\", \"b\", \"z\"]) == \"1\"\n"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(-1)\n"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"aaabbac\") == 6\nassert solution(\"aabbccac\") == -1\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 1000\n1 \u2264 m \u2264 1000\n1 \u2264 color of sheets \u2264 6\nAll the colors of the pieces of paper in the garland are in the range 0...6.\n\nTime Limit: 1 second\nSpace Limit: 20,000 characters\n\n\n-----Tags-----\n\nauto"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    (\n        \"3 1 5\",\n        \"4 5 12\",\n        \"3 1 5\"\n    )\n) == \"10\"\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(['3 1', '5 4 6', '3 1 5', '4 5 5 12 5', '4 5 5 12 5']) == '25'\nassert solution(['2 3 2', '2 4 4', '2 3 3', '2 4 2', '2 2 2', '2 2 3']) == '25'\nassert solution(['5 3', '3 4 7', '3 1 5', '3 2 3', '3 2 2', '3 3 2']) == '6'\nassert solution(['2 3 2', '2 4 4', '2 3 3', '2 4 2', '2 2 2', '2 2 3']) == '25'\nassert solution(['5 3', '3 4 7', '3 1 5', '3 2 3', '3 2 2', '3 3 2']) == '8'\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 25\n\nprint('Example 1:')\nprint('Input : ')\nprint('stdin:')\nprint('3 1')\nprint('Output :')\nprint('10')\nprint()\n\nprint('Example 2:')\nprint('Input : ')\nprint('stdin:')\nprint('5 3')\nprint('Output :')\nprint('25')\nprint()\n\nprint('Example 3:')\nprint('Input : ')\nprint('stdin:')\nprint('4 5 6')\nprint('Output :')\nprint('30')\nprint()\n\nprint('Example 4:')\nprint('Input : ')\nprint('stdin:')\nprint('10 3 5 6')\nprint('Output :')\nprint('35')\nprint()\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('3 4 7 10 3') == '25'\nassert solution('5 3') == '10'\nassert solution('3 4 7 11 12') == '11'\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\"3 1\") == \"10\"\nassert solution(\"5 3\") == \"10\"\nassert solution(\"3 1 5\") == \"15\"\nassert solution(\"3 4 7 10 3\") == \"25\""
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 1\") == \"10\"\nassert solution(\"5 4 6\") == \"25\"\nassert solution(\"5 1 3 1\") == \"15\"\nassert solution(\"5 2 3 4 1\") == \"18\"\nassert solution(\"3 1 1 1\") == \"10\"\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 1\", \"5 4 6\") == \"10\"\nassert solution(\"3 1\", \"3 4 7 10 3\") == \"25\"\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '10'\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"1 1 1 2 2\") == 5\nassert solution(\"1 1 1 1 1 1 1 1 1 1 1\") == 5\nassert solution(\"1 1 1 2 3 4\") == 5\nassert solution(\"1 1 2 3 4 5 6\") == 5\nassert solution(\"1 1 2 3 4 5 6 7 8 9 10\") == 5\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"15\"\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1115598\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\n    stdin.split(\n    )\n    ) == \"123432456\"\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 111524, \"The task is impossible to solve\"\nassert solution(stdin) == 11153, \"The task is impossible to solve\"\nassert solution(stdin) == 11154, \"The task is impossible to solve\"\nassert solution(stdin) == 11155, \"The task is impossible to solve\"\nassert solution(stdin) == 11156, \"The task is impossible to solve\"\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '12330'\nassert solution(stdin) == '1115598'\nassert solution(stdin) == '1234456'\nassert solution(stdin) == '123445'\nassert solution(stdin) == '56789'\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"12330\"\nassert solution(stdin) == \"1115598\"\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"1211\"\nassert solution(stdin) == \"1216\"\nassert solution(stdin) == \"1217\"\nassert solution(stdin) == \"1218\"\nassert solution(stdin) == \"1219\"\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\nassert solution(input()) == 12\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"12330\"\nassert solution(stdin) == \"1115598\"\nassert solution(stdin) == \"123456789\"\nassert solution(stdin) == \"1234567890\""
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 71234\n\n\n-----Constraints-----\n0 <= n <= 2^30\n1 <= a_1, a_2, a_i, a_j \\le 10^9\n0 <= b_1, b_2, b_i, b_j \\le 10^9\n\n------Memory Usage-----\nSpace: 1GB\n\nTime: 1 second\n\nWarnings:\nRuntime: 36 ms (28.08%)\nMemory Usage: 18.1 MB (26.22%)\n\n-----Constraints-----\n1 <= stdin.length <= 10^6\n\n------Algorithm-----\nFor the help, please modify the loop variable and call the helper function below.\n\n------Example 1:---\nInput:\n3\n12 3 45\n\nOutput:\n12330\n\nExample 2:---\nInput:\n2\n123 456\n\nOutput:\n1115598\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 12 * (123 + 456) // 30 % 1000 * 1000\n\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n[Challenge]\n\nIf you want to return correct output, it is possible to have an online solution which can use the additional storage of input and output. You can write your own solution by implementing a solution_helper function. The function should return the correct output based on the input and the expected output. You can assume that for all inputs, the input is valid, and that the output is valid (see the sample input).\n\nNote that the input and output should be valid values for the function. For example, if the input is 4, the output should be\n\nsolution(stdin = \"4\")\n\nInput\n\n2\n10 4 5 3 2 2\n\nOutput\n\nTrue\n\n\nIf you decide to write your own solution, you should write your own solution and use it in the challenge.\n\nHere is an example of the solution for a test case:\n\n[Input]\n\nThe first line of the input contains one integer, $n$.\n\nThe second line contains one space-separated string, $m$, representing $n$ points and $m$ segments.\n\nThe third line contains a space-separated integer, $a_i$, representing $a_i$; and a space-separated integer, $b_i$, representing $b_i$.\n\nOutput\n\n\"Yes\" if the image is rotationally symmetrical, and \"No\" otherwise.\n\nConstraints\n\n\n\n[Output]\n\nOutput \"Yes\" if the image is rotationally symmetrical, and \"No\" otherwise.\n\n[Example]\n\nInput\n\n10\n1 2 3 4 5 6 7 8 9 10\n\nOutput\n\n\"Yes\"\n\n\n[Constraints]\n\n1 <= $n <= 10^5$\n1 <= $m <= n$\n1 <= $a_i \\leq b_i \\leq 10^9$\n\n\n[Challenge]\n\n- Easy\n\nhttps://www.hackerrank.com/challenges/rotate-image/problem\n\nYou can assume that the input will be valid.\n\nInput\n\n\nInput\n\n1\n3 4 5 2 2 2\n\nOutput\n\n\nOutput"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"5 6\") == \"Yes\"\nassert solution(\"9 5\") == \"No\"\nassert solution(\"3 7\") == \"Yes\"\nassert solution(\"5 6\") == \"No\"\nassert solution(\"7 8\") == \"No\"\n\nPrinting to console\n\n[input]\na = str(stdin.strip())\nprint(a)\n\n[output]\nYes\n\n[input]\na = str(stdin.strip())\nprint(a)\n\n[output]\nNo\n\n[input]\na = str(stdin.strip())\nprint(a)\n\n[output]\nNo\n\n[Sample Input 1]\n9 7\n1 2 3 4 5 6 7 8 9\n\nSample Output 1]\nYes\n\n[Sample Input 2]\n10 3\n1 2 3 4 5 6 7 8 9\n\nSample Output 2]\nNo\n"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 'Yes'\nassert solution(stdin) == 'No'\n\"\"\""
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(\"12 6\") == \"Yes\"\nassert solution(\"9 6\") == \"Yes\"\nassert solution(\"10 3\") == \"No\"\nassert solution(\"10 2\") == \"No\"\n"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n[input]\n\n> <case>\n<input>\n3 7\n1 3\n3 7\n5 7\n7 11\n9 11\n11 3\n2 2\n2 3\n\n> <output>\nYes\n\n\n[output]\n\n> <case>\n<input>\n5 4\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3\n1 2\n1 3"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n[Time Limit]\nO(n log n)\n\n[Space]\nO(1)\n\n'''"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(\"3 3\\n4 5\\n6 7\\n7 11\\n8 9\\n11 3\\n\"), \"Expected 'Yes' to be returned.\"\nassert solution(\"1 1\\n2 2\\n3 3\\n4 4\\n5 5\\n6 6\\n7 8\\n8 9\\n1 2\\n2 3\\n3 4\\n4 5\\n5 6\\n7 8\\n7 9\\n8 10\\n9 11\\n11 3\\n\"), \"Expected 'Yes' to be returned.\"\n\n...\n..\n...\n\"\"\"\n\nimport math\n\nn, m = map(int, input().split())\na = [int(i) for i in input().split()]\na = list(map(int, input().split()))"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\n[Time Limit]\n\nclass Solution:\n    def isSymmetric(self, root: Optional[TreeNode]) -> bool:\n        if not root: return True\n        return self.isMirror(root.left, root.right)\n\n    def isMirror(self, p1: Optional[TreeNode], p2: Optional[TreeNode]) -> bool:\n        if not p1 and not p2: return True\n        if not p1 or not p2: return False\n        if p1.val!= p2.val: return False\n        return self.isMirror(p1.left, p2.right) and self.isMirror(p1.right, p2.left)\n\n-----Constraints-----\n\n1 <= stdin.length <= 500\n0 <= n <= 300\n0 <= m <= 100\n1 <= a_i, b_i <= n\na_i < b_i\na_i and b_i are distinct\n\n[Time Limit]"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\n[Time Limit]\n1 second (py)\n\n[Comment]\n\"\"\"\n\nimport math\n"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n-----Example 1-----\n\nInput\n\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 121 122 123 124 125 126 127 128 129 130 131 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 164 164 165 166 167 168 169 170 171 171 172 173 174 175 176 178 179 180 181 181 182 183 183 184 185 186 187 188 189 190 191 194 195 196 196 197 198 199 200 201 202 201 203 204 205 206 207 208 208 210 210 211 212 213 214 215 216 217 218 219 220 220 221 223 224 225 226 227 228 229 229 230 231 232 233 234 235 236 237 237 238 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n[\n    [\n        [\n            [\n                \"RUL\",\n                \"LRL\",\n                \"LRR\",\n                \"LLL\"\n            ],\n            [\n                \"RRLLL\",\n                \"LLLLL\",\n                \"LLRL\",\n                \"LLRR\"\n            ]\n        ]\n    ]\n)\n== \"10\"\n"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(inp) == 10"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 5\") == \"10\"\nassert solution(\"1 4\") == \"5\"\nassert solution(\"1 1\") == \"1\"\nassert solution(\"1 0\") == \"1\"\nassert solution(\"1 6\") == \"4\"\n"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\n    \"3 3 2 4 4 2 5 2 5 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 10"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10,'stdin incorrect'\n"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 10\n\n\n\"\"\"\n\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\nclass Solution:\n    def __init__(self):\n        self.root = None\n    def postorderTraversal(self, root: TreeNode) -> List[int]:\n        if not root:\n            return []\n        res = []\n        res += self.postorderTraversal(root.left)\n        res += [root.val] + self.postorderTraversal(root.right)\n        return res"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(2, 5) == 10\nassert solution(5, 2) == 10\nassert solution(5, 5) == 10\nassert solution(1, 1) == 1\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"255.255.254.0\"\nassert solution(\"2 1\") == \"255.255.254.0\"\nassert solution(\"0 0.0.0.1\") == \"0.0.0.0.0\"\nassert solution(\"0 1\") == \"0.0.0.0\"\nassert solution(\"1 1\") == \"0.0.0.0\"\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '255.255.254.0'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == '255.255.254.0'\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '255.255.254.0'\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '255.255.254.0'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(inp) == '255.255.254.0'\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"255.255.254.0\"\nassert solution(stdin) == \"255.255.255.0\"\nassert solution(stdin) == \"255.255.255.255\"\nassert solution(stdin) == \"255.255.255.255\"\nassert solution(stdin) == \"255.255.255.255\"\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == '255.255.254.0'\n\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution('0.0.0.1') == '255.255.254.0'\nassert solution('0.1.1.2') == '0.1.1.1'\nassert solution('0.0.2.1') == '0.0.2.1'\nassert solution('0.1.1.0') == '0.1.1.0'\nassert solution('0.0.2.3') == '0.0.2.3'"
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\n    stdin) == \"255.255.254.0\"\n\nassert solution(\n    stdin) == \"-1\"\n"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    input()) == \"5\"\n\nExplanation\n\nThere are multiple answers, print any of them:"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == 5"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"3 2 4\") == \"2\"\nassert solution(\"5\") == \"5\"\nassert solution(\"3 4 4\") == \"1\"\nassert solution(\"5 1 3\") == \"1\"\nassert solution(\"4 4 4 4 4\") == \"4\"\n"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == -1\n"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(3, [\"2\", \"2\", \"4\"]) == 2\nassert solution(5, [\"2\", \"1\", \"3\", \"1\", \"6\"]) == -1\n"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 1\n\n--------Test Cases--------\nInput\n\n2\n2 2 4\n\nOutput\n\n2\n\nInput\n\n5\n2 1 3 1 6\n\nOutput\n\n1\n\n-------------------\n\"\"\""
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution([\"5\", \"1\", \"2\", \"3\", \"4\"]) == \"2\"\nassert solution([\"1\"]) == \"1\"\nassert solution([\"3\"]) == \"3\"\nassert solution([\"2\"]) == \"2\"\nassert solution([\"2\", \"1\", \"2\", \"3\", \"4\"]) == \"4\"\n"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"\"\"\n4\n3 5\n6 2\n\"\"\") == \"-1\nassert solution(\"\"\"\n3\n1\n2\n\"\"\") == -1\nassert solution(\"\"\"\n3\n4\n\"\"\") == -1\nassert solution(\"\"\"\n3\n5\n3\n\"\"\") == -1\nassert solution(\"\"\"\n5\n3\n\"\"\") == -1\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"4\") == \"3 3 6 5 4\"\nassert solution(\"3\") == \"0 0 0\"\nassert solution(\"3 4 6\") == \"1 2 3\"\nassert solution(\"1 2 3 4 3\") == \"0\"\nassert solution(\"1 4 3 2\") == \"0 1\"\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1 3 2\"\nassert solution(stdin) == \"5 4 3 6\"\nassert solution(stdin) == \"-1 -1 -1\"\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '3 3 1'\nassert solution(stdin) == '4 3 3'\nassert solution(stdin) == '1 3'\nassert solution(stdin) == '1 3 2'\nassert solution(stdin) == '3 3 2'\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution('5 4 3 6') == '5 4 3 6'\nassert solution('3 6') == '3 6'\nassert solution('3 2 5 3') == '-1 -1'\nassert solution('3 2 5 3 2 2 3 1') == '-1'\nassert solution('3 2 5 3 2 2 3 1 2 2 3') == '-1'\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(4) == 5\n\nassert solution(3) == 4\n\nassert solution(3) == -1\n\nassert solution(2) == -1\n\nassert solution(2) == -1"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"5 3 6\") == \"-1 1 2 3 4\"\nassert solution(\"1 1 3 2\") == \"5 4 3 6\"\nassert solution(\"1 3 4\") == \"5 1 3 4\"\nassert solution(\"1 4 3\") == \"5 1 3\"\nassert solution(\"1 2 3 4\") == \"5 1 3\"\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 0, \"incorrect output\"\n\n\"\"\"\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution('1 5 2 7') == '1 1 3 2'\nassert solution('3 3 2') == '-1 -1 -1'\nassert solution('3 3 2') == '-1 -1 -1'\nassert solution('3 4') == '-1 -1 -1'\nassert solution('3 4') == '-1 -1 -1'\n"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n0 \u2264 n \u2264 1000\n\n-----Time Limit: 1 seconds per test case.\n\n-----Example Input\n\nThe first input line contains a single integer n (1 \u2264 n \u2264 1000) \u2014 the number of rows of seats in the bus.\n\nThe second line contains the string characters of the bus, separated by the walkways ('|').\n\nOutput\nYES\n\n-----Example Output\n\nInput\n6\nOO|OX\nXO|XX\nOX|OO\nXX|OX\nOO|OO\n\nOutput\nYES\n\nInput\n4\nXO|OX\nXO|XX\nXO|OO\nOX|XO\n\nOutput\nNO\n\nInput\n5\nXX|XX\nXX|XX\nXO|OO\nXO|XX\nOX|OO\nOX|XO\n\nOutput\nNO\n\nInput\n5\nXX|XX\nXX|XX\nXO|OO\nXO|XX\nOX|OO\nOX|XX\n\nOutput\nNO\n\n\"\"\""
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"0|OO\") == \"YES\"\nassert solution(\"0|OO\") == \"NO\"\nassert solution(\"1|OO\") == \"YES\"\nassert solution(\"1|OO\") == \"NO\"\nassert solution(\"1|XX\") == \"YES\"\n"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(input()) == \"YES\"\n\n\n\n-----Sample Input-----\n\nInput\n6\nOO|OX\nXO|XX\nOX|OO\nXX|OX\nOO|OO\n\nOutput\nYES\n++|OX\nXO|XX\nXO|OO\n\nInput\n4\nXO|XX\nXO|XX\nXO|OO\n\nOutput\nNO\n\nInput\n5\nXX|XX\nXX|XX\nXO|XX\nXO|++\nXO|XX\n"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == 'YES'\n\n\"\"\"\n"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\"\n\nfrom sys import stdin\n"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"4 1\\nOO|OX\\nOO|OO\\nOO|OO\") == \"YES\"\nassert solution(\"4 3\\nOO|OX\\nOO|OO\\nOO|OO\") == \"NO\"\n"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n\nprint('solution tests pass.')"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10O+\") == \"NO\"\nassert solution(\"XXO+\") == \"YES\"\nassert solution(\"XOO+\") == \"YES\"\nassert solution(\"OOOX+\") == \"YES\"\nassert solution(\"OOOX\") == \"NO\"\n"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n4\nOO|OX\nXX|XX\nOX|OO\n\nOutput\nNO\n\nInput\n5\nXO|XX\nXX|XX\nXO|OO\nXO|OO\n\nOutput\nYES\n++|XO\nXO|XX\nXO|OO\nXX|XX\n\"\"\""
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\", \"1 2 1\", \"3\", \"6\"]) == \"10\"\nassert solution([\"5\", \"1 2 1\", \"3\", \"0\"]) == \"1\"\nassert solution([\"4\", \"1 1 1\", \"3\", \"0\"]) == \"1\"\nassert solution([\"4\", \"1 1 1\", \"0\", \"0\"]) == \"1\"\nassert solution([\"3\", \"2\", \"1\", \"2\", \"4\", \"0\"]) == \"1\"\n"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(input()) == 20\nassert solution(input()) == 20\nassert solution(input()) == 20\n\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 10 seconds\n\nDoes not use time limits.\n\"\"\"\n\nimport math"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\n\nassert solution(stdin) == 20\n\nassert solution(stdin) == 1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSpace Limit: 1 sec\n\n-----Bug Fixes-----\n1.   [0,0,1,2,10] -> [0,0,1,1,1]\n2.   [0,0,1,1,1] -> [0,0,1,2,10]\n3.   [0,0,1,2,10] -> [0,0,1,1,1]\n4.   [0,0,1,2,10] -> [0,0,1,2,1]\n\"\"\"\nfrom collections import Counter"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(input()) == 10\n"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution([\"5\", \"1\", \"1\", \"3\", \"6\"]) == \"10\"\nassert solution([\"5\", \"3\", \"1\", \"4\", \"10\"]) == \"5\"\nassert solution([\"5\", \"4\", \"3\", \"2\", \"5\"]) == \"1\"\nassert solution([\"1\", \"1\", \"1\"]) == \"1\"\nassert solution([\"1\", \"2\", \"3\"]) == \"1\"\n"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == '10'\n\"\"\"\n\nimport math\n\nn = int(stdin.strip())\n\nprint(math.factorial(n))"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"20\"\n"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"5\") == \"10\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"20\"\nassert solution(\"4\") == \"1\""
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"20\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"2 3 5 8 11\"\nassert solution(\"10 3\") == \"2 3 4 6 9 12 16 21 26 31\"\nassert solution(\"10 5\") == \"2 3 4 5 6 9 12 16 21 26 31\"\nassert solution(\"0\") == \"\"\n"
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == '2 3 5 8 11'\nassert solution(stdin) == '2 3 4 6 9 12 16 21 26 31'\nassert solution(stdin) == '2 3 4 6 9 12 16 21 26 31'\n\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^6, 2 \u2264 k \u2264 n - 2\n\n\n-----Time Limit: 1 min\n-----Space Limit: 80 char\n\n\n-----Hint: Use a counter variable and also a for loop to iterate through n values\n\n\"\"\""
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(\"1 2 3 4 5 6 8 9 10 11\") == \"2 3 4 5 6 8 9 10 11\"\nassert solution(\"10 3\") == \"10 3\"\nassert solution(\"13\") == \"5 1 3 7 11\"\nassert solution(\"5 3 5 4 5 6 5\") == \"5 1 5 4 6\"\nassert solution(\"5 3 5 4 5 6 5 7 8 9 10 11\") == \"4 1 5 3 7 9 10 11\"\n"
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution('10 3') == '2 3 4 6 9 12 16 21 26 31'\nassert solution('1') == '1'\nassert solution('123456789') == '3 5 8 11 12 16 21 26 31'\nassert solution
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == '2 3 5 8 11'\nassert solution(stdin) == '2 3 4 6 9 12 16 21 26 31'\nassert solution(stdin) == '2 3 4 6 9 12 16 21 26 31'\nassert solution(stdin) == '2 3 4 6 9 12 16 21 26 31'\n\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= k <= 10^6\n1 <= gcd(n, k) <= 10^6\n0 <= stdin.length <= 30\n\n\n-----Time Limit: 1 sec (best)-----\n\nSample Input 1:\n5 2\n\nSample Output 1:\n2 3 5 8 11\n\n\n-----Time Limit: 2 sec (best)-----\n\nSample Input 2:\n5 3\n\nSample Output 2:\n3 2 4 6 9 12 16 21 26 31\n\n\n-----Time Limit: 1 sec (worst)-----\n\nSample Input 3:\n1\n\nSample Output 3:\n1\n\n\n-----Time Limit: 1 sec (worst)-----\n\nSample Input 4:\n10\n\nSample Output 4:\n1 2 3 4 5 6 7 8 9 0\n\n\n-----Time Limit: 1 sec (worst)-----\n\nSample Input 5:\n10 3\n\nSample Output 5:\n3 4 5 6 7 8 9 0 1 2\n"
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(\"3 2\") == \"2 3 5 8 11\"\nassert solution(\"3 1\") == \"3 2 3 5 8\"\nassert solution(\"1 1\") == \"1 2 3 5 8\"\nassert solution(\"4\") == \"4 6 9 12\"\nassert solution(\"6\") == \"6 9 12 16 21 26 31\"\n"
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == \"2 3 5 8 11\"\nassert solution(stdin) == \"2 3 4 6 9 12 16 21 26 31\"\nassert solution(stdin) == \"2 3 4 6 9 12 16 21 26 31\"\nassert solution(stdin) == \"2 3 5 8 11\"\nassert solution(stdin) == \"2 3 4 6 9 12 16 21 26 31\"\n"
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(\"10 3\") == \"2 3 5 8 11\"\nassert solution(\"4 7\") == \"2 3 7 8 11\"\nassert solution(\"9 1\") == \"1 3 9 9\"\nassert solution(\"100 6\") == \"1 4 6 9 16 21 26 31 32 33 36 37 41 42 49 44 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49 45 46 46 47 48 49"
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(1) == \"1\"\nassert solution(10) == \"11\"\nassert solution(2) == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(3) == \"1 2 3 4 6\"\nassert solution(4) == \"1 2 3 4\"\n"
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"5 2\") == \"2 3 5 8 11\"\nassert solution(\"10 3\") == \"2 3 4 6 9 12 16 21 26 31\"\nassert solution(\"16 21 26 31\") == \"4 4 4 4 4\"\nassert solution(\"4 4 4 4 4\") == \"4 4 4 4\"\nassert solution(\"4 6 5 9\") == \"6 6 6 5\"\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"312\") == 3, \"incorrect answer\"\nassert solution(\"6\") == 5, \"incorrect answer\"\nassert solution(\"4\") == 4, \"incorrect answer\"\nassert solution(\"0\") == 0, \"incorrect answer\"\nassert solution(\"25\") == 0, \"incorrect answer\"\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(\"124\") == 4\nassert solution(\"4\") == 3\nassert solution(\"5810438174\") == 9\nassert solution(\"58132577766\") == 12\nassert solution(\"487963570\") == 3\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 3\nassert solution(\"1\") == 1\nassert solution(\"0\") == 2\nassert solution(\"1\") == 0\nassert solution(\"5\") == 0\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(inp) == 3\nassert solution(inp) == 9\nassert solution(inp) == 0\nassert solution(inp) == 0\nassert solution(inp) == 0\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == 3\n\"\"\""
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '4'\nassert solution(stdin) == '4'\nassert solution(stdin) == '0'"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution('4') == 4\nassert solution('4') == 3\nassert solution('4') == 0\nassert solution('4') == 0\nassert solution('4') == 0\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == 4, \"Expected 4, but got \" + str(solution(stdin))\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(\"4\") == 1\nassert solution(\"10\") == 3\nassert solution(\"124\") == 2\nassert solution(\"7124\") == 1\nassert solution(\"4\") == 0\n"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"1 2 3 2 1\"\nassert solution(inp) == \"10 6 8\"\nassert solution(inp) == \"10 6 6\"\nassert solution(inp) == \"5\"\nassert solution(inp) == \"3\"\n"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"10 6 6\"\n\n\n------>>> Test Cases <<<------\n\nTest Case 1:\nInput:\n3\n10 6 8\n\nOutput:\n10 6 6\n\nTest Case 2:\nInput:\n1\n10\n\nOutput:\n1\n\nTest Case 3:\nInput:\n4\n9\n\nOutput:\n2\n\nTest Case 4:\nInput:\n2\n\nOutput:\n1\n\n------>>> Note\nThe maximum number of floors for a skyscraper is not a decision variable. A possible solution is not that we can make by choosing the number of floors for a plot on a possible way, i.e. to the left, to the right, and to the top and bottom.\n\"\"\"\n"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == 10\nprint(stdin)\n\n\nimport sys"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '5'\n\nassert solution(stdin) == '10 6 8'\n"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == \"10 6 6\"\n\"\"\""
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"10 6 6\"\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= m_1 <= 10^9\n1 <= m_2 <= 10^9\n1 <= m_i \\leq m_j\n1 <= n <= 500\n0 <= a_i < 10^9\n0 <= a_j < 10^9\n\n------Code------\n\nimport math\n\nn, m = map(int, stdin.split())\n\na_i = math.log10(n) + 1\na_j = math.log10(m) + 1"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(input()), 'The input is not valid'\nassert solution('5'), 'The input is not valid'\nassert solution('3'), 'The input is not valid'\n"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(stdin) == str(10)\n\n-----Constraints-----\n\n1 <= stdin.length <= 500\n\n1 <= m_i <= 10^9\n\n1 <= stdin[i] <= 10^9\n\n===Submissions===\nIn this challenge, you have a huge plan of skyscrapers, the sum of which can be found in the following situations:\n\nPlan contains k >= 1 floor.\nPlan is not too big.\nPlan contains m_i floors.\nPlan contains m_i + 1 floors.\nPlan contains m_i + 2 floors.\nPlan contains m_i + 3 floors.\nPlan contains m_i + 4 floors.\nPlan contains m_i + 5 floors.\nPlan contains m_i + 6 floors.\nPlan contains m_i + 7 floors.\nPlan contains m_i + 8 floors.\nPlan contains m_i + 9 floors.\nPlan contains m_i + 10 floors.\nPlan contains m_i + 11 floors.\nPlan contains m_i + 12 floors.\nPlan contains m_i + 13 floors.\nPlan contains m_i + 14 floors.\nPlan contains m_i + 15 floors.\nPlan contains m_i + 16 floors.\nPlan contains m_i + 17 floors.\nPlan contains m_i + 18 floors.\nPlan contains m_i + 19 floors.\nPlan contains m_i + 20 floors.\nPlan contains m_i + 21 floors.\nPlan contains m_i + 22 floors.\nPlan contains m_i + 23 floors.\nPlan contains m_i + 24 floors.\nPlan contains m_i + 25 floors.\nPlan contains m_i + 26 floors.\nPlan contains m_i + 27 floors.\nPlan contains m_i + 28 floors.\nPlan contains m_i + 29 floors.\nPlan contains m_i + 30 floors.\nPlan contains m_i + 31 floors.\nPlan contains m_i + 32 floors.\nPlan contains m_i + 33 floors.\nPlan contains m_i + 34 floors.\nPlan contains m_i + 35 floors.\nPlan contains m_i + 36 floors.\nPlan contains m_i + 37 floors.\nPlan contains m_i + 38 floors.\nPlan contains m_i + 39 floors.\nPlan contains m_i + 40 floors.\nPlan contains m_i + 41 floors.\nPlan contains m_i + 42 floors.\nPlan contains m_i + 43 floors.\nPlan contains m_i + 44 floors.\nPlan contains m_i + 45 floors.\nPlan contains m_i + 46 floors.\nPlan contains m_i + 47 floors.\nPlan contains m_i + 48 floors.\nPlan contains m_i + 49 floors.\nPlan contains m_i + 50 floors.\nPlan contains m_i + 51 floors.\nPlan contains m_i + 52 floors.\nPlan contains m_i + 53 floors.\nPlan contains m_i + 54 floors.\nPlan contains m_i + 55 floors.\nPlan contains m_i + 56 floors.\nPlan contains m_i + 57 floors.\nPlan contains m_i + 58 floors.\nPlan contains m_i + 59 floors.\nPlan contains m_i + 60 floors.\nPlan contains m_i + 61 floors.\nPlan contains m_i + 62 floors.\nPlan contains m_i + 63 floors.\nPlan contains m_i + 64 floors.\nPlan contains m_i + 65 floors.\nPlan contains m_i + 66 floors.\nPlan contains m_i + 67 floors.\nPlan contains m_i + 68 floors.\nPlan contains m_i + 69 floors.\nPlan contains m_i + 70 floors.\nPlan contains m_i + 71 floors.\nPlan contains m_i + 72 floors.\nPlan contains m_i + 73 floors.\nPlan contains m_i + 74 floors.\nPlan contains m_i + 75 floors.\nPlan contains m_i + 76 floors.\nPlan contains m_i + 77 floors.\nPlan contains m_i + 78 floors.\nPlan contains m_i + 79 floors.\nPlan contains m_i + 80 floors.\nPlan contains m_i + 81 floors.\nPlan contains m_i + 82 floors.\nPlan contains m_i + 83 floors.\nPlan contains m_i + 84 floors.\nPlan contains m_i + 85 floors.\nPlan contains m_i + 86 floors.\nPlan contains m_i + 87 floors.\nPlan contains m_i + 88 floors.\nPlan contains m_i + 89 floors.\nPlan contains m_i + 90 floors.\nPlan contains m_i + 91 floors.\nPlan contains m_i + 92 floors.\nPlan contains m_i + 93 floors.\nPlan contains m_i + 94 floors.\nPlan contains m_i + 95 floors.\nPlan contains m_i + 96 floors.\nPlan contains m_i + 97 floors.\nPlan contains m_i + 98 floors.\nPlan contains m_i + 99 floors.\nPlan contains m_i + 100 floors.\nPlan contains m_i + 101 floors.\nPlan contains m_i + 102 floors.\nPlan contains m_i + 103 floors.\nPlan contains m_i + 104 floors.\nPlan contains m_i + 105 floors.\nPlan contains m_i + 106 floors.\nPlan contains m_i + 107 floors.\nPlan contains m_i + 108 floors.\nPlan contains m_i + 109 floors.\nPlan contains m_i + 110 floors.\nPlan contains m_i + 111 floors.\nPlan contains m_i + 112 floors.\nPlan contains m_i + 113 floors.\nPlan contains m_i + 114 floors.\nPlan contains m_i + 115 floors.\nPlan contains m_i + 116 floors.\nPlan contains m_i + 117 floors.\nPlan contains m_i + 118 floors.\nPlan contains m_i + 119 floors.\nPlan contains m_i + 120 floors.\nPlan contains m_i + 121 floors.\nPlan contains m_i + 122 floors.\nPlan"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution([\"1\", \"1\", \"2\", \"3\", \"1\"]) == \"1 2 2\"\nassert solution([\"2\", \"2\", \"3\", \"1\", \"1\"]) == \"1 2 2\"\nassert solution([\"1\", \"1\", \"1\", \"1\", \"1\"]) == \"1 2 2\"\nassert solution([\"1\", \"1\", \"2\", \"2\", \"2\"]) == \"3\"\nassert solution([\"1\", \"2\", \"3\", \"3\", \"3\"]) == \"3\"\n"
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == [\"1 2 3 2 1\"]\nassert solution(stdin) == [\"1 2 3 2 1\", \"6 6 6\"]\nassert solution(stdin) == [\"10 6 6\"]\nassert solution(stdin) == [\"10 6 6\", \"10 6 8\"]\nassert solution(stdin) == [\"10 6 6\", \"10 6 8\", \"10 6 6\"]\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3 5 1\", \"1 1 2\", \"2 2 3\", \"3 3 3\", \"4 1 1\", \"10 1 3\", \"3 3 3\", \"4 1 1\"]) == \"XXRR\"\nassert solution([\"1 1 2\", \"2 2 3\", \"3 3 3\", \"4 1 1\", \"10 1 3\", \"3 3 3\", \"4 1 1\"]) == \"XXRR\"\nassert solution([\"3 5 1\", \"1 1 2\", \"2 2 3\", \"3 3 3\", \"4 1 1\", \"10 1 3\", \"3 3 3\", \"4 1 1\"]) == \"XXLL\"\nassert solution([\"1 1 2\", \"2 2 3\", \"3 3 3\", \"4 1 1\", \"10 1 3\", \"3 3 3\", \"4 1 1\"]) == \"XLLL\"\nassert solution([\"3 5 1\", \"1 1 2\", \"2 2 3\", \"3 3 3\", \"4 1 1\", \"10 1 3\", \"3 3 3\", \"4 1 1\"]) == \"XXLL\"\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution('1 1 2') == 'L'\nassert solution('2 2 3') == 'R'\nassert solution('3 3 3') == 'X'\nassert solution('4 1 1') == 'L'\nassert solution('10 1 3') == 'R'\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution('1 1 3 1') == 'XXR'\nassert solution('2 2 3') == 'XXR'\nassert solution('3 3 3') == 'XXR'\nassert solution('4 1 1') == 'X'\nassert solution('10 1 3') == 'X'\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == \"LXR\"\nassert solution(stdin) == \"XR\"\nassert solution(stdin) == \"RX\"\nassert solution(stdin) == \"XX\"\nassert solution(stdin) == \"RX\"\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(stdin) == 'XXRR'\nassert solution(stdin) == 'RRRR'\nassert solution(stdin) == 'LRRR'\nassert solution(stdin) == 'XXRR'\nassert solution(stdin) == 'RLLL'\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution('11' in '11011')\nassert solution('1') == 'L'\nassert solution('4') == 'R'\nassert solution('1') == 'R'\nassert solution('2') == 'L'\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(inp) == \"LXR\"\nassert solution(inp) == \"XXR\"\nassert solution(inp) == \"LX\"\nassert solution(inp) == \"XX\"\nassert solution(inp) == \"L\"\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == \"XR\"\nassert solution(input) == \"XR\"\nassert solution(input) == \"R\"\nassert solution(input) == \"R\"\nassert solution(input) == \"XR\"\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(stdin) == \"XX\"\nassert solution(stdin) == \"RR\"\nassert solution(stdin) == \"XR\"\nassert solution(stdin) == \"RX\"\nassert solution(stdin) == \"XX\"\n"
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin) == 'XRR'\n\n\n\"\"\"\nExplanation\n----\nn, m, s, f = map(int, input().split())\nt = list(map(int, input().split()))"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"21\"\n"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 1,
        "answer": "assert solution(stdin) == \"21\"\n\"\"\""
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 2,
        "answer": "assert solution(stdin) == \"21\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 3,
        "answer": "assert solution(stdin) == '21'\n"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 4,
        "answer": "assert solution(\\\"\\\"\\\"\\\"input\\\")\\\")\nassert solution(\\\"\\\"\\\"\\\"output\\\")\\\")\nassert solution(\\\"\\\"\\\"\\\"error\\\")\\\")\nassert solution(\\\"\\\"\\\"\\\"input1\\\")\\\")\nassert solution(\\\"\\\"\\\"\\\"input2\\\")\\\")\n"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 5,
        "answer": "assert solution(stdin) == \"21\"\n\nInput\n2 4\nABCD\nABCE\n1 2 3 4\n\nOutput\n16\nInput\n3 3\nABC\nBCD\nCDE\n5 4 12\n\nOutput\n21\n\n'''\n\nfrom collections import Counter\n\nn, m = map(int, input().split())\ns = [input() for i in range(n)]\n\na = [set(map(int, input().split())) for i in range(m)]\na_count = dict(Counter(a).most_common())\nmax_score = 0\n\nfor i in a_count:\n    score = 0\n    for j in range(m):\n        score += a_count[i][j]\n    if score >= max_score:\n        max_score = score\n\nprint(max_score)"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 6,
        "answer": "assert solution(stdin) == 16\nassert solution(\"abcdef\") == 1\nassert solution(\"ABCDEF\") == 7\nassert solution(\"ABCDEFG\") == 2\nassert solution(\"aabb\") == 3\n"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 7,
        "answer": "assert solution(input) == '21'\n"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 8,
        "answer": "assert solution(\"ABCD\") == \"21\"\nassert solution(\"ABC\") == \"21\"\nassert solution(\"ABCE\") == \"21\"\nassert solution(\"BCD\") == \"21\"\nassert solution(\"CDE\") == \"21\"\n"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 9,
        "answer": "assert solution(stdin), \"solution() failed\"\n\nassert solution(stdin), \"solution() failed\"\n\nassert solution(stdin), \"solution() failed\"\n"
    }
]