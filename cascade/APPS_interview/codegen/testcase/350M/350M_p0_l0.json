[
    {
        "number": 0,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 4\nassert solution(stdin) == -1\nassert solution(stdin) == 4\nassert solution(stdin) == -1\n"
    },
    {
        "number": 1,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"499\"\nassert solution(stdin) == \"521\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"48\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 3,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 4,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 5,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 6,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 7,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 8,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 9,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 10,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == (0, 2)\nassert solution(stdin) == (0, 0)\nassert solution(stdin) == (0, 0)\nassert solution(stdin) == (0, 0)\nassert solution(stdin) == (0, 0)\n"
    },
    {
        "number": 11,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"51\"\n"
    },
    {
        "number": 12,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 13,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 14,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3 2 1 5 4'\n"
    },
    {
        "number": 15,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 16,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 17,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"10 5 3\") == \"3\"\nassert solution(\"10 5 7\") == \"5\"\nassert solution(\"10 5 12\") == \"3\"\nassert solution(\"10 5 12\") == \"5\"\nassert solution(\"10 5 12\") == \"5\"\n"
    },
    {
        "number": 18,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"abcdefghijklmnopqrstuvwxyz\"\n"
    },
    {
        "number": 19,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 20,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 11\nassert solution(stdin) == 1\n"
    },
    {
        "number": 21,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 22,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"TAK\"\nassert solution(stdin) == \"NIE\"\n"
    },
    {
        "number": 23,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9321'\n"
    },
    {
        "number": 24,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'YES'\nassert solution(stdin) == 'NO'\n"
    },
    {
        "number": 25,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 26,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"z^y^x\"\nassert solution(stdin) == \"(x^y)^z\"\nassert solution(stdin) == \"(x^y)^z\"\nassert solution(stdin) == \"x^y^z\"\nassert solution(stdin) == \"x^y^z\"\n"
    },
    {
        "number": 27,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\nInput\n7\nabcabca\n\nOutput\n5\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n8\nabcdefgh\n\nOutput\n8\n\nInput\n"
    },
    {
        "number": 28,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"move 1 3\"\nassert solution(stdin) == \"move 1 5\"\nassert solution(stdin) == \"move 2 extra 4\"\nassert solution(stdin) == \"move 99 3\"\nassert solution(stdin) == \"move 1 1\"\n"
    },
    {
        "number": 29,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 30,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 31,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"23 128\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 32,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 33,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 34,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 35,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 36,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-2 0'\nassert solution(stdin) == '3 2'\nassert solution(stdin) == '-2 0'\nassert solution(stdin) == '3 2'\nassert solution(stdin) == '-2 0'\n"
    },
    {
        "number": 37,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 38,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 39,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 5\nassert solution(stdin) == 0\n"
    },
    {
        "number": 40,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\nassert solution(stdin) == \"rated\"\n"
    },
    {
        "number": 41,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1 0 3 0 0 3 2 4\"\nassert solution(stdin) == \"0 1 2 3 4\"\nassert solution(stdin) == \"0 1 2 3 4\"\nassert solution(stdin) == \"0 1 2 3 4\"\nassert solution(stdin) == \"0 1 2 3 4\"\n"
    },
    {
        "number": 42,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 962\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= s.length <= 10^5\ns contains only characters '0' and '1'.\n\nTime Limit: 1 sec\nMemory Limit: 1M\n\n-----Tags-----\nBinary\n\n\"\"\""
    },
    {
        "number": 43,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"6 5\"\nassert solution(stdin) == \"6 5\"\nassert solution(stdin) == \"6 5\"\nassert solution(stdin) == \"6 5\"\n"
    },
    {
        "number": 44,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 45,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 46,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"31\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"88\"\nassert solution(stdin) == \"21\"\n"
    },
    {
        "number": 47,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 22\n\nassert solution(stdin) == 42\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 48,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 49,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\nInput\n1\n\nOutput\n1\n\nInput\n2\n\nOutput\n2\n\nInput\n3\n\nOutput\n3\n\nInput\n4\n\nOutput\n4\n\nInput\n5\n\nOutput\n5\n\nInput\n6\n\nOutput\n6\n\nInput\n7\n\nOutput\n7\n\nInput\n8\n\nOutput\n8\n\nInput\n9\n\nOutput\n9\n\nInput\n10\n\nOutput\n10\n\nInput\n11\n\nOutput\n11\n\nInput\n12\n\nOutput\n12\n\nInput\n13\n\nOutput\n13\n\nInput\n14\n\nOutput\n14\n\nInput\n15\n\nOutput\n15\n\nInput\n16\n\nOutput\n16\n\nInput\n17\n\nOutput\n17\n\nInput\n18\n\nOutput\n18\n\nInput\n19\n\nOutput\n19\n\nInput\n20\n\nOutput\n20\n\nInput\n21\n\nOutput\n21\n\nInput\n22\n\nOutput\n22\n\nInput\n23\n\nOutput\n23\n\nInput\n24\n\nOutput\n24\n\nInput\n25\n\nOutput\n25\n\nInput\n26\n\nOutput\n26\n\nInput\n27\n\nOutput\n27\n\nInput\n28\n\nOutput\n28\n\nInput\n29\n\nOutput\n29\n\nInput\n30\n\nOutput\n30\n\nInput\n31\n\nOutput\n31\n\nInput\n32\n\nOutput\n32\n\nInput\n33\n\nOutput\n33\n\nInput\n34\n\nOutput\n34\n\nInput\n35\n\nOutput\n35\n\nInput\n36\n\nOutput\n36\n\nInput\n37\n\nOutput\n37\n\nInput\n38\n\nOutput\n38\n\nInput\n39\n\nOutput\n39\n\nInput\n40\n\nOutput\n40\n\nInput\n41\n\nOutput\n41\n\nInput\n42\n\nOutput\n42\n\nInput\n43\n\nOutput\n43\n\nInput\n44\n\nOutput\n44\n\nInput\n45\n\nOutput\n45\n\nInput\n46\n\nOutput\n46\n\nInput\n47\n\nOutput\n47\n\nInput\n48\n\nOutput\n48\n\nInput\n49\n\nOutput\n49\n\nInput\n50\n\nOutput\n50\n\nInput\n51\n\nOutput\n51\n\nInput\n52\n\nOutput\n52\n\nInput\n53\n\nOutput\n53\n\nInput\n54\n\nOutput\n54\n\nInput\n55\n\nOutput\n55\n\nInput\n56\n\nOutput\n56\n\nInput\n57\n\nOutput\n57\n\nInput\n58\n\nOutput\n58\n\nInput\n59\n\nOutput\n59\n\nInput\n60\n\nOutput\n60\n\nInput\n61\n\nOutput\n61\n\nInput\n62\n\nOutput\n62\n\nInput\n63\n\nOutput\n63\n\nInput\n64\n\nOutput\n64\n\nInput\n65\n\nOutput\n65\n\nInput\n66\n\nOutput\n66\n\nInput\n67\n\nOutput\n67\n\nInput\n68\n\nOutput\n68\n\nInput\n69\n\nOutput\n69\n\nInput\n70\n\nOutput\n70\n\nInput\n71\n\nOutput\n71\n\nInput\n72\n\nOutput\n72\n\nInput\n73\n\nOutput\n73\n\nInput\n74\n\nOutput\n74\n\nInput\n75\n\nOutput\n75\n\nInput\n76\n\nOutput\n76\n\nInput\n77\n\nOutput\n77\n\nInput\n78\n\nOutput\n78\n\nInput\n79\n\nOutput\n79\n\nInput\n80\n\nOutput\n80\n\nInput\n81\n\nOutput\n81\n\nInput\n82\n\nOutput\n82\n\nInput\n83\n\nOutput\n83\n\nInput\n84\n\nOutput\n84\n\nInput\n85\n\nOutput\n85\n\nInput\n86\n\nOutput\n86\n\nInput\n87\n\nOutput\n87\n\nInput\n88\n\nOutput\n88\n\nInput\n89\n\nOutput\n89\n\nInput\n90\n\nOutput\n90\n\nInput\n91\n\nOutput\n91\n\nInput\n92\n\nOutput\n92\n\nInput\n93\n\nOutput\n93\n\nInput\n94\n\nOutput\n94\n\nInput\n95\n\nOutput\n95\n\nInput\n96\n\nOutput\n96\n\nInput\n97\n\nOutput\n97\n\nInput\n98\n\nOutput\n98\n\nInput\n99\n\nOutput\n99\n\nInput\n100\n\nOutput\n100\n\nInput\n101\n\nOutput\n101\n\nInput\n102\n\nOutput\n102\n\nInput\n103\n\nOutput\n103\n\nInput\n104\n\nOutput\n104\n\nInput\n105\n\nOutput\n105\n\nInput\n106\n\nOutput\n106\n\nInput\n107\n\nOutput\n107\n\nInput\n108\n\nOutput\n108\n\nInput\n109\n\nOutput\n109\n\nInput\n110\n\nOutput\n110\n\nInput\n111\n\nOutput\n111\n\nInput\n112\n\nOutput\n112\n\nInput\n113\n\nOutput\n113\n\nInput\n114\n\nOutput\n114\n\nInput\n115\n\nOutput\n115\n\nInput\n116\n\nOutput\n116\n\nInput\n117\n\nOutput\n117\n\nInput\n118\n\nOutput\n118\n\nInput\n119\n\nOutput\n119\n\nInput\n120\n\nOutput\n120\n\nInput\n121\n\nOutput\n121\n\nInput\n122\n\nOutput\n122\n\nInput\n123\n\nOutput\n123\n\nInput\n124\n\nOutput\n124\n\nInput\n125\n\nOutput\n125\n\nInput\n126\n\nOutput\n126\n\nInput\n127\n\nOutput\n127\n\nInput\n128\n\nOutput\n128\n\nInput\n129\n\nOutput\n129\n\nInput\n130\n\nOutput\n130\n\nInput\n131\n\nOutput\n131\n\nInput\n132\n\nOutput\n132\n\nInput\n133\n\nOutput\n133\n\nInput\n134\n\nOutput\n134\n\nInput\n135\n\nOutput\n135\n\nInput\n136\n\nOutput\n136\n\nInput\n137\n\nOutput\n137\n\nInput\n138\n\nOutput\n138\n\nInput\n139\n\nOutput\n139\n\nInput\n140\n\nOutput\n140\n\nInput\n141\n\nOutput\n141\n\nInput\n142\n\nOutput\n142\n\nInput\n143\n\nOutput\n143\n\nInput\n144\n\nOutput\n144\n\nInput\n145\n\nOutput\n145\n\nInput\n146\n\nOutput\n146\n\nInput\n147\n\nOutput\n147\n\nInput\n148\n\nOutput\n148\n\nInput\n149\n\nOutput\n149\n\nInput\n150\n\nOutput\n150\n\nInput\n151\n\nOutput\n151\n\nInput\n152\n\nOutput\n152\n\nInput\n153\n\nOutput\n153\n\nInput\n154\n\nOutput\n154\n\nInput\n155\n\nOutput\n155\n\nInput\n156\n\nOutput\n156\n\nInput\n157\n\nOutput\n157\n\nInput\n158\n\nOutput\n158\n\nInput\n159\n\nOutput\n159\n\nInput\n160\n\nOutput\n160\n\nInput\n161\n\nOutput\n161\n\nInput\n162\n\nOutput\n162\n\nInput\n163\n\nOutput\n163\n\nInput\n164\n\nOutput\n164\n\nInput\n165\n\nOutput\n165\n\nInput\n166\n\nOutput\n166\n\nInput\n167\n\nOutput\n167\n\nInput\n168\n\nOutput\n168\n\nInput\n169\n\nOutput\n169\n\nInput\n170\n\nOutput\n170\n\nInput\n171\n\nOutput\n171\n\nInput\n172\n\nOutput\n172\n\nInput\n173\n\nOutput\n173\n\nInput\n174\n\nOutput\n174\n\nInput\n175\n\nOutput\n175\n\nInput\n176\n\nOutput\n176\n\nInput\n177\n\nOutput\n177\n\nInput\n178\n\nOutput\n178\n\nInput\n179\n\nOutput\n179\n\nInput\n180\n\nOutput\n180\n\nInput\n181\n\nOutput\n181\n\nInput\n182\n\nOutput\n182\n\nInput\n183\n\nOutput\n183\n\nInput\n184\n\nOutput"
    },
    {
        "number": 50,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 26\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= s_i <= 1000\n1 <= b_i <= 1000\n\nTime Limit: 1 sec\n\nSample Input\n\n3 4 11\n4 2 5\n4 4 5 4\n\nSample Output\n\n26\n\nExplanation\n\nIn the first example, you have $11$ bourles in the morning. It's optimal to buy $5$ shares of a stock at the price of $2$ bourles in the morning, and then to sell all of them at the price of $5$ bourles in the evening. It's easy to verify that you'll have $26$ bourles after the evening.\n\nIn the second example, it's optimal not to take any action.\n\n\"\"\""
    },
    {
        "number": 51,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u0435"
    },
    {
        "number": 52,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 53,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 54,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 55,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 56,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 57,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 58,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 59,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 60,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 61,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '<'\nassert solution(stdin) == '>'\nassert solution(stdin) == '='\nassert solution(stdin) == '='\nassert solution(stdin) == '='\n"
    },
    {
        "number": 62,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"BitLGM\"\nassert solution(stdin) == \"BitAryo\"\nassert solution(stdin) == \"BitLGM\"\nassert solution(stdin) == \"BitAryo\"\nassert solution(stdin) == \"BitLGM\"\n"
    },
    {
        "number": 63,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 64,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 65,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 66,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3/10\"\nassert solution(stdin) == \"3/7\"\nassert solution(stdin) == \"3/6\"\nassert solution(stdin) == \"3/5\"\nassert solution(stdin) == \"3/4\"\n"
    },
    {
        "number": 67,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"?\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"?\"\nassert solution(stdin) == \"?\"\nassert solution(stdin) == \"?\"\n"
    },
    {
        "number": 68,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"-\"\n"
    },
    {
        "number": 69,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 70,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 71,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2 3\"\nassert solution(stdin) == \"2 1 1\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 1 1\"\n"
    },
    {
        "number": 72,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Kuro\"\nassert solution(stdin) == \"Katie\"\nassert solution(stdin) == \"Draw\"\n"
    },
    {
        "number": 73,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 74,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(27) == 3\nassert solution(11) == 5\nassert solution(11) == 11\nassert solution(11) == 11\nassert solution(11) == 11\n"
    },
    {
        "number": 75,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 76,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 77,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n1 <= n <= 10^5\n-10^4 <= a_i <= 10^4\n\nTime Limit: 1 sec\n\nSample Input\n\n3\n-2 2 -3 1\n\nSample Output\n\n3\n\nExplanation\n\nThe subsequence with sum odd is 3.\n\n\"\"\""
    },
    {
        "number": 78,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 3\") == \"6\"\nassert solution(\"4 10\") == \"10\"\nassert solution(\"5 3\") == \"10\"\nassert solution(\"5 3\") == \"10\"\nassert solution(\"5 3\") == \"10\"\n"
    },
    {
        "number": 79,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 80,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 81,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 82,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nInput\n2 10\n8 9\n\nOutput\n4\nInput\n3 5\n4 4 4\n\nOutput\n3\n\n\n-----Note-----\n\nConsider the second example testcase.\n\nMaximal mark is 10, Noora received two marks\u00a0\u2014 8 and 9, so current final mark is 9. To fix it, Leha can add marks [10, 10, 10, 10] (4 marks in total) to the registry, achieving Noora having average mark equal to $\\frac{8 + 9 + 10 + 10 + 10 + 10}{6} = \\frac{57}{6} = 9.5$. Consequently, new final mark is 10. Less number of marks won't fix the situation.\n\nIn the third example Leha can add [5, 5, 5] to the registry, so that making average mark equal to 4.5, which is enough to have 5 in the certificate.\n"
    },
    {
        "number": 83,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 84,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 85,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 86,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Polycarp\"\nassert solution(stdin) == \"Vasiliy\"\n\n\"\"\""
    },
    {
        "number": 87,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n0 <= m <= 12\n\n0 <= d <= 7\n\n-----Time Limit-----\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\nExample 1:\n\nInput\n1 7\n\nOutput\n6\n\nExplanation\n\nThe table should have 6 columns, each with 7 rows.\n\nExample 2:\n\nInput\n1 1\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 3:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 4:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 5:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 6:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 7:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 8:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 9:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 10:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 11:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 12:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 13:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 14:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 15:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 16:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 17:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 18:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 19:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 20:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 21:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 22:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 23:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 24:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 25:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 26:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 27:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 28:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 29:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 30:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 31:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 32:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 33:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 34:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 35:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 36:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 37:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 38:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 39:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 40:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 41:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows.\n\nExample 42:\n\nInput\n11 6\n\nOutput\n5\n\nExplanation\n\nThe table should have 5 columns, each with 5 rows."
    },
    {
        "number": 88,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n\n1 \u2264 a \u2264 b \u2264 10^18\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 GB\n\n-----Alternatives\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the years.\n4. Use a for loop to count the years.\n5. Use a while loop to count the years.\n\n-----Bug Fixes-----\n\n1. Use a stack to store the years.\n2. Use a queue to store the years.\n3. Use a dictionary to store the"
    },
    {
        "number": 89,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n-----Constraints-----\n0 <= N <= 100\n\n-----Time Limit: 1.0s</time>\n\n-----Space Limit: 1GB</space>\n\n-----Alternatives-----"
    },
    {
        "number": 90,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 91,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= T <= 10^4\n1 <= n <= 10^16\n1 <= k <= 10^16\n\n\"\"\""
    },
    {
        "number": 92,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 20\n\n-----Constraints-----\n\n1 \u2264 a, b, c \u2264 100\n\n1 \u2264 stdin.length \u2264 100\n\nstdin.length is a multiple of 3.\n\nstdin contains only digits.\n\n\"\"\""
    },
    {
        "number": 93,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSubmissions are marked in bold italic.\n\n\"\"\""
    },
    {
        "number": 94,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '475'\nassert solution(stdin) == '3789'\nassert solution(stdin) == '594'\nassert solution(stdin) == '12'\nassert solution(stdin) == '16'\n"
    },
    {
        "number": 95,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 96,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '6'\nassert solution(stdin) == '31248'\n"
    },
    {
        "number": 97,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 98,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 1000\n1 <= stdin[i] <= 1000\nstdin[i]!= stdin[i+1]\nstdin[i]!= stdin[i+2]\nstdin[i]!= stdin[i+3]\nstdin[i]!= stdin[i+4]\nstdin[i]!= stdin[i+5]\nstdin[i]!= stdin[i+6]\nstdin[i]!= stdin[i+7]\nstdin[i]!= stdin[i+8]\nstdin[i]!= stdin[i+9]\nstdin[i]!= stdin[i+10]\nstdin[i]!= stdin[i+11]\nstdin[i]!= stdin[i+12]\nstdin[i]!= stdin[i+13]\nstdin[i]!= stdin[i+14]\nstdin[i]!= stdin[i+15]\nstdin[i]!= stdin[i+16]\nstdin[i]!= stdin[i+17]\nstdin[i]!= stdin[i+18]\nstdin[i]!= stdin[i+19]\nstdin[i]!= stdin[i+20]\nstdin[i]!= stdin[i+21]\nstdin[i]!= stdin[i+22]\nstdin[i]!= stdin[i+23]\nstdin[i]!= stdin[i+24]\nstdin[i]!= stdin[i+25]\nstdin[i]!= stdin[i+26]\nstdin[i]!= stdin[i+27]\nstdin[i]!= stdin[i+28]\nstdin[i]!= stdin[i+29]\nstdin[i]!= stdin[i+30]\nstdin[i]!= stdin[i+31]\nstdin[i]!= stdin[i+32]\nstdin[i]!= stdin[i+33]\nstdin[i]!= stdin[i+34]\nstdin[i]!= stdin[i+35]\nstdin[i]!= stdin[i+36]\nstdin[i]!= stdin[i+37]\nstdin[i]!= stdin[i+38]\nstdin[i]!= stdin[i+39]\nstdin[i]!= stdin[i+40]\nstdin[i]!= stdin[i+41]\nstdin[i]!= stdin[i+42]\nstdin[i]!= stdin[i+43]\nstdin[i]!= stdin[i+44]\nstdin[i]!= stdin[i+45]\nstdin[i]!= stdin[i+46]\nstdin[i]!= stdin[i+47]\nstdin[i]!= stdin[i+48]\nstdin[i]!= stdin[i+49]\nstdin[i]!= stdin[i+50]\nstdin[i]!= stdin[i+51]\nstdin[i]!= stdin[i+52]\nstdin[i]!= stdin[i+53]\nstdin[i]!= stdin[i+54]\nstdin[i]!= stdin[i+55]\nstdin[i]!= stdin[i+56]\nstdin[i]!= stdin[i+57]\nstdin[i]!= stdin[i+58]\nstdin[i]!= stdin[i+59]\nstdin[i]!= stdin[i+60]\nstdin[i]!= stdin[i+61]\nstdin[i]!= stdin[i+62]\nstdin[i]!= stdin[i+63]\nstdin[i]!= stdin[i+64]\nstdin[i]!= stdin[i+65]\nstdin[i]!= stdin[i+66]\nstdin[i]!= stdin[i+67]\nstdin[i]!= stdin[i+68]\nstdin[i]!= stdin[i+69]\nstdin[i]!= stdin[i+70]\nstdin[i]!= stdin[i+71]\nstdin[i]!= stdin[i+72]\nstdin[i]!= stdin[i+73]\nstdin[i]!= stdin[i+74]\nstdin[i]!= stdin[i+75]\nstdin[i]!= stdin[i+76]\nstdin[i]!= stdin[i+77]\nstdin[i]!= stdin[i+78]\nstdin[i]!= stdin[i+79]\nstdin[i]!= stdin[i+80]\nstdin[i]!= stdin[i+81]\nstdin[i]!= stdin[i+82]\nstdin[i]!= stdin[i+83]\nstdin[i]!= stdin[i+84]\nstdin[i]!= stdin[i+85]\nstdin[i]!= stdin[i+86]\nstdin[i]!= stdin[i+87]\nstdin[i]!= stdin[i+88]\nstdin[i]!= stdin[i+89]\nstdin[i]!= stdin[i+90]\nstdin[i]!= stdin[i+91]\nstdin[i]!= stdin[i+92]\nstdin[i]!= stdin[i+93]\nstdin[i]!= stdin[i+94]\nstdin[i]!= stdin[i+95]\nstdin[i]!= stdin[i+96]\nstdin[i]!= stdin[i+97]\nstdin[i]!= stdin[i+98]\nstdin[i]!= stdin[i+99]\nstdin[i]!= stdin[i+100]\nstdin[i]!= stdin[i+101]\nstdin[i]!= stdin[i+102]\nstdin[i]!= stdin[i+103]\nstdin[i]!= stdin[i+104]\nstdin[i]!= stdin[i+105]\nstdin[i]!= stdin[i+106]\nstdin[i]!= stdin[i+107]\nstdin[i]!= stdin[i+108]\nstdin[i]!= stdin[i+109]\nstdin[i]!= stdin[i+110]\nstdin[i]!= stdin[i+111]\nstdin[i]!= stdin["
    },
    {
        "number": 99,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"inf\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\nassert solution(stdin) == \"..w..\"\n"
    },
    {
        "number": 101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ninety-nine\"\nassert solution(stdin) == \"twenty\"\nassert solution(stdin) == \"twenty-twenty\"\nassert solution(stdin) == \"twenty-twenty-twenty\"\nassert solution(stdin) == \"twenty-twenty-twenty-twenty\"\n"
    },
    {
        "number": 103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u0434"
    },
    {
        "number": 107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\n"
    },
    {
        "number": 108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aacceeggiikkmmooqqssuuwwyy\") == \"abcdefghijklmnopqrstuvwxyz\"\nassert solution(\"thereisnoanswer\") == \"-1\"\n"
    },
    {
        "number": 109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2.0000000000\"\nassert solution(stdin) == \"32.8333333333\"\nassert solution(stdin) == \"2.0000000000\"\nassert solution(stdin) == \"2.0000000000\"\nassert solution(stdin) == \"2.0000000000\"\n"
    },
    {
        "number": 110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '87'\nassert solution(stdin) == '98'\nassert solution(stdin) == '98'\nassert solution(stdin) == '98'\nassert solution(stdin) == '98'\n"
    },
    {
        "number": 113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '30000'\nassert solution(stdin) == '10000'\nassert solution(stdin) == '38101'\nassert solution(stdin) == '123456789'\nassert solution(stdin) == '12345678900000000'\n"
    },
    {
        "number": 114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.300000000000 0.550000000000 0.285714285714'\nassert solution(stdin) == '0.057142857143 0.657142857143 0.285714285714'\nassert solution(stdin) == '0.300000000000 0.300000000000 0.300000000000'\nassert solution(stdin) == '0.300000000000 0.300000000000 0.300000000000'\nassert solution(stdin) == '0.300000000000 0.300000000000 0.300000000000'\n"
    },
    {
        "number": 116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"50\"\nassert solution(stdin) == \"75\"\nassert solution(stdin) == \"100\"\nassert solution(stdin) == \"200\"\n"
    },
    {
        "number": 117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1 -1\n"
    },
    {
        "number": 120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AGACGTCT\"\nassert solution(stdin) == \"AGACGTCT\"\n"
    },
    {
        "number": 121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= x, y, z <= 10^5\n1 <= a, b, c <= 10^5\n\n-----Time Limit-----\n1 second\n\n-----Memory Limit-----\n256 MB\n\n-----Solutions-----\n\nclass Solution:\n    def solution(self, stdin: str) -> str:\n        pass\n\nassert Solution().solution(stdin) == \"YES\"\n"
    },
    {
        "number": 125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\n\"\"\""
    },
    {
        "number": 129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\"\"\""
    },
    {
        "number": 132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 360\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '144'\nassert solution(stdin) == '2244'\nassert solution(stdin) == '2244'\nassert solution(stdin) == '2244'\n"
    },
    {
        "number": 135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\"\"\""
    },
    {
        "number": 136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"=\"\nassert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\n"
    },
    {
        "number": 137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^4\n-10^9 <= stdin[i] <= 10^9\n-1 <= c_{i} <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nApproach:\n\nTime: O(n)\nSpace: O(n)\n\n\"\"\""
    },
    {
        "number": 138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= n <= 100000\n1 <= m <= min(n(n - 1), 100000)\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Space Limit Exceeded-----\nTime Limit: 1 second\n\n-----Alternatives-----"
    },
    {
        "number": 140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"281\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '150'\nassert solution(stdin) == '150'\nassert solution(stdin) == '150'\nassert solution(stdin) == '150'\nassert solution(stdin) == '150'\n"
    },
    {
        "number": 143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= a_i <= 9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nApproach:\n\nUse a stack to keep track of the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the digits of the ticket.\n\nThe stack is a stack of integers, which are the sums of the"
    },
    {
        "number": 145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"CHAT WITH HER!\"\nassert solution(stdin) == \"IGNORE HIM!\"\n"
    },
    {
        "number": 146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n\"\"\""
    },
    {
        "number": 148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"hellno\") == \"hell no\"\nassert solution(\"abacaba\") == \"abacaba\"\nassert solution(\"asdfasdf\") == \"asdfasdf\"\nassert solution(\"asdfasdfasdf\") == \"asdfasdfasdf\"\nassert solution(\"asdfasdfasdfasdf\") == \"asdfasdfasdfasdf\"\n"
    },
    {
        "number": 152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\n\nassert solution(stdin) == \"200\"\n\nassert solution(stdin) == \"200\"\n\nassert solution(stdin) == \"200\"\n\nassert solution(stdin) == \"200\""
    },
    {
        "number": 153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == 1\nassert solution(3) == 0\nassert solution(2) == 1\nassert solution(1) == 1\nassert solution(0) == 1\n"
    },
    {
        "number": 155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 5\n"
    },
    {
        "number": 160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 7\n"
    },
    {
        "number": 161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\""
    },
    {
        "number": 163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4.3750000000\"\nassert solution(stdin) == \"11.3333333333\"\nassert solution(stdin) == \"3.3333333333\"\nassert solution(stdin) == \"2.3333333333\"\nassert solution(stdin) == \"1.3333333333\"\n"
    },
    {
        "number": 165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-', 'incorrect'\nassert solution(stdin) == '-', 'incorrect'\nassert solution(stdin) == '-', 'incorrect'\nassert solution(stdin) == '-', 'incorrect'\nassert solution(stdin) == '-', 'incorrect'\n"
    },
    {
        "number": 168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 0\nassert solution(4) == 4\nassert solution(2) == 1\nassert solution(5) == 3\n"
    },
    {
        "number": 169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Correct\"\n"
    },
    {
        "number": 172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"7 12\"\nassert solution(stdin) == \"7 12\"\nassert solution(stdin) == \"7 12\"\nassert solution(stdin) == \"7 12\"\n"
    },
    {
        "number": 176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\nInput\n1\n\nOutput\n1\n\nInput\n2\n\nOutput\n2\n\nInput\n3\n\nOutput\n3\n\nInput\n4\n\nOutput\n4\n\nInput\n5\n\nOutput\n5\n\nInput\n6\n\nOutput\n6\n\nInput\n7\n\nOutput\n7\n\nInput\n8\n\nOutput\n8\n\nInput\n9\n\nOutput\n9\n\nInput\n10\n\nOutput\n10\n\nInput\n11\n\nOutput\n11\n\nInput\n12\n\nOutput\n12\n\nInput\n13\n\nOutput\n13\n\nInput\n14\n\nOutput\n14\n\nInput\n15\n\nOutput\n15\n\nInput\n16\n\nOutput\n16\n\nInput\n17\n\nOutput\n17\n\nInput\n18\n\nOutput\n18\n\nInput\n19\n\nOutput\n19\n\nInput\n20\n\nOutput\n20\n\nInput\n21\n\nOutput\n21\n\nInput\n22\n\nOutput\n22\n\nInput\n23\n\nOutput\n23\n\nInput\n24\n\nOutput\n24\n\nInput\n25\n\nOutput\n25\n\nInput\n26\n\nOutput\n26\n\nInput\n27\n\nOutput\n27\n\nInput\n28\n\nOutput\n28\n\nInput\n29\n\nOutput\n29\n\nInput\n30\n\nOutput\n30\n\nInput\n31\n\nOutput\n31\n\nInput\n32\n\nOutput\n32\n\nInput\n33\n\nOutput\n33\n\nInput\n34\n\nOutput\n34\n\nInput\n35\n\nOutput\n35\n\nInput\n36\n\nOutput\n36\n\nInput\n37\n\nOutput\n37\n\nInput\n38\n\nOutput\n38\n\nInput\n39\n\nOutput\n39\n\nInput\n40\n\nOutput\n40\n\nInput\n41\n\nOutput\n41\n\nInput\n42\n\nOutput\n42\n\nInput\n43\n\nOutput\n43\n\nInput\n44\n\nOutput\n44\n\nInput\n45\n\nOutput\n45\n\nInput\n46\n\nOutput\n46\n\nInput\n47\n\nOutput\n47\n\nInput\n48\n\nOutput\n48\n\nInput\n49\n\nOutput\n49\n\nInput\n50\n\nOutput\n50\n\nInput\n51\n\nOutput\n51\n\nInput\n52\n\nOutput\n52\n\nInput\n53\n\nOutput\n53\n\nInput\n54\n\nOutput\n54\n\nInput\n55\n\nOutput\n55\n\nInput\n56\n\nOutput\n56\n\nInput\n57\n\nOutput\n57\n\nInput\n58\n\nOutput\n58\n\nInput\n59\n\nOutput\n59\n\nInput\n60\n\nOutput\n60\n\nInput\n61\n\nOutput\n61\n\nInput\n62\n\nOutput\n62\n\nInput\n63\n\nOutput\n63\n\nInput\n64\n\nOutput\n64\n\nInput\n65\n\nOutput\n65\n\nInput\n66\n\nOutput\n66\n\nInput\n67\n\nOutput\n67\n\nInput\n68\n\nOutput\n68\n\nInput\n69\n\nOutput\n69\n\nInput\n70\n\nOutput\n70\n\nInput\n71\n\nOutput\n71\n\nInput\n72\n\nOutput\n72\n\nInput\n73\n\nOutput\n73\n\nInput\n74\n\nOutput\n74\n\nInput\n75\n\nOutput\n75\n\nInput\n76\n\nOutput\n76\n\nInput\n77\n\nOutput\n77\n\nInput\n78\n\nOutput\n78\n\nInput\n79\n\nOutput\n79\n\nInput\n80\n\nOutput\n80\n\nInput\n81\n\nOutput\n81\n\nInput\n82\n\nOutput\n82\n\nInput\n83\n\nOutput\n83\n\nInput\n84\n\nOutput\n84\n\nInput\n85\n\nOutput\n85\n\nInput\n86\n\nOutput\n86\n\nInput\n87\n\nOutput\n87\n\nInput\n88\n\nOutput\n88\n\nInput\n89\n\nOutput\n89\n\nInput\n90\n\nOutput\n90\n\nInput\n91\n\nOutput\n91\n\nInput\n92\n\nOutput\n92\n\nInput\n93\n\nOutput\n93\n\nInput\n94\n\nOutput\n94\n\nInput\n95\n\nOutput\n95\n\nInput\n96\n\nOutput\n96\n\nInput\n97\n\nOutput\n97\n\nInput\n98\n\nOutput\n98\n\nInput\n99\n\nOutput\n99\n\nInput\n100\n\nOutput\n100\n\nInput\n101\n\nOutput\n101\n\nInput\n102\n\nOutput\n102\n\nInput\n103\n\nOutput\n103\n\nInput\n104\n\nOutput\n104\n\nInput\n105\n\nOutput\n105\n\nInput\n106\n\nOutput\n106\n\nInput\n107\n\nOutput\n107\n\nInput\n108\n\nOutput\n108\n\nInput\n109\n\nOutput\n109\n\nInput\n110\n\nOutput\n110\n\nInput\n111\n\nOutput\n111\n\nInput\n112\n\nOutput\n112\n\nInput\n113\n\nOutput\n113\n\nInput\n114\n\nOutput\n114\n\nInput\n115\n\nOutput\n115\n\nInput\n116\n\nOutput\n116\n\nInput\n117\n\nOutput\n117\n\nInput\n118\n\nOutput\n118\n\nInput\n119\n\nOutput\n119\n\nInput\n120\n\nOutput\n120\n\nInput\n121\n\nOutput\n121\n\nInput\n122\n\nOutput\n122\n\nInput\n123\n\nOutput\n123\n\nInput\n124\n\nOutput\n124\n\nInput\n125\n\nOutput\n125\n\nInput\n126\n\nOutput\n126\n\nInput\n127\n\nOutput\n127\n\nInput\n128\n\nOutput\n128\n\nInput\n129\n\nOutput\n129\n\nInput\n130\n\nOutput\n130\n\nInput\n131\n\nOutput\n131\n\nInput\n132\n\nOutput\n132\n\nInput\n133\n\nOutput\n133\n\nInput\n134\n\nOutput\n134\n\nInput\n135\n\nOutput\n135\n\nInput\n136\n\nOutput\n136\n\nInput\n137\n\nOutput\n137\n\nInput\n138\n\nOutput\n138\n\nInput\n139\n\nOutput\n139\n\nInput\n140\n\nOutput\n140\n\nInput\n141\n\nOutput\n141\n\nInput\n142\n\nOutput\n142\n\nInput\n143\n\nOutput\n143\n\nInput\n144\n\nOutput\n144\n\nInput\n145\n\nOutput\n145\n\nInput\n146\n\nOutput\n146\n\nInput\n147\n\nOutput\n147\n\nInput\n148\n\nOutput\n148\n\nInput\n149\n\nOutput\n149\n\nInput\n150\n\nOutput\n150\n\nInput\n151\n\nOutput\n151\n\nInput\n152\n\nOutput\n152\n\nInput\n153\n\nOutput\n153\n\nInput\n154\n\nOutput\n154\n\nInput\n155\n\nOutput\n155\n\nInput\n156\n\nOutput\n156\n\nInput\n157\n\nOutput\n157\n\nInput\n158\n\nOutput\n158\n\nInput\n159\n\nOutput\n159\n\nInput\n160\n\nOutput\n160\n\nInput\n161\n\nOutput\n161\n\nInput\n162\n\nOutput\n162\n\nInput\n163\n\nOutput\n163\n\nInput\n164\n\nOutput\n164\n\nInput\n165\n\nOutput\n165\n\nInput\n166\n\nOutput\n166\n\nInput\n167\n\nOutput\n167\n\nInput\n168\n\nOutput\n168\n\nInput\n169\n\nOutput\n169\n\nInput\n170\n\nOutput\n170\n\nInput\n171\n\nOutput\n171\n\nInput\n172\n\nOutput\n172\n\nInput\n173\n\nOutput\n173\n\nInput\n174\n\nOutput\n174\n\nInput\n175\n\nOutput\n175\n\nInput\n176\n\nOutput\n176\n\nInput\n177\n\nOutput\n177\n\nInput\n178\n\nOutput\n178\n\nInput\n179\n\nOutput\n179\n\nInput\n180\n\nOutput\n180\n\nInput\n181\n\nOutput\n181\n\nInput\n182\n\nOutput\n182\n\nInput\n183\n\nOutput\n183\n\nInput\n184\n\nOutput\n184\n"
    },
    {
        "number": 178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"824071958\"\n\n\"\"\""
    },
    {
        "number": 180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"happynewyear\"\nassert solution(stdin) == \"aa\"\nassert solution(stdin) == \"ababb\"\nassert solution(stdin) == \"ab\"\nassert solution(stdin) == \"ababb\"\n"
    },
    {
        "number": 181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(60) == 1\nassert solution(60) == 3\nassert solution(60) == 3\nassert solution(60) == 3\nassert solution(60) == 3\n"
    },
    {
        "number": 182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '45'\nassert solution(stdin) == '590'\nassert solution(stdin) == '4'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\n"
    },
    {
        "number": 184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"13\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\nassert solution(stdin) == '8'\nassert solution(stdin) == '10'\nassert solution(stdin) == '9'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"2 0\"\n"
    },
    {
        "number": 190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.5000000000\"\n\nassert solution(stdin) == \"0.2000000000\"\n\nassert solution(stdin) == \"0.5\"\n\nassert solution(stdin) == \"0.5\"\n\nassert solution(stdin) == \"0.5\""
    },
    {
        "number": 194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 1\") == \"0\"\nassert solution(\"1 1 1 1\") == \"1\"\nassert solution(\"1 1 1 2\") == \"2\"\nassert solution(\"1 1 1 3\") == \"3\"\nassert solution(\"1 1 1 4\") == \"4\"\n"
    },
    {
        "number": 195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 21\nassert solution(stdin) == 7\nassert solution(stdin) == 21\nassert solution(stdin) == 7\n"
    },
    {
        "number": 197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 16\n\n\"\"\""
    },
    {
        "number": 202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'D'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'D'\nassert solution(stdin) == 'R'\nassert solution(stdin) == 'D'\n"
    },
    {
        "number": 204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000000063\"\n\nassert solution(stdin) == \"1000000063\"\n\nassert solution(stdin) == \"1000000063\"\n\nassert solution(stdin) == \"1000000063\"\n\nassert solution(stdin) == \"1000000063\""
    },
    {
        "number": 205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '500000001500000001'\nassert solution(stdin) == '101'\nassert solution(stdin) == '10'\nassert solution(stdin) == '19'\n"
    },
    {
        "number": 207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1 0 1 1'\nassert solution(stdin) == '0 1 1 0'\nassert solution(stdin) == '0 1 1 1'\nassert solution(stdin) == '0 1 1 2'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000000006\"\n\n-----Constraints-----\n\n1 <= x, y <= 10^9\n\n1 <= n <= 2\u00b710^9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Space Limit-----\n\nO(1)\n\n\n-----Submissions-----\n\nSample Execution\n$ python3 solution.py\n2 3\n3\n\n$ python3 solution.py\n0 -1\n2\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006\n\n$ python3 solution.py\n1000000006"
    },
    {
        "number": 210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '6'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 120\n"
    },
    {
        "number": 217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"6 9 2 4\") == 4\nassert solution(\"6 10 2 4\") == 2\nassert solution(\"6 5 4 3\") == -1\n"
    },
    {
        "number": 218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n-----Constraints-----\n1 <= s, x <= 10^12\n\n-----Time Limit-----\n1 sec\n\n-----Divide and Conquer-----\nTime Limit: 1 sec\n\n-----Bitwise XOR-----\nTime Limit: 1 sec\n\n-----Space Complexity-----\nO(1)\n\n-----Efficiency-----\nO(n)\n\n-----Can you solve it without using extra space?\nYes\n\n-----Constraints not checked.\n"
    },
    {
        "number": 221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"120\"\n\n\"\"\""
    },
    {
        "number": 224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nInput\nABABBBACFEYUKOTT\n\nOutput\n1\n"
    },
    {
        "number": 225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"653\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"41\"\nassert solution(stdin) == \"653\"\nassert solution(stdin) == \"651\"\n"
    },
    {
        "number": 227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_1, a_2,..., a_{n} <= 10^9\n1 <= b_1, b_2,..., b_{m} <= 10^9\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n"
    },
    {
        "number": 228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Alice\"\nassert solution(stdin) == \"Bob\"\n\nassert solution(stdin) == \"Alice\"\nassert solution(stdin) == \"Bob\"\n\nassert solution(stdin) == \"Alice\"\n"
    },
    {
        "number": 229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 2\nassert solution(5) == 0\nassert solution(5) == 0\nassert solution(5) == 0\nassert solution(5) == 0\n"
    },
    {
        "number": 231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Chris\"\nassert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Friendship is magic!^^\"\nassert solution(stdin) == \"Friendship is magic!^^\"\n"
    },
    {
        "number": 234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n\"\"\""
    },
    {
        "number": 236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '30021'\n"
    },
    {
        "number": 241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Correct\"\nassert solution(stdin) == \"Incorrect\"\n\n\"\"\""
    },
    {
        "number": 242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(2) == 1\nassert solution(3) == 2\nassert solution(4) == 4\nassert solution(5) == 120\n"
    },
    {
        "number": 243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\n"
    },
    {
        "number": 244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1, 2) == 0\nassert solution(1, 1) == 1\nassert solution(1, 0) == 0\nassert solution(1, 2) == 1\nassert solution(1, 3) == 2\n"
    },
    {
        "number": 245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= x_i, y_i < 10^9\n\n------Time complexity-----\n\nO(n)\n\nO(n)\n\n------Space complexity-----\n\nO(n)\n\n------Algorithm-----\n\n1. Create a set of all points.\n2. For each point, check if it is on any of the lines.\n3. If it is, add it to the set.\n4. If it is not, remove it from the set.\n5. Repeat step 2 until all points are in the set.\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)"
    },
    {
        "number": 248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"31\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"942477.796077000\"\nassert solution(stdin) == \"3983.539484752\"\nassert solution(stdin) == \"942477.796077000\"\nassert solution(stdin) == \"3983.539484752\"\nassert solution(stdin) == \"942477.796077000\"\n"
    },
    {
        "number": 251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n-----Time Limit-----\n1 minute\n\n-----Space Limit-----\n1 GB\n\n-----Elements Used-----\n1\n\n-----Constraints Used-----\n1\n\n-----Sample Input 1-----\n\n3 5\n1 2 2 2 4\n\n-----Sample Output 1-----\n\n2\n\n-----Sample Input 2-----\n\n4 5\n1 3 4 5\n\n-----Sample Output 2-----\n\n2\n\n-----Sample Input 3-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 3-----\n\n2\n\n-----Sample Input 4-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 4-----\n\n2\n\n-----Sample Input 5-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 5-----\n\n2\n\n-----Sample Input 6-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 6-----\n\n2\n\n-----Sample Input 7-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 7-----\n\n2\n\n-----Sample Input 8-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 8-----\n\n2\n\n-----Sample Input 9-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 9-----\n\n2\n\n-----Sample Input 10-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 10-----\n\n2\n\n-----Sample Input 11-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 11-----\n\n2\n\n-----Sample Input 12-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 12-----\n\n2\n\n-----Sample Input 13-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 13-----\n\n2\n\n-----Sample Input 14-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 14-----\n\n2\n\n-----Sample Input 15-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 15-----\n\n2\n\n-----Sample Input 16-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 16-----\n\n2\n\n-----Sample Input 17-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 17-----\n\n2\n\n-----Sample Input 18-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 18-----\n\n2\n\n-----Sample Input 19-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 19-----\n\n2\n\n-----Sample Input 20-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 20-----\n\n2\n\n-----Sample Input 21-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 21-----\n\n2\n\n-----Sample Input 22-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 22-----\n\n2\n\n-----Sample Input 23-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 23-----\n\n2\n\n-----Sample Input 24-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 24-----\n\n2\n\n-----Sample Input 25-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 25-----\n\n2\n\n-----Sample Input 26-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 26-----\n\n2\n\n-----Sample Input 27-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 27-----\n\n2\n\n-----Sample Input 28-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 28-----\n\n2\n\n-----Sample Input 29-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 29-----\n\n2\n\n-----Sample Input 30-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 30-----\n\n2\n\n-----Sample Input 31-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 31-----\n\n2\n\n-----Sample Input 32-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 32-----\n\n2\n\n-----Sample Input 33-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 33-----\n\n2\n\n-----Sample Input 34-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 34-----\n\n2\n\n-----Sample Input 35-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 35-----\n\n2\n\n-----Sample Input 36-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 36-----\n\n2\n\n-----Sample Input 37-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 37-----\n\n2\n\n-----Sample Input 38-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 38-----\n\n2\n\n-----Sample Input 39-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 39-----\n\n2\n\n-----Sample Input 40-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 40-----\n\n2\n\n-----Sample Input 41-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 41-----\n\n2\n\n-----Sample Input 42-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 42-----\n\n2\n\n-----Sample Input 43-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 43-----\n\n2\n\n-----Sample Input 44-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 44-----\n\n2\n\n-----Sample Input 45-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 45-----\n\n2\n\n-----Sample Input 46-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 46-----\n\n2\n\n-----Sample Input 47-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 47-----\n\n2\n\n-----Sample Input 48-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 48-----\n\n2\n\n-----Sample Input 49-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 49-----\n\n2\n\n-----Sample Input 50-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 50-----\n\n2\n\n-----Sample Input 51-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 51-----\n\n2\n\n-----Sample Input 52-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 52-----\n\n2\n\n-----Sample Input 53-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 53-----\n\n2\n\n-----Sample Input 54-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 54-----\n\n2\n\n-----Sample Input 55-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 55-----\n\n2\n\n-----Sample Input 56-----\n\n4 5\n1 2 3 4 5\n\n-----Sample Output 56-----\n\n2\n\n-----Sample Input 57-----"
    },
    {
        "number": 252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= k_1, k_2, k_3 <= 1500\n\nTime Limit: 1 sec\n\nSample Input\n\n2 2 3\n\nSample Output\n\nYES\n\nExplanation\n\nMishka can choose x_1 = 1, x_2 = 2, x_3 = 1.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a way that each second after switching the garlands on at least one garland will be lit.\n\nMishka switches on the garlands in such a"
    },
    {
        "number": 254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nInput\n5\nabcddcba\n\nOutput\n3\nInput\n8\nabcddcba\n\nOutput\n4\n"
    },
    {
        "number": 255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Team 1\"\nassert solution(stdin) == \"Team 2\"\nassert solution(stdin) == \"Draw\"\n"
    },
    {
        "number": 257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2.4\"\n\"\"\""
    },
    {
        "number": 258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Bicarp\"\nassert solution(stdin) == \"Monocarp\"\nassert solution(stdin) == \"Bicarp\"\nassert solution(stdin) == \"Monocarp\"\nassert solution(stdin) == \"Bicarp\"\n"
    },
    {
        "number": 259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\n\n-----Constraints-----\n1 <= n <= 100\n\n1 <= stdin.length <= 100\n\nstdin.length is guaranteed to be at least 1.\n\nstdin contains only '*' and '.'.\n\n\"\"\""
    },
    {
        "number": 262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"6 12\"\nassert solution(stdin) == \"7 13\"\nassert solution(stdin) == \"7 13\"\nassert solution(stdin) == \"7 13\"\n"
    },
    {
        "number": 264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"128\"\nassert solution(stdin) == \"128\"\nassert solution(stdin) == \"128\"\nassert solution(stdin) == \"128\"\nassert solution(stdin) == \"128\"\n"
    },
    {
        "number": 265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"69 96\"\n"
    },
    {
        "number": 267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2189\"\nassert solution(stdin) == \"2750685\"\nassert solution(stdin) == \"101154\"\nassert solution(stdin) == \"1542345\"\nassert solution(stdin) == \"1542345\"\n"
    },
    {
        "number": 268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\n"
    },
    {
        "number": 270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1.5\"\n"
    },
    {
        "number": 271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 0\nassert solution(113) == 110\nassert solution(1000000000) == 1000000000\nassert solution(5432359) == 5432360\n"
    },
    {
        "number": 272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"a\") == \"a\"\nassert solution(\"ab\") == \"ab\"\nassert solution(\"abc\") == \"abc\"\nassert solution(\"aab\") == \"aab\"\nassert solution(\"aab\") == \"aab\"\n"
    },
    {
        "number": 274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"|+- -++- -+||   |\"\nassert solution(stdin) == \"|+- -++- -+||   |\"\nassert solution(stdin) == \"|+- -++- -+||   |\"\nassert solution(stdin) == \"|+- -++- -+||   |\"\nassert solution(stdin) == \"|+- -++- -+||   |\"\n"
    },
    {
        "number": 275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \">\"\nassert solution(stdin) == \"<\"\nassert solution(stdin) == \"=\"\nassert solution(stdin) == \">=\"\nassert solution(stdin) == \"<=\"\n"
    },
    {
        "number": 276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Final!\"\n"
    },
    {
        "number": 278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 p_1, p_2,..., p_{n} \u2264 n\n1 \u2264 b_1, b_2,..., b_{n} \u2264 1\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\nO(n)\n\n-----Submissions-----\n\nSubmissions (easy)\n\nRuntime: 32 ms, faster than 99.74% of Python3 online submissions for Minimum Number of Skewers in a Skewer Array.\nMemory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Minimum Number of Skewers in a Skewer Array.\n\n\"\"\"\n\nclass Solution:\n    def minSkewers(self, n: int, p: List[int], b: List[int]) -> int:\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1]) + 1\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        \n        # dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i-1][j+1])\n        # dp[i"
    },
    {
        "number": 279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100\"\n"
    },
    {
        "number": 280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3628800\"\nassert solution(stdin) == \"11772\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n-----Constraints-----\n1 \u2264 n \u2264 100 000\n1 \u2264 x_1, x_2 \u2264 1 000 000\n1 \u2264 k_{i}, b_{i} \u2264 1 000 000\n\n-----Time Limit: 1 minute per testcase -----\n\nSample Tests\n>>> solution(\"2\")\n'Yes'\n>>> solution(\"1\")\n'No'\n>>> solution(\"1 2\")\n'No'\n>>> solution(\"1 2 3\")\n'No'\n>>> solution
    },
    {
        "number": 286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^4\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9\n\nConstraints are the following:\n\n1 \u2264 stdin \u2264 10^9"
    },
    {
        "number": 287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\nInput\n1\n\nOutput\n1\n\nInput\n2\n\nOutput\n2\n\nInput\n3\n\nOutput\n3\n\nInput\n4\n\nOutput\n4\n\nInput\n5\n\nOutput\n5\n\nInput\n6\n\nOutput\n6\n\nInput\n7\n\nOutput\n7\n\nInput\n8\n\nOutput\n8\n\nInput\n9\n\nOutput\n9\n\nInput\n10\n\nOutput\n10\n\nInput\n11\n\nOutput\n11\n\nInput\n12\n\nOutput\n12\n\nInput\n13\n\nOutput\n13\n\nInput\n14\n\nOutput\n14\n\nInput\n15\n\nOutput\n15\n\nInput\n16\n\nOutput\n16\n\nInput\n17\n\nOutput\n17\n\nInput\n18\n\nOutput\n18\n\nInput\n19\n\nOutput\n19\n\nInput\n20\n\nOutput\n20\n\nInput\n21\n\nOutput\n21\n\nInput\n22\n\nOutput\n22\n\nInput\n23\n\nOutput\n23\n\nInput\n24\n\nOutput\n24\n\nInput\n25\n\nOutput\n25\n\nInput\n26\n\nOutput\n26\n\nInput\n27\n\nOutput\n27\n\nInput\n28\n\nOutput\n28\n\nInput\n29\n\nOutput\n29\n\nInput\n30\n\nOutput\n30\n\nInput\n31\n\nOutput\n31\n\nInput\n32\n\nOutput\n32\n\nInput\n33\n\nOutput\n33\n\nInput\n34\n\nOutput\n34\n\nInput\n35\n\nOutput\n35\n\nInput\n36\n\nOutput\n36\n\nInput\n37\n\nOutput\n37\n\nInput\n38\n\nOutput\n38\n\nInput\n39\n\nOutput\n39\n\nInput\n40\n\nOutput\n40\n\nInput\n41\n\nOutput\n41\n\nInput\n42\n\nOutput\n42\n\nInput\n43\n\nOutput\n43\n\nInput\n44\n\nOutput\n44\n\nInput\n45\n\nOutput\n45\n\nInput\n46\n\nOutput\n46\n\nInput\n47\n\nOutput\n47\n\nInput\n48\n\nOutput\n48\n\nInput\n49\n\nOutput\n49\n\nInput\n50\n\nOutput\n50\n\nInput\n51\n\nOutput\n51\n\nInput\n52\n\nOutput\n52\n\nInput\n53\n\nOutput\n53\n\nInput\n54\n\nOutput\n54\n\nInput\n55\n\nOutput\n55\n\nInput\n56\n\nOutput\n56\n\nInput\n57\n\nOutput\n57\n\nInput\n58\n\nOutput\n58\n\nInput\n59\n\nOutput\n59\n\nInput\n60\n\nOutput\n60\n\nInput\n61\n\nOutput\n61\n\nInput\n62\n\nOutput\n62\n\nInput\n63\n\nOutput\n63\n\nInput\n64\n\nOutput\n64\n\nInput\n65\n\nOutput\n65\n\nInput\n66\n\nOutput\n66\n\nInput\n67\n\nOutput\n67\n\nInput\n68\n\nOutput\n68\n\nInput\n69\n\nOutput\n69\n\nInput\n70\n\nOutput\n70\n\nInput\n71\n\nOutput\n71\n\nInput\n72\n\nOutput\n72\n\nInput\n73\n\nOutput\n73\n\nInput\n74\n\nOutput\n74\n\nInput\n75\n\nOutput\n75\n\nInput\n76\n\nOutput\n76\n\nInput\n77\n\nOutput\n77\n\nInput\n78\n\nOutput\n78\n\nInput\n79\n\nOutput\n79\n\nInput\n80\n\nOutput\n80\n\nInput\n81\n\nOutput\n81\n\nInput\n82\n\nOutput\n82\n\nInput\n83\n\nOutput\n83\n\nInput\n84\n\nOutput\n84\n\nInput\n85\n\nOutput\n85\n\nInput\n86\n\nOutput\n86\n\nInput\n87\n\nOutput\n87\n\nInput\n88\n\nOutput\n88\n\nInput\n89\n\nOutput\n89\n\nInput\n90\n\nOutput\n90\n\nInput\n91\n\nOutput\n91\n\nInput\n92\n\nOutput\n92\n\nInput\n93\n\nOutput\n93\n\nInput\n94\n\nOutput\n94\n\nInput\n95\n\nOutput\n95\n\nInput\n96\n\nOutput\n96\n\nInput\n97\n\nOutput\n97\n\nInput\n98\n\nOutput\n98\n\nInput\n99\n\nOutput\n99\n\nInput\n100\n\nOutput\n100\n\nInput\n101\n\nOutput\n101\n\nInput\n102\n\nOutput\n102\n\nInput\n103\n\nOutput\n103\n\nInput\n104\n\nOutput\n104\n\nInput\n105\n\nOutput\n105\n\nInput\n106\n\nOutput\n106\n\nInput\n107\n\nOutput\n107\n\nInput\n108\n\nOutput\n108\n\nInput\n109\n\nOutput\n109\n\nInput\n110\n\nOutput\n110\n\nInput\n111\n\nOutput\n111\n\nInput\n112\n\nOutput\n112\n\nInput\n113\n\nOutput\n113\n\nInput\n114\n\nOutput\n114\n\nInput\n115\n\nOutput\n115\n\nInput\n116\n\nOutput\n116\n\nInput\n117\n\nOutput\n117\n\nInput\n118\n\nOutput\n118\n\nInput\n119\n\nOutput\n119\n\nInput\n120\n\nOutput\n120\n\nInput\n121\n\nOutput\n121\n\nInput\n122\n\nOutput\n122\n\nInput\n123\n\nOutput\n123\n\nInput\n124\n\nOutput\n124\n\nInput\n125\n\nOutput\n125\n\nInput\n126\n\nOutput\n126\n\nInput\n127\n\nOutput\n127\n\nInput\n128\n\nOutput\n128\n\nInput\n129\n\nOutput\n129\n\nInput\n130\n\nOutput\n130\n\nInput\n131\n\nOutput\n131\n\nInput\n132\n\nOutput\n132\n\nInput\n133\n\nOutput\n133\n\nInput\n134\n\nOutput\n134\n\nInput\n135\n\nOutput\n135\n\nInput\n136\n\nOutput\n136\n\nInput\n137\n\nOutput\n137\n\nInput\n138\n\nOutput\n138\n\nInput\n139\n\nOutput\n139\n\nInput\n140\n\nOutput\n140\n\nInput\n141\n\nOutput\n141\n\nInput\n142\n\nOutput\n142\n\nInput\n143\n\nOutput\n143\n\nInput\n144\n\nOutput\n144\n\nInput\n145\n\nOutput\n145\n\nInput\n146\n\nOutput\n146\n\nInput\n147\n\nOutput\n147\n\nInput\n148\n\nOutput\n148\n\nInput\n149\n\nOutput\n149"
    },
    {
        "number": 291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\nassert solution(stdin) == 2046\nassert solution(stdin) == 5\nassert solution(stdin) == 2\nassert solution(stdin) == 1\n"
    },
    {
        "number": 293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2 1 2\"\nassert solution(stdin) == \"2 1 2 3\"\n"
    },
    {
        "number": 294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= stdin[i] <= 10^9\n\n-----Time Limit-----\n1 minute\n\n-----Efficiency-----\n\nExplanation\nTime Limit: 1 minute\n\n\"\"\"\n\nimport math\nimport os\nimport random\nimport re\nimport sys"
    },
    {
        "number": 298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"chest\"\n"
    },
    {
        "number": 300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(121) == 6\nassert solution(123) == 2\nassert solution(1234) == 2\nassert solution(12345) == 2\nassert solution(1234567890) == 2\n"
    },
    {
        "number": 303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= x_1, y_1, x_2, y_2 <= 10^5\n1 <= x, y <= 10^5\n\n\"\"\""
    },
    {
        "number": 304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n\n0 <= stdin[i] <= 10^9\n\n-----Time Limit-----\n1 minute\n\n-----Space Limit-----\n1 GB\n\n-----Alternatives-----\n\nThe input is guaranteed to be valid.\n\n\"\"\""
    },
    {
        "number": 305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"102\"\n"
    },
    {
        "number": 306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"800\"\nassert solution(stdin) == \"256\"\nassert solution(stdin) == \"256\"\nassert solution(stdin) == \"256\"\nassert solution(stdin) == \"256\"\n"
    },
    {
        "number": 308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"31\"\n"
    },
    {
        "number": 310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n4 3\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n999999999999999999 999999999999999986\n\nSample Output\n\n3\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n999999999999999999 999999999999999986\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= 10^18\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n\nSample Output\n\n1\n\n-----Constraints-----\n1 <= n <= 10^5"
    },
    {
        "number": 311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n\"\"\""
    },
    {
        "number": 314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:09\"\nassert solution(stdin) == \"00:09\"\n"
    },
    {
        "number": 319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n\n-----Constraints-----\n\n1 <= A, B <= 10^9\n\n-----Time Limit-----\n\nO(log(A) + log(B))\n\n-----Space Limit-----\n\nO(1)\n\n-----Alternatives-----\n\n1. Use a stack to store the greatest common divisor of integers.\n2. Use a queue to store the greatest common divisor of integers.\n3. Use a stack to store the greatest common divisor of integers.\n4. Use a queue to store the greatest common divisor of integers.\n5. Use a stack to store the greatest common divisor of integers.\n6. Use a queue to store the greatest common divisor of integers.\n7. Use a stack to store the greatest common divisor of integers.\n8. Use a queue to store the greatest common divisor of integers.\n9. Use a stack to store the greatest common divisor of integers.\n10. Use a queue to store the greatest common divisor of integers.\n11. Use a stack to store the greatest common divisor of integers.\n12. Use a queue to store the greatest common divisor of integers.\n13. Use a stack to store the greatest common divisor of integers.\n14. Use a queue to store the greatest common divisor of integers.\n15. Use a stack to store the greatest common divisor of integers.\n16. Use a queue to store the greatest common divisor of integers.\n17. Use a stack to store the greatest common divisor of integers.\n18. Use a queue to store the greatest common divisor of integers.\n19. Use a stack to store the greatest common divisor of integers.\n20. Use a queue to store the greatest common divisor of integers.\n21. Use a stack to store the greatest common divisor of integers.\n22. Use a queue to store the greatest common divisor of integers.\n23. Use a stack to store the greatest common divisor of integers.\n24. Use a queue to store the greatest common divisor of integers.\n25. Use a stack to store the greatest common divisor of integers.\n26. Use a queue to store the greatest common divisor of integers.\n27. Use a stack to store the greatest common divisor of integers.\n28. Use a queue to store the greatest common divisor of integers.\n29. Use a stack to store the greatest common divisor of integers.\n30. Use a queue to store the greatest common divisor of integers.\n31. Use a stack to store the greatest common divisor of integers.\n32. Use a queue to store the greatest common divisor of integers.\n33. Use a stack to store the greatest common divisor of integers.\n34. Use a queue to store the greatest common divisor of integers.\n35. Use a stack to store the greatest common divisor of integers.\n36. Use a queue to store the greatest common divisor of integers.\n37. Use a stack to store the greatest common divisor of integers.\n38. Use a queue to store the greatest common divisor of integers.\n39. Use a stack to store the greatest common divisor of integers.\n40. Use a queue to store the greatest common divisor of integers.\n41. Use a stack to store the greatest common divisor of integers.\n42. Use a queue to store the greatest common divisor of integers.\n43. Use a stack to store the greatest common divisor of integers.\n44. Use a queue to store the greatest common divisor of integers.\n45. Use a stack to store the greatest common divisor of integers.\n46. Use a queue to store the greatest common divisor of integers.\n47. Use a stack to store the greatest common divisor of integers.\n48. Use a queue to store the greatest common divisor of integers.\n49. Use a stack to store the greatest common divisor of integers.\n50. Use a queue to store the greatest common divisor of integers.\n51. Use a stack to store the greatest common divisor of integers.\n52. Use a queue to store the greatest common divisor of integers.\n53. Use a stack to store the greatest common divisor of integers.\n54. Use a queue to store the greatest common divisor of integers.\n55. Use a stack to store the greatest common divisor of integers.\n56. Use a queue to store the greatest common divisor of integers.\n57. Use a stack to store the greatest common divisor of integers.\n58. Use a queue to store the greatest common divisor of integers.\n59. Use a stack to store the greatest common divisor of integers.\n60. Use a queue to store the greatest common divisor of integers.\n61. Use a stack to store the greatest common divisor of integers.\n62. Use a queue to store the greatest common divisor of integers.\n63. Use a stack to store the greatest common divisor of integers.\n64. Use a queue to store the greatest common divisor of integers.\n65. Use a stack to store the greatest common divisor of integers.\n66. Use a queue to store the greatest common divisor of integers.\n67. Use a stack to store the greatest common divisor of integers.\n68. Use a queue to store the greatest common divisor of integers.\n69. Use a stack to store the greatest common divisor of integers.\n70. Use a queue to store the greatest common divisor of integers.\n71. Use a stack to store the greatest common divisor of integers.\n72. Use a queue to store the greatest common divisor of integers.\n73. Use a stack to store the greatest common divisor of integers.\n74. Use a queue to store the greatest common divisor of integers.\n75. Use a stack to store the greatest common divisor of integers.\n76. Use a queue to store the greatest common divisor of integers.\n77. Use a stack to store the greatest common divisor of integers.\n78. Use a queue to store the greatest common divisor of integers.\n79. Use a stack to store the greatest common divisor of integers.\n80. Use a queue to store the greatest common divisor of integers.\n81. Use a stack to store the greatest common divisor of integers.\n82. Use a queue to store the greatest common divisor of integers.\n83. Use a stack to store the greatest common divisor of integers.\n84. Use a queue to store the greatest common divisor of integers.\n85. Use a stack to store the greatest common divisor of integers.\n86. Use a queue to store the greatest common divisor of integers.\n87. Use a stack to store the greatest common divisor of integers.\n88. Use a queue to store the greatest common divisor of integers.\n89. Use a stack to store the greatest common divisor of integers.\n90. Use a queue to store the greatest common divisor of integers.\n91. Use a stack to store the greatest common divisor of integers.\n92"
    },
    {
        "number": 324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4608 4096\"\nassert solution(stdin) == \"9 8\"\nassert solution(stdin) == \"9 8\"\nassert solution(stdin) == \"9 8\"\nassert solution(stdin) == \"9 8\"\n"
    },
    {
        "number": 325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"35\"\n"
    },
    {
        "number": 326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\nassert solution(stdin) == 7\n\nassert solution(stdin) == 7\n\nassert solution(stdin) == 7\n\nassert solution(stdin) == 7"
    },
    {
        "number": 328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n1 <= p, y <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSubmissions are provided below.\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by a single space.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 10^5\n1 \u2264 p, y \u2264 10^9\n\n[output] string\n\nThe number of the highest suitable branch.\n\n-----Constraints-----\n\n0 \u2264 p, y \u2264 10^9\n\n[input] string\n\nA string of numbers separated by a single space.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 10^5\n1 \u2264 p, y \u2264 10^9\n\n[output] string\n\n-1\n\n-----Tags-----\n\nTags:\n\nDifficulty Level:\n\n-----------------\n\nProblem Constraints:\n\n1 \u2264 p, y \u2264 10^9\n\n1 \u2264 stdin.length \u2264 10^5\n\n1 \u2264 stdin[i] \u2264 10^9\n\n'''"
    },
    {
        "number": 331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"40\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n\"\"\""
    },
    {
        "number": 333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\nstdin.length <= 10^5\nstdin contains only lowercase letters.\n\n\"\"\"\n\nclass Solution:\n    def longestCommonSubsequence(self, a: str, b: str) -> int:\n        m = len(a)\n        n = len(b)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if a[i - 1] == b[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n        return dp[m][n]\n"
    },
    {
        "number": 334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"77 77 79\"\nassert solution(stdin) == \"77 77 79\"\nassert solution(stdin) == \"77 77 79\"\nassert solution(stdin) == \"77 77 79\"\nassert solution(stdin) == \"77 77 79\"\n"
    },
    {
        "number": 336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10 2\"\nassert solution(stdin) == \"6 4\"\nassert solution(stdin) == \"10 20\"\nassert solution(stdin) == \"10 20\"\nassert solution(stdin) == \"10 20\"\n"
    },
    {
        "number": 341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 27\n\"\"\""
    },
    {
        "number": 342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 7\n\nassert solution(stdin) == 11\n\nassert solution(stdin) == 6"
    },
    {
        "number": 343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\u00a02\"\nassert solution(stdin) == \"1\u00a05\"\nassert solution(stdin) == \"1\u00a04\"\nassert solution(stdin) == \"1\u00a01\"\nassert solution(stdin) == \"1\u00a00\"\n"
    },
    {
        "number": 344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"16\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"40\"\n"
    },
    {
        "number": 347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4930'\n"
    },
    {
        "number": 348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Possible\"\n\nassert solution(stdin) == \"Impossible\"\n\nassert solution(stdin) == \"Impossible\"\n\nassert solution(stdin) == \"Possible\"\n\nassert solution(stdin) == \"Possible\""
    },
    {
        "number": 350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\nassert solution(stdin) == 11\n"
    },
    {
        "number": 351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"2 2 2\"\n"
    },
    {
        "number": 353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"UP\"\nassert solution(stdin) == \"DOWN\"\nassert solution(stdin) == -1\n"
    },
    {
        "number": 354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'A'\nassert solution(stdin) == 'B'\nassert solution(stdin) == 'A'\nassert solution(stdin) == 'B'\nassert solution(stdin) == 'A'\n"
    },
    {
        "number": 356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nInput\n5\n11 2 3 5 7\n4\n11 7 3 7\n\nOutput\n3\n\nInput\n2\n1 2\n1\n100\n\nOutput\n-1\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput\n3\n\nInput\n3\n1 2 3\n3\n1 2 3\n\nOutput"
    },
    {
        "number": 357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"Alex_and_broken_contest\") == \"YES\"\nassert solution(\"NikitaAndString\") == \"NO\"\nassert solution(\"Danil_and_Olya\") == \"NO\"\nassert solution(\"Olya_and_Nikita\") == \"YES\"\n"
    },
    {
        "number": 358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0.5'\n"
    },
    {
        "number": 360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"CODEWAITFORITFORCES\") == \"YES\"\nassert solution(\"BOTTOMCODER\") == \"NO\"\nassert solution(\"DECODEFORCES\") == \"NO\"\nassert solution(\"DOGEFORCES\") == \"YES\"\n"
    },
    {
        "number": 362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"18\"\n"
    },
    {
        "number": 363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == 17\nassert solution(4) == 4\nassert solution(5) == 5\nassert solution(6) == 6\nassert solution(7) == 7\n"
    },
    {
        "number": 364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '4'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abba\"\nassert solution(stdin) == \"abcba\"\nassert solution(stdin) == \"abcd\"\nassert solution(stdin) == \"abcd\"\nassert solution(stdin) == \"abcd\"\n"
    },
    {
        "number": 368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"White\"\nassert solution(stdin) == \"Black\"\nassert solution(stdin) == \"Draw\"\nassert solution(stdin) == \"White\"\nassert solution(stdin) == \"Black\"\n"
    },
    {
        "number": 369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 3 2 3\"\nassert solution(input()) == \"1 3 2 3\"\nassert solution(input()) == \"1 3 2 3\"\nassert solution(input()) == \"1 3 2 3\"\nassert solution(input()) == \"1 3 2 3\"\n"
    },
    {
        "number": 370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"7 4\"\nassert solution(input()) == \"2 10\"\nassert solution(input()) == \"s\"\n"
    },
    {
        "number": 371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '54'\nassert solution(stdin) == '8'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '7.25298806364175601379'\n"
    },
    {
        "number": 373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_i <= 10^9\n1 <= a_i <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n3\n1 1\n3 1 2\n\nSample Output\n\n3\n\nExplanation\n\nBandit appeared on the main square.\n\nThe bandit catches all the citizens on the square $1$ and moves along it to the square $2$ and so on.\n\nThe bandit catches all the citizens on the square $2$ and moves along it to the square $3$ and so on.\n\nThe bandit catches all the citizens on the square $3$ and moves along it to the square $4$ and so on.\n\nThe bandit catches all the citizens on the square $4$ and moves along it to the square $5$ and so on.\n\nThe bandit catches all the citizens on the square $5$ and moves along it to the square $6$ and so on.\n\nThe bandit catches all the citizens on the square $6$ and moves along it to the square $7$ and so on.\n\nThe bandit catches all the citizens on the square $7$ and moves along it to the square $8$ and so on.\n\nThe bandit catches all the citizens on the square $8$ and moves along it to the square $9$ and so on.\n\nThe bandit catches all the citizens on the square $9$ and moves along it to the square $10$ and so on.\n\nThe bandit catches all the citizens on the square $10$ and moves along it to the square $11$ and so on.\n\nThe bandit catches all the citizens on the square $11$ and moves along it to the square $12$ and so on.\n\nThe bandit catches all the citizens on the square $12$ and moves along it to the square $13$ and so on.\n\nThe bandit catches all the citizens on the square $13$ and moves along it to the square $14$ and so on.\n\nThe bandit catches all the citizens on the square $14$ and moves along it to the square $15$ and so on.\n\nThe bandit catches all the citizens on the square $15$ and moves along it to the square $16$ and so on.\n\nThe bandit catches all the citizens on the square $16$ and moves along it to the square $17$ and so on.\n\nThe bandit catches all the citizens on the square $17$ and moves along it to the square $18$ and so on.\n\nThe bandit catches all the citizens on the square $18$ and moves along it to the square $19$ and so on.\n\nThe bandit catches all the citizens on the square $19$ and moves along it to the square $20$ and so on.\n\nThe bandit catches all the citizens on the square $20$ and moves along it to the square $21$ and so on.\n\nThe bandit catches all the citizens on the square $21$ and moves along it to the square $22$ and so on.\n\nThe bandit catches all the citizens on the square $22$ and moves along it to the square $23$ and so on.\n\nThe bandit catches all the citizens on the square $23$ and moves along it to the square $24$ and so on.\n\nThe bandit catches all the citizens on the square $24$ and moves along it to the square $25$ and so on.\n\nThe bandit catches all the citizens on the square $25$ and moves along it to the square $26$ and so on.\n\nThe bandit catches all the citizens on the square $26$ and moves along it to the square $27$ and so on.\n\nThe bandit catches all the citizens on the square $27$ and moves along it to the square $28$ and so on.\n\nThe bandit catches all the citizens on the square $28$ and moves along it to the square $29$ and so on.\n\nThe bandit catches all the citizens on the square $29$ and moves along it to the square $30$ and so on.\n\nThe bandit catches all the citizens on the square $30$ and moves along it to the square $31$ and so on.\n\nThe bandit catches all the citizens on the square $31$ and moves along it to the square $32$ and so on.\n\nThe bandit catches all the citizens on the square $32$ and moves along it to the square $33$ and so on.\n\nThe bandit catches all the citizens on the square $33$ and moves along it to the square $34$ and so on.\n\nThe bandit catches all the citizens on the square $34$ and moves along it to the square $35$ and so on.\n\nThe bandit catches all the citizens on the square $35$ and moves along it to the square $36$ and so on.\n\nThe bandit catches all the citizens on the square $36$ and moves along it to the square $37$ and so on.\n\nThe bandit catches all the citizens on the square $37$ and moves along it to the square $38$ and so on.\n\nThe bandit catches all the citizens on the square $38$ and moves along it to the square $39$ and so on.\n\nThe bandit catches all the citizens on the square $39$ and moves along it to the square $40$ and so on.\n\nThe bandit catches all the citizens on the square $40$ and moves along it to the square $41$ and so on.\n\nThe bandit catches all the citizens on the square $41$ and moves along it to the square $42$ and so on.\n\nThe bandit catches all the citizens on the square $42$ and moves along it to the square $43$ and so on.\n\nThe bandit catches all the citizens on the square $43$ and moves along it to the square $44$ and so on.\n\nThe bandit catches all the citizens on the square $44$ and moves along it to the square $45$ and so on.\n\nThe bandit catches all the citizens on the square $45$ and moves along it to the square $46$ and so on.\n\nThe bandit catches all the citizens on the square $46$ and moves along it to the square $47$ and so on.\n\nThe bandit catches all the citizens on the square $"
    },
    {
        "number": 375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"93\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nInput\n1\n\nOutput\nNO\n2 1\n1 2\n\n\"\"\""
    },
    {
        "number": 382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"()()()\"\nassert solution(stdin) == \"()()\"\nassert solution(stdin) == \"()\"\nassert solution(stdin) == \"()\"\nassert solution(stdin) == \"()\"\n"
    },
    {
        "number": 386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n\"\"\""
    },
    {
        "number": 388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == '-1'\nassert solution(2) == 'bb'\nassert solution(3) == 'ww'\nassert solution(4) == 'bb'\nassert solution(5) == 'ww'\n"
    },
    {
        "number": 392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\nassert solution(stdin) == 5\nassert solution(stdin) == 326\n"
    },
    {
        "number": 397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\""
    },
    {
        "number": 398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"25\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"24\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10000800015'\n"
    },
    {
        "number": 407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '47'\nassert solution(stdin) == '136542'\nassert solution(stdin) == '44'\nassert solution(stdin) == '47'\nassert solution(stdin) == '136542'\n"
    },
    {
        "number": 408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"16\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\n"
    },
    {
        "number": 418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 <= s <= 2^{100}\n\n\n-----Time Limit: 1 sec (py3)-----\n\nSample Input 1:\n\n100000000\n\nSample Output 1:\n\n4\n\nSample Input 2:\n\n101\n\nSample Output 2:\n\n3\n\nSample Input 3:\n\n10100\n\nSample Output 3:\n\n2\n\n-----Time Limit: 1 sec (py3)-----\n\nSample Input 4:\n\n10100\n\nSample Output 4:\n\n1\n\n-----Time Limit: 1 sec (py3)-----\n\nPython3 solution by @santiment\n\"\"\""
    },
    {
        "number": 420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= n, m <= 100\n1 <= a_i <= 1\n\n-----Time Limit-----\n\nO(n * m)\n\nO(n * m)\n\n-----Space Limit-----\n\nO(n * m)\n\n-----Bug alert-----\n\nIn the mirroring problem, we have to find the mirroring matrix b, which is a 2 \u00d7 n matrix.\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\n-----Constraints-----\n1 <= n <= 100 000\n-10 000 <= a_i <= 10 000\n\n-----Time Limit-----\n1 minute\n\n-----Space Limit-----\n1 GB\n\n-----Tags-----\nFirst-party\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"8191\"\nassert solution(stdin) == \"8192\"\nassert solution(stdin) == \"8193\"\n"
    },
    {
        "number": 425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10028\n"
    },
    {
        "number": 427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nassert solution(stdin) == 'MNBVCXZLKJHGFDSAQPWOEIRUYT'\nassert solution(stdin) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nassert solution(stdin) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n"
    },
    {
        "number": 430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n\"\"\""
    },
    {
        "number": 431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n1 <= n <= 10^5\n\n1 <= a <= n\n\n1 <= b <= n\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Space Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSubmissions are marked in bold blue.\n\n\"\"\""
    },
    {
        "number": 434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\nassert solution(stdin) == 5\n\nassert solution(stdin) == 5\n\nassert solution(stdin) == 5\n\nassert solution(stdin) == 5"
    },
    {
        "number": 436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.500000000000'\nassert solution(stdin) == '1.500000000000'\nassert solution(stdin) == '1.500000000000'\nassert solution(stdin) == '1.500000000000'\nassert solution(stdin) == '1.500000000000'\n"
    },
    {
        "number": 438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 5 1\"\nassert solution(stdin) == \"3 3 5 1\"\nassert solution(stdin) == \"3 3 5 1\"\n"
    },
    {
        "number": 439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '23456789'\n\nassert solution(stdin) == '23456789'\n\nassert solution(stdin) == '23456789'\n\nassert solution(stdin) == '23456789'\n\nassert solution(stdin) == '23456789'"
    },
    {
        "number": 440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"werd\"\nassert solution(stdin) == \"word\"\nassert solution(stdin) == \"aaeaa\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"a\"\n"
    },
    {
        "number": 441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1"
    },
    {
        "number": 444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"27\"\n"
    },
    {
        "number": 445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"496\"\nassert solution(stdin) == \"1_2\"\nassert solution(stdin) == \"110_2\"\nassert solution(stdin) == \"1111000_2\"\nassert solution(stdin) == \"111110000_2\"\n"
    },
    {
        "number": 447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '8'\nassert solution(stdin) == '4'\nassert solution(stdin) == '6'\nassert solution(stdin) == '8'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nInput\n5 2\n1 3 1 4 2\n\nOutput\n4\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n\nInput\n6 4\n1 1 2 2 3 3\n\nOutput\n6\n"
    },
    {
        "number": 449,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == 5\n\nassert solution(stdin) == 10000000\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1"
    },
    {
        "number": 450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n\nassert solution(stdin) == \"Impossible\"\n\nassert solution(stdin) == \"Impossible\"\n\nassert solution(stdin) == \"Impossible\"\n\nassert solution(stdin) == \"Impossible\""
    },
    {
        "number": 454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3\") == \"2\"\nassert solution(\"-1 0\") == \"1 2\"\nassert solution(\"0 3\") == \"1 2\"\nassert solution(\"0 -1 0\") == \"1 2\"\nassert solution(\"0 -1 -1\") == \"1 2\"\n"
    },
    {
        "number": 456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"a***b\"\nassert solution(stdin) == \"***gmg\"\nassert solution(stdin) == \"a***b\"\nassert solution(stdin) == \"***gmg\"\nassert solution(stdin) == \"a***b\"\n"
    },
    {
        "number": 457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '593574252'\nassert solution(stdin) == '593574252'\nassert solution(stdin) == '593574252'\nassert solution(stdin) == '593574252'\nassert solution(stdin) == '593574252'\n"
    },
    {
        "number": 458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n1 <= a_{i} <= 6\n\n1 <= i <= stdin.length\n\n1 <= a_{i} <= 6\n\n1 <= i <= stdin.length\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6\n\n1 <= a_{i} <= 6"
    },
    {
        "number": 460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"24\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"10400\"\n"
    },
    {
        "number": 461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 466,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 467,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '>'\nassert solution(stdin) == '='\nassert solution(stdin) == '<'\nassert solution(stdin) == '='\nassert solution(stdin) == '<'\n"
    },
    {
        "number": 469,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3"
    },
    {
        "number": 470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1\nassert solution(110) == 10\nassert solution(4) == -1\n"
    },
    {
        "number": 473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"00:06\"\nassert solution(stdin) == \"00:00\"\nassert solution(stdin) == \"23:00\"\nassert solution(stdin) == \"00:01\"\nassert solution(stdin) == \"00:00\"\n"
    },
    {
        "number": 474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Example-----\nInput\n\n5\n6 1 6 6 0\n\nOutput\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Example-----\nInput\n\n5\n6 1 6 6 0\n\nOutput\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n6 1 6 6 0\n\nSample Output\n\n2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <="
    },
    {
        "number": 475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Poor Inna and pony!\"\n\nassert solution(stdin) == \"Poor Inna and pony!\"\n\nassert solution(stdin) == \"Poor Inna and pony!\"\n\nassert solution(stdin) == \"Poor Inna and pony!\"\n\nassert solution(stdin) == \"Poor Inna and pony!\""
    },
    {
        "number": 478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 480,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 481,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 482,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"java\"\nassert solution(stdin) == \"python\"\nassert solution(stdin) == \"phphp\"\n"
    },
    {
        "number": 483,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 484,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"56\"\n"
    },
    {
        "number": 485,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 3\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 2\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 486,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"387420489\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"999999999\"\n"
    },
    {
        "number": 487,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 488,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(aabb) == 2\nassert solution(aabcaa) == 1\nassert solution(aabcaa) == 0\nassert solution(aabcaa) == 0\nassert solution(aabcaa) == 0\n"
    },
    {
        "number": 489,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 490,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 491,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2230\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == -10000\n\nassert solution(stdin) == -100003\n\n-----Constraints-----\n1 <= n <= 10^9\n\n-----Time Limit: 1.0s (S)\n\n-----Space Limit: 1M\n\n-----Alternatives\n\n1. Use a stack to store the state of Ilya's bank account.\n2. Use a queue to store the state of Ilya's bank account.\n3. Use a stack to store the state of Ilya's bank account.\n4. Use a queue to store the state of Ilya's bank account.\n5. Use a stack to store the state of Ilya's bank account.\n6. Use a queue to store the state of Ilya's bank account.\n7. Use a stack to store the state of Ilya's bank account.\n8. Use a queue to store the state of Ilya's bank account.\n9. Use a stack to store the state of Ilya's bank account.\n10. Use a queue to store the state of Ilya's bank account.\n11. Use a stack to store the state of Ilya's bank account.\n12. Use a queue to store the state of Ilya's bank account.\n13. Use a stack to store the state of Ilya's bank account.\n14. Use a queue to store the state of Ilya's bank account.\n15. Use a stack to store the state of Ilya's bank account.\n16. Use a queue to store the state of Ilya's bank account.\n17. Use a stack to store the state of Ilya's bank account.\n18. Use a queue to store the state of Ilya's bank account.\n19. Use a stack to store the state of Ilya's bank account.\n20. Use a queue to store the state of Ilya's bank account.\n21. Use a stack to store the state of Ilya's bank account.\n22. Use a queue to store the state of Ilya's bank account.\n\n\"\"\"\n\nclass Solution:\n    def max_state(self, state):\n        if state == -1:\n            return 0\n        if state == 0:\n            return -1\n        if state == 1:\n            return -1\n        if state == 2:\n            return -1\n        if state == 3:\n            return -1\n        if state == 4:\n            return -1\n        if state == 5:\n            return -1\n        if state == 6:\n            return -1\n        if state == 7:\n            return -1\n        if state == 8:\n            return -1\n        if state == 9:\n            return -1\n        if state == 10:\n            return -1\n        if state == 11:\n            return -1\n        if state == 12:\n            return -1\n        if state == 13:\n            return -1\n        if state == 14:\n            return -1\n        if state == 15:\n            return -1\n        if state == 16:\n            return -1\n        if state == 17:\n            return -1\n        if state == 18:\n            return -1\n        if state == 19:\n            return -1\n        if state == 20:\n            return -1\n        if state == 21:\n            return -1\n        if state == 22:\n            return -1\n        if state == 23:\n            return -1\n        if state == 24:\n            return -1\n        if state == 25:\n            return -1\n        if state == 26:\n            return -1\n        if state == 27:\n            return -1\n        if state == 28:\n            return -1\n        if state == 29:\n            return -1\n        if state == 30:\n            return -1\n        if state == 31:\n            return -1\n        if state == 32:\n            return -1\n        if state == 33:\n            return -1\n        if state == 34:\n            return -1\n        if state == 35:\n            return -1\n        if state == 36:\n            return -1\n        if state == 37:\n            return -1\n        if state == 38:\n            return -1\n        if state == 39:\n            return -1\n        if state == 40:\n            return -1\n        if state == 41:\n            return -1\n        if state == 42:\n            return -1\n        if state == 43:\n            return -1\n        if state == 44:\n            return -1\n        if state == 45:\n            return -1\n        if state == 46:\n            return -1\n        if state == 47:\n            return -1\n        if state == 48:\n            return -1\n        if state == 49:\n            return -1\n        if state == 50:\n            return -1\n        if state == 51:\n            return -1\n        if state == 52:\n            return -1\n        if state == 53:\n            return -1\n        if state == 54:\n            return -1\n        if state == 55:\n            return -1\n        if state == 56:\n            return -1\n        if state == 57:\n            return -1\n        if state == 58:\n            return -1\n        if state == 59:\n            return -1\n        if state == 60:\n            return -1\n        if state == 61:\n            return -1\n        if state == 62:\n            return -1\n        if state == 63:\n            return -1\n        if state == 64:\n            return -1\n        if state == 65:\n            return -1\n        if state == 66:\n            return -1\n        if state == 67:\n            return -1\n        if state == 68:\n            return -1\n        if state == 69:\n            return -1\n        if state == 70:\n            return -1\n        if state == 71:\n            return -1\n        if state == 72:\n            return -1\n        if state == 73:\n            return -1\n        if state == 74:\n            return -1\n        if state == 75:\n            return -1\n        if state == 76:\n            return -1\n        if state == 77:\n            return -1\n        if state == 78:\n            return -1\n        if state == 79:\n            return -1\n        if state == 80:\n            return -1\n        if state == 81:\n            return -1\n        if state == 82:\n            return -1\n        if state == 83:\n            return -1\n        if state == 84:\n            return -1\n        if state == 85:\n            return -1\n        if state == 86:\n            return -1\n        if state == 87:\n            return -1\n        if state == 88:\n            return -1\n        if state == 89:\n            return -1\n        if state == 90:\n            return -1\n        if state == 91:\n            return -1\n        if state == 92:\n            return -1\n        if state == 93:\n            return -"
    },
    {
        "number": 492,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"cw\"\nassert solution(stdin) == \"ccw\"\nassert solution(stdin) == \"undefined\"\n"
    },
    {
        "number": 493,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 494,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 1 2 4\"\nassert solution(stdin) == \"3 1 2 4\"\n"
    },
    {
        "number": 495,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9907000008001234'\nassert solution(stdin) == '9190'\nassert solution(stdin) == '3104'\nassert solution(stdin) == '300'\nassert solution(stdin) == '1034'\n"
    },
    {
        "number": 496,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"42\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"42\"\n"
    },
    {
        "number": 497,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 4"
    },
    {
        "number": 498,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"R\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"L\"\nassert solution(stdin) == \"R\"\nassert solution(stdin) == \"R\"\n"
    },
    {
        "number": 499,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"GGRB\"\nassert solution(stdin) == \"GRBBR\"\nassert solution(stdin) == \"GRBBR\"\nassert solution(stdin) == \"GRBBR\"\nassert solution(stdin) == \"GRBBR\"\n"
    },
    {
        "number": 500,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= u_{i}, v_{i} <= 10^18\n\n------Time complexity-----\nO(n)\n\n------Space complexity-----\nO(n)\n\n------Algorithm-----"
    },
    {
        "number": 501,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n"
    },
    {
        "number": 502,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nYes\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\nO(n)\n\n-----Space Complexity-----\nO(n)\n\n-----Can you solve it without using extra space?\nNo\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= a_{x}, a_{y}, b_{x}, b_{y}, c_{x}, c_{y} <= 10^9\n"
    },
    {
        "number": 503,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\nstdin contains only the integers 1, 2,..., n.\nstdin contains at least three integers a_1, a_2,..., a_{n}\n\n\"\"\""
    },
    {
        "number": 504,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 27\n\nassert solution(stdin) == 26\n\nassert solution(stdin) == 26\n\nassert solution(stdin) == 26\n\nassert solution(stdin) == 26"
    },
    {
        "number": 505,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 506,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 507,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 5 4\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4\"\n"
    },
    {
        "number": 508,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 509,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 510,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 511,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 512,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 513,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"respectable\"\n"
    },
    {
        "number": 514,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 515,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == -1\nassert solution(6) == -1\nassert solution(8080) == -1\nassert solution(\"0123456789\") == -1\nassert solution
    },
    {
        "number": 516,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 517,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"8 4 2\"\n"
    },
    {
        "number": 518,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3.2429391'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\nassert solution(stdin) == '1.0000000'\n"
    },
    {
        "number": 519,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '119.4'\n\nassert solution(stdin) == '119.4'\n\nassert solution(stdin) == '119.4'\n\nassert solution(stdin) == '119.4'\n\nassert solution(stdin) == '119.4'"
    },
    {
        "number": 520,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2015\"\nassert solution(stdin) == \"2050\"\nassert solution(stdin) == \"2051\"\nassert solution(stdin) == \"2052\"\nassert solution(stdin) == \"2053\"\n"
    },
    {
        "number": 521,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 522,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"317451037\"\nassert solution(stdin) == \"72900\"\nassert solution(stdin) == \"2.28\"\nassert solution(stdin) == \"1.0\"\nassert solution(stdin) == \"0.0\"\n"
    },
    {
        "number": 523,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"tabbat\"\nassert solution(stdin) == \"tabbat\"\nassert solution(stdin) == \"tabbat\"\nassert solution(stdin) == \"tabbat\"\nassert solution(stdin) == \"tabbat\"\n"
    },
    {
        "number": 524,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 525,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n <= 10^5\n1 <= a_{1},a_{2},\\dots,a_{n} <= 10^9\n\n\"\"\""
    },
    {
        "number": 526,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NIE\"\nassert solution(stdin) == \"TAK\"\nassert solution(stdin) == \"TAK\"\nassert solution(stdin) == \"TAK\"\nassert solution(stdin) == \"TAK\"\n"
    },
    {
        "number": 527,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 528,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 529,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"Hello\") == \"Hello\"\nassert solution(\"HelloWorld\") == \"HelloWorld\"\nassert solution(\"HelloWorld\") == \"HelloWorld\"\nassert solution(\"HelloWorld\") == \"HelloWorld\"\nassert solution(\"HelloWorld\") == \"HelloWorld\"\n"
    },
    {
        "number": 530,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\"\n"
    },
    {
        "number": 531,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 532,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"zeus\") == \"18\"\nassert solution(\"map\") == \"35\"\nassert solution(\"ares\") == \"34\"\nassert solution(\"z\") == \"z\"\nassert solution(\"e\") == \"e\"\n"
    },
    {
        "number": 533,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 4\"\nassert solution(stdin) == \"4 4\"\nassert solution(stdin) == \"5 9\"\nassert solution(stdin) == \"5 9\"\nassert solution(stdin) == \"0 4\"\n"
    },
    {
        "number": 534,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"GGGB\"\nassert solution(stdin) == \"GGBGB\"\nassert solution(stdin) == \"GGGBG\"\nassert solution(stdin) == \"GGGBG\"\nassert solution(stdin) == \"GGGBG\"\n"
    },
    {
        "number": 535,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '875000008'\nassert solution(stdin) == '237178099'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 536,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 537,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 6 9\"\nassert solution(stdin) == \"0 0 9\"\nassert solution(stdin) == \"83333333333 416666666665 500000000002\"\n"
    },
    {
        "number": 538,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 539,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 5"
    },
    {
        "number": 540,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 500\n1 <= m <= 500\n\n1 <= r_1, c_1 <= n\nr_1, c_1 < n\nr_2, c_2 < m\n\n------Time Limit---------\n\nO(n*m)\n\nO(n*m)\n\n------Space Limit---------\n\nO(n*m)\n\n------Tags--------\n\nFinality\n\nRuntime: 32 ms, faster than 95.41% of Python3 online submissions for Path Sum II.\nMemory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Path Sum II.\n\n\"\"\"\n\nclass Solution:\n    def pathSum(self, root: TreeNode, targetSum: int) -> List[List[int]]:\n        def dfs(root, path, targetSum):\n            if not root:\n                return\n            path.append(root.val)\n            targetSum -= root.val\n            if not root.left and not root.right and targetSum == 0:\n                paths.append(path[:])\n            dfs(root.left, path, targetSum)\n            dfs(root.right, path, targetSum)\n            path.pop()\n            targetSum += root.val\n        paths = []\n        dfs(root, [], targetSum)\n        return paths\n"
    },
    {
        "number": 541,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 542,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"second\"\nassert solution(stdin) == \"first\"\n\n\"\"\""
    },
    {
        "number": 543,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 544,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 545,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'ayd'\nassert solution(stdin) == 'ayd'\nassert solution(stdin) == 'ayd'\nassert solution(stdin) == 'ayd'\nassert solution(stdin) == 'ayd'\n"
    },
    {
        "number": 546,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 547,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 548,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Second\"\nassert solution(stdin) == \"First\"\n\n\"\"\""
    },
    {
        "number": 549,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"8 8\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"999 1001\"\n"
    },
    {
        "number": 550,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 551,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 552,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 553,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"16\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 22\nassert solution(stdin) == 4444\nassert solution(stdin) == 22\nassert solution(stdin) == 22\nassert solution(stdin) == 22\n"
    },
    {
        "number": 556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 4 8\"\nassert solution(stdin) == \"1 2 4 8\"\nassert solution(stdin) == \"1 2 4 8\"\nassert solution(stdin) == \"1 2 4 8\"\nassert solution(stdin) == \"1 2 4 8\"\n"
    },
    {
        "number": 557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"6\"\nassert solution(input) == \"112\"\nassert solution(input) == \"121\"\nassert solution(input) == \"122\"\nassert solution(input) == \"211\"\n"
    },
    {
        "number": 559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\n"
    },
    {
        "number": 560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\n-----Constraints-----\n1 <= r <= 10^3\n1 <= c <= 10^3\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n7\n\"\"\""
    },
    {
        "number": 561,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\n"
    },
    {
        "number": 562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"900000000000000009 900000000000000029\"\nassert solution(stdin) == \"900000000000000009 900000000000000010 900000000000000021\"\nassert solution(stdin) == \"900000000000000009 900000000000000029\"\nassert solution(stdin) == \"900000000000000009 900000000000000029\"\nassert solution(stdin) == \"900000000000000009 900000000000000029\"\n"
    },
    {
        "number": 564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 24\nassert solution(stdin) == 9\nassert solution(stdin) == 24\nassert solution(stdin) == 9\nassert solution(stdin) == 24\n"
    },
    {
        "number": 566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n-----Constraints-----\n\n1 \u2264 r, g, b \u2264 2\u00b710^9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n5 4 3\n\nSample Output\n\n4\n\nExplanation\n\nThe number of tables that can be decorated is 4.\n\n\"\"\""
    },
    {
        "number": 567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= a_1, a_2,..., a_{n} <= 10^6 - 1\n\n1 <= x <= 10^6\n\n1 <= y <= 10^6\n\n1 <= z <= 10^6\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n"
    },
    {
        "number": 568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 20\nassert solution(2) == 680\nassert solution(3) == 20\nassert solution(4) == 680\nassert solution(5) == 20\n"
    },
    {
        "number": 569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 570,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Vladik\"\nassert solution(stdin) == \"Valera\"\nassert solution(stdin) == \"Vladik\"\nassert solution(stdin) == \"Valera\"\nassert solution(stdin) == \"Vladik\"\n"
    },
    {
        "number": 571,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \":(\"\nassert solution(stdin) == \":(()\"\nassert solution(stdin) == \":(\"\nassert solution(stdin) == \":(\"\nassert solution(stdin) == \":(\"\n"
    },
    {
        "number": 572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 13\n\nInput\n1 1 5 5\n\nOutput\n13\n"
    },
    {
        "number": 575,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1001\"\n"
    },
    {
        "number": 577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '8549'\nassert solution(stdin) == '8549'\nassert solution(stdin) == '8549'\nassert solution(stdin) == '8549'\nassert solution(stdin) == '8549'\n"
    },
    {
        "number": 579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\nassert solution(input()) == \"8\"\n"
    },
    {
        "number": 580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin
    },
    {
        "number": 582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 <= n <= 200\n1 <= a_i <= 10^9\n1 <= t_i <= 10^5\n\n-----Time Limit: 1 minute\n\n-----Space Limit: 1 GB\n\n-----Alternatives\n\n1. Use a stack to store the news categories.\n2. Use a queue to store the news categories.\n3. Use a dictionary to store the news categories.\n4. Use a stack to store the news categories.\n5. Use a queue to store the news categories.\n6. Use a dictionary to store the news categories.\n7. Use a stack to store the news categories.\n8. Use a queue to store the news categories.\n9. Use a dictionary to store the news categories.\n10. Use a stack to store the news categories.\n11. Use a queue to store the news categories.\n12. Use a dictionary to store the news categories.\n13. Use a stack to store the news categories.\n14. Use a queue to store the news categories.\n15. Use a dictionary to store the news categories.\n16. Use a stack to store the news categories.\n17. Use a queue to store the news categories.\n18. Use a dictionary to store the news categories.\n19. Use a stack to store the news categories.\n20. Use a queue to store the news categories.\n21. Use a dictionary to store the news categories.\n22. Use a stack to store the news categories.\n23. Use a queue to store the news categories.\n24. Use a dictionary to store the news categories.\n25. Use a stack to store the news categories.\n26. Use a queue to store the news categories.\n27. Use a dictionary to store the news categories.\n28. Use a stack to store the news categories.\n29. Use a queue to store the news categories.\n30. Use a dictionary to store the news categories.\n31. Use a stack to store the news categories.\n32. Use a queue to store the news categories.\n33. Use a dictionary to store the news categories.\n34. Use a stack to store the news categories.\n35. Use a queue to store the news categories.\n36. Use a dictionary to store the news categories.\n37. Use a stack to store the news categories.\n38. Use a queue to store the news categories.\n39. Use a dictionary to store the news categories.\n40. Use a stack to store the news categories.\n41. Use a queue to store the news categories.\n42. Use a dictionary to store the news categories.\n43. Use a stack to store the news categories.\n44. Use a queue to store the news categories.\n45. Use a dictionary to store the news categories.\n46. Use a stack to store the news categories.\n47. Use a queue to store the news categories.\n48. Use a dictionary to store the news categories.\n49. Use a stack to store the news categories.\n50. Use a queue to store the news categories.\n51. Use a dictionary to store the news categories.\n52. Use a stack to store the news categories.\n53. Use a queue to store the news categories.\n54. Use a dictionary to store the news categories.\n55. Use a stack to store the news categories.\n56. Use a queue to store the news categories.\n57. Use a dictionary to store the news categories.\n58. Use a stack to store the news categories.\n59. Use a queue to store the news categories.\n60. Use a dictionary to store the news categories.\n61. Use a stack to store the news categories.\n62. Use a queue to store the news categories.\n63. Use a dictionary to store the news categories.\n64. Use a stack to store the news categories.\n65. Use a queue to store the news categories.\n66. Use a dictionary to store the news categories.\n67. Use a stack to store the news categories.\n68. Use a queue to store the news categories.\n69. Use a dictionary to store the news categories.\n70. Use a stack to store the news categories.\n71. Use a queue to store the news categories.\n72. Use a dictionary to store the news categories.\n73. Use a stack to store the news categories.\n74. Use a queue to store the news categories.\n75. Use a dictionary to store the news categories.\n76. Use a stack to store the news categories.\n77. Use a queue to store the news categories.\n78. Use a dictionary to store the news categories.\n79. Use a stack to store the news categories.\n80. Use a queue to store the news categories.\n81. Use a dictionary to store the news categories.\n82. Use a stack to store the news categories.\n83. Use a queue to store the news categories.\n84. Use a dictionary to store the news categories.\n85. Use a stack to store the news categories.\n86. Use a queue to store the news categories.\n87. Use a dictionary to store the news categories.\n88. Use a stack to store the news categories.\n89. Use a queue to store the news categories.\n90. Use a dictionary to store the news categories.\n91. Use a stack to store the news categories.\n92. Use a queue to store the news categories.\n93. Use a dictionary to store the news categories.\n94. Use a stack to store the news categories.\n95. Use a queue to store the news categories.\n96. Use a dictionary to store the news categories.\n97. Use a stack to store the news categories.\n98. Use a queue to store the news categories.\n99. Use a dictionary to store the news categories.\n100. Use a stack to store the news categories.\n101. Use a queue to store the news categories.\n102. Use a dictionary to store the news categories.\n103. Use a stack to store the news categories.\n104. Use a queue to store the news categories.\n105. Use a dictionary to store the news categories.\n106. Use a stack to store the news categories.\n107. Use a queue to store the news categories.\n108. Use a dictionary to store the news categories.\n109. Use a stack to store the news categories.\n110. Use a queue to store the news categories.\n111. Use a dictionary to store the news categories.\n112. Use a stack to store the news categories.\n113. Use a queue to store the news categories.\n114. Use a dictionary to store the news categories.\n115. Use a stack to store the news categories.\n116. Use a queue to store the news categories.\n117. Use a dictionary to store the news categories.\n118. Use a stack to store the news categories.\n119. Use a queue to store the news categories.\n120. Use a dictionary to store the news categories.\n121. Use a stack to store the news categories.\n122. Use a queue to store the news categories.\n123. Use a dictionary to store the news categories.\n124. Use a stack to store the news categories.\n125. Use a queue to store the news categories.\n126. Use a dictionary to store the news categories.\n127. Use a stack to store the news categories.\n128. Use a queue to store the news categories.\n129. Use a dictionary to store the"
    },
    {
        "number": 583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"()()()()()\"\nassert solution(stdin
    },
    {
        "number": 584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 4\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"26\"\n"
    },
    {
        "number": 588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\nassert solution(input()) == \"10.000000000000000000000000000000000000000000000000\"\n"
    },
    {
        "number": 589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 100\n\nInput\n?JGJ9\n\nOutput\n1\n\nInput\n?JGJ9\n\nOutput\n1\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0\n\nInput\n?JGJ9\n\nOutput\n0"
    },
    {
        "number": 590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\nassert solution(stdin) == \"35\"\n"
    },
    {
        "number": 592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == 8\nassert solution(6) == 28\nassert solution(2) == 0\nassert solution(0) == 0\nassert solution(1) == 0\n"
    },
    {
        "number": 593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2044\"\nassert solution(stdin) == \"2028\"\nassert solution(stdin) == \"50507\"\n"
    },
    {
        "number": 596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 50768\n"
    },
    {
        "number": 597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"reviver\"\nassert solution(stdin) == \"eye\"\nassert solution(stdin) == \"kitayuta\"\nassert solution(stdin) == \"NA\"\n"
    },
    {
        "number": 600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 601,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n\"\"\""
    },
    {
        "number": 602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == \"Adams\"\nassert solution(8) == \"Van Buren\"\nassert solution(29) == \"Harding\"\nassert solution(0) == \"\"\nassert solution(\"\") == \"\"\n"
    },
    {
        "number": 603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Vasya\"\nassert solution(stdin) == \"Misha\"\nassert solution(stdin) == \"Tie\"\n"
    },
    {
        "number": 606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3.7677669529663684 3.7677669529663684 3.914213562373095'\nassert solution(stdin) == '5.0 5.0 10.0'\nassert solution(stdin) == '5.0 5.0 10.0'\nassert solution(stdin) == '5.0 5.0 10.0'\nassert solution(stdin) == '5.0 5.0 10.0'\n"
    },
    {
        "number": 607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"32\"\n\nassert solution(stdin) == \"923958830\"\n\nassert solution(stdin) == \"265955509\"\n\nassert solution(stdin) == \"923958830\"\n\nassert solution(stdin) == \"923958830\""
    },
    {
        "number": 608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\nassert solution(stdin) == '6'\n"
    },
    {
        "number": 609,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2\"\n"
    },
    {
        "number": 611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-2.500000000000000'\n"
    },
    {
        "number": 612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 613,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"inf\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"25\"\n"
    },
    {
        "number": 617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '303'\nassert solution(stdin) == '25'\nassert solution(stdin) == '60'\nassert solution(stdin) == '60'\nassert solution(stdin) == '60'\n"
    },
    {
        "number": 618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"7 0\"\nassert solution(stdin) == \"7 0\"\nassert solution(stdin) == \"7 0\"\nassert solution(stdin) == \"7 0\"\n"
    },
    {
        "number": 620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1 -1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 -1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 621,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5 3 3\"\nassert solution(stdin) == \"5 3 3\"\nassert solution(stdin) == \"5 3 3\"\n"
    },
    {
        "number": 622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5.00000000000000000000\"\nassert solution(stdin) == \"5.00000000000000000000\"\nassert solution(stdin) == \"5.00000000000000000000\"\nassert solution(stdin) == \"5.00000000000000000000\"\nassert solution(stdin) == \"5.00000000000000000000\"\n"
    },
    {
        "number": 625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == 2\nassert solution(5) == -3\n\n\"\"\""
    },
    {
        "number": 626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"aa\"\nassert solution(stdin) == \"abca\"\nassert solution(stdin) == \"abda\"\nassert solution(stdin) == \"acda\"\nassert solution(stdin) == \"bcda\"\n"
    },
    {
        "number": 628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"24\"\n\nassert solution(stdin) == \"64\"\n\nassert solution(stdin) == \"24\"\n\nassert solution(stdin) == \"64\"\n\nassert solution(stdin) == \"24\""
    },
    {
        "number": 629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '11'\n"
    },
    {
        "number": 630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n\"\"\""
    },
    {
        "number": 634,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"WIN\"\n\nassert solution(stdin) == \"LOSE\"\n\n\"\"\""
    },
    {
        "number": 635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 636,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 0 0 0 2 3\"\nassert solution(stdin) == \"0 0 0 0 0 2 3\"\nassert solution(stdin) == \"0 0 0 0 0 2 3\"\nassert solution(stdin) == \"0 0 0 0 0 2 3\"\nassert solution(stdin) == \"0 0 0 0 0 2 3\"\n"
    },
    {
        "number": 639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 0 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3\"\n"
    },
    {
        "number": 641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"52\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"52\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"52\"\n"
    },
    {
        "number": 642,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"-\"\n"
    },
    {
        "number": 644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"OVERFLOW!!!\", \"Overflow happened during execution of $f(0)$\"\nassert solution(stdin) == \"161\", \"Overflow happened during execution of $f(0)$\"\nassert solution(stdin) == \"0\", \"Overflow happened during execution of $f(0)$\"\nassert solution(stdin) == \"0\", \"Overflow happened during execution of $f(0)$\"\nassert solution(stdin) == \"0\", \"Overflow happened during execution of $f(0)$\"\n"
    },
    {
        "number": 645,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 646,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100\"\nassert solution(stdin) == \"100\"\nassert solution(stdin) == \"100\"\nassert solution(stdin) == \"100\"\nassert solution(stdin) == \"100\"\n"
    },
    {
        "number": 647,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 4\"\n"
    },
    {
        "number": 648,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"30\"\n\n-----Constraints-----\n0 \u2264 m \u2264 1000\n0 \u2264 b \u2264 10000\n\n-----Time Limit: 1 sec\n\n-----Space Limit: 1 sec\n\n-----Alternatives\n\n1. Use a stack to store the coordinates of the points that are inside the rectangle.\n2. Use a queue to store the coordinates of the points that are outside the rectangle.\n3. Use a stack to store the coordinates of the points that are inside the rectangle.\n4. Use a queue to store the coordinates of the points that are outside the rectangle.\n5. Use a stack to store the coordinates of the points that are inside the rectangle.\n6. Use a queue to store the coordinates of the points that are outside the rectangle.\n7. Use a stack to store the coordinates of the points that are inside the rectangle.\n8. Use a queue to store the coordinates of the points that are outside the rectangle.\n9. Use a stack to store the coordinates of the points that are inside the rectangle.\n10. Use a queue to store the coordinates of the points that are outside the rectangle.\n11. Use a stack to store the coordinates of the points that are inside the rectangle.\n12. Use a queue to store the coordinates of the points that are outside the rectangle.\n13. Use a stack to store the coordinates of the points that are inside the rectangle.\n14. Use a queue to store the coordinates of the points that are outside the rectangle.\n15. Use a stack to store the coordinates of the points that are inside the rectangle.\n16. Use a queue to store the coordinates of the points that are outside the rectangle.\n17. Use a stack to store the coordinates of the points that are inside the rectangle.\n18. Use a queue to store the coordinates of the points that are outside the rectangle.\n19. Use a stack to store the coordinates of the points that are inside the rectangle.\n20. Use a queue to store the coordinates of the points that are outside the rectangle.\n21. Use a stack to store the coordinates of the points that are inside the rectangle.\n22. Use a queue to store the coordinates of the points that are outside the rectangle.\n23. Use a stack to store the coordinates of the points that are inside the rectangle.\n24. Use a queue to store the coordinates of the points that are outside the rectangle.\n25. Use a stack to store the coordinates of the points that are inside the rectangle.\n26. Use a queue to store the coordinates of the points that are outside the rectangle.\n27. Use a stack to store the coordinates of the points that are inside the rectangle.\n28. Use a queue to store the coordinates of the points that are outside the rectangle.\n29. Use a stack to store the coordinates of the points that are inside the rectangle.\n30. Use a queue to store the coordinates of the points that are outside the rectangle.\n\n\"\"\"\n\nm, b = map(int, input().split())"
    },
    {
        "number": 649,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '39'\nassert solution(stdin) == '85'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 650,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"NEAT\") == \"YES\"\nassert solution(\"WORD\") == \"NO\"\nassert solution(\"CODER\") == \"NO\"\nassert solution(\"APRILFOOL\") == \"NO\"\nassert solution(\"AI\") == \"YES\"\n"
    },
    {
        "number": 651,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 652,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 653,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1010000011'\nassert solution(stdin) == '1100000010'\nassert solution(stdin) == '1010000011'\nassert solution(stdin) == '1100000011'\nassert solution(stdin) == '1010000011'\n"
    },
    {
        "number": 654,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 655,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"White\"\nassert solution(stdin) == \"Black\"\n"
    },
    {
        "number": 656,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 657,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2147483648\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n0 <= A, B <= 10^9\n0 <= x, y, z <= 10^9\n\n\"\"\""
    },
    {
        "number": 658,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5.0000000000\"\n\n\"\"\""
    },
    {
        "number": 659,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 660,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"35 32\"\nassert solution(stdin) == \"20 15\"\nassert solution(stdin) == \"20 15\"\nassert solution(stdin) == \"20 15\"\nassert solution(stdin) == \"20 15\"\n"
    },
    {
        "number": 661,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0 0 1 1\"\nassert solution(input()) == \"0 0 1 1\"\nassert solution(input()) == \"0 0 1 1\"\nassert solution(input()) == \"0 0 1 1\"\nassert solution(input()) == \"0 0 1 1\"\n"
    },
    {
        "number": 662,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 663,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= r <= 10^5\n\n1 <= x, y, x', y' <= 10^5\n\n1 <= x, y <= 10^5\n\n1 <= x, y <= 10^5\n\n1 <= x, y' <= 10^5\n\n1 <= x', y' <= 10^5\n\n1 <= x, y' <= 10^5\n\n1 <= x, y' <= 10^5\n\n[Time Limit]\n1 second (or less)\n\n[Memory Limit]\n256 MB (or less)\n\n-----Submissions-----\n\nSubmissions\n\nTime Limit: 1 second (or less)\n\nMemory Limit: 256 MB (or less)\n\n\"\"\""
    },
    {
        "number": 664,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 665,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 666,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 667,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 668,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 669,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"19\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 670,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4.2426406871\"\nassert solution(stdin) == \"6.1622776602\"\nassert solution(stdin) == \"4.2426406871\"\nassert solution(stdin) == \"6.1622776602\"\nassert solution(stdin) == \"4.2426406871\"\n"
    },
    {
        "number": 671,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 672,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"infinity\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n21 5\n\nSample Output\n\n2\n\nSample Explanation\n\nThe Modular Equation $a \\operatorname{mod} x = b$ is solved using the following steps:\n\n1. $a \\operatorname{mod} x = b$\n2. $a \\operatorname{mod} x = b$\n3. $a \\operatorname{mod} x = b$\n4. $a \\operatorname{mod} x = b$\n5. $a \\operatorname{mod} x = b$\n6. $a \\operatorname{mod} x = b$\n7. $a \\operatorname{mod} x = b$\n8. $a \\operatorname{mod} x = b$\n9. $a \\operatorname{mod} x = b$\n10. $a \\operatorname{mod} x = b$\n11. $a \\operatorname{mod} x = b$\n12. $a \\operatorname{mod} x = b$\n13. $a \\operatorname{mod} x = b$\n14. $a \\operatorname{mod} x = b$\n15. $a \\operatorname{mod} x = b$\n16. $a \\operatorname{mod} x = b$\n17. $a \\operatorname{mod} x = b$\n18. $a \\operatorname{mod} x = b$\n19. $a \\operatorname{mod} x = b$\n20. $a \\operatorname{mod} x = b$\n21. $a \\operatorname{mod} x = b$\n\n\"\"\""
    },
    {
        "number": 673,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 3) == 6\nassert solution(25, 13) == 26\nassert solution(26, 13) == 39\n"
    },
    {
        "number": 674,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"cfmailru\"\nassert solution(stdin) == \"mailrucf\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 675,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 676,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 677,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 678,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.666667'\nassert solution(stdin) == '0.666667'\nassert solution(stdin) == '0.666667'\nassert solution(stdin) == '0.666667'\nassert solution(stdin) == '0.666667'\n"
    },
    {
        "number": 679,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\".BAC.A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z\") == \"Yes\"\nassert solution(\".BAC.A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.A.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.B.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.C.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.D.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.E.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.F.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.J.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.L.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.M.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.N.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.O.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.P.G.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.R.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.S.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.T.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.U.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.V.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.W.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.X.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Y.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J.K.L.M.N.O.P.Q.R.S.T.U.V.W.X.Y.Z.Z.H.I.J."
    },
    {
        "number": 680,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 1000\n\n-----Time Limit: 1 second***\n\nSample Input\n\nInput\n\n0 0\n1 1\n2 2\n\nOutput\n\n5\n0 0\n1 0\n1 1\n1 2\n2 2\n\nSample Output\n\n5\n0 0\n1 0\n1 1\n1 2\n2 2\n\nExplanation\n\nThe first example is shown on the picture in the legend.\n\nThe second example is illustrated with the following image: [Image]\n"
    },
    {
        "number": 681,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 682,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 0 1\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\n"
    },
    {
        "number": 683,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 8\nassert solution(10) == 1024\nassert solution(0) == 0\nassert solution(1) == 1\nassert solution(2) == 2\n"
    },
    {
        "number": 684,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4 5\"\nassert solution(stdin) == \"5 5 5\"\nassert solution(stdin) == \"182690 214748 300999\"\nassert solution(stdin) == \"1 977539810 977539810\"\nassert solution(stdin) == \"1 1 977539810 977539810\"\n"
    },
    {
        "number": 685,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"1999999999\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"18\"\n"
    },
    {
        "number": 686,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 687,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '412 413'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 688,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 689,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 690,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"O-|OOO-O\"\nassert solution(stdin) == \"O-|OOO-O\"\nassert solution(stdin) == \"O-|OOO-O\"\nassert solution(stdin) == \"O-|OOO-O\"\nassert solution(stdin) == \"O-|OOO-O\"\n"
    },
    {
        "number": 691,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 692,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.5'\nassert solution(stdin) == '0.5'\nassert solution(stdin) == '0.5'\nassert solution(stdin) == '0.5'\nassert solution(stdin) == '0.5'\n"
    },
    {
        "number": 693,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\n\"\"\""
    },
    {
        "number": 694,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 695,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 696,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 697,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 698,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 699,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '8'\nassert solution(stdin) == '14'\nassert solution(stdin) == '26'\n"
    },
    {
        "number": 700,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\""
    },
    {
        "number": 701,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"hot\"\nassert solution(stdin) == \"ot\"\nassert solution(stdin) == \"hot\"\nassert solution(stdin) == \"ot\"\nassert solution(stdin) == \"hot\"\n"
    },
    {
        "number": 702,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Alternatives-----\nEasy\n\n\"\"\""
    },
    {
        "number": 703,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 704,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Left\"\nassert solution(stdin) == \"Down\"\nassert solution(stdin) == \"Left\"\nassert solution(stdin) == \"Down\"\nassert solution(stdin) == \"Left\"\n"
    },
    {
        "number": 705,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Karen\"\n\nassert solution(stdin) == \"Koyomi\"\n\nassert solution(stdin) == \"Karen\"\n\nassert solution(stdin) == \"Koyomi\"\n\nassert solution(stdin) == \"Karen\""
    },
    {
        "number": 706,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '25'\nassert solution(stdin) == '79'\n"
    },
    {
        "number": 707,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 708,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '2 7 3 6 5 4'\nassert solution(stdin) == '2 7 1 3 6 5 4'\nassert solution(stdin) == '2 7 1 5 4 6 2 3'\nassert solution(stdin) == '2 7 1 5 4 6 2 3'\n"
    },
    {
        "number": 709,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 2\nassert solution(8) == 1\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 2\n"
    },
    {
        "number": 710,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 16\n\n-----Constraints-----\n1 <= n <= 50\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 GB\n\n-----Alternatives-----\n\nInput\n4\nZCTH\n\nOutput\n2\nInput\n5\nZDATG\n\nOutput\n5\nInput\n6\nAFBAKC\n\nOutput\n16\n\"\"\""
    },
    {
        "number": 711,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 712,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0.9375\nassert solution(stdin) == 0.4\nassert solution(stdin) == 0.5\nassert solution(stdin) == 0.50\nassert solution(stdin) == 0.50\n"
    },
    {
        "number": 713,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 714,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 715,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"D\"\nassert solution(stdin) == \"C\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"A\"\nassert solution(stdin) == \"Ftiasch_is_cute\"\n"
    },
    {
        "number": 716,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 717,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n\n1 \u2264 n \u2264 1000\n1 \u2264 s_{i} \u2264 1000\n1 \u2264 d_{i} \u2264 1000\n\nTime Limit: 1 sec\n\nSample TestCase 1:\n\nInput\n3\n2 2\n1 2\n2 2\n\nOutput\n4\n\nInput\n2\n10 1\n6 5\n\nOutput\n11\n\nExplanation\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10 and 11.\n\nBorya can visit all doctors on days 2, 3 and 4.\n\nBorya can visit all doctors on days 10"
    },
    {
        "number": 718,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 719,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 19\nassert solution(2) == 28\nassert solution(3) == 28\nassert solution(4) == 28\nassert solution(5) == 28\n"
    },
    {
        "number": 720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2999\"\nassert solution(stdin) == \"1999\"\nassert solution(stdin) == \"1999\"\nassert solution(stdin) == \"1999\"\nassert solution(stdin) == \"1999\"\n"
    },
    {
        "number": 723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '50'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\nassert solution(stdin) == '50'\n"
    },
    {
        "number": 724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '#Black&White'\nassert solution(stdin) == '#Color'\n"
    },
    {
        "number": 726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 727,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 729,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"O\"\nassert solution(input()) == \"D\"\nassert solution(input()) == \"O\"\nassert solution(input()) == \"D\"\nassert solution(input()) == \"O\"\n"
    },
    {
        "number": 731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"113\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 \u2264 x, y \u2264 1000\n1 \u2264 a, b \u2264 2\u00b710^9\n\n-----Time Limit-----\n1 minute\n\n-----Memory Limit-----\n256 megabytes\n\n-----Solutions-----\n\nInput:\n2 3 6 18\n\nOutput:\n3\n\nExplanation:\n\nIahub has the following scheme of painting: he skips x - 1 consecutive bricks, then he paints the x-th one. That is, he'll paint bricks x, 2\u00b7x, 3\u00b7x and so on red.\n\nIahub has the following scheme of painting: he skips y - 1 consecutive bricks, then he paints the y-th one. That is, he'll paint bricks y, 2\u00b7y, 3\u00b7y and so on pink.\n\nAfter painting the wall all day, the boys observed that some bricks are painted both red and pink. Iahub has a lucky number a and Floyd has a lucky number b. Boys wonder how many bricks numbered no less than a and no greater than b are painted both red and pink. This is exactly your task: compute and print the answer to the question.\n\n\"\"\""
    },
    {
        "number": 734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\nBlue cells indicate removed blocks. There are $10$ blue cells, so the answer is $10$.[Image]\n"
    },
    {
        "number": 735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\nassert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\nassert solution(stdin) == \"yes\"\n"
    },
    {
        "number": 736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == 8\nassert solution(11) == 14\nassert solution(22) == 20\nassert solution(22) == 20\nassert solution(22) == 20\n"
    },
    {
        "number": 738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 37111519 % 10007\n"
    },
    {
        "number": 740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"32\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"32\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"32\"\n"
    },
    {
        "number": 741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"807905441\"\n"
    },
    {
        "number": 746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.00000000000000000000\"\nassert solution(stdin) == \"0.50000000000000000000\"\nassert solution(stdin) == \"0.00000000000000000000\"\nassert solution(stdin) == \"0.00000000000000000000\"\nassert solution(stdin) == \"0.00000000000000000000\"\n"
    },
    {
        "number": 747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1 2 4'\nassert solution(stdin) == '1 2 6'\nassert solution(stdin) == '1 2 3'\nassert solution(stdin) == '1 2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n\"\"\""
    },
    {
        "number": 750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 38\n\nassert solution(stdin) == 10\n\nassert solution(stdin) == 10\n\nassert solution(stdin) == 10\n\nassert solution(stdin) == 10"
    },
    {
        "number": 751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1/3\"\nassert solution(stdin) == \"1/4\"\nassert solution(stdin) == \"1/2\"\nassert solution(stdin) == \"1/1\"\nassert solution(stdin) == \"1/0\"\n"
    },
    {
        "number": 754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 1\nassert solution(12) == 3\nassert solution(12) == 3\nassert solution(12) == 3\nassert solution(12) == 3\n"
    },
    {
        "number": 756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"35\"\nassert solution(stdin) == \"90\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"90\"\nassert solution(stdin) == \"35\"\n"
    },
    {
        "number": 757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n\n1 <= n <= 50\n1 <= m <= 50\n1 <= k <= 50\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1MB\n\n-----Alternatives\n\n1. Use a dictionary to store the number of sockets on each supply-line filter.\n2. Use a list to store the number of sockets on each device.\n3. Use a set to store the number of sockets on each supply-line filter.\n4. Use a dictionary to store the number of sockets on each device.\n5. Use a list to store the number of sockets on each device.\n6. Use a set to store the number of sockets on each device.\n7. Use a dictionary to store the number of sockets on each device.\n8. Use a list to store the number of sockets on each device.\n9. Use a set to store the number of sockets on each device.\n10. Use a dictionary to store the number of sockets on each device.\n11. Use a list to store the number of sockets on each device.\n12. Use a set to store the number of sockets on each device.\n13. Use a dictionary to store the number of sockets on each device.\n14. Use a list to store the number of sockets on each device.\n15. Use a set to store the number of sockets on each device.\n16. Use a dictionary to store the number of sockets on each device.\n17. Use a list to store the number of sockets on each device.\n18. Use a set to store the number of sockets on each device.\n19. Use a dictionary to store the number of sockets on each device.\n20. Use a list to store the number of sockets on each device.\n21. Use a set to store the number of sockets on each device.\n22. Use a dictionary to store the number of sockets on each device.\n23. Use a list to store the number of sockets on each device.\n24. Use a set to store the number of sockets on each device.\n25. Use a dictionary to store the number of sockets on each device.\n26. Use a list to store the number of sockets on each device.\n27. Use a set to store the number of sockets on each device.\n28. Use a dictionary to store the number of sockets on each device.\n29. Use a list to store the number of sockets on each device.\n30. Use a set to store the number of sockets on each device.\n31. Use a dictionary to store the number of sockets on each device.\n32. Use a list to store the number of sockets on each device.\n33. Use a set to store the number of sockets on each device.\n34. Use a dictionary to store the number of sockets on each device.\n35. Use a list to store the number of sockets on each device.\n36. Use a set to store the number of sockets on each device.\n37. Use a dictionary to store the number of sockets on each device.\n38. Use a list to store the number of sockets on each device.\n39. Use a set to store the number of sockets on each device.\n40. Use a dictionary to store the number of sockets on each device.\n41. Use a list to store the number of sockets on each device.\n42. Use a set to store the number of sockets on each device.\n43. Use a dictionary to store the number of sockets on each device.\n44. Use a list to store the number of sockets on each device.\n45. Use a set to store the number of sockets on each device.\n46. Use a dictionary to store the number of sockets on each device.\n47. Use a list to store the number of sockets on each device.\n48. Use a set to store the number of sockets on each device.\n49. Use a dictionary to store the number of sockets on each device.\n50. Use a list to store the number of sockets on each device.\n51. Use a set to store the number of sockets on each device.\n52. Use a dictionary to store the number of sockets on each device.\n53. Use a list to store the number of sockets on each device.\n54. Use a set to store the number of sockets on each device.\n55. Use a dictionary to store the number of sockets on each device.\n56. Use a list to store the number of sockets on each device.\n57. Use a set to store the number of sockets on each device.\n58. Use a dictionary to store the number of sockets on each device.\n59. Use a list to store the number of sockets on each device.\n60. Use a set to store the number of sockets on each device.\n61. Use a dictionary to store the number of sockets on each device.\n62. Use a list to store the number of sockets on each device.\n63. Use a set to store the number of sockets on each device.\n64. Use a dictionary to store the number of sockets on each device.\n65. Use a list to store the number of sockets on each device.\n66. Use a set to store the number of sockets on each device.\n67. Use a dictionary to store the number of sockets on each device.\n68. Use a list to store the number of sockets on each device.\n69. Use a set to store the number of sockets on each device.\n70. Use a dictionary to store the number of sockets on each device.\n71. Use a list to store the number of sockets on each device.\n72. Use a set to store the number of sockets on each device.\n73. Use a dictionary to store the number of sockets on each device.\n74. Use a list to store the number of sockets on each device.\n75. Use a set to store the number of sockets on each device.\n76. Use a dictionary to store the number of sockets on each device.\n77. Use a list to store the number of sockets on each device.\n78. Use a set to store the number of sockets on each device.\n79. Use a dictionary to store the number of sockets on each device.\n80. Use a list to store the number of sockets on each device.\n81. Use a set to store the number of sockets on each device.\n82. Use a dictionary to store the number of sockets on each device.\n83. Use a list to store the number of sockets on each device.\n84. Use a set to store the number of sockets on each device.\n85. Use a dictionary to store the number of sockets on each device.\n86. Use a list to store the"
    },
    {
        "number": 758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\""
    },
    {
        "number": 759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1365.0000'\nassert solution(stdin) == '25200.0000'\nassert solution(stdin) == '25200.0000'\nassert solution(stdin) == '25200.0000'\nassert solution(stdin) == '25200.0000'\n"
    },
    {
        "number": 760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 20\n\n-----Constraints-----\n\n1 \u2264 |s| \u2264 200\n1 \u2264 k \u2264 200\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Bug Fixes-----\n\n1. The input string is not a valid string.\n2. The input string contains only small English letters.\n3. The input string contains only small English letters.\n4. The input string contains only small English letters.\n5. The input string contains only small English letters.\n6. The input string contains only small English letters.\n7. The input string contains only small English letters.\n8. The input string contains only small English letters.\n9. The input string contains only small English letters.\n10. The input string contains only small English letters.\n11. The input string contains only small English letters.\n12. The input string contains only small English letters.\n13. The input string contains only small English letters.\n14. The input string contains only small English letters.\n15. The input string contains only small English letters.\n16. The input string contains only small English letters.\n17. The input string contains only small English letters.\n18. The input string contains only small English letters.\n19. The input string contains only small English letters.\n20. The input string contains only small English letters.\n\n-----Bug Fixes-----\n\n1. The input string is not a valid string.\n2. The input string contains only small English letters.\n3. The input string contains only small English letters.\n4. The input string contains only small English letters.\n5. The input string contains only small English letters.\n6. The input string contains only small English letters.\n7. The input string contains only small English letters.\n8. The input string contains only small English letters.\n9. The input string contains only small English letters.\n10. The input string contains only small English letters.\n11. The input string contains only small English letters.\n12. The input string contains only small English letters.\n13. The input string contains only small English letters.\n14. The input string contains only small English letters.\n15. The input string contains only small English letters.\n16. The input string contains only small English letters.\n17. The input string contains only small English letters.\n18. The input string contains only small English letters.\n19. The input string contains only small English letters.\n20. The input string contains only small English letters.\n\n-----Bug Fixes-----\n\n1. The input string is not a valid string.\n2. The input string contains only small English letters.\n3. The input string contains only small English letters.\n4. The input string contains only small English letters.\n5. The input string contains only small English letters.\n6. The input string contains only small English letters.\n7. The input string contains only small English letters.\n8. The input string contains only small English letters.\n9. The input string contains only small English letters.\n10. The input string contains only small English letters.\n11. The input string contains only small English letters.\n12. The input string contains only small English letters.\n13. The input string contains only small English letters.\n14. The input string contains only small English letters.\n15. The input string contains only small English letters.\n16. The input string contains only small English letters.\n17. The input string contains only small English letters.\n18. The input string contains only small English letters.\n19. The input string contains only small English letters.\n20. The input string contains only small English letters.\n\n\"\"\""
    },
    {
        "number": 761,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 16\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= a_i <= 100\n\n1 <= a_1 <= 100\n\n1 <= a_2 <= 100\n\n1 <= a_n <= 100\n\n\"\"\""
    },
    {
        "number": 764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA string of bits.\n\n\n[example]\n\nInput\n4\n1010\n\nOutput\n3\n\n\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= k <= n\n\n0 <= y <= 1\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of bits.\n\n\n[output] string\n\nA"
    },
    {
        "number": 765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\"\"\""
    },
    {
        "number": 767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= z <= 10^9\n\n------Time complexity-----\nO(n^2)\n\n------Space complexity-----\nO(n)\n\n------Algorithm-----\n\n1. Sort the points by their x-coordinate.\n2. For each point $i$ and $j$, find the distance between them.\n3. If $|x_i - x_j| \\ge z$, then add $i$ and $j$ to the set of matched points.\n4. If $|x_i - x_j| \\ge z$, then add $i$ and $j$ to the set of unmatched points.\n5. Repeat step 2 until all the points are matched.\n6. Return the maximum number of pairs of points you can match with each other.\n\n\"\"\""
    },
    {
        "number": 768,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"001010\"\nassert solution(stdin) == \"001011\"\nassert solution(stdin) == \"001100\"\nassert solution(stdin) == \"010101\"\nassert solution(stdin) == \"010110\"\n"
    },
    {
        "number": 773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 774,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2/5\"\nassert solution(stdin) == \"7/2\"\nassert solution(stdin) == \"7/5\"\nassert solution(stdin) == \"7/10\"\nassert solution(stdin) == \"7/20\"\n"
    },
    {
        "number": 775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 14\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= a, b, c <= 10^5\n1 <= m <= 3\u00b710^5\n\n\"\"\""
    },
    {
        "number": 777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(a) == 51\nassert solution(hi) == 76\nassert solution(hi) == 76\nassert solution(hi) == 76\nassert solution(hi) == 76\n"
    },
    {
        "number": 778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1\nassert solution(10) == 3\nassert solution(5) == 1\nassert solution(1) == 1\nassert solution(0) == 0\n"
    },
    {
        "number": 780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1 17 7 7 7 -1 2 17 2 7'\nassert solution(stdin) == '17 17 7 5 5 5 2 7 2 7'\nassert solution(stdin) == '7 7 7 4 3 7 1 7 2 7'\nassert solution(stdin) == '-1 5 7 3 7 -1 2 9 2 7'\nassert solution(stdin) == '2 2 1 2 1 2 2 2 0 1'\n"
    },
    {
        "number": 781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= stdin.length <= 100\n1 <= stdin[i].length <= 100\nstdin[i] consists of only characters 'W' or 'B'.\n\n-----Time Limit-----\n1 minute\n\n-----Divide and Conquer-----\n\n\"\"\""
    },
    {
        "number": 782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n1 <= m <= 10^6\n1 <= s_1, s_2,..., s_{m} <= 10^6\ns_i < s_i + 1, s_i < s_i + m\n\n-----Time Limit-----\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)\n\nO(m * n)"
    },
    {
        "number": 783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2 0 2 0\"\nassert solution(stdin) == \"3 2 0 2 0\"\nassert solution(stdin) == \"3 2 0 2 0\"\nassert solution(stdin) == \"3 2 0 2 0\"\nassert solution(stdin) == \"3 2 0 2 0\"\n"
    },
    {
        "number": 784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 16\nassert solution(stdin) == 18\nassert solution(stdin) == 18\nassert solution(stdin) == 18\nassert solution(stdin) == 18\n"
    },
    {
        "number": 786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Infinity\"\nassert solution(stdin) == \"Impossible\"\nassert solution(stdin) == \"1897\"\nassert solution(stdin) == \"1897\"\nassert solution(stdin) == \"1897\"\n"
    },
    {
        "number": 787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"A221033\") == 21\nassert solution(\"A223635\") == 22\nassert solution(\"A232726\") == 23\nassert solution(\"A234567\") == 23\nassert solution(\"A2345678\") == 23\n"
    },
    {
        "number": 789,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(4) == 1\nassert solution(7) == 2\nassert solution(77) == 6\nassert solution(77) == 6\nassert solution(77) == 6\n"
    },
    {
        "number": 790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 35\n\n\"\"\"\n\nimport sys\n\nN, K = map(int, sys.stdin.readline().split())\nA = list(map(int, sys.stdin.readline().split()))\nD = list(map(int, sys.stdin.readline().split()))\n\nA.sort()\nD.sort()"
    },
    {
        "number": 791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 5\n\nassert solution(stdin) == 6\n\nassert solution(stdin) == 7"
    },
    {
        "number": 792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1 3 1 1 2\"\nassert solution(stdin) == \"1 1 1 1 1 2\"\nassert solution(stdin) == \"1 1 1 1 1 2\"\nassert solution(stdin) == \"1 1 1 1 1 2\"\nassert solution(stdin) == \"1 1 1 1 1 2\"\n"
    },
    {
        "number": 795,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= k <= 10^9\n\n[input] string stdin\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n2 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput 2:\n\n689974806\n\n[input] string\n\nA string of digits.\n\n[output] string\n\nA string of digits.\n\n[example]\n\nInput 1:\n\n1 2\n\nOutput 1:\n\n7\n\nInput 2:\n\n123 456789\n\nOutput"
    },
    {
        "number": 797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '111'\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n0 < g_0, x, y < 10^9\n0 < g_0, x, y < 10^9\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Alternatives-----\n\n1.\n\n2.\n\n3.\n\n4.\n\n5.\n\n-----Submissions-----\n\nQuestion:\n\nhttps://www.hackerrank.com/challenges/seryozha-recreation-center/problem\n"
    },
    {
        "number": 798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n\n-----Constraints-----\n\n1 \u2264 a \u2264 10^6\n1 \u2264 b \u2264 10^6\n1 \u2264 c \u2264 10^6\n\n-----Time Limit-----\n\nO(n^3)\n\n\n-----Submissions-----\n\nSample Execution\n$ python3 solution.py\n1 1 2\n\n$ python3 solution.py\n3 4 5\n\n$ python3 solution.py\n4 1 1\n\n$ python3 solution.py\n4 1 2\n\n$ python3 solution.py\n4 1 3\n\n$ python3 solution.py\n4 1 4\n\n$ python3 solution.py\n4 1 5\n\n$ python3 solution.py\n4 1 6\n\n$ python3 solution.py\n4 1 7\n\n$ python3 solution.py\n4 1 8\n\n$ python3 solution.py\n4 1 9\n\n$ python3 solution.py\n4 1 10\n\n$ python3 solution.py\n4 1 11\n\n$ python3 solution.py\n4 1 12\n\n$ python3 solution.py\n4 1 13\n\n$ python3 solution.py\n4 1 14\n\n$ python3 solution.py\n4 1 15\n\n$ python3 solution.py\n4 1 16\n\n$ python3 solution.py\n4 1 17\n\n$ python3 solution.py\n4 1 18\n\n$ python3 solution.py\n4 1 19\n\n$ python3 solution.py\n4 1 20\n\n$ python3 solution.py\n4 1 21\n\n$ python3 solution.py\n4 1 22\n\n$ python3 solution.py\n4 1 23\n\n$ python3 solution.py\n4 1 24\n\n$ python3 solution.py\n4 1 25\n\n$ python3 solution.py\n4 1 26\n\n$ python3 solution.py\n4 1 27\n\n$ python3 solution.py\n4 1 28\n\n$ python3 solution.py\n4 1 29\n\n$ python3 solution.py\n4 1 30\n\n$ python3 solution.py\n4 1 31\n\n$ python3 solution.py\n4 1 32\n\n$ python3 solution.py\n4 1 33\n\n$ python3 solution.py\n4 1 34\n\n$ python3 solution.py\n4 1 35\n\n$ python3 solution.py\n4 1 36\n\n$ python3 solution.py\n4 1 37\n\n$ python3 solution.py\n4 1 38\n\n$ python3 solution.py\n4 1 39\n\n$ python3 solution.py\n4 1 40\n\n$ python3 solution.py\n4 1 41\n\n$ python3 solution.py\n4 1 42\n\n$ python3 solution.py\n4 1 43\n\n$ python3 solution.py\n4 1 44\n\n$ python3 solution.py\n4 1 45\n\n$ python3 solution.py\n4 1 46\n\n$ python3 solution.py\n4 1 47\n\n$ python3 solution.py\n4 1 48\n\n$ python3 solution.py\n4 1 49\n\n$ python3 solution.py\n4 1 50\n\n$ python3 solution.py\n4 1 51\n\n$ python3 solution.py\n4 1 52\n\n$ python3 solution.py\n4 1 53\n\n$ python3 solution.py\n4 1 54\n\n$ python3 solution.py\n4 1 55\n\n$ python3 solution.py\n4 1 56\n\n$ python3 solution.py\n4 1 57\n\n$ python3 solution.py\n4 1 58\n\n$ python3 solution.py\n4 1 59\n\n$ python3 solution.py\n4 1 60\n\n$ python3 solution.py\n4 1 61\n\n$ python3 solution.py\n4 1 62\n\n$ python3 solution.py\n4 1 63\n\n$ python3 solution.py\n4 1 64\n\n$ python3 solution.py\n4 1 65\n\n$ python3 solution.py\n4 1 66\n\n$ python3 solution.py\n4 1 67\n\n$ python3 solution.py\n4 1 68\n\n$ python3 solution.py\n4 1 69\n\n$ python3 solution.py\n4 1 70\n\n$ python3 solution.py\n4 1 71\n\n$ python3 solution.py\n4 1 72\n\n$ python3 solution.py\n4 1 73\n\n$ python3 solution.py\n4 1 74\n\n$ python3 solution.py\n4 1 75\n\n$ python3 solution.py\n4 1 76\n\n$ python3 solution.py\n4 1 77\n\n$ python3 solution.py\n4 1 78\n\n$ python3 solution.py\n4 1 79\n\n$ python3 solution.py\n4 1 80\n\n$ python3 solution.py\n4 1 81\n\n$ python3 solution.py\n4 1 82\n\n$ python3 solution.py\n4 1 83\n\n$ python3 solution.py\n4 1 84\n\n$ python3 solution.py\n4 1 85\n\n$ python3 solution.py\n4 1 86\n\n$ python3 solution.py\n4 1 87\n\n$ python3 solution.py\n4 1 88\n\n$ python3 solution.py\n4 1 89\n\n$ python3 solution.py\n4 1 90\n\n$ python3 solution.py\n4 1 91\n\n$ python3 solution.py\n4 1 92\n\n$ python3 solution.py\n4 1 93\n\n$ python3 solution.py\n4 1 94\n\n$ python3 solution.py\n4 1 95\n\n$ python3 solution.py\n4 1 96\n\n$ python3 solution.py\n4 1 97\n\n$ python3 solution.py\n4 1 98\n\n$ python3 solution.py\n4 1 99\n\n$ python3 solution.py\n4 1 100\n\n$ python3 solution.py\n4 1 101\n\n$ python3 solution.py\n4 1 102\n\n$ python3 solution.py\n4 1 103\n\n$ python3 solution.py\n4 1 104\n\n$ python3 solution.py\n4 1 105\n\n$ python3 solution.py\n4 1 106\n\n$ python3 solution.py\n4 1 107\n\n$ python3 solution.py\n4 1 108\n\n$ python3 solution.py\n4 1 109\n\n$ python3 solution.py\n4 1 110\n\n$ python3 solution.py\n4 1 111\n\n$ python3 solution.py\n4 1 112\n\n$ python3 solution.py\n4 1 113\n\n$ python3 solution.py\n4 1 114\n\n$ python3 solution.py\n4 1 115\n\n$ python3 solution.py\n4 1 116\n\n$ python3 solution.py\n4 1 117\n\n$ python3 solution.py\n4 1 118\n\n$ python3 solution.py\n4 1 119\n\n$ python3 solution.py\n4 1 120\n\n$ python3 solution.py\n4 1 121\n\n$ python3 solution.py\n4 1 122\n\n$ python3 solution.py\n4 1 123\n\n$ python3 solution.py\n4 1 124\n\n$ python3 solution.py\n4 1 125\n\n$ python3 solution"
    },
    {
        "number": 799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '90.0000000000'\nassert solution(stdin) == '135.0000000000'\nassert solution(stdin) == '270.0000000000'\nassert solution(stdin) == '36.8698976458'\n"
    },
    {
        "number": 801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"X\"\nassert solution(stdin) == \"x\"\nassert solution(stdin) == \"X\"\nassert solution(stdin) == \"x\"\n"
    },
    {
        "number": 804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"15\"\n"
    },
    {
        "number": 806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"711426616\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '97'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.234\"\nassert solution(stdin) == \"1E-1\"\nassert solution(stdin) == \"1E2\"\nassert solution(stdin) == \"1E-2\"\nassert solution(stdin) == \"1E-3\"\n"
    },
    {
        "number": 809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 810,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '165'\n"
    },
    {
        "number": 811,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= a, b <= 10^9\n\n\"\"\""
    },
    {
        "number": 812,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 813,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1\"\n"
    },
    {
        "number": 814,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 2 3\"\nassert solution(stdin) == \"2 3 8\"\nassert solution(stdin) == \"2 3 8\"\nassert solution(stdin) == \"2 3 8\"\nassert solution(stdin) == \"2 3 8\"\n"
    },
    {
        "number": 815,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"50\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"21\"\n"
    },
    {
        "number": 816,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 817,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abbcdddeaadfortytw\"\nassert solution(stdin) == \"abbcdddeaadfortytw\"\nassert solution(stdin) == \"abbcdddeaadfortytw\"\nassert solution(stdin) == \"abbcdddeaadfortytw\"\nassert solution(stdin) == \"abbcdddeaadfortytw\"\n"
    },
    {
        "number": 818,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == -1\nassert solution(5) == 10080\nassert solution(6) == 10080\nassert solution(7) == 10080\nassert solution(8) == 10080\n"
    },
    {
        "number": 819,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 820,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 821,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Friendship\"\nassert solution(stdin) == \"Friendship\"\nassert solution(stdin) == \"Friendship\"\n"
    },
    {
        "number": 822,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 2"
    },
    {
        "number": 823,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 824,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\")()()\") == 6\nassert solution(\"(()\") == 6\nassert solution(\"))((()\") == 6\nassert solution(\"))((()\") == 0\nassert solution(\"))((()\") == 0\n"
    },
    {
        "number": 825,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 826,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 827,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9999999999\"\n"
    },
    {
        "number": 828,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 829,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 830,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 3\"\n"
    },
    {
        "number": 831,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 18\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1\n\nassert solution(stdin) == -1"
    },
    {
        "number": 832,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 833,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 60\n\n-----Constraints-----\n1 <= n <= 3000\n1 <= v <= 3000\n1 <= a_i <= b_i <= 3000\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n\nSample Input\n\n2 3\n1 5\n2 3\n\nSample Output\n\n8\n\nExplanation\n\nValera collects 3 fruits on the 1-st tree, 2 fruits on the 2-nd tree and 1 fruit on the 1-st tree. Valera can collect 60 fruits, the remaining fruit will simply wither.\n\n\"\"\"\n\nclass Solution:\n    def maxFruit(self, n: int, v: int, a: List[int], b: List[int]) -> int:\n        \n        def dfs(a, b, i):\n            if i == n:\n                return 0\n            \n            if a[i] == b[i]:\n                return 1 + dfs(a, b, i + 1)\n            \n            return max(dfs(a, b, i + 1), dfs(a, b, i + 1) + v)\n        \n        return dfs(a, b, 0)\n"
    },
    {
        "number": 834,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 835,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 200000000001\n"
    },
    {
        "number": 836,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 837,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nInput\n8 1 10\n\nOutput\n8\n"
    },
    {
        "number": 838,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\n\"\"\""
    },
    {
        "number": 839,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"32\"\n"
    },
    {
        "number": 840,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 841,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"113337\"\nassert solution(stdin) == \"1337\"\nassert solution(stdin) == \"1337\"\nassert solution(stdin) == \"1337\"\nassert solution(stdin) == \"1337\"\n"
    },
    {
        "number": 842,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 11\nassert solution(10) == 1001\nassert solution(100) == 10001\nassert solution(1000000) == 1000101\nassert solution(10000000) == 100010101\n"
    },
    {
        "number": 843,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"INFINITE\"\n"
    },
    {
        "number": 844,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 845,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"allyouneedislove\"\n\nInput\nR\ns;;upimrrfod;pbr\n\nOutput\nqwertyuiop\n\nassert solution(stdin) == \"qwertyuiop\"\n\nInput\nR\ns;;upimrrfod;pbr\n\nOutput\nasdfghjkl\n\nassert solution(stdin) == \"asdfghjkl\"\n\nInput\nR\ns;;upimrrfod;pbr\n\nOutput\nzxcvbnm\n\nassert solution(stdin) == \"zxcvbnm\"\n\nInput\nR\ns;;upimrrfod;pbr\n\nOutput\nqwertyuiop\n\nassert solution(stdin) == \"qwertyuiop\"\n\nInput\nR\ns;;upimrrfod;pbr\n\nOutput\nqwertyuiop"
    },
    {
        "number": 846,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 3 4 4\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 3 4 5\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 847,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 848,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 849,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.666666666667'\n\nInput\n1 2 1 2\n\nOutput\n0.666666666667\n"
    },
    {
        "number": 850,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 10 100\"\nassert solution(stdin) == \"0 1 10 100\"\nassert solution(stdin) == \"0 1 10 100\"\nassert solution(stdin) == \"0 1 10 100\"\nassert solution(stdin) == \"0 1 10 100\"\n"
    },
    {
        "number": 851,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 852,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\""
    },
    {
        "number": 853,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5555555550\n\nassert solution(stdin) == -1\n\n-----Constraints-----\n1 <= n <= 10^3\n\nTime Limit: 1 sec\n\nSample Input\n\n4\n5 0 5 0\n\nSample Output\n\n5555555550\n\nExplanation\n\nThe cards are numbered from 0 to 5.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n\nThe cards contain digits 0, 5, and 0.\n"
    },
    {
        "number": 854,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 855,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 856,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"391\"\n\n-----Constraints-----\n\n1 <= t <= 10^5\n-10^9 <= a_i <= 10^9\n\n\"\"\""
    },
    {
        "number": 857,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7 1 2\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 0\"\n"
    },
    {
        "number": 858,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(3) == 1\nassert solution(99) == 49\nassert solution(0) == 0\nassert solution(1) == 0\n"
    },
    {
        "number": 859,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.000000000000'\nassert solution(stdin) == '0.500000000000'\nassert solution(stdin) == '0.000000000000'\nassert solution(stdin) == '0.000000000000'\nassert solution(stdin) == '0.000000000000'\n"
    },
    {
        "number": 860,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 861,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5.4142135624\"\n\n[Challenge]\n\n1. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n2. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n3. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n4. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n5. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n6. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n7. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n8. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n9. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n10. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n11. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n12. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n13. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n14. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n15. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n16. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n17. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n18. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n19. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n20. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n21. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n22. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n23. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n24. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n25. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n26. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n27. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n28. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n29. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n30. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n31. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n32. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n33. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n34. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n35. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n36. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n37. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n38. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n39. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n40. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n41. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n42. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n43. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n44. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n45. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n46. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n47. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n48. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n49. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n50. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n51. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n52. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n53. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n54. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n55. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n56. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n57. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n58. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n59. What is the average distance the fly went along the coordinate plane during each of these m^2 days?\n\n60. What is the average distance the fly went along the"
    },
    {
        "number": 862,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 863,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Constraints-----\n\n1 <= t_{a} <= 120\n1 <= b <= 120\n0 <= h <= 24\n0 <= m <= 59\n\nTime Limit: 1 sec\nSpace Limit: 1 MiB\n\n-----Time Limit-----\n\n1 second\n\n-----Solutions-----\n\nInput:\n10 30\n10 35\n05:20\n05:50\n\nOutput:\n5\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n60 120\n24 100\n13:00\n13:30\n\nOutput:\n9\n\nInput:\n"
    },
    {
        "number": 864,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 865,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"110\"\n"
    },
    {
        "number": 866,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 867,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 868,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\nassert solution(stdin) == '8'\nassert solution(stdin) == '1898884'\nassert solution(stdin) == '4'\nassert solution(stdin) == '8'\n"
    },
    {
        "number": 869,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 4\"\n"
    },
    {
        "number": 870,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.00000000000000000000\"\nassert solution(stdin) == \"2.66666666666666650000\"\nassert solution(stdin) == \"2.00000000000000000000\"\nassert solution(stdin) == \"2.00000000000000000000\"\nassert solution(stdin) == \"2.00000000000000000000\"\n"
    },
    {
        "number": 871,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"24\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 872,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4 7\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n3\n1 1\n\nOutput\n1 1\n\nExample 2:\n\nInput\n3\n1 1\n\nOutput\n1 1\n\nExample 3:\n\nInput\n3\n1 1\n\nOutput\n1 1\n\nExample 4:\n\nInput\n3\n1 1\n\nOutput\n1 1\n\nExample 5:\n\nInput\n3\n1 1\n\nOutput\n1 1\n\nConstraints:\n\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n3\n1 1\n\nSample Output\n\n1 1\n\nExplanation\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1 1\n\nThe array is:\n\n1 1\n1"
    },
    {
        "number": 873,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 874,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 2\nassert solution(stdin) == 2 1 4 3\nassert solution(stdin) == 2 1 4 3 2\nassert solution(stdin) == 2 1 4 3 2 1\n"
    },
    {
        "number": 875,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4\"\n"
    },
    {
        "number": 876,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 877,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 878,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Finite\"\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= a_i <= 3\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Space Limit-----\n\nO(n)\n\n\n-----Tags-----\n\nabstract\n\ndiscuss\n"
    },
    {
        "number": 879,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 880,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"56\"\nassert solution(stdin) == \"30052700\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 881,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 882,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(winlose???winl???w??) == 5\nassert solution(glo?yto?e??an?) == 3\nassert solution(??c?????) == 2\nassert solution(or) == 2\nassert solution(abcab) == 2\n"
    },
    {
        "number": 883,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 884,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"63\"\nassert solution(stdin) == \"813023575\"\nassert solution(stdin) == \"3264\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 885,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 886,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 887,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 888,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3241\"\nassert solution(stdin) == \"3241\"\nassert solution(stdin) == \"3241\"\nassert solution(stdin) == \"3241\"\nassert solution(stdin) == \"3241\"\n"
    },
    {
        "number": 889,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 890,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 891,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"WBBBWBW\"\nassert solution(stdin) == \"WWBWBWW\"\nassert solution(stdin) == \"WWWWWWW\"\nassert solution(stdin) == \"BWBWBW\"\nassert solution(stdin) == \"BWBWBW\"\n"
    },
    {
        "number": 892,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 893,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 894,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 15 15 0\"\nassert solution(stdin) == \"0 15 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\n"
    },
    {
        "number": 895,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nInput\n6\n4 1 7 8 3 8\n1\n\nOutput\n3\n"
    },
    {
        "number": 896,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 897,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '230769233'\n"
    },
    {
        "number": 898,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 899,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 900,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"768\"\n"
    },
    {
        "number": 901,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^4\n1 \u2264 m \u2264 10^4\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 MiB\n\n-----Alternatives\n\n1. Use a stack to keep track of the number of groups and the number of members in each group.\n2. Use a queue to keep track of the number of groups and the number of members in each group.\n3. Use a stack to keep track of the number of groups and the number of members in each group.\n4. Use a queue to keep track of the number of groups and the number of members in each group.\n5. Use a stack to keep track of the number of groups and the number of members in each group.\n6. Use a queue to keep track of the number of groups and the number of members in each group.\n7. Use a stack to keep track of the number of groups and the number of members in each group.\n8. Use a queue to keep track of the number of groups and the number of members in each group.\n9. Use a stack to keep track of the number of groups and the number of members in each group.\n10. Use a queue to keep track of the number of groups and the number of members in each group.\n11. Use a stack to keep track of the number of groups and the number of members in each group.\n12. Use a queue to keep track of the number of groups and the number of members in each group.\n13. Use a stack to keep track of the number of groups and the number of members in each group.\n14. Use a queue to keep track of the number of groups and the number of members in each group.\n15. Use a stack to keep track of the number of groups and the number of members in each group.\n16. Use a queue to keep track of the number of groups and the number of members in each group.\n17. Use a stack to keep track of the number of groups and the number of members in each group.\n18. Use a queue to keep track of the number of groups and the number of members in each group.\n19. Use a stack to keep track of the number of groups and the number of members in each group.\n20. Use a queue to keep track of the number of groups and the number of members in each group.\n21. Use a stack to keep track of the number of groups and the number of members in each group.\n22. Use a queue to keep track of the number of groups and the number of members in each group.\n23. Use a stack to keep track of the number of groups and the number of members in each group.\n24. Use a queue to keep track of the number of groups and the number of members in each group.\n25. Use a stack to keep track of the number of groups and the number of members in each group.\n26. Use a queue to keep track of the number of groups and the number of members in each group.\n27. Use a stack to keep track of the number of groups and the number of members in each group.\n28. Use a queue to keep track of the number of groups and the number of members in each group.\n29. Use a stack to keep track of the number of groups and the number of members in each group.\n30. Use a queue to keep track of the number of groups and the number of members in each group.\n31. Use a stack to keep track of the number of groups and the number of members in each group.\n32. Use a queue to keep track of the number of groups and the number of members in each group.\n33. Use a stack to keep track of the number of groups and the number of members in each group.\n34. Use a queue to keep track of the number of groups and the number of members in each group.\n35. Use a stack to keep track of the number of groups and the number of members in each group.\n36. Use a queue to keep track of the number of groups and the number of members in each group.\n37. Use a stack to keep track of the number of groups and the number of members in each group.\n38. Use a queue to keep track of the number of groups and the number of members in each group.\n39. Use a stack to keep track of the number of groups and the number of members in each group.\n40. Use a queue to keep track of the number of groups and the number of members in each group.\n41. Use a stack to keep track of the number of groups and the number of members in each group.\n42. Use a queue to keep track of the number of groups and the number of members in each group.\n43. Use a stack to keep track of the number of groups and the number of members in each group.\n44. Use a queue to keep track of the number of groups and the number of members in each group.\n45. Use a stack to keep track of the number of groups and the number of members in each group.\n46. Use a queue to keep track of the number of groups and the number of members in each group.\n47. Use a stack to keep track of the number of groups and the number of members in each group.\n48. Use a queue to keep track of the number of groups and the number of members in each group.\n49. Use a stack to keep track of the number of groups and the number of members in each group.\n50. Use a queue to keep track of the number of groups and the number of members in each group.\n51. Use a stack to keep track of the number of groups and the number of members in each group.\n52. Use a queue to keep track of the number of groups and the number of members in each group.\n53. Use a stack to keep track of the number of groups and the number of members in each group.\n54. Use a queue to keep track of the number of groups and the number of members in each group.\n55. Use a stack to keep track of the number of groups and the number of members in each group.\n56. Use a queue to keep track of the number of groups and the number of members in each group.\n57. Use a stack to keep track of the number of groups and the number of members in each group.\n58. Use a queue to keep track of the number of groups and the"
    },
    {
        "number": 902,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 903,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 904,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= n <= 200\n\n1 <= s_i.length <= 200\ns_i consist of small and capital Latin letters.\n\n\"\"\""
    },
    {
        "number": 905,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 50\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 100\n1 <= x_{i} <= 100\n1 <= y_{i} < 100\n\n------Time complexity-----\n\nO(n)\n\nO(n)\n\n------Space complexity-----\n\nO(1)\n\n------Algorithm-----\n\n1. Create a dictionary to store the number of each type of sugar.\n2. Create a list to store the number of each type of sugar.\n3. Create a dictionary to store the number of each type of sugar.\n4. Create a list to store the number of each type of sugar.\n5. Create a dictionary to store the number of each type of sugar.\n6. Create a list to store the number of each type of sugar.\n7. Create a dictionary to store the number of each type of sugar.\n8. Create a list to store the number of each type of sugar.\n9. Create a dictionary to store the number of each type of sugar.\n10. Create a list to store the number of each type of sugar.\n11. Create a dictionary to store the number of each type of sugar.\n12. Create a list to store the number of each type of sugar.\n13. Create a dictionary to store the number of each type of sugar.\n14. Create a list to store the number of each type of sugar.\n15. Create a dictionary to store the number of each type of sugar.\n16. Create a list to store the number of each type of sugar.\n17. Create a dictionary to store the number of each type of sugar.\n18. Create a list to store the number of each type of sugar.\n19. Create a dictionary to store the number of each type of sugar.\n20. Create a list to store the number of each type of sugar.\n21. Create a dictionary to store the number of each type of sugar.\n22. Create a list to store the number of each type of sugar.\n23. Create a dictionary to store the number of each type of sugar.\n24. Create a list to store the number of each type of sugar.\n25. Create a dictionary to store the number of each type of sugar.\n26. Create a list to store the number of each type of sugar.\n27. Create a dictionary to store the number of each type of sugar.\n28. Create a list to store the number of each type of sugar.\n29. Create a dictionary to store the number of each type of sugar.\n30. Create a list to store the number of each type of sugar.\n31. Create a dictionary to store the number of each type of sugar.\n32. Create a list to store the number of each type of sugar.\n33. Create a dictionary to store the number of each type of sugar.\n34. Create a list to store the number of each type of sugar.\n35. Create a dictionary to store the number of each type of sugar.\n36. Create a list to store the number of each type of sugar.\n37. Create a dictionary to store the number of each type of sugar.\n38. Create a list to store the number of each type of sugar.\n39. Create a dictionary to store the number of each type of sugar.\n40. Create a list to store the number of each type of sugar.\n41. Create a dictionary to store the number of each type of sugar.\n42. Create a list to store the number of each type of sugar.\n43. Create a dictionary to store the number of each type of sugar.\n44. Create a list to store the number of each type of sugar.\n45. Create a dictionary to store the number of each type of sugar.\n46. Create a list to store the number of each type of sugar.\n47. Create a dictionary to store the number of each type of sugar.\n48. Create a list to store the number of each type of sugar.\n49. Create a dictionary to store the number of each type of sugar.\n50. Create a list to store the number of each type of sugar.\n51. Create a dictionary to store the number of each type of sugar.\n52. Create a list to store the number of each type of sugar.\n53. Create a dictionary to store the number of each type of sugar.\n54. Create a list to store the number of each type of sugar.\n55. Create a dictionary to store the number of each type of sugar.\n56. Create a list to store the number of each type of sugar.\n57. Create a dictionary to store the number of each type of sugar.\n58. Create a list to store the number of each type of sugar.\n59. Create a dictionary to store the number of each type of sugar.\n60. Create a list to store the number of each type of sugar.\n61. Create a dictionary to store the number of each type of sugar.\n62. Create a list to store the number of each type of sugar.\n63. Create a dictionary to store the number of each type of sugar.\n64. Create a list to store the number of each type of sugar.\n65. Create a dictionary to store the number of each type of sugar.\n66. Create a list to store the number of each type of sugar.\n67. Create a dictionary to store the number of each type of sugar.\n68. Create a list to store the number of each type of sugar.\n69. Create a dictionary to store the number of each type of sugar.\n70. Create a list to store the number of each type of sugar.\n71. Create a dictionary to store the number of each type of sugar.\n72. Create a list to store the number of each type of sugar.\n73. Create a dictionary to store the number of each type of sugar.\n74. Create a list to store the number of each type of sugar.\n75. Create a dictionary to store the number of each type of sugar.\n76. Create a list to store the number of each type of sugar.\n77. Create a dictionary to store the number of each type of sugar.\n78. Create a list to store the number of each type of sugar.\n79. Create a dictionary to store the number of each type of sugar.\n80. Create a list to store the number of each type of sugar.\n81. Create a dictionary to store the number of each type of sugar.\n82. Create a list to store the number of each type of sugar.\n83. Create a dictionary to store the number of each type of sugar.\n84. Create a list to store the number of each type of sugar.\n85. Create a dictionary to store the number of each type of sugar.\n86. Create a list to store the number of each type of sugar.\n87. Create a dictionary to store the number of each type of sugar.\n88. Create a list to store the number of each type of sugar.\n89. Create a dictionary to store the number of each type of sugar.\n90. Create a list to store the number of each type of sugar.\n91. Create a dictionary to store the number of each type of sugar.\n92. Create a list to store the number of each type of sugar.\n93. Create a dictionary to store the number of each type of sugar.\n94. Create a"
    },
    {
        "number": 906,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 907,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 908,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 909,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 60\n"
    },
    {
        "number": 910,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 911,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Limak\"\nassert solution(stdin) == \"Radewoosh\"\nassert solution(stdin) == \"Tie\"\n"
    },
    {
        "number": 912,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 913,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 914,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 915,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"codeforces\"\nassert solution(stdin) == \"codeforcesisawesome\"\nassert solution(stdin) == \"codeforcesisawesome\"\nassert solution(stdin) == \"codeforcesisawesome\"\nassert solution(stdin) == \"codeforcesisawesome\"\n"
    },
    {
        "number": 916,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 917,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '262'\n"
    },
    {
        "number": 918,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Sidorov Ivanov\"\nassert solution(stdin) == \"Petrov Sidorov\"\nassert solution(stdin) == \"Petrov Ivanov\"\nassert solution(stdin) == \"Petrov Ivanov\"\nassert solution(stdin) == \"Petrov Ivanov\"\n"
    },
    {
        "number": 919,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 920,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4 6\"\nassert solution(stdin) == \"1 5 5\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 1 1\"\n"
    },
    {
        "number": 921,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\n"
    },
    {
        "number": 922,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1\"\n"
    },
    {
        "number": 923,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n0 <= stdin[i] <= 10^5\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nApproach:\n\nUse a stack to keep track of the active teeth of each gear.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active tooth is the one containing number 0, then clockwise rotation makes the tooth with number 1 active, or the counter-clockwise rotating makes the tooth number 4 active.\n\nWhen a gear turns, a new active tooth is the one following after the current active tooth according to the direction of the rotation. For example, if n = 5, and the active"
    },
    {
        "number": 924,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n[Image]\n\n[Image]\n"
    },
    {
        "number": 925,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 926,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 927,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"777773\"\n"
    },
    {
        "number": 928,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 929,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2 2 2 3\"\nassert solution(input()) == \"1 1 1 2\"\nassert solution(input()) == \"1 3 1 2\"\n"
    },
    {
        "number": 930,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"10\"\n"
    },
    {
        "number": 931,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 3 1 1 9\"\nassert solution(stdin) == \"1 3 3 1 1 9\"\nassert solution(stdin) == \"1 3 3 1 1 9\"\nassert solution(stdin) == \"1 3 3 1 1 9\"\nassert solution(stdin) == \"1 3 3 1 1 9\"\n"
    },
    {
        "number": 932,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 933,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"hello\"\nassert solution(stdin) == \"hello\"\nassert solution(stdin) == \"hello\"\nassert solution(stdin) == \"hello\"\nassert solution(stdin) == \"hello\"\n"
    },
    {
        "number": 934,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 935,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Malvika\"\n"
    },
    {
        "number": 936,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 937,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"16\"\n"
    },
    {
        "number": 938,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2 2 4 5\"\n"
    },
    {
        "number": 939,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 1 2 2 2 3 3 3\"\nassert solution(stdin) == \"1 1 1 2 2 2 3 3 3\"\nassert solution(stdin) == \"1 1 1 2 2 2 3 3 3\"\nassert solution(stdin) == \"1 1 1 2 2 2 3 3 3\"\nassert solution(stdin) == \"1 1 1 2 2 2 3 3 3\"\n"
    },
    {
        "number": 940,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"81\"\nassert solution(stdin) == \"81\"\nassert solution(stdin) == \"81\"\nassert solution(stdin) == \"81\"\nassert solution(stdin) == \"81\"\n"
    },
    {
        "number": 941,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"even\"\nassert solution(stdin) == \"odd\"\nassert solution(stdin) == \"even\"\nassert solution(stdin) == \"odd\"\nassert solution(stdin) == \"even\"\n"
    },
    {
        "number": 942,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Possible\"\n"
    },
    {
        "number": 943,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3999999996\"\nassert solution(stdin) == \"3999999996\"\nassert solution(stdin) == \"3999999996\"\nassert solution(stdin) == \"3999999996\"\nassert solution(stdin) == \"3999999996\"\n"
    },
    {
        "number": 944,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3 2\"\n\nassert solution(stdin) == \"3 4\"\n\nassert solution(stdin) == \"3 4 5\""
    },
    {
        "number": 945,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\n\nassert solution(stdin) == \"no\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^6\n\n-----Time Limit-----\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n4\n0 10 5 15\n\nSample Output\n\nyes\n\nExplanation\n\nThe diagram shows the diagram.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections.\n\nThe diagram has self-intersections."
    },
    {
        "number": 946,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"HARD\"\nassert solution(stdin) == \"EASY\"\nassert solution(stdin) == \"EASY\"\nassert solution(stdin) == \"HARD\"\nassert solution(stdin) == \"EASY\"\n"
    },
    {
        "number": 947,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 948,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 <= n <= 50\n1 <= m <= 50\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1MB\n\n-----Alternatives\n\n1. Use a stack to store the number of faces on the image.\n2. Use a queue to store the number of faces on the image.\n3. Use a stack to store the number of faces on the image.\n4. Use a queue to store the number of faces on the image.\n5. Use a stack to store the number of faces on the image.\n6. Use a queue to store the number of faces on the image.\n7. Use a stack to store the number of faces on the image.\n8. Use a queue to store the number of faces on the image.\n9. Use a stack to store the number of faces on the image.\n10. Use a queue to store the number of faces on the image.\n11. Use a stack to store the number of faces on the image.\n12. Use a queue to store the number of faces on the image.\n13. Use a stack to store the number of faces on the image.\n14. Use a queue to store the number of faces on the image.\n15. Use a stack to store the number of faces on the image.\n16. Use a queue to store the number of faces on the image.\n17. Use a stack to store the number of faces on the image.\n18. Use a queue to store the number of faces on the image.\n19. Use a stack to store the number of faces on the image.\n20. Use a queue to store the number of faces on the image.\n21. Use a stack to store the number of faces on the image.\n22. Use a queue to store the number of faces on the image.\n23. Use a stack to store the number of faces on the image.\n24. Use a queue to store the number of faces on the image.\n25. Use a stack to store the number of faces on the image.\n26. Use a queue to store the number of faces on the image.\n27. Use a stack to store the number of faces on the image.\n28. Use a queue to store the number of faces on the image.\n29. Use a stack to store the number of faces on the image.\n30. Use a queue to store the number of faces on the image.\n31. Use a stack to store the number of faces on the image.\n32. Use a queue to store the number of faces on the image.\n33. Use a stack to store the number of faces on the image.\n34. Use a queue to store the number of faces on the image.\n35. Use a stack to store the number of faces on the image.\n36. Use a queue to store the number of faces on the image.\n37. Use a stack to store the number of faces on the image.\n38. Use a queue to store the number of faces on the image.\n39. Use a stack to store the number of faces on the image.\n40. Use a queue to store the number of faces on the image.\n41. Use a stack to store the number of faces on the image.\n42. Use a queue to store the number of faces on the image.\n43. Use a stack to store the number of faces on the image.\n44. Use a queue to store the number of faces on the image.\n45. Use a stack to store the number of faces on the image.\n46. Use a queue to store the number of faces on the image.\n47. Use a stack to store the number of faces on the image.\n48. Use a queue to store the number of faces on the image.\n49. Use a stack to store the number of faces on the image.\n50. Use a queue to store the number of faces on the image.\n51. Use a stack to store the number of faces on the image.\n52. Use a queue to store the number of faces on the image.\n53. Use a stack to store the number of faces on the image.\n54. Use a queue to store the number of faces on the image.\n55. Use a stack to store the number of faces on the image.\n56. Use a queue to store the number of faces on the image.\n57. Use a stack to store the number of faces on the image.\n58. Use a queue to store the number of faces on the image.\n59. Use a stack to store the number of faces on the image.\n60. Use a queue to store the number of faces on the image.\n61. Use a stack to store the number of faces on the image.\n62. Use a queue to store the number of faces on the image.\n63. Use a stack to store the number of faces on the image.\n64. Use a queue to store the number of faces on the image.\n65. Use a stack to store the number of faces on the image.\n66. Use a queue to store the number of faces on the image.\n67. Use a stack to store the number of faces on the image.\n68. Use a queue to store the number of faces on the image.\n69. Use a stack to store the number of faces on the image.\n70. Use a queue to store the number of faces on the image.\n71. Use a stack to store the number of faces on the image.\n72. Use a queue to store the number of faces on the image.\n73. Use a stack to store the number of faces on the image.\n74. Use a queue to store the number of faces on the image.\n75. Use a stack to store the number of faces on the image.\n76. Use a queue to store the number of faces on the image.\n77. Use a stack to store the number of faces on the image.\n78. Use a queue to store the number of faces on the image.\n79. Use a stack to store the number of faces on the image.\n80. Use a queue to store the number of faces on the image.\n81. Use a stack to store the number of faces on the image.\n82. Use a queue to store the number of faces on the image.\n83. Use a stack to store the number of faces on the image.\n84. Use a queue to store the number of faces on the image.\n85. Use a stack to store the number of faces on the image.\n86. Use a queue to store the number of faces on the image.\n87. Use a stack to store the number of faces on the image.\n88. Use a queue to store the number of faces on the image.\n89. Use a stack to store the number of faces on the image.\n90. Use a queue to store the number of faces on the image.\n91. Use a stack to store the number of faces on the image.\n92. Use a queue to store the number of faces on the image.\n93. Use a stack to store the number of faces on the image.\n94. Use a queue to store the number of faces on the image.\n95. Use a stack to store the number of faces on the image.\n96. Use a queue to store the number of faces on the image.\n97. Use a stack to store the number of faces on the image.\n98. Use a queue to store the number of faces on the image"
    },
    {
        "number": 949,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '61803398874989484820458683436563811772030917980576'\n"
    },
    {
        "number": 950,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 951,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 952,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\n"
    },
    {
        "number": 953,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 4 3 6 7 5\"\nassert solution(stdin) == \"1 2 4 3 6 7 5\"\nassert solution(stdin) == \"1 2 4 3 6 7 5\"\nassert solution(stdin) == \"1 2 4 3 6 7 5\"\nassert solution(stdin) == \"1 2 4 3 6 7 5\"\n"
    },
    {
        "number": 954,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 955,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"15\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"250\"\n"
    },
    {
        "number": 956,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1: 1\"\nassert solution(stdin) == \"2: 1\"\nassert solution(stdin) == \"3: 1\"\nassert solution(stdin) == \"4: 1\"\nassert solution(stdin) == \"5: 1\"\n"
    },
    {
        "number": 957,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 958,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"roar\"\nassert solution(stdin) == \"db\"\nassert solution(stdin) == \"hey\"\nassert solution(stdin) == \"def\"\nassert solution(stdin) == \"af\"\n"
    },
    {
        "number": 959,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 960,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n1 <= n <= 10^6\n1 <= k <= 1000\n1 <= x \\leq n\n\n-----Time Limit-----\n1 minute\n\n\"\"\",\n\n\"\"\"GOAL\n\n\"\"\"\n\nGOAL = 11"
    },
    {
        "number": 961,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 962,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 963,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 964,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 965,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 966,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2013\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= y <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Tags-----\nFirst Try\nSecond Try\n"
    },
    {
        "number": 967,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 968,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 969,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 970,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 971,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 972,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 973,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 974,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 975,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 0\n"
    },
    {
        "number": 976,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 977,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\n\n\"\"\""
    },
    {
        "number": 978,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 979,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 980,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\nassert solution(stdin) == \"acab\"\n\nassert solution(stdin) == \"acab\"\n\nassert solution(stdin) == \"acab\"\n\nassert solution(stdin) == \"acab\""
    },
    {
        "number": 981,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 55555\n"
    },
    {
        "number": 982,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 983,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"30\"\n"
    },
    {
        "number": 984,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= v <= 10^9\n\n0 <= l <= r <= 10^9\n\n0 <= x <= 10^9\n\n\"\"\""
    },
    {
        "number": 985,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 986,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 987,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7 8 9 4 5 6 1 2 3\"\n"
    },
    {
        "number": 988,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"P-P\"\nassert solution(stdin) == \"P-P\"\nassert solution(stdin) == \"P-P\"\nassert solution(stdin) == \"P-P\"\nassert solution(stdin) == \"P-P\"\n"
    },
    {
        "number": 989,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 990,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 991,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"14\"\n"
    },
    {
        "number": 992,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 993,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3 2\"\nassert solution(input()) == \"3 4\"\nassert solution(input()) == \"3 5\"\nassert solution(input()) == \"3 6\"\n"
    },
    {
        "number": 994,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n\nassert solution(stdin) == 'IMPOSSIBLE'\n\nassert solution(stdin) == 'IMPOSSIBLE'\n\nassert solution(stdin) == 'IMPOSSIBLE'\n\nassert solution(stdin) == 'IMPOSSIBLE'"
    },
    {
        "number": 995,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 0\"\n"
    },
    {
        "number": 996,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 997,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 998,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6 1 3\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 999,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"6\""
    },
    {
        "number": 1001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-8'\nassert solution(stdin) == '-5'\nassert solution(stdin) == '-3'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 1004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 1006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 15\n\nassert solution(stdin) == 15\n\nassert solution(stdin) == 15\n\nassert solution(stdin) == 15\n\nassert solution(stdin) == 15"
    },
    {
        "number": 1008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == \"YES\"\nassert solution(s) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 1009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '9'\nassert solution(stdin) == '8'\nassert solution(stdin) == '7'\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 1010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"15:10\"\n"
    },
    {
        "number": 1012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 1013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 1014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"white\"\nassert solution(stdin) == \"black\"\nassert solution(stdin) == \"white\"\nassert solution(stdin) == \"black\"\nassert solution(stdin) == \"white\"\n"
    },
    {
        "number": 1015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3"
    },
    {
        "number": 1016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 1017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\nassert solution(4) == 4\nassert solution(5) == 5\n"
    },
    {
        "number": 1018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 7\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"28\"\nassert solution(stdin) == \"40\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"28\"\nassert solution(stdin) == \"40\"\n"
    },
    {
        "number": 1021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= c_i <= 2 * 10^9\n1 <= t_i <= 2 * 10^9\n\n-----Time Limit-----\n1 minute\n\n-----Space Limit-----\n1 GB\n\n-----Tags-----\nFirst\nSecond\nThird\nFourth\nFifth\n\n-----Bug Fixes-----\n1.\n2.\n3.\n4.\n5.\n6.\n7.\n8.\n9.\n10.\n11.\n12.\n13.\n14.\n15.\n16.\n17.\n18.\n19.\n20.\n21.\n22.\n23.\n24.\n25.\n26.\n27.\n28.\n29.\n30.\n31.\n32.\n33.\n34.\n35.\n36.\n37.\n38.\n39.\n40.\n41.\n42.\n43.\n44.\n45.\n46.\n47.\n48.\n49.\n50.\n51.\n52.\n53.\n54.\n55.\n56.\n57.\n58.\n59.\n60.\n61.\n62.\n63.\n64.\n65.\n66.\n67.\n68.\n69.\n70.\n71.\n72.\n73.\n74.\n75.\n76.\n77.\n78.\n79.\n80.\n81.\n82.\n83.\n84.\n85.\n86.\n87.\n88.\n89.\n90.\n91.\n92.\n93.\n94.\n95.\n96.\n97.\n98.\n99.\n100.\n101.\n102.\n103.\n104.\n105.\n106.\n107.\n108.\n109.\n110.\n111.\n112.\n113.\n114.\n115.\n116.\n117.\n118.\n119.\n120.\n121.\n122.\n123.\n124.\n125.\n126.\n127.\n128.\n129.\n130.\n131.\n132.\n133.\n134.\n135.\n136.\n137.\n138.\n139.\n140.\n141.\n142.\n143.\n144.\n145.\n146.\n147.\n148.\n149.\n150.\n151.\n152.\n153.\n154.\n155.\n156.\n157.\n158.\n159.\n160.\n161.\n162.\n163.\n164.\n165.\n166.\n167.\n168.\n169.\n170.\n171.\n172.\n173.\n174.\n175.\n176.\n177.\n178.\n179.\n180.\n181.\n182.\n183.\n184.\n185.\n186.\n187.\n188.\n189.\n190.\n191.\n192.\n193.\n194.\n195.\n196.\n197.\n198.\n199.\n200.\n201.\n202.\n203.\n204.\n205.\n206.\n207.\n208.\n209.\n210.\n211.\n212.\n213.\n214.\n215.\n216.\n217.\n218.\n219.\n220.\n221.\n222.\n223.\n224.\n225.\n226.\n227.\n228.\n229.\n230.\n231.\n232.\n233.\n234.\n235.\n236.\n237.\n238.\n239.\n240.\n241.\n242.\n243.\n244.\n245.\n246.\n247.\n248.\n249.\n250.\n251.\n252.\n253.\n254.\n255.\n256.\n257.\n258.\n259.\n260.\n261.\n262.\n263.\n264.\n265.\n266.\n267.\n268.\n269.\n270.\n271.\n272.\n273.\n274.\n275.\n276.\n277.\n278.\n279.\n280.\n281.\n282.\n283.\n284.\n285.\n286.\n287.\n288.\n289.\n290.\n291.\n292.\n293.\n294.\n295.\n296.\n297.\n298.\n299.\n300.\n301.\n302.\n303.\n304.\n305.\n306.\n307.\n308.\n309.\n310.\n311.\n312.\n313.\n314.\n315.\n316.\n317.\n318.\n319.\n320.\n321.\n322.\n323.\n324.\n325.\n326.\n327.\n328.\n329.\n330.\n331.\n332.\n333.\n334.\n335.\n336.\n337.\n338.\n339.\n340.\n341.\n342.\n343.\n344.\n345.\n346.\n347.\n348.\n349.\n350.\n351.\n352.\n353.\n354.\n355.\n356.\n357.\n358.\n359.\n360.\n361.\n362.\n363.\n364.\n365.\n366.\n367.\n368.\n369.\n370.\n371.\n372.\n373.\n374.\n375.\n376.\n377.\n378.\n379.\n380.\n381.\n382.\n383.\n384.\n385.\n386.\n387.\n388.\n389.\n390.\n391.\n392.\n393.\n394.\n395.\n396.\n397.\n398.\n399.\n400.\n401.\n402.\n403.\n404.\n405.\n406.\n407.\n408.\n409.\n410.\n411.\n412.\n413.\n414.\n415.\n416.\n417.\n418.\n419.\n420.\n421.\n422.\n423.\n424.\n425.\n426.\n427.\n428.\n429.\n430.\n431.\n432.\n433.\n434.\n435.\n436.\n437.\n438.\n439.\n440.\n441.\n442.\n443.\n444.\n445.\n446.\n447.\n448.\n449.\n"
    },
    {
        "number": 1022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"1000000003\"\nassert solution(stdin) == \"1000000003\"\nassert solution(stdin) == \"1000000003\"\nassert solution(stdin) == \"1000000003\"\n"
    },
    {
        "number": 1024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.916666666666666666666666666667'\n\n\"\"\""
    },
    {
        "number": 1025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 26\n\nassert solution(stdin) == 55\n\nassert solution(stdin) == 55\n\nassert solution(stdin) == 55\n\nassert solution(stdin) == 55"
    },
    {
        "number": 1027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n0 <= a_i <= 10^9\n\n0 <= a_i <= 10^9\n\n0 <= a_i <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSubmissions are marked in bold.\n\n\"\"\""
    },
    {
        "number": 1028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10 10\"\nassert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"<< 3 4 (5) 6 7 8 >>\"\nassert solution(stdin) == \"<< 3 4 (5) 6?\"\nassert solution(stdin) == \"<< 3 4 (5) 6?\"\nassert solution(stdin) == \"<< 3 4 (5) 6?\"\nassert solution(stdin) == \"<< 3 4 (5) 6?\"\n"
    },
    {
        "number": 1031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"y\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"y\"\n"
    },
    {
        "number": 1032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"19\"\nassert solution(input()) == \"17\"\nassert solution(input()) == \"15\"\nassert solution(input()) == \"14\"\nassert solution(input()) == \"13\"\n"
    },
    {
        "number": 1035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 1036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"P\"\nassert solution(input()) == \"R\"\nassert solution(input()) == \"S\"\nassert solution(input()) == \"R\"\nassert solution(input()) == \"P\"\n"
    },
    {
        "number": 1037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"20\"\n"
    },
    {
        "number": 1038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 1039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 1041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 1043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 1044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"8\""
    },
    {
        "number": 1046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1 1 1 1 1 1 1 1\"\n"
    },
    {
        "number": 1048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 1051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n1 <= K <= 25\n1 <= r_1, r_2,..., r_{K} <= 10^6\n\n-----Time Limit: 1 sec (py3)-----\n\nSample Input 1:\n\n3\n2 3 4 5 6 7 8 9 10 11 12 14 15 16 17 18 19 20 21 22 23 24 25 26 28\n\nSample Output 1:\n\n3\n\nSample Input 2:\n\n5\n16 23 8 15 4\n\nSample Output 2:\n\n0\n\nSample Input 3:\n\n3\n14 15 92\n\nSample Output 3:\n\n67\n\n-----Constraints-----\n1 <= K <= 25\n1 <= r_1, r_2,..., r_{K} <= 10^6\n\n-----Time Limit: 1 sec (py3)-----\n\nPython3 solution"
    },
    {
        "number": 1052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 31\n"
    },
    {
        "number": 1053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n-----Time Limit-----\n1 second\n\n-----Divide and Conquer-----\n\nTime: O(n)\nSpace: O(n)\n\n-----Elements-----\n1\n\n2\n\n3\n\n4\n\n5\n\n6\n\n7\n\n8\n\n9\n\n10\n\n11\n\n12\n\n13\n\n14\n\n15\n\n16\n\n17\n\n18\n\n19\n\n20\n\n21\n\n22\n\n23\n\n24\n\n25\n\n26\n\n27\n\n28\n\n29\n\n30\n\n31\n\n32\n\n33\n\n34\n\n35\n\n36\n\n37\n\n38\n\n39\n\n40\n\n41\n\n42\n\n43\n\n44\n\n45\n\n46\n\n47\n\n48\n\n49\n\n50\n\n51\n\n52\n\n53\n\n54\n\n55\n\n56\n\n57\n\n58\n\n59\n\n60\n\n61\n\n62\n\n63\n\n64\n\n65\n\n66\n\n67\n\n68\n\n69\n\n70\n\n71\n\n72\n\n73\n\n74\n\n75\n\n76\n\n77\n\n78\n\n79\n\n80\n\n81\n\n82\n\n83\n\n84\n\n85\n\n86\n\n87\n\n88\n\n89\n\n90\n\n91\n\n92\n\n93\n\n94\n\n95\n\n96\n\n97\n\n98\n\n99\n\n100\n\n101\n\n102\n\n103\n\n104\n\n105\n\n106\n\n107\n\n108\n\n109\n\n110\n\n111\n\n112\n\n113\n\n114\n\n115\n\n116\n\n117\n\n118\n\n119\n\n120\n\n121\n\n122\n\n123\n\n124\n\n125\n\n126\n\n127\n\n128\n\n129\n\n130\n\n131\n\n132\n\n133\n\n134\n\n135\n\n136\n\n137\n\n138\n\n139\n\n140\n\n141\n\n142\n\n143\n\n144\n\n145\n\n146\n\n147\n\n148\n\n149\n\n150\n\n151\n\n152\n\n153\n\n154\n\n155\n\n156\n\n157\n\n158\n\n159\n\n160\n\n161\n\n162\n\n163\n\n164\n\n165\n\n166\n\n167\n\n168\n\n169\n\n170\n\n171\n\n172\n\n173\n\n174\n\n175\n\n176\n\n177\n\n178\n\n179\n\n180\n\n181\n\n182\n\n183\n\n184\n\n185\n\n186\n\n187\n\n188\n\n189\n\n190\n\n191\n\n192\n\n193\n\n194\n\n195\n\n196\n\n197\n\n198\n\n199\n\n200\n\n201\n\n202\n\n203\n\n204\n\n205\n\n206\n\n207\n\n208\n\n209\n\n210\n\n211\n\n212\n\n213\n\n214\n\n215\n\n216\n\n217\n\n218\n\n219\n\n220\n\n221\n\n222\n\n223\n\n224\n\n225\n\n226\n\n227\n\n228\n\n229\n\n230\n\n231\n\n232\n\n233\n\n234\n\n235\n\n236\n\n237\n\n238\n\n239\n\n240\n\n241\n\n242\n\n243\n\n244\n\n245\n\n246\n\n247\n\n248\n\n249\n\n250\n\n251\n\n252\n\n253\n\n254\n\n255\n\n256\n\n257\n\n258\n\n259\n\n260\n\n261\n\n262\n\n263\n\n264\n\n265\n\n266\n\n267\n\n268\n\n269\n\n270\n\n271\n\n272\n\n273\n\n274\n\n275\n\n276\n\n277\n\n278\n\n279\n\n280\n\n281\n\n282\n\n283\n\n284\n\n285\n\n286\n\n287\n\n288\n\n289\n\n290\n\n291\n\n292\n\n293\n\n294\n\n295\n\n296\n\n297\n\n298\n\n299\n\n300\n\n301\n\n302\n\n303\n\n304\n\n305\n\n306\n\n307\n\n308\n\n309\n\n310\n\n311\n\n312\n\n313\n\n314\n\n315\n\n316\n\n317\n\n318\n\n319\n\n320\n\n321\n\n322\n\n323\n\n324\n\n325\n\n326\n\n327\n\n328\n\n329\n\n330\n\n331\n\n332\n\n333\n\n334\n\n335\n\n336\n\n337\n\n338\n\n339\n\n340\n\n341\n\n342\n\n343\n\n344\n\n345\n\n346\n\n347\n\n348\n\n349\n\n350\n\n351\n\n352\n\n353\n\n354\n\n355\n\n356\n\n357\n\n358\n\n359\n\n360\n\n361\n\n362\n\n363\n\n364\n\n365\n\n366\n\n367\n\n368\n\n369\n\n370\n\n371\n\n372\n\n373\n\n374\n\n375\n\n376\n\n377\n\n378\n\n379\n\n380\n\n381\n\n382\n\n383\n\n384\n\n385\n\n386\n\n387\n\n388\n\n389\n\n390\n\n391\n\n392\n\n393\n\n394\n\n395\n\n396\n\n397\n\n398\n\n399\n\n400\n\n401\n\n402\n\n403\n\n404\n\n405\n\n406\n\n407\n\n408\n\n409\n\n410\n\n411\n\n412\n\n413\n\n414\n\n415\n\n416\n\n417\n\n418\n\n419\n\n420\n\n421\n\n422\n\n423\n\n424\n\n425\n\n426\n\n427\n\n428\n\n429\n\n430\n\n431\n\n432\n\n433\n\n434\n\n435\n\n436\n\n437\n\n438\n\n439\n\n440\n\n441\n\n442\n\n443\n\n444\n\n445\n\n446\n\n447\n\n448\n\n449\n\n450\n\n451\n\n452\n\n453\n\n454\n\n455\n\n456\n\n457\n\n458\n\n459\n\n460\n\n461\n\n462\n\n463\n\n464\n\n465\n\n466\n\n467\n\n468\n\n469\n\n470\n\n471\n\n472\n\n473\n\n474\n\n475\n\n476\n\n477\n\n478\n\n479\n\n480\n\n481\n\n482\n\n483\n\n484\n\n485\n\n486\n\n487\n\n488\n\n489\n\n490\n\n491\n\n492\n\n493\n\n494\n\n495\n\n496\n\n497\n\n498\n\n499\n\n500\n\n501\n\n502\n\n503\n\n504\n\n505\n\n506\n\n507\n\n508\n\n509\n\n510\n\n511\n\n512\n\n513\n\n514\n\n515\n\n516\n\n517\n\n518\n\n519\n\n520\n\n521\n\n522\n\n523\n\n524\n\n525\n\n526\n\n527\n\n528\n\n529\n\n530\n\n531\n\n532\n\n533\n\n534\n\n535\n\n536\n\n537\n\n538\n\n539\n\n540\n\n541\n\n542\n\n543\n\n544\n\n545\n\n546\n\n547\n\n548\n\n549\n\n550\n\n551\n\n552\n\n553\n\n554\n\n555\n"
    },
    {
        "number": 1054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4'\n"
    },
    {
        "number": 1055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"33.0476190476\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"20.2591405923\"\nassert solution(\"0 0 0 0 0 0 0 0 0 0\") == \"15.9047592939\"\n"
    },
    {
        "number": 1057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 0"
    },
    {
        "number": 1058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"63\"\nassert solution(stdin) == \"300000\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1000\"\n"
    },
    {
        "number": 1059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(7) == \"-1\"\nassert solution(36) == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\nassert solution(36) == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\nassert solution(36) == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\nassert solution(36) == \"agoeuioaeiruuimaeoieauoweouoiaouimae\"\n"
    },
    {
        "number": 1060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= n <= 10^6\n\n1 <= a_i <= 10^6\n\n------Time complexity-----\nO(n)\n\n------Space complexity-----\nO(n)\n\n------Algorithm-----"
    },
    {
        "number": 1061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"0 0 0 0 0\"\n) == \"3\"\nassert solution(\n    \"0 0 0 0 0\"\n) == \"1\"\nassert solution(\n    \"0 0 0 0 0\"\n) == \"0\"\nassert solution(\n    \"0 0 0 0 0\"\n) == \"0\"\nassert solution(\n    \"0 0 0 0 0\"\n) == \"0\"\n"
    },
    {
        "number": 1062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 1063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"123+45=168\"\nassert solution(stdin) == \"123+45=168\"\nassert solution(stdin) == \"123+45=168\"\nassert solution(stdin) == \"123+45=168\"\nassert solution(stdin) == \"123+45=168\"\n"
    },
    {
        "number": 1069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n0 \u2264 n \u2264 10^5\n\n-----Time Limit: 1.0s</time>\n\n-----Space Limit: 1.0x</space>\n\n-----Tags: \n\n\"\"\""
    },
    {
        "number": 1070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n-----Constraints-----\n\n1 <= n <= 100,000\n1 <= k <= 100,000\n1 <= a_i <= k\n\n\"\"\""
    },
    {
        "number": 1071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 1073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 1074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nInput\n\n5\n\nOutput\n\n5\n\nExplanation\n\nThe input contains a single integer a (0 \u2264 a \u2264 1 000 000).\n\nThe input contains a single integer b (0 \u2264 b \u2264 1 000 000).\n\nThe input contains a single integer c (0 \u2264 c \u2264 1 000 000).\n\nThe input contains a single integer d (0 \u2264 d \u2264 1 000 000).\n\nThe input contains a single integer e (0 \u2264 e \u2264 1 000 000).\n\nThe input contains a single integer f (0 \u2264 f \u2264 1 000 000).\n\nThe input contains a single integer g (0 \u2264 g \u2264 1 000 000).\n\nThe input contains a single integer h (0 \u2264 h \u2264 1 000 000).\n\nThe input contains a single integer i (0 \u2264 i \u2264 1 000 000).\n\nThe input contains a single integer j (0 \u2264 j \u2264 1 000 000).\n\nThe input contains a single integer k (0 \u2264 k \u2264 1 000 000).\n\nThe input contains a single integer l (0 \u2264 l \u2264 1 000 000).\n\nThe input contains a single integer m (0 \u2264 m \u2264 1 000 000).\n\nThe input contains a single integer n (0 \u2264 n \u2264 1 000 000).\n\nThe input contains a single integer o (0 \u2264 o \u2264 1 000 000).\n\nThe input contains a single integer p (0 \u2264 p \u2264 1 000 000).\n\nThe input contains a single integer q (0 \u2264 q \u2264 1 000 000).\n\nThe input contains a single integer r (0 \u2264 r \u2264 1 000 000).\n\nThe input contains a single integer s (0 \u2264 s \u2264 1 000 000).\n\nThe input contains a single integer t (0 \u2264 t \u2264 1 000 000).\n\nThe input contains a single integer u (0 \u2264 u \u2264 1 000 000).\n\nThe input contains a single integer v (0 \u2264 v \u2264 1 000 000).\n\nThe input contains a single integer w (0 \u2264 w \u2264 1 000 000).\n\nThe input contains a single integer x (0 \u2264 x \u2264 1 000 000).\n\nThe input contains a single integer y (0 \u2264 y \u2264 1 000 000).\n\nThe input contains a single integer z (0 \u2264 z \u2264 1 000 000).\n\nThe input contains a single integer a (0 \u2264 a \u2264 1 000 000).\n\nThe input contains a single integer b (0 \u2264 b \u2264 1 000 000).\n\nThe input contains a single integer c (0 \u2264 c \u2264 1 000 000).\n\nThe input contains a single integer d (0 \u2264 d \u2264 1 000 000).\n\nThe input contains a single integer e (0 \u2264 e \u2264 1 000 000).\n\nThe input contains a single integer f (0 \u2264 f \u2264 1 000 000).\n\nThe input contains a single integer g (0 \u2264 g \u2264 1 000 000).\n\nThe input contains a single integer h (0 \u2264 h \u2264 1 000 000).\n\nThe input contains a single integer i (0 \u2264 i \u2264 1 000 000).\n\nThe input contains a single integer j (0 \u2264 j \u2264 1 000 000).\n\nThe input contains a single integer k (0 \u2264 k \u2264 1 000 000).\n\nThe input contains a single integer l (0 \u2264 l \u2264 1 000 000).\n\nThe input contains a single integer m (0 \u2264 m \u2264 1 000 000).\n\nThe input contains a single integer n (0 \u2264 n \u2264 1 000 000).\n\nThe input contains a single integer o (0 \u2264 o \u2264 1 000 000).\n\nThe input contains a single integer p (0 \u2264 p \u2264 1 000 000).\n\nThe input contains a single integer q (0 \u2264 q \u2264 1 000 000).\n\nThe input contains a single integer r (0 \u2264 r \u2264 1 000 000).\n\nThe input contains a single integer s (0 \u2264 s \u2264 1 000 000).\n\nThe input contains a single integer t (0 \u2264 t \u2264 1 000 000).\n\nThe input contains a single integer u (0 \u2264 u \u2264 1 000 000).\n\nThe input contains a single integer v (0 \u2264 v \u2264 1 000 000).\n\nThe input contains a single integer w (0 \u2264 w \u2264 1 000 000).\n\nThe input contains a single integer x (0 \u2264 x \u2264 1 000 000).\n\nThe input contains a single integer y (0 \u2264 y \u2264 1 000 000).\n\nThe input contains a single integer z (0 \u2264 z \u2264 1 000 000).\n\nThe input contains a single integer a (0 \u2264 a \u2264 1 000 000).\n\nThe input contains a single integer b (0 \u2264 b \u2264 1 000 000).\n\nThe input contains a single integer c (0 \u2264 c \u2264 1 000 000).\n\nThe input contains a single integer d (0 \u2264 d \u2264 1 000 000).\n\nThe input contains a single integer e (0 \u2264 e \u2264 1 000 000).\n\nThe input contains a single integer f (0 \u2264 f \u2264 1 000 000).\n\nThe input contains a single integer g (0 \u2264 g \u2264 1 000 000).\n\nThe input contains a single integer h (0 \u2264 h \u2264 1 000 000).\n\nThe input contains a single integer i (0 \u2264 i \u2264 1 000 000).\n\nThe input contains a single integer j (0 \u2264 j \u2264 1 000 000).\n\nThe input contains a single integer k (0 \u2264 k \u2264 1 000 000).\n\nThe input contains a single integer l (0 \u2264 l \u2264 1 000 000).\n\nThe input contains a single integer m (0 \u2264 m \u2264 1 000 000).\n\nThe input contains a single integer n (0 \u2264 n \u2264 1 000 000).\n\nThe input contains a single integer o (0 \u2264 o \u2264 1 000 000).\n\nThe input contains a single integer p (0 \u2264 p \u2264 1 000 000).\n\nThe input contains a single integer q (0 \u2264 q \u2264 1 000 000).\n\nThe input contains a single integer r (0 \u2264 r \u2264 1 000 000).\n\nThe input contains a single integer s (0 \u2264 s \u2264 1 000 000).\n\nThe input contains a single integer t (0 \u2264 t \u2264 1 000 000).\n\nThe input contains a single integer u (0 \u2264 u \u2264 1 000 000).\n\nThe input contains a single integer v (0 \u2264 v"
    },
    {
        "number": 1075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0 1 0'\nassert solution(stdin) == '0 1 1'\nassert solution(stdin) == '0 1 2'\nassert solution(stdin) == '0 1 3'\nassert solution(stdin) == '0 1 4'\n"
    },
    {
        "number": 1076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"332748127\"\nassert solution(stdin) == \"969862773\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"332748127\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1\"\nassert solution(stdin
    },
    {
        "number": 1078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n\n4\n1 1 2 2\n\nOutput\n\nYES\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 2:\n\nInput\n\n6\n1 2 3 4 5 6\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 3:\n\nInput\n\n7\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 4:\n\nInput\n\n8\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 5:\n\nInput\n\n9\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 6:\n\nInput\n\n10\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 7:\n\nInput\n\n11\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 8:\n\nInput\n\n12\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 9:\n\nInput\n\n13\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 10:\n\nInput\n\n14\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 11:\n\nInput\n\n15\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 12:\n\nInput\n\n16\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 13:\n\nInput\n\n17\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 14:\n\nInput\n\n18\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_2$,  Decrease $a_3$ and $a_4$,  Decrease $a_3$ and $a_4$ \n\nIn the second operation, one can show that it is impossible to make all elements equal to zero.\n\nExample 15:\n\nInput\n\n19\n1 1 2 2\n\nOutput\n\nNO\n\nExplanation:\n\nIn the first operation, you can make all elements equal to zero in $3$ operations:   Decrease $a_1$ and $a_"
    },
    {
        "number": 1081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"YES\"\nassert solution(\"13\") == \"NO\"\nassert solution(\"24\") == \"NO\"\nassert solution(\"46\") == \"YES\"\n"
    },
    {
        "number": 1082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n4\n1 1 1 1\n\nSample Output\n\n15\n\nSample Input\n\n4\n2 2 2 2\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSample Input\n\n5\n1 2 4 5 8\n\nSample Output\n\n7\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_{i} <= 70\n\nTime Limit: 1 sec\n\nSpace"
    },
    {
        "number": 1083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\n"
    },
    {
        "number": 1084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 1085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 1086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 1087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"14\"\n"
    },
    {
        "number": 1088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"12\"\n"
    },
    {
        "number": 1089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"8\"\n"
    },
    {
        "number": 1090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 1091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 8\"\nassert solution(stdin) == \"1 8\"\nassert solution(stdin) == \"1 8\"\nassert solution(stdin) == \"1 8\"\nassert solution(stdin) == \"1 8\"\n"
    },
    {
        "number": 1092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6720\"\n"
    },
    {
        "number": 1093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ivan\"\nassert solution(stdin) == \"alex\"\nassert solution(stdin) == \"roman\"\nassert solution(stdin) == \"darya\"\nassert solution(stdin) == \"darya\"\n"
    },
    {
        "number": 1095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= stdin[i] <= 10^9\n\n\"\"\""
    },
    {
        "number": 1096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\n\"\"\""
    },
    {
        "number": 1097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"23:59\"\nassert solution(stdin) == \"06:37\"\nassert solution(stdin) == \"23:59\"\nassert solution(stdin) == \"06:37\"\nassert solution(stdin) == \"23:59\"\n"
    },
    {
        "number": 1099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Input Format-----\n\nThe first line contains an integer $n$ (1 <= $n \\le 10^5$).\n\nThe $i$-th of the following $n - 1$ lines contains two integers $u_i$ and $v_i$.\n\nThe $i$-th of the following $n - 1$ lines contains two integers $u_i$ and $v_i$.\n\nOutput\n\nThe minimum number of operations needed to transform the tree into a star.\n\nConstraints\n\n0 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Output Format-----\n\nPrint the minimum number of operations needed to transform the tree into a star.\n\nConstraints\n\n0 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Sample Input-----\n\n6\n4 5\n2 6\n3 2\n1 2\n2 4\n\n-----Sample Output-----\n\n1\n\n-----Sample Input-----\n\n4\n4 1\n4 2\n4 3\n4 4\n\n-----Sample Output-----\n\n0\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Input Format-----\n\nThe first line contains an integer $n$ (1 <= $n \\le 10^5$).\n\nThe $i$-th of the following $n - 1$ lines contains two integers $u_i$ and $v_i$.\n\nThe $i$-th of the following $n - 1$ lines contains two integers $u_i$ and $v_i$.\n\nOutput\n\nThe minimum number of operations needed to transform the tree into a star.\n\nConstraints\n\n0 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Output Format-----\n\nPrint the minimum number of operations needed to transform the tree into a star.\n\nConstraints\n\n0 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Sample Input-----\n\n4\n4 1\n4 2\n4 3\n4 4\n\n-----Sample Output-----\n\n0\n\n-----Sample Input-----\n\n4\n4 1\n4 2\n4 3\n4 4\n\n-----Sample Output-----\n\n0\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Input Format-----\n\nThe first line contains an integer $n$ (1 <= $n \\le 10^5$).\n\nThe $i$-th of the following $n - 1$ lines contains two integers $u_i$ and $v_i$.\n\nThe $i$-th of the following $n - 1$ lines contains two integers $u_i$ and $v_i$.\n\nOutput\n\nThe minimum number of operations needed to transform the tree into a star.\n\nConstraints\n\n0 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Output Format-----\n\nPrint the minimum number of operations needed to transform the tree into a star.\n\nConstraints\n\n0 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n0 <= u_i, v_i <= n - 1\n\n-----Sample Input-----\n\n4\n4 1\n4 2\n4 3\n4 4\n\n-----Sample Output-----\n\n0\n\n-----Sample Input-----\n\n4\n4 1\n4 2\n4 3\n4 4\n\n-----Sample Output-----\n\n0\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= u_i, v_i <= n - 1\n"
    },
    {
        "number": 1100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 17\n\n-----Constraints-----\n\n1 <= n <= 1000\n\n1 <= stdin.length <= 1000\n\nstdin.length <= 1000\n\nstdin[i] is an integer in the range [1, 8].\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSubmissions (easy)\n\nRuntime: 32 ms, faster than 95.74% of Python3 online submissions for Longest Subsequence.\nMemory Usage: 14.2 MB, less than 6.41% of Python3 online submissions for Longest Subsequence.\n\n\"\"\"\n\nclass Solution:\n    def lengthOfLIS(self, nums: List[int]) -> int:\n        if len(nums) == 0:\n            return 0\n        \n        dp = [1] * len(nums)\n        \n        for i in range(1, len(nums)):\n            for j in range(i):\n                if nums[i] > nums[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return max(dp)\n"
    },
    {
        "number": 1104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\nThe first line contains an integer n (1 \u2264 n \u2264 10) \u2014 the number of roads on the path from the entrance to any exit.\n\nThe next line contains 2^{n} + 1 - 2 numbers a_2, a_3,... a_2^{n} + 1 - 1 \u2014 the initial numbers of street lights on each road of the park. Here a_{i} is the number of street lights on the road between squares i and $\\lfloor \\frac{i}{2} \\rfloor$. All numbers a_{i} are positive integers, not exceeding 100.\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output]\n\nPrint the minimum number of street lights that we should add to the roads of the park to make Om Nom feel safe.\n\n[constraints]\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[input]\n\n2\n1 2 3 4 5 6\n\nOutput\n5\n\n\n[output"
    },
    {
        "number": 1107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 3\nassert solution(3) == 7\nassert solution(4) == 7\nassert solution(5) == 7\nassert solution(6) == 7\n"
    },
    {
        "number": 1111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '160'\n"
    },
    {
        "number": 1112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin
    },
    {
        "number": 1113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 1114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Ambiguity\"\nassert solution(stdin) == \"Impossible\"\n\nassert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Ambiguity\"\n"
    },
    {
        "number": 1115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 1116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"OBEY\"\nassert solution(stdin) == \"REBEL\"\nassert solution(stdin) == \"OBEY\"\nassert solution(stdin) == \"REBEL\"\nassert solution(stdin) == \"OBEY\"\n"
    },
    {
        "number": 1117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 370000006\n\n\"\"\""
    },
    {
        "number": 1120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(24) == 5\nassert solution(24) == 5\nassert solution(24) == 5\nassert solution(24) == 5\nassert solution(24) == 5\n"
    },
    {
        "number": 1121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ABA\"\nassert solution(stdin) == \"AA\"\nassert solution(stdin) == \"AAAB\"\nassert solution(stdin) == \"AAAC\"\n"
    },
    {
        "number": 1122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\nassert solution(input()) == \"2 3\"\n"
    },
    {
        "number": 1123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"9\"\n"
    },
    {
        "number": 1124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 1126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1369\"\n"
    },
    {
        "number": 1127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 1129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n\"\"\""
    },
    {
        "number": 1130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 1131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 1132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"bus topology\"\nassert solution(stdin) == \"ring topology\"\nassert solution(stdin) == \"star topology\"\nassert solution(stdin) == \"unknown topology\"\n"
    },
    {
        "number": 1133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n\n\"\"\""
    },
    {
        "number": 1134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"bba\"\nassert solution(stdin) == \"ba\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"b\"\n"
    },
    {
        "number": 1136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n-----Constraints-----\n1 <= n <= 1000\n1 <= m <= 1000\n1 <= k <= 10\ns, t consist of lowercase English letters.\n\n\"\"\""
    },
    {
        "number": 1138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\n-----Constraints-----\n\n1 <= s.length <= 100\ns consists of lowercase English letters.\n\n\"\"\"\n\nclass Solution:\n    def minEditDistance(self, s: str, t: str) -> int:\n        m = len(s)\n        n = len(t)\n        \n        # Initialize the table\n        dp = [[0 for _ in range(n+1)] for _ in range(m+1)]\n        \n        # Initialize the table\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if s[i-1] == t[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        \n        # Return the minimum number of edits\n        return dp[m][n]\n"
    },
    {
        "number": 1139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"36\"\n"
    },
    {
        "number": 1140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"gaaak\"\nassert solution(stdin) == \"waaak\"\nassert solution(stdin) == \"waaak\"\nassert solution(stdin) == \"waaak\"\nassert solution(stdin) == \"waaak\"\n"
    },
    {
        "number": 1142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 1143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2"
    },
    {
        "number": 1145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= m <= 100\n1 <= x_{i} <= m\n1 <= y_{ij} <= m\n\n-----Time Limit: 1 second (S)-----\n\nSample Time Limit: 1 second (S)\nSample Limit: 10,000\n\n-----For input below-----\n\n3 4\n2 1 4\n3 1 3 1\n1 2\n\n-----For output below-----\n\nYES\n\n\"\"\""
    },
    {
        "number": 1147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 1148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\nassert solution(stdin) == 15\n\nassert solution(stdin) == 11\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 1149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"I become the guy.\"\nassert solution(stdin) == \"Oh, my keyboard!\"\n"
    },
    {
        "number": 1150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 1151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.875'\nassert solution(stdin) == '0.5'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 1153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.66666667'\nassert solution(stdin) == '0.98989899'\nassert solution(stdin) == '0.98989899'\nassert solution(stdin) == '0.98989899'\nassert solution(stdin) == '0.98989899'\n"
    },
    {
        "number": 1156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 15\"\nassert solution(stdin) == \"6 15\"\nassert solution(stdin) == \"5 15\"\nassert solution(stdin) == \"5 15\"\nassert solution(stdin) == \"5 15\"\n"
    },
    {
        "number": 1157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"28 27\"\nassert solution(stdin) == \"9 6\"\nassert solution(stdin) == \"28 27\"\nassert solution(stdin) == \"9 6\"\nassert solution(stdin) == \"28 27\"\n"
    },
    {
        "number": 1158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 1160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 1162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"BGBGBG\"\nassert solution(stdin) == \"BGBGBG\"\nassert solution(stdin) == \"BGBGBG\"\nassert solution(stdin) == \"BGBGBG\"\nassert solution(stdin) == \"BGBGBG\"\n"
    },
    {
        "number": 1164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12.438.32\"\nassert solution(stdin) == \"6.38\"\nassert solution(stdin) == \"0.04\"\nassert solution(stdin) == \"0.01\"\nassert solution(stdin) == \"0.01\"\n"
    },
    {
        "number": 1165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"B\"\nassert solution(stdin) == \"A\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"A\"\nassert solution(stdin) == \"B\"\n"
    },
    {
        "number": 1167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7 1\"\nassert solution(stdin) == \"7 1\"\nassert solution(stdin) == \"7 1\"\nassert solution(stdin) == \"7 1\"\nassert solution(stdin) == \"7 1\"\n"
    },
    {
        "number": 1168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\nassert solution(input()) == \"1 1\"\n"
    },
    {
        "number": 1170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 14\n"
    },
    {
        "number": 1172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 1173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 1174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"9\"\n"
    },
    {
        "number": 1175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 1176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '19'\n"
    },
    {
        "number": 1177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 1178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"3\"\n"
    },
    {
        "number": 1179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"27\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"27\"\n"
    },
    {
        "number": 1181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n\nSample Input\n\n3\n1 2 3 4 3 2\n\nSample Output\n\n3\n\nExplanation\n\nRyouko needs to turn page 1 to page 3, page 2 to page 3, page 3 to page 2, page 4 to page 3, page 5 to page 2, page 6 to page 3, page 7 to page 2, page 8 to page 3, page 9 to page 2, page 10 to page 3, page 11 to page 2, page 12 to page 3, page 13 to page 2, page 14 to page 3, page 15 to page 2, page 16 to page 3, page 17 to page 2, page 18 to page 3, page 19 to page 2, page 20 to page 3, page 21 to page 2, page 22 to page 3, page 23 to page 2, page 24 to page 3, page 25 to page 2, page 26 to page 3, page 27 to page 2, page 28 to page 3, page 29 to page 2, page 30 to page 3, page 31 to page 2, page 32 to page 3, page 33 to page 2, page 34 to page 3, page 35 to page 2, page 36 to page 3, page 37 to page 2, page 38 to page 3, page 39 to page 2, page 40 to page 3, page 41 to page 2, page 42 to page 3, page 43 to page 2, page 44 to page 3, page 45 to page 2, page 46 to page 3, page 47 to page 2, page 48 to page 3, page 49 to page 2, page 50 to page 3, page 51 to page 2, page 52 to page 3, page 53 to page 2, page 54 to page 3, page 55 to page 2, page 56 to page 3, page 57 to page 2, page 58 to page 3, page 59 to page 2, page 60 to page 3, page 61 to page 2, page 62 to page 3, page 63 to page 2, page 64 to page 3, page 65 to page 2, page 66 to page 3, page 67 to page 2, page 68 to page 3, page 69 to page 2, page 70 to page 3, page 71 to page 2, page 72 to page 3, page 73 to page 2, page 74 to page 3, page 75 to page 2, page 76 to page 3, page 77 to page 2, page 78 to page 3, page 79 to page 2, page 80 to page 3, page 81 to page 2, page 82 to page 3, page 83 to page 2, page 84 to page 3, page 85 to page 2, page 86 to page 3, page 87 to page 2, page 88 to page 3, page 89 to page 2, page 90 to page 3, page 91 to page 2, page 92 to page 3, page 93 to page 2, page 94 to page 3, page 95 to page 2, page 96 to page 3, page 97 to page 2, page 98 to page 3, page 99 to page 2, page 100 to page 3, page 101 to page 2, page 102 to page 3, page 103 to page 2, page 104 to page 3, page 105 to page 2, page 106 to page 3, page 107 to page 2, page 108 to page 3, page 109 to page 2, page 110 to page 3, page 111 to page 2, page 112 to page 3, page 113 to page 2, page 114 to page 3, page 115 to page 2, page 116 to page 3, page 117 to page 2, page 118 to page 3, page 119 to page 2, page 120 to page 3, page 121 to page 2, page 122 to page 3, page 123 to page 2, page 124 to page 3, page 125 to page 2, page 126 to page 3, page 127 to page 2, page 128 to page 3, page 129 to page 2, page 130 to page 3, page 131 to page 2, page 132 to page 3, page 133 to page 2, page 134 to page 3, page 135 to page 2, page 136 to page 3, page 137 to page 2, page 138 to page 3, page 139 to page 2, page 140 to page 3, page 141 to page 2, page 142 to page 3, page 143 to page 2, page 144 to page 3, page 145 to page 2, page 146 to page 3, page 147 to page 2, page 148 to page 3, page 149 to page 2, page 150 to page 3, page 151 to page 2, page 152 to page 3, page 153 to page 2, page 154 to page 3, page 155 to page 2, page 156 to page 3, page 157 to page 2, page 158 to page 3, page 159 to page 2, page 160 to page 3, page 161 to page 2, page 162 to page 3, page 163 to page 2, page 164 to page 3, page 165 to page 2, page 166 to page 3, page 167 to page 2, page 168 to page 3, page 169 to page 2, page 170 to page 3, page 171 to page 2, page 172 to page 3, page 173 to page 2, page 174 to page 3, page 175 to page 2, page 176 to page 3, page 177 to page 2, page 178 to page 3, page 179 to page 2, page 180 to page 3, page 181 to page 2, page 182 to page 3, page 183 to page 2, page 184 to page 3, page 185 to page 2, page 186 to page 3, page 187 to page 2, page 188 to page 3, page 189 to page 2, page 190 to page 3, page 191 to page 2, page 192 to page 3, page 193 to page 2, page 194 to page 3, page 195 to page 2, page 196 to page 3, page 197 to page 2, page 198 to page 3, page 199 to page 2, page 200 to page 3, page 201 to page 2, page 202 to page 3, page 203 to page 2, page 204 to page 3, page 205 to page 2, page 206 to page 3, page 207 to page 2, page 208 to page 3, page 209 to page 2, page 210 to page 3, page 211 to page 2, page 212 to page 3, page 213 to page 2, page 214 to page 3, page 215 to page 2, page 216 to page 3, page 217 to page 2, page 218 to page 3, page 219 to page 2, page 220 to page 3,"
    },
    {
        "number": 1182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"101\"\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n <= 100\n1 <= x <= 100\n\n\"\"\""
    },
    {
        "number": 1184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"a\", \"b\", \"c\"]) == \"3\"\nassert solution([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == \"3\"\nassert solution([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == \"2\"\nassert solution([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == \"0\"\n"
    },
    {
        "number": 1185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '61'\n"
    },
    {
        "number": 1186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == \"YES\"\nassert solution(6) == \"YES\"\nassert solution(5) == \"NO\"\nassert solution(4) == \"NO\"\nassert solution(3) == \"NO\"\n"
    },
    {
        "number": 1187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1\"\n"
    },
    {
        "number": 1188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 1191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 46 36\"\nassert solution(stdin) == \"1 3 5 7 9\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 1192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.833333333333333'\nassert solution(stdin) == '1.458333333333334'\nassert solution(stdin) == '0.833333333333333'\nassert solution(stdin) == '1.458333333333334'\nassert solution(stdin) == '0.833333333333333'\n"
    },
    {
        "number": 1193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 30\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n\"\"\""
    },
    {
        "number": 1194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 0 2\"\nassert solution(stdin) == \"1 0 2\"\nassert solution(stdin) == \"1 0 2\"\nassert solution(stdin) == \"1 0 2\"\nassert solution(stdin) == \"1 0 2\"\n"
    },
    {
        "number": 1195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 1196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '92'\nassert solution(stdin) == '23'\nassert solution(stdin) == '17'\nassert solution(stdin) == '6'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 1200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1110\"\nassert solution(stdin) == \"1100\"\nassert solution(stdin) == \"1110\"\nassert solution(stdin) == \"1100\"\nassert solution(stdin) == \"1110\"\n"
    },
    {
        "number": 1203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2.6666666666667'\nassert solution(stdin) == '2.6666666666667'\nassert solution(stdin) == '2.6666666666667'\nassert solution(stdin) == '2.6666666666667'\nassert solution(stdin) == '2.6666666666667'\n"
    },
    {
        "number": 1204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == -1\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 GB\n\n-----Tags-----\nFirst-party\n\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 1206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5.7500000000'\nassert solution(stdin) == '5.7500000000'\nassert solution(stdin) == '5.7500000000'\nassert solution(stdin) == '5.7500000000'\nassert solution(stdin) == '5.7500000000'\n"
    },
    {
        "number": 1207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 1208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n0 < stdin.length <= 100\n0 < stdin[i] < 10^6\n\n-----Time Limit: 1 seconds-----\nYou can take a while to complete the test.\n\n---Coding Rules---\nThe input is given as a string.\nThere are no leading whitespace or newline characters.\nThere are no consecutive whitespace characters.\nThere are no consecutive whitespace characters in the input.\n\n---Constraints---\n1 \u2264 n \u2264 100\n\n---Time Limit: 1 seconds---\nYour runtime beats 78.84 % of python3 submissions.\n\n---Memory Limit: 128 MB---\nYou may not use any additional memory. Please only use it for testing.\n\"\"\""
    },
    {
        "number": 1209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4.58413\"\nassert solution(stdin) == \"1.22491\"\nassert solution(stdin) == \"-2.10517\"\nassert solution(stdin) == \"-3.70387\"\n"
    },
    {
        "number": 1210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4500'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 1212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"LEFT\"\nassert solution(stdin) == \"RIGHT\"\nassert solution(stdin) == \"PRINT x\"\nassert solution(stdin) == \"RIGHT\"\nassert solution(stdin) == \"RIGHT\"\n"
    },
    {
        "number": 1214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 1215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(13) == \"pobeeeedaaaaa\"\nassert solution(22) == \"iiiimpleeemeentatiioon\"\nassert solution(18) == \"aeiouyaaeeiioouuyy\"\nassert solution(24) == \"aoiuyeggghhh\"\n"
    },
    {
        "number": 1217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2 1 4\"\n"
    },
    {
        "number": 1218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\nInput\n5 5\n\nOutput\n1\n\nInput\n8 4\n\nOutput\n-1\n"
    },
    {
        "number": 1219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 26\n\n\"\"\""
    },
    {
        "number": 1220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 1221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"252\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n1 \u2264 a_1, a_2,..., a_{n} \u2264 10^9\n1 \u2264 b_1, b_2,..., b_{m} \u2264 10^9\n\n1 \u2264 stdin.length \u2264 100\n\n1 \u2264 stdin[i] \u2264 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\nSubmissions are marked in bold blue.\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string stdin\n\nA string of numbers separated by spaces.\n\nGuaranteed constraints:\n1 \u2264 stdin.length \u2264 100\n1 \u2264 stdin[i] \u2264 10^9\n\n[output] string\n\nThe brightness of the chosen pair.\n\n[constraints]\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n[runtime limit] 1 seconds (py3)\n\n[execution time limit] 4 seconds (py3)\n\n[input] string"
    },
    {
        "number": 1222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '23'\n"
    },
    {
        "number": 1223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 1224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == '4 2'\nassert solution(input) == '4 2'\nassert solution(input) == '4 2'\nassert solution(input) == '4 2'\nassert solution(input) == '4 2'\n"
    },
    {
        "number": 1225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 1226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"7\"\n"
    },
    {
        "number": 1227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"19\"\n"
    },
    {
        "number": 1228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 B\"\nassert solution(stdin) == \"1 B\"\nassert solution(stdin) == \"1 B\"\nassert solution(stdin) == \"1 B\"\nassert solution(stdin) == \"1 B\"\n"
    },
    {
        "number": 1229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 100\n\n0 <= stdin[i] <= 100\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Space Limit-----\n\nO(1)\n\n\n-----Submissions-----\n\nSample Input\n\n2 3\n\nSample Output\n\nYES\n\nExplanation\n\nThe interval of steps described above is:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n5 6\n\nThe steps with even and odd numbers are:\n\n1 2\n3 4\n"
    },
    {
        "number": 1232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\n"
    },
    {
        "number": 1234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"21\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20 20\"\nassert solution(stdin) == \"20 20\"\nassert solution(stdin) == \"20 20\"\nassert solution(stdin) == \"20 20\"\nassert solution(stdin) == \"20 20\"\n"
    },
    {
        "number": 1236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Stannis\"\nassert solution(stdin) == \"Daenerys\"\nassert solution(stdin) == \"Daenerys\"\nassert solution(stdin) == \"Stannis\"\nassert solution(stdin) == \"Stannis\"\n"
    },
    {
        "number": 1237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= s <= 1000\n\n------Time Limit (Cached)------\n\nO(n)\n\n------Space Limit (Cached)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO(1)\n\n------Time Limit (Real)------\n\nO(n)\n\n------Space Limit (Real)------\n\nO"
    },
    {
        "number": 1238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 1240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 1 0\"\nassert solution(stdin) == \"1 0 0 0 1\"\nassert solution(stdin) == \"1 0 0 0 1\"\nassert solution(stdin) == \"1 0 0 0 1\"\nassert solution(stdin) == \"1 0 0 0 1\"\n"
    },
    {
        "number": 1243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12"
    },
    {
        "number": 1244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= a_1, a_2,..., a_{n} <= 1000\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSubmissions\n\nLanguage\n\nProblem\n\nSubmissions\n\nTime Limit\n\nO(n)\n\n\n-----Alternatives-----\n\n1. Use a stack to store the elements of the array.\n2. Use a queue to store the elements of the array.\n3. Use a stack to store the elements of the array.\n4. Use a queue to store the elements of the array.\n5. Use a stack to store the elements of the array.\n6. Use a queue to store the elements of the array.\n7. Use a stack to store the elements of the array.\n8. Use a queue to store the elements of the array.\n9. Use a stack to store the elements of the array.\n10. Use a queue to store the elements of the array.\n11. Use a stack to store the elements of the array.\n12. Use a queue to store the elements of the array.\n13. Use a stack to store the elements of the array.\n14. Use a queue to store the elements of the array.\n15. Use a stack to store the elements of the array.\n16. Use a queue to store the elements of the array.\n17. Use a stack to store the elements of the array.\n18. Use a queue to store the elements of the array.\n19. Use a stack to store the elements of the array.\n20. Use a queue to store the elements of the array.\n21. Use a stack to store the elements of the array.\n22. Use a queue to store the elements of the array.\n23. Use a stack to store the elements of the array.\n24. Use a queue to store the elements of the array.\n25. Use a stack to store the elements of the array.\n26. Use a queue to store the elements of the array.\n27. Use a stack to store the elements of the array.\n28. Use a queue to store the elements of the array.\n29. Use a stack to store the elements of the array.\n30. Use a queue to store the elements of the array.\n31. Use a stack to store the elements of the array.\n32. Use a queue to store the elements of the array.\n33. Use a stack to store the elements of the array.\n34. Use a queue to store the elements of the array.\n35. Use a stack to store the elements of the array.\n36. Use a queue to store the elements of the array.\n37. Use a stack to store the elements of the array.\n38. Use a queue to store the elements of the array.\n39. Use a stack to store the elements of the array.\n40. Use a queue to store the elements of the array.\n41. Use a stack to store the elements of the array.\n42. Use a queue to store the elements of the array.\n43. Use a stack to store the elements of the array.\n44. Use a queue to store the elements of the array.\n45. Use a stack to store the elements of the array.\n46. Use a queue to store the elements of the array.\n47. Use a stack to store the elements of the array.\n48. Use a queue to store the elements of the array.\n49. Use a stack to store the elements of the array.\n50. Use a queue to store the elements of the array.\n51. Use a stack to store the elements of the array.\n52. Use a queue to store the elements of the array.\n53. Use a stack to store the elements of the array.\n54. Use a queue to store the elements of the array.\n55. Use a stack to store the elements of the array.\n56. Use a queue to store the elements of the array.\n57. Use a stack to store the elements of the array.\n58. Use a queue to store the elements of the array.\n59. Use a stack to store the elements of the array.\n60. Use a queue to store the elements of the array.\n61. Use a stack to store the elements of the array.\n62. Use a queue to store the elements of the array.\n63. Use a stack to store the elements of the array.\n64. Use a queue to store the elements of the array.\n65. Use a stack to store the elements of the array.\n66. Use a queue to store the elements of the array.\n67. Use a stack to store the elements of the array.\n68. Use a queue to store the elements of the array.\n69. Use a stack to store the elements of the array.\n70. Use a queue to store the elements of the array.\n71. Use a stack to store the elements of the array.\n72. Use a queue to store the elements of the array.\n73. Use a stack to store the elements of the array.\n74. Use a queue to store the elements of the array.\n75. Use a stack to store the elements of the array.\n76. Use a queue to store the elements of the array.\n77. Use a stack to store the elements of the array.\n78. Use a queue to store the elements of the array.\n79. Use a stack to store the elements of the array.\n80. Use a queue to store the elements of the array.\n81. Use a stack to store the elements of the array.\n82. Use a queue to store the elements of the array.\n83. Use a stack to store the elements of the array.\n84. Use a queue to store the elements of the array.\n85. Use a stack to store the elements of the array.\n86. Use a queue to store the elements of the array.\n87. Use a stack to store the elements of the array.\n88. Use a queue to store the elements of the array.\n89. Use a stack to store the elements of the array.\n90. Use a queue to store the elements of the array.\n91. Use a stack to store the elements of the array.\n92. Use a queue to store the elements of the array.\n93. Use a stack to store the elements of the array.\n94. Use a queue to store the elements of the array.\n95. Use a stack to store the elements of the array.\n96. Use a queue to store the elements of the array.\n97. Use a stack to store the elements of the array.\n98. Use a queue to store the elements of the array.\n99. Use a stack to store the elements of the array.\n100. Use a queue to store the elements of the array.\n101. Use a stack to store the elements of the array.\n102. Use a queue to store the elements of the array.\n103. Use a stack to store the elements of the array.\n104. Use a queue to store the elements of the array.\n105. Use a stack to store the elements of the array.\n106. Use a queue to store the elements of the array.\n107. Use a stack to store the elements of the array.\n108. Use a queue to store the elements of the array.\n109. Use a stack to store the elements of the array.\n110. Use a queue to store the elements of the array.\n111. Use a stack to store the elements of the array.\n112. Use a queue to store the elements of the array.\n113. Use a stack to store the elements of the array.\n114. Use a queue to store the elements of the array.\n115. Use a stack to store the elements of the array.\n116. Use a queue to store the elements of the array.\n117. Use a stack to store the elements of the array.\n118. Use a queue to store the elements of the array.\n119."
    },
    {
        "number": 1245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"()()()\"\nassert solution(stdin) == \"IMPOSSIBLE\"\n"
    },
    {
        "number": 1246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"Second\"\n"
    },
    {
        "number": 1248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"60\"\nassert solution(stdin) == \"60\"\nassert solution(stdin) == \"60\"\nassert solution(stdin) == \"60\"\nassert solution(stdin) == \"60\"\n"
    },
    {
        "number": 1249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"1 2 3 4 5 9 11 12 13\"\nassert solution(stdin) == \"1 2 3 4 5 9 11 12 13\"\n"
    },
    {
        "number": 1250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == -1\nassert solution(2) == -1\nassert solution(3) == -1\nassert solution(4) == -1\nassert solution(5) == -1\n"
    },
    {
        "number": 1251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 1256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1+2+3\"\nassert solution(stdin) == \"1+1+3+1+3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2+1\"\nassert solution(stdin) == \"2+1+1\"\n"
    },
    {
        "number": 1257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"85\"\nassert solution(stdin) == \"28\"\nassert solution(stdin) == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n"
    },
    {
        "number": 1258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4 2 3 5\"\n"
    },
    {
        "number": 1259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 5\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3 4\"\nassert solution(stdin) == \"2 3 4 5\"\nassert solution(stdin) == \"2 3 4 5 6\"\n"
    },
    {
        "number": 1261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"27\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"27\"\n"
    },
    {
        "number": 1263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 1264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1"
    },
    {
        "number": 1268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n1 <= b_i <= 10^9\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Time complexity-----\n\nTime complexity: O(n)\n\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume of the remaining can.\n3. For each can, check if the remaining volume of the remaining can is less than the volume of the can. If it is, remove the can from the list of cans.\n4. Return \"YES\" if the list of cans is empty, otherwise return \"NO\".\n\nTime complexity: O(n)\nSpace Complexity: O(n)\n\n-----Algorithm-----\n\nAlgorithm:\n\n1. Create a list of all the cans.\n2. For each can, create a list of the remaining volume"
    },
    {
        "number": 1269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n[Challenge]\n\nYou are given a string $s$ of $n$ distinct colours, and a string $m$ of $n$ distinct colours.\n\nThe process is to paint the strip with the first $m$ colours, and then paint the remaining $m$ colours.\n\nFor example, if $s = \"aabbccddeeff\"$, then $m = 3$, then $s = \"aabbccddeeff\"$\n\n[Input]\n\nA string of $n$ distinct colours, and a string of $n$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $m$ distinct colours.\n\nA string of $"
    },
    {
        "number": 1270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 2\nassert solution(6) == 3\nassert solution(7) == 2\nassert solution(8) == 2\nassert solution(9) == 2\n"
    },
    {
        "number": 1271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 1272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 1273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 1274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 1275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 1276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 1277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n\"\"\""
    },
    {
        "number": 1278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= s.length <= 1500\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i.\ns[i] is a good English letter.\ns[i]!= s[j] for all j < i."
    },
    {
        "number": 1281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"19\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"19\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"19\""
    },
    {
        "number": 1282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"6 1\"\nassert solution(stdin) == \"1 8\"\nassert solution(stdin) == \"1 8\"\nassert solution(stdin) == \"1 8\"\n"
    },
    {
        "number": 1284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"17\"\n\nInput\n1\n4\n\nOutput\n4\n\nInput\n1\n4\n\nOutput\n4\n\nExplanation\n\nPick the number at index $3$. The sum of adjacent elements equals $17$. Delete $7$ and $10$ from the circle and replace $2$ with $17$.\n\n\"\"\""
    },
    {
        "number": 1285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n\"\"\""
    },
    {
        "number": 1286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1/2\"\nassert solution(stdin) == \"0/1\"\nassert solution(stdin) == \"0/1\"\nassert solution(stdin) == \"0/1\"\nassert solution(stdin) == \"0/1\"\n"
    },
    {
        "number": 1287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.680000000000000'"
    },
    {
        "number": 1288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 a_{i} \u2264 10^9\n1 \u2264 b_{i} \u2264 n\n1 \u2264 m \u2264 4\u00b710^5\n\nTime Limit: 1 sec\n\nSpace Limit: 1 sec\n\n-----Submissions-----\n\nSample Input\n\n3\n2 3 5 7 11 13\n5\n3 4 5 5 6\n\nSample Output\n\n10\n\nExplanation\n\nThe bus travels along the main street of the capital. The street begins from the main square and looks like a very long segment. There are n bus stops located along the street, the i-th of them is located at the distance a_{i} from the central square, all distances are distinct, the stops are numbered in the order of increasing distance from the square, that is, a_{i} < a_{i} + 1 for all i from 1 to n - 1. The bus starts its journey from the first stop, it passes stops 2, 3 and so on. It reaches the stop number n, turns around and goes in the opposite direction to stop 1, passing all the intermediate stops in the reverse order. After that, it again starts to move towards stop n. During the day, the bus runs non-stop on this route.\n\nThe bus is equipped with the Berland local positioning system. When the bus passes a stop, the system notes down its number.\n\nOne of the key features of the system is that it can respond to the queries about the distance covered by the bus for the parts of its path between some pair of stops. A special module of the system takes the input with the information about a set of stops on a segment of the path, a stop number occurs in the set as many times as the bus drove past it. This module returns the length of the traveled segment of the path (or -1 if it is impossible to determine the length uniquely). The operation of the module is complicated by the fact that stop numbers occur in the request not in the order they were visited but in the non-decreasing order.\n\nFor example, if the number of stops is 6, and the part of the bus path starts at the bus stop number 5, ends at the stop number 3 and passes the stops as follows: $5 \\rightarrow 6 \\rightarrow 5 \\rightarrow 4 \\rightarrow 3$, then the request about this segment will have form: 3, 4, 5, 5, 6. If the bus on the segment of the path from stop 5 to stop 3 has time to drive past the 1-th stop (i.e., if we consider a segment that ends with the second visit to stop 3 on the way from 5), then the request will have form: 1, 2, 2, 3, 3, 4, 5, 5, 6.\n\nYou will have to repeat the Berland programmers achievement and implement this function.\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 a_{i} \u2264 10^9\n1 \u2264 b_{i} \u2264 n\n1 \u2264 m \u2264 4\u00b710^5\n\nTime Limit: 1 sec\n\nSpace Limit: 1 sec\n\n-----Submissions-----\n\nSample Input\n\n3\n2 3 5 7 11 13\n5\n3 4 5 5 6\n\nSample Output\n\n10\n\nExplanation\n\nThe bus travels along the main street of the capital. The street begins from the main square and looks like a very long segment. There are n bus stops located along the street, the i-th of them is located at the distance a_{i} from the central square, all distances are distinct, the stops are numbered in the order of increasing distance from the square, that is, a_{i} < a_{i} + 1 for all i from 1 to n - 1. The bus starts its journey from the first stop, it passes stops 2, 3 and so on. It reaches the stop number n, turns around and goes in the opposite direction to stop 1, passing all the intermediate stops in the reverse order. After that, it again starts to move towards stop n. During the day, the bus runs non-stop on this route.\n\nThe bus is equipped with the Berland local positioning system. When the bus passes a stop, the system notes down its number.\n\nOne of the key features of the system is that it can respond to the queries about the distance covered by the bus for the parts of its path between some pair of stops. A special module of the system takes the input with the information about a set of stops on a segment of the path, a stop number occurs in the set as many times as the bus drove past it. This module returns the length of the traveled segment of the path (or -1 if it is impossible to determine the length uniquely). The operation of the module is complicated by the fact that stop numbers occur in the request not in the order they were visited but in the non-decreasing order.\n\nIn the third sample"
    },
    {
        "number": 1290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\""
    },
    {
        "number": 1291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 10^4\n-10^4 <= M_{x}, M_{y} <= 10^4\n-10^4 <= S_{x}, S_{y} <= 10^4\n\n-----Time Limit-----\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\n-----Space Limit-----\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\n-----Algorithm-----\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m)\n\nO(n + m"
    },
    {
        "number": 1292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4 3 3\"\nassert solution(stdin) == \"1 4 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 1293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"a\"\nassert solution(stdin) == \"z\"\nassert solution(stdin) == \"c\"\nassert solution(stdin) == \"b\"\nassert solution(stdin) == \"a\"\n"
    },
    {
        "number": 1295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 1297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n1 <= n <= 100\n\n1 <= stdin.length <= 100\n\nstdin contains only the characters 'A', 'T', 'G', and 'C'.\n\n\"\"\""
    },
    {
        "number": 1298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 1300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"jolteon\"\nassert solution(stdin) == \"leafeon\"\nassert solution(stdin) == \"flareon\"\nassert solution(stdin) == \"espeon\"\nassert solution(stdin) == \"umbreon\"\n"
    },
    {
        "number": 1302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2 4 3 1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"x!! x!!!\"\n"
    },
    {
        "number": 1305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == \"Mahmoud\"\nassert solution(2) == \"Ehab\"\nassert solution(3) == \"Mahmoud\"\nassert solution(4) == \"Ehab\"\nassert solution(5) == \"Mahmoud\"\n"
    },
    {
        "number": 1308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nInput\n2\n1 2 3 4\n\nOutput\n1\n\nInput\n4\n1 3 4 6 3 4 100 200\n\nOutput\n5\n"
    },
    {
        "number": 1310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\n-----Constraints-----\n1 <= n <= 200 000\n0 <= x_{i} <= 10^9\n0 <= w_{i} <= 10^9\n\n-----Time Limit-----\n1 minute\n\n-----Memory Limit-----\n256 MB\n\n-----Solutions-----\n\nInput:\n4\n2 3\n3 1\n6 1\n0 2\n\nOutput:\n3\n\nExplanation:\nThe graph is given as follows:\n\nGraph G = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647,"
    },
    {
        "number": 1312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin
    },
    {
        "number": 1313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Second\"\nassert solution(stdin) == \"First\""
    },
    {
        "number": 1314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 1315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \":(\"\n"
    },
    {
        "number": 1316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 1"
    },
    {
        "number": 1317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000000000000000000\"\nassert solution(stdin) == \"1000000000000000000\"\nassert solution(stdin) == \"1000000000000000000\"\nassert solution(stdin) == \"1000000000000000000\"\nassert solution(stdin) == \"1000000000000000000\"\n"
    },
    {
        "number": 1318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 130\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"4 6 9\"\n"
    },
    {
        "number": 1319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"36\"\nassert solution(stdin) == \"1728\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= stdin.length <= 100\nstdin.length <= n\n\n-----Time Limit-----\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSubmissions are marked in bold blue.\n\n\"\"\""
    },
    {
        "number": 1321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"75 110 60\"\n"
    },
    {
        "number": 1322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '19'\n\n[Good]\n"
    },
    {
        "number": 1323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n1 <= m, n <= 10^5\n1 <= a_{i}, b_{i} <= 10^9\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 GB\n\n-----Alternatives\n\n1. Use a hash table to store the number of rows from each partition.\n2. Use a hash table to store the number of rows from each partition.\n3. Use a hash table to store the number of rows from each partition.\n4. Use a hash table to store the number of rows from each partition.\n5. Use a hash table to store the number of rows from each partition.\n6. Use a hash table to store the number of rows from each partition.\n7. Use a hash table to store the number of rows from each partition.\n8. Use a hash table to store the number of rows from each partition.\n9. Use a hash table to store the number of rows from each partition.\n10. Use a hash table to store the number of rows from each partition.\n11. Use a hash table to store the number of rows from each partition.\n\n-----Successors\n\n1. Use a hash table to store the number of rows from each partition.\n2. Use a hash table to store the number of rows from each partition.\n3. Use a hash table to store the number of rows from each partition.\n4. Use a hash table to store the number of rows from each partition.\n5. Use a hash table to store the number of rows from each partition.\n6. Use a hash table to store the number of rows from each partition.\n7. Use a hash table to store the number of rows from each partition.\n8. Use a hash table to store the number of rows from each partition.\n9. Use a hash table to store the number of rows from each partition.\n10. Use a hash table to store the number of rows from each partition.\n11. Use a hash table to store the number of rows from each partition.\n\n\"\"\"\n\nclass Solution:\n    def minOperations(self, m: int, n: int, a: List[int], b: List[int]) -> int:\n        \n        def get_partition(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_2(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_3(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_4(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_5(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_6(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_7(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_8(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_9(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_10(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_11(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_12(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_13(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_14(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_15(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_16(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_17(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_18(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_19(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_20(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_21(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_22(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_23(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_24(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_25(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_26(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_27(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_partition_hash_28(a, b):\n            return (a[0] + b[0], a[1] + b[1])\n        \n        def get_part"
    },
    {
        "number": 1324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 1325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"aeabcaez\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p <= n\n\nTime Limit: 1 sec\n\nSpace Limit: 1 GB\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at position p.\n7. The string is not cyclic and the text cursor is at position p.\n8. The string is not cyclic and the text cursor is at position p.\n9. The string is not cyclic and the text cursor is at position p.\n10. The string is not cyclic and the text cursor is at position p.\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at position p.\n7. The string is not cyclic and the text cursor is at position p.\n8. The string is not cyclic and the text cursor is at position p.\n9. The string is not cyclic and the text cursor is at position p.\n10. The string is not cyclic and the text cursor is at position p.\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at position p.\n7. The string is not cyclic and the text cursor is at position p.\n8. The string is not cyclic and the text cursor is at position p.\n9. The string is not cyclic and the text cursor is at position p.\n10. The string is not cyclic and the text cursor is at position p.\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at position p.\n7. The string is not cyclic and the text cursor is at position p.\n8. The string is not cyclic and the text cursor is at position p.\n9. The string is not cyclic and the text cursor is at position p.\n10. The string is not cyclic and the text cursor is at position p.\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at position p.\n7. The string is not cyclic and the text cursor is at position p.\n8. The string is not cyclic and the text cursor is at position p.\n9. The string is not cyclic and the text cursor is at position p.\n10. The string is not cyclic and the text cursor is at position p.\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at position p.\n7. The string is not cyclic and the text cursor is at position p.\n8. The string is not cyclic and the text cursor is at position p.\n9. The string is not cyclic and the text cursor is at position p.\n10. The string is not cyclic and the text cursor is at position p.\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at position p.\n7. The string is not cyclic and the text cursor is at position p.\n8. The string is not cyclic and the text cursor is at position p.\n9. The string is not cyclic and the text cursor is at position p.\n10. The string is not cyclic and the text cursor is at position p.\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at position p.\n7. The string is not cyclic and the text cursor is at position p.\n8. The string is not cyclic and the text cursor is at position p.\n9. The string is not cyclic and the text cursor is at position p.\n10. The string is not cyclic and the text cursor is at position p.\n\n-----Bug Fixes-----\n\n1. The string is not cyclic.\n2. The string is not palindrome.\n3. The string is not cyclic and the text cursor is at position p.\n4. The string is not cyclic and the text cursor is at position p.\n5. The string is not cyclic and the text cursor is at position p.\n6. The string is not cyclic and the text cursor is at"
    },
    {
        "number": 1326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '23'\n"
    },
    {
        "number": 1327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"56\"\n"
    },
    {
        "number": 1328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0\"\n"
    },
    {
        "number": 1330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"#####\"\nassert solution(stdin) == \"..#\"\nassert solution(stdin) == \"###\"\nassert solution(stdin) == \"##\"\nassert solution(stdin) == \"..\"\n"
    },
    {
        "number": 1334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"aca\"\nassert solution(stdin) == \"baa\"\nassert solution(stdin) == \"baa\"\nassert solution(stdin) == \"aca\"\nassert solution(stdin) == \"aca\"\n"
    },
    {
        "number": 1335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"1 3 2\"\nassert solution(stdin) == \"1 2 1\"\nassert solution(stdin) == \"1 3 1\"\nassert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 1339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"21\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"21\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"21\""
    },
    {
        "number": 1341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"15\"\n"
    },
    {
        "number": 1342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 GB\n\n-----Alternatives-----\n\n1. Use a dictionary to store the balls of each color.\n2. Use a set to store the balls of each color.\n3. Use a set to store the balls of each color.\n4. Use a set to store the balls of each color.\n5. Use a set to store the balls of each color.\n6. Use a set to store the balls of each color.\n7. Use a set to store the balls of each color.\n8. Use a set to store the balls of each color.\n9. Use a set to store the balls of each color.\n10. Use a set to store the balls of each color.\n11. Use a set to store the balls of each color.\n12. Use a set to store the balls of each color.\n13. Use a set to store the balls of each color.\n14. Use a set to store the balls of each color.\n15. Use a set to store the balls of each color.\n16. Use a set to store the balls of each color.\n17. Use a set to store the balls of each color.\n18. Use a set to store the balls of each color.\n19. Use a set to store the balls of each color.\n20. Use a set to store the balls of each color.\n21. Use a set to store the balls of each color.\n22. Use a set to store the balls of each color.\n23. Use a set to store the balls of each color.\n24. Use a set to store the balls of each color.\n25. Use a set to store the balls of each color.\n26. Use a set to store the balls of each color.\n27. Use a set to store the balls of each color.\n28. Use a set to store the balls of each color.\n29. Use a set to store the balls of each color.\n30. Use a set to store the balls of each color.\n31. Use a set to store the balls of each color.\n32. Use a set to store the balls of each color.\n33. Use a set to store the balls of each color.\n34. Use a set to store the balls of each color.\n35. Use a set to store the balls of each color.\n36. Use a set to store the balls of each color.\n37. Use a set to store the balls of each color.\n38. Use a set to store the balls of each color.\n39. Use a set to store the balls of each color.\n40. Use a set to store the balls of each color.\n41. Use a set to store the balls of each color.\n42. Use a set to store the balls of each color.\n43. Use a set to store the balls of each color.\n44. Use a set to store the balls of each color.\n45. Use a set to store the balls of each color.\n46. Use a set to store the balls of each color.\n47. Use a set to store the balls of each color.\n48. Use a set to store the balls of each color.\n49. Use a set to store the balls of each color.\n50. Use a set to store the balls of each color.\n51. Use a set to store the balls of each color.\n52. Use a set to store the balls of each color.\n53. Use a set to store the balls of each color.\n54. Use a set to store the balls of each color.\n55. Use a set to store the balls of each color.\n56. Use a set to store the balls of each color.\n57. Use a set to store the balls of each color.\n58. Use a set to store the balls of each color.\n59. Use a set to store the balls of each color.\n60. Use a set to store the balls of each color.\n61. Use a set to store the balls of each color.\n62. Use a set to store the balls of each color.\n63. Use a set to store the balls of each color.\n64. Use a set to store the balls of each color.\n65. Use a set to store the balls of each color.\n66. Use a set to store the balls of each color.\n67. Use a set to store the balls of each color.\n68. Use a set to store the balls of each color.\n69. Use a set to store the balls of each color.\n70. Use a set to store the balls of each color.\n71. Use a set to store the balls of each color.\n72. Use a set to store the balls of each color.\n73. Use a set to store the balls of each color.\n74. Use a set to store the balls of each color.\n75. Use a set to store the balls of each color.\n76. Use a set to store the balls of each color.\n77. Use a set to store the balls of each color.\n78. Use a set to store the balls of each color.\n79. Use a set to store the balls of each color.\n80. Use a set to store the balls of each color.\n81. Use a set to store the balls of each color.\n82. Use a set to store the balls of each color.\n83. Use a set to store the balls of each color.\n84. Use a set to store the balls of each color.\n85. Use a set to store the balls of each color.\n86. Use a set to store the balls of each color.\n87. Use a set to store the balls of each color.\n88. Use a set to store the balls of each color.\n89. Use a set to store the balls of each color.\n90. Use a set to store the balls of each color.\n91. Use a set to store the balls of each color.\n92. Use a set to store the balls of each color.\n93. Use a set to store the balls of each color.\n94. Use a set to store the balls of each color.\n95. Use a set to store the balls of each color.\n96. Use a set to store the balls of each color.\n97. Use a set to store the balls of each color.\n98. Use a set to store the balls of each color.\n99. Use a set to store the balls of each color.\n100. Use a set to store the balls of each color.\n101. Use a set to store the balls of each color.\n102. Use a set to store the balls of each color.\n103. Use a set to store the balls of each color.\n104. Use a set to store the balls of each color.\n105. Use a set to store the balls of each color.\n106. Use a set to store the balls of each color.\n107. Use a set to store the balls of each color.\n108. Use a set to store the balls of each color.\n109. Use a set to store the balls of each color.\n110. Use a set to store the balls of each color.\n111. Use a set to store the balls of each color.\n112. Use a set to store the balls of each color.\n113. Use a set to store the balls of each color.\n114. Use a set to store the balls of each color.\n115. Use a set to store the balls of each color.\n116. Use a set to store the balls of each color.\n117. Use a set to store the balls of each color.\n118. Use a set to store the balls of each color.\n119. Use a set to store the balls of each"
    },
    {
        "number": 1343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n\n[Good]"
    },
    {
        "number": 1344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"+++-\", \"The solution should be '+++-'\"\n"
    },
    {
        "number": 1346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 10\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 1348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 1349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 1351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '123'\nassert solution(stdin) == '123'\nassert solution(stdin) == '123'\nassert solution(stdin) == '123'\n"
    },
    {
        "number": 1352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.41421356237309514547\"\nassert solution(stdin) == \"1.00000000000000000000\"\nassert solution(stdin) == \"0.00000000000000000000\"\nassert solution(stdin) == \"0.00000000000000000000\"\nassert solution(stdin) == \"0.00000000000000000000\"\n"
    },
    {
        "number": 1356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == 6\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 6\n\nassert solution(stdin) == 3"
    },
    {
        "number": 1357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 m \u2264 10^5\n\n-----Time Limit: 1 minute\n\n-----Space Limit: 1 GB\n\n-----Alternatives\n\n1. Use a stack to store the sequence of Xenia's moves along the ringroad.\n2. Use a queue to store the sequence of Xenia's moves along the ringroad.\n3. Use a stack to store the sequence of Xenia's moves along the ringroad.\n4. Use a queue to store the sequence of Xenia's moves along the ringroad.\n5. Use a stack to store the sequence of Xenia's moves along the ringroad.\n6. Use a queue to store the sequence of Xenia's moves along the ringroad.\n\n-----Bug Fixes\n\n1. Use a stack to store the sequence of Xenia's moves along the ringroad.\n2. Use a queue to store the sequence of Xenia's moves along the ringroad.\n3. Use a stack to store the sequence of Xenia's moves along the ringroad.\n4. Use a queue to store the sequence of Xenia's moves along the ringroad.\n5. Use a stack to store the sequence of Xenia's moves along the ringroad.\n6. Use a queue to store the sequence of Xenia's moves along the ringroad.\n\n\"\"\""
    },
    {
        "number": 1358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n-----Constraints-----\n1 <= k <= 100000\n1 <= n <= 100000\n1 <= stdin.length <= 100000\nstdin.length <= k\nstdin.length <= n\nstdin contains only lowercase English letters.\n\n\"\"\""
    },
    {
        "number": 1359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 1360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"21\"\n"
    },
    {
        "number": 1363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u044f"
    },
    {
        "number": 1364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 1366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nInput\n10\n3 8 10 1 7 9 6 5 2\n\nOutput\n4\n"
    },
    {
        "number": 1368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4.5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"0.500000000000000000\"\n"
    },
    {
        "number": 1370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n\"\"\""
    },
    {
        "number": 1372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 1373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\nassert solution(input()) == \"10\"\n"
    },
    {
        "number": 1374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"30\"\n"
    },
    {
        "number": 1375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 2 1\"\n\n[Constraints]\n1 <= n <= 50000\n\n[Input]\n\nThe first line of input contains an integer, n.\n\nThe second line contains n distinct integers, B_2k (0 \u2264 B_2k \u2264 n - 1,  k = 0... n - 1).\n\n[Output]\n\nOutput contains n distinct integers separated by a single space representing points B_1, B_3,..., B_2n - 1 Bill should choose in order to maximize the property area. If there are multiple solutions that maximize the area, return any of them.\n\n[Constraints]\n1 <= n <= 50000\n\n[Time Limit]\n1 second\n\n[Space Limit]\n5,000,000\n\n[Notes]\n\n\"\"\""
    },
    {
        "number": 1379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 1 1 2\"\nassert solution(stdin) == \"3 1 1 2 3\"\nassert solution(stdin) == \"3 1 1 2 3 4\"\nassert solution(stdin) == \"3 1 1 2 3 4 5\"\n"
    },
    {
        "number": 1380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 1382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"3 1\"\n"
    },
    {
        "number": 1383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"RUn.exe O\") == \"O\"\nassert solution(\"RUn.exe O\") == \"O\"\nassert solution(\"RUn.exe O\") == \"O\"\nassert solution(\"RUn.exe O\") == \"O\"\nassert solution(\"RUn.exe O\") == \"O\"\n"
    },
    {
        "number": 1386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"64\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"24000\"\nassert solution(stdin) == \"24000\"\nassert solution(stdin) == \"24000\"\nassert solution(stdin) == \"24000\"\n"
    },
    {
        "number": 1389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\nSample 2. The class has 4 students. The shop sells 6 puzzles. If Ms. Manana buys the first four puzzles consisting of 10, 12, 10 and 7 pieces correspondingly, then the difference between the sizes of the largest and the smallest puzzle will be equal to 5. It is impossible to obtain a smaller difference. Note that the teacher can also buy puzzles 1, 3, 4 and 5 to obtain the difference 5.\n"
    },
    {
        "number": 1391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 1393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 4\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 1394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"aaaaa\") == \"aaaaa\"\nassert solution(\"ababacacbbcc\") == \"ababacacbbcc\"\nassert solution(\"baba\") == \":(\"\nassert solution(\"\") == \":(\"\nassert solution(\"aacaababc\") == \"aacaabac\"\n"
    },
    {
        "number": 1395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '123'\nassert solution(stdin) == '123'\nassert solution(stdin) == '123'\nassert solution(stdin) == '123'\nassert solution(stdin) == '123'\n"
    },
    {
        "number": 1396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 1397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 1398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 42\nassert solution(stdin) == 7\nassert solution(stdin) == 42\nassert solution(stdin) == 7\nassert solution(stdin) == 42\n"
    },
    {
        "number": 1400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '125000003'\nassert solution(stdin) == '140000007'\nassert solution(stdin) == '125000003'\nassert solution(stdin) == '140000007'\nassert solution(stdin) == '125000003'\n"
    },
    {
        "number": 1401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_1, a_2,..., a_{n} <= 10^9\na_{i} is written on vertex i.\n\n1 <= c_{i} <= 10^9\n\n------Time complexity-------\n\nO(n)\n\nO(n)\n\n------Space complexity-------\n\nO(n)\n\n------Algorithm-------\n\n1. Create a graph.\n2. Create a graph from the input.\n3. Create a graph from the input.\n4. Create a graph from the input.\n5. Create a graph from the input.\n6. Create a graph from the input.\n7. Create a graph from the input.\n8. Create a graph from the input.\n9. Create a graph from the input.\n10. Create a graph from the input.\n11. Create a graph from the input.\n12. Create a graph from the input.\n13. Create a graph from the input.\n14. Create a graph from the input.\n15. Create a graph from the input.\n16. Create a graph from the input.\n17. Create a graph from the input.\n18. Create a graph from the input.\n19. Create a graph from the input.\n20. Create a graph from the input.\n21. Create a graph from the input.\n22. Create a graph from the input.\n23. Create a graph from the input.\n24. Create a graph from the input.\n25. Create a graph from the input.\n26. Create a graph from the input.\n27. Create a graph from the input.\n28. Create a graph from the input.\n29. Create a graph from the input.\n30. Create a graph from the input.\n31. Create a graph from the input.\n32. Create a graph from the input.\n33. Create a graph from the input.\n34. Create a graph from the input.\n35. Create a graph from the input.\n36. Create a graph from the input.\n37. Create a graph from the input.\n38. Create a graph from the input.\n39. Create a graph from the input.\n40. Create a graph from the input.\n41. Create a graph from the input.\n42. Create a graph from the input.\n43. Create a graph from the input.\n44. Create a graph from the input.\n45. Create a graph from the input.\n46. Create a graph from the input.\n47. Create a graph from the input.\n48. Create a graph from the input.\n49. Create a graph from the input.\n50. Create a graph from the input.\n51. Create a graph from the input.\n52. Create a graph from the input.\n53. Create a graph from the input.\n54. Create a graph from the input.\n55. Create a graph from the input.\n56. Create a graph from the input.\n57. Create a graph from the input.\n58. Create a graph from the input.\n59. Create a graph from the input.\n60. Create a graph from the input.\n61. Create a graph from the input.\n62. Create a graph from the input.\n63. Create a graph from the input.\n64. Create a graph from the input.\n65. Create a graph from the input.\n66. Create a graph from the input.\n67. Create a graph from the input.\n68. Create a graph from the input.\n69. Create a graph from the input.\n70. Create a graph from the input.\n71. Create a graph from the input.\n72. Create a graph from the input.\n73. Create a graph from the input.\n74. Create a graph from the input.\n75. Create a graph from the input.\n76. Create a graph from the input.\n77. Create a graph from the input.\n78. Create a graph from the input.\n79. Create a graph from the input.\n80. Create a graph from the input.\n81. Create a graph from the input.\n82. Create a graph from the input.\n83. Create a graph from the input.\n84. Create a graph from the input.\n85. Create a graph from the input.\n86. Create a graph from the input.\n87. Create a graph from the input.\n88. Create a graph from the input.\n89. Create a graph from the input.\n90. Create a graph from the input.\n91. Create a graph from the input.\n92. Create a graph from the input.\n93. Create a graph from the input.\n94. Create a graph from the input.\n95. Create a graph from the input.\n96. Create a graph from the input.\n97. Create a graph from the input.\n98. Create a graph from the input.\n99. Create a graph from the input.\n100. Create a graph from the input.\n101. Create a graph from the input.\n102. Create a graph from the input.\n103. Create a graph from the input.\n104. Create a graph from the input.\n105. Create a graph from the input.\n106. Create a graph from the input.\n107. Create a graph from the input.\n108. Create a graph from the input.\n109. Create a graph from the input.\n110. Create a graph from the input.\n111. Create a graph from the input.\n112. Create a graph from the input.\n113. Create a graph from the input.\n114. Create a graph from the input.\n115. Create a graph from the input.\n116. Create a graph from the input.\n117. Create a graph from the input.\n118. Create a graph from the input.\n119. Create a graph from the input.\n120. Create a graph from the input.\n121. Create a graph from the input.\n122. Create a graph from the input.\n123. Create a graph from the input.\n124. Create a graph from the input.\n125. Create a graph from the input.\n126. Create a graph from the input.\n127. Create a graph from the input.\n128. Create a graph from the input.\n129. Create a graph from the input.\n130. Create a graph from the input.\n131. Create a graph from the input.\n132. Create a graph from the input.\n133. Create a graph from the input.\n134. Create a graph from the input.\n135. Create a graph from the input.\n136. Create a graph from the input.\n137. Create a graph from the input.\n138. Create a graph from the input.\n139. Create a graph from the input.\n140. Create a graph from the input.\n141. Create a graph from"
    },
    {
        "number": 1402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\""
    },
    {
        "number": 1404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 200\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n\n0 < $a_{i}$ < $200$\n\n0 < $a_{i}$ < $200$\n\n0 < $a_{i}$ < $200$\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1MB\n\n-----Alternatives-----\n\n1. Use a stack to store the numbers of possible ways to restore the array.\n2. Use a queue to store the numbers of possible ways to restore the array.\n3. Use a hashmap to store the number of ways to restore the array.\n4. Use a binary search to find the number of ways to restore the array.\n5. Use a dynamic programming to find the number of ways to restore the array.\n\n\"\"\""
    },
    {
        "number": 1405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"1 3 2 1 3\"\nassert solution(stdin) == \"1 3 2 1 3\"\nassert solution(stdin) == \"1 3 2 1 3\"\n"
    },
    {
        "number": 1411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 84\n"
    },
    {
        "number": 1412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"31\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"21\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 1413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Poor Dima!\"\n\nassert solution(stdin) == \"Poor Inna!\"\n\nassert solution(stdin) == \"Poor Dima!\"\n\nassert solution(stdin) == \"Poor Inna!\"\n\nassert solution(stdin) == \"Poor Dima!\""
    },
    {
        "number": 1415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 0 1 1 1 1 0 6\"\n\nassert solution(stdin) == \"1 1 1 1 1 1 0 6\"\n\nassert solution(stdin) == \"1 1 1 1 1 1 0 6\"\n\nassert solution(stdin) == \"1 1 1 1 1 1 0 6\"\n\nassert solution(stdin) == \"1 1 1 1 1 1 0 6\""
    },
    {
        "number": 1416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"4.5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869\n\nInput\n10\n\nOutput\n19210869"
    },
    {
        "number": 1418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 1\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1 2 1\"\n"
    },
    {
        "number": 1419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2.5000000000\"\n\nassert solution(stdin) == \"2.0000000000\"\n\nassert solution(stdin) == \"2.0000000000\"\n\nassert solution(stdin) == \"2.0000000000\"\n\nassert solution(stdin) == \"2.0000000000\""
    },
    {
        "number": 1421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 25\n"
    },
    {
        "number": 1422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 1 5 4 2\"\nassert solution(stdin) == \"2 2 2 9\"\nassert solution(stdin) == \"2 2 2 9\"\nassert solution(stdin) == \"2 2 2 9\"\nassert solution(stdin) == \"2 2 2 9\"\n"
    },
    {
        "number": 1424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 1427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"13\"\n\n\"\"\""
    },
    {
        "number": 1428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 1429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 2\n"
    },
    {
        "number": 1430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 1431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 1432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4 0 4\"\nassert solution(input()) == \"4 0 4\"\nassert solution(input()) == \"4 0 4\"\nassert solution(input()) == \"4 0 4\"\nassert solution(input()) == \"4 0 4\"\n"
    },
    {
        "number": 1433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\""
    },
    {
        "number": 1434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '9'\nassert solution(stdin) == '130653412'\nassert solution(stdin) == '3'\nassert solution(stdin) == '9'\n"
    },
    {
        "number": 1438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 1439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 120\n"
    },
    {
        "number": 1442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"S 50 8\"\nassert solution(stdin) == \"S 50 8\"\nassert solution(stdin) == \"S 50 8\"\nassert solution(stdin) == \"S 50 8\"\nassert solution(stdin) == \"S 50 8\"\n"
    },
    {
        "number": 1443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"30\"\nassert solution(stdin) == \"40\"\nassert solution(stdin) == \"80\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"40\"\n"
    },
    {
        "number": 1444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3\"\n\nInput\n3\n1 100 101\n2\n\nOutput\n2 3 \n\nExplanation\nThe stations are numbered 1 through n. The stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the smallest distance.\n\nThe stations are ordered by their distance from the station with the"
    },
    {
        "number": 1445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3 9 6 7 1 4\"\nassert solution(stdin) == \"2 1 6 2 5 4 9 6\"\nassert solution(stdin) == \"2 1 6 2 5 4 9 6\"\nassert solution(stdin) == \"2 1 6 2 5 4 9 6\"\nassert solution(stdin) == \"2 1 6 2 5 4 9 6\"\n"
    },
    {
        "number": 1446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 1447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.0000000000000000'\nassert solution(stdin) == '0.6666666666666666'\nassert solution(stdin) == '0.4000000000000000'\nassert solution(stdin) == '0.6666666666666666'\nassert solution(stdin) == '0.4000000000000000'\n"
    },
    {
        "number": 1448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1449,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"010210\"\nassert solution(stdin) == \"001210\"\nassert solution(stdin) == \"010120\"\nassert solution(stdin) == \"010201\"\nassert solution(stdin) == \"010210\"\n"
    },
    {
        "number": 1451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '797922655'\n\n\"\"\""
    },
    {
        "number": 1453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"30\"\n\n-----Constraints-----\n1 <= k <= 200\n1 <= n <= 200\n1 <= a_i <= 200\n\nTime Limit: 1 sec\n\nSample Input\n\n3\n1 2 3 4 5 6 7 8\n\nSample Output\n\n2 5 11 18 30 43 62 83 121\n\nExplanation\n\nDay $1$: sweets $1$ and $4$  Day $2$: sweets $5$ and $3$  Day $3$ : sweet $6$ \n\nTotal penalty is $1 \\cdot a_1 + 1 \\cdot a_4 + 2 \\cdot a_5 + 2 \\cdot a_3 + 3 \\cdot a_6 = 6 + 4 + 8 + 6 + 6 = 30$. We can prove that it's the minimum total sugar penalty Yui can achieve if she eats $5$ sweets, hence $x_5 = 30$.\n\n\"\"\""
    },
    {
        "number": 1454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '144'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5'\nassert solution(stdin) == '15'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10 1\"\nassert solution(stdin) == \"8 1\"\nassert solution(stdin) == \"7 1\"\nassert solution(stdin) == \"10 2\"\nassert solution(stdin) == \"8 2\"\n"
    },
    {
        "number": 1462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"82\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"82\"\nassert solution(stdin) == \"82\"\nassert solution(stdin) == \"82\"\n"
    },
    {
        "number": 1463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 1464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"j\"\nassert solution(stdin) == \"ab\"\nassert solution(stdin) == \"j\"\nassert solution(stdin) == \"ab\"\nassert solution(stdin) == \"j\"\n"
    },
    {
        "number": 1465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1466,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 1467,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"b\"\nassert solution(stdin) == \"b\"\nassert solution(stdin) == \"b\"\nassert solution(stdin) == \"b\"\nassert solution(stdin) == \"b\"\n"
    },
    {
        "number": 1469,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"8 10\"\nassert solution(input()) == \"8 10\"\nassert solution(input()) == \"8 10\"\nassert solution(input()) == \"8 10\"\nassert solution(input()) == \"8 10\"\n"
    },
    {
        "number": 1470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0 1 0\"\n"
    },
    {
        "number": 1472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 1473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"92 7 31 141\"\n\n\"\"\""
    },
    {
        "number": 1474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^9\n1 \u2264 h_i \u2264 10^9\n\n-----Time Limit: 1 min\n\n-----Space Limit: 1MB\n\n-----Alternatives\n\n1. Use a stack to store the height of each board.\n2. Use a queue to store the height of each board.\n3. Use a stack to store the height of each board.\n4. Use a queue to store the height of each board.\n5. Use a stack to store the height of each board.\n6. Use a queue to store the height of each board.\n7. Use a stack to store the height of each board.\n8. Use a queue to store the height of each board.\n9. Use a stack to store the height of each board.\n10. Use a queue to store the height of each board.\n11. Use a stack to store the height of each board.\n12. Use a queue to store the height of each board.\n13. Use a stack to store the height of each board.\n14. Use a queue to store the height of each board.\n15. Use a stack to store the height of each board.\n16. Use a queue to store the height of each board.\n17. Use a stack to store the height of each board.\n18. Use a queue to store the height of each board.\n19. Use a stack to store the height of each board.\n20. Use a queue to store the height of each board.\n21. Use a stack to store the height of each board.\n22. Use a queue to store the height of each board.\n23. Use a stack to store the height of each board.\n24. Use a queue to store the height of each board.\n25. Use a stack to store the height of each board.\n26. Use a queue to store the height of each board.\n27. Use a stack to store the height of each board.\n28. Use a queue to store the height of each board.\n29. Use a stack to store the height of each board.\n30. Use a queue to store the height of each board.\n31. Use a stack to store the height of each board.\n32. Use a queue to store the height of each board.\n33. Use a stack to store the height of each board.\n34. Use a queue to store the height of each board.\n35. Use a stack to store the height of each board.\n36. Use a queue to store the height of each board.\n37. Use a stack to store the height of each board.\n38. Use a queue to store the height of each board.\n39. Use a stack to store the height of each board.\n40. Use a queue to store the height of each board.\n41. Use a stack to store the height of each board.\n42. Use a queue to store the height of each board.\n43. Use a stack to store the height of each board.\n44. Use a queue to store the height of each board.\n45. Use a stack to store the height of each board.\n46. Use a queue to store the height of each board.\n47. Use a stack to store the height of each board.\n48. Use a queue to store the height of each board.\n49. Use a stack to store the height of each board.\n50. Use a queue to store the height of each board.\n51. Use a stack to store the height of each board.\n52. Use a queue to store the height of each board.\n53. Use a stack to store the height of each board.\n54. Use a queue to store the height of each board.\n55. Use a stack to store the height of each board.\n56. Use a queue to store the height of each board.\n57. Use a stack to store the height of each board.\n58. Use a queue to store the height of each board.\n59. Use a stack to store the height of each board.\n60. Use a queue to store the height of each board.\n61. Use a stack to store the height of each board.\n62. Use a queue to store the height of each board.\n63. Use a stack to store the height of each board.\n64. Use a queue to store the height of each board.\n65. Use a stack to store the height of each board.\n66. Use a queue to store the height of each board.\n67. Use a stack to store the height of each board.\n68. Use a queue to store the height of each board.\n69. Use a stack to store the height of each board.\n70. Use a queue to store the height of each board.\n71. Use a stack to store the height of each board.\n72. Use a queue to store the height of each board.\n73. Use a stack to store the height of each board.\n74. Use a queue to store the height of each board.\n75. Use a stack to store the height of each board.\n76. Use a stack to store the height of each board.\n77. Use a stack to store the height of each board.\n78. Use a stack to store the height of each board.\n79. Use a stack to store the height of each board.\n80. Use a stack to store the height of each board.\n81. Use a stack to store the height of each board.\n82. Use a stack to store the height of each board.\n83. Use a stack to store the height of each board.\n84. Use a stack to store the height of each board.\n85. Use a stack to store the height of each board.\n86. Use a stack to store the height of each board.\n87. Use a stack to store the height of each board.\n88. Use a stack to store the height of each board.\n89. Use a stack to store the height of each board.\n90. Use a stack to store the height of each board.\n91. Use a stack to store the height of each board.\n92. Use a stack to store the height of each board.\n93. Use a stack to store the height of each board.\n94. Use a stack to store the height of each board.\n95. Use a stack to store the height of each board.\n96. Use a stack to store the height of each board.\n97. Use a stack to store the height of each board.\n98. Use a stack to store the height of each board.\n99. Use a stack to store the height of each board.\n100. Use a stack to store the height of each board.\n101. Use a stack to store the height of each board.\n102. Use a stack to store the height of each board.\n103. Use a stack to store the height of each board.\n104. Use a stack to store the height of each board.\n105. Use a stack to store the height of each board.\n106. Use a stack to store the height of each board.\n107. Use a stack to store the height"
    },
    {
        "number": 1475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\nassert solution(stdin) == \"0 0 0\"\n"
    },
    {
        "number": 1480,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 2 5 6 1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 2\"\n"
    },
    {
        "number": 1481,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1482,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"3 2 1\"\n"
    },
    {
        "number": 1483,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 1484,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 735945883\n"
    },
    {
        "number": 1485,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\nassert solution(stdin) == 14\nassert solution(stdin) == 36\n"
    },
    {
        "number": 1486,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 12\"\nassert solution(stdin) == \"3 9\"\nassert solution(stdin) == \"4 7\"\nassert solution(stdin) == \"5 12\"\n"
    },
    {
        "number": 1487,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"0011\"\nassert solution(stdin) == \"0111\"\nassert solution(stdin) == \"1000\"\nassert solution(stdin) == \"1001\"\n"
    },
    {
        "number": 1488,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '22'\nassert solution(stdin) == '22'\nassert solution(stdin) == '22'\nassert solution(stdin) == '22'\nassert solution(stdin) == '22'\n"
    },
    {
        "number": 1489,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 1490,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 5\"\nassert solution(stdin) == \"2 5 6 12 8\"\nassert solution(stdin) == \"2 5 6 12 8\"\nassert solution(stdin) == \"2 5 6 12 8\"\n"
    },
    {
        "number": 1491,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1492,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1493,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"B\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"B\"\nassert solution(stdin) == \"B\"\n"
    },
    {
        "number": 1494,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2 1 1 0 0\"\nassert solution(stdin) == \"0 1 1 2 1 1 0 0\"\nassert solution(stdin) == \"0 1 1 2 1 1 0 0\"\nassert solution(stdin) == \"0 1 1 2 1 1 0 0\"\nassert solution(stdin) == \"0 1 1 2 1 1 0 0\"\n"
    },
    {
        "number": 1495,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"20\"\n\nassert solution(stdin) == \"50\""
    },
    {
        "number": 1496,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 1497,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= stdin.length <= 100\n\nstdin contains only the binary strings '1' and '0'.\n\n\"\"\""
    },
    {
        "number": 1498,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1499,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 1 6 2 7 3 4\"\nassert solution(stdin) == \"19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18\"\nassert solution(stdin) == \"5 1 6 2 7 3 4\"\nassert solution(stdin) == \"19 1 20 2 21 3 22 4 23 5 24 6 25 7 26 8 27 9 28 10 29 11 30 12 31 13 32 14 33 15 34 16 35 17 36 18\"\n"
    },
    {
        "number": 1500,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u0435"
    },
    {
        "number": 1501,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= m <= n - |p| + 1\n\n------Time Limit Exceeded------\n\nTime Limit: 1 second\n\n------Memory Limit Exceeded------\n\nTime Limit: 1 GB\n\n------Divide and Conquer------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit: 1 second\n\n------Bit Manipulation------\n\nTime Limit"
    },
    {
        "number": 1502,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 13\nassert solution(4) == 13\nassert solution(5) == 13\nassert solution(6) == 13\nassert solution(7) == 13\n"
    },
    {
        "number": 1503,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1504,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"2000000000\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1505,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8.000000000000 11.000000000000\"\nassert solution(stdin) == \"4.000000000000 8.000000000000\"\nassert solution(stdin) == \"6.000000000000 8.000000000000\"\nassert solution(stdin) == \"6.000000000000 3.000000000000\"\nassert solution(stdin) == \"10.000000000000 3.000000000000\"\n"
    },
    {
        "number": 1506,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 1507,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 1508,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100 -50 0 50 -100\"\nassert solution(stdin) == \"100 -50 0 50 -50\"\nassert solution(stdin) == \"100 -50 0 50 -50\"\nassert solution(stdin) == \"100 -50 0 50 -50\"\nassert solution(stdin) == \"100 -50 0 50 -50\"\n"
    },
    {
        "number": 1509,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"104\"\n"
    },
    {
        "number": 1510,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1511,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1512,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(5) == 5\nassert solution(5) == 5\nassert solution(5) == 5\nassert solution(5) == 5\n"
    },
    {
        "number": 1513,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 17\n\nassert solution(stdin) == 6\n\nassert solution(stdin) == 17\n\nassert solution(stdin) == 6\n\nassert solution(stdin) == 17"
    },
    {
        "number": 1514,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4 5 2 1 4 3 2\"\nassert solution(stdin) == \"3 4 5 2 1 4 3 2\"\nassert solution(stdin) == \"3 4 5 2 1 4 3 2\"\nassert solution(stdin) == \"3 4 5 2 1 4 3 2\"\nassert solution(stdin) == \"3 4 5 2 1 4 3 2\"\n"
    },
    {
        "number": 1515,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n\nSample 3:\n\nInput\n6 5\n\nOutput\n142857\nInput\n1 2\n\nOutput\n102564\n\n\"\"\""
    },
    {
        "number": 1516,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 265359409\n"
    },
    {
        "number": 1517,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 18\nassert solution(5) == 1800\nassert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 3\n"
    },
    {
        "number": 1518,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1519,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1520,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abaaaba\"\nassert solution(stdin) == \"abanana\"\nassert solution(stdin) == \"ab\"\nassert solution(stdin) == \"a\"\nassert solution(stdin) == \"a\"\n"
    },
    {
        "number": 1521,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 1522,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 1523,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n\n-----Constraints-----\n0 < n, k < 10^5\n\n0 < a_i < k\n\n0 < b_i < 10^9\n\n-----Time Limit-----\n1 minute\n\n-----Memory Limit-----\n256 MB\n\n-----Solutions-----\n\nInput:\n3 3\n5 3 4\n5 7 4 8\n\nOutput:\n10\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput:\n3 3\n3 1 2\n5 3 4\n\nOutput:\n0\n\nInput"
    },
    {
        "number": 1524,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"RRLRL\") == 0\nassert solution(\"RLRLRL\") == 0\nassert solution(\"RLRLRL\") == 0\nassert solution(\"RLRLRL\") == 0\nassert solution(\"RLRLRL\") == 0\n"
    },
    {
        "number": 1525,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n\"\"\""
    },
    {
        "number": 1526,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 1527,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\n\"\"\""
    },
    {
        "number": 1528,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\n\"\"\""
    },
    {
        "number": 1529,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Freda's\"\nassert solution(stdin) == \"OMG>.< I don't know!\"\nassert solution(stdin) == \"OMG>.< I don't know!\"\nassert solution(stdin) == \"Rainbow's\"\nassert solution(stdin) == \"OMG>.< I don't know!\"\n"
    },
    {
        "number": 1530,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4 2 3 1 6'\nassert solution(stdin) == '4 2 3 1 6'\nassert solution(stdin) == '4 2 3 1 6'\nassert solution(stdin) == '4 2 3 1 6'\nassert solution(stdin) == '4 2 3 1 6'\n"
    },
    {
        "number": 1531,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8 1\"\nassert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1532,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n\n0 < stdin[i] < 10^5\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1MB\n\n-----Tags-----\n"
    },
    {
        "number": 1533,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= n <= 100\n\n1 <= s_i.length <= 100\ns_i consist of lowercase English letters.\n\n1 <= s_i[i] <= s_i[i]\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSubmissions (easy)\n\nInput\n6\ntom\nlucius\nginny\nharry\nginny\nharry\n\nOutput\nNO\nNO\nNO\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput\nNO\nYES\nYES\n\nInput\n3\na\na\na\n\nOutput"
    },
    {
        "number": 1534,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1"
    },
    {
        "number": 1535,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n0 \u2264 n \u2264 1000,\n-10^4 \u2264 x_0, y_0 \u2264 10^4\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 MiB\n\n-----Alternatives\n\n1. Use a stack to store the coordinates of the stormtroopers.\n2. Use a queue to store the coordinates of the stormtroopers.\n3. Use a stack to store the coordinates of the stormtroopers.\n4. Use a queue to store the coordinates of the stormtroopers.\n5. Use a stack to store the coordinates of the stormtroopers.\n6. Use a queue to store the coordinates of the stormtroopers.\n7. Use a stack to store the coordinates of the stormtroopers.\n8. Use a queue to store the coordinates of the stormtroopers.\n9. Use a stack to store the coordinates of the stormtroopers.\n10. Use a queue to store the coordinates of the stormtroopers.\n11. Use a stack to store the coordinates of the stormtroopers.\n12. Use a queue to store the coordinates of the stormtroopers.\n13. Use a stack to store the coordinates of the stormtroopers.\n14. Use a queue to store the coordinates of the stormtroopers.\n15. Use a stack to store the coordinates of the stormtroopers.\n16. Use a queue to store the coordinates of the stormtroopers.\n17. Use a stack to store the coordinates of the stormtroopers.\n18. Use a queue to store the coordinates of the stormtroopers.\n19. Use a stack to store the coordinates of the stormtroopers.\n20. Use a queue to store the coordinates of the stormtroopers.\n21. Use a stack to store the coordinates of the stormtroopers.\n22. Use a queue to store the coordinates of the stormtroopers.\n23. Use a stack to store the coordinates of the stormtroopers.\n24. Use a queue to store the coordinates of the stormtroopers.\n25. Use a stack to store the coordinates of the stormtroopers.\n26. Use a queue to store the coordinates of the stormtroopers.\n27. Use a stack to store the coordinates of the stormtroopers.\n28. Use a queue to store the coordinates of the stormtroopers.\n29. Use a stack to store the coordinates of the stormtroopers.\n30. Use a queue to store the coordinates of the stormtroopers.\n31. Use a stack to store the coordinates of the stormtroopers.\n32. Use a queue to store the coordinates of the stormtroopers.\n33. Use a stack to store the coordinates of the stormtroopers.\n34. Use a queue to store the coordinates of the stormtroopers.\n35. Use a stack to store the coordinates of the stormtroopers.\n36. Use a queue to store the coordinates of the stormtroopers.\n37. Use a stack to store the coordinates of the stormtroopers.\n38. Use a queue to store the coordinates of the stormtroopers.\n39. Use a stack to store the coordinates of the stormtroopers.\n40. Use a queue to store the coordinates of the stormtroopers.\n41. Use a stack to store the coordinates of the stormtroopers.\n42. Use a queue to store the coordinates of the stormtroopers.\n43. Use a stack to store the coordinates of the stormtroopers.\n44. Use a queue to store the coordinates of the stormtroopers.\n45. Use a stack to store the coordinates of the stormtroopers.\n46. Use a queue to store the coordinates of the stormtroopers.\n47. Use a stack to store the coordinates of the stormtroopers.\n48. Use a queue to store the coordinates of the stormtroopers.\n49. Use a stack to store the coordinates of the stormtroopers.\n50. Use a queue to store the coordinates of the stormtroopers.\n51. Use a stack to store the coordinates of the stormtroopers.\n52. Use a queue to store the coordinates of the stormtroopers.\n53. Use a stack to store the coordinates of the stormtroopers.\n54. Use a queue to store the coordinates of the stormtroopers.\n55. Use a stack to store the coordinates of the stormtroopers.\n56. Use a queue to store the coordinates of the stormtroopers.\n57. Use a stack to store the coordinates of the stormtroopers.\n58. Use a queue to store the coordinates of the stormtroopers.\n59. Use a stack to store the coordinates of the stormtroopers.\n60. Use a queue to store the coordinates of the stormtroopers.\n61. Use a stack to store the coordinates of the stormtroopers.\n62. Use a queue to store the coordinates of the stormtroopers.\n63. Use a stack to store the coordinates of the stormtroopers.\n64. Use a queue to store the coordinates of the stormtroopers.\n65. Use a stack to store the coordinates of the stormtroopers.\n66. Use a queue to store the coordinates of the stormtroopers.\n67. Use a stack to store the coordinates of the stormtroopers.\n68. Use a queue to store the coordinates of the stormtroopers.\n69. Use a stack to store the coordinates of the stormtroopers.\n70. Use a queue to store the coordinates of the stormtroopers.\n71. Use a stack to store the coordinates of the stormtroopers.\n72. Use a queue to store the coordinates of the stormtroopers.\n73. Use a stack to store the coordinates of the stormtroopers.\n74. Use a queue to store the coordinates of the stormtroopers.\n75. Use a stack to store the coordinates of the stormtroopers.\n76. Use a queue to store the coordinates of the stormtroopers.\n77. Use a stack to store the coordinates of the stormtroopers.\n78. Use a queue to store the coordinates of the stormtroopers.\n79. Use a stack to store the coordinates of the stormtroopers.\n80. Use a queue to store the coordinates of the stormtroopers.\n81. Use a stack to store the coordinates of the stormtroopers.\n82. Use a queue to store the coordinates of the stormtroopers.\n83. Use a stack to store the coordinates of the stormtroopers.\n84. Use a queue to store the coordinates of the stormtroopers.\n85. Use a stack to store the coordinates of the stormtroopers.\n86. Use a queue to store the coordinates of the stormtroopers.\n87. Use a stack to store the coordinates of the stormtroopers.\n88. Use a queue to store the coordinates of the stormtroopers.\n89. Use a stack to store the coordinates of the stormtroopers.\n90. Use a queue to store the coordinates of the stormtroopers.\n91. Use a stack to store the coordinates of the stormtroopers.\n92. Use a queue to store the coordinates of the stormtroopers.\n93. Use a stack to store the coordinates of the stormtroopers.\n94. Use a queue to store the coordinates of the stormtroopers.\n95. Use a stack to store the coordinates of the stormtroopers.\n96. Use a queue to store the coordinates of the stormtroopers.\n97. Use"
    },
    {
        "number": 1536,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"1 6\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1537,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 1538,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1539,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 1540,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 3 1\"\nassert solution(stdin) == \"3 3 1\"\nassert solution(stdin) == \"3 3 1\"\nassert solution(stdin) == \"3 3 1\"\nassert solution(stdin) == \"3 3 1\"\n"
    },
    {
        "number": 1541,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"left\"\nassert solution(stdin) == \"right\"\nassert solution(stdin) == \"balance\"\nassert solution(stdin) == \"balance\"\nassert solution(stdin) == \"balance\"\n"
    },
    {
        "number": 1542,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 5\nassert solution(stdin) == 4\nassert solution(stdin) == 1\n"
    },
    {
        "number": 1543,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 1544,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 24\nassert solution(3) == 24\nassert solution(4) == 24\nassert solution(5) == 24\nassert solution(6) == 24\n"
    },
    {
        "number": 1545,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1546,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 1547,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 3\"\nassert solution(stdin) == \"2 2 1\"\nassert solution(stdin) == \"1 2 2\"\nassert solution(stdin) == \"1 1 1\"\nassert solution(stdin) == \"1 0 1\"\n"
    },
    {
        "number": 1548,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"26\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"26\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"26\"\n"
    },
    {
        "number": 1549,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1550,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"024\"\nassert solution(stdin) == \"0142\"\nassert solution(stdin) == \"0142\"\nassert solution(stdin) == \"0142\"\nassert solution(stdin) == \"0142\"\n"
    },
    {
        "number": 1551,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"500000.000000000000000000000000000000\"\nassert solution(stdin) == \"400.000000000000000000000000000000\"\nassert solution(stdin) == \"400.000000000000000000000000000000\"\nassert solution(stdin) == \"400.000000000000000000000000000000\"\nassert solution(stdin) == \"400.000000000000000000000000000000\"\n"
    },
    {
        "number": 1552,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1553,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 1554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 1555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\""
    },
    {
        "number": 1556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 4 3 5 -1\"\nassert solution(stdin) == \"5 4 3 5 5\"\nassert solution(stdin) == \"5 4 0 5 5\"\nassert solution(stdin) == \"5 1 4 5 5\"\nassert solution(stdin) == \"5 1 0 5 5\"\n"
    },
    {
        "number": 1557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100100\"\nassert solution(stdin) == \"124124\"\nassert solution(stdin) == \"100100\"\nassert solution(stdin) == \"124124\"\nassert solution(stdin) == \"100100\"\n"
    },
    {
        "number": 1560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 1561,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"15\"\n"
    },
    {
        "number": 1563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == -1\nassert solution(stdin) == -1\n"
    },
    {
        "number": 1565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1801\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"1801\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"1801\"\n"
    },
    {
        "number": 1566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-----Constraints-----\n\n1 <= N <= 50\n0 <= x_1, y_1 < N\n0 <= x_2, y_2 < N\n\n------Time Limit Exceeded------\nTime limit exceeded\n\n------Memory Limit Exceeded------\nMemory limit exceeded\n\n------Divide and Conquer------\nTime limit exceeded\n\n------Constraints Violation------\nThe input contains only digits.\n\n------Input Format Error-------\nThe first line contains an integer N, the size of the lattice grid (5 \u2264 N \u2264 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.\n\nCells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N),..., (N, N) and the last row corresponds to cells with coordinates (1, 1),..., (N, 1).\n\n-----Output-----\nPrint Yes if there exists a single non-zero area rectangular lair with corners on the grid for which checking the levels of Zombie Contamination gives the results given in the input, and No otherwise.\n\n-----Constraints-----\n\n1 <= N <= 50\n0 <= x_1, y_1 < N\n0 <= x_2, y_2 < N\n\n------Time Limit Exceeded------\nTime limit exceeded\n\n------Memory Limit Exceeded------\nMemory limit exceeded\n\n------Divide and Conquer------\nTime limit exceeded\n\n------Constraints Violation------\nThe input contains only digits.\n\n------Input Format Error-------\nThe first line contains an integer N, the size of the lattice grid (5 \u2264 N \u2264 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.\n\nCells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N),..., (N, N) and the last row corresponds to cells with coordinates (1, 1),..., (N, 1).\n\n-----Output-----\nPrint Yes if there exists a single non-zero area rectangular lair with corners on the grid for which checking the levels of Zombie Contamination gives the results given in the input, and No otherwise.\n\n-----Constraints-----\n\n1 <= N <= 50\n0 <= x_1, y_1 < N\n0 <= x_2, y_2 < N\n\n------Time Limit Exceeded------\nTime limit exceeded\n\n------Memory Limit Exceeded------\nMemory limit exceeded\n\n------Divide and Conquer------\nTime limit exceeded\n\n------Constraints Violation------\nThe input contains only digits.\n\n------Input Format Error-------\nThe first line contains an integer N, the size of the lattice grid (5 \u2264 N \u2264 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.\n\nCells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N),..., (N, N) and the last row corresponds to cells with coordinates (1, 1),..., (N, 1).\n\n-----Output-----\nPrint Yes if there exists a single non-zero area rectangular lair with corners on the grid for which checking the levels of Zombie Contamination gives the results given in the input, and No otherwise.\n\n-----Constraints-----\n\n1 <= N <= 50\n0 <= x_1, y_1 < N\n0 <= x_2, y_2 < N\n\n------Time Limit Exceeded------\nTime limit exceeded\n\n------Memory Limit Exceeded------\nMemory limit exceeded\n\n------Divide and Conquer------\nTime limit exceeded\n\n------Constraints Violation------\nThe input contains only digits.\n\n------Input Format Error-------\nThe first line contains an integer N, the size of the lattice grid (5 \u2264 N \u2264 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.\n\nCells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N),..., (N, N) and the last row corresponds to cells with coordinates (1, 1),..., (N, 1).\n\n-----Output-----\nPrint Yes if there exists a single non-zero area rectangular lair with corners on the grid for which checking the levels of Zombie Contamination gives the results given in the input, and No otherwise.\n\n-----Constraints-----\n\n1 <= N <= 50\n0 <= x_1, y_1 < N\n0 <= x_2, y_2 < N\n\n------Time Limit Exceeded------\nTime limit exceeded\n\n------Memory Limit Exceeded------\nMemory limit exceeded\n\n------Divide and Conquer------\nTime limit exceeded\n\n------Constraints Violation------\nThe input contains only digits.\n\n------Input Format Error-------\nThe first line contains an integer N, the size of the lattice grid (5 \u2264 N \u2264 50). The next N lines each contain N characters, describing the level of Zombie Contamination of each cell in the lattice. Every character of every line is a digit between 0 and 4.\n\nCells are given in the same order as they are shown in the picture above: rows go in the decreasing value of y coordinate, and in one row cells go in the order of increasing x coordinate. This means that the first row corresponds to cells with coordinates (1, N),..., (N, N) and the last row corresponds to cells with coordinates (1, 1),..., (N, 1).\n\n-----Output-----\nPrint Yes if there exists a single non-zero area rectangular lair with corners on the grid for which checking the levels of Zombie Contamination"
    },
    {
        "number": 1567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '500000'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '35'\n"
    },
    {
        "number": 1569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 3 0\"\nassert solution(stdin) == \"1 4 0\"\n"
    },
    {
        "number": 1570,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 13\n\nInput\n3 17 4\n\nOutput\n13\n"
    },
    {
        "number": 1571,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n-----Constraints-----\n1 <= n <= 3000\n1 <= m <= n\n1 <= T <= 10^6\n1 <= S[i] <= $S$\nS[i] is a lowercase Latin letter.\n\n\"\"\""
    },
    {
        "number": 1572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\n\"\"\""
    },
    {
        "number": 1573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"111\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\nstdin[i]!= stdin[i + 1]\nstdin[i]!= stdin[i + 2]\nstdin[i]!= stdin[i + 3]\nstdin[i]!= stdin[i + 4]\nstdin[i]!= stdin[i + 5]\nstdin[i]!= stdin[i + 6]\nstdin[i]!= stdin[i + 7]\nstdin[i]!= stdin[i + 8]\nstdin[i]!= stdin[i + 9]\nstdin[i]!= stdin[i + 10]\nstdin[i]!= stdin[i + 11]\nstdin[i]!= stdin[i + 12]\nstdin[i]!= stdin[i + 13]\nstdin[i]!= stdin[i + 14]\nstdin[i]!= stdin[i + 15]\nstdin[i]!= stdin[i + 16]\nstdin[i]!= stdin[i + 17]\nstdin[i]!= stdin[i + 18]\nstdin[i]!= stdin[i + 19]\nstdin[i]!= stdin[i + 20]\nstdin[i]!= stdin[i + 21]\nstdin[i]!= stdin[i + 22]\nstdin[i]!= stdin[i + 23]\nstdin[i]!= stdin[i + 24]\nstdin[i]!= stdin[i + 25]\nstdin[i]!= stdin[i + 26]\nstdin[i]!= stdin[i + 27]\nstdin[i]!= stdin[i + 28]\nstdin[i]!= stdin[i + 29]\nstdin[i]!= stdin[i + 30]\nstdin[i]!= stdin[i + 31]\nstdin[i]!= stdin[i + 32]\nstdin[i]!= stdin[i + 33]\nstdin[i]!= stdin[i + 34]\nstdin[i]!= stdin[i + 35]\nstdin[i]!= stdin[i + 36]\nstdin[i]!= stdin[i + 37]\nstdin[i]!= stdin[i + 38]\nstdin[i]!= stdin[i + 39]\nstdin[i]!= stdin[i + 40]\nstdin[i]!= stdin[i + 41]\nstdin[i]!= stdin[i + 42]\nstdin[i]!= stdin[i + 43]\nstdin[i]!= stdin[i + 44]\nstdin[i]!= stdin[i + 45]\nstdin[i]!= stdin[i + 46]\nstdin[i]!= stdin[i + 47]\nstdin[i]!= stdin[i + 48]\nstdin[i]!= stdin[i + 49]\nstdin[i]!= stdin[i + 50]\nstdin[i]!= stdin[i + 51]\nstdin[i]!= stdin[i + 52]\nstdin[i]!= stdin[i + 53]\nstdin[i]!= stdin[i + 54]\nstdin[i]!= stdin[i + 55]\nstdin[i]!= stdin[i + 56]\nstdin[i]!= stdin[i + 57]\nstdin[i]!= stdin[i + 58]\nstdin[i]!= stdin[i + 59]\nstdin[i]!= stdin[i + 60]\nstdin[i]!= stdin[i + 61]\nstdin[i]!= stdin[i + 62]\nstdin[i]!= stdin[i + 63]\nstdin[i]!= stdin[i + 64]\nstdin[i]!= stdin[i + 65]\nstdin[i]!= stdin[i + 66]\nstdin[i]!= stdin[i + 67]\nstdin[i]!= stdin[i + 68]\nstdin[i]!= stdin[i + 69]\nstdin[i]!= stdin[i + 70]\nstdin[i]!= stdin[i + 71]\nstdin[i]!= stdin[i + 72]\nstdin[i]!= stdin[i + 73]\nstdin[i]!= stdin[i + 74]\nstdin[i]!= stdin[i + 75]\nstdin[i]!= stdin[i + 76]\nstdin[i]!= stdin[i + 77]\nstdin[i]!= stdin[i + 78]\nstdin[i]!= stdin[i + 79]\nstdin[i]!= stdin[i + 80]\nstdin[i]!= stdin[i + 81]\nstdin[i]!= stdin[i + 82]\nstdin[i]!= stdin[i + 83]\nstdin[i]!= stdin[i + 84]\nstdin[i]!= stdin[i + 85]\nstdin[i]!= stdin[i + 86]\nstdin[i]!= stdin[i + 87]\nstdin[i]!= stdin[i + 88]\nstdin[i]!= stdin[i + 89]\nstdin[i]!= stdin[i + 90]\nstdin[i]!= stdin[i + 91]\nstdin[i]!= stdin[i + 92]\nstdin[i]!= stdin[i + 93]\nstdin[i]!= stdin[i + 94]\nstdin[i]!= stdin[i + 95]\nstdin[i]!= stdin[i + 96]\nstdin[i]!= stdin[i + 97]\nstdin[i]!= stdin[i + 98]\nstdin[i]!= stdin[i + 99]\nstdin[i]!= stdin[i + 100]\nstdin[i]!= stdin[i + 101]\nstdin[i]!= stdin[i + 102]\nstdin[i]!= stdin[i + 103]\nstdin[i]!= stdin[i + 104]\nstdin[i]!= stdin[i + 105]\nstdin[i]!= stdin[i + 106]\nstdin[i]!= stdin[i + 107]\nstdin[i]!= stdin[i + 108]\nstdin[i]!= stdin[i + 109]\nstdin[i]!= stdin[i + 110]\nstdin[i]!= stdin[i + 111]\nstdin[i]"
    },
    {
        "number": 1574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1575,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 1576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"techno\") == \"techno\"\nassert solution(\"erfdcoeocs\") == \"erfdcoeocs\"\nassert solution(\"z\") == \"z\"\nassert solution(\"def\") == \"def\"\nassert solution(\"z\") == \"z\"\n"
    },
    {
        "number": 1577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Friendship\"\nassert solution(stdin) == \"Anton\"\nassert solution(stdin) == \"Danik\"\nassert solution(stdin) == \"Friendship\"\nassert solution(stdin) == \"Anton\"\n"
    },
    {
        "number": 1578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 1579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n"
    },
    {
        "number": 1580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\""
    },
    {
        "number": 1581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 1582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"17\"\n"
    },
    {
        "number": 1583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"45.0000000000\"\n"
    },
    {
        "number": 1584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 1585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n\n\"\"\""
    },
    {
        "number": 1586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\n"
    },
    {
        "number": 1587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 2\n"
    },
    {
        "number": 1588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '582491518'\n"
    },
    {
        "number": 1591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12 7\"\n\n-----Constraints-----\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n2\n1 1\n2 1\n\nOutput\n3 1\n\nInput\n3\n1 1\n1 1\n2 1\n\nOutput\n12 7\n\nExample 2:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 3:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 4:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 5:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 6:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 7:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 8:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 9:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 10:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 11:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nExample 12:\n\nInput\n1\n1 1\n1 1\n\nOutput\n1 1\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <= n <= 10^6\n1 <= t_{i} <= 10^6\n1 <= c_{i} <= 10^6\n\nTime Limit: 1 sec\n\nConstraints:\n\n1 <="
    },
    {
        "number": 1593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.4142136\"\n"
    },
    {
        "number": 1594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5, 5) == 2\nassert solution(4, 3) == 3\nassert solution(5, 1) == -1\nassert solution(1, 5) == -1\nassert solution(1, 4) == -1\n"
    },
    {
        "number": 1596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n\n1 <= n <= 100 000\n\n1 <= stdin.length <= 800 000\n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <= n\nstdin.length <="
    },
    {
        "number": 1598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\n"
    },
    {
        "number": 1599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1601,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"5 1\"\nassert solution(stdin) == \"1 6\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11 6 4 0\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= 10^9\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Alternatives-----\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives\n\nAlternatives"
    },
    {
        "number": 1603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"fuyukai desu\"\nassert solution(stdin) == \"fuyukai desu\"\nassert solution(stdin) == \"fuyukai desu\"\nassert solution(stdin) == \"fuyukai desu\"\nassert solution(stdin) == \"fuyukai desu\"\n"
    },
    {
        "number": 1604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 5\"\nassert solution(stdin) == \"2 7\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 1606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"01001\""
    },
    {
        "number": 1607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n-----Constraints-----\n\n1 <= n <= 1000\n1 <= k <= n\n\n------Time complexity-------\n\nO(n^2)\n\nO(n)\n\n------Space complexity-------\n\nO(n)\n\n------Algorithm-------\n\n1. Create a 2D array of $n$ rows and $k$ columns.\n2. For each cell, check if it is a neighbour of the cell with the same color.\n3. If it is, increment the count of beautiful bicolorings.\n4. If it is not, decrement the count of beautiful bicolorings.\n5. Return the count modulo $998244353$.\n\n\"\"\""
    },
    {
        "number": 1608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= n <= 100000\n\n1 <= a_i <= 100000\n\n1 <= a_1, a_2... a_{n} <= 100000\n\n\"\"\""
    },
    {
        "number": 1609,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 2\"\nassert solution(stdin) == \"2 1 3 4\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 3 2\"\nassert solution(stdin) == \"1 2 3 4\"\n"
    },
    {
        "number": 1610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 5 2 4 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Divide and Conquer-----\n\nTime Limit: 1 second\n\n\"\"\""
    },
    {
        "number": 1612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1613,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\ufffd"
    },
    {
        "number": 1614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n"
    },
    {
        "number": 1615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 10 28 64 136\"\n\nassert solution(stdin) == \"1 5 9 21\"\n\nassert solution(stdin) == \"1 10 28 64 136\"\n\nassert solution(stdin) == \"1 5 9 21\"\n\nassert solution(stdin) == \"1 10 28 64 136\""
    },
    {
        "number": 1618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ba\"\nassert solution(stdin) == \"bba\"\nassert solution(stdin) == \"abca\"\nassert solution(stdin) == \"abca\"\nassert solution(stdin) == \"abca\"\n"
    },
    {
        "number": 1621,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 41\n\n\"\"\""
    },
    {
        "number": 1622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 7\"\nassert solution(stdin) == \"5 31\"\nassert solution(stdin) == \"5 31\"\nassert solution(stdin) == \"5 31\"\nassert solution(stdin) == \"5 31\"\n"
    },
    {
        "number": 1624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"27\"\nassert solution(stdin) == \"164\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"164\"\nassert solution(stdin) == \"27\"\n"
    },
    {
        "number": 1625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\""
    },
    {
        "number": 1626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"32400\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 1627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"6 7\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 1628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"x\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"x\"\nassert solution(stdin) == \"y\"\nassert solution(stdin) == \"x\"\n"
    },
    {
        "number": 1629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2 5 4\"\nassert solution(stdin) == \"3 2 5 4\"\nassert solution(stdin) == \"3 2 5 4\"\nassert solution(stdin) == \"3 2 5 4\"\nassert solution(stdin) == \"3 2 5 4\"\n"
    },
    {
        "number": 1630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"rivest\") == \"bcdefghijklmnopqrstuvwxyz\"\nassert solution(\"shamir\") == \"tourist\"\nassert solution(\"adleman\") == \"petr\"\nassert solution(\"adleman\") == \"petr\"\nassert solution(\"adleman\") == \"petr\"\n"
    },
    {
        "number": 1632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.0740740741'\nassert solution(stdin) == '0.0000000000'\nassert solution(stdin) == '0.0000000000'\nassert solution(stdin) == '0.0000000000'\nassert solution(stdin) == '0.0000000000'\n"
    },
    {
        "number": 1633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 1634,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"16\"\n\nassert solution(stdin) == \"12\"\n\nassert solution(stdin) == \"16\"\n\nassert solution(stdin) == \"12\""
    },
    {
        "number": 1635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1636,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 0 3\"\n\n-----Constraints-----\n1 <= n <= 300\n1 <= m <= 300\n1 <= x_i, y_i <= 10^9\n1 <= u_i, v_i <= n\n\n-----Time Limit: 1 minute\n\n-----Memory Limit: 128 MB\n\n-----Constraints:\n\n1 <= n <= 300\n1 <= m <= 300\n1 <= x_i, y_i <= 10^9\n1 <= u_i, v_i <= n\n\n-----Input Format\n\nThe first line contains two integers $n$ and $m$ ($2 \\le n \\le 300\\,000$, $0 \\le m \\le 300\\,000$)\u00a0\u2014 the number of participants and the number of pairs of people who will not write a contest together.\n\nEach of the next $n$ lines contains two integers $x_i$ and $y_i$ ($-10^9 \\le x_i, y_i \\le 10^9$)\u00a0\u2014 the scores which will the $i$-th competitor get on the first problem and on the second problem. It is guaranteed that there are no two people having both $x_i$ and $y_i$ same.\n\nEach of the next $m$ lines contains two integers $u_i$ and $v_i$ ($1 \\le u_i, v_i \\le n$, $u_i \\ne v_i$)\u00a0\u2014 indices of people who don't want to write a contest in one team. Each unordered pair of indices will appear at most once.\n\n-----Output Format\n\nOutput $n$ integers\u00a0\u2014 the sum of scores for all participants in the same order as they appear in the input.\n\nConstraints\n\n1 <= n <= 300\n1 <= m <= 300\n1 <= x_i, y_i <= 10^9\n1 <= u_i, v_i <= n\n\nSample Input\n\n3 2\n1 2\n2 3\n1 3\n1 2\n2 3\n1 3\n\nSample Output\n\n3 0 3 \n\nExplanation\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score is, the better).\n\nZibi wants all competitors to write a contest with each other. However, there are $m$ pairs of people who really don't like to cooperate and they definitely won't write a contest together. So, Zibi will give some penalty points (possibly negative) for each solution and the final score of the team is the sum of them (the less the score"
    },
    {
        "number": 1638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10 6 6\"\n\nassert solution(stdin) == \"10 6 6\"\n\nassert solution(stdin) == \"10 6 6\"\n\nassert solution(stdin) == \"10 6 6\"\n\nassert solution(stdin) == \"10 6 6\""
    },
    {
        "number": 1639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= n <= 10^5\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1GB\n\n-----Alternatives\n\n1. Use a stack to store the subsegments of the sequence.\n2. Use a queue to store the subsegments of the sequence.\n3. Use a dictionary to store the subsegments of the sequence.\n4. Use a for loop to iterate over the subsegments of the sequence.\n5. Use a while loop to iterate over the subsegments of the sequence.\n\n-----Time complexity: O(n)\n\n-----Space complexity: O(n)\n\n-----Algorithm complexity: O(n)\n\n-----Submissions: Medium\n\n-----Constraints:\n\n1 <= n <= 10^5\n\n-----Input Format\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1,  a_2, ...,  a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Output Format\n\nPrint a single integer \u2014 the length of the maximum non-decreasing subsegment of sequence a.\n\n\n-----Example Input\n\nThe first line contains an integer n (1 \u2264 n \u2264 10^5).\n\nThe second line contains n integers a_1,  a_2, ...,  a_{n} (1 \u2264 a_{i} \u2264 10^9).\n\n\n-----Example Output\n\nPrint a single integer \u2014 the length of the maximum non-decreasing subsegment of sequence a.\n\n\n-----Constraints\n\n1 <= n <= 10^5\n\n1 <= a_1, a_2,..., a_{n} <= 10^9\n\n-----Input\n\n3\n2 2 1 3 4 1\n\nOutput\n\n3\nInput\n\n3\n2 2 9\n\nOutput\n\n3\n\n\n-----Note-----\n\nIn the first test the maximum non-decreasing subsegment is the numbers from the third to the fifth one.\n\nIn the second test the maximum non-decreasing subsegment is the numbers from the first to the third one.\n"
    },
    {
        "number": 1640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-8'\n"
    },
    {
        "number": 1641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '20'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1642,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.3535533906\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^9\n0 <= stdin[i] <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Efficiency-----\n1\n\n-----Space Complexity-----\nO(n)\n\n-----Constraints Used-----\n1.\n\n\"\"\""
    },
    {
        "number": 1643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\nassert solution(stdin) == \"010\"\n"
    },
    {
        "number": 1644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1645,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\nInput\n3\n1 2 -3\n\nOutput\n5\n\nInput\n3\n41 -41 41\n\nOutput\n3\n\n\n\n-----Note-----\n\nIn the first sample, the following subarrays are good: $[1]$, $[1, 2]$, $[2]$, $[2, -3]$, $[-3]$. However, the subarray $[1, 2, -3]$ isn't good, as its subarray $[1, 2, -3]$ has sum of elements equal to $0$.\n\nIn the second sample, three subarrays of size 1 are the only good subarrays. At the same time, the subarray $[41, -41, 41]$ isn't good, as its subarray $[41, -41]$ has sum of elements equal to $0$.\n\nIn the third sample, three subarrays of size 1 are the only good subarrays. At the same time, the subarray $[41, -41, 41]$ isn't good, as its subarray $[41, -41]$ has sum of elements equal to $0$.\n\n\"\"\""
    },
    {
        "number": 1646,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100\"\n\nassert solution(stdin) == \"1010\"\n\nassert solution(stdin) == \"1100\"\n\nassert solution(stdin) == \"1001\"\n\n-----Constraints-----\n1 <= n <= 100\n\n1 <= stdin.length <= 100\n\nstdin.length <= 100\n\nstdin contains only characters \"0\" and \"1\".\n\n\"\"\""
    },
    {
        "number": 1647,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1648,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"6\"\n"
    },
    {
        "number": 1649,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n"
    },
    {
        "number": 1650,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 1651,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 1652,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"dreamer\") == \"YES\"\nassert solution(\"erase\") == \"NO\"\nassert solution(\"eraser\") == \"NO\"\nassert solution(\"dreamer\") == \"YES\"\nassert solution(\"erase\") == \"YES\"\n"
    },
    {
        "number": 1653,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n\n\"\"\""
    },
    {
        "number": 1654,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"baab\"\nassert solution(stdin) == \"azbz\"\nassert solution(stdin) == \"abab\"\nassert solution(stdin) == \"ab\"\nassert solution(stdin) == \"ba\"\n"
    },
    {
        "number": 1655,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 1656,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 100\n\n\"\"\""
    },
    {
        "number": 1657,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.5000000000\"\n\nassert solution(stdin) == \"0.5000000000\"\n\nassert solution(stdin) == \"0.5000000000\"\n\nassert solution(stdin) == \"0.5000000000\"\n\nassert solution(stdin) == \"0.5000000000\""
    },
    {
        "number": 1658,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= d_{i} <= 100\n\n------Time Limit---------\nO(n)\n\n------Space Limit---------\nO(n)\n\n------Algorithm-----\n\n1. Create a list of all the nodes in the tree.\n2. For each node, find the distance from the root.\n3. For each node, find the length of the edge that connects it to the root.\n4. For each node, find the length of the edge that connects it to the root.\n5. For each node, find the length of the edge that connects it to the root.\n6. For each node, find the length of the edge that connects it to the root.\n7. For each node, find the length of the edge that connects it to the root.\n8. For each node, find the length of the edge that connects it to the root.\n9. For each node, find the length of the edge that connects it to the root.\n10. For each node, find the length of the edge that connects it to the root.\n11. For each node, find the length of the edge that connects it to the root.\n12. For each node, find the length of the edge that connects it to the root.\n13. For each node, find the length of the edge that connects it to the root.\n14. For each node, find the length of the edge that connects it to the root.\n15. For each node, find the length of the edge that connects it to the root.\n16. For each node, find the length of the edge that connects it to the root.\n17. For each node, find the length of the edge that connects it to the root.\n18. For each node, find the length of the edge that connects it to the root.\n19. For each node, find the length of the edge that connects it to the root.\n20. For each node, find the length of the edge that connects it to the root.\n21. For each node, find the length of the edge that connects it to the root.\n22. For each node, find the length of the edge that connects it to the root.\n23. For each node, find the length of the edge that connects it to the root.\n24. For each node, find the length of the edge that connects it to the root.\n25. For each node, find the length of the edge that connects it to the root.\n26. For each node, find the length of the edge that connects it to the root.\n27. For each node, find the length of the edge that connects it to the root.\n28. For each node, find the length of the edge that connects it to the root.\n29. For each node, find the length of the edge that connects it to the root.\n30. For each node, find the length of the edge that connects it to the root.\n31. For each node, find the length of the edge that connects it to the root.\n32. For each node, find the length of the edge that connects it to the root.\n33. For each node, find the length of the edge that connects it to the root.\n34. For each node, find the length of the edge that connects it to the root.\n35. For each node, find the length of the edge that connects it to the root.\n36. For each node, find the length of the edge that connects it to the root.\n37. For each node, find the length of the edge that connects it to the root.\n38. For each node, find the length of the edge that connects it to the root.\n39. For each node, find the length of the edge that connects it to the root.\n40. For each node, find the length of the edge that connects it to the root.\n41. For each node, find the length of the edge that connects it to the root.\n42. For each node, find the length of the edge that connects it to the root.\n43. For each node, find the length of the edge that connects it to the root.\n44. For each node, find the length of the edge that connects it to the root.\n45. For each node, find the length of the edge that connects it to the root.\n46. For each node, find the length of the edge that connects it to the root.\n47. For each node, find the length of the edge that connects it to the root.\n48. For each node, find the length of the edge that connects it to the root.\n49. For each node, find the length of the edge that connects it to the root.\n50. For each node, find the length of the edge that connects it to the root.\n51. For each node, find the length of the edge that connects it to the root.\n52. For each node, find the length of the edge that connects it to the root.\n53. For each node, find the length of the edge that connects it to the root.\n54. For each node, find the length of the edge that connects it to the root.\n55. For each node, find the length of the edge that connects it to the root.\n56. For each node, find the length of the edge that connects it to the root.\n57. For each node, find the length of the edge that connects it to the root.\n58. For each node, find the length of the edge that connects it to the root.\n59. For each node, find the length of the edge that connects it to the root.\n60. For each node, find the length of the edge that connects it to the root.\n61. For each node, find the length of the edge that connects it to the root.\n62. For each node, find the length of the edge that connects it to the root.\n63. For each node, find the length of the edge that connects it to the root.\n64. For each node, find the length of the edge that connects it to the root.\n65. For each node, find the length of the edge that connects it to the root.\n66. For each node, find the length of the edge that connects it to the root.\n67. For each node, find the length of the edge that connects it to the root.\n68. For each node, find the length of the edge that connects it to the root.\n69. For each node, find the length of the edge that connects it to the root.\n70. For each node, find the length of the edge that connects it to the root.\n71. For each node, find the length of the edge that connects it to the root.\n72. For each node, find the length of the edge that connects it to the root.\n73. For each node, find the length of the edge that connects it to the root.\n74. For each node, find the length of the edge that connects it to the root.\n75. For each node, find the length of the edge that connects it to the root.\n76. For each node, find the length of the edge that connects it to the root.\n77. For each node, find the length of the edge that connects it to the root.\n78. For each node, find the length of the edge that connects it to the root.\n79. For each node, find the length of the edge that connects it to the root.\n80. For each node, find the length of the edge that connects it to the root.\n81"
    },
    {
        "number": 1659,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"22 1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"22 1\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"22 1\"\n"
    },
    {
        "number": 1660,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1661,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1662,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1663,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"42\"\nassert solution(stdin) == \"428101984\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"42\"\n"
    },
    {
        "number": 1664,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1665,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1666,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2 1 1\"\nassert solution(stdin) == \"2 4 2 2\"\nassert solution(stdin) == \"3 1 1\"\nassert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"3 1\"\n"
    },
    {
        "number": 1667,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1668,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1234\"\nassert solution(stdin) == \"0600\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1337\"\n"
    },
    {
        "number": 1669,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nassert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nassert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nassert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\nassert solution(stdin) == \"fun a(b){var c=1,d=0,e;while(b>0){e=c;c=c+d;d=e;b--;}return c;}\n"
    },
    {
        "number": 1670,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"MC\"\nassert solution(stdin) == \"CSKA\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"28 a 3 y\"\nassert solution(stdin) == \"62 h 25 y\"\n"
    },
    {
        "number": 1671,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1672,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1673,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 1674,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1010\"\nassert solution(stdin) == \"1009\"\nassert solution(stdin) == \"41\"\nassert solution(stdin) == \"52\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 1675,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"2 0\"\nassert solution(stdin) == \"2 0\"\n"
    },
    {
        "number": 1676,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11 19 -1 21 22\"\n"
    },
    {
        "number": 1677,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 3"
    },
    {
        "number": 1678,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1679,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\nassert solution(stdin) == '3'\n"
    },
    {
        "number": 1680,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1681,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1682,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"25\"\n"
    },
    {
        "number": 1683,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12330\"\nassert solution(stdin) == \"1115598\"\nassert solution(stdin) == \"123456789\"\nassert solution(stdin) == \"123456789\"\nassert solution(stdin) == \"123456789\"\n"
    },
    {
        "number": 1684,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n[Time Limit]\n1 second\n\n[Algorithm]"
    },
    {
        "number": 1685,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\n\"\"\""
    },
    {
        "number": 1686,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '255.255.254.0'\nassert solution(stdin) == '255.255.0.0'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1687,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 1688,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 3 2\"\nassert solution(stdin) == \"5 4 3 6\"\nassert solution(stdin) == \"3 4 3 6\"\nassert solution(stdin) == \"3 4 3 6\"\nassert solution(stdin) == \"3 4 3 6\"\n"
    },
    {
        "number": 1689,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1690,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\nassert solution(stdin) == 20\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 1"
    },
    {
        "number": 1691,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3 5 8 11\"\nassert solution(stdin) == \"2 3 4 6 9 12 16 21 26 31\"\nassert solution(stdin) == \"2 3 4 6 9 12 16 21 26 31\"\nassert solution(stdin) == \"2 3 4 6 9 12 16 21 26 31\"\nassert solution(stdin) == \"2 3 4 6 9 12 16 21 26 31\"\n"
    },
    {
        "number": 1692,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n\"\"\""
    },
    {
        "number": 1693,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10 6 6\"\n\nassert solution(stdin) == \"10 6 6\"\n\nassert solution(stdin) == \"10 6 6\"\n\nassert solution(stdin) == \"10 6 6\"\n\nassert solution(stdin) == \"10 6 6\""
    },
    {
        "number": 1694,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"XR\"\nassert solution(stdin) == \"XR\"\nassert solution(stdin) == \"XR\"\nassert solution(stdin) == \"XR\"\nassert solution(stdin) == \"XR\"\n"
    },
    {
        "number": 1695,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"21\"\n\nassert solution(stdin) == \"16\"\n\nassert solution(stdin) == \"16\"\n\nassert solution(stdin) == \"16\"\n\nassert solution(stdin) == \"16\""
    },
    {
        "number": 1696,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1697,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 1698,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 1699,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 4\"\n"
    },
    {
        "number": 1700,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"0110001111\"\nassert solution(stdin) == \"0110001111\"\nassert solution(stdin) == \"0110001111\"\nassert solution(stdin) == \"0110001111\"\n"
    },
    {
        "number": 1701,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"block 8.8.8.8; #google\\nproxy 8.8.8.8; #codeforces\\nunblock 8.8.8.8; #check\\ncheck 138.197.64.57; #server\\ndef solution(stdin: str) -> str:\n    pass\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 1702,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1703,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 4\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 2"
    },
    {
        "number": 1704,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"97\"\nassert solution(stdin) == \"97\"\nassert solution(stdin) == \"97\"\nassert solution(stdin) == \"97\"\nassert solution(stdin) == \"97\"\n"
    },
    {
        "number": 1705,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1706,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"cacc\"\nassert solution(stdin) == \"cacc\"\nassert solution(stdin) == \"cacc\"\nassert solution(stdin) == \"cacc\"\nassert solution(stdin) == \"cacc\"\n"
    },
    {
        "number": 1707,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1708,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"22\"\nassert solution(stdin) == \"24\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"39\"\n"
    },
    {
        "number": 1709,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '10'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1710,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1711,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"707899035\"\nassert solution(stdin) == \"806066790\"\nassert solution(stdin) == \"707899035\"\nassert solution(stdin) == \"806066790\"\nassert solution(stdin) == \"707899035\"\n"
    },
    {
        "number": 1712,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Both\"\nassert solution(stdin) == \"Both\"\nassert solution(stdin) == \"Both\"\nassert solution(stdin) == \"Both\"\nassert solution(stdin) == \"Both\"\n"
    },
    {
        "number": 1713,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1714,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"3 2 1 4\"\nassert solution(stdin) == \"2 7 4 6 1 3 5 8\"\nassert solution(stdin) == \"4 0\"\nassert solution(stdin) == \"2 7 4 6 1 3 5 8\"\n"
    },
    {
        "number": 1715,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"350\"\n"
    },
    {
        "number": 1716,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1717,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"7\"\n"
    },
    {
        "number": 1718,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1719,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 64 - 3\n"
    },
    {
        "number": 1720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 30\n"
    },
    {
        "number": 1722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 5\"\nassert solution(stdin) == \"2 6\"\n"
    },
    {
        "number": 1724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 27\n"
    },
    {
        "number": 1725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1727,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\nassert solution(\"5\") == \"3\"\n"
    },
    {
        "number": 1728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1729,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 0 1 0 0 0 0 0 0\"\nassert solution(stdin) == \"2 2 2 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0 0\"\nassert solution(stdin) == \"2 3 2 1 0 0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0 0 0 0 0 0 0\"\n"
    },
    {
        "number": 1730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4 5\"\n"
    },
    {
        "number": 1731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\n-----Time Limit-----\n\nO(n log n)\n\nO(n log m)\n\n-----Space Limit-----\n\nO(n)\n\n-----Alternatives-----\n\n1. Sort the array.\n2. Find the index of the first element that is greater than the second element.\n3. Find the index of the first element that is less than the second element.\n4. Find the index of the first element that is equal to the second element.\n5. Find the index of the first element that is greater than the second element.\n6. Find the index of the first element that is less than the second element.\n7. Find the index of the first element that is equal to the second element.\n8. Find the index of the first element that is greater than the second element.\n9. Find the index of the first element that is less than the second element.\n10. Find the index of the first element that is equal to the second element.\n\n\"\"\""
    },
    {
        "number": 1732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\""
    },
    {
        "number": 1736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 6\nassert solution(stdin) == 7\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 1739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '73741817'\nassert solution(stdin) == '27'\nassert solution(stdin) == '1073741824'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 1 4 2 5\"\n\nassert solution(stdin) == \"3 1 4 2 5\"\n\nassert solution(stdin) == \"3 1 4 2 5\"\n\nassert solution(stdin) == \"3 1 4 2 5\"\n\nassert solution(stdin) == \"3 1 4 2 5\""
    },
    {
        "number": 1741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.5'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '0.625'\nassert solution(stdin) == '0.5'\nassert solution(stdin) == '0.5'\n"
    },
    {
        "number": 1742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(stdin) == \"44\"\n"
    },
    {
        "number": 1744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 0 0 0 2 3\"\nassert solution(stdin) == \"0 0 0 0 0 2 3\"\nassert solution(stdin) == \"0 0 0 0 0 2 3\"\nassert solution(stdin) == \"0 0 0 0 0 2 3\"\nassert solution(stdin) == \"0 0 0 0 0 2 3\"\n"
    },
    {
        "number": 1745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= n - 1\n\n-----Time Limit: 1 second***\n\n-----Space Limit: 1MB\n\n-----Alternatives:\n\n1. Use a stack to store the vertices of the tree.\n2. Use a queue to store the vertices of the tree.\n3. Use a dictionary to store the vertices of the tree.\n4. Use a stack to store the vertices of the tree.\n5. Use a queue to store the vertices of the tree.\n6. Use a dictionary to store the vertices of the tree.\n7. Use a stack to store the vertices of the tree.\n8. Use a queue to store the vertices of the tree.\n9. Use a dictionary to store the vertices of the tree.\n10. Use a stack to store the vertices of the tree.\n11. Use a queue to store the vertices of the tree.\n12. Use a dictionary to store the vertices of the tree.\n13. Use a stack to store the vertices of the tree.\n14. Use a queue to store the vertices of the tree.\n15. Use a dictionary to store the vertices of the tree.\n16. Use a stack to store the vertices of the tree.\n17. Use a queue to store the vertices of the tree.\n18. Use a dictionary to store the vertices of the tree.\n19. Use a stack to store the vertices of the tree.\n20. Use a queue to store the vertices of the tree.\n21. Use a dictionary to store the vertices of the tree.\n22. Use a stack to store the vertices of the tree.\n23. Use a queue to store the vertices of the tree.\n24. Use a dictionary to store the vertices of the tree.\n25. Use a stack to store the vertices of the tree.\n26. Use a queue to store the vertices of the tree.\n27. Use a dictionary to store the vertices of the tree.\n28. Use a stack to store the vertices of the tree.\n29. Use a queue to store the vertices of the tree.\n30. Use a dictionary to store the vertices of the tree.\n31. Use a stack to store the vertices of the tree.\n32. Use a queue to store the vertices of the tree.\n33. Use a dictionary to store the vertices of the tree.\n34. Use a stack to store the vertices of the tree.\n35. Use a queue to store the vertices of the tree.\n36. Use a dictionary to store the vertices of the tree.\n37. Use a stack to store the vertices of the tree.\n38. Use a queue to store the vertices of the tree.\n39. Use a dictionary to store the vertices of the tree.\n40. Use a stack to store the vertices of the tree.\n41. Use a queue to store the vertices of the tree.\n42. Use a dictionary to store the vertices of the tree.\n43. Use a stack to store the vertices of the tree.\n44. Use a queue to store the vertices of the tree.\n45. Use a dictionary to store the vertices of the tree.\n46. Use a stack to store the vertices of the tree.\n47. Use a queue to store the vertices of the tree.\n48. Use a dictionary to store the vertices of the tree.\n49. Use a stack to store the vertices of the tree.\n50. Use a queue to store the vertices of the tree.\n51. Use a dictionary to store the vertices of the tree.\n52. Use a stack to store the vertices of the tree.\n53. Use a queue to store the vertices of the tree.\n54. Use a dictionary to store the vertices of the tree.\n55. Use a stack to store the vertices of the tree.\n56. Use a queue to store the vertices of the tree.\n57. Use a dictionary to store the vertices of the tree.\n58. Use a stack to store the vertices of the tree.\n59. Use a queue to store the vertices of the tree.\n60. Use a dictionary to store the vertices of the tree.\n61. Use a stack to store the vertices of the tree.\n62. Use a queue to store the vertices of the tree.\n63. Use a dictionary to store the vertices of the tree.\n64. Use a stack to store the vertices of the tree.\n65. Use a queue to store the vertices of the tree.\n66. Use a dictionary to store the vertices of the tree.\n67. Use a stack to store the vertices of the tree.\n68. Use a queue to store the vertices of the tree.\n69. Use a dictionary to store the vertices of the tree.\n70. Use a stack to store the vertices of the tree.\n71. Use a queue to store the vertices of the tree.\n72. Use a dictionary to store the vertices of the tree.\n73. Use a stack to store the vertices of the tree.\n74. Use a queue to store the vertices of the tree.\n75. Use a dictionary to store the vertices of the tree.\n76. Use a stack to store the vertices of the tree.\n77. Use a queue to store the vertices of the tree.\n78. Use a dictionary to store the vertices of the tree.\n79. Use a stack to store the vertices of the tree.\n80. Use a queue to store the vertices of the tree.\n81. Use a dictionary to store the vertices of the tree.\n82. Use a stack to store the vertices of the tree.\n83. Use a queue to store the vertices of the tree.\n84. Use a dictionary to store the vertices of the tree.\n85. Use a stack to store the vertices of the tree.\n86. Use a queue to store the vertices of the tree.\n87. Use a dictionary to store the vertices of the tree.\n88. Use a stack to store the vertices of the tree.\n89. Use a queue to store the vertices of the tree.\n90. Use a dictionary to store the vertices of the tree.\n91. Use a stack to store the vertices of the tree.\n92. Use a queue to store the vertices of the tree.\n93. Use a dictionary to store the vertices of the tree.\n94. Use a stack to store the vertices of the tree.\n95. Use a queue to store the vertices of the tree.\n96. Use a dictionary to store the vertices of the tree.\n97. Use a stack to store the vertices of the tree.\n98. Use a queue to store the vertices of the tree.\n99. Use a dictionary to store the vertices of the tree.\n100. Use a stack to store the vertices of the tree.\n101. Use a queue to store the vertices of the tree.\n102. Use a dictionary to store the vertices of the tree.\n103. Use a stack to store the vertices of the tree.\n104. Use a queue to store the vertices of the tree.\n105. Use a dictionary to store the vertices of the tree.\n106. Use"
    },
    {
        "number": 1747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"3 7\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 12 4\"\nassert solution(stdin) == \"9 20 35 11 25\"\nassert solution(stdin) == \"9 20 35 11 25\"\nassert solution(stdin) == \"9 20 35 11 25\"\nassert solution(stdin) == \"9 20 35 11 25\"\n"
    },
    {
        "number": 1749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"LIE\"\nassert solution(stdin) == \"TRUTH\"\nassert solution(stdin) == \"LIE\"\nassert solution(stdin) == \"TRUTH\"\nassert solution(stdin) == \"LIE\"\n"
    },
    {
        "number": 1750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"135712853\"\n\n\"\"\""
    },
    {
        "number": 1752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 2 1\"\nassert solution(stdin) == \"10 20 30\"\nassert solution(stdin) == \"10 20 30\"\nassert solution(stdin) == \"10 20 30\"\nassert solution(stdin) == \"10 20 30\"\n"
    },
    {
        "number": 1753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\n"
    },
    {
        "number": 1754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '15'\n"
    },
    {
        "number": 1757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"OOOoOooO\"\nassert solution(stdin) == \"OOOoOooOooooOoo\"\nassert solution(stdin) == \"OOOoOooOooOoo\"\nassert solution(stdin) == \"OOOoOooOooOoo\"\nassert solution(stdin) == \"OOOoOooOooOoo\"\n"
    },
    {
        "number": 1758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 6 10 15\"\n"
    },
    {
        "number": 1760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 6 3\"\nassert solution(stdin) == \"5 12 23 34 36 27 18 11 6 1\"\nassert solution(stdin) == \"5 12 23 34 36 27 18 11 6 1\"\nassert solution(stdin) == \"5 12 23 34 36 27 18 11 6 1\"\nassert solution(stdin) == \"5 12 23 34 36 27 18 11 6 1\"\n"
    },
    {
        "number": 1761,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\n"
    },
    {
        "number": 1762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000000001\"\nassert solution(stdin) == \"2000000001\"\nassert solution(stdin) == \"3000000001\"\nassert solution(stdin) == \"4000000001\"\nassert solution(stdin) == \"5000000001\"\n"
    },
    {
        "number": 1763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n\"\"\""
    },
    {
        "number": 1764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12 5\"\nassert solution(stdin) == \"16 12\"\nassert solution(stdin) == \"16 12\"\nassert solution(stdin) == \"16 12\"\nassert solution(stdin) == \"16 12\"\n"
    },
    {
        "number": 1767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 22\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a[i] <= 10^9\n1 <= b[i] <= 10^9\n\nTime Limit: 1 sec\n\nExample 1:\n\nInput\n5\n1 2 4 3 2\n2 3 3 12 1\n\nOutput\n22\nExample 2:\n\nInput\n10\n13 2 7 11 8 4 9 8 5 1\n5 7 18 9 2 3 0 11 8 6\n\nOutput\n46\n\"\"\""
    },
    {
        "number": 1768,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 4 2\"\n\n\"\"\""
    },
    {
        "number": 1770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"9\"\n"
    },
    {
        "number": 1774,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 1775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 1776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"18\"\n"
    },
    {
        "number": 1777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 1"
    },
    {
        "number": 1778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n"
    },
    {
        "number": 1779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"qwertyuiopasdfghjklzxcvbnm\") == \"HelloVKCup2017\"\nassert solution(\"mnbvcxzlkjhgfdsapoiuytrewq\") == \"TwccpQZAvb2017\"\nassert solution(\"veamhjsgqocnrbfxdtwkylupzi\") == \"TwccpQZAvb2017\"\nassert solution(\"asdfghjklqwertyuiopzxcvbnm\") == \"7uduGUDUUDUudu7\"\nassert solution(\"qwertyuiopasdfghjklzxcvbnm\") == \"7uduGUDUUDUudu7\"\n"
    },
    {
        "number": 1780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solutionP"
    },
    {
        "number": 1782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 3\nassert solution(stdin) == 1\nassert solution(stdin) == 1\nassert solution(stdin) == 1\n"
    },
    {
        "number": 1783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9.0000000000'\nassert solution(stdin) == '10.0000000000'\nassert solution(stdin) == '10.0000000000'\nassert solution(stdin) == '10.0000000000'\nassert solution(stdin) == '10.0000000000'\n"
    },
    {
        "number": 1784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"28\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n\n0 <= s.length <= 10^5\n\ns contains only lowercase Latin letters.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is not a duplicate.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns[i] is a lowercase Latin letter.\n\ns["
    },
    {
        "number": 1788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"0 2\"\nassert solution(input()) == \"0 2\"\nassert solution(input()) == \"0 2\"\nassert solution(input()) == \"0 2\"\nassert solution(input()) == \"0 2\"\n"
    },
    {
        "number": 1789,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 1790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 1791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n-----Constraints-----\n\n1 <= n <= 100\n1 <= m <= 10000\n1 <= u, v, s, b, k, h <= 10^9\n1 <= a, f <= 10^9\n\n------Time complexity-------\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b + k + h)\n\nO(n + m + s + b"
    },
    {
        "number": 1793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 17\n\n\"\"\""
    },
    {
        "number": 1795,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 0\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 1\n"
    },
    {
        "number": 1797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '17'\n\n\"\"\""
    },
    {
        "number": 1798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 2 0\"\n"
    },
    {
        "number": 1799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 4 1 3\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2 3\"\n"
    },
    {
        "number": 1801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= stdin[i] <= 10^9\n1 <= a_1, a_2,..., a_{n} <= 10^9\n1 <= b_1, b_2,..., b_{n} <= 10^9\n1 <= q_1, q_2,..., q_{n} <= 10^9\n1 <= x_1, y_1, x_{2\u00b7}, y_{2\u00b7} <= 10^9\n1 <= x_2, y_2, x_{2\u00b7}, y_{2\u00b7} <= 10^9\n1 <= m <= 10^9 + 7\n\nTime Limit: 1 sec\nMemory Limit: 128 MB\n\nAccepted\n2\n\nSubmissions\n1\n\n1\n\n-----Alternatives-----\n\n1. Use a stack to store the sequence of points.\n2. Use a queue to store the sequence of points.\n3. Use a dictionary to store the sequence of points.\n4. Use a set to store the sequence of points.\n5. Use a set to store the sequence of points.\n6. Use a set to store the sequence of points.\n7. Use a set to store the sequence of points.\n8. Use a set to store the sequence of points.\n9. Use a set to store the sequence of points.\n10. Use a set to store the sequence of points.\n11. Use a set to store the sequence of points.\n12. Use a set to store the sequence of points.\n13. Use a set to store the sequence of points.\n14. Use a set to store the sequence of points.\n15. Use a set to store the sequence of points.\n16. Use a set to store the sequence of points.\n17. Use a set to store the sequence of points.\n18. Use a set to store the sequence of points.\n19. Use a set to store the sequence of points.\n20. Use a set to store the sequence of points.\n21. Use a set to store the sequence of points.\n22. Use a set to store the sequence of points.\n23. Use a set to store the sequence of points.\n24. Use a set to store the sequence of points.\n25. Use a set to store the sequence of points.\n26. Use a set to store the sequence of points.\n27. Use a set to store the sequence of points.\n28. Use a set to store the sequence of points.\n29. Use a set to store the sequence of points.\n30. Use a set to store the sequence of points.\n31. Use a set to store the sequence of points.\n32. Use a set to store the sequence of points.\n33. Use a set to store the sequence of points.\n34. Use a set to store the sequence of points.\n35. Use a set to store the sequence of points.\n36. Use a set to store the sequence of points.\n37. Use a set to store the sequence of points.\n38. Use a set to store the sequence of points.\n39. Use a set to store the sequence of points.\n40. Use a set to store the sequence of points.\n41. Use a set to store the sequence of points.\n42. Use a set to store the sequence of points.\n43. Use a set to store the sequence of points.\n44. Use a set to store the sequence of points.\n45. Use a set to store the sequence of points.\n46. Use a set to store the sequence of points.\n47. Use a set to store the sequence of points.\n48. Use a set to store the sequence of points.\n49. Use a set to store the sequence of points.\n50. Use a set to store the sequence of points.\n51. Use a set to store the sequence of points.\n52. Use a set to store the sequence of points.\n53. Use a set to store the sequence of points.\n54. Use a set to store the sequence of points.\n55. Use a set to store the sequence of points.\n56. Use a set to store the sequence of points.\n57. Use a set to store the sequence of points.\n58. Use a set to store the sequence of points.\n59. Use a set to store the sequence of points.\n60. Use a set to store the sequence of points.\n61. Use a set to store the sequence of points.\n62. Use a set to store the sequence of points.\n63. Use a set to store the sequence of points.\n64. Use a set to store the sequence of points.\n65. Use a set to store the sequence of points.\n66. Use a set to store the sequence of points.\n67. Use a set to store the sequence of points.\n68. Use a set to store the sequence of points.\n69. Use a set to store the sequence of points.\n70. Use a set to store the sequence of points.\n71. Use a set to store the sequence of points.\n72. Use a set to store the sequence of points.\n73. Use a set to store the sequence of points.\n74. Use a set to store the sequence of points.\n75. Use a set to store the sequence of points.\n76. Use a set to store the sequence of points.\n77. Use a set to store the sequence of points.\n78. Use a set to store the sequence of points.\n79. Use a set to store the sequence of points.\n80. Use a set to store the sequence of points.\n81. Use a set to store the sequence of points.\n82. Use a set to store the sequence of points.\n83. Use a set to store the sequence of points.\n84. Use a set to store the sequence of points.\n85. Use a set to store the sequence of points.\n86. Use a set to store the sequence of points.\n87. Use a set to store the sequence of points.\n88. Use a set to store the sequence of points.\n89. Use a set to store the sequence of points.\n90. Use a set to store the sequence of points.\n91. Use a set to store the sequence of points.\n92. Use a set to store the sequence of points.\n93. Use a set to store the sequence of points.\n94. Use a set to store the sequence of points.\n95. Use a set to store the sequence of points.\n96. Use a set to store the sequence of points.\n97. Use a set to store the sequence of points.\n98. Use a set to store the sequence"
    },
    {
        "number": 1802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"2\"\nassert solution(5) == \"1\"\nassert solution(5) == \"2\"\nassert solution(5) == \"1\"\nassert solution(5) == \"2\"\n"
    },
    {
        "number": 1803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"39\"\n"
    },
    {
        "number": 1808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"302\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"13\"\n"
    },
    {
        "number": 1809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\n\n\"\"\""
    },
    {
        "number": 1810,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3000) == 1\nassert solution(4000) == 2\nassert solution(5000) == 3\nassert solution(10000) == 4\nassert solution(20000) == 5\n"
    },
    {
        "number": 1811,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1812,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1813,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= l <= 10^5\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Efficiency-----\nO(n)\n\n-----Algorithm-----\n\n\"\"\""
    },
    {
        "number": 1814,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 1815,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1816,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n\n\"\"\""
    },
    {
        "number": 1817,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1818,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1 2 4\"\n\nassert solution(stdin) == \"1 2 4 5\"\n\nassert solution(stdin) == \"1 2 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 1819,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\n\n\"\"\""
    },
    {
        "number": 1820,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3 6\"\nassert solution(stdin) == \"2 3 6\"\nassert solution(stdin) == \"2 3 6\"\nassert solution(stdin) == \"2 3 6\"\nassert solution(stdin) == \"2 3 6\"\n"
    },
    {
        "number": 1821,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1822,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1823,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1824,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"123\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1825,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ababab\"\nassert solution(stdin) == \"ababab\"\nassert solution(stdin) == \"ababab\"\nassert solution(stdin) == \"ababab\"\nassert solution(stdin) == \"ababab\"\n"
    },
    {
        "number": 1826,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 13\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 1827,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1828,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^5\n\n\"\"\""
    },
    {
        "number": 1829,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 1830,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '4 2 0'\nassert solution(stdin) == '16 9'\nassert solution(stdin) == '9999800001'\n"
    },
    {
        "number": 1831,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"no\"\nassert solution(stdin) == \"yes\"\n"
    },
    {
        "number": 1832,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"aeren\"\nassert solution(stdin) == \"ari\"\nassert solution(stdin) == \"arousal\"\nassert solution(stdin) == \"around\"\nassert solution(stdin) == \"ari\"\n"
    },
    {
        "number": 1833,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1834,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 5 2 3 2\"\nassert solution(stdin) == \"1 5 2 3 2\"\nassert solution(stdin) == \"1 5 2 3 2\"\nassert solution(stdin) == \"1 5 2 3 2\"\nassert solution(stdin) == \"1 5 2 3 2\"\n"
    },
    {
        "number": 1835,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1836,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\n\n[Good]\n"
    },
    {
        "number": 1837,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nInput\n5\n0 1 3 4 2\n\nOutput\n3\n"
    },
    {
        "number": 1838,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1839,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4\"\n"
    },
    {
        "number": 1840,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 9 11 9 11\"\n\nassert solution(stdin) == \"1 9 11 9 11\"\n\nassert solution(stdin) == \"1 9 11 9 11\"\n\nassert solution(stdin) == \"1 9 11 9 11\"\n\nassert solution(stdin) == \"1 9 11 9 11\""
    },
    {
        "number": 1841,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 1842,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10.000000000000000\"\nassert solution(stdin) == \"20.000000000000000\"\nassert solution(stdin) == \"10.000000000000000\"\nassert solution(stdin) == \"20.000000000000000\"\nassert solution(stdin) == \"10.000000000000000\"\n"
    },
    {
        "number": 1843,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-4'\n\n\"\"\""
    },
    {
        "number": 1844,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= n <= 300\n\n1 <= a_i <= 300\n\n1 <= a_1, a_2, \\ldots, a_n <= 300\n\n1 <= n <= 300\n\n1 <= a_i <= 300\n\n1 <= a_1, a_2, \\ldots, a_n <= 300\n\n1 <= gcd(a_i, a_1, a_2, a_3, a_4, a_5, a_6, a_7, a_8, a_9, a_10, a_11, a_12, a_13, a_14, a_15, a_16, a_17, a_18, a_19, a_20, a_21, a_22, a_23, a_24, a_25, a_26, a_27, a_28, a_29, a_30, a_31, a_32, a_33, a_34, a_35, a_36, a_37, a_38, a_39, a_40, a_41, a_42, a_43, a_44, a_45, a_46, a_47, a_48, a_49, a_50, a_51, a_52, a_53, a_54, a_55, a_56, a_57, a_58, a_59, a_60, a_61, a_62, a_63, a_64, a_65, a_66, a_67, a_68, a_69, a_70, a_71, a_72, a_73, a_74, a_75, a_76, a_77, a_78, a_79, a_80, a_81, a_82, a_83, a_84, a_85, a_86, a_87, a_88, a_89, a_90, a_91, a_92, a_93, a_94, a_95, a_96, a_97, a_98, a_99, a_100, a_101, a_102, a_103, a_104, a_105, a_106, a_107, a_108, a_109, a_110, a_111, a_112, a_113, a_114, a_115, a_116, a_117, a_118, a_119, a_120, a_121, a_122, a_123, a_124, a_125, a_126, a_127, a_128, a_129, a_130, a_131, a_132, a_133, a_134, a_135, a_136, a_137, a_138, a_139, a_140, a_141, a_142, a_143, a_144, a_145, a_146, a_147, a_148, a_149, a_150, a_151, a_152, a_153, a_154, a_155, a_156, a_157, a_158, a_159, a_160, a_161, a_162, a_163, a_164, a_165, a_166, a_167, a_168, a_169, a_170, a_171, a_172, a_173, a_174, a_175, a_176, a_177, a_178, a_179, a_180, a_181, a_182, a_183, a_184, a_185, a_186, a_187, a_188, a_189, a_190, a_191, a_192, a_193, a_194, a_195, a_196, a_197, a_198, a_199, a_200, a_201, a_202, a_203, a_204, a_205, a_206, a_207, a_208, a_209, a_210, a_211, a_212, a_213, a_214, a_215, a_216, a_217, a_218, a_219, a_220, a_221, a_222, a_223, a_224, a_225, a_226, a_227, a_228, a_229, a_230, a_231, a_232, a_233, a_234, a_235, a_236, a_237, a_238, a_239, a_240, a_241, a_242, a_243, a_244, a_245, a_246, a_247, a_248, a_249, a_250, a_251, a_252, a_253, a_254, a_255, a_256, a_257, a_258, a_259, a_260, a_261, a_262, a_263, a_264, a_265, a_266, a_267, a_268, a_269, a_270, a_271, a_272, a_273, a_274, a_275, a_276, a_277, a_278, a_279, a_280, a_281, a_282, a_283, a_284, a_285, a_286, a_287, a_288, a_289, a_290, a_291, a_292, a_293, a_294, a_295, a_296, a_297, a_298, a_299, a_300, a_301, a_302, a_303, a_304, a_305, a_306, a_307, a_308, a_309, a_310, a_311, a_312, a_313, a_314, a_315, a_316, a_317, a_318, a_319, a_320, a_321, a_322, a_323, a_324, a_325, a_326, a_327, a_328, a_329, a_330, a_331, a_332, a_333, a_334, a_335, a_336, a_337, a_338, a_339, a_340, a_341, a_342, a_343, a_344, a_345, a_346, a_347, a_348, a_349, a_350, a_351, a_352, a_353, a_354, a_355, a_356, a_357, a_358, a_359, a_360, a_361, a_362, a_363, a_364, a_365, a_366, a_367, a_368, a_369, a_370, a_371, a_372, a_373, a_374, a_375, a_376, a_377, a_378, a_379, a_380, a_381, a_382, a_383, a_384, a_385, a_386, a_"
    },
    {
        "number": 1845,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"14\"\n"
    },
    {
        "number": 1846,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1847,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1848,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1849,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"180 10\"\nassert solution(stdin) == \"180 10\"\nassert solution(stdin) == \"180 10\"\nassert solution(stdin) == \"180 10\"\nassert solution(stdin) == \"180 10\"\n"
    },
    {
        "number": 1850,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1851,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n\"\"\""
    },
    {
        "number": 1852,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1853,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1854,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 1855,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"18\"\nassert solution(stdin) == \"15\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1856,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= s_i.length <= 50\ns_i consist only of lowercase Latin letters.\n\n\"\"\""
    },
    {
        "number": 1857,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 120\nassert solution(6) == 120\nassert solution(7) == 120\nassert solution(8) == 120\nassert solution(9) == 120\n"
    },
    {
        "number": 1858,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 1859,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 1\nassert solution(4) == 2\nassert solution(0) == 1\nassert solution(1) == 0\nassert solution(2) == 0\n"
    },
    {
        "number": 1860,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 6\nassert solution(3) == 6\nassert solution(4) == 6\nassert solution(5) == 6\nassert solution(6) == 6\n"
    },
    {
        "number": 1861,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1862,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3 4\"\n"
    },
    {
        "number": 1863,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"AGA\"\nassert solution(stdin) == \"AG\"\nassert solution(stdin) == \"G\"\nassert solution(stdin) == \"A\"\nassert solution(stdin) == \"G\"\n"
    },
    {
        "number": 1864,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n\nInput\n5\n1 2 3 4 5\n\nOutput\n-1\n"
    },
    {
        "number": 1865,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 1866,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 1867,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 1868,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 150352234\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= b_1, b_2, \\dots, b_m <= 10^9\n\n\"\"\""
    },
    {
        "number": 1869,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nInput\n5\n1 0 1 0 1 0 1 0 1\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0 1 0 1 0 1 0\n\nOutput\n3\n\nInput\n5\n1 0 1 0"
    },
    {
        "number": 1870,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 1871,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n\"\"\""
    },
    {
        "number": 1872,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '108.395919545675'\n\nInput\n5 10\n\nOutput\n108.395919545675\n"
    },
    {
        "number": 1873,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= m <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n\nSample Input\n\n4 3\n2 1 3 1\n\nSample Output\n\n5\n\nSample Input\n\n7 4\n4 2 3 1 2 4 3\n\nSample Output\n\n18\n\n\"\"\""
    },
    {
        "number": 1874,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 38.546168065709\n\nInput\n2 5 3\n\nOutput\n38.546168065709\n"
    },
    {
        "number": 1875,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"16.000000\"\n\n\"\"\""
    },
    {
        "number": 1876,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"252\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1877,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1878,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '18'\nassert solution(stdin) == '10'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1879,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 1880,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(12345) == 71232\nassert solution(12345) == 71232\nassert solution(12345) == 71232\nassert solution(12345) == 71232\nassert solution(12345) == 71232\n"
    },
    {
        "number": 1881,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 12 3 3\"\nassert solution(stdin) == \"0 1 1 254 254\"\nassert solution(stdin) == \"0 1 1 254 254\"\nassert solution(stdin) == \"0 1 1 254 254\"\nassert solution(stdin) == \"0 1 1 254 254\"\n"
    },
    {
        "number": 1882,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1883,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1884,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"No\""
    },
    {
        "number": 1885,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(7) == 29\nassert solution(8) == 29\nassert solution(9) == 29\nassert solution(10) == 29\nassert solution(11) == 29\n"
    },
    {
        "number": 1886,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"ApPLe\") == \"ApPLe\"\nassert solution(\"konjac\") == \"Konjac\"\nassert solution(\"ApPLe\") == \"ApPLe\"\nassert solution(\"konjac\") == \"Konjac\"\nassert solution(\"ApPLe\") == \"ApPLe\"\n"
    },
    {
        "number": 1887,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"29\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1888,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1889,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1890,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == str(63)\n\nassert solution(stdin) == str(4)\n\nassert solution(stdin) == str(1)\n\nassert solution(stdin) == str(1)\n\nassert solution(stdin) == str(1)"
    },
    {
        "number": 1891,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\n\"\"\""
    },
    {
        "number": 1892,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 1893,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1011.060722383550382782399454922040'\n\nInput\n1000 1000000\n\nOutput\n1011.060722383550382782399454922040\n"
    },
    {
        "number": 1894,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Never\"\n"
    },
    {
        "number": 1895,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 1896,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 19\nassert solution(3) == 19\nassert solution(4) == 19\nassert solution(5) == 19\nassert solution(6) == 19\n"
    },
    {
        "number": 1897,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"28.0000000\"\nassert solution(stdin) == \"5.8333333\"\nassert solution(stdin) == \"17.0500000\"\nassert solution(stdin) == \"28.0000000\"\nassert solution(stdin) == \"5.8333333\"\n"
    },
    {
        "number": 1898,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == \"I hate it\"\nassert solution(2) == \"I hate that I love it\"\nassert solution(3) == \"I hate that I love that I hate it\"\n"
    },
    {
        "number": 1899,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= stdin[i] <= 10^9\n1 <= k <= stdin.length\n1 <= l_i, r_i <= stdin.length\n1 <= s <= stdin.length\n\n\"\"\""
    },
    {
        "number": 1900,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^9\n1 <= m <= 10^9\n\nTime Limit: 1 second\n\nSpace Limit: 1 GB\n\n-----Submissions-----\n\nSubmissions (easy)"
    },
    {
        "number": 1901,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 55\n\nassert solution(stdin) == 15\n\nassert solution(stdin) == 55\n\nassert solution(stdin) == 15\n\nassert solution(stdin) == 55"
    },
    {
        "number": 1902,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '183'\nassert solution(stdin) == '183'\nassert solution(stdin) == '183'\nassert solution(stdin) == '183'\nassert solution(stdin) == '183'\n"
    },
    {
        "number": 1903,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '8'\n"
    },
    {
        "number": 1904,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"hhardh\"\nassert solution(stdin) == \"hhaarr\"\nassert solution(stdin) == \"hhzawde\"\nassert solution(stdin) == \"hhardh\"\nassert solution(stdin) == \"hhaarr\"\n"
    },
    {
        "number": 1905,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8 2\"\nassert solution(stdin) == \"1 8\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2 2\"\nassert solution(stdin) == \"1 2 2 2\"\n"
    },
    {
        "number": 1906,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(12) == 2\nassert solution(123) == 2\nassert solution(1234) == 2\nassert solution(12345) == 2\nassert solution(123456) == 2\n"
    },
    {
        "number": 1907,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '289.02652413'\n\nassert solution(stdin) == '138.23007676'\n\nassert solution(stdin) == '289.02652413'\n\nassert solution(stdin) == '138.23007676'\n\nassert solution(stdin) == '289.02652413'"
    },
    {
        "number": 1908,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ALIVE\"\nassert solution(stdin) == \"ALIVE\"\nassert solution(stdin) == \"ALIVE\"\nassert solution(stdin) == \"ALIVE\"\nassert solution(stdin) == \"ALIVE\"\n"
    },
    {
        "number": 1909,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 1910,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == 24\nassert solution(4) == 24\nassert solution(5) == 24\nassert solution(6) == 24\nassert solution(7) == 24\n"
    },
    {
        "number": 1911,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1912,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 1913,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '50'\nassert solution(stdin) == '110'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1914,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '33'\n"
    },
    {
        "number": 1915,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(5) == 70\nassert solution(10) == 210\nassert solution(15) == 610\nassert solution(35) == 1215\n"
    },
    {
        "number": 1916,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\nassert solution(stdin) == '0'\n"
    },
    {
        "number": 1917,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 4 5 5 5 5 5 5\"\nassert solution(stdin) == \"1 2 3 3 3 3 3 3 3\"\nassert solution(stdin) == \"1 2 3 3 3 3 3 3 3\"\nassert solution(stdin) == \"1 2 3 3 3 3 3 3 3\"\nassert solution(stdin) == \"1 2 3 3 3 3 3 3 3\"\n"
    },
    {
        "number": 1918,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 11\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n1 2 3 4 5\nA\n\nSample Output\n\n1\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n1 2 3 4 5\nB\n\nSample Output\n\n1\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n1 2 3 4 5\nA\n\nSample Output\n\n1\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\nSample Input\n\n1\n1 2 3 4 5\nB\n\nSample Output\n\n1\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9\n\nTime Limit: 1 sec\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= p_{i} <= 10^9\n1 <= A, B <= 10^9"
    },
    {
        "number": 1919,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(2) == 2\nassert solution(3) == 1\nassert solution(4) == 2\nassert solution(5) == 1\n"
    },
    {
        "number": 1920,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1921,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"42\"\n"
    },
    {
        "number": 1922,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"0\"\n"
    },
    {
        "number": 1923,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 1924,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '14'\n"
    },
    {
        "number": 1925,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 1926,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 2 1 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\nassert solution(stdin) == \"0 0 0 0\"\n"
    },
    {
        "number": 1927,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 1928,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 1929,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 1930,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"499122179\"\nassert solution(stdin) == \"499122177\"\nassert solution(stdin) == \"499122179\"\nassert solution(stdin) == \"499122177\"\nassert solution(stdin) == \"499122179\"\n"
    },
    {
        "number": 1931,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1932,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"42\"\n\nassert solution(stdin) == \"28\"\n\nassert solution(stdin) == \"42\"\n\nassert solution(stdin) == \"28\"\n\nassert solution(stdin) == \"42\""
    },
    {
        "number": 1933,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 1\"\nassert solution(stdin) == \"4 1\"\nassert solution(stdin) == \"4 1\"\nassert solution(stdin) == \"4 1\"\nassert solution(stdin) == \"4 1\"\n"
    },
    {
        "number": 1934,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1935,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '45'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'"
    },
    {
        "number": 1936,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14 21\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"1 1337\"\nassert solution(stdin) == \"1 69\"\nassert solution(stdin) == \"1 89\"\n"
    },
    {
        "number": 1937,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 1 1 1 2\"\nassert solution(stdin) == \"0 0 1 1 1 2\"\nassert solution(stdin) == \"0 0 1 1 1 2\"\nassert solution(stdin) == \"0 0 1 1 1 2\"\nassert solution(stdin) == \"0 0 1 1 1 2\"\n"
    },
    {
        "number": 1938,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Constraints-----\n\n1 <= n <= 200 000\n1 <= k <= n\n\n-----Time Limit Exceeded-----\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit Exceeded\n\nTime Limit"
    },
    {
        "number": 1939,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 1940,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 1941,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1942,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 1\"\nassert solution(stdin) == \"1 3 2 3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1943,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.75\"\nassert solution(stdin) == \"3.141592\"\nassert solution(stdin) == \"1.75\"\nassert solution(stdin) == \"3.141592\"\nassert solution(stdin) == \"1.75\"\n"
    },
    {
        "number": 1944,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Poor Alex\"\nassert solution(stdin) == \"Happy Alex\"\n\n\"\"\""
    },
    {
        "number": 1945,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1946,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"408\"\n"
    },
    {
        "number": 1947,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1948,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 10^5\n1 \u2264 a, b \u2264 n\n\n-----Time Limit: 1 minute\n\n-----Memory Limit: 128 MB\n\n-----For detailed solution:\n\nhttps://www.hackerrank.com/challenges/tree-game/problem\n"
    },
    {
        "number": 1949,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1950,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '19'\n"
    },
    {
        "number": 1951,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1952,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1 1 1\"\n"
    },
    {
        "number": 1953,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n\"\"\""
    },
    {
        "number": 1954,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 1955,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 1956,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"0 1\"\nassert solution(stdin) == \"0 0\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 1957,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1958,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"55\"\n\nassert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"15\""
    },
    {
        "number": 1959,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 1960,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3223'\nassert solution(stdin) == '3133'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 1961,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 1962,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1963,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"5 0\"\nassert solution(stdin) == \"5 1\"\n"
    },
    {
        "number": 1964,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\n"
    },
    {
        "number": 1965,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1966,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 1967,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"....\"\nassert solution(stdin) == \"....\"\nassert solution(stdin) == \"....\"\nassert solution(stdin) == \"....\"\nassert solution(stdin) == \"....\"\n"
    },
    {
        "number": 1968,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1969,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 1970,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 1971,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-1\"\n"
    },
    {
        "number": 1972,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1973,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1974,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 1975,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 1976,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 1977,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"aaabcde\"\nassert solution(stdin) == \"aaaepfafw\"\nassert solution(stdin) == \"aaaaaaadudsnz\"\nassert solution(stdin) == \"aaaaaaadudsnz\"\nassert solution(stdin) == \"aaaaaaadudsnz\"\n"
    },
    {
        "number": 1978,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1979,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 1980,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 13\n\n\"\"\""
    },
    {
        "number": 1981,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1982,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n, k <= 10^7\n\n\"\"\""
    },
    {
        "number": 1983,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3 2 1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"3 1 4 1 5 9\"\n"
    },
    {
        "number": 1984,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\nassert solution(stdin) == \"1 0\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"3 1\"\nassert solution(stdin) == \"4 2\"\n"
    },
    {
        "number": 1985,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1986,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3'\n"
    },
    {
        "number": 1987,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"18\"\n"
    },
    {
        "number": 1988,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abab\"\nassert solution(stdin) == \"abab\"\nassert solution(stdin) == \"abab\"\nassert solution(stdin) == \"abab\"\nassert solution(stdin) == \"abab\"\n"
    },
    {
        "number": 1989,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 1990,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '-1'\n"
    },
    {
        "number": 1991,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n\n-----Constraints-----\n\n1 <= t <= 10^5\n\n1 <= n <= 10^5\n\n1 <= a_{1},a_{2},...,a_{n} <= 10^5\n\n$n$ is a power of 2.\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[3, 2, 4, 5, 1, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2, 3, 4, 5, 6, 7]$\n\n$[1, 2,"
    },
    {
        "number": 1992,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"7\""
    },
    {
        "number": 1993,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3.3\"\nassert solution(stdin) == \"46..3\"\nassert solution(stdin) == \"5.4.3\"\nassert solution(stdin) == \"5.4.3\"\nassert solution(stdin) == \"5.4.3\"\n"
    },
    {
        "number": 1994,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\nassert solution(stdin) == 3\n"
    },
    {
        "number": 1995,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"baabcaa\"\n\n\"\"\""
    },
    {
        "number": 1996,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 1997,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\nassert solution(stdin) == \"3 3\"\n"
    },
    {
        "number": 1998,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 1999,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2000,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2001,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2002,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"42\"\n"
    },
    {
        "number": 2003,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 2004,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2005,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '6.50000000'\n\n-----Constraints-----\n\n1 <= n <= 100 000\n1 <= n_1, n_2 <= 100 000\n1 <= a_i <= 100 000\n\n-----Time Limit Exceeded-----\n\nTime Limit: 1 second\n\nSample Input\n\n2 1 1\n1 5\n\nSample Output\n\n6.00000000\n\nExplanation\n\nThe answer is 6.50000000.\n\n\"\"\""
    },
    {
        "number": 2006,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 2007,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n1 <= n <= 300, m <= n^2\n1 <= stdin.length <= 300\nstdin contains only lowercase English letters.\nstdin contains only lowercase English letters.\n\n\"\"\""
    },
    {
        "number": 2008,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"1423\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"1423\"\nassert solution(stdin) == \"12\"\n"
    },
    {
        "number": 2009,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2010,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"30\"\n"
    },
    {
        "number": 2011,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"3 2\") == \"2 3 5\"\nassert solution(\"3 3\") == \"1 2 5\"\nassert solution(\"3 4\") == \"1 3 5\"\nassert solution(\"3 4\") == \"1 3 5\"\nassert solution(\"3 4\") == \"1 3 5\"\n"
    },
    {
        "number": 2012,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"kkrrrq\"\nassert solution(stdin) == \"abcd\"\nassert solution(stdin) == \"kkrrrq\"\nassert solution(stdin) == \"abcd\"\nassert solution(stdin) == \"kkrrrq\"\n"
    },
    {
        "number": 2013,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2014,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= n <= 1000\n1 <= k <= 5\n\nTime Limit: 1 second\n\nSample Tests:\nTest 1:\nInput\n4 3\n1 4 2 3\n4 1 2 3\n1 2 4 3\n\nOutput\n3\n\nExplanation\nThe longest common subsequence is [1, 2, 3].\n\nTest 2:\nInput\n4 3\n1 4 2 3\n4 1 2 3\n1 2 4 3\n\nOutput\n3\n\nExplanation\nThe longest common subsequence is [1, 2, 3].\n\nTest 3:\nInput\n4 3\n1 4 2 3\n4 1 2 3\n1 2 4 3\n\nOutput\n3\n\nExplanation\nThe longest common subsequence is [1, 2, 3].\n\nTest 4:\nInput\n4 3\n1 4 2 3\n4 1 2 3\n1 2 4 3\n\nOutput\n3\n\nExplanation\nThe longest common subsequence is [1, 2, 3].\n\nTest 5:\nInput\n4 3\n1 4 2 3\n4 1 2 3\n1 2 4 3\n\nOutput\n3\n\nExplanation\nThe longest common subsequence is [1, 2, 3].\n\n-----\n'''"
    },
    {
        "number": 2015,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\n\"\"\""
    },
    {
        "number": 2016,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 2017,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 15\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_{i} <= b_{i} <= 10^9\n\n-----Time Limit: 1 second\n\n-----Space Limit: 1 GB\n'''\n\nimport sys"
    },
    {
        "number": 2018,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2019,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"DA\"\nassert solution(stdin) == \"NET\"\nassert solution(stdin) == \"NET\"\nassert solution(stdin) == \"NET\"\nassert solution(stdin) == \"NET\"\n"
    },
    {
        "number": 2020,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2021,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"27\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"30\"\nassert solution(stdin) == \"27\"\n"
    },
    {
        "number": 2022,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2023,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2024,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 20\n\"\"\""
    },
    {
        "number": 2025,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2026,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2027,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 4 6 1 3\"\nassert solution(stdin) == \"1 -3 4 11 6\"\nassert solution(stdin) == \"1 -3 4 11 6\"\nassert solution(stdin) == \"1 -3 4 11 6\"\nassert solution(stdin) == \"1 -3 4 11 6\"\n"
    },
    {
        "number": 2028,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2029,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2.000000000000000000'\nassert solution(stdin) == '3.333333333333333333'\nassert solution(stdin) == '5.00000000000000000'\nassert solution(stdin) == '5.00000000000000000'\nassert solution(stdin) == '5.00000000000000000'\n"
    },
    {
        "number": 2030,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.5 0.5\"\nassert solution(stdin) == \"0.25 0.25\"\nassert solution(stdin) == \"0.125 0.125\"\nassert solution(stdin) == \"0.125 0.125\"\nassert solution(stdin) == \"0.125 0.125\"\n"
    },
    {
        "number": 2031,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2032,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '22'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'\n\nassert solution(stdin) == '-1'"
    },
    {
        "number": 2033,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 2034,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2035,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2036,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 4\"\nassert solution(stdin) == \"2 5\"\n"
    },
    {
        "number": 2037,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"00100000001\"\nassert solution(stdin) == \"00001000\"\nassert solution(stdin) == \"00001000\"\nassert solution(stdin) == \"00001000\"\nassert solution(stdin) == \"00001000\"\n"
    },
    {
        "number": 2038,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 4 2\"\nassert solution(stdin) == \"1 4 2 3\"\nassert solution(stdin) == \"1 4 2 3 4\"\nassert solution(stdin) == \"1 4 2 3 4 5\"\n"
    },
    {
        "number": 2039,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 2040,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3 4 5 6 7 8 9 10\"\nassert solution(stdin) == \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245 245"
    },
    {
        "number": 2041,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2042,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 2043,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 2044,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 1 1\"\nassert solution(stdin) == \"0 0 1 1\"\nassert solution(stdin) == \"0 0 1 1\"\nassert solution(stdin) == \"0 0 1 1\"\nassert solution(stdin) == \"0 0 1 1\"\n"
    },
    {
        "number": 2045,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Iwantorderpizza\"\nassert solution(stdin) == \"samplepleaseeazeout\"\nassert solution(stdin) == \"Iwantorderpizza\"\nassert solution(stdin) == \"samplepleaseeazeout\"\nassert solution(stdin) == \"Iwantorderpizza\"\n"
    },
    {
        "number": 2046,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"5 4\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"3 1\"\n"
    },
    {
        "number": 2047,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2048,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 2049,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 2050,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 22\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= 10^5\n\n\"\"\""
    },
    {
        "number": 2051,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2052,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 2053,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2054,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n\n0 <= a, b <= 10^9\n\n-----Time Limit-----\n\nO(t)\n\n\n-----Submissions-----\n\nApproach:\n\n1. Use a stack to store the number of emeralds that can be earned.\n2. For each test case, use a stack to store the number of emeralds that can be earned.\n3. For each test case, use a stack to store the number of emeralds that can be earned.\n4. For each test case, use a stack to store the number of emeralds that can be earned.\n5. For each test case, use a stack to store the number of emeralds that can be earned.\n6. For each test case, use a stack to store the number of emeralds that can be earned.\n7. For each test case, use a stack to store the number of emeralds that can be earned.\n8. For each test case, use a stack to store the number of emeralds that can be earned.\n9. For each test case, use a stack to store the number of emeralds that can be earned.\n10. For each test case, use a stack to store the number of emeralds that can be earned.\n11. For each test case, use a stack to store the number of emeralds that can be earned.\n12. For each test case, use a stack to store the number of emeralds that can be earned.\n13. For each test case, use a stack to store the number of emeralds that can be earned.\n14. For each test case, use a stack to store the number of emeralds that can be earned.\n15. For each test case, use a stack to store the number of emeralds that can be earned.\n16. For each test case, use a stack to store the number of emeralds that can be earned.\n17. For each test case, use a stack to store the number of emeralds that can be earned.\n18. For each test case, use a stack to store the number of emeralds that can be earned.\n19. For each test case, use a stack to store the number of emeralds that can be earned.\n20. For each test case, use a stack to store the number of emeralds that can be earned.\n21. For each test case, use a stack to store the number of emeralds that can be earned.\n22. For each test case, use a stack to store the number of emeralds that can be earned.\n23. For each test case, use a stack to store the number of emeralds that can be earned.\n24. For each test case, use a stack to store the number of emeralds that can be earned.\n25. For each test case, use a stack to store the number of emeralds that can be earned.\n26. For each test case, use a stack to store the number of emeralds that can be earned.\n27. For each test case, use a stack to store the number of emeralds that can be earned.\n28. For each test case, use a stack to store the number of emeralds that can be earned.\n29. For each test case, use a stack to store the number of emeralds that can be earned.\n30. For each test case, use a stack to store the number of emeralds that can be earned.\n31. For each test case, use a stack to store the number of emeralds that can be earned.\n32. For each test case, use a stack to store the number of emeralds that can be earned.\n33. For each test case, use a stack to store the number of emeralds that can be earned.\n34. For each test case, use a stack to store the number of emeralds that can be earned.\n35. For each test case, use a stack to store the number of emeralds that can be earned.\n36. For each test case, use a stack to store the number of emeralds that can be earned.\n37. For each test case, use a stack to store the number of emeralds that can be earned.\n38. For each test case, use a stack to store the number of emeralds that can be earned.\n39. For each test case, use a stack to store the number of emeralds that can be earned.\n40. For each test case, use a stack to store the number of emeralds that can be earned.\n41. For each test case, use a stack to store the number of emeralds that can be earned.\n42. For each test case, use a stack to store the number of emeralds that can be earned.\n43. For each test case, use a stack to store the number of emeralds that can be earned.\n44. For each test case, use a stack to store the number of emeralds that can be earned.\n45. For each test case, use a stack to store the number of emeralds that can be earned.\n46. For each test case, use a stack to store the number of emeralds that can be earned.\n47. For each test case, use a stack to store the number of emeralds that can be earned.\n48. For each test case, use a stack to store the number of emeralds that can be earned.\n49. For each test case, use a stack to store the number of emeralds that can be earned.\n50. For each test case, use a stack to store the number of emeralds that can be earned.\n51. For each test case, use a stack to store the number of emeralds that can be earned.\n52. For each test case, use a stack to store the number of emeralds that can be earned.\n53. For each test case, use a stack to store the number of emeralds that can be earned.\n54. For each test case, use a stack to store the number of emeralds that can be earned.\n55. For each test case, use a stack to store the number of emeralds that can be earned.\n56. For each test case, use a stack to store the number of emeralds that can be earned.\n57. For each test case, use a stack to store the number of emeralds that can be earned.\n58. For each test case, use a stack to store the number of emeralds that can be earned.\n59. For each test case, use a stack to store the number of emeralds that can be earned.\n60. For each test case, use a stack to store the number of emeralds that can be earned.\n61. For each test case, use a stack to store the number of emeralds that can be earned.\n62. For each test case, use a stack to store the number of emeralds that can be earned.\n63. For each test case, use a stack to store the number of emeralds that can be earned.\n64. For each test case, use a stack to store the number of emeralds that can be earned.\n65. For each test case, use a stack to store the number of emeralds that can be earned.\n66. For each test case, use a stack to store the number of emeralds that can be earned.\n67. For each test case, use a stack to store the number of emeralds that can be earned.\n68. For each test case, use a stack to store the number of emeralds that can be earned.\n69. For each test case, use a stack to store the number of emeralds that can be earned.\n70. For each test case,"
    },
    {
        "number": 2055,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2056,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '51'\nassert solution(stdin) == '1099509530625'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1_2'\nassert solution(stdin) == '1_2_1'\n"
    },
    {
        "number": 2057,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 3"
    },
    {
        "number": 2058,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n1 <= a <= 200 000\n1 <= b <= 200 000\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Bug Fixes-----\n1. The first line of the input contains a single integer, |a|.\n2. The second line contains a single string, |b|.\n3. The third line contains a single string, |a|.\n4. The fourth line contains a single string, |b|.\n\n\"\"\""
    },
    {
        "number": 2059,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2060,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 \u2264 n \u2264 100\n1 \u2264 x_i \u2264 100\n\n-----Time Limit: 1 min\n\n-----Memory Limit: 128 MB\n\n-----Input Format\n\nThe first line contains an integer n (1 \u2264 n \u2264 100) \u2014 the number of testcases.\n\nThe i-th of the following n lines contains one integer x_i (1 \u2264 x_i \u2264 100) \u2014 the number of chicken chunks Ivan wants to eat.\n\n-----Output Format\n\nPrint n lines, in i-th line output YES if Ivan can buy exactly x_i chunks. Otherwise, print NO.\n\nSample Input\n\n2\n6\n5\n\nSample Output\n\nYES\nNO\n\nExplanation\n\nIvan can buy two small portions.\n\nIvan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.\n\n\"\"\""
    },
    {
        "number": 2061,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2062,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"18\"\nassert solution(stdin) == \"27\"\n"
    },
    {
        "number": 2063,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 2064,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1\nassert solution(3) == 7\nassert solution(4) == 7\nassert solution(5) == 7\nassert solution(6) == 7\n"
    },
    {
        "number": 2065,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2066,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No answer\"\n\nassert solution(stdin) == \"cadb\"\n\nassert solution(stdin) == \"cadba\"\n\nassert solution(stdin) == \"cadb\"\n\nassert solution(stdin) == \"cadba\""
    },
    {
        "number": 2067,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2068,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2069,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= p_i, p_{i} <= n\n1 <= a_i, b_i <= n\n\nTime Limit: 1 sec\nSpace Limit: 1M\n\nclass Interval:\n    def __init__(self, start, end):\n        self.start = start\n        self.end = end\n    def __str__(self):\n        return str(self.start) + \"-\" + str(self.end)"
    },
    {
        "number": 2070,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2071,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '543210'\n\nassert solution(stdin) == '543210'\n\nassert solution(stdin) == '543210'\n\nassert solution(stdin) == '543210'\n\nassert solution(stdin) == '543210'"
    },
    {
        "number": 2072,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.400000000000\"\nassert solution(stdin) == \"2.000000000000\"\nassert solution(stdin) == \"2.000000000000\"\nassert solution(stdin) == \"2.000000000000\"\nassert solution(stdin) == \"2.000000000000\"\n"
    },
    {
        "number": 2073,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\n[Constraints]\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[Time Limit]\n1 second\n\n[Warnings]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips]\n\n[Tips"
    },
    {
        "number": 2074,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2075,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 2076,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 2077,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 5 1 3 4\"\nassert solution(stdin) == \"2 1 1 1 1\"\nassert solution(stdin) == \"2 1 1 1 1\"\nassert solution(stdin) == \"2 1 1 1 1\"\n"
    },
    {
        "number": 2078,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n\"\"\""
    },
    {
        "number": 2079,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1 1 2\"\nassert solution(stdin) == \"6 6 2 3 3 1 4 4 1 2 5 5\"\nassert solution(stdin) == \"6 6 2 3 3 1 4 4 1 2 5 5\"\nassert solution(stdin) == \"6 6 2 3 3 1 4 4 1 2 5 5\"\nassert solution(stdin) == \"6 6 2 3 3 1 4 4 1 2 5 5\"\n"
    },
    {
        "number": 2080,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 \u2264 q \u2264 100 000\n\n1 \u2264 n_{i} \u2264 2\u00b710^9\n\n1 \u2264 i \u2264 q\n\n1 \u2264 n_{i} \u2264 2\u00b710^9\n\n1 \u2264 i < q\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 i < q\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710^9\n\n1 \u2264 n_{i} < 2\u00b710"
    },
    {
        "number": 2081,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\n\n\"\"\""
    },
    {
        "number": 2082,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '16.666667'\nassert solution(stdin) == '13.333333'\nassert solution(stdin) == '18.571429'\n"
    },
    {
        "number": 2083,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3.000000 1.771200 0.409600\"\nassert solution(stdin) == \"3.000000 2.016960 0.327680\"\nassert solution(stdin) == \"7.250000 5.613568 0.225715\"\nassert solution(stdin) == \"7.250000 5.090854 0.297813\"\nassert solution(stdin) == \"7.250000 4.672684 0.355492\"\n"
    },
    {
        "number": 2084,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"100\"\n"
    },
    {
        "number": 2085,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 2086,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\""
    },
    {
        "number": 2087,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"18\"\n"
    },
    {
        "number": 2088,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 2 3\"\nassert solution(stdin) == \"1 1 1 2 3\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 1 1 1\"\n"
    },
    {
        "number": 2089,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 2090,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10000\"\n"
    },
    {
        "number": 2091,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"a\"\nassert solution(stdin) == \"abcdfdcba\"\nassert solution(stdin) == \"abbaxyzyx\"\nassert solution(stdin) == \"codeforces\"\nassert solution(stdin) == \"acbba\"\n"
    },
    {
        "number": 2092,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= m, n, k, t <= 10^5\n1 <= a_i <= 2 \\cdot 10^5\n\n\"\"\""
    },
    {
        "number": 2093,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 2094,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000\"\n\n-----Constraints-----\n\n1 <= k <= 10^9\n1 <= n <= 10^5\n1 <= h_1, h_2, \\dots, h_n <= k\n\n\"\"\""
    },
    {
        "number": 2095,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 3 3 3\"\nassert solution(stdin) == \"0 3 3 3\"\nassert solution(stdin) == \"0 3 3 3\"\nassert solution(stdin) == \"0 3 3 3\"\nassert solution(stdin) == \"0 3 3 3\"\n"
    },
    {
        "number": 2096,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1 2 2 1\"\nassert solution(stdin) == \"1 2 1\"\n"
    },
    {
        "number": 2097,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2098,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 2099,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No solution\"\n"
    },
    {
        "number": 2100,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nInput\n5\n0 1\n1 0\n0 1\n1 1\n0 1\n\nOutput\n3\n"
    },
    {
        "number": 2101,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"372\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"372\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"372\"\n"
    },
    {
        "number": 2102,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\nassert solution(stdin) == '7'\n"
    },
    {
        "number": 2103,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 2\"\nassert solution(stdin) == \"0 1 2\"\nassert solution(stdin) == \"0 1 2\"\nassert solution(stdin) == \"0 1 2\"\nassert solution(stdin) == \"0 1 2\"\n"
    },
    {
        "number": 2104,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2105,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"sinyu\"\nassert solution(stdin) == \"imsin\"\nassert solution(stdin) == \"gyehae\"\nassert solution(stdin) == \"gyeongja\"\nassert solution(stdin) == \"sinmi\"\n"
    },
    {
        "number": 2106,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\"\n\nassert solution(stdin) == \"14\""
    },
    {
        "number": 2107,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 2108,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2109,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 -1 1 0\"\nassert solution(stdin) == \"1 -1 2 0\"\nassert solution(stdin) == \"1 -1 3 0\"\nassert solution(stdin) == \"1 -1 4 0\"\nassert solution(stdin) == \"1 -1 5 0\"\n"
    },
    {
        "number": 2110,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 24 60 15\") == \"0 0\"\nassert solution(\"2 24 60 16\") == \"1 0\"\nassert solution(\"2 24 60 16\") == \"2 0\"\nassert solution(\"2 24 60 16\") == \"1 0\"\nassert solution(\"2 24 60 16\") == \"2 0\"\n"
    },
    {
        "number": 2111,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2112,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 2113,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= u, v <= n\n1 <= u, v < n\n\nTime Limit: 1 second\n\nSample Input\n\n3\n1 2\n1 3\n2 3\n3 4\n4 5\n\nSample Output\n\n2\n\nExplanation\n\nThe graph is a tree.\n\nThe graph is bipartite.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are not connected.\n\nThe graph is bipartite because the edges (1, 2) and (2, 3) are not connected.\n\nThe graph is bipartite because the edges (1, 1) and (2, 2) are not connected.\n\nThe graph is bipartite because the edges (1, 4) and (2, 5) are not connected.\n\nThe graph is bipartite because the edges (1, 3) and (2, 4) are"
    },
    {
        "number": 2114,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 3 6 12\"\nassert solution(stdin) == \"7 5 9 15\"\nassert solution(stdin) == \"14 1 11 10\"\nassert solution(stdin) == \"13 8 16 2\"\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 2115,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000000001\"\nassert solution(stdin) == \"1000000002\"\nassert solution(stdin) == \"1000000003\"\nassert solution(stdin) == \"1000000004\"\nassert solution(stdin) == \"1000000005\"\n"
    },
    {
        "number": 2116,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\n\n\"\"\""
    },
    {
        "number": 2117,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 3\"\n\nassert solution(stdin) == \"1 3 4\"\n\nassert solution(stdin) == \"1 3 4\"\n\nassert solution(stdin) == \"1 3 4\"\n\nassert solution(stdin) == \"1 3 4\""
    },
    {
        "number": 2118,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 2119,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"2\""
    },
    {
        "number": 2120,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 40\n\n-----Constraints-----\n1 <= n <= 1000\n1 <= m <= 1000\n1 <= x_i, y_i <= n\n1 <= v_i <= 10^5\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Example 1-----\nInput\n4 3\n10 20 30 40\n1 4\n1 2\n2 3\n2 4\n3 4\n\nOutput\n40\n\nInput\n4 4\n100 100 100 100\n1 2\n2 3\n2 4\n3 4\n\nOutput\n400\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5 2\n5 7\n6 4\n1 6\n1 3\n4 3\n1 4\n\nOutput\n160\n\nInput\n7 10\n40 10 20 10 20 80 40\n1 5\n4 7\n4 5\n5"
    },
    {
        "number": 2121,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n1 <= k <= stdin.length\n1 <= a_{i} <= 10^5\n\nTime Limit: 1 sec\nMemory Limit: 1GB\n\n-----Bug Fixes-----\n1. The first line of the input contains two positive integers, n and k (2 \u2264 n \u2264 200 000, 1 \u2264 k \u2264 n)\u00a0\u2014 the number of balls in Jacob's tree and the number of balls the teacher will inspect.\n2. The second line contains n integers, a_{i} (1 \u2264 a_{i} \u2264 1 000 000 000), the time Jacob used to build the i-th ball.\n3. The third line contains n integers, a_{i}, v_{i} (1 \u2264 a_{i} \u2264 1 000 000 000), the time Jacob used to build the i-th ball.\n4. The fourth line contains n integers, u_{i}, v_{i} (1 \u2264 u_{i}, v_{i} \u2264 n, u_{i} \u2260 v_{i}) representing a connection in Jacob's tree between balls u_{i} and v_{i}.\n5. The fifth line contains n integers, a_{i}, u_{i}, v_{i} (1 \u2264 a_{i} \u2264 1 000 000 000 000), the time Jacob used to build the i-th ball.\n6. The sixth line contains n integers, a_{i}, u_{i}, v_{i} (1 \u2264 a_{i} \u2264 1 000 000 000 000 000), the time Jacob used to build the i-th ball.\n7. The seventh line contains n integers, a_{i}, u_{i}, v_{i} (1 \u2264 a_{i} \u2264 1 000 000 000 000 000 000), the time Jacob used to build the i-th ball.\n8. The eighth line contains n integers, a_{i}, u_{i}, v_{i} (1 \u2264 a_{i} \u
    },
    {
        "number": 2122,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2123,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n1 <= stdin.length <= 10^5\n\nstdin contains only digits.\n\n\"\"\""
    },
    {
        "number": 2124,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 2125,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n[Image]\u00a0[Image]\u00a0[Image]\n\n\"\"\""
    },
    {
        "number": 2126,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 0 0 0 2 0 0\"\nassert solution(stdin) == \"1 0 0 0 2 0 0\"\nassert solution(stdin) == \"1 0 0 0 2 0 0\"\nassert solution(stdin) == \"1 0 0 0 2 0 0\"\nassert solution(stdin) == \"1 0 0 0 2 0 0\"\n"
    },
    {
        "number": 2127,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2128,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"112\"\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n0 < p_1, p_2,..., p_n < 10^5\n\n-----Time Limit-----\n1 sec\n\n-----Solutions-----\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n615\n616\n617\n618\n619\n620\n621\n622\n623\n624\n625\n626\n627\n628\n629\n630\n631\n632\n633\n634\n635\n636\n637\n638\n639\n640\n641\n642\n643\n644\n645\n646\n647\n648\n649\n650\n651\n652\n653\n654\n655\n656\n657\n658\n659\n660\n661\n662\n663\n664\n665\n666\n667\n668\n669\n670\n671\n672\n673\n674\n675\n676\n677\n678\n679\n680\n681\n682\n683\n684\n685\n686\n687\n688\n689\n690\n691\n692\n693\n"
    },
    {
        "number": 2129,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2130,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 2131,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_i, b_i <= n\na_i!= b_i\na_i, b_i >= 0\n\n-----Time Limit-----\n\nO(n)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSubmissions (easy)\n\nInput\n4\n1 2\n2 3\n3 4\n\nOutput\nYes\n1\n1 4\n\nInput\n6\n1 2\n1 3\n1 4\n1 5\n1 6\n\nOutput\nNo\n\nInput\n5\n1 2\n1 3\n1 4\n1 5\n1 6\n\nOutput\nNo\n\nInput\n5\n1 2\n1 3\n1 4\n1 5\n1 6\n\nOutput\nYes\n4\n1 2\n1 3\n1 4\n1 5\n1 6\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= a_i, b_i <= n\na_i!= b_i\na_i, b_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n\nu_i!= v_i\nu_i, v_i >= 0\n\n1 <= u_i, v_i <= n"
    },
    {
        "number": 2132,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2133,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 2134,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"15\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 2135,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2136,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2137,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n\n-----Constraints-----\n\n1 <= n <= 10^4\n-10^9 <= a,b <= 10^9\n\n1 <= x_i, V_{xi} <= 10^9\n-10^9 <= V_{x i}, V_{y i} <= 10^9\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\leq V_{yi}\n-10^9 <= V_{x i}, V_{y i} \\leq V_{yi}\n\n1 <= x_i, V_{xi} \\le"
    },
    {
        "number": 2138,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2139,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2140,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"fbdcea\"\n"
    },
    {
        "number": 2141,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"WBW\"\nassert solution(stdin) == \"BBB\"\nassert solution(stdin) == \"WBW\"\nassert solution(stdin) == \"BBB\"\nassert solution(stdin) == \"WBW\"\n"
    },
    {
        "number": 2142,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2143,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2144,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2145,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2146,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 2 3 4 5\"\nassert solution(stdin) == \"0 1 2 1 2 3 3\"\nassert solution(stdin) == \"0 1 2 1 2 3 3\"\nassert solution(stdin) == \"0 1 2 1 2 3 3\"\nassert solution(stdin) == \"0 1 2 1 2 3 3\"\n"
    },
    {
        "number": 2147,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2148,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 6.0 9.87298334621 13.3370849613 12.5187346573 13.3370849613\"\n\n\"\"\""
    },
    {
        "number": 2149,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000\"\n\nInput\n3 3\n1 3 1\n\nOutput\n9\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5\n1 1 4 2 2\n\nOutput\n1000\n\nInput\n5 5"
    },
    {
        "number": 2150,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 2 0 3\"\nassert solution(stdin) == \"1000 999999000 0\"\nassert solution(stdin) == \"1000 1000000000 0\"\nassert solution(stdin) == \"1000 1000000000 0\"\nassert solution(stdin) == \"1000 1000000000 0\"\n"
    },
    {
        "number": 2151,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2152,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"8\"\n\nassert solution(stdin) == \"8\""
    },
    {
        "number": 2153,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2154,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\n"
    },
    {
        "number": 2155,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 5\"\nassert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"3 6\"\n"
    },
    {
        "number": 2156,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= s_i <= 9\n1 <= l_i <= r_i <= n\n1 <= q <= 10^5\n\n-----Time Limit-----\n\nO(n^2)\n\nO(n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Tags-----\n\nabstracted\n\n\"\"\""
    },
    {
        "number": 2157,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '33'\n"
    },
    {
        "number": 2158,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5551\n"
    },
    {
        "number": 2159,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7 3 0 0\"\n\nassert solution(stdin) == \"6 0 0\"\n\nassert solution(stdin) == \"6 0 0\"\n\nassert solution(stdin) == \"6 0 0\"\n\nassert solution(stdin) == \"6 0 0\""
    },
    {
        "number": 2160,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"299997\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2161,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ivan 2 456 ivan 1 000 123 123 456\"\nassert solution(stdin) == \"petr 1 12 ivan 1 000 123 123 456\"\nassert solution(stdin) == \"katya 1 612 ivan 1 000 123 123 456\"\nassert solution(stdin) == \"petr 1 12 ivan 1 000 123 123 456\"\nassert solution(stdin) == \"karl 2 612 12 ivan 1 000 123 123 456\"\n"
    },
    {
        "number": 2162,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2163,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 14\n"
    },
    {
        "number": 2164,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"a\"\nassert solution(stdin) == \"abcdfdcba\"\nassert solution(stdin) == \"abbaxyzyx\"\nassert solution(stdin) == \"codeforces\"\nassert solution(stdin) == \"acbba\"\n"
    },
    {
        "number": 2165,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '40.000000000000000'\n"
    },
    {
        "number": 2166,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n1 <= n <= 2000\n-1 <= a_1, a_2,..., a_{n} <= n\na_1, a_2,..., a_{n} are distinct.\n\n-----Time Limit-----\nO(n)\n\n-----Space Limit-----\nO(n)\n\n-----Elements-----\nThe permutation is a list of integers.\n\nConstraints\n1 <= n <= 2000\n-1 <= a_1, a_2,..., a_{n} <= n\na_1, a_2,..., a_{n} are distinct.\n\n\"\"\""
    },
    {
        "number": 2167,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\n\"\"\""
    },
    {
        "number": 2168,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 2169,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 2170,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 2171,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\nassert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\nassert solution(stdin) == \"yes\"\n"
    },
    {
        "number": 2172,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"codeforces contest letter contest\"\nassert solution(stdin) == \"joll wuqrd euzf hbnyiyc rsoqqveh hbnyiyc joll joll euzf joll\"\nassert solution(stdin) == \"codeforces contest round\"\nassert solution(stdin) == \"codeforces contest round\"\nassert solution(stdin) == \"codeforces contest round\"\n"
    },
    {
        "number": 2173,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 1 1\"\nassert solution(stdin) == \"5 1 2\"\nassert solution(stdin) == \"5 1 3\"\nassert solution(stdin) == \"5 1 4\"\nassert solution(stdin) == \"5 1 5\"\n"
    },
    {
        "number": 2174,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 2\nassert solution(3) == 6\nassert solution(4) == 2\nassert solution(5) == 1\nassert solution(6) == 1\n"
    },
    {
        "number": 2175,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2176,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2177,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2178,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 2179,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2180,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 2\nassert solution(3) == 2\nassert solution(4) == 2\nassert solution(5) == 2\nassert solution(6) == 2\n"
    },
    {
        "number": 2181,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2.8819\"\nassert solution(stdin) == \"4.147\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2.1785\"\nassert solution(stdin) == \"0.9134\"\n"
    },
    {
        "number": 2182,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"red\"\nassert solution(stdin) == \"cyan\"\nassert solution(stdin) == \"cyan\"\nassert solution(stdin) == \"red\"\nassert solution(stdin) == \"red\"\n"
    },
    {
        "number": 2183,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '1'\nassert solution(stdin) == '5'\nassert solution(stdin) == '4'\n"
    },
    {
        "number": 2184,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"y\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n\n0 <= stdin[i] <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n\n-----Submissions-----\n\n[ECE 441]\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 2185,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 2186,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2187,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 2188,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 2\"\nassert solution(stdin) == \"3 5 2\"\n"
    },
    {
        "number": 2189,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 2 4 5\"\n"
    },
    {
        "number": 2190,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 2191,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6 3 2 1 0 0 0\"\nassert solution(stdin) == \"6 3 2 1 0 0 0\"\nassert solution(stdin) == \"6 3 2 1 0 0 0\"\nassert solution(stdin) == \"6 3 2 1 0 0 0\"\nassert solution(stdin) == \"6 3 2 1 0 0 0\"\n"
    },
    {
        "number": 2192,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.00000000 3.00000000 5.00000000 7.00000000 9.00000000 0.00000000 1.00000000 2.00000000\"\n"
    },
    {
        "number": 2193,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"011\"\nassert solution(stdin) == \"1101\"\nassert solution(stdin) == \"11111\"\n"
    },
    {
        "number": 2194,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"29\"\nassert solution(stdin) == \"22\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2195,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0'\n\n-----Constraints-----\n\n1 <= t <= 100\n1 <= x, y <= 10^9\n1 <= a, b <= 10^9\n\n\"\"\""
    },
    {
        "number": 2196,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2197,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.62500000'\n\n\"\"\""
    },
    {
        "number": 2198,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2199,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.0000000000\"\nassert solution(stdin) == \"0.5000000000\"\nassert solution(stdin) == \"3.0000000000\"\nassert solution(stdin) == \"1.0000000000\"\nassert solution(stdin) == \"1.5000000000\"\n"
    },
    {
        "number": 2200,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2201,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 22\n"
    },
    {
        "number": 2202,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"16\"\n"
    },
    {
        "number": 2203,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Data not sufficient!\"\n"
    },
    {
        "number": 2204,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"14\"\n"
    },
    {
        "number": 2205,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nInput\n3\n1 2 3\n\nOutput\n3\n"
    },
    {
        "number": 2206,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 2207,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 2208,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= n <= 200 000\n\n1 <= a_i, b_i <= 10^9\n\n1 <= l, r <= n\n\n1 <= a_1, a_2,..., a_{n} <= 10^9\n\n1 <= b_1, b_2,..., b_{n} <= 10^9\n\n-----Time Limit-----\n\nO(n^2)\n\nO(n)\n\nInput\n\n3\n1 2 3 2 1 4\n6 7 1 2 3 2\n\nOutput\n\n2\n\nInput\n\n3\n3 3 3\n1 1 1\n\nOutput\n\n0\n\n\n-----Tags-----\n\nIn this problem, we are given a sequence of integers a_1, a_2,..., a_{n} and b_1, b_2,..., b_{n} and c_1, c_2,..., c_{n}.\n\nThe robot can only move one step in the sequence.\n\nThe robot can only move one step in the sequence if it satisfies the following conditions:\n\na_i + b_i = c_i\na_i + c_i = 0\na_i + c_i = c_i\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i + c_i = 0\na_i +"
    },
    {
        "number": 2209,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 18\n\n\"\"\""
    },
    {
        "number": 2210,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Ayush\"\nassert solution(stdin) == \"Ashish\"\n\n-----Constraints-----\n1 <= t <= 10^4\n1 <= n <= 10^4\n1 <= u, v <= n\n1 <= u, v \\leq n\n1 <= u, v \\leq n\n\n\"\"\""
    },
    {
        "number": 2211,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\nassert solution(stdin) == 2\n\nassert solution(stdin) == 1\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 2212,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 1\nassert solution(3) == 2\nassert solution(5) == 4\nassert solution(6) == 5\nassert solution(7) == 7\n"
    },
    {
        "number": 2213,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2214,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2215,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"01100\"\nassert solution(stdin) == \"110010\"\nassert solution(stdin
    },
    {
        "number": 2216,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 1 1 1 2 1 3\"\nassert solution(stdin) == \"3 2 1 2 2 2 3\"\nassert solution(stdin) == \"3 3 1 3 2 3 3\"\nassert solution(stdin) == \"3 3 1 3 2 3 3\"\nassert solution(stdin) == \"3 3 1 3 2 3 3\"\n"
    },
    {
        "number": 2217,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 2218,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 2219,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= n, k <= 10^18\n\n\"\"\""
    },
    {
        "number": 2220,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1000000000000000000\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= k <= 10^9\n\n-----Time Limit-----\n1 second\n\n-----Memory Limit-----\n256 MB\n\n-----Solutions-----\n\nclass Solution:\n    def maxHappiness(self, n: int, m: int, k: int) -> int:\n        \n        def get_max_happy(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n            return happy\n        \n        def get_max_happy_2(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_3(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n            return happy\n        \n        def get_max_happy_4(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_5(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_6(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_7(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_8(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_9(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_10(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_11(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_12(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_13(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_14(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_15(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_16(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_17(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_18(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy += a[j_j]\n                happy += a[i_j]\n                happy += a[j_j]\n            return happy\n        \n        def get_max_happy_19(i, j, a):\n            happy = 0\n            for i_j in range(i, j):\n                happy += a[i_j]\n                happy"
    },
    {
        "number": 2221,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2222,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2223,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 2224,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nSample 2. The damage range of the Book of Evil equals 3 and its effects have been noticed in settlements 1 and 2. Thus, it can be in settlements 3, 4 or 5.\n\n [Image]\n"
    },
    {
        "number": 2225,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2226,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4361\"\n\nassert solution(stdin) == \"60\"\n\nassert solution(stdin) == \"3250\"\n\nassert solution(stdin) == \"768500592\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^6\n1 <= stdin[i] <= 10^9\n\n-----Time Limit-----\n1 second\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 2227,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"heavymetalisheavymetal\") == \"3\"\nassert solution(\"heavymetalismetal\") == \"2\"\nassert solution(\"trueheavymetalissotruewellitisalsosoheavythatyoucanalmostfeeltheweightofmetalonyou\") == \"3\"\nassert solution(\"\") == \"0\"\nassert solution(\"\") == \"0\"\n"
    },
    {
        "number": 2228,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"4 2\"\nassert solution(stdin) == \"4 2\"\nassert solution(stdin) == \"4 2\"\nassert solution(stdin) == \"4 2\"\n"
    },
    {
        "number": 2229,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3 5 7 11\"\nassert solution(stdin) == \"10 3 7\"\nassert solution(stdin) == \"10 3 7\"\nassert solution(stdin) == \"10 3 7\"\nassert solution(stdin) == \"10 3 7\"\n"
    },
    {
        "number": 2230,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 1\nassert solution(3) == 4\nassert solution(4) == 2\nassert solution(5) == 3\nassert solution(6) == 2\n"
    },
    {
        "number": 2231,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 7 7 2\"\nassert solution(stdin) == \"2 2 1 1\"\nassert solution(stdin) == \"5 5 5 5\"\nassert solution(stdin) == \"5 5 5 5\"\nassert solution(stdin) == \"5 5 5 5\"\n"
    },
    {
        "number": 2232,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 6\"\nassert solution(stdin) == \"9 11\"\nassert solution(stdin) == \"10 6\"\nassert solution(stdin) == \"11 6\"\nassert solution(stdin) == \"3 8\"\n"
    },
    {
        "number": 2233,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n\n\"\"\""
    },
    {
        "number": 2234,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1000000\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2235,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"20\"\n"
    },
    {
        "number": 2236,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2237,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2238,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"*D*\"\nassert solution(stdin) == \"DDD\"\nassert solution(stdin) == \"DDD\"\nassert solution(stdin) == \"DDD\"\nassert solution(stdin) == \"DDD\"\n"
    },
    {
        "number": 2239,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2240,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2241,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\n"
    },
    {
        "number": 2242,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1817181712114) == 3\nassert solution(1817181712114) == 3\nassert solution(1817181712114) == 3\nassert solution(1817181712114) == 3\nassert solution(1817181712114) == 3\n"
    },
    {
        "number": 2243,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2244,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1\"\nassert solution(stdin) == \"2 1 3\"\nassert solution(stdin) == \"2 1 3 4\"\nassert solution(stdin) == \"2 1 3 4 5\"\nassert solution(stdin) == \"2 1 3 4 5 6\"\n"
    },
    {
        "number": 2245,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Alice\"\nassert solution(stdin) == \"Bob\"\nassert solution(stdin) == \"Alice\"\nassert solution(stdin) == \"Bob\"\nassert solution(stdin) == \"Alice\"\n"
    },
    {
        "number": 2246,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2.000000000000000\"\n"
    },
    {
        "number": 2247,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"13\"\n"
    },
    {
        "number": 2248,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2249,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"7\""
    },
    {
        "number": 2250,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 2251,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2252,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 2253,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"FILIPINO\"\nassert solution(stdin) == \"JAPANESE\"\nassert solution(stdin) == \"JAPANESE\"\nassert solution(stdin) == \"KOREAN\"\nassert solution(stdin) == \"FILIPINO\"\n"
    },
    {
        "number": 2254,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2255,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4 3 2 5\"\nassert solution(stdin) == \"1 4 3 2 5\"\nassert solution(stdin) == \"1 4 3 2 5\"\nassert solution(stdin) == \"1 4 3 2 5\"\nassert solution(stdin) == \"1 4 3 2 5\"\n"
    },
    {
        "number": 2256,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= t <= 100\n1 <= n <= 100\n1 <= x <= 100\n1 <= a, b <= n\na, b >= 0\n\n\"\"\""
    },
    {
        "number": 2257,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '33'\n\n-----Constraints-----\n1 <= n <= 2000\n-10^7 <= x_1, y_1, x_2, y_2 <= 10^7\n-10^7 <= x_{i}, y_{i} <= 10^7\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO"
    },
    {
        "number": 2258,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2259,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nInput\n3\n3 1 2\n\nOutput\n2\n\n\n\n-----Note-----\n\nConsider the second example. Bubble sort swaps elements 3 and 1. We add edge (1, 3). Permutation is now [1, 3, 2]. Then bubble sort swaps elements 3 and 2. We add edge (2, 3). Permutation is now sorted. We have a graph with 3 vertices and 2 edges (1, 3) and (2, 3). Its maximal independent set is [1, 2].\n"
    },
    {
        "number": 2260,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"25\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\nassert solution(\"6\") == \"6\"\n"
    },
    {
        "number": 2261,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"++**\"\nassert solution(stdin) == \"+++*\"\nassert solution(stdin) == \"+++*\"\nassert solution(stdin) == \"+++*\"\nassert solution(stdin) == \"+++*\"\n"
    },
    {
        "number": 2262,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == 2\nassert solution(3) == 1\nassert solution(4) == 1\nassert solution(5) == 2\nassert solution(3) == 1\n"
    },
    {
        "number": 2263,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14.0000000000\"\nassert solution(stdin) == \"12.0000000000\"\nassert solution(stdin) == \"8.0000000000\"\nassert solution(stdin) == \"6.0000000000\"\nassert solution(stdin) == \"4.0000000000\"\n"
    },
    {
        "number": 2264,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n <= 10^5\n1 <= l_i,r_i <= 10^9\n\n------Time complexity-----\n\nO(n)\n\nO(n)\n\n------Space complexity-----\n\nO(n)\n\n------Algorithm-----\n\n1. Create a set of segments.\n2. For each segment, find the common point.\n3. If the point is in the set, add it to the set.\n4. If the point is not in the set, remove it from the set.\n5. If the point is not in the set, add it to the set.\n6. If the point is not in the set, remove it from the set.\n7. If the point is not in the set, add it to the set.\n8. If the point is not in the set, remove it from the set.\n9. If the point is not in the set, add it to the set.\n10. If the point is not in the set, remove it from the set.\n11. If the point is not in the set, add it to the set.\n12. If the point is not in the set, remove it from the set.\n13. If the point is not in the set, add it to the set.\n14. If the point is not in the set, remove it from the set.\n15. If the point is not in the set, add it to the set.\n16. If the point is not in the set, remove it from the set.\n17. If the point is not in the set, add it to the set.\n18. If the point is not in the set, remove it from the set.\n19. If the point is not in the set, add it to the set.\n20. If the point is not in the set, remove it from the set.\n21. If the point is not in the set, add it to the set.\n22. If the point is not in the set, remove it from the set.\n23. If the point is not in the set, add it to the set.\n24. If the point is not in the set, remove it from the set.\n25. If the point is not in the set, add it to the set.\n26. If the point is not in the set, remove it from the set.\n27. If the point is not in the set, add it to the set.\n28. If the point is not in the set, remove it from the set.\n29. If the point is not in the set, add it to the set.\n30. If the point is not in the set, remove it from the set.\n31. If the point is not in the set, add it to the set.\n32. If the point is not in the set, remove it from the set.\n33. If the point is not in the set, add it to the set.\n34. If the point is not in the set, remove it from the set.\n35. If the point is not in the set, add it to the set.\n36. If the point is not in the set, remove it from the set.\n37. If the point is not in the set, add it to the set.\n38. If the point is not in the set, remove it from the set.\n39. If the point is not in the set, add it to the set.\n40. If the point is not in the set, remove it from the set.\n41. If the point is not in the set, add it to the set.\n42. If the point is not in the set, remove it from the set.\n43. If the point is not in the set, add it to the set.\n44. If the point is not in the set, remove it from the set.\n45. If the point is not in the set, add it to the set.\n46. If the point is not in the set, remove it from the set.\n47. If the point is not in the set, add it to the set.\n48. If the point is not in the set, remove it from the set.\n49. If the point is not in the set, add it to the set.\n50. If the point is not in the set, remove it from the set.\n51. If the point is not in the set, add it to the set.\n52. If the point is not in the set, remove it from the set.\n53. If the point is not in the set, add it to the set.\n54. If the point is not in the set, remove it from the set.\n55. If the point is not in the set, add it to the set.\n56. If the point is not in the set, remove it from the set.\n57. If the point is not in the set, add it to the set.\n58. If the point is not in the set, remove it from the set.\n59. If the point is not in the set, add it to the set.\n60. If the point is not in the set, remove it from the set.\n61. If the point is not in the set, add it to the set.\n62. If the point is not in the set, remove it from the set.\n63. If the point is not in the set, add it to the set.\n64. If the point is not in the set, remove it from the set.\n65. If the point is not in the set, add it to the set.\n66. If the point is not in the set, remove it from the set.\n67. If the point is not in the set, add it to the set.\n68. If the point is not in the set, remove it from the set.\n69. If the point is not in the set, add it to the set.\n70. If the point is not in the set, remove it from the set.\n71. If the point is not in the set, add it to the set.\n72. If the point is not in the set, remove it from the set.\n73. If the point is not in"
    },
    {
        "number": 2265,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2266,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2267,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abacabaabbabcder\"\nassert solution(stdin) == \"abacabaabbabcder\"\nassert solution(stdin) == \"abacabaabbabcder\"\nassert solution(stdin) == \"abacabaabbabcder\"\nassert solution(stdin) == \"abacabaabbabcder\"\n"
    },
    {
        "number": 2268,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"molice\"\nassert solution(stdin) == \"cdcbcdcacdc\"\nassert solution(stdin) == \"abacabadaba\"\nassert solution(stdin) == \"babcbabdbab\"\nassert solution(stdin) == \"cacbcacdcac\"\n"
    },
    {
        "number": 2269,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\nassert solution(stdin) == 0\nassert solution(stdin) == 4\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 2270,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2271,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^5\n\n\"\"\""
    },
    {
        "number": 2272,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2273,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 3 3\"\nassert solution(stdin) == \"1 2 3 3\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2274,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"9\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 2275,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2276,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '23'\n\n\"\"\""
    },
    {
        "number": 2277,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"odd\"\nassert solution(stdin) == \"even\"\nassert solution(stdin) == \"odd\"\nassert solution(stdin) == \"even\"\nassert solution(stdin) == \"odd\"\n"
    },
    {
        "number": 2278,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 5 6 13 26\"\nassert solution(stdin) == \"4 5 6 13 26\"\nassert solution(stdin) == \"4 5 6 13 26\"\nassert solution(stdin) == \"4 5 6 13 26\"\nassert solution(stdin) == \"4 5 6 13 26\"\n"
    },
    {
        "number": 2279,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 1 4 3\"\nassert solution(stdin) == \"6 5 4 3 2 1\"\nassert solution(stdin) == \"6 5 4 3 2 1\"\nassert solution(stdin) == \"6 5 4 3 2 1\"\nassert solution(stdin) == \"6 5 4 3 2 1\"\n"
    },
    {
        "number": 2280,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2281,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 2 2\"\nassert solution(stdin) == \"1 1 2 2\"\nassert solution(stdin) == \"1 1 2 2\"\nassert solution(stdin) == \"1 1 2 2\"\nassert solution(stdin) == \"1 1 2 2\"\n"
    },
    {
        "number": 2282,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n\"\"\""
    },
    {
        "number": 2283,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^4\n1 <= stdin[i] <= 10^9\n1 <= a_i <= 10^9\n1 <= w_i <= 10^9\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n7\n\"\"\""
    },
    {
        "number": 2284,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"32\"\n\n-----Constraints-----\n\n1 <= n <= 10^5\n1 <= k <= n\n1 <= a_1, a_2,..., a_{n} <= 10^9\n1 <= b_1, b_2,..., b_{n} <= 10^9\n\n\"\"\""
    },
    {
        "number": 2285,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"a56f:00d3:0000:0124:0001:f19a:1000:0000\"\nassert solution(stdin) == \"a56f:00d3:0000:0124:0001:0000:0000:0000\"\nassert solution(stdin) == \"a56f:00d3:0000:0124:0001:0000:0000:0000\"\nassert solution(stdin) == \"a56f:00d3:0000:0124:0001:0000:0000:0000\"\nassert solution(stdin) == \"a56f:00d3:0000:0124:0001:0000:0000:0000\"\n"
    },
    {
        "number": 2286,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 0 6\"\nassert solution(stdin) == \"2 2 6 2 2 6 2 2\"\nassert solution(stdin) == \"2 2 6 2 2 6 2 2\"\nassert solution(stdin) == \"2 2 6 2 2 6 2 2\"\nassert solution(stdin) == \"2 2 6 2 2 6 2 2\"\n"
    },
    {
        "number": 2287,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n\n1 <= t <= 10^5\n\n0 <= s.length <= 10^5\ns[i] is either 0 or 1.\n\n\"\"\""
    },
    {
        "number": 2288,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\""
    },
    {
        "number": 2289,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 2290,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 2291,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n0 < stdin.length <= 10^5\n\n0 < a_i < 2^{30}-1\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1MB\n\n-----Alternatives-----\n\n1. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n2. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n3. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n4. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n5. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n\n-----Bug Fixes-----\n1. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n2. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n3. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n4. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n5. Use a bitwise XOR operation to find the minimum possible value of $\\underset{1 \\leq i \\leq n}{\\max} (a_i \\oplus X)$.\n\n-----Bug Reports-----\n[1] https://github.com/lucifer/python/issues/14\n[2] https://github.com/lucifer/python/issues/15\n[3] https://github.com/lucifer/python/issues/16\n[4] https://github.com/lucifer/python/issues/17\n[5] https://github.com/lucifer/python/issues/18\n[6] https://github.com/lucifer/python/issues/19\n[7] https://github.com/lucifer/python/issues/20\n[8] https://github.com/lucifer/python/issues/21\n[9] https://github.com/lucifer/python/issues/22\n[10] https://github.com/lucifer/python/issues/23\n[11] https://github.com/lucifer/python/issues/24\n[12] https://github.com/lucifer/python/issues/25\n[13] https://github.com/lucifer/python/issues/26\n[14] https://github.com/lucifer/python/issues/27\n[15] https://github.com/lucifer/python/issues/28\n[16] https://github.com/lucifer/python/issues/29\n[17] https://github.com/lucifer/python/issues/30\n[18] https://github.com/lucifer/python/issues/31\n[19] https://github.com/lucifer/python/issues/32\n[20] https://github.com/lucifer/python/issues/33\n[21] https://github.com/lucifer/python/issues/34\n[22] https://github.com/lucifer/python/issues/35\n[23] https://github.com/lucifer/python/issues/36\n[24] https://github.com/lucifer/python/issues/37\n[25] https://github.com/lucifer/python/issues/38\n[26] https://github.com/lucifer/python/issues/39\n[27] https://github.com/lucifer/python/issues/40\n[28] https://github.com/lucifer/python/issues/41\n[29] https://github.com/lucifer/python/issues/42\n[30] https://github.com/lucifer/python/issues/43\n[31] https://github.com/lucifer/python/issues/44\n[32] https://github.com/lucifer/python/issues/45\n[33] https://github.com/lucifer/python/issues/46\n[34] https://github.com/lucifer/python/issues/47\n[35] https://github.com/lucifer/python/issues/48\n[36] https://github.com/lucifer/python/issues/49\n[37] https://github.com/lucifer/python/issues/50\n[38] https://github.com/lucifer/python/issues/51\n[39] https://github.com/lucifer/python/issues/52\n[40] https://github.com/lucifer/python/issues/53\n[41] https://github.com/lucifer/python/issues/54\n[42] https://github.com/lucifer/python/issues/55\n[43] https://github.com/lucifer/python/issues/56\n[44] https://github.com/lucifer/python/issues/57\n[45] https://github.com/lucifer/python/issues/58\n[46] https://github.com/lucifer/python/issues/59\n[47] https://github.com/lucifer/python/issues/60\n[48] https://github.com/lucifer/python/issues/61\n[49] https://github.com/lucifer/python/issues/62\n[50] https://github.com/lucifer/python/issues/63\n[51] https://github.com/lucifer/python/issues/64\n[52] https://github.com/lucifer/python/issues/65\n[53] https://github.com/lucifer/python/issues/66\n[54] https://github.com/lucifer/python/issues/67\n[55] https://github.com/lucifer/python/issues/68\n[56] https://github.com/lucifer/python/issues/69\n[57] https://github.com/lucifer/python/issues/70\n[58] https://github.com/lucifer/python/issues/71\n[59] https://github.com/lucifer/python/issues/72\n[60] https://github.com/lucifer/python/issues/73\n[61] https://github.com/lucifer/python/issues/74\n[62] https://github.com/lucifer/python"
    },
    {
        "number": 2292,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 2293,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"possible\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 2294,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2295,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.500000'\nassert solution(stdin) == '1.000000'\nassert solution(stdin) == '1.000000'\nassert solution(stdin) == '1.000000'\nassert solution(stdin) == '1.000000'\n"
    },
    {
        "number": 2296,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.0000000000 -1.0000000000\"\nassert solution(stdin) == \"1.0000000000 -1.0000000000\"\nassert solution(stdin) == \"1.0000000000 -1.0000000000\"\nassert solution(stdin) == \"1.0000000000 -1.0000000000\"\nassert solution(stdin) == \"1.0000000000 -1.0000000000\"\n"
    },
    {
        "number": 2297,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"-2\"\nassert solution(stdin) == \"-2\"\nassert solution(stdin) == \"-2\"\nassert solution(stdin) == \"-2\"\nassert solution(stdin) == \"-2\"\n"
    },
    {
        "number": 2298,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0 0 2 4\"\nassert solution(stdin) == \"0 91\"\nassert solution(stdin) == \"0 91\"\nassert solution(stdin) == \"0 91\"\nassert solution(stdin) == \"0 91\"\n"
    },
    {
        "number": 2299,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 2300,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\nassert solution(stdin) == \"32\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"50\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2301,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 1 4 2 4 2 5\"\nassert solution(stdin) == \"3 1 4 2 4 2 5\"\nassert solution(stdin) == \"3 1 4 2 4 2 5\"\nassert solution(stdin) == \"3 1 4 2 4 2 5\"\n"
    },
    {
        "number": 2302,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2303,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"blue is sky the\"\nassert solution(stdin) == \"world hello\"\nassert solution(stdin) == \"example good a\"\nassert solution(stdin) == \"example good a\"\nassert solution(stdin) == \"Alice Loves Bob\"\n"
    },
    {
        "number": 2304,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 2305,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\nassert solution(input) == \"4\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 2306,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2100\n"
    },
    {
        "number": 2307,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"NOT READY\"\nassert solution(\"2\") == \"READY FOR BATTLE\"\nassert solution(\"3\") == \"NOT READY\"\nassert solution(\"4\") == \"READY FOR BATTLE\"\nassert solution(\"5\") == \"NOT READY\"\n"
    },
    {
        "number": 2308,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2309,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2310,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Y\"\nassert solution(stdin) == \"Y\"\nassert solution(stdin) == \"Y\"\nassert solution(stdin) == \"Y\"\nassert solution(stdin) == \"Y\"\n"
    },
    {
        "number": 2311,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= m <= 10^5\n1 <= k <= n\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Tags-----\ndebug\n\n-----Contributors-----\nMichael Reilly\n\"\"\"\n\nimport math\nimport sys"
    },
    {
        "number": 2312,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= n <= 10^4\n1 <= b_1,b_2,\\ldots,b_n <= 10^9\n\n\"\"\""
    },
    {
        "number": 2313,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '499122177 0'\nassert solution(stdin) == '499122193 249561095 249561092 873463811 499122178 124780545 623902721 0'\nassert solution(stdin) == '499122193 249561095 249561092 873463811 499122178 124780545 623902721 0'\nassert solution(stdin) == '499122193 249561095 249561092 873463811 499122178 124780545 623902721 0'\nassert solution(stdin) == '499122193 249561095 249561092 873463811 499122178 124780545 623902721 0'\n"
    },
    {
        "number": 2314,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"64\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2315,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 7\"\nassert solution(stdin) == \"1 7\"\nassert solution(stdin) == \"1 7\"\nassert solution(stdin) == \"1 7\"\nassert solution(stdin) == \"1 7\"\n"
    },
    {
        "number": 2316,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= t <= 10^5\n0 <= x, n, m <= 10^5\n\n\"\"\""
    },
    {
        "number": 2317,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\nassert solution(stdin) == 2\n"
    },
    {
        "number": 2318,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2319,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 2320,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2321,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 2322,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution\u043c"
    },
    {
        "number": 2323,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 10 18\"\nassert solution(stdin) == \"2 15\"\nassert solution(stdin) == \"2 15\"\nassert solution(stdin) == \"2 15\"\nassert solution(stdin) == \"2 15\"\n"
    },
    {
        "number": 2324,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0"
    },
    {
        "number": 2325,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"36\"\n"
    },
    {
        "number": 2326,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2327,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3999999999987\"\n"
    },
    {
        "number": 2328,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"500000000\"\n\n\"\"\"\n\nimport sys\n\nT = int(sys.stdin.readline().rstrip())\n\nfor _ in range(T):\n    n, k = map(int, sys.stdin.readline().rstrip().split())\n    a = list(map(int, sys.stdin.readline().rstrip().split()))\n    a.sort()\n    print(a[k-1])\n"
    },
    {
        "number": 2329,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2330,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 2331,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Finite\"\nassert solution(stdin) == \"Finite\"\nassert solution(stdin) == \"Finite\"\nassert solution(stdin) == \"Finite\"\nassert solution(stdin) == \"Finite\"\n"
    },
    {
        "number": 2332,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"107\"\nassert solution(stdin) == \"116\"\nassert solution(stdin) == \"116\"\nassert solution(stdin) == \"116\"\nassert solution(stdin) == \"116\"\n"
    },
    {
        "number": 2333,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 7\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i <= n\n\nTime Limit: 1 sec\n\n=======Solution======="
    },
    {
        "number": 2334,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= N <= 200\n1 <= a_i <= 10^9\n1 <= x <= 10^9\n1 <= f <= x\n\n-----Time Limit: 1 minute\n-----Memory Limit: 128 MB\n\nhttps://www.codewars.com/kata/5b9f9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e"
    },
    {
        "number": 2335,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"23\"\n\n-----Constraints-----\n\n1 <= n <= 300 000\n1 <= p_{i} <= 10^9\n1 <= c_{i} <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n4\n1 G\n5 R\n10 B\n15 G\n\nSample Output\n\n23\n\nExplanation\n\nRoy and Biv have a set of n points on the infinite number line.\n\nRoy and Biv would like to connect all the points with some edges. Edges can be drawn between any of the two of the given points. The cost of an edge is equal to the distance between the two points it connects.\n\nThey want to do this in such a way that they will both see that all the points are connected (either directly or indirectly).\n\nHowever, there is a catch: Roy cannot see the color red and Biv cannot see the color blue.\n\nTherefore, they have to choose the edges in such a way that if all the red points are removed, the remaining blue and green points are connected (and similarly, if all the blue points are removed, the remaining red and green points are connected).\n\nHelp them compute the minimum cost way to choose edges to satisfy the above constraints.\n\n\n-----Input-----\n\nThe first line will contain an integer n (1 \u2264 n \u2264 300 000), the number of points.\n\nThe next n lines will contain two tokens p_{i} and c_{i} (p_{i} is an integer, 1 \u2264 p_{i} \u2264 10^9, c_{i} is a uppercase English letter 'R', 'G' or 'B'), denoting the position of the i-th point and the color of the i-th point. 'R' means red, 'G' denotes green, and 'B' means blue. The positions will be in strictly increasing order.\n\n-----Output-----\n\nPrint a single integer, the minimum cost way to solve the problem.\n\n\n-----Examples-----\nInput\n4\n1 G\n5 R\n10 B\n15 G\n\nOutput\n23\n\nInput\n4\n1 G\n2 R\n3 B\n10 G\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample, it is optimal to draw edges between the points (1,2), (1,4), (3,4). These have costs 4, 14, 5, respectively.\n\nassert solution(stdin) == \"23\"\n\n-----Constraints-----\n\n1 <= n <= 300 000\n1 <= p_{i} <= 10^9\n1 <= c_{i} <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n4\n1 G\n5 R\n10 B\n15 G\n\nSample Output\n\n23\n\nExplanation\n\nRoy and Biv have a set of n points on the infinite number line.\n\nRoy and Biv would like to connect all the points with some edges. Edges can be drawn between any of the two of the given points. The cost of an edge is equal to the distance between the two points it connects.\n\nThey want to do this in such a way that they will both see that all the points are connected (either directly or indirectly).\n\nHowever, there is a catch: Roy cannot see the color red and Biv cannot see the color blue.\n\nTherefore, they have to choose the edges in such a way that if all the red points are removed, the remaining blue and green points are connected (and similarly, if all the blue points are removed, the remaining red and green points are connected).\n\nHelp them compute the minimum cost way to choose edges to satisfy the above constraints.\n\n\n-----Input-----\n\nThe first line will contain an integer n (1 \u2264 n \u2264 300 000), the number of points.\n\nThe next n lines will contain two tokens p_{i} and c_{i} (p_{i} is an integer, 1 \u2264 p_{i} \u2264 10^9, c_{i} is a uppercase English letter 'R', 'G' or 'B'), denoting the position of the i-th point and the color of the i-th point. 'R' means red, 'G' denotes green, and 'B' means blue. The positions will be in strictly increasing order.\n\n-----Output-----\n\nPrint a single integer, the minimum cost way to solve the problem.\n\n\n-----Examples-----\nInput\n4\n1 G\n5 R\n10 B\n15 G\n\nOutput\n23\n\nInput\n4\n1 G\n2 R\n3 B\n10 G\n\nOutput\n12\n\n\n\n-----Note-----\n\nIn the first sample, it is optimal to draw edges between the points (1,2), (1,4), (3,4). These have costs 4, 14, 5, respectively.\n\nassert solution(stdin) == \"23\"\n\n-----Constraints-----\n\n1 <= n <= 300 000\n1 <= p_{i} <= 10^9\n1 <= c_{i} <= 10^9\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n4\n1 G\n5 R\n10 B\n15 G\n\nSample Output\n\n23\n\nExplanation\n\nRoy and Biv have a set of n points on the infinite number line.\n\nRoy and Biv would like to connect all the points with some edges. Edges can be drawn between any of the two of the given points. The cost of an edge is equal to the distance between the two points it connects.\n\nThey want to do this in such a way that they will both see that all the points are connected (either directly or indirectly).\n\nHowever, there is a catch: Roy cannot see the color red and Biv cannot see the color blue.\n\nTherefore, they have to choose the edges in such a way that if all the red points are removed, the remaining blue and green points are connected (and similarly, if all the blue points are removed, the remaining red and green points are connected).\n\nHelp them compute the minimum cost way to choose edges to satisfy the above constraints.\n\n\n-----Input-----\n\nThe first line will contain an integer n (1 \u2264 n \u2264 300 000), the number of points.\n\nThe next n lines will contain two tokens p_{i} and c_{i} (p_{i} is an integer, 1 \u2264 p_{i} \u2264 10^9, c_{i} is a uppercase English letter 'R', 'G' or 'B'), denoting the position of the i-th point and the color of the i-th point. 'R' means red, 'G' denotes green, and 'B' means blue. The positions will be in strictly increasing order.\n\n-----Output-----\n\nPrint a single integer, the minimum cost way to solve the problem.\n\n\n-----Examples-----\nInput\n4\n1 G\n5 R\n10 B\n15 G\n\nOutput\n23\n\nInput\n4\n1 G\n2 R\n3"
    },
    {
        "number": 2336,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 2337,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2338,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n"
    },
    {
        "number": 2339,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"5 2\"\n"
    },
    {
        "number": 2340,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 2341,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n\n-----Constraints-----\n0 < n, m < 2000\n\nTime Limit: 1 sec\n\nSample Input\n\n3 3\naaa\naaa\naaa\n\nSample Output\n\n10\n\nExplanation\n\nThe first line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe second line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe third line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe fourth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe fifth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe sixth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe seventh line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe eighth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe ninth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe tenth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe eleventh line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe twelfth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe thirteenth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe fourteenth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe fifthteenth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $j$-th column. Scraps having the same letter share the same color, scraps having different letters have different colors.\n\nThe sixthteenth line contains two integers $n$ and $m$ ($1 \\le n, m \\le 2000$). Each of the next $n$ lines contains $m$ characters: lowercase English letters, the $j$-th of which corresponds to scrap in the current line and in the $"
    },
    {
        "number": 2342,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 2343,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 2344,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"32\"\nassert solution(stdin) == \"1337\"\nassert solution(stdin) == \"236\"\nassert solution(stdin) == \"338\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2345,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1 4 3 2\"\nassert solution(stdin) == \"1 4 3 2\"\nassert solution(stdin) == \"1 4 3 2\"\nassert solution(stdin) == \"1 4 3 2\"\n"
    },
    {
        "number": 2346,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2347,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n\n1 <= t <= 100\n1 <= p <= 10^6\n1 <= s_1, s_2, p' < p\ns_1, s_2, p' < p\n\n-----Time Limit-----\n\nO(t * 2^n)\n\nO(t * 2^n)\n\n-----Space Limit-----\n\nO(n)\n\n-----Submissions-----\n\nSubmissions are marked in bold blue.\n\n\"\"\""
    },
    {
        "number": 2348,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2349,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 2 5 "
    },
    {
        "number": 2350,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n\n0 <= x_1, y_1, x_2, y_2 <= 10^9\n\n0 <= x_1, y_1, x_2, y_2 <= 10^9\n\n0 <= t <= 10^4\n\n\"\"\""
    },
    {
        "number": 2351,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2352,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2353,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"27\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"27\"\nassert solution(stdin) == \"27\"\n"
    },
    {
        "number": 2354,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2355,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 4\"\nassert solution(stdin) == \"1 5\"\nassert solution(stdin) == \"1 6\"\n"
    },
    {
        "number": 2356,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\n\n-----Constraints-----\n1 <= t <= 100\n1 <= n <= 100\n1 <= a_i <= 100\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Elements Notation-----\n$a_1, a_2, \\dots, a_n$\n\n\"\"\""
    },
    {
        "number": 2357,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '6'\nassert solution(stdin) == '3'\nassert solution(stdin) == '2'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 2358,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2359,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 2360,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 0 2\"\nassert solution(stdin) == \"1 1 2\"\nassert solution(stdin) == \"1 0 1\"\nassert solution(stdin) == \"1 1 1\"\n"
    },
    {
        "number": 2361,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2362,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 2363,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n\nInput\n2\n4 17\n7 987654321\n\nOutput\n8\n141093479\n"
    },
    {
        "number": 2364,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '60'\nassert solution(stdin) == '60'\nassert solution(stdin) == '60'\nassert solution(stdin) == '60'\nassert solution(stdin) == '60'\n"
    },
    {
        "number": 2365,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"t\") == \"true\"\nassert solution(\"f\") == \"false\"\nassert solution(\"!(f)\") == \"true\"\nassert solution(\"&(t,f)\") == \"false\"\nassert solution(\"|(&(t,f,t),!(t))\") == \"false\"\n"
    },
    {
        "number": 2366,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n\n\"\"\""
    },
    {
        "number": 2367,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 2368,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 2369,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"11\"\n"
    },
    {
        "number": 2370,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 2371,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"900\"\n"
    },
    {
        "number": 2372,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\n\n\"\"\""
    },
    {
        "number": 2373,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 2374,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 4\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1 4\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"1 4\"\n"
    },
    {
        "number": 2375,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Brown\"\n"
    },
    {
        "number": 2376,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"4 6\"\n) == 11\nassert solution(\n    \"2 1\"\n) == 2\nassert solution(\n    \"3 4\"\n) == 4\nassert solution(\n    \"4 10\"\n) == 4\nassert solution(\n    \"3 4\"\n) == 4\n"
    },
    {
        "number": 2377,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 2378,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '125000001'\n"
    },
    {
        "number": 2379,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 2380,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"14\"\n"
    },
    {
        "number": 2381,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"12\"\n"
    },
    {
        "number": 2382,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\n\"\"\""
    },
    {
        "number": 2383,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\n"
    },
    {
        "number": 2384,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 12\n"
    },
    {
        "number": 2385,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\nassert solution(input) == \"1\"\n"
    },
    {
        "number": 2386,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 2387,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(()) == \"\"\nassert solution(\"(()\") == \"Yes\"\nassert solution(\"(()(\") == \"Yes\"\nassert solution(\"(()(()\") == \"No\"\nassert solution(\"(()(()(\") == \"No\"\n"
    },
    {
        "number": 2388,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 2389,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 2390,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"191\"\n"
    },
    {
        "number": 2391,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 3\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\nassert solution(input()) == \"\"\n"
    },
    {
        "number": 2392,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\nassert solution(stdin) == 1\nassert solution(stdin) == 2\nassert solution(stdin) == 3\nassert solution(stdin) == 4\n"
    },
    {
        "number": 2393,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2394,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2395,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0011\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\nassert solution(stdin) == \"0101\"\n"
    },
    {
        "number": 2396,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 2 1\"\nassert solution(stdin) == \"1 2 2 1\"\nassert solution(stdin) == \"1 2 2 1\"\nassert solution(stdin) == \"1 2 2 1\"\nassert solution(stdin) == \"1 2 2 1\"\n"
    },
    {
        "number": 2397,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-45'\n"
    },
    {
        "number": 2398,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-----Constraints-----\n1 <= t <= 10^4\n0 <= a, b, c, d <= 10^8\n0 <= x_1, y_1, x_2, y_2 <= 10^8\n\n------Time complexity-----\nO(t)\n\nO(t)\n\n------Space complexity-----\nO(t)\n\n------Algorithm-----"
    },
    {
        "number": 2399,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"YES\""
    },
    {
        "number": 2400,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 2401,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2402,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"2 6\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 2403,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"99\"\nassert solution(stdin) == \"99\"\n"
    },
    {
        "number": 2404,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(35) == 57\nassert solution(57) == 1723\nassert solution(391) == 1723\nassert solution(0) == 0\nassert solution(\"\") == 0\n"
    },
    {
        "number": 2405,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"7\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 2406,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 5 6 7\"\nassert solution(stdin) == \"5 5 6 7\"\nassert solution(stdin) == \"5 5 6 7\"\nassert solution(stdin) == \"5 5 6 7\"\nassert solution(stdin) == \"5 5 6 7\"\n"
    },
    {
        "number": 2407,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2408,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\n\n-----Constraints-----\n\n1 <= n <= 10^4\n-10^4 <= x_i, y_i <= 10^4\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n4\n0 0\n1 1\n0 3\n1 2\n\nSample Output\n\n14\n\nExplanation\n\nThe three poles $(0, 0)$, $(0, 2)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 4)$ are connected by a single wire.\n\nThe two wires $(0, 0)$ and $(0, 2)$ are"
    },
    {
        "number": 2409,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\"\n\nassert solution(stdin) == \"No\"\n\nassert solution(stdin) == \"Yes\""
    },
    {
        "number": 2410,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 2411,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"14\"\n\n-----Constraints-----\n\n1 <= n <= 10^4\n-10^4 <= x_i, y_i <= 10^4\n-10^4 <= x_i, y_i <= 10^4\n\n-----Time Limit-----\n\nO(n)\n\n\n-----Submissions-----\n\nSample Input\n\n4\n0 0\n1 1\n0 3\n1 2\n\nSample Output\n\n14\n\nExplanation\n\nIn the first example:\n\n [Image] \n\nIn the second example:\n\n [Image] \n\nNote that the three poles $(0, 0)$, $(0, 2)$ and $(0, 4)$ are connected by a single wire.\n\nIn the third example:\n\n [Image]\n"
    },
    {
        "number": 2412,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 2413,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2414,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"31415\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1110\"\nassert solution(stdin) == \"123\"\nassert solution(stdin) == \"99\"\n"
    },
    {
        "number": 2415,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"GENIUS\") == \"YES\"\nassert solution(\"DOCTOR\") == \"NO\"\nassert solution(\"IRENE\") == \"NO\"\nassert solution(\"MARY\") == \"YES\"\nassert solution(\"SMARTPHONE\") == \"NO\"\n"
    },
    {
        "number": 2416,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n1 <= stdin.length <= 10^5\n1 <= stdin[i] <= 10^9\n1 <= a_i <= 10^9\n\n-----Time Limit-----\n1 second\n\n\"\"\""
    },
    {
        "number": 2417,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i, b_i <= n\n1 <= a_1, b_1 <= n\n1 <= a_2, b_2 <= n\n\n-----Time Limit-----\nO(n)\n\n\n-----Space Limit-----\nO(n)\n\n\n------Code------\n\nn = int(stdin.readline().strip())\na = list(map(int, stdin.readline().strip().split()))\nb = list(map(int, stdin.readline().strip().split()))"
    },
    {
        "number": 2418,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2419,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 1) == 3\nassert solution(3, 11) == 3\nassert solution(3, 30) == 3\nassert solution(3, 20) == 3\nassert solution(3, 10) == 3\n"
    },
    {
        "number": 2420,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"5\""
    },
    {
        "number": 2421,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"18\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n-10^9 <= x, y <= 10^9\n-10^9 <= c_1, c_2, c_3, c_4, c_5, c_6 <= 10^9\n\n-----Time Limit-----\n\nO(t * c_1)\n\nO(t * c_2)\n\nO(t * c_3)\n\nO(t * c_4)\n\nO(t * c_5)\n\nO(t * c_6)\n\n-----Space Limit-----\n\nO(t * c_1)\n\nO(t * c_2)\n\nO(t * c_3)\n\nO(t * c_4)\n\nO(t * c_5)\n\nO(t * c_6)\n\n-----Good Luck!-----\n\"\"\""
    },
    {
        "number": 2422,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 2 2\"\nassert solution(stdin) == \"7 5 3\"\nassert solution(stdin) == \"7 5 3\"\nassert solution(stdin) == \"7 5 3\"\nassert solution(stdin) == \"7 5 3\"\n"
    },
    {
        "number": 2423,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2424,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"798595483\"\n"
    },
    {
        "number": 2425,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2426,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2427,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= a_i \\leq a_j \\leq n\na_i + a_j = n\n\n\"\"\""
    },
    {
        "number": 2428,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2429,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2430,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 14\n"
    },
    {
        "number": 2431,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2432,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(2) == 2\nassert solution(5) == 5\nassert solution(35) == 50\nassert solution(24) == 24\nassert solution(0) == 0\n"
    },
    {
        "number": 2433,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"40\"\nassert solution(stdin) == \"34\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2434,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n1 <= t <= 10^4\n\n-----Time Limit-----\n1 sec\n\n-----Space Limit-----\n1 sec\n\n-----Alternatives-----"
    },
    {
        "number": 2435,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2436,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2437,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2438,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n\nassert solution(stdin) == 3\n\nassert solution(stdin) == 15\n\nassert solution(stdin) == 0\n\nassert solution(stdin) == 0"
    },
    {
        "number": 2439,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2440,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n\n\"\"\""
    },
    {
        "number": 2441,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"15 6\"\n"
    },
    {
        "number": 2442,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"0\""
    },
    {
        "number": 2443,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2444,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"314 628 1256 942 1570\"\n"
    },
    {
        "number": 2445,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= T <= 10^4\n1 <= n <= 10^9\n\n\"\"\""
    },
    {
        "number": 2446,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2447,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2448,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2449,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"860616440\"\n\nassert solution(stdin) == \"860616440\"\n\nassert solution(stdin) == \"860616440\"\n\nassert solution(stdin) == \"860616440\""
    },
    {
        "number": 2450,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"20\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"20\"\n"
    },
    {
        "number": 2451,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2452,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3 7 1 2 6\"\n\n\"\"\""
    },
    {
        "number": 2453,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6 2 1\"\nassert solution(stdin) == \"5 2 0\"\nassert solution(stdin) == \"5 2 0\"\nassert solution(stdin) == \"5 2 0\"\nassert solution(stdin) == \"5 2 0\"\n"
    },
    {
        "number": 2454,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"4\"\nassert solution(\"3\") == \"10\"\nassert solution(\"4\") == \"10\"\nassert solution(\"5\") == \"10\"\nassert solution(\"6\") == \"10\"\n"
    },
    {
        "number": 2455,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 1x12 2x6 4x3 6x2 12x1\"\nassert solution(stdin) == \"4 1x12 2x6 3x4 6x2 12x1\"\nassert solution(stdin) == \"6 1x12 2x6 3x4 4x3 6x2 12x1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2456,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= n <= 10^9\n1 <= r <= 10^9\n\n\"\"\""
    },
    {
        "number": 2457,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 2458,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 2459,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 3 1 5 2\"\n"
    },
    {
        "number": 2460,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"3 4\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"3 6\"\n"
    },
    {
        "number": 2461,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6 6\"\n"
    },
    {
        "number": 2462,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2463,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2464,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 34\n\n\"\"\""
    },
    {
        "number": 2465,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"18\"\nassert solution(stdin) == \"90\"\nassert solution(stdin) == \"180\"\nassert solution(stdin) == \"90\"\nassert solution(stdin) == \"180\"\n"
    },
    {
        "number": 2466,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1,2,3\") == \"1,3,2,1\"\nassert solution(\"1,2,3,4\") == \"1,3,4,2,1,4\"\nassert solution(\"1,2,3,4,5\") == \"1,3,4,5,2,4,3,5\"\nassert solution(\"1,2,3,4,5,6\") == \"1,3,4,5,6,2,4,6,3,5,7,6\"\nassert solution(\"1,2,3,4,5,6,7\") == \"1,3,4,5,6,7,2,4,5,6,7,1\"\n"
    },
    {
        "number": 2467,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 4 6\""
    },
    {
        "number": 2468,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"(()\") == 2\nassert solution(\"(()())\") == 4\nassert solution(\"(())\") == 0\n"
    },
    {
        "number": 2469,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"3\",\"2\",\"3\"]) == \"3\"\nassert solution([\"1\",\"1\",\"1\",\"3\",\"3\",\"2\",\"2\",\"2\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"3\",\"3\",\"2\",\"2\",\"2\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"3\",\"3\",\"2\",\"2\",\"2\"]) == \"1\"\nassert solution([\"1\",\"1\",\"1\",\"3\",\"3\",\"2\",\"2\",\"2\"]) == \"1\"\n"
    },
    {
        "number": 2470,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5 6 7\") == \"1\"\nassert solution(\"1 2 3 4 5 6 7\") == \"2\"\nassert solution(\"1 2 3 4 5 6 7\") == \"3\"\nassert solution(\"1 2 3 4 5 6 7\") == \"4\"\nassert solution(\"1 2 3 4 5 6 7\") == \"5\"\n"
    },
    {
        "number": 2471,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\nassert solution(inp) == \"1\"\n"
    },
    {
        "number": 2472,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"Yes\"\nassert solution(input) == \"No\"\n"
    },
    {
        "number": 2473,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"21\"\n\"\"\""
    },
    {
        "number": 2474,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"999999993\"\n"
    },
    {
        "number": 2475,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 2476,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"1\"\nassert solution(input) == \"0\"\nassert solution(input) == \"1\"\nassert solution(input) == \"0\"\n"
    },
    {
        "number": 2477,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 2478,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(()) == \"()\"\nassert solution(\"(()\") == \"()\"\nassert solution(\"(()()\") == \"()()\"\nassert solution(\"(()(\") == \"()()\"\nassert solution(\"(()(()\") == \"()()()\"\n"
    },
    {
        "number": 2479,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1\"\nassert solution(input) == \"2\"\nassert solution(input) == \"3\"\nassert solution(input) == \"4\"\nassert solution(input) == \"5\"\n"
    },
    {
        "number": 2480,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 4\n\n\"\"\""
    },
    {
        "number": 2481,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"12\"\n"
    },
    {
        "number": 2482,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1 2 2 1\"\nassert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 2 3\"\nassert solution(input()) == \"1 2 3\"\n"
    },
    {
        "number": 2483,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 2484,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 2485,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 2486,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 2487,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"7\"\n"
    },
    {
        "number": 2488,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\nassert solution(input) == \"2\"\n"
    },
    {
        "number": 2489,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n\n\"\"\""
    },
    {
        "number": 2490,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 8\n"
    },
    {
        "number": 2491,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 2492,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\nassert solution(input()) == \"9\"\n"
    },
    {
        "number": 2493,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"1\"\n"
    },
    {
        "number": 2494,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 2495,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"4\"\n"
    },
    {
        "number": 2496,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"pairwise coprime\"\nassert solution(input()) == \"setwise coprime\"\nassert solution(input()) == \"not coprime\"\n"
    },
    {
        "number": 2497,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2498,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 2499,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 12\n"
    },
    {
        "number": 2500,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 2501,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\n"
    },
    {
        "number": 2502,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2503,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\n"
    },
    {
        "number": 2504,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 2505,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"13\"\n"
    },
    {
        "number": 2506,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"202\"\n"
    },
    {
        "number": 2507,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 2508,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 2509,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 7\n"
    },
    {
        "number": 2510,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\nassert solution(input) == \"3\"\n"
    },
    {
        "number": 2511,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"6\"\n"
    },
    {
        "number": 2512,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"8\"\n"
    },
    {
        "number": 2513,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"SSSWWS\"\n"
    },
    {
        "number": 2514,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"11\"\nassert solution(input) == \"12\"\nassert solution(input) == \"16\"\n"
    },
    {
        "number": 2515,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"5\"\nassert solution(input()) == \"7\"\n"
    },
    {
        "number": 2516,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 6\n"
    },
    {
        "number": 2517,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"2\"\n"
    },
    {
        "number": 2518,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 2519,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == '7.000000000000'\n"
    },
    {
        "number": 2520,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"1 1 0 1\"\nassert solution(input) == \"1 1 0 1\"\nassert solution(input) == \"1 1 0 1\"\nassert solution(input) == \"1 1 0 1\"\nassert solution(input) == \"1 1 0 1\"\n"
    },
    {
        "number": 2521,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 2522,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 2523,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2524,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\n"
    },
    {
        "number": 2525,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"cpa\"\n"
    },
    {
        "number": 2526,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 12\n"
    },
    {
        "number": 2527,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"happy\"\nassert solution(stdin) == \"sad\"\nassert solution(stdin) == \"happy\"\nassert solution(stdin) == \"sad\"\nassert solution(stdin) == \"happy\"\n"
    },
    {
        "number": 2528,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n\"\"\""
    },
    {
        "number": 2529,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"89.50\"\nassert solution(stdin) == \"120.00\"\nassert solution(stdin) == \"120.00\"\nassert solution(stdin) == \"120.00\"\nassert solution(stdin) == \"120.00\"\n"
    },
    {
        "number": 2530,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Italy\"\nassert solution(stdin) == \"England\"\nassert solution(stdin) == \"Ramanujan\"\nassert solution(stdin) == \"Gauss\"\nassert solution(stdin) == \"Lagrange\"\n"
    },
    {
        "number": 2531,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2532,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2047 4095 8191 16383 32767 65535 131071 262143 524287 48575\"\n"
    },
    {
        "number": 2533,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2534,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"GUESS\"\n"
    },
    {
        "number": 2535,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '85'\n"
    },
    {
        "number": 2536,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 2537,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2538,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2539,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"187\"\n"
    },
    {
        "number": 2540,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10 9 3 4\"\n"
    },
    {
        "number": 2541,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"17\"\nassert solution(stdin) == \"1111\"\n\n\"\"\""
    },
    {
        "number": 2542,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\n-----Constraints-----\n\n1 <= t <= 10^5\n\n0 <= s_i <= 9\n\n------Time complexity-----\n\nTime complexity of the above algorithm is O(n) where n is the length of the given string.\n\nTime complexity of the above algorithm is O(n) where n is the length of the given string.\n\n\"\"\""
    },
    {
        "number": 2543,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2544,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 2 3\"\nassert solution(stdin) == \"1 2 3 4\"\nassert solution(stdin) == \"1 2 3 4 5\"\nassert solution(stdin) == \"1 2 3 4 5 6\"\n"
    },
    {
        "number": 2545,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2546,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"1337\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2547,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"24\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2548,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n <= 10^5\n1 <= a_i <= 10^5\n\nTime Limit: 1 sec\nSpace Limit: 1 sec\n\n-----Submissions-----\n\nSample Input\n\n3\n3\n120\n5\n11011\n6\n600005\n\nSample Output\n\n3\n6\n1\n\nExplanation\n\nThe first test case is considered in the statement.\n\nIn the second test case, there are $6$ good subarrays: $a_{1 \\dots 1}$, $a_{2 \\dots 2}$, $a_{1 \\dots 2}$, $a_{4 \\dots 4}$, $a_{5 \\dots 5}$ and $a_{4 \\dots 5}$. \n\nIn the third test case there is only one good subarray: $a_{2 \\dots 6}$.\n\n\"\"\""
    },
    {
        "number": 2549,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '665496237'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\nassert solution(stdin) == '1'\n"
    },
    {
        "number": 2550,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2551,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Constraints-----\n1 <= T <= 10^5\n1 <= s.length <= 10^5\n1 <= t.length <= 10^5\ns and t consist of lowercase Latin letters.\n\n\"\"\"\n\nclass Solution:\n    def minOperations(self, s: str, t: str) -> int:\n        \n        def check(s, t):\n            if len(s)!= len(t):\n                return False\n            \n            for i in range(len(s)):\n                if s[i]!= t[i]:\n                    return False\n            \n            return True\n        \n        def solve(s, t):\n            if not check(s, t):\n                return 0\n            \n            if len(s) == len(t):\n                return 1\n            \n            if s[-1] == t[-1]:\n                return solve(s[:-1], t[:-1]) + solve(s[:-1], t[:-1])\n            \n            return solve(s[:-1], t[:-1]) + solve(s[:-1], t[:-1])\n        \n        return solve(s, t)\n"
    },
    {
        "number": 2552,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2553,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 2554,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2555,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\nassert solution(stdin) == \"11\"\n"
    },
    {
        "number": 2556,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100000000\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"100000000\"\n"
    },
    {
        "number": 2557,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2558,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-1'\nassert solution(stdin) == '534'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '500000500000'\nassert solution(stdin) == '1000000'\n"
    },
    {
        "number": 2559,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"33\"\nassert solution(stdin) == \"33\"\nassert solution(stdin) == \"33\"\nassert solution(stdin) == \"33\"\nassert solution(stdin) == \"33\"\n"
    },
    {
        "number": 2560,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 2561,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1073741823\"\nassert solution(stdin) == \"1073741824\"\nassert solution(stdin) == \"1073741824\"\n"
    },
    {
        "number": 2562,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\n\n-----Constraints-----\n\n1 \u2264 n \u2264 1000000\n\n1 \u2264 a_1, a_2,..., a_{n} \u2264 1000000\n\n1 \u2264 stdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n\nstdin.length \u2264 1000000\n"
    },
    {
        "number": 2563,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0079\"\nassert solution(stdin) == \"234642\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"42\"\nassert solution(stdin) == \"642\"\n"
    },
    {
        "number": 2564,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\n\n-----Constraints-----\n\n1 <= T <= 10^4\n1 <= a, b <= 10^9\n1 <= n <= 10^9\n\n\"\"\""
    },
    {
        "number": 2565,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2566,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '233333332'\n"
    },
    {
        "number": 2567,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"000\"\nassert solution(stdin) == \"101\"\nassert solution(stdin) == \"00\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2568,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"def\"\nassert solution(stdin) == \"++\"\n"
    },
    {
        "number": 2569,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2570,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 2571,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 1 -1\"\nassert solution(stdin) == \"1 1 1 -1\"\nassert solution(stdin) == \"1 1 1 -1\"\nassert solution(stdin) == \"1 1 1 -1\"\nassert solution(stdin) == \"1 1 1 -1\"\n"
    },
    {
        "number": 2572,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 42\n\n-----Constraints-----\n\n1 \u2264 t \u2264 10\n1 \u2264 n \u2264 100\n1 \u2264 m \u2264 10^9\n\n-----Time Limit-----\n\nO(n^2)\n\n\n-----Submissions-----\n\nApproach:\n\nTime: O(n^2)\nSpace: O(n^2)\n\n\"\"\""
    },
    {
        "number": 2573,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 0\n"
    },
    {
        "number": 2574,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '120'\nassert solution(stdin) == '12'\nassert solution(stdin) == '0'\nassert solution(stdin) == '945'\n"
    },
    {
        "number": 2575,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3, 30) == \"NO\"\nassert solution(3, 60) == \"NO\"\nassert solution(3, 90) == \"NO\"\nassert solution(3, 180) == \"YES\"\nassert solution(3, 270) == \"YES\"\n"
    },
    {
        "number": 2576,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2577,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\nassert solution(stdin) == \"1 1\"\n"
    },
    {
        "number": 2578,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 4 1 4 4 2 2\"\n\n\"\"\""
    },
    {
        "number": 2579,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2580,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"17\"\nassert solution(stdin) == \"18\"\nassert solution(stdin) == \"286\"\n"
    },
    {
        "number": 2581,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 12\nassert solution(stdin) == 12\nassert solution(stdin) == 12\nassert solution(stdin) == 12\nassert solution(stdin) == 12\n"
    },
    {
        "number": 2582,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= p_1, p_2,..., p_n <= 10^5\n\n-----Time Limit-----\n1 second\n\n-----Space Limit-----\n1 megabyte\n\n-----Alternatives-----\n\n1. Use a stack to store the subsegments.\n2. Use a queue to store the subsegments.\n3. Use a hashmap to store the subsegments.\n4. Use a set to store the subsegments.\n5. Use a hashmap to store the subsegments.\n6. Use a set to store the subsegments.\n7. Use a hashmap to store the subsegments.\n8. Use a set to store the subsegments.\n9. Use a hashmap to store the subsegments.\n10. Use a set to store the subsegments.\n11. Use a hashmap to store the subsegments.\n12. Use a set to store the subsegments.\n13. Use a hashmap to store the subsegments.\n14. Use a set to store the subsegments.\n15. Use a hashmap to store the subsegments.\n16. Use a set to store the subsegments.\n17. Use a hashmap to store the subsegments.\n18. Use a set to store the subsegments.\n19. Use a hashmap to store the subsegments.\n20. Use a set to store the subsegments.\n21. Use a hashmap to store the subsegments.\n22. Use a set to store the subsegments.\n23. Use a hashmap to store the subsegments.\n24. Use a set to store the subsegments.\n25. Use a hashmap to store the subsegments.\n26. Use a set to store the subsegments.\n27. Use a hashmap to store the subsegments.\n28. Use a set to store the subsegments.\n29. Use a hashmap to store the subsegments.\n30. Use a set to store the subsegments.\n31. Use a hashmap to store the subsegments.\n32. Use a set to store the subsegments.\n33. Use a hashmap to store the subsegments.\n34. Use a set to store the subsegments.\n35. Use a hashmap to store the subsegments.\n36. Use a set to store the subsegments.\n37. Use a hashmap to store the subsegments.\n38. Use a set to store the subsegments.\n39. Use a hashmap to store the subsegments.\n40. Use a set to store the subsegments.\n41. Use a hashmap to store the subsegments.\n42. Use a set to store the subsegments.\n43. Use a hashmap to store the subsegments.\n44. Use a set to store the subsegments.\n45. Use a hashmap to store the subsegments.\n46. Use a set to store the subsegments.\n47. Use a hashmap to store the subsegments.\n48. Use a set to store the subsegments.\n49. Use a hashmap to store the subsegments.\n50. Use a set to store the subsegments.\n51. Use a hashmap to store the subsegments.\n52. Use a set to store the subsegments.\n53. Use a hashmap to store the subsegments.\n54. Use a set to store the subsegments.\n55. Use a hashmap to store the subsegments.\n56. Use a set to store the subsegments.\n57. Use a hashmap to store the subsegments.\n58. Use a set to store the subsegments.\n59. Use a hashmap to store the subsegments.\n60. Use a set to store the subsegments.\n61. Use a hashmap to store the subsegments.\n62. Use a set to store the subsegments.\n63. Use a hashmap to store the subsegments.\n64. Use a set to store the subsegments.\n65. Use a hashmap to store the subsegments.\n66. Use a set to store the subsegments.\n67. Use a hashmap to store the subsegments.\n68. Use a set to store the subsegments.\n69. Use a hashmap to store the subsegments.\n70. Use a set to store the subsegments.\n71. Use a hashmap to store the subsegments.\n72. Use a set to store the subsegments.\n73. Use a hashmap to store the subsegments.\n74. Use a set to store the subsegments.\n75. Use a hashmap to store the subsegments.\n76. Use a set to store the subsegments.\n77. Use a hashmap to store the subsegments.\n78. Use a set to store the subsegments.\n79. Use a hashmap to store the subsegments.\n80. Use a set to store the subsegments.\n81. Use a hashmap to store the subsegments.\n82. Use a set to store the subsegments.\n83. Use a hashmap to store the subsegments.\n84. Use a set to store the subsegments.\n85. Use a hashmap to store the subsegments.\n86. Use a set to store the subsegments.\n87. Use a hashmap to store the subsegments.\n88. Use a set to store the subsegments.\n89. Use a hashmap to store the subsegments.\n90. Use a set to store the subsegments.\n91. Use a hashmap to store the subsegments.\n92. Use a set to store the subsegments.\n93. Use a hashmap to store the subsegments.\n94. Use a set to store the subsegments.\n95. Use a hashmap to store the subsegments.\n96. Use a set to store the subsegments.\n97. Use a hashmap to store the subsegments.\n98. Use a set to store the subsegments.\n99. Use a hashmap to store the subsegments.\n100. Use a set to store the subsegments.\n101. Use a hashmap to store the subsegments.\n102. Use a set to store the subsegments.\n103. Use a hashmap to store the subsegments.\n104. Use a set to store the subsegments.\n105. Use a hashmap to store the subsegments.\n106. Use a set to store the subsegments.\n107. Use a hashmap to store the subsegments.\n108. Use a set to store the subsegments.\n109. Use a hashmap to store the subsegments.\n110. Use a set to store the subsegments.\n111. Use a hashmap to store the subsegments.\n112. Use a set to store the subsegments.\n113. Use a hashmap to store the subsegments.\n114. Use a set to store the subsegments.\n115. Use a hashmap to store the subsegments.\n116. Use a set to store the subsegments.\n117. Use a hashmap to store the subsegments.\n118. Use a set to store the subsegments.\n119. Use a hashmap to store the subsegments.\n120. Use a set to store the subsegments.\n121. Use a hashmap to store the subsegments.\n122. Use a set to store the subsegments.\n123. Use a hashmap to store the subse"
    },
    {
        "number": 2583,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"FastestFinger\"\nassert solution(stdin) == \"FastestFinger\"\nassert solution(stdin) == \"FastestFinger\"\nassert solution(stdin) == \"FastestFinger\"\nassert solution(stdin) == \"FastestFinger\"\n"
    },
    {
        "number": 2584,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2585,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2586,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"BWBWBWBWBWB\"\n\n-----Constraints-----\n\n1 <= t <= 20\n\n1 <= n, m <= 100\n\n1 <= n \\le m\n\n1 <= W <= 100\n\n-----Time Limit-----\n\nO(n*m)\n\nO(n*m)\n\n-----Space Limit-----\n\nO(n*m)\n\n-----Submissions-----\n\nSubmissions are marked in bold.\n\n-----Alternatives-----\n\nAlternatives are:\n\n1. Use a stack to store the colors of the board.\n2. Use a queue to store the colors of the board.\n3. Use a stack to store the colors of the board.\n4. Use a queue to store the colors of the board.\n5. Use a stack to store the colors of the board.\n6. Use a queue to store the colors of the board.\n7. Use a stack to store the colors of the board.\n8. Use a queue to store the colors of the board.\n9. Use a stack to store the colors of the board.\n10. Use a queue to store the colors of the board.\n11. Use a stack to store the colors of the board.\n12. Use a queue to store the colors of the board.\n13. Use a stack to store the colors of the board.\n14. Use a queue to store the colors of the board.\n15. Use a stack to store the colors of the board.\n16. Use a queue to store the colors of the board.\n17. Use a stack to store the colors of the board.\n18. Use a queue to store the colors of the board.\n19. Use a stack to store the colors of the board.\n20. Use a queue to store the colors of the board.\n\n\"\"\""
    },
    {
        "number": 2587,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"998\"\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n <= 10^5\n\n\"\"\""
    },
    {
        "number": 2588,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"94\"\nassert solution(stdin) == \"25\"\nassert solution(stdin) == \"2900000000\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"94\"\n"
    },
    {
        "number": 2589,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2590,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2591,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 5 4 6 8 -2\"\nassert solution(stdin) == \"1 2 4 8\"\nassert solution(stdin) == \"5 4 5 6 -2\"\nassert solution(stdin) == \"1 2 4 8\"\nassert solution(stdin) == \"5 4 5 6 -2\"\n"
    },
    {
        "number": 2592,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n0 <= a, b, c <= 10^4\n\n\"\"\""
    },
    {
        "number": 2593,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2594,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2595,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2596,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 1\"\nassert solution(stdin) == \"5 2\"\nassert solution(stdin) == \"4 2\"\nassert solution(stdin) == \"5 3\"\nassert solution(stdin) == \"4 1\"\n"
    },
    {
        "number": 2597,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"4\"\n\nassert solution(stdin) == \"4 4 4 4\"\n\nassert solution(stdin) == \"4 4 4 4\"\n\nassert solution(stdin) == \"3 3 3 3\""
    },
    {
        "number": 2598,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 2599,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '0'\nassert solution(stdin) == '4'\nassert solution(stdin) == '-1'\nassert solution(stdin) == '599998'\n"
    },
    {
        "number": 2600,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2601,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= n <= 10^4\n1 <= a_i <= 10^9\n\n\"\"\""
    },
    {
        "number": 2602,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 2603,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\nassert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2604,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n0 <= stdin.length <= 10^5\n0 <= stdin[i] <= 10^5\n0 <= stdin[i][j] <= 10^5\n0 <= stdin[i][j] <= 10^5\n0 <= stdin[i][j] <= 10^5\n\n-----Time complexity-----\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO(n)\n\nO"
    },
    {
        "number": 2605,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '71'\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= n\n1 <= c_1, c_2,..., c_{n} <= 10^9\n1 <= id_1, id_2,..., id_{k} <= n\n\n-----Time Limit Exceeded-----\nTime Limit: 1 second\n\n-----Memory Limit Exceeded-----\nTime Limit: 1 GB\n\n-----Divide and Conquer-----\nTime Limit: 1 second\n\n-----Constraints-----\n1 <= n <= 10^5\n1 <= k <= n\n1 <= c_1, c_2,..., c_{n} <= 10^9\n1 <= id_1, id_2,..., id_{k} <= n\n\n-----Input Format-----\nThe first line contains an integer n and k.\nThe second line contains n integers c_1, c_2,..., c_{n} and id_1, id_2,..., id_{k}.\n\nThe third line contains k distinct integers id_1, id_2,..., id_{k}.\n\nThe fourth line contains n integers c_1, c_2,..., c_{n}.\n\nThe fifth line contains id_1, id_2,..., id_{k}.\n\nThe sixth line contains id_1, id_2,..., id_{k}.\n\nThe seventh line contains id_1, id_2,..., id_{k}.\n\nThe eighth line contains id_1, id_2,..., id_{k}.\n\nThe ninth line contains id_1, id_2,..., id_{k}.\n\nThe tenth line contains id_1, id_2,..., id_{k}.\n\nThe eleventh line contains id_1, id_2,..., id_{k}.\n\nThe twelfth line contains id_1, id_2,..., id_{k}.\n\nThe thirteenth line contains id_1, id_2,..., id_{k}.\n\nThe fourteenth line contains id_1, id_2,..., id_{k}.\n\nThe fifteenth line contains id_1, id_2,..., id_{k}.\n\nThe tenth line contains id_1, id_2,..., id_{k}.\n\nThe eleventh line contains id_1, id_2,..., id_{k}.\n\nThe twelfth line contains id_1, id_2,..., id_{k}.\n\nThe thirteenth line contains id_1, id_2,..., id_{k}.\n\nThe fourteenth line contains id_1, id_2,..., id_{k}.\n\nThe fifteenth line contains id_1, id_2,..., id_{k}.\n\nThe tenth line contains id_1, id_2,..., id_{k}.\n\nThe eleventh line contains id_1, id_2,..., id_{k}.\n\nThe twelfth line contains id_1, id_2,..., id_{k}.\n\nThe thirteenth line contains id_1, id_2,..., id_{k}.\n\nThe fourteenth line contains id_1, id_2,..., id_{k}.\n\nThe fifteenth line contains id_1, id_2,..., id_{k}.\n\nThe tenth line contains id_1, id_2,..., id_{k}.\n\nThe eleventh line contains id_1, id_2,..., id_{k}.\n\nThe twelfth line contains id_1, id_2,..., id_{k}.\n\nThe thirteenth line contains id_1, id_2,..., id_{k}.\n\nThe fourteenth line contains id_1, id_2,..., id_{k}.\n\nThe fifteenth line contains id_1, id_2,..., id_{k}.\n\nThe tenth line contains id_1, id_2,..., id_{k}.\n\nThe eleventh line contains id_1, id_2,..., id_{k}.\n\nThe twelfth line contains id_1, id_2,..., id_{k}.\n\nThe thirteenth line contains id_1, id_2,..., id_{k}.\n\nThe fourteenth line contains id_1, id_2,..., id_{k}.\n\nThe fifteenth line contains id_1, id_2,..., id_{k}.\n\nThe tenth line contains id_1, id_2,..., id_{k}.\n\nThe eleventh line contains id_1, id_2,..., id_{k}.\n\nThe twelfth line contains id_1, id_2,..., id_{k}.\n\nThe thirteenth line contains id_1, id_2,..., id_{k}.\n\nThe fourteenth line contains id_1, id_2,..., id_{k}.\n\nThe fifteenth line contains id_1, id_2,..., id_{k}.\n\nThe tenth line contains id_1, id_2,..., id_{k}.\n\nThe eleventh line contains id_1, id_2,..., id_{k}.\n\nThe twelfth line contains id_1, id_2,..., id_{k}.\n\nThe thirteenth line contains id_1, id_2,..., id_{k}.\n\nThe fourteenth line contains id_1, id_2,..., id_{k}.\n\nThe fifteenth line contains id_1, id_2,..., id_{k}.\n\nThe tenth line contains id_1, id_2,..., id_{k}.\n\nThe eleventh line contains id_1, id_2,..., id_{k}.\n\nThe twelfth line contains id_1, id_2,..., id_{k}.\n\nThe thirteenth line contains id_1, id_2,..., id_{k}.\n\nThe fourteenth line contains id_1, id_2,..., id_{k}.\n\nThe fifteenth line contains id_1, id_2,...,"
    },
    {
        "number": 2606,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"21\"\n"
    },
    {
        "number": 2607,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ababcb\"\nassert solution(stdin) == \"abcacb\"\nassert solution(stdin) == \"abcbcb\"\nassert solution(stdin) == \"acabcb\"\nassert solution(stdin) == \"acbacb\"\n"
    },
    {
        "number": 2608,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 4\"\nassert solution(stdin) == \"3 9\"\nassert solution(stdin) == \"3 9\"\nassert solution(stdin) == \"3 9\"\nassert solution(stdin) == \"3 9\"\n"
    },
    {
        "number": 2609,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 2610,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2611,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"8\"\n"
    },
    {
        "number": 2612,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\"\n\nassert solution(stdin) == \"1\""
    },
    {
        "number": 2613,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"15\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"150\"\nassert solution(stdin) == \"56\"\n"
    },
    {
        "number": 2614,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2615,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"61\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2616,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"First\"\nassert solution(stdin) == \"Second\"\nassert solution(stdin) == \"First\"\n"
    },
    {
        "number": 2617,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2618,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"110\"\nassert solution(stdin) == \"110\"\nassert solution(stdin) == \"110\"\nassert solution(stdin) == \"110\"\nassert solution(stdin) == \"110\"\n"
    },
    {
        "number": 2619,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"3\"\n\nassert solution(stdin) == \"0\"\n\nassert solution(stdin) == \"3\""
    },
    {
        "number": 2620,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"9\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2621,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\"\n\nassert solution(stdin) == \"NO\""
    },
    {
        "number": 2622,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4 6\"\n\n\"\"\"\n\nimport sys"
    },
    {
        "number": 2623,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ab\"\nassert solution(stdin) == \"abbc\"\nassert solution(stdin) == \"b\"\nassert solution(stdin) == \"aa\"\nassert solution(stdin) == \"x\"\n"
    },
    {
        "number": 2624,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 4 -3 -2 -1 0 1 2 -3 4 5\"\nassert solution(stdin) == \"0 -1 2 -1 2\"\nassert solution(stdin) == \"0 -1 2 -1 2\"\nassert solution(stdin) == \"0 -1 2 -1 2\"\nassert solution(stdin) == \"0 -1 2 -1 2\"\n"
    },
    {
        "number": 2625,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"38\"\nassert solution(stdin) == \"19\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2626,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n\n1 <= t <= 10^4\n1 <= n <= 10^9\n\n-----Time Limit-----\n\nO(t * n)\n\nO(t * n)\n\n-----Space Limit-----\n\nO(t * n)\n\n-----Submissions-----\n\nSample Input\n\n2\n2\n1\n\nSample Output\n\n2\n1\n\n\n\"\"\""
    },
    {
        "number": 2627,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"[1,0,1,0,0]\") == \"1\"\nassert solution(\"[0,1,0,1,1]\") == \"3\"\nassert solution(\"[0,0,0,1,1]\") == \"2\"\nassert solution(\"[0,0,0,0,0]\") == \"0\"\n"
    },
    {
        "number": 2628,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == '0'\nassert solution(1) == '1'\nassert solution(2) == '11'\nassert solution(3) == '101'\nassert solution(4) == '11101'\n"
    },
    {
        "number": 2629,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == [\n [ 1, 2, 3 ],\n [ 8, 9, 4 ],\n [ 7, 6, 5 ]\n]\nassert solution(4) == [\n [ 1, 2, 3, 4 ],\n [ 8, 9, 7, 6 ]\n]\nassert solution(5) == [\n [ 1, 2, 3, 4, 5 ],\n [ 8, 9, 7, 6, 4 ],\n [ 7, 6, 5, 4, 3 ]\n]\nassert solution(6) == [\n [ 1, 2, 3, 4, 5, 6 ],\n [ 8, 9, 7, 6, 4, 3 ],\n [ 7, 6, 5, 4, 3, 2 ]\n]\nassert solution(7) == [\n [ 1, 2, 3, 4, 5, 6, 7 ],\n [ 8, 9, 7, 6, 4, 3, 2 ],\n [ 7, 6, 5, 4, 3, 2, 1 ]\n]\n"
    },
    {
        "number": 2630,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"[0,0,0]\",\"[0,1,0]\",\"[0,0,0]\"]) == \"2\"\nassert solution([\"[0,0,0]\",\"[0,1,0]\",\"[0,0,0]\"]) == \"1\"\nassert solution([\"[0,0,0]\",\"[0,1,0]\",\"[0,0,0]\"]) == \"0\"\nassert solution([\"[0,0,0]\",\"[0,1,0]\",\"[0,0,0]\"]) == \"0\"\nassert solution([\"[0,0,0]\",\"[0,1,0]\",\"[0,0,0]\"]) == \"0\"\n"
    },
    {
        "number": 2631,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2, [[1,0]]\") == \"true\"\nassert solution(\"2, [[1,0],[0,1]]\") == \"false\"\nassert solution(\"2, [[1,0],[0,1],[3,4]]\") == \"true\"\nassert solution(\"2, [[1,0],[0,1],[3,4],[2,3]]\") == \"false\"\nassert solution(\"2, [[1,0],[0,1],[3,4],[2,3],[3,4]]\") == \"true\"\n"
    },
    {
        "number": 2632,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"[1,3,1]\",\"[1,5,1]\",\"[4,2,1]\"]) == 7\nassert solution([\"[1,1,1]\",\"[1,1,1]\"]) == 0\nassert solution([\"[1,1,1]\",\"[1,1,1]\",\"[1,1,1]\"]) == 0\nassert solution([\"[1,1,1]\",\"[1,1,1]\",\"[1,1,1]\",\"[1,1,1]\"]) == 0\nassert solution([\"[1,1,1]\",\"[1,1,1]\",\"[1,1,1]\",\"[1,1,1]\",\"[1,1,1]\"]) == 0\n"
    },
    {
        "number": 2633,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 3\") == \"3\"\nassert solution(\"2 4\") == \"4\"\nassert solution(\"2 5\") == \"5\"\nassert solution(\"2 6\") == \"6\"\nassert solution(\"2 7\") == \"7\"\n"
    },
    {
        "number": 2634,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1,2,3\") == \"1,2,3\"\nassert solution(\"1,2,3,4\") == \"1,2,3,4\"\nassert solution(\"1,2,3,4,5\") == \"1,2,3,4,5\"\nassert solution(\"1,2,3,4,5,6\") == \"1,2,3,4,5,6\"\nassert solution(\"1,2,3,4,5,6,7\") == \"1,2,3,4,5,6,7\"\n"
    },
    {
        "number": 2635,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"[1,2,3,4,5,6,7,8,9,10,11,12]\"]) == \"12,11,10,9,8,7,6,5,4,3,2,1\"\nassert solution([\"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\") == \"100,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1\"\nassert solution([\"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\") == \"100,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1\"\nassert solution([\"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\") == \"100,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1\"\nassert solution([\"[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\") == \"100,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1\"\n"
    },
    {
        "number": 2636,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"[2,3,4,5,6,7,8,9,10]\") == \"[10,9,8,7,6,5,4,3,2]\"\nassert solution(\"[2,3,4,5,6,7,8,9,10]\") == \"[10,9,8,7,6,5,4,3,2]\"\nassert solution(\"[2,3,4,5,6,7,8,9,10]\") == \"[10,9,8,7,6,5,4,3,2]\"\nassert solution(\"[2,3,4,5,6,7,8,9,10]\") == \"[10,9,8,7,6,5,4,3,2]\"\nassert solution(\"[2,3,4,5,6,7,8,9,10]\") == \"[10,9,8,7,6,5,4,3,2]\"\n"
    },
    {
        "number": 2637,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 2638,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    [\n        [2, 3, 4],\n        [6, 5, 7],\n        [4, 1, 8, 3]\n    ]\n) == 11\nassert solution(\n    [\n        [2, 3, 4],\n        [6, 5, 7],\n        [4, 1, 8, 3]\n    ]\n) == 12\nassert solution(\n    [\n        [2, 3, 4],\n        [6, 5, 7],\n        [4, 1, 8, 3]\n    ]\n) == 12\nassert solution(\n    [\n        [2, 3, 4],\n        [6, 5, 7],\n        [4, 1, 8, 3]\n    ]\n) == 12\nassert solution(\n    [\n        [2, 3, 4],\n        [6, 5, 7],\n        [4, 1, 8, 3]\n    ]\n) == 12\n"
    },
    {
        "number": 2639,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1,2,2\") == \"1,2,2,2\"\nassert solution(\"1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1"
    },
    {
        "number": 2640,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"4 6\"\n) == 8\nassert solution(\n    \"#..#..\"\n) == 7\nassert solution(\n    \".....#\"\n) == 7\nassert solution(\n    \"....#.\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n#.#...\\n"
    },
    {
        "number": 2641,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 1 3\") == \"2 3\"\nassert solution(\"1 3\") == \"3\"\nassert solution(\"1 3 1\") == \"3\"\nassert solution(\"1 3 1 2\") == \"3\"\nassert solution(\"1 3 1 2 3\") == \"3\"\n"
    },
    {
        "number": 2642,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"5\"\n"
    },
    {
        "number": 2643,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\n-----Sample Output-----\n1\n\nFor the second query, the sequence {a_j} will be 3,6,7,11,14.\n - (a_0~\\textrm{mod}~2) > (a_1~\\textrm{mod}~2)\n - (a_1~\\textrm{mod}~2) < (a_2~\\textrm{mod}~2)\n - (a_2~\\textrm{mod}~2) = (a_3~\\textrm{mod}~2)\n - (a_3~\\textrm{mod}~2) > (a_4~\\textrm{mod}~2)\nThus, the response to this query should be 1.\n"
    },
    {
        "number": 2644,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"1\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 2645,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(gpg) == 0\nassert solution(p) == 0\nassert solution(gpg) == 0\nassert solution(p) == 0\nassert solution(gpg) == 0\n"
    },
    {
        "number": 2646,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"Yes\"\nassert solution(input()) == \"No\"\n"
    },
    {
        "number": 2647,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"3\"\nassert solution(\"1 2 3 4 5\") == \"3\"\n"
    },
    {
        "number": 2648,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 2649,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 2650,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2651,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"60\"\n"
    },
    {
        "number": 2652,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 2653,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"100 110 111 110\"\n"
    },
    {
        "number": 2654,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"2\"\n"
    },
    {
        "number": 2655,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == 7\n"
    },
    {
        "number": 2656,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(5) == \"575111451\"\nassert solution(5) == \"5\"\nassert solution(5) == \"5\"\nassert solution(5) == \"5\"\nassert solution(5) == \"5\"\n"
    },
    {
        "number": 2657,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"11 6\"\nassert solution(input()) == \"11 6\"\nassert solution(input()) == \"11 6\"\nassert solution(input()) == \"11 6\"\nassert solution(input()) == \"11 6\"\n"
    },
    {
        "number": 2658,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"4\"\n"
    },
    {
        "number": 2659,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2660,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4 2\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1 1 -8\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1 1 -3\"\n"
    },
    {
        "number": 2661,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1 1 1\"\nassert solution(stdin) == \"1 0 0 0\"\nassert solution(stdin) == \"1 0 0 0\"\nassert solution(stdin) == \"1 0 0 0\"\nassert solution(stdin) == \"1 0 0 0\"\n"
    },
    {
        "number": 2662,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input) == \"2\"\n"
    },
    {
        "number": 2663,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"18 7 4 4\"\n\n-----Constraints-----\n- 1 \u2264 N \u2264 105\n- 1 \u2264 K \u2264 min(N*(N+1)/2, 105)\n- 1 \u2264 Ai \u2264 109\n\n-----Subtasks-----\n- Subtask 1 (47 pts) : 1 \u2264 N \u2264 1000, 1 \u2264 K \u2264 min{N*(N+1)/2, 105}\n- Subtask 2 (53 pts) : 1 \u2264 N \u2264 105, 1 \u2264 K \u2264 min{N*(N+1)/2, 105}\n\n-----Example-----\nInput 13 4\n1 3 4\n\nOutput 18 7 4 4\n\nInput 23 3\n10 2 7\n\nOutput 219 12 10\n\n-----Explanation-----\nTest 1:\n\nThe first 4 elements of it are [8, 7, 4, 4].\n"
    },
    {
        "number": 2664,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2665,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Time complexity-----\nTime complexity of the algorithm is O(N^2).\n\nTime complexity of the solution is O(N).\n\n-----Space complexity-----\nSpace complexity of the solution is O(1).\n\n-----Algorithm runtime-----\nRuntime: 32 ms, faster than 99.41% of Python3 online submissions for Squares.\nMemory Usage: 14.2 MB, less than 100.00% of Python3 online submissions for Squares.\n\n-----Constraints-----\n- 0 \u2264 N \u2264 2000\n- -10^6 \u2264 Xi, Yi \u2264 10^6\n- There are NO coincident points\n\n-----Example-----\nInput:\n3\n0 0\n2 2\n3 3\n\nOutput:\n2\n\nInput:\n5\n0 0\n100 100\n200 200\n100 0\n0 100\n\nOutput:\n0\n\n-----Explanation-----\nFor the first example Chef can add points (2, 0), (0, 2) or (2, 3), (3, 2)\nFor the second example Chef already has square (0, 0), (100, 0), (0, 100), (100, 100).\n"
    },
    {
        "number": 2666,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '9'\n"
    },
    {
        "number": 2667,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2668,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Unlucky Chef\"\nassert solution(stdin) == \"Lucky Chef\"\n"
    },
    {
        "number": 2669,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 1 2 3 4 5 6 7 8 9 10\"\n"
    },
    {
        "number": 2670,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 2671,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2672,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"14\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2673,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"1\"\nassert solution(input()) == \"2\"\nassert solution(input()) == \"3\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"5\"\n"
    },
    {
        "number": 2674,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"123\") == \"Exclusive\"\nassert solution(\"111\") == \"Inclusive\"\n"
    },
    {
        "number": 2675,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2676,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n\n-----Sample Input:-----\n4\na\naa\naaa\naaaa\n5\naaaaa\n\n-----Sample Output:-----\n4\n\n-----EXPLANATION:-----\nTestCase 1: Only substring of $aaaaa$ that is present in the pile of strings is $a$. So the answer is 1\n"
    },
    {
        "number": 2677,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"A\") == \"GOOD\"\nassert solution(\"A\") == \"GOOD\"\nassert solution(\"A\") == \"GOOD\"\nassert solution(\"A\") == \"GOOD\"\nassert solution(\"A\") == \"GOOD\"\n"
    },
    {
        "number": 2678,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 2679,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '23'\n\n-----Sample Input 3:-----\n6\n\n-10 -1 -30 -40 -3 -11\n\n-----Sample Output 3:-----\n-4\n\n-----EXPLANATION:-----\nIn second test case you can easily observe that the sum will be maximum if you choose [2,3,4]\nand [6,7,1] contiguous subarrays from the given array.\n"
    },
    {
        "number": 2680,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 1-----\nInput:\n3 3\n1 2 3\n3 2 1\n\nOutput:\n0\n\n-----Example 2-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 3-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 4-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 5-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 6-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 7-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 8-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 9-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 10-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 11-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 12-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 13-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 14-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 15-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 16-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 17-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 18-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 19-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 20-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 21-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 22-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 23-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 24-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 25-----\nInput:\n2 1\n1\n1\n\nOutput:\n0\n\n-----Constraints-----\n- 1 \u2264 N, B \u2264 100000\n- 1 \u2264 N, B \u2264 1000\n- 1 \u2264 N, B \u2264 10\n\n-----Example 26-----\nInput:\n2 1\n1\n1\n\nOutput:\n1\n\n-----Constraints"
    },
    {
        "number": 2681,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"/\") == \"4.0\"\nassert solution(\"*\") == \"8\"\nassert solution(\"+\") == \"8\"\nassert solution(\"-\") == \"4\"\nassert solution(\"(\") == \"8\"\n"
    },
    {
        "number": 2682,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1337369305470044825\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2683,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n\n-----Constraints-----\n- 1 \u2264 T \u2264 100\n- 1 \u2264 N \u2264 20\n- 1 \u2264 K \u2264 N\n\n-----Example-----\nInput:\n3\n3 3\nXOX\nO.O\nXOX\n3 1\n...\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n...\n3 2\n...\n..."
    },
    {
        "number": 2684,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abcba\"\nassert solution(stdin) == \"abcba\"\nassert solution(stdin) == \"abcba\"\nassert solution(stdin) == \"abcba\"\nassert solution(stdin) == \"abcba\"\n"
    },
    {
        "number": 2685,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2686,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2687,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"8\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"24\"\n"
    },
    {
        "number": 2688,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2689,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Continue\"\nassert solution(stdin) == \"Return\"\n"
    },
    {
        "number": 2690,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2691,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ddddd\"\nassert solution(stdin) == \"ddddddd\"\nassert solution(stdin) == \"dduddddd\"\nassert solution(stdin) == \"ddudddddd\"\nassert solution(stdin) == \"dduddddddd\"\n"
    },
    {
        "number": 2692,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2693,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2694,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\""
    },
    {
        "number": 2695,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n\n-----Sample Input #3:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #3:-----\n3\n\n-----Sample Input #4:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #4:-----\n5\n\n-----Sample Input #5:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #5:-----\n5\n\n-----Sample Input #6:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #6:-----\n3\n\n-----Sample Input #7:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #7:-----\n3\n\n-----Sample Input #8:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #8:-----\n5\n\n-----Sample Input #9:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #9:-----\n5\n\n-----Sample Input #10:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #10:-----\n3\n\n-----Sample Input #11:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #11:-----\n5\n\n-----Sample Input #12:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #12:-----\n3\n\n-----Sample Input #13:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #13:-----\n5\n\n-----Sample Input #14:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #14:-----\n3\n\n-----Sample Input #15:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #15:-----\n5\n\n-----Sample Input #16:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #16:-----\n3\n\n-----Sample Input #17:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #17:-----\n5\n\n-----Sample Input #18:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #18:-----\n3\n\n-----Sample Input #19:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #19:-----\n5\n\n-----Sample Input #20:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #20:-----\n3\n\n-----Sample Input #21:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #21:-----\n5\n\n-----Sample Input #22:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #22:-----\n3\n\n-----Sample Input #23:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #23:-----\n5\n\n-----Sample Input #24:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #24:-----\n3\n\n-----Sample Input #25:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #25:-----\n5\n\n-----Sample Input #26:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #26:-----\n3\n\n-----Sample Input #27:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #27:-----\n5\n\n-----Sample Input #28:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #28:-----\n3\n\n-----Sample Input #29:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #29:-----\n5\n\n-----Sample Input #30:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #30:-----\n3\n\n-----Sample Input #31:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #31:-----\n5\n\n-----Sample Input #32:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #32:-----\n3\n\n-----Sample Input #33:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #33:-----\n5\n\n-----Sample Input #34:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #34:-----\n3\n\n-----Sample Input #35:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #35:-----\n5\n\n-----Sample Input #36:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #36:-----\n3\n\n-----Sample Input #37:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #37:-----\n5\n\n-----Sample Input #38:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #38:-----\n3\n\n-----Sample Input #39:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #39:-----\n5\n\n-----Sample Input #40:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #40:-----\n3\n\n-----Sample Input #41:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #41:-----\n5\n\n-----Sample Input #42:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #42:-----\n3\n\n-----Sample Input #43:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output #43:-----\n5\n\n-----Sample Input #44:-----\njphokenixr\njoker\n2 9 3 7 8 1 6 5 4 10\n\n-----Sample Output #44:-----\n3\n\n-----Sample Input #45:-----\nxxyxxy\nxyy\n1 5 4 6 3 2\n\n-----Sample Output"
    },
    {
        "number": 2696,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2697,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\nassert solution(\"5\") == \"5\"\n"
    },
    {
        "number": 2698,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11\"\n"
    },
    {
        "number": 2699,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4 10 22\"\nassert solution(stdin) == \"2 5 11 23\"\nassert solution(stdin) == \"4 10 22 46\"\nassert solution(stdin) == \"3 6 12 24\"\nassert solution(stdin) == \"1 4 10 22 23\"\n"
    },
    {
        "number": 2700,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"499998500001\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2701,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2702,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2703,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '30'\n"
    },
    {
        "number": 2704,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n\n-----Constraints-----\n- 1 \u2264 N \u2264 105\n- 0 \u2264 Q \u2264 105\n\n-----Subtasks-----\n- 1: 1 points\n- 2: 2 points\n- 3: 3 points\n\n-----Example-----\nInput 3:\n1 2\n1\n1\n2\n\nOutput:\nYes\nYes\n\nInput 4:\n2 4\n1 3\n1\n2\n3\n4\n\nOutput:\nYes\nYes\nYes\nNo\nNo\n\n-----Constraints-----\n- 1 \u2264 N \u2264 105\n- 0 \u2264 Q \u2264 105\n\n-----Subtasks-----\n- 1: 1 points\n- 2: 2 points\n- 3: 3 points\n\n-----Example-----\nInput 5:\n1 2\n1\n1\n2\n3\n4\n5\n\nOutput:\nYes\nYes\nYes\nYes\nYes\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\nNo\n"
    },
    {
        "number": 2705,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2706,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2707,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"379\"\n"
    },
    {
        "number": 2708,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 50\n"
    },
    {
        "number": 2709,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Done\"\nassert solution(stdin) == \"Done\"\nassert solution(stdin) == \"Done\"\nassert solution(stdin) == \"Done\"\nassert solution(stdin) == \"Done\"\n"
    },
    {
        "number": 2710,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2711,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"acb\"\nassert solution(stdin) == \"def\"\nassert solution(stdin) == \"bac\"\nassert solution(stdin) == \"bac\"\nassert solution(stdin) == \"bac\"\n"
    },
    {
        "number": 2712,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"42\"\nassert solution(stdin) == \"34\"\nassert solution(stdin) == \"56\"\nassert solution(stdin) == \"12\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2713,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Legend\"\nassert solution(stdin) == \"Legend\"\nassert solution(stdin) == \"Legend\"\nassert solution(stdin) == \"Legend\"\nassert solution(stdin) == \"Legend\"\n"
    },
    {
        "number": 2714,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n\n-----Constraints-----\n\n1 <= t <= 10^5\n1 <= n, m <= 10^5\n1 <= u_i, v_i <= n\n\n\"\"\""
    },
    {
        "number": 2715,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(0) == \"4\"\nassert solution(1) == \"3 3 3 3\"\nassert solution(2) == \"3 3 3 3\"\nassert solution(3) == \"3 3 3 3\"\nassert solution(4) == \"3 3 3 3\"\n"
    },
    {
        "number": 2716,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"Unique\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2717,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2718,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"win\"\n"
    },
    {
        "number": 2719,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"True closed chains\"\nassert solution(stdin) == \"No true closed chains\"\nassert solution(stdin) == \"No floor closed chains\"\n"
    },
    {
        "number": 2720,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n\"\"\""
    },
    {
        "number": 2721,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"possible\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 2722,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"FLFRXFLXFRFLXFRF\"\nassert solution(stdin) == \"FLFRXFLXFRFLXFRF\"\nassert solution(stdin) == \"FLFRXFLXFRFLXFRF\"\nassert solution(stdin) == \"FLFRXFLXFRFLXFRF\"\nassert solution(stdin) == \"FLFRXFLXFRFLXFRF\"\n"
    },
    {
        "number": 2723,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"13\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2724,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2725,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 2726,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.500000'\nassert solution(stdin) == '5.500000'\nassert solution(stdin) == '11.266667'\n"
    },
    {
        "number": 2727,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 8\n"
    },
    {
        "number": 2728,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 6\"\n"
    },
    {
        "number": 2729,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '123.45'\nassert solution(stdin) == '123.45'\nassert solution(stdin) == '123.45'\nassert solution(stdin) == '123.45'\nassert solution(stdin) == '123.45'\n"
    },
    {
        "number": 2730,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0.029351\"\nassert solution(stdin) == \"0.833333\"\nassert solution(stdin) == \"0.16667\"\nassert solution(stdin) == \"0.16667\"\nassert solution(stdin) == \"0.16667\"\n"
    },
    {
        "number": 2731,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\nassert solution(stdin) == \"abc\"\n"
    },
    {
        "number": 2732,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1.5228490019\n"
    },
    {
        "number": 2733,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1.0\"\nassert solution(stdin) == \"2 1.0\"\nassert solution(stdin) == \"2 2.0\"\nassert solution(stdin) == \"2 2.0\"\nassert solution(stdin) == \"2 2.0\"\n"
    },
    {
        "number": 2734,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"31\"\n"
    },
    {
        "number": 2735,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2736,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2737,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2738,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2739,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"error\"\n"
    },
    {
        "number": 2740,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7770\"\nassert solution(stdin) == \"6050\"\nassert solution(stdin) == \"1022\"\n"
    },
    {
        "number": 2741,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"689\"\nassert solution(stdin) == \"924\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"16\"\nassert solution(stdin) == \"32\"\n"
    },
    {
        "number": 2742,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"6\"\nassert solution(input()) == \"4\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\nassert solution(input()) == \"0\"\n"
    },
    {
        "number": 2743,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"balanced\"\nassert solution(stdin) == \"left\"\nassert solution(stdin) == \"right\"\n"
    },
    {
        "number": 2744,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12 10 12\"\n"
    },
    {
        "number": 2745,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(s) == [\"word\",\"student\"]\nassert solution(s) == []\nassert solution(s) == []\nassert solution(s) == []\nassert solution(s) == []\n"
    },
    {
        "number": 2746,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\nassert solution(stdin) == 1\nassert solution(stdin) == 0\nassert solution(stdin) == 0\nassert solution(stdin) == 0\n"
    },
    {
        "number": 2747,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"5\",\"7\",\"7\",\"8\",\"8\",\"10\"]) == [3,4]\nassert solution([\"5\",\"7\",\"7\",\"8\",\"8\",\"10\"]) == [-1,-1]\n"
    },
    {
        "number": 2748,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"23\") == [\"ad\", \"ae\", \"af\", \"bd\", \"be\", \"bf\", \"cd\", \"ce\", \"cf\"]\nassert solution(\"4\") == [\"a\", \"b\", \"c\", \"d\"]\nassert solution(\"123\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert solution(\"1234\") == [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\nassert solution(\"123456789\") == [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"]\n"
    },
    {
        "number": 2749,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 1\"\n\n-----Sample Input-----\n2 2\n3\n2 1 1\n\n-----Sample Output-----\n1 1\n2 3\n\nBelow is an example of an invalid solution:\n1 2\n3 1\n\nThis is because the squares painted in Color 1 are not 4-connected.\n"
    },
    {
        "number": 2750,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 2751,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12 3\"\n"
    },
    {
        "number": 2752,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2753,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Saturday\"\n"
    },
    {
        "number": 2754,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"inf\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\n"
    },
    {
        "number": 2755,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 2756,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"you're toast\"\n"
    },
    {
        "number": 2757,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n\nSample Input 3:\n2\n0 0 0 0\nSample Output 3:\n1\n"
    },
    {
        "number": 2758,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Red 0.937500000\"\nassert solution(stdin) == \"Lilac-Cream Tortie 0.062500000\"\nassert solution(stdin) == \"Blue 0.375000000\"\nassert solution(stdin) == \"Cream 0.250000000\"\nassert solution(stdin) == \"Blue-Cream Tortie 0.187500000\"\n"
    },
    {
        "number": 2759,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 2760,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2761,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"no triangle\"\n"
    },
    {
        "number": 2762,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2763,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"invalid grille\"\n"
    },
    {
        "number": 2764,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Diamond!\"\n"
    },
    {
        "number": 2765,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"non-canonical\"\nassert solution(stdin) == \"canonical\"\n"
    },
    {
        "number": 2766,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.056241426'\n"
    },
    {
        "number": 2767,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2768,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2769,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2'\n"
    },
    {
        "number": 2770,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2771,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2772,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5.238095'\n"
    },
    {
        "number": 2773,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 2774,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2775,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2776,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2777,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2778,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2779,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '12'\n"
    },
    {
        "number": 2780,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1.00000\"\nassert solution(stdin) == \"1.00000\"\nassert solution(stdin) == \"1.00000\"\nassert solution(stdin) == \"1.00000\"\nassert solution(stdin) == \"1.00000\"\n"
    },
    {
        "number": 2781,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2782,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2783,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2784,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Uptown Midtown\"\nassert solution(stdin) == \"Midtown Uptown Downtown\"\nassert solution(stdin) == \"Downtown Midtown\"\nassert solution(stdin) == \"Uptown Downtown\"\nassert solution(stdin) == \"Uptown\"\n"
    },
    {
        "number": 2785,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\n"
    },
    {
        "number": 2786,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == 3\n"
    },
    {
        "number": 2787,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '729.09706162045'\n"
    },
    {
        "number": 2788,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 2789,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2790,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"39\"\nassert solution(stdin) == \"40\"\nassert solution(stdin) == \"79/2\"\nassert solution(stdin) == \"350000027/5\"\n"
    },
    {
        "number": 2791,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2792,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2793,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2794,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"1002\"\nassert solution(stdin) == \"1002\"\nassert solution(stdin) == \"1002\"\nassert solution(stdin) == \"1002\"\n"
    },
    {
        "number": 2795,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4.236067\"\n"
    },
    {
        "number": 2796,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2797,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2798,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"RUBEN\"\nassert solution(stdin) == \"ALBERT\"\n"
    },
    {
        "number": 2799,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.631357306601'\nassert solution(stdin) == '0.920138888889'\nassert solution(stdin) == '0.920138888889'\nassert solution(stdin) == '0.920138888889'\nassert solution(stdin) == '0.920138888889'\n"
    },
    {
        "number": 2800,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Alice can win.\"\nassert solution(stdin) == \"Bob will win.\"\nassert solution(stdin) == \"Alice can win.\"\nassert solution(stdin) == \"Bob will win.\"\nassert solution(stdin) == \"Alice can win.\"\n"
    },
    {
        "number": 2801,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"100\"\n"
    },
    {
        "number": 2802,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"infinite\"\nassert solution(stdin) == \"infinite\"\nassert solution(stdin) == \"infinite\"\nassert solution(stdin) == \"infinite\"\nassert solution(stdin) == \"infinite\"\n"
    },
    {
        "number": 2803,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '?', 'incorrect'\n"
    },
    {
        "number": 2804,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"dobar je ovaj marko marulic\"\nassert solution(stdin) == \"nama je profesor reko da to ne treba za lektiru al onda je bila buka i nisam ga cuo pa jel bi mi mogli dat bodove\"\nassert solution(stdin) == \"nama je profesor reko da to ne treba za lektiru al onda je bila buka i nisam ga cuo pa jel bi mi mogli dat bodove\"\nassert solution(stdin) == \"dobar je ovaj marko marulic\"\nassert solution(stdin) == \"nama je profesor reko da to ne treba za lektiru al onda je bila buka i nisam ga cuo pa jel bi mi mogli dat bodove\"\n"
    },
    {
        "number": 2805,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(1) == 0\nassert solution(10) == 5\nassert solution(100) == 100\nassert solution(1000) == 100000\nassert solution(10000) == 100000000\n"
    },
    {
        "number": 2806,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 0\"\nassert solution(stdin) == \"3 1 2\"\nassert solution(stdin) == \"3 1 2 3\"\nassert solution(stdin) == \"3 1 2 3 4\"\nassert solution(stdin) == \"3 1 2 3 4 5\"\n"
    },
    {
        "number": 2807,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2808,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2809,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1978\"\n"
    },
    {
        "number": 2810,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2811,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n"
    },
    {
        "number": 2812,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"at\"\nassert solution(stdin) == \"ab\"\nassert solution(stdin) == \"ab\"\nassert solution(stdin) == \"ab\"\nassert solution(stdin) == \"ab\"\n"
    },
    {
        "number": 2813,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"haiku\"\n"
    },
    {
        "number": 2814,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2815,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"49401\"\nassert solution(stdin) == \"49401\"\nassert solution(stdin) == \"49401\"\nassert solution(stdin) == \"49401\"\nassert solution(stdin) == \"49401\"\n"
    },
    {
        "number": 2816,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == \"3\"\n"
    },
    {
        "number": 2817,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '112.5'\nassert solution(stdin) == '13.333333333333334'\nassert solution(stdin) == '13.333333333333334'\nassert solution(stdin) == '13.333333333333334'\nassert solution(stdin) == '13.333333333333334'\n"
    },
    {
        "number": 2818,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2819,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Alice wins\"\nassert solution(stdin) == \"Bob wins\"\nassert solution(stdin) == \"Alice wins\"\nassert solution(stdin) == \"Bob wins\"\nassert solution(stdin) == \"Alice wins\"\n"
    },
    {
        "number": 2820,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2821,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"6\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2822,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 2823,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2824,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2825,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"17\"\n"
    },
    {
        "number": 2826,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 2827,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2828,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"DA\"\nassert solution(stdin) == \"bacdefghijklmnopqrstuvwxyz\"\nassert solution(stdin) == \"NE\"\n"
    },
    {
        "number": 2829,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 17\n\nSample Input 3:\nA\nSample Output 3:\n1\n"
    },
    {
        "number": 2830,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == -1\n"
    },
    {
        "number": 2831,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2832,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '66670000'\n"
    },
    {
        "number": 2833,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"dmd\"\nassert solution(stdin) == \"aaa\"\nassert solution(stdin) == \"rrm\"\nassert solution(stdin) == \"kki\"\nassert solution(stdin) == \"oor\"\n"
    },
    {
        "number": 2834,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2835,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 26\n"
    },
    {
        "number": 2836,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"49\"\n"
    },
    {
        "number": 2837,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"11.00000\"\n\"\"\""
    },
    {
        "number": 2838,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"((2+(2*2)+2))\"\n) == \"2+(2*2)+2\"\nassert solution(\n    \"((2+(2*2)+2))\"\n) == \"2+(2*2)+2\"\nassert solution(\n    \"((2+(2*2)+2))\"\n) == \"2+(2*2)+2\"\nassert solution(\n    \"((2+(2*2)+2))\"\n) == \"2+(2*2)+2\"\nassert solution(\n    \"((2+(2*2)+2))\"\n) == \"2+(2*2)+2\"\n"
    },
    {
        "number": 2839,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2840,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2841,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 2842,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"132\"\n"
    },
    {
        "number": 2843,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2844,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"KAKTUS\"\n"
    },
    {
        "number": 2845,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"24\"\n"
    },
    {
        "number": 2846,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2847,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 3 4 5 6 7 8\"\n"
    },
    {
        "number": 2848,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"OVERFLOW\"\n"
    },
    {
        "number": 2849,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 227\n"
    },
    {
        "number": 2850,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\n"
    },
    {
        "number": 2851,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2852,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2.220889579'\nassert solution(stdin) == '2.599738456'\nassert solution(stdin) == '2.220889579'\nassert solution(stdin) == '2.220889579'\nassert solution(stdin) == '2.220889579'\n"
    },
    {
        "number": 2853,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Connected\"\n"
    },
    {
        "number": 2854,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0 0\"\n"
    },
    {
        "number": 2855,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2.000000'\n"
    },
    {
        "number": 2856,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 2857,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2858,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2859,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2860,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2861,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2862,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9 3 3 3 3\"\n"
    },
    {
        "number": 2863,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2864,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"AGM\"\nassert solution(stdin) == \"E??\"\nassert solution(stdin) == \"E??\"\nassert solution(stdin) == \"E??\"\nassert solution(stdin) == \"E??\"\n"
    },
    {
        "number": 2865,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"bumper tap at time 8\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\nassert solution(stdin) == \"safe\"\n"
    },
    {
        "number": 2866,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1'\nassert solution(stdin) == '2'\nassert solution(stdin) == '3'\nassert solution(stdin) == '4'\nassert solution(stdin) == '5'\n"
    },
    {
        "number": 2867,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"51\"\n"
    },
    {
        "number": 2868,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'aaaaaa'\nassert solution(stdin) == 'aaaaaa'\nassert solution(stdin) == 'aaaaaa'\nassert solution(stdin) == 'aaaaaa'\nassert solution(stdin) == 'aaaaaa'\n"
    },
    {
        "number": 2869,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"III\"\nassert solution(stdin) == \"IV\"\nassert solution(stdin) == \"IX\"\nassert solution(stdin) == \"LVIII\"\nassert solution(stdin) == \"MCMXCIV\"\n"
    },
    {
        "number": 2870,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2871,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2872,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"TGIF\"\nassert solution(stdin) == \"TGF\"\nassert solution(stdin) == \"TGF\"\nassert solution(stdin) == \"TGF\"\nassert solution(stdin) == \"TGF\"\n"
    },
    {
        "number": 2873,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 10\n"
    },
    {
        "number": 2874,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2875,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 2876,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2877,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'bometil'\nassert solution(stdin) =='mobitel'\nassert solution(stdin) == 'abcdefghijk'\nassert solution(stdin) == 'abcdefghijk'\nassert solution(stdin) == 'abcdefghijk'\n"
    },
    {
        "number": 2878,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 2879,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"No solution\"\n"
    },
    {
        "number": 2880,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2881,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\nassert solution(stdin) == \"no\"\n"
    },
    {
        "number": 2882,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(3) == [\n  \"((()))\",\n  \"(()())\",\n  \"(())()\",\n  \"()(())\",\n  \"()()()\"\n]\nassert solution(4) == [\n  \"((()))\",\n  \"((()))\",\n  \"((()()))\",\n  \"((()()()))\",\n  \"()(())\",\n  \"()()()()\"\n]\nassert solution(5) == [\n  \"((((()))\",\n  \"((((()))\",\n  \"((((()()))\",\n  \"((((()()()))\",\n  \"((((()()()()))\",\n  \"((((()()()()()))\",\n  \"()(())\",\n  \"()()()()()\"\n]\n"
    },
    {
        "number": 2883,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"[1,3]\",\"[2,6]\",\"[8,10]\",\"[15,18]\"]) == \"[[1,6],[8,10],[15,18]]\"\nassert solution([\"[1,4]\",\"[4,5]\"]) == \"[[1,5]]\"\nassert solution([\"[1,4],[4,5]\"]) == \"[[1,5]]\"\nassert solution([\"[1,4],[4,5],[8,10]\",\"[15,18]\"]) == \"[[1,5],[8,10],[15,18]]\"\nassert solution([\"[1,4],[4,5],[8,10]\",\"[15,18]\"]) == \"[[1,5],[8,10],[15,18]]\"\n"
    },
    {
        "number": 2884,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"10\",\"1\",\"2\",\"7\",\"6\",\"1\",\"5\"]) == \"1 2 7 6 1 5\"\nassert solution([\"10\",\"1\",\"2\",\"7\",\"6\",\"1\",\"5\"]) == \"1 2 7 6 1 5\"\nassert solution([\"10\",\"1\",\"2\",\"7\",\"6\",\"1\",\"5\"]) == \"1 2 7 6 1 5\"\nassert solution([\"10\",\"1\",\"2\",\"7\",\"6\",\"1\",\"5\"]) == \"1 2 7 6 1 5\"\nassert solution([\"10\",\"1\",\"2\",\"7\",\"6\",\"1\",\"5\"]) == \"1 2 7 6 1 5\"\n"
    },
    {
        "number": 2885,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution([\"[1,2],[3,5],[6,7],[8,10],[12,16]\", \"[4,8]\"]) == \"[1,5],[6,9],[12,16]\", \"Expected [1,5],[6,9],[12,16]\"\nassert solution([\"[1,2],[3,5],[6,7],[8,10],[12,16]\", \"[4,8]\"]) == \"[1,2],[3,10],[12,16]\", \"Expected [1,2],[3,10],[12,16]\"\nassert solution([\"[1,2],[3,5],[6,7],[8,10],[12,16]\", \"[4,8]\"]) == \"[1,2],[3,10],[12,16]\", \"Expected [1,2],[3,10],[12,16]\"\nassert solution([\"[1,2],[3,5],[6,7],[8,10],[12,16]\", \"[4,8]\"]) == \"[1,2],[3,10],[12,16]\", \"Expected [1,2],[3,10],[12,16]\"\nassert solution([\"[1,2],[3,5],[6,7],[8,10],[12,16]\", \"[4,8]\"]) == \"[1,2],[3,10],[12,16]\", \"Expected [1,2],[3,10],[12,16]\"\n"
    },
    {
        "number": 2886,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(input()) == -1\nassert solution(input()) == -1\nassert solution(input()) == -1\nassert solution(input()) == -1\nassert solution(input()) == -1\n"
    },
    {
        "number": 2887,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5 12 4\"\nassert solution(stdin) == \"5 12 4\"\nassert solution(stdin) == \"5 12 4\"\nassert solution(stdin) == \"5 12 4\"\nassert solution(stdin) == \"5 12 4\"\n"
    },
    {
        "number": 2888,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2 12\") == \"390\"\nassert solution(\"4 1\") == \"120\"\nassert solution(\"4 1 6 2\") == \"120\"\nassert solution(\"4 1 6 2 3\") == \"120\"\nassert solution(\"4 1 6 2 3 4\") == \"120\"\n"
    },
    {
        "number": 2889,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"no such mower\"\nassert solution(stdin) == \"Grass Slayer 2000,9999,10,120,120\"\nassert solution(stdin) == \"Slow-Mowe,999,1,120,240\"\nassert solution(stdin) == \"Eco-cut X2,5499,2,25,35\"\nassert solution(stdin) == \"Mowepower,5499,3,25,35\"\n"
    },
    {
        "number": 2890,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n"
    },
    {
        "number": 2891,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '-0.001191480807419'\nassert solution(stdin) == '0.0000489086'\nassert solution(stdin) == '0.00'\nassert solution(stdin) == '0.00'\nassert solution(stdin) == '0.00'\n"
    },
    {
        "number": 2892,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\nassert solution(stdin) == \"7\"\n"
    },
    {
        "number": 2893,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(9, [9, 1, 0, 5, 4]) == 6\nassert solution(9, [9, 1, 0, 5, 4]) == 6\nassert solution(9, [9, 1, 0, 5, 4]) == 6\nassert solution(9, [9, 1, 0, 5, 4]) == 6\nassert solution(9, [9, 1, 0, 5, 4]) == 6\n"
    },
    {
        "number": 2894,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"80.00 0.50 2.00 1.50 80.00\"\nassert solution(stdin) == \"80.00 0.50 2.00 1.50 80.00\"\nassert solution(stdin) == \"80.00 0.50 2.00 1.50 80.00\"\nassert solution(stdin) == \"80.00 0.50 2.00 1.50 80.00\"\nassert solution(stdin) == \"80.00 0.50 2.00 1.50 80.00\"\n"
    },
    {
        "number": 2895,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"60\"\n"
    },
    {
        "number": 2896,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 2897,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"neither\"\nassert solution(stdin) == \"decimal\"\nassert solution(stdin) == \"binary\"\nassert solution(stdin) == \"binary\"\nassert solution(stdin) == \"binary\"\n"
    },
    {
        "number": 2898,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2899,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"23 42\"\nassert solution(stdin) == \"42 23\"\nassert solution(stdin) == \"23 42\"\nassert solution(stdin) == \"23 42\"\nassert solution(stdin) == \"23 42\"\n"
    },
    {
        "number": 2900,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"BABA\") == \"2\"\nassert solution(\"BABA\") == \"0\"\nassert solution(\"BABA\") == \"1\"\nassert solution(\"BABA\") == \"0\"\nassert solution(\"BABA\") == \"1\"\n"
    },
    {
        "number": 2901,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"yes\"\n"
    },
    {
        "number": 2902,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2903,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"+ 7 23\"\n) == \"23\"\nassert solution(\n    \"? 8\"\n) == \"8\"\nassert solution(\n    \"+ 3 17\"\n) == \"17\"\nassert solution(\n    \"? 8\"\n) == \"8\"\nassert solution(\n    \"+ 3 17\"\n) == \"17\"\n"
    },
    {
        "number": 2904,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 2905,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2906,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2907,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'Boris'\nassert solution(stdin) == 'Colleague'\n"
    },
    {
        "number": 2908,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"NO\"\n"
    },
    {
        "number": 2909,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Possible\"\nassert solution(stdin) == \"Impossible\"\n"
    },
    {
        "number": 2910,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\nassert solution(stdin) == \"3 3 3\"\n"
    },
    {
        "number": 2911,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '60'\n"
    },
    {
        "number": 2912,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"kattis\"\nassert solution(stdin) == \"cat\"\nassert solution(stdin) == \"is\"\nassert solution(stdin) == \"3 2\"\nassert solution(stdin) == \"4 1\"\n"
    },
    {
        "number": 2913,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 2 3.\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n.....\\n..."
    },
    {
        "number": 2914,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '0.888888889'\nassert solution(stdin) == '0.888888889'\nassert solution(stdin) == '0.888888889'\nassert solution(stdin) == '0.888888889'\nassert solution(stdin) == '0.888888889'\n"
    },
    {
        "number": 2915,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '90'\n"
    },
    {
        "number": 2916,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 2\n"
    },
    {
        "number": 2917,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n\nSample Input:\n1\nSample Output:\n2\n"
    },
    {
        "number": 2918,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 2 0\"\nassert solution(stdin) == \"1 2 0\"\n"
    },
    {
        "number": 2919,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\nassert solution(stdin) == \"0\"\n"
    },
    {
        "number": 2920,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"6\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2921,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"fire 2\"\nassert solution(stdin) == \"water 10\"\nassert solution(stdin) == \"def solution(stdin) -> str\"\nassert solution(stdin) == \"impossible\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 2922,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"YES\"\n"
    },
    {
        "number": 2923,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 13\n"
    },
    {
        "number": 2924,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Ride on!\\n\"\n"
    },
    {
        "number": 2925,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"four\"\nassert solution(stdin) == \"two\"\nassert solution(stdin) == \"three\"\nassert solution(stdin) == \"five\"\nassert solution(stdin) == \"one\"\n"
    },
    {
        "number": 2926,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"datastructure 3 query range sum\") == \"geometry 3 euclid range vertex\"\nassert solution(\"datastructure 3 query range sum\") == \"graph 3 query vertex hamiltonian\"\nassert solution(\"datastructure 3 query range sum\") == \"math 3 hamiltonian sum euclid\"\nassert solution(\"datastructure 3 query range sum\") == \"consider the hamiltonian graph where each vertex corresponds\"\nassert solution(\"datastructure 3 query range sum\") == \"consider the hamiltonian graph where each vertex corresponds\"\n"
    },
    {
        "number": 2927,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Touchdown\"\nassert solution(stdin) == \"Safety\"\nassert solution(stdin) == \"Nothing\"\n"
    },
    {
        "number": 2928,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '500.000000'\nassert solution(stdin) == '624.875000'\nassert solution(stdin) == '625.000000'\nassert solution(stdin) == '500.000000'\nassert solution(stdin) == '500.000000'\n"
    },
    {
        "number": 2929,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 4\n"
    },
    {
        "number": 2930,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 3\n"
    },
    {
        "number": 2931,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"1 3\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"3 5\"\nassert solution(stdin) == \"1 5\"\n"
    },
    {
        "number": 2932,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"prognova 4\") == \"Yes\"\nassert solution(\"prognova 4\") == \"No\"\nassert solution(\"prognova 4\") == \"Yes\"\nassert solution(\"prognova 4\") == \"No\"\nassert solution(\"prognova 4\") == \"Yes\"\n"
    },
    {
        "number": 2933,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1002\"\nassert solution(stdin) == \"1002\"\nassert solution(stdin) == \"1002\"\nassert solution(stdin) == \"1002\"\nassert solution(stdin) == \"1002\"\n"
    },
    {
        "number": 2934,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"2\") == \"7\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\n"
    },
    {
        "number": 2935,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '45'\n"
    },
    {
        "number": 2936,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 22\n"
    },
    {
        "number": 2937,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\nassert solution(stdin) == \"2 2\"\n"
    },
    {
        "number": 2938,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\nassert solution(stdin) == \"No\"\n"
    },
    {
        "number": 2939,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2940,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2941,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"doctor takes a break\"\nassert solution(stdin) == \"doctor takes a break\"\nassert solution(stdin) == \"doctor takes a break\"\nassert solution(stdin) == \"doctor takes a break\"\nassert solution(stdin) == \"doctor takes a break\"\n"
    },
    {
        "number": 2942,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5\") == \"5\"\nassert solution(\"1\") == \"1\"\nassert solution(\"2\") == \"2\"\nassert solution(\"3\") == \"3\"\nassert solution(\"4\") == \"4\"\n"
    },
    {
        "number": 2943,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3 7'\nassert solution(stdin) == '3 7'\nassert solution(stdin) == '3 7'\nassert solution(stdin) == '3 7'\nassert solution(stdin) == '3 7'\n"
    },
    {
        "number": 2944,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 1\n"
    },
    {
        "number": 2945,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2946,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '98950'\n"
    },
    {
        "number": 2947,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 2948,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"ABBBBBA\"\n"
    },
    {
        "number": 2949,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2950,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 5\n\nSample Input:\n6\n2 1 8 8 2 3\nSample Output:\n3\n"
    },
    {
        "number": 2951,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"12\"\n"
    },
    {
        "number": 2952,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"6 2 2 2\") == \"possible\"\nassert solution(\n    \"6 2 2 2\") == \"impossible\"\nassert solution(\n    \"6 2 2 2\") == \"possible\"\nassert solution(\n    \"6 2 2 2\") == \"impossible\"\nassert solution(\n    \"6 2 2 2\") == \"possible\"\n"
    },
    {
        "number": 2953,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2954,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2955,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"00010\"\nassert solution(stdin) == \"00010\"\nassert solution(stdin) == \"00010\"\nassert solution(stdin) == \"00010\"\nassert solution(stdin) == \"00010\"\n"
    },
    {
        "number": 2956,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"LRRRSRL\"\n) == 44\nassert solution(\n    \"LRRRSRL\"\n) == 0\nassert solution(\n    \"LRRRSRL\"\n) == 0\nassert solution(\n    \"LRRRSRL\"\n) == 0\nassert solution(\n    \"LRRRSRL\"\n) == 0\n"
    },
    {
        "number": 2957,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"5 2\") == \"3\"\nassert solution(\"5 3\") == \"3\"\nassert solution(\"5 4\") == \"3\"\nassert solution(\"5 5\") == \"3\"\nassert solution(\"5 6\") == \"3\"\n"
    },
    {
        "number": 2958,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"10\"\n"
    },
    {
        "number": 2959,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin
    },
    {
        "number": 2960,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"9\"\n\nSample Input:\n5\nSample Output:\n5\n"
    },
    {
        "number": 2961,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Yes\"\n"
    },
    {
        "number": 2962,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4200\"\n"
    },
    {
        "number": 2963,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2.0'\nassert solution(stdin) == '2.0'\nassert solution(stdin) == '2.0'\nassert solution(stdin) == '2.0'\nassert solution(stdin) == '2.0'\n"
    },
    {
        "number": 2964,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '5.0'\nassert solution(stdin) == '5.0'\nassert solution(stdin) == '5.0'\nassert solution(stdin) == '5.0'\nassert solution(stdin) == '5.0'\n"
    },
    {
        "number": 2965,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"2\"\nassert solution(stdin) == \"3\"\nassert solution(stdin) == \"4\"\nassert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2966,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n    \"5 3 2 1 2\"\n) == \"2\"\nassert solution(\n    \"5 3 2 1 2\"\n) == \"2\"\nassert solution(\n    \"5 3 2 1 2\"\n) == \"2\"\nassert solution(\n    \"5 3 2 1 2\"\n) == \"2\"\nassert solution(\n    \"5 3 2 1 2\"\n) == \"2\"\n"
    },
    {
        "number": 2967,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2\"\n\nSample Input:\n3 5\n1 5\n6 3\n14 6\nSample Output:\n1\n"
    },
    {
        "number": 2968,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1600\"\n"
    },
    {
        "number": 2969,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"possible\"\nassert solution(stdin) == \"impossible\"\n"
    },
    {
        "number": 2970,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"7\"\n"
    },
    {
        "number": 2971,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2972,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"36\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"36\"\nassert solution(stdin) == \"36\"\n"
    },
    {
        "number": 2973,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '3.000000000'\nassert solution(stdin) == '3.000000000'\nassert solution(stdin) == '3.000000000'\nassert solution(stdin) == '3.000000000'\nassert solution(stdin) == '3.000000000'\n"
    },
    {
        "number": 2974,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\nassert solution(stdin) == \"2 3\"\n"
    },
    {
        "number": 2975,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"5\"\n"
    },
    {
        "number": 2976,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"da\"\nassert solution(stdin) == \"da\"\nassert solution(stdin) == \"da\"\nassert solution(stdin) == \"da\"\nassert solution(stdin) == \"da\"\n"
    },
    {
        "number": 2977,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"stripes, black stripe, yellow\"\nassert solution(stdin) == \"stripes, green stripe, yellow\"\nassert solution(stdin) == \"stripes, red stripe, yellow\"\nassert solution(stdin) == \"stripes, green stripe, white\"\nassert solution(stdin) == \"stripes, red stripe, white\"\n"
    },
    {
        "number": 2978,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"different\"\nassert solution(stdin) == \"same\"\nassert solution(stdin) == \"same\"\nassert solution(stdin) == \"same\"\nassert solution(stdin) == \"same\"\n"
    },
    {
        "number": 2979,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"8\"\n"
    },
    {
        "number": 2980,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"LWW\"\nassert solution(stdin) == \"LWW\"\nassert solution(stdin) == \"LWW\"\nassert solution(stdin) == \"LWW\"\nassert solution(stdin) == \"LWW\"\n"
    },
    {
        "number": 2981,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '2.00111219'\n"
    },
    {
        "number": 2982,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"63\"\n"
    },
    {
        "number": 2983,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '1.60965532263'\nassert solution(stdin) == 'impossible'\n"
    },
    {
        "number": 2984,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"27\"\n"
    },
    {
        "number": 2985,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\n"
    },
    {
        "number": 2986,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"my[]name]] is]] steva<en]<n halim]]]]]\")\nassert solution(\"my[]name]] is]] steva<en]<n halim]]]]]\")\nassert solution(\"my[]name]] is]] steva<en]<n halim]]]]]\")\nassert solution(\"my[]name]] is]] steva<en]<n halim]]]]]\")\nassert solution(\"my[]name]] is]] steva<en]<n halim]]]]]\")\n"
    },
    {
        "number": 2987,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == '23029'\nassert solution(stdin) == '437'\nassert solution(stdin) == '611'\nassert solution(stdin) == '1345'\nassert solution(stdin) == '4546'\n"
    },
    {
        "number": 2988,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 6\n"
    },
    {
        "number": 2989,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"1\"\nassert solution(stdin) == \"10\"\nassert solution(stdin) == \"1\"\n"
    },
    {
        "number": 2990,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"Shoresy Reilly\"\nassert solution(stdin) == \"Shoresy\"\nassert solution(stdin) == \"Shoresy\"\nassert solution(stdin) == \"Shoresy\"\nassert solution(stdin) == \"Shoresy\"\n"
    },
    {
        "number": 2991,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"1 4 2 5\"\nassert solution(stdin) == \"1 4 2 5\"\nassert solution(stdin) == \"1 4 2 5\"\nassert solution(stdin) == \"1 4 2 5\"\nassert solution(stdin) == \"1 4 2 5\"\n"
    },
    {
        "number": 2992,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"4\"\n"
    },
    {
        "number": 2993,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == 'ABAB'\nassert solution(stdin) == 'ABAB'\nassert solution(stdin) == 'ABAB'\nassert solution(stdin) == 'ABAB'\nassert solution(stdin) == 'ABAB'\n"
    },
    {
        "number": 2994,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"a..\"\nassert solution(stdin) == \"a..\"\nassert solution(stdin) == \"a..\"\nassert solution(stdin) == \"a..\"\nassert solution(stdin) == \"a..\"\n"
    },
    {
        "number": 2995,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"battery_acid drain_cleaner antifreeze cold_medicine lantern_fuel\"\nassert solution(stdin) == \"battery_acid drain_cleaner antifreeze cold_medicine lantern_fuel\"\nassert solution(stdin) == \"battery_acid drain_cleaner antifreeze cold_medicine lantern_fuel\"\nassert solution(stdin) == \"battery_acid drain_cleaner antifreeze cold_medicine lantern_fuel\"\nassert solution(stdin) == \"battery_acid drain_cleaner antifreeze cold_medicine lantern_fuel\"\n"
    },
    {
        "number": 2996,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"80\"\n"
    },
    {
        "number": 2997,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\n
    },
    {
        "number": 2998,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(\"uu\") == \"icpc\"\nassert solution(\"uu\") == \"icpc\"\nassert solution(\"uu\") == \"icpc\"\nassert solution(\"uu\") == \"icpc\"\nassert solution(\"uu\") == \"icpc\"\n"
    },
    {
        "number": 2999,
        "checkpoint": "350M",
        "pass": 0,
        "answer": "assert solution(stdin) == \"3\"\nassert solution(stdin) == \"BorgQueen\"\nassert solution(stdin) == \"Terminator\"\nassert solution(stdin) == \"Megatron\"\nassert solution(stdin) == \"Voldemort\"\n"
    }
]