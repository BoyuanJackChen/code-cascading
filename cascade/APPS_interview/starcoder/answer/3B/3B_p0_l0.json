[
    {
        "number": 0,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    accordion = []\n    stack = []\n    i = 0\n\n    while i < len(s):\n        if s[i] == '[':\n            stack.append(i)\n        elif s[i] == ']':\n            if not stack:\n                return -1\n            j = stack.pop()\n            accordion.append(s[j:i+1])\n        i += 1\n\n    if not stack:\n        return max(len(a) for a in accordion)\n    else:\n        return -1"
    },
    {
        "number": 1,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = 0\n    max_num = 0\n\n    for i in range(1, x + 1):\n        digits_sum = sum(int(digit) for digit in str(i))\n        if digits_sum > max_sum:\n            max_sum = digits_sum\n            max_num = i\n\n    return str(max_num)"
    },
    {
        "number": 2,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lucky_years = [100, 4000, 5000, 10000, 40000, 50000, 100000, 400000, 500000, 1000000, 4000000, 5000000, 10000000, 40000000, 50000000, 100000000, 400000000, 500000000, 1000000000, 4000000000, 5000000000, 10000000000, 40000000000, 50000000000, 100000000000, 400000000000, 500000000000, 1000000000000, 4000000000000, 5000000000000, 10000000000000, 40000000000000, 50000000000000, 100000000000000, 400000000000000, 500000000000000, 1000000000000000, 4000000000000000, 5000000000000000, 10000000000000000, 40000000000000000, 50000000000000000, 100000000000000000, 400000000000000000, 500000000000000000, 1000000000000000000, 4000000000000000000, 5000000000000000000, 10000000000000000000, 40000000000000000000, 50000000000000000000, 100000000000000000000, 400000000000000000000, 500000000000000000000, 1000000000000000000000, 4000000000000000000000, 5000000000000000000000, 10000000000000000000000, 40000000000000000000000, 50000000000000000000000, 100000000000000000000000, 400000000000000000000000, 500000000000000000000000, 100"
    },
    {
        "number": 3,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    painters = []\n    for _ in range(q):\n        l, r = map(int, stdin.split())\n        painters.append((l, r))\n\n    painters.sort(key=lambda x: x[0])\n\n    max_painted = 0\n    for painter in painters:\n        if painter[0] > 1:\n            max_painted += painter[0] - 1\n        else:\n            max_painted += painter[0]\n\n    return str(max_painted)"
    },
    {
        "number": 4,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, hh, mm = map(int, stdin.split())\n    y = 1\n    while True:\n        if str(x * y).count('7') > 0:\n            return str(y)\n        y += 1"
    },
    {
        "number": 5,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    a, b = min(pos - l, r - pos), max(pos - l, r - pos)\n    return str(min(a + b, n - a - b))"
    },
    {
        "number": 6,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.split()[0])\n    for _ in range(queries):\n        n, x = map(int, stdin.split()[1:])\n        heads = x\n        types = []\n        for _ in range(n):\n            d, h = map(int, stdin.split()[1:])\n            types.append((d, h))\n        types.sort(key=lambda x: (-x[0], x[1]))\n        for i in range(len(types)):\n            d, h = types[i]\n            if heads >= d:\n                heads -= d\n                if heads >= h:\n                    heads += h\n                else:\n                    heads = 0\n            else:\n                break\n        if heads == 0:\n            print(-1)\n        else:\n            print(i + 1)\n    return \"\""
    },
    {
        "number": 7,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = 0\n    grains = 0\n    sparrows = 0\n    while grains < n:\n        days += 1\n        grains += m\n        sparrows += 1\n        if grains >= n:\n            break\n    return str(days)"
    },
    {
        "number": 8,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split()\n    suited_tiles = [t for t in tiles if t[0].isdigit()]\n    suited_tiles.sort()\n    mentsu_count = 0\n    for i in range(len(suited_tiles) - 1):\n        if suited_tiles[i][0] == suited_tiles[i + 1][0]:\n            mentsu_count += 1\n    return str(mentsu_count)"
    },
    {
        "number": 9,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[1:])\n    sofas = []\n    for _ in range(int(stdin.split()[0])):\n        x1, y1, x2, y2 = map(int, stdin.split()[1:])\n        sofas.append((x1, y1, x2, y2))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, stdin.split()[1:])\n\n    def is_valid(x, y, cnt_l, cnt_r, cnt_t, cnt_b):\n        for i in range(cnt_l):\n            if sofas[i][0] == x and sofas[i][1] == y:\n                return False\n        for i in range(cnt_r):\n            if sofas[i][2] == x and sofas[i][3] == y:\n                return False\n        for i in range(cnt_t):\n            if sofas[i][0] == x and sofas[i][1] == y:\n                return False\n        for i in range(cnt_b):\n            if sofas[i][2] == x and sofas[i][3] == y:\n                return False\n        return True\n\n    for i in range(n):\n        for j in range(m):\n            if is_valid(i, j, cnt_l, cnt_r, cnt_t, cnt_b):\n                print(i + 1)\n                return\n\n    print(-1)\n    return \"\"\n"
    },
    {
        "number": 10,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    min_days_off = 0\n    max_days_off = 0\n\n    for i in range(1, n + 1):\n        if i % 5 == 0:\n            min_days_off += 1\n            max_days_off += 1\n        else:\n            min_days_off += 1\n\n    return str(min_days_off) + \" \" + str(max_days_off)"
    },
    {
        "number": 11,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    red_tiles = [True] * (n + 1)\n    blue_tiles = [True] * (n + 1)\n\n    for i in range(1, n + 1):\n        if i % a == 0 and red_tiles[i]:\n            red_tiles[i] = False\n        if i % b == 0 and blue_tiles[i]:\n            blue_tiles[i] = False\n\n    red_chocolates = 0\n    blue_chocolates = 0\n\n    for i in range(1, n + 1):\n        if red_tiles[i]:\n            red_chocolates += p\n        if blue_tiles[i]:\n            blue_chocolates += q\n\n    return str(max(red_chocolates, blue_chocolates))"
    },
    {
        "number": 12,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    trophies = list(stdin.split()[1])\n    golden_trophies = [i for i, t in enumerate(trophies) if t == 'G']\n    silver_trophies = [i for i, t in enumerate(trophies) if t == 'S']\n\n    def swap_trophies(i, j):\n        trophies[i], trophies[j] = trophies[j], trophies[i]\n        golden_trophies[i], golden_trophies[j] = golden_trophies[j], golden_trophies[i]\n        silver_trophies[i], silver_trophies[j] = silver_trophies[j], silver_trophies[i]\n\n    def max_beauty(i, j):\n        if i == j:\n            return 0\n        if i < j:\n            return max(max_beauty(i + 1, j), max_beauty(i, j - 1)) + 1\n        else:\n            return max(max_beauty(i, j - 1), max_beauty(i + 1, j)) + 1\n\n    max_beauty_without_swaps = max(max_beauty(0, len(golden_trophies) - 1), max_beauty(0, len(silver_trophies) - 1))\n    max_beauty_with_swaps = max(max_beauty(0, len(golden_trophies) - 1), max_beauty(0, len(silver_trophies) - 1))\n\n    for i in range(len(golden_trophies)):\n        for j in range(i + 1, len(golden_trophies)):\n            if golden_trophies[i] < golden_trophies[j]:\n                swap_trophies(i, j)\n                max_beauty_with_swaps = max(max_beauty_with_swaps, max_beauty(0, len(golden_trophies) - 1))\n                swap_trophies(i, j)\n\n    for i in range(len(silver_trophies)):\n        for j in range(i + 1, len(silver_trophies)):\n            if silver_trophies[i] < silver_trophies[j]:\n                swap_trophies(i, j)\n                max_beauty_with_swaps = max(max_beauty_with_swaps, max_beauty(0, len(silver_trophies) - 1))\n                swap_trophies(i, j)\n\n    return str(max_beauty_without_swaps) if max_beauty_without_swaps > max_beauty_with_swaps else str(max_beauty_with_swaps)"
    },
    {
        "number": 13,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    main_courses = list(map(int, stdin.split()))\n    courses = []\n    for i in range(n):\n        t = list(map(int, stdin.split()))\n        courses.append(t)\n\n    def dfs(course, visited, order):\n        if course in visited:\n            return False\n        visited.add(course)\n        for t in courses[course]:\n            if not dfs(t, visited, order):\n                return False\n        order.append(course)\n        return True\n\n    visited = set()\n    order = []\n    for i in range(n):\n        if not dfs(i, visited, order):\n            return -1\n\n    if len(order) < k:\n        return -1\n\n    m = len(order)\n    result = []\n    for i in range(m):\n        result.append(order[i])\n\n    return f\"{m}\\n{' '.join(map(str, result))}\""
    },
    {
        "number": 14,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n\n    def is_stack_sortable(a: list, s: list, b: list) -> bool:\n        while a:\n            a.pop(0)\n            s.append(a.pop(0))\n        while s:\n            s.pop()\n            b.append(s.pop())\n        return b == sorted(b, reverse=True)\n\n    def lexicographically_maximal_permutation(p: list) -> str:\n        for i in range(len(p)):\n            for j in range(i + 1, len(p)):\n                if p[i] > p[j]:\n                    return \" \".join(map(str, p))\n        return \" \".join(map(str, p))\n\n    if is_stack_sortable(p[:k], [], []):\n        return lexicographically_maximal_permutation(p[:k])\n    else:\n        return -1\n"
    },
    {
        "number": 15,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = [a]\n    for i in range(1, 1000001):\n        s.append(s[-1] + c)\n        if s[-1] == b:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 16,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split())\n    if cnt_1 + cnt_2 + cnt_3 + cnt_4 == 0:\n        return \"1\"\n\n    def is_regular(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if not stack:\n                    return False\n                stack.pop()\n        return not stack\n\n    def is_valid(s: str) -> bool:\n        stack = []\n        for c in s:\n            if c == \"(\":\n                stack.append(c)\n            elif c == \")\":\n                if not stack:\n                    return False\n                stack.pop()\n            elif c == \"+\":\n                if not stack or stack[-1]!= \"1\":\n                    return False\n        return not stack\n\n    def dfs(s: str, index: int, order: list) -> bool:\n        if index == len(order):\n            return is_regular(s)\n\n        if order[index] == 1:\n            return dfs(s + \"1\", index + 1, order)\n\n        if order[index] == 2:\n            return dfs(s + \"()\", index + 1, order)\n\n        if order[index] == 3:\n            return dfs(s + \"((\", index + 1, order)\n\n        if order[index] == 4:\n            return dfs(s + \"))(\", index + 1, order)\n\n        return False\n\n    order = [1, 2, 3, 4]\n    for i in range(1, 5):\n        if cnt_i > 0:\n            order[i - 1] = 1\n            cnt_i -= 1\n        if cnt_i > 0:\n            order[i - 1] = 2\n            cnt_i -= 1\n        if cnt_i > 0:\n            order[i - 1] = 3\n            cnt_i -= 1\n        if cnt_i > 0:\n            order[i - 1] = 4\n            cnt_i -= 1\n\n    return \"1\" if dfs(\"\", 0, order) else \"0\"\n"
    },
    {
        "number": 17,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    standing_spectators = 0\n    for i in range(1, n + 1):\n        if i <= k:\n            standing_spectators += 1\n        else:\n            standing_spectators -= 1\n        if standing_spectators == t:\n            return str(standing_spectators)\n    return str(standing_spectators)"
    },
    {
        "number": 18,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = \"\"\n    u = \"\"\n\n    for char in s:\n        if len(t) < 10**5:\n            t += char\n        else:\n            u += char\n\n    return u"
    },
    {
        "number": 19,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.split()[0])\n    for _ in range(T):\n        n = int(stdin.split()[1])\n        pairs = []\n        for _ in range(n):\n            p, c = map(int, stdin.split()[2:])\n            pairs.append((p, c))\n        pairs.sort()\n        if pairs[0][0] == 0 and pairs[0][1] == 0:\n            print(\"NO\")\n        else:\n            for i in range(1, n):\n                if pairs[i][0] > pairs[i - 1][0]:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 20,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split(':'))\n    if hh == mm:\n        return '0'\n    elif hh % 2 == 0 and mm % 2 == 0:\n        return '0'\n    elif hh % 2 == 0 and mm % 2 == 1:\n        return '1'\n    elif hh % 2 == 1 and mm % 2 == 0:\n        return '1'\n    elif hh % 2 == 1 and mm % 2 == 1:\n        return '2'"
    },
    {
        "number": 21,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n\n    min_element = min(a)\n    max_element = max(a)\n\n    if min_element == max_element:\n        return \"0\"\n\n    min_index = a.index(min_element)\n    max_index = a.index(max_element)\n\n    if min_index > max_index:\n        min_index, max_index = max_index, min_index\n\n    min_distance = abs(min_index - max_index)\n    max_distance = abs(max_index - min_index)\n\n    if min_distance == max_distance:\n        return str(min_distance)\n\n    if min_distance > max_distance:\n        return str(min_distance)\n    else:\n        return str(max_distance)"
    },
    {
        "number": 22,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    n = len(s)\n    for i in range(n // 2):\n        if s[i]!= s[n - i - 1]:\n            return \"NIE\"\n    return \"TAK\""
    },
    {
        "number": 23,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0:\n        return \"0\"\n    if a > b:\n        return \"0\"\n\n    def backtrack(start, current, result):\n        if current > b:\n            return\n        if current == b:\n            result.append(current)\n            return\n        for i in range(start, 10):\n            if i == 0 and current == 0:\n                continue\n            backtrack(i + 1, current * 10 + i, result)\n\n    result = []\n    backtrack(1, a, result)\n    return \"\".join(map(str, result))"
    },
    {
        "number": 24,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [list(line.strip()) for line in stdin.split('\\n')]\n    n = len(matrix)\n    m = len(matrix[0])\n\n    def count_cross(row: int, col: int) -> int:\n        count = 0\n        for i in range(row - 2, row + 3):\n            for j in range(col - 2, col + 3):\n                if 0 <= i < n and 0 <= j < m and matrix[i][j] == 'X':\n                    count += 1\n        return count\n\n    def count_nought(row: int, col: int) -> int:\n        count = 0\n        for i in range(row - 2, row + 3):\n            for j in range(col - 2, col + 3):\n                if 0 <= i < n and 0 <= j < m and matrix[i][j] == 'O':\n                    count += 1\n        return count\n\n    def count_empty(row: int, col: int) -> int:\n        count = 0\n        for i in range(row - 2, row + 3):\n            for j in range(col - 2, col + 3):\n                if 0 <= i < n and 0 <= j < m and matrix[i][j] == '.':\n                    count += 1\n        return count\n\n    def is_valid(row: int, col: int) -> bool:\n        return 0 <= row < n and 0 <= col < m and matrix[row][col] == '.'\n\n    def is_winning_line(row: int, col: int) -> bool:\n        return (\n            count_cross(row, col) == 5 or\n            count_nought(row, col) == 5 or\n            count_cross(row, col) == count_nought(row, col)\n        )\n\n    def is_winning_cell(row: int, col: int) -> bool:\n        return (\n            count_cross(row, col) == 5 or\n            count_nought(row, col) == 5\n        )\n\n    def is_winning_row(row: int) -> bool:\n        return any(is_winning_line(row, col) for col in range(m))\n\n    def is_winning_col(col: int) -> bool:\n        return any(is_winning_line(row, col) for row in range(n))\n\n    def is_winning_diagonal() -> bool:\n        return (\n            count_cross(0, 0) == 5 or\n            count_nought(0, 0) == 5 or\n            count_cross(n - 1, m - 1) == 5 or\n            count_nought(n - 1, m - 1) == 5\n        )\n\n    def is_winning_cell_or_diagonal() -> bool:\n        return is_winning_cell(0, 0) or is_winning_diagonal()\n\n    def is_winning_cell_or_diagonal_or_row(row: int) -> bool:\n        return is_winning_cell(row, 0) or is_winning_diagonal() or is_winning_row(row)\n\n    def is_winning_cell_or_diagonal_or_row_or_col(col: int) -> bool:\n        return is_winning_cell(0, col) or is_winning_diagonal() or is_winning_row(0) or is_winning_col(col)\n\n    def is_winning_cell_or_diagonal_or_row_or_col_or_corner(row: int, col: int) -> bool:\n        return (\n            is_winning_cell(row, col) or\n            is_winning_diagonal() or\n            is_winning_row(row) or\n            is_winning_col(col) or\n            (row == 0 and col == 0) or\n            (row == n - 1 and col == m - 1)\n        )\n\n    def is_winning_cell_or_diagonal_or_row_or_col_or_corner_or_edge(row: int, col: int) -> bool:\n        return (\n            is_winning_cell(row, col) or\n            is_winning_diagonal() or\n            is_winning_row(row) or\n            is_winning_col(col) or\n            (row == 0 and col == 0) or\n            (row == n - 1 and col == m - 1) or\n            (row == 0 and col"
    },
    {
        "number": 25,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(n):\n        matrix[i][i] = 1\n    for i in range(k):\n        for j in range(n):\n            if matrix[j][j] == 0:\n                for k in range(j + 1, n):\n                    if matrix[j][k] == 0:\n                        matrix[j][k] = 1\n                        matrix[k][j] = 1\n                        break\n                else:\n                    return -1\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] == 0:\n                matrix[i][j] = 1\n                matrix[j][i] = 1\n                break\n    return '\\n'.join([' '.join(map(str, row)) for row in matrix])"
    },
    {
        "number": 26,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    a = [x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x]\n    m = max(a)\n    c = a.index(m)\n    if c == 1:\n        return f\"x^y^z\"\n    elif c == 2:\n        return f\"(x^y)^z\"\n    elif c == 3:\n        return f\"x^z^y\"\n    elif c == 4:\n        return f\"(x^z)^y\"\n    elif c == 5:\n        return f\"y^x^z\"\n    elif c == 6:\n        return f\"y^z^x\"\n    elif c == 7:\n        return f\"(y^x)^z\"\n    elif c == 8:\n        return f\"(y^z)^x\"\n    elif c == 9:\n        return f\"z^x^y\"\n    elif c == 10:\n        return f\"z^y^x\"\n    elif c == 11:\n        return f\"(z^x)^y\"\n    elif c == 12:\n        return f\"(z^y)^x\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 27,
        "checkpoint": "3B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    operations = 0\n    for i in range(n):\n        operations += 1\n        if i == n - 1:\n            operations += 1\n    return str(operations)"
    }
]