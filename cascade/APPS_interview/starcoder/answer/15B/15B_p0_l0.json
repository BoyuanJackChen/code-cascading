[
    {
        "number": 0,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n < 4 or s[0]!= '[' or s[-1]!= ']':\n        return '-1'\n    i = 1\n    while i < n - 1:\n        if s[i] == ':' and s[i+1] == '|':\n            i += 2\n        elif s[i] == '[':\n            j = i + 1\n            while j < n and s[j]!= ']':\n                if s[j] == ':':\n                    return '-1'\n                j += 1\n            if j == n:\n                return '-1'\n            i = j + 1\n        else:\n            return '-1'\n    return str(n - 2)"
    },
    {
        "number": 1,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = 0\n    max_num = 0\n    for i in range(1, x+1):\n        num_sum = sum(int(digit) for digit in str(i))\n        if num_sum > max_sum:\n            max_sum = num_sum\n            max_num = i\n    return str(max_num)"
    },
    {
        "number": 2,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while True:\n        n += 1\n        if len(str(n)) == len(set(str(n))):\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 3,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    sections = [False] * n\n    for i in range(q):\n        l, r = map(int, stdin.split())\n        for j in range(l-1, r):\n            sections[j] = True\n    count = 0\n    for i in sections:\n        if i:\n            count += 1\n    return count - 2"
    },
    {
        "number": 4,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, hh, mm = map(int, stdin.split())\n    if hh == 0 and mm == 0:\n        return \"0\"\n    if hh == 0:\n        hh = 24\n    if hh == 24:\n        hh = 0\n    if hh < 10:\n        hh = \"0\" + str(hh)\n    if mm < 10:\n        mm = \"0\" + str(mm)\n    time = str(hh) + \":\" + str(mm)\n    if \"7\" in time:\n        return \"0\"\n    else:\n        y = 1\n        while True:\n            if \"7\" in str(hh) + \":\" + str(mm):\n                return str(y)\n            else:\n                y += 1\n                hh = (hh + x) % 24\n                mm = (mm + x) % 60\n                if hh < 10:\n                    hh = \"0\" + str(hh)\n                if mm < 10:\n                    mm = \"0\" + str(mm)"
    },
    {
        "number": 5,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    a = max(1, l - 1)\n    b = min(n, r + 1)\n    if pos < l:\n        return str(max(0, l - pos))\n    elif pos > r:\n        return str(max(0, pos - r))\n    else:\n        return str(max(0, a - pos, pos - b))"
    },
    {
        "number": 6,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        d = []\n        h = []\n        for j in range(n):\n            di, hi = map(int, stdin.readline().strip().split())\n            d.append(di)\n            h.append(hi)\n        dp = [float('inf')] * (x+1)\n        dp[0] = 0\n        for j in range(x+1):\n            for k in range(n):\n                if j >= d[k]:\n                    dp[j] = min(dp[j], dp[j-d[k]] + h[k])\n        if dp[x] == float('inf'):\n            print(-1)\n        else:\n            print(dp[x])\n    return \"\""
    },
    {
        "number": 7,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    day = 1\n    while n > 0:\n        n += m\n        if n > n:\n            n = n - m\n        day += 1\n    return day"
    },
    {
        "number": 8,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    tiles = stdin.split()\n    count = 0\n    for i in range(len(tiles)):\n        for j in range(i+1, len(tiles)):\n            if tiles[i][0] == tiles[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 9,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    sofas = []\n    for i in range(n):\n        sofas.append(list(map(int, stdin.readline().split())))\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, stdin.readline().split())\n    for i in range(n):\n        for j in range(m):\n            if sofas[i][j] == 1:\n                sofas[i][j] = 0\n                if i > 0 and sofas[i-1][j] == 1:\n                    cnt_t += 1\n                if i < n-1 and sofas[i+1][j] == 1:\n                    cnt_b += 1\n                if j > 0 and sofas[i][j-1] == 1:\n                    cnt_l += 1\n                if j < m-1 and sofas[i][j+1] == 1:\n                    cnt_r += 1\n                sofas[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if sofas[i][j] == 1:\n                sofas[i][j] = 0\n                if i > 0 and sofas[i-1][j] == 1:\n                    cnt_t -= 1\n                if i < n-1 and sofas[i+1][j] == 1:\n                    cnt_b -= 1\n                if j > 0 and sofas[i][j-1] == 1:\n                    cnt_l -= 1\n                if j < m-1 and sofas[i][j+1] == 1:\n                    cnt_r -= 1\n                sofas[i][j] = 1\n    for i in range(n):\n        for j in range(m):\n            if sofas[i][j] == 1:\n                if cnt_l == cnt_r == cnt_t == cnt_b == 0:\n                    return str(i*m+j+1)\n                else:\n                    return \"-1\"\n    return \"-1\""
    },
    {
        "number": 10,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_days = n // 5 * 2\n    max_days = min_days + 2\n    return f\"{min_days} {max_days}\""
    },
    {
        "number": 11,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        if i % a == 0 and i % b == 0:\n            dp[i][i] = max(dp[i-1][i-1] + p, dp[i-1][i-1] + q)\n        elif i % a == 0:\n            dp[i][i] = dp[i-1][i-1] + p\n        elif i % b == 0:\n            dp[i][i] = dp[i-1][i-1] + q\n        else:\n            dp[i][i] = dp[i-1][i-1]\n    return str(dp[n][n])"
    },
    {
        "number": 12,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trophies = stdin.readline().strip()\n    max_len = 0\n    for i in range(n):\n        if trophies[i] == 'G':\n            left = i\n            right = i\n            while left >= 0 and trophies[left] == 'G':\n                left -= 1\n            while right < n and trophies[right] == 'G':\n                right += 1\n            max_len = max(max_len, right - left - 1)\n    return str(max_len)"
    },
    {
        "number": 13,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    main_courses = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        t = int(stdin.readline())\n        courses = list(map(int, stdin.readline().split()))\n        for course in courses:\n            graph[course-1].append(i)\n    visited = [False] * n\n    stack = []\n    for course in main_courses:\n        stack.append(course-1)\n        visited[course-1] = True\n    count = 0\n    while stack:\n        course = stack.pop()\n        count += 1\n        for next_course in graph[course]:\n            if not visited[next_course]:\n                stack.append(next_course)\n                visited[next_course] = True\n    if count < k:\n        return \"-1\"\n    else:\n        print(count)\n        print(\" \".join(map(str, main_courses)))\n        return \"\""
    },
    {
        "number": 14,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.readline().split()))\n    if k == 1:\n        return \" \".join(map(str, p + [n+1]))\n    if k == n:\n        return \" \".join(map(str, p))\n    if k > n:\n        return \"-1\"\n    a = sorted(p[:k])\n    s = []\n    for i in range(k):\n        s.append(a[i])\n        a.remove(a[i])\n    b = []\n    while a or s:\n        if a:\n            s.append(a[0])\n            a.remove(a[0])\n        if s:\n            b.append(s[-1])\n            s.pop()\n    if b == sorted(b):\n        return \" \".join(map(str, p + b))\n    else:\n        return \"-1\""
    },
    {
        "number": 15,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if b < a:\n        return \"NO\"\n    if b == a:\n        return \"YES\"\n    if b - a < c:\n        return \"NO\"\n    if (b - a) % c == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 16,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, cnt_3, cnt_4 = map(int, stdin.split())\n    if cnt_1 + cnt_2 + cnt_3 + cnt_4 == 0:\n        return \"1\"\n    if cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 0:\n        return \"1\"\n    if cnt_1 == 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4!= 0:\n        return \"0\"\n    if cnt_1 == 0 and cnt_2 == 0 and cnt_3!= 0 and cnt_4 == 0:\n        return \"0\"\n    if cnt_1 == 0 and cnt_2!= 0 and cnt_3 == 0 and cnt_4 == 0:\n        return \"0\"\n    if cnt_1!= 0 and cnt_2 == 0 and cnt_3 == 0 and cnt_4 == 0:\n        return \"0\"\n    if cnt_1 == 0 and cnt_2!= 0 and cnt_3!= 0 and cnt_4!= 0:\n        return \"0\"\n    if cnt_1!= 0 and cnt_2!= 0 and cnt_3 == 0 and cnt_4!= 0:\n        return \"0\"\n    if cnt_1!= 0 and cnt_2 == 0 and cnt_3!= 0 and cnt_4!= 0:\n        return \"0\"\n    if cnt_1!= 0 and cnt_2!= 0 and cnt_3!= 0 and cnt_4 == 0:\n        return \"0\"\n    if cnt_1!= 0 and cnt_2!= 0 and cnt_3!= 0 and cnt_4!= 0:\n        return \"0\"\n    return \"1\""
    },
    {
        "number": 17,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, t = map(int, stdin.split())\n    if t <= k:\n        return str(t)\n    else:\n        return str(n - (t - k))"
    },
    {
        "number": 18,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    t = \"\"\n    u = \"\"\n    for i in range(len(s)):\n        t += s[i]\n        u += s[i]\n    t = t[::-1]\n    u = sorted(u)[::-1]\n    return u"
    },
    {
        "number": 19,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    T = int(lines[0])\n    for i in range(1, T+1):\n        n = int(lines[i*2-1])\n        stats = []\n        for j in range(i*2, i*2+n):\n            p, c = map(int, lines[j].split())\n            stats.append((p, c))\n        if check_stats(stats):\n            return \"YES\"\n    return \"NO\"\n\ndef"
    },
    {
        "number": 20,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm = map(int, stdin.split(':'))\n    if hh == 0 and mm == 0:\n        return '0'\n    if hh == 0 or hh == 12:\n        return str(mm)\n    if hh > 12:\n        hh -= 12\n    if hh < 10:\n        hh = '0' + str(hh)\n    else:\n        hh = str(hh)\n    if mm < 10:\n        mm = '0' + str(mm)\n    else:\n        mm = str(mm)\n    return hh + ':' + mm"
    },
    {
        "number": 21,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    min_idx = a.index(min(a))\n    max_idx = a.index(max(a))\n    return abs(min_idx - max_idx)"
    },
    {
        "number": 22,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0:\n        return \"TAK\" if s[:n//2] == s[n//2:][::-1] else \"NIE\"\n    else:\n        return \"TAK\" if s[:n//2] == s[n//2+1:][::-1] else \"NIE\""
    },
    {
        "number": 23,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    a_str = str(a)\n    a_list = list(a_str)\n    a_list.sort(reverse=True)\n    a_list = [int(i) for i in a_list]\n    a_list = [str(i) for i in a_list]\n    a_str = ''.join(a_list)\n    while int(a_str) > b:\n        a_list.pop()\n        a_str = ''.join(a_list)\n    return a_str"
    },
    {
        "number": 24,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    matrix = [list(line.strip()) for line in stdin.split('\\n')]\n\n    # Check if Alice can win in one turn\n    for i in range(10):\n        for j in range(10):\n            if matrix[i][j] == '.':\n                matrix[i][j] = 'X'\n                if check_win(matrix):\n                    return 'YES'\n                matrix[i][j] = '.'\n\n    return 'NO'\n\ndef"
    },
    {
        "number": 25,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n * n:\n        return -1\n    matrix = [[0] * n for _ in range(n)]\n    for i in range(k):\n        row, col = divmod(i, n)\n        matrix[row][col] = 1\n    for i in range(n):\n        for j in range(i):\n            if matrix[i][j]!= matrix[j][i]:\n                matrix[i][j] = 1 - matrix[i][j]\n    return '\\n'.join([' '.join(map(str, row)) for row in matrix])"
    },
    {
        "number": 26,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(float, stdin.split())\n    a = [x**y**z, x**z**y, (x**y)**z, (x**z)**y, y**x**z, y**z**x, (y**x)**z, (y**z)**x, z**x**y, z**y**x, (z**x)**y, (z**y)**x]\n    m = max(a)\n    c = a.index(m) + 1\n    if c == 1:\n        return f\"x^y^z = {x**y**z:.1f}\"\n    elif c == 2:\n        return f\"x^z^y = {x**z**y:.1f}\"\n    elif c == 3:\n        return f\"(x^y)^z = {(x**y)**z:.1f}\"\n    elif c == 4:\n        return f\"(x^z)^y = {(x**z)**y:.1f}\"\n    elif c == 5:\n        return f\"y^x^z = {y**x**z:.1f}\"\n    elif c == 6:\n        return f\"y^z^x = {y**z**x:.1f}\"\n    elif c == 7:\n        return f\"(y^x)^z = {(y**x)**z:.1f}\"\n    elif c == 8:\n        return f\"(y^z)^x = {(y**z)**x:.1f}\"\n    elif c == 9:\n        return f\"z^x^y = {z**x**y:.1f}\"\n    elif c == 10:\n        return f\"z^y^x = {z**y**x:.1f}\"\n    elif c == 11:\n        return f\"(z^x)^y = {(z**x)**y:.1f}\"\n    elif c == 12:\n        return f\"(z^y)^x = {(z**y)**x:.1f}\""
    },
    {
        "number": 27,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        count += 1\n    if n > 1:\n        count += (n-1)\n    if n > 2:\n        count += (n-2)\n    if n > 3:\n        count += (n-3)\n    if n > 4:\n        count += (n-4)\n    if n > 5:\n        count += (n-5)\n    if n > 6:\n        count += (n-6)\n    if n > 7:\n        count += (n-7)\n    if n > 8:\n        count += (n-8)\n    if n > 9:\n        count += (n-9)\n    if n > 10:\n        count += (n-10)\n    if n > 11:\n        count += (n-11)\n    if n > 12:\n        count += (n-12)\n    if n > 13:\n        count += (n-13)\n    if n > 14:\n        count += (n-14)\n    if n > 15:\n        count += (n-15)\n    if n > 16:\n        count += (n-16)\n    if n > 17:\n        count += (n-17)\n    if n > 18:\n        count += (n-18)\n    if n > 19:\n        count += (n-19)\n    if n > 20:\n        count += (n-20)\n    if n > 21:\n        count += (n-21)\n    if n > 22:\n        count += (n-22)\n    if n > 23:\n        count += (n-23)\n    if n > 24:\n        count += (n-24)\n    if n > 25:\n        count += (n-25)\n    if n > 26:\n        count += (n-26)\n    if n > 27:\n        count += (n-27)\n    if n > 28:\n        count += (n-28)\n    if n > 29:\n        count += (n-29)\n    if n > 30:\n        count += (n-30)\n    if n > 31:\n        count += (n-31)\n    if n > 32:\n        count += (n-32)\n    if n > 33:\n        count += (n-33)\n    if n > 34:\n        count += (n-34)\n    if n > 35:\n        count += (n-35)\n    if n > 36:\n        count += (n-36)\n    if n > 37:\n        count += (n-37)\n    if n > 38:\n        count += (n-38)\n    if n > 39:\n        count += (n-39)\n    if n > 40:\n        count += (n-40)\n    if n > 41:\n        count += (n-41)\n    if n > 42:\n        count += (n-42)\n    if n > 43:\n       count += (n-43)\n    if n > 44:\n       count += (n-44)\n    if n > 45:\n       count += (n-45)\n    if n > 46:\n       count += (n-46)\n    if n > 47:\n       count += (n-47)\n    if n > 48:\n       count += (n-48)\n    if n > 49:\n       count += (n-49)\n    if n > 50:\n       count += (n-50)\n    if n > 51:\n       count += (n-51)\n    if n > 52:\n       count += (n-52)\n    if n > 53:\n       count += (n-53)\n    if n > 54:\n       count += (n-54)\n    if n > 55:\n       count += (n-55)\n    if n > 56:\n       count += (n-56)\n    if n > 57:\n       count += (n-57)\n    if n > 58:\n       count += (n-58)\n    if n > 59:\n       count += (n-59)\n   "
    },
    {
        "number": 28,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    examples = []\n    regulars = []\n    for i in range(n):\n        name, type_ = stdin.split()[i*2:i*2+2]\n        if type_ == '1':\n            examples.append(name)\n        else:\n            regulars.append(name)\n    examples.sort()\n    regulars.sort()\n    script = []\n    for i, name in enumerate(examples):\n        script.append(f'move {name} {i+1}')\n    for i, name in enumerate(regulars):\n        script.append(f'move {name} {i+len(examples)+1}')\n    return f'{len(script)}\\n'+'\\n'.join(script)"
    },
    {
        "number": 29,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ticket = list(map(int, stdin))\n    if sum(ticket[:3]) == sum(ticket[3:]):\n        return 0\n    else:\n        return 6 - sum(ticket)"
    },
    {
        "number": 30,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, x = map(int, stdin.split())\n    return str(m // x)"
    },
    {
        "number": 31,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = 1\n    B = 1\n    for i in range(k):\n        A *= 2\n        B *= 2\n    A //= 2**(n-1)\n    B //= 2**(n-1)\n    A = A % (10**6 + 3)\n    B = B % (10**6 + 3)\n    if A == 0:\n        A = 1\n    if B == 0:\n        B = 1\n    if A > B:\n        A, B = B, A\n    while B!= 0:\n        A, B = B, A % B\n    return f\"{A} {B}\""
    },
    {
        "number": 32,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    directions = []\n    for i in range(n):\n        t, d = stdin.readline().strip().split()\n        t = int(t)\n        directions.append((t, d))\n    if directions[-1][1]!= \"North\":\n        return \"NO\"\n    for i in range(n-1):\n        if directions[i][1] == \"North\" and directions[i+1][1] == \"South\":\n            return \"NO\"\n        if directions[i][1] == \"South\" and directions[i+1][1] == \"North\":\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 33,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1, a_2, b_2, L, R = map(int, stdin.split())\n    k = (b_2 - b_1) // (a_2 - a_1)\n    l = (L - b_1) // (a_1 - k)\n    r = (R - b_1) // (a_1 - k)\n    return str(max(0, r - l + 1))"
    },
    {
        "number": 34,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a == b:\n        return str(a)\n    if a > b:\n        a, b = b, a\n    if a == 1:\n        return str(n)\n    if b == 1:\n        return str(n)\n    if a == 2:\n        return str(n // 2)\n    if b == 2:\n        return str(n // 2)\n    if a == 3:\n        return str(n // 3)\n    if b == 3:\n        return str(n // 3)\n    if a == 4:\n        return str(n // 4)\n    if b == 4:\n        return str(n // 4)\n    if a == 5:\n        return str(n // 5)\n    if b == 5:\n        return str(n // 5)\n    if a == 6:\n        return str(n // 6)\n    if b == 6:\n        return str(n // 6)\n    if a == 7:\n        return str(n // 7)\n    if b == 7:\n        return str(n // 7)\n    if a == 8:\n        return str(n // 8)\n    if b == 8:\n        return str(n // 8)\n    if a == 9:\n        return str(n // 9)\n    if b == 9:\n        return str(n // 9)\n    if a == 10:\n        return str(n // 10)\n    if b == 10:\n        return str(n // 10)\n    if a == 11:\n        return str(n // 11)\n    if b == 11:\n        return str(n // 11)\n    if a == 12:\n        return str(n // 12)\n    if b == 12:\n        return str(n // 12)\n    if a == 13:\n        return str(n // 13)\n    if b == 13:\n        return str(n // 13)\n    if a == 14:\n        return str(n // 14)\n    if b == 14:\n        return str(n // 14)\n    if a == 15:\n        return str(n // 15)\n    if b == 15:\n        return str(n // 15)\n    if a == 16:\n        return str(n // 16)\n    if b == 16:\n        return str(n // 16)\n    if a == 17:\n        return str(n // 17)\n    if b == 17:\n        return str(n // 17)\n    if a == 18:\n        return str(n // 18)\n    if b == 18:\n        return str(n // 18)\n    if a == 19:\n        return str(n // 19)\n    if b == 19:\n        return str(n // 19)\n    if a == 20:\n        return str(n // 20)\n    if b == 20:\n        return str(n // 20)\n    if a == 21:\n        return str(n // 21)\n    if b == 21:\n        return str(n // 21)\n    if a == 22:\n        return str(n // 22)\n    if b == 22:\n        return str(n // 22)\n    if a == 23:\n        return str(n // 23)\n    if b == 23:\n        return str(n // 23)\n    if a == 24:\n        return str(n // 24)\n    if b == 24:\n        return str(n // 24)\n    if a == 25:\n        return str(n // 25)\n    if b == 25:\n        return str(n // 25)\n    if a == 26:\n        return str(n // 26)\n    if b == 26:\n        return str(n // 26)\n    if a == 27:\n        return str(n // 27)\n    if b == 27:\n        return str(n // 27)\n    if a == 28:\n        return str(n // 28)\n    if b == 28:\n        return str(n // 28)\n    if a == 29:\n        return str(n // 29"
    },
    {
        "number": 35,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = []\n    for i in range(n):\n        field.append(list(stdin.readline().strip()))\n    colors = set()\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] in colors:\n                return \"NO\"\n            colors.add(field[i][j])\n    if len(colors)!= 3:\n        return \"NO\"\n    for i in range(n):\n        if field[i][0]!= field[i][m-1]:\n            return \"NO\"\n    for j in range(m):\n        if field[0][j]!= field[n-1][j]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 36,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x, y = 0, 0\n    for i in range(n):\n        if i % 2 == 0:\n            x += 1\n        else:\n            y += 1\n        if i % 3 == 2:\n            x -= 1\n    return f\"{x} {y}\""
    },
    {
        "number": 37,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a * 2 + b * 2 == c:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 38,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    kefa_start = list(map(int, stdin.split()))\n    sasha_start = list(map(int, stdin.split()))\n    kefa_end = [0] * n\n    sasha_end = [0] * n\n    for i in range(n):\n        kefa_end[i] = (kefa_start[i] + L - 1) % L\n        sasha_end[i] = (sasha_start[i] + L - 1) % L\n    kefa_end.sort()\n    sasha_end.sort()\n    if kefa_end == sasha_end:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 39,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                continue\n            else:\n                return max(len(s[k:l]) for k in range(n) for l in range(k+1, n+1) if s[k:l]!= s[k:l][::-1])\n    return 0"
    },
    {
        "number": 40,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ratings = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        ratings.append((a, b))\n    if all(a == b for a, b in ratings):\n        return \"unrated\"\n    if any(a!= b for a, b in ratings):\n        return \"rated\"\n    for i in range(n-1):\n        if ratings[i][0] > ratings[i+1][0] and ratings[i][1] < ratings[i+1][1]:\n            return \"rated\"\n    return \"maybe\""
    },
    {
        "number": 41,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = [0] * n\n    for i in range(n):\n        if a[i] == 0:\n            d[i] = 0\n        else:\n            left, right = 0, i - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if a[mid] == 0:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            d[i] = i - left\n            left, right = i + 1, n - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if a[mid] == 0:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            d[i] = min(d[i], right - i)\n    return''.join(map(str, d))"
    },
    {
        "number": 42,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    cyclical_strings = set()\n    for i in range(2**n):\n        t = bin(i)[2:].zfill(n)\n        if s in t:\n            cyclical_strings.add(t)\n    return len(cyclical_strings)"
    },
    {
        "number": 43,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    vectors = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        vectors.append((x, y))\n    angles = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = vectors[i]\n            x2, y2 = vectors[j]\n            dot_product = x1*x2 + y1*y2\n            norm1 = (x1**2 + y1**2) ** 0.5\n            norm2 = (x2**2 + y2**2) ** 0.5\n            angle = abs(math.acos(dot_product/(norm1*norm2)))\n            angles[(i, j)] = angle\n            angles[(j, i)] = angle\n    min_angle = float('inf')\n    min_pair = None\n    for pair, angle in angles.items():\n        if angle < min_angle:\n            min_angle = angle\n            min_pair = pair\n    return''.join(map(str, min_pair))"
    },
    {
        "number": 44,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k, a, b, t = map(int, stdin.split())\n    if d <= k:\n        return str(d * a)\n    else:\n        n = (d - k) // k\n        m = (d - k) % k\n        return str(n * t + m * a + m * b)"
    },
    {
        "number": 45,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"-1\"\n    seq = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            seq.append(i)\n            if len(seq) == k:\n                break\n    if len(seq)!= k:\n        return \"-1\"\n    return \" \".join(map(str, seq))"
    },
    {
        "number": 46,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (i+j) % 5 == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 47,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    max_sum = 0\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n    return max_sum * x"
    },
    {
        "number": 48,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    table = [[i*j for j in range(1, m+1)] for i in range(1, n+1)]\n    table = [num for row in table for num in row]\n    table.sort(reverse=True)\n    return str(table[k-1])"
    },
    {
        "number": 49,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    num = 1\n    count = 1\n    while count <= k:\n        num += 1\n        count += len(str(num))\n    return str(num)[k-count+len(str(num))-1]"
    },
    {
        "number": 50,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r = map(int, stdin.split())\n    s = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    s.sort()\n    b.sort(reverse=True)\n    i = j = k = 0\n    while i < n and j < m:\n        if s[i] <= b[j]:\n            r -= s[i]\n            i += 1\n        else:\n            r += b[j]\n            j += 1\n        k += 1\n    while i < n:\n        r -= s[i]\n        i += 1\n        k += 1\n    while j < m:\n        r += b[j]\n        j += 1\n        k += 1\n    return str(r)"
    },
    {
        "number": 52,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"-1\"\n    teams = [i for i in range(2, n+1)]\n    for i in range(2, int(n**0.5)+1):\n        if n % i == 0:\n            teams.append(n//i)\n    teams.sort()\n    if teams[-1] == n:\n        return \" \".join(map(str, teams))\n    else:\n        return \"-1\""
    },
    {
        "number": 53,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    b = list(map(int, stdin.readline().strip().split()))\n    t = \"\"\n    for i in range(n):\n        t += s[n-i-1]\n    beauty = sum(b[i] for i in range(n) if s[i] == t[i])\n    return beauty"
    },
    {
        "number": 54,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m = map(int, stdin.split())\n    if m % w == 0:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 55,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        if n == 1:\n            return \"Yes\\n-1\"\n        else:\n            return \"No\"\n    if n == 1:\n        return \"Yes\\n\" + \" \".join(map(str, [-1]*k))\n    if n == 2:\n        return \"No\"\n    if n == 3:\n        return \"Yes\\n\" + \" \".join(map(str, [2]*k))\n    if n == 4:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 5:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 6:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 7:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 8:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 9:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 10:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 11:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 12:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 13:\n        return \"No\"\n    if n == 14:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 15:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 16:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 17:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 18:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 19:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 20:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 21:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 22:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 23:\n        return \"No\"\n    if n == 24:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 25:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 26:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 27:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 28:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 29:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 30:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 31:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 32:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 33:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 34:\n        return \"Yes\\n\" + \" \".join(map(str, [1]*k))\n    if n == 35:\n        return \"Yes\\n\" + \" \".join(map(str, [0]*k))\n    if n == 36:\n        return \"Yes\\n\" + \" \".join(map("
    },
    {
        "number": 56,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    champagne = [0] * (n+1)\n    champagne[0] = 1\n    for i in range(t):\n        for j in range(n, 0, -1):\n            champagne[j] = (champagne[j] + champagne[j-1]) / 2\n            if champagne[j] > 1:\n                champagne[j-1] += champagne[j] - 1\n                champagne[j] = 1\n    return sum(1 for x in champagne if x == 1)"
    },
    {
        "number": 57,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    points.sort()\n    if len(set(points)) == 2:\n        return 1\n    elif len(set(points)) == 3:\n        return 0\n    else:\n        return -1"
    },
    {
        "number": 58,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    return max(n - a - b, 0)"
    },
    {
        "number": 59,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    forbidden = list(map(int, stdin.readline().strip()))\n    count = 0\n    for i in range(n - 1):\n        if forbidden[i] == 0:\n            j = i + 1\n            while j < n and a[j] < a[i]:\n                j += 1\n            if j < n:\n                a[i], a[j] = a[j], a[i]\n                count += 1\n    if count == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 60,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    if s == 'a':\n        return str(n*6 + 3)\n    elif s == 'b' or s == 'c':\n        return str(n*6 + 2)\n    elif s == 'd':\n        return str(n*6 + 1)\n    elif s == 'e':\n        return str(n*6)\n    elif s == 'f':\n        return str(n*6 - 1)\n    else:\n        return 'Invalid seat'"
    },
    {
        "number": 61,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_digits = list(map(int, stdin.split()[1:]))\n    y_digits = list(map(int, stdin.split('\\n')[2].split()))\n    x = sum(d * b**i for i, d in enumerate(reversed(x_digits)))\n    y = sum(d * b**i for i, d in enumerate(reversed(y_digits)))\n    if x < y:\n        return '<'\n    elif x > y:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 62,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return \"BitAryo\" if a[0] == 1 else \"BitLGM\"\n    if n == 2:\n        return \"BitAryo\" if a[0] == 1 else \"BitLGM\"\n    if a[0] == 1:\n        return \"BitLGM\"\n    if a[1] == 1:\n        return \"BitAryo\"\n    if a[0] == 2:\n        return \"BitAryo\"\n    if a[1] == 2:\n        return \"BitLGM\"\n    if a[0] == 3:\n        return \"BitLGM\"\n    if a[1] == 3:\n        return \"BitAryo\"\n    return \"BitLGM\""
    },
    {
        "number": 63,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for x in range(n+1):\n        for y in range(n+1):\n            if x + y <= n:\n                if k % math.prod(a[x:n-y]) == 0:\n                    count += 1\n    return count"
    },
    {
        "number": 64,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split()[1]\n    if k > 26:\n        return \"NO\"\n    if len(set(s)) < k:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 65,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    min_dist = float('inf')\n    for i in range(n-1):\n        min_dist = min(min_dist, a[i+1] - a[i])\n    return min_dist"
    },
    {
        "number": 66,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, w, b = map(int, stdin.split())\n    p = 0\n    q = 0\n    for i in range(1, t+1):\n        if i % w == 0 and i % b == 0:\n            p += 1\n        elif i % w == 0:\n            q += 1\n        elif i % b == 0:\n            q += 1\n    return f\"{p}/{q}\""
    },
    {
        "number": 67,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x > y:\n        return \"+\"\n    elif x < y:\n        return \"-\"\n    else:\n        if z == 0:\n            return \"0\"\n        else:\n            return \"?\""
    },
    {
        "number": 68,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, seq, x, y = map(int, stdin.split())\n    seq = list(seq)\n    max_id = -1\n    min_id = n\n    for i in range(n):\n        if seq[i] == 'U' and i > 0 and seq[i-1] == 'D':\n            seq[i] = 'D'\n        elif seq[i] == 'D' and i > 0 and seq[i-1] == 'U':\n            seq[i] = 'U'\n        elif seq[i] == 'L' and i > 0 and seq[i-1] == 'R':\n            seq[i] = 'R'\n        elif seq[i] == 'R' and i > 0 and seq[i-1] == 'L':\n            seq[i] = 'L'\n        if seq[i]!= 'U' and seq[i]!= 'D' and seq[i]!= 'L' and seq[i]!= 'R':\n            return -1\n        if seq[i] == 'U' and y < 0:\n            return -1\n        if seq[i] == 'D' and y > 0:\n            return -1\n        if seq[i] == 'L' and x < 0:\n            return -1\n        if seq[i] == 'R' and x > 0:\n            return -1\n        if seq[i] == 'U' and seq[i-1] == 'U':\n            max_id = i\n        if seq[i] == 'D' and seq[i-1] == 'D':\n            max_id = i\n        if seq[i] == 'L' and seq[i-1] == 'L':\n            max_id = i\n        if seq[i] == 'R' and seq[i-1] == 'R':\n            max_id = i\n        if seq[i] == 'U' and seq[i-1] == 'D':\n            min_id = i\n        if seq[i] == 'D' and seq[i-1] == 'U':\n            min_id = i\n        if seq[i] == 'L' and seq[i-1] == 'R':\n            min_id = i\n        if seq[i] == 'R' and seq[i-1] == 'L':\n            min_id = i\n    if max_id == -1 or min_id == n:\n        return -1\n    return max_id - min_id + 1"
    },
    {
        "number": 69,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        n, x = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        cnt0 = cnt1 = 0\n        balance = 0\n        for c in s:\n            if c == '0':\n                cnt0 += 1\n            else:\n                cnt1 += 1\n            balance = cnt0 - cnt1\n            if balance == x:\n                print(s.count(c))\n                break\n            elif balance < x:\n                print(-1)\n                break"
    },
    {
        "number": 70,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n % 10**k == 0:\n        return \"0\"\n    digits = len(str(n))\n    for i in range(digits):\n        if (n // 10**i) % 10**k == 0:\n            return str(digits - i)\n    return str(digits)"
    },
    {
        "number": 71,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, x, y = map(int, stdin.split())\n    if n == 1:\n        max_q = min_q = 1\n        times_asked = k\n    else:\n        max_q = min_q = 0\n        times_asked = 0\n        if x == 1:\n            max_q = min_q = 1\n            times_asked = k\n        else:\n            if y == 1:\n                max_q = min_q = 1\n                times_asked = k\n            else:\n                if y == m:\n                    max_q = min_q = 1\n                    times_asked = k\n                else:\n                    if x == n:\n                        max_q = min_q = 1\n                        times_asked = k\n                    else:\n                        if x == 2:\n                            max_q = min_q = 1\n                            times_asked = k\n                        else:\n                            if y == 2:\n                                max_q = min_q = 1\n                                times_asked = k\n                            else:\n                                if y == m - 1:\n                                    max_q = min_q = 1\n                                    times_asked = k\n                                else:\n                                    if x == n - 1:\n                                        max_q = min_q = 1\n                                        times_asked = k\n                                    else:\n                                        if y == 3:\n                                            max_q = min_q = 1\n                                            times_asked = k\n                                        else:\n                                            if y == m - 2:\n                                                max_q = min_q = 1\n                                                times_asked = k\n                                            else:\n                                                if x == 3:\n                                                    max_q = min_q = 1\n                                                    times_asked = k\n                                                else:\n                                                    if x == n - 2:\n                                                        max_q = min_q = 1\n                                                        times_asked = k\n                                                    else:\n                                                        if y == 4:\n                                                            max_q = min_q = 1\n                                                            times_asked = k\n                                                        else:\n                                                            if y == m - 3:\n                                                                max_q = min_q = 1\n                                                                times_asked = k\n                                                            else:\n                                                                if x == 4:\n                                                                    max_q = min_q = 1\n                                                                    times_asked = k\n                                                                else:\n                                                                    if x == n - 3:\n                                                                        max_q = min_q = 1\n                                                                        times_asked = k\n                                                                    else:\n                                                                        if y == 5:\n                                                                            max_q = min_q = 1\n                                                                            times_asked = k\n                                                                        else:\n                                                                            if y == m - 4:\n                                                                                max_q = min_q = 1\n                                                                                times_asked = k\n                                                                            else:\n                                                                                if x == 5:\n                                                                                    max_q = min_q = 1\n                                                                                    times_asked = k\n                                                                                else:\n                                                                                    if x == n - 4:\n                                                                                        max_q = min_q = 1\n                                                                                        times_asked = k\n                                                                                    else:\n                                                                                        if y == 6:\n                                                                                            max_q = min_q = 1\n                                                                                            times_asked = k\n                                                                                        else:\n                                                                                            if y == m - 5:\n                                                                                                max_q = min_q = 1\n                                                                                                times_asked = k\n                                                                                            else:\n                                                                                                if x == 6:\n                                                                                                    max_q = min_q = 1\n                                                                                                    times_asked = k\n                                                                                                else:\n                                                                                                    if x == n - 5:\n                                                                                                        max_q = min_q = 1\n                                                                                                        times_asked = k\n                                                                                                    else:\n                                                                                                        if y == 7:\n                                                                                                            max_q = min_q = 1\n                                                                                                            times_asked = k\n                                                                                                        else:\n                                                                                                            if y == m - 6:\n                                                                                                                max_q = min_q = 1\n                                                                                                                times_asked = k\n                                                                                                            else:\n                                                                                                                if x == 7:\n                                                                                                                    max_q = min_q = 1\n                                                                                                                    times_asked = k\n                                                                                                                else:\n                                                                                                                    if x == n - 6:\n                                                                                                                        max_q = min_q = 1\n                                                                                                                        times_asked = k\n                                                                                                                    else:\n                                                                                                                        if y == 8:\n                                                                                                                            max_q = min_q = 1\n                                                                                                                            times_asked = k\n                                                                                                                        else:\n                                                                                                                            if y == m - 7:\n                                                                                                                                max_q = min_q = 1\n                                                                                                                                times_asked = k\n                                                                                                                            else:\n                                                                                                                                if x == 8:\n                                                                                                                                    max_q = min_q = 1\n                                                                                                                                    times_asked ="
    },
    {
        "number": 72,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    kuro, shiro, katie = stdin.readline().strip(), stdin.readline().strip(), stdin.readline().strip()\n    beauty = {}\n    for i in range(len(kuro)):\n        for j in range(i+1, len(kuro)+1):\n            sub = kuro[i:j]\n            if sub not in beauty:\n                beauty[sub] = 0\n            beauty[sub] += 1\n    for i in range(len(shiro)):\n        for j in range(i+1, len(shiro)+1):\n            sub = shiro[i:j]\n            if sub not in beauty:\n                beauty[sub] = 0\n            beauty[sub] += 1\n    for i in range(len(katie)):\n        for j in range(i+1, len(katie)+1):\n            sub = katie[i:j]\n            if sub not in beauty:\n                beauty[sub] = 0\n            beauty[sub] += 1\n    max_beauty = 0\n    max_cats = []\n    for cat in [kuro, shiro, katie]:\n        cur_beauty = 0\n        for i in range(len(cat)):\n            for j in range(i+1, len(cat)+1):\n                sub = cat[i:j]\n                if sub in beauty:\n                    cur_beauty = max(cur_beauty, beauty[sub])\n        if cur_beauty == max_beauty:\n            max_cats.append(cat)\n        elif cur_beauty > max_beauty:\n            max_beauty = cur_beauty\n            max_cats = [cat]\n    if len(max_cats) == 1:\n        return max_cats[0]\n    else:\n        return \"Draw\""
    },
    {
        "number": 73,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, v_0, v_1, a, l = map(int, stdin.split())\n    days = 1\n    while True:\n        if v_0 + a * days > v_1:\n            break\n        v_0 += a * days\n        days += 1\n    if v_0 > v_1:\n        days -= 1\n    days += (c - v_0) // (v_1 - v_0)\n    if (c - v_0) % (v_1 - v_0)!= 0:\n        days += 1\n    return days"
    },
    {
        "number": 74,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    if len(primes) > 3:\n        return \"Error: More than three primes\"\n    if len(primes) == 0:\n        return \"Error: No primes found\"\n    return f\"{len(primes)}\\n{' '.join(map(str, primes))}\""
    },
    {
        "number": 75,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    field = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    bombs = []\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                bombs.append((i, j))\n    if len(bombs) < 1:\n        return \"NO\"\n    if len(bombs) == 1:\n        return \"YES\\n\" + \" \".join(map(str, bombs[0]))\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '.':\n                field[i][j] = '*'\n                if (i, j) not in bombs:\n                    if all(field[x][j] == '.' for x in range(n)) and all(field[i][y] == '.' for y in range(m)):\n                        return \"YES\\n\" + \" \".join(map(str, (i, j)))\n                field[i][j] = '.'\n    return \"NO\""
    },
    {
        "number": 76,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    if n % m == 0:\n        return 0\n    else:\n        return (n // m + 1) * b - (n % m) * a"
    },
    {
        "number": 77,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    odd_sum = float('-inf')\n    odd_sum_subseq = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subseq = a[i:j]\n            subseq_sum = sum(subseq)\n            if subseq_sum % 2 == 1 and subseq_sum > odd_sum:\n                odd_sum = subseq_sum\n                odd_sum_subseq = subseq\n    return odd_sum_subseq, odd_sum\n\nstdin = \"\"\"\n4\n-2 2 -3 1\n\"\"\"\n\nprint(solution(stdin)) # Output: ([-2, 2, -3], 3)"
    },
    {
        "number": 78,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        t, g = map(int, stdin.split())\n        songs.append((t, g))\n    songs.sort(key=lambda x: x[1])\n    dp = [[0] * (T+1) for _ in range(3)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(3):\n            for k in range(3):\n                if j == k:\n                    continue\n                dp[j][i+songs[i][0]] += dp[k][i]\n                dp[j][i+songs[i][0]] %= 1000000007\n    ans = 0\n    for i in range(3):\n        ans += dp[i][T]\n        ans %= 1000000007\n    return str(ans)"
    },
    {
        "number": 79,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    p = 1\n    q = 1\n    for i in range(2, m+1):\n        if m % i == 0:\n            p *= i\n            q *= i\n    if q == 1:\n        return str(p)\n    else:\n        return str(p * pow(q, -1, 10**9+7))"
    },
    {
        "number": 80,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y = map(int, stdin.split())\n    count = 0\n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            if (i*j) % x == 0 and (i*j) % y == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 81,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    lcm = (a * b) // gcd(a, b)\n    k = 0\n    while True:\n        if (a + k) * b % lcm == 0:\n            return str(k)\n        k += 1\n\ndef"
    },
    {
        "number": 82,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    marks = list(map(int, stdin.readline().split()))\n    avg = sum(marks) / n\n    if avg >= k:\n        return \"0\"\n    else:\n        return str(k - avg)"
    },
    {
        "number": 83,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(float, stdin.split()[1:]))\n    count = 0\n    for i in a:\n        if i > 0:\n            count += 1\n    if count >= n//2:\n        return \"0\"\n    for i in range(-1000, 1001):\n        if count >= n//2:\n            return str(i)\n        a = [j/i for j in a]\n        count = 0\n        for j in a:\n            if j > 0:\n                count += 1\n    return \"0\""
    },
    {
        "number": 84,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if str(i+j).count('9') == n:\n                count += 1\n    return count"
    },
    {
        "number": 85,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, b1 = map(int, stdin.split())\n    a2, b2 = map(int, stdin.readline().split())\n\n    if a1 == a2 and b1 == b2:\n        return \"1\\n{} {}\\n{} {}\".format(a1, b1, a2, b2)\n\n    if a1 == a2 or b1 == b2:\n        return \"-1\"\n\n    if a1 > a2:\n        a1, a2 = a2, a1\n        b1, b2 = b2, b1\n\n    if a1 % 2 == 0:\n        if b1 % 2 == 0:\n            return \"2\\n{} {}\\n{} {}\".format(a1 // 2, b1 // 2, a2, b2)\n        else:\n            return \"2\\n{} {}\\n{} {}\".format(a1 // 2, b1, a2, b2)\n\n    if b1 % 2 == 0:\n        return \"2\\n{} {}\\n{} {}\".format(a1, b1 // 2, a2, b2)\n\n    if a1 % 3 == 0:\n        if b1 % 3 == 0:\n            return \"3\\n{} {}\\n{} {}\".format(a1 // 3, b1 // 3, a2, b2)\n        else:\n            return \"3\\n{} {}\\n{} {}\".format(a1 // 3, b1, a2, b2)\n\n    if b1 % 3 == 0:\n        return \"3\\n{} {}\\n{} {}\".format(a1, b1 // 3, a2, b2)\n\n    return \"-1\""
    },
    {
        "number": 86,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_p, y_p, x_v, y_v = map(int, stdin.split())\n    if x_p == 0 and y_p == 0:\n        return \"Vasiliy\"\n    elif x_v == 0 and y_v == 0:\n        return \"Polycarp\"\n    else:\n        return \"Polycarp\" if (x_p + y_p) % 2 == 0 else \"Vasiliy\""
    },
    {
        "number": 87,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.split())\n    if m == 2:\n        if d == 29:\n            return \"29\"\n        else:\n            return \"28\"\n    elif m in [4, 6, 9, 11]:\n        return \"30\"\n    else:\n        return \"31\""
    },
    {
        "number": 88,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    count = 0\n    for year in range(a, b+1):\n        binary = bin(year)[2:]\n        if binary.count('0') == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 89,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (n * (n + 1)) // 2"
    },
    {
        "number": 90,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[[0] * (k+1) for _ in range(s+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(s+1):\n            dp[i][j][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, s+1):\n            for k in range(1, k+1):\n                if j >= a[i-1]:\n                    dp[i][j][k] = dp[i-1][j][k] + dp[i-1][j-a[i-1]][k-1]\n                else:\n                    dp[i][j][k] = dp[i-1][j][k]\n    return dp[n][s][k]"
    },
    {
        "number": 91,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        v = [0] * n\n        for j in range(n):\n            if j == 0:\n                v[j] = a[j]\n            else:\n                v[j] = v[j-1] + k**j\n        if v == a:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 92,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    MOD = 10**9 + 7\n    result = 0\n    for i in range(1, a+1):\n        for j in range(1, b+1):\n            for k in range(1, c+1):\n                result += pow(i*j*k, 0, MOD)\n    return str(result % MOD)"
    },
    {
        "number": 93,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bessie_puzzle = stdin.split('\\n')[0]\n    elsie_puzzle = stdin.split('\\n')[1]\n    bessie_puzzle = bessie_puzzle.replace('A', 'X')\n    bessie_puzzle = bessie_puzzle.replace('B', 'A')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('X', 'C')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bessie_puzzle = bessie_puzzle.replace('C', 'B')\n    bessie_puzzle = bessie_puzzle.replace('A', 'C')\n    bessie_puzzle = bessie_puzzle.replace('X', 'A')\n    bessie_puzzle = bessie_puzzle.replace('B', 'X')\n    bess"
    },
    {
        "number": 94,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = 0\n    for i in range(len(k)):\n        x += int(k[i]) * n ** (len(k) - 1 - i)\n    return str(x)"
    },
    {
        "number": 95,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    increasing = False\n    constant = False\n    decreasing = False\n    for i in range(1, n):\n        if arr[i] < arr[i-1]:\n            increasing = True\n            break\n    if not increasing:\n        for i in range(1, n):\n            if arr[i]!= arr[i-1]:\n                constant = True\n                break\n    if not constant:\n        for i in range(1, n):\n            if arr[i] > arr[i-1]:\n                decreasing = True\n                break\n    if increasing and constant and decreasing:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 96,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    paths = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            paths[i].append(i//2)\n        else:\n            paths[i].append(i-1)\n        j = i-1\n        while j > 0:\n            if paths[j][-1] % 2 == 0:\n                paths[i].append(paths[j][-1]//2)\n            else:\n                paths[i].append(paths[j][-1]-1)\n            j -= 1\n    count = 0\n    for i in range(1, n+1):\n        if len(set(paths[i])) >= k:\n            count += 1\n    return count"
    },
    {
        "number": 97,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, v_x, v_y = map(int, stdin.split())\n    if v_x == 0 and v_y == 0:\n        return \"-1\"\n    if x == 0 or x == n or y == 0 or y == m:\n        return \"0 0\"\n    if v_x > 0 and v_y > 0:\n        return f\"{n} {m}\"\n    if v_x < 0 and v_y > 0:\n        return f\"0 {m}\"\n    if v_x < 0 and v_y < 0:\n        return f\"0 0\"\n    if v_x > 0 and v_y < 0:\n        return f\"{n} 0\""
    },
    {
        "number": 98,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, b_1 = map(int, stdin.readline().split())\n    a_2, b_2 = map(int, stdin.readline().split())\n    a_3, b_3 = map(int, stdin.readline().split())\n\n    if a_1 < a_2 + a_3 or b_1 < b_2 + b_3:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 99,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b_1, q, l, m = map(int, stdin.split()[0:4])\n    a = list(map(int, stdin.split()[4:]))\n    if q == 0 and b_1 == 0:\n        return \"inf\"\n    if q == 0:\n        return \"0\"\n    if b_1 == 0:\n        return str(m)\n    if m == 0:\n        return \"0\"\n    if b_1 in a:\n        return \"0\"\n    if q > 0:\n        n = (l - abs(b_1)) // q + 1\n    else:\n        n = (l - abs(b_1)) // q - 1\n    if n > m:\n        return \"inf\"\n    return str(n)"
    },
    {
        "number": 100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0].split())\n    monitor = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    # find all possible frames\n    frames = []\n    for i in range(n):\n        for j in range(m):\n            if monitor[i][j] == 'w':\n                # check if the frame is valid\n                if i > 0 and monitor[i-1][j] == 'w':\n                    continue\n                if i < n-1 and monitor[i+1][j] == 'w':\n                    continue\n                if j > 0 and monitor[i][j-1] == 'w':\n                    continue\n                if j < m-1 and monitor[i][j+1] == 'w':\n                    continue\n                frames.append((i, j))\n    # find the frame with the minimum size\n    min_size = float('inf')\n    min_frame = None\n    for frame in frames:\n        size = abs(frame[0] - frame[1]) + 1\n        if size < min_size:\n            min_size = size\n            min_frame = frame\n    # print the frame\n    if min_frame is None:\n        return '-1'\n    else:\n        frame = [['.' for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i == min_frame[0] or i == min_frame[0]+1 or i == min_frame[0]-1:\n                    if j == min_frame[1] or j == min_frame[1]+1 or j == min_frame[1]-1:\n                        frame[i][j] = '+'\n                    else:\n                        frame[i][j] = '.'\n                else:\n                    frame[i][j] = 'w'\n        return '\\n'.join([''.join(line) for line in frame])"
    },
    {
        "number": 101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if n % (a + b)!= 0:\n        return \"NO\"\n    x = n // a\n    y = n // b\n    return \"YES\\n\" + f\"{x} {y}\""
    },
    {
        "number": 102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    score = int(stdin)\n    if score == 0:\n        return 'zero'\n    elif score < 0 or score > 99:\n        return 'invalid'\n    elif score < 20:\n        return numeral_dict[score]\n    elif score < 100:\n        tens = score // 10 * 10\n        ones = score % 10\n        return numeral_dict[tens] + '-' + numeral_dict[ones]\n    else:\n        return 'invalid'\n\nnumeral_dict = {\n    0: 'zero',\n    1: 'one',\n    2: 'two',\n    3: 'three',\n    4: 'four',\n    5: 'five',\n    6:'six',\n    7:'seven',\n    8: 'eight',\n    9: 'nine',\n    10: 'ten',\n    11: 'eleven',\n    12: 'twelve',\n    13: 'thirteen',\n    14: 'fourteen',\n    15: 'fifteen',\n    16:'sixteen',\n    17:'seventeen',\n    18: 'eighteen',\n    19: 'nineteen',\n    20: 'twenty',\n    30: 'thirty',\n    40: 'forty',\n    50: 'fifty',\n    60:'sixty',\n    70:'seventy',\n    80: 'eighty',\n    90: 'ninety'\n}"
    },
    {
        "number": 103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n-1):\n        if a[i+1] - a[i] == 1:\n            count += 1\n        else:\n            break\n    if count == 0:\n        return \"0\"\n    else:\n        return str(count)"
    },
    {
        "number": 104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    total_problems = sum(a)\n    half_problems = total_problems // 2\n    current_problems = 0\n    for i in range(n):\n        current_problems += a[i]\n        if current_problems >= half_problems:\n            return i+1\n    return -1"
    },
    {
        "number": 105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    board = [[int(x) for x in line.split()] for line in lines[1:]]\n\n    # initialize variables\n    steps = 0\n    replacements = 0\n    visited = set()\n    path = [(0, 0)]\n\n    # DFS to find all paths\n    while path:\n        # get current position and remove from path\n        i, j = path.pop()\n        visited.add((i, j))\n\n        # check if we have reached the end\n        if i == n-1 and j == n-1:\n            steps += 1\n            continue\n\n        # check all possible moves\n        for di, dj in [(1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2)]:\n            ni, nj = i+di, j+dj\n            if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited and board[ni][nj] == board[i][j]+1:\n                # add to path and continue\n                path.append((ni, nj))\n                break\n        else:\n            # no valid move found, replace piece\n            replacements += 1\n            for di, dj in [(1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, -1), (-2, 1), (-1, 2)]:\n                ni, nj = i+di, j+dj\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited and board[ni][nj] == board[i][j]+1:\n                    # add to path and continue\n                    path.append((ni, nj))\n                    break\n\n    # return result\n    return f'{steps} {replacements}'"
    },
    {
        "number": 107,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if not s:\n        return \"no\"\n    if s[0] == \"0\":\n        return \"no\"\n    if s[-1] == \"0\":\n        return \"no\"\n    if s.count(\"1\") % 64!= 0:\n        return \"no\"\n    return \"yes\""
    },
    {
        "number": 108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.lower()\n    n = len(s)\n    for i in range(n):\n        if s[i] == 'z':\n            return '-1'\n        if s[i] < 'z':\n            s = s[:i] + chr(ord(s[i])+1) + s[i+1:]\n    return s"
    },
    {
        "number": 109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, r, k = map(int, stdin.split())\n    pond = [[0] * m for _ in range(n)]\n    for i in range(k):\n        x, y = randint(0, n - 1), randint(0, m - 1)\n        pond[x][y] = 1\n    max_expected = 0\n    for i in range(n - r + 1):\n        for j in range(m - r + 1):\n            expected = 0\n            for x in range(i, i + r):\n                for y in range(j, j + r):\n                    expected += pond[x][y]\n            max_expected = max(max_expected, expected)\n    return str(max_expected)"
    },
    {
        "number": 110,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_product = float('-inf')\n    for i in range(n):\n        product = 1\n        for j in range(n):\n            if j == i:\n                product *= -a[j] - 1\n            else:\n                product *= a[j]\n        if product > max_product:\n            max_product = product\n            result = a.copy()\n            result[i] = -a[i] - 1\n    return''.join(map(str, result))"
    },
    {
        "number": 111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    if len(divisors) < k:\n        return -1\n    else:\n        return sorted(divisors)[k-1]"
    },
    {
        "number": 112,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cubes = []\n    for i in range(n):\n        cube = list(map(int, stdin.readline().strip().split()))\n        cubes.append(cube)\n    max_num = 0\n    for i in range(1, 10):\n        num = i\n        for j in range(n):\n            for k in range(6):\n                if cubes[j][k] == 0:\n                    continue\n                if cubes[j][k] == 6 and num % 10 == 9:\n                    continue\n                if cubes[j][k] == 9 and num % 10 == 6:\n                    continue\n                num = num * 10 + cubes[j][k]\n        max_num = max(max_num, num)\n    return str(max_num) if max_num > 0 else \"0\""
    },
    {
        "number": 113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = n * 10 ** k\n    while x % n!= 0:\n        x += 10 ** k\n    return str(x)"
    },
    {
        "number": 114,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    A = []\n    B = [[0 for j in range(m)] for i in range(n)]\n    for i in range(n):\n        A.append(list(map(int, stdin.split()[i*m:(i+1)*m])))\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= B[i][j]:\n                for x in range(max(0, i-1), min(n, i+2)):\n                    for y in range(max(0, j-1), min(m, j+2)):\n                        B[x][y] = 1\n                break\n    if all(A[i][j] == B[i][j] for i in range(n) for j in range(m)):\n        return \"0\"\n    else:\n        k = 0\n        for i in range(n):\n            for j in range(m):\n                if A[i][j]!= B[i][j]:\n                    k += 1\n                    print(k, i+1, j+1)\n        return str(k)"
    },
    {
        "number": 115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, s, p = map(int, stdin.split())\n    n = r + s + p\n    p_r = r / n\n    p_s = s / n\n    p_p = p / n\n    p_r_survive = 1 - (p_s * p_p) / (p_r * (1 - p_s) + p_s * (1 - p_p))\n    p_s_survive = 1 - (p_r * p_p) / (p_s * (1 - p_r) + p_p * (1 - p_s))\n    p_p_survive = 1 - (p_r * p_s) / (p_p * (1 - p_r) + p_r * (1 - p_s))\n    return f\"{p_r_survive:.10f} {p_s_survive:.10f} {p_p_survive:.10f}\""
    },
    {
        "number": 116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_1, r_1, l_2, r_2, k = map(int, stdin.split())\n    if l_1 > r_1 or l_2 > r_2:\n        return \"Invalid input\"\n    if k < l_1 or k > r_1:\n        return \"Invalid input\"\n    if l_2 < l_1 or l_2 > r_1:\n        return \"Invalid input\"\n    if r_2 < l_1 or r_2 > r_1:\n        return \"Invalid input\"\n    if k < l_2 or k > r_2:\n        return \"Invalid input\"\n    if l_1 == l_2 and r_1 == r_2:\n        return \"0\"\n    if l_1 == l_2:\n        return str(r_1 - l_1 + 1)\n    if r_1 == r_2:\n        return str(r_2 - l_2 + 1)\n    if k < l_2:\n        return str(r_1 - l_1 + 1 + r_2 - k)\n    else:\n        return str(r_1 - l_1 + 1 + k - l_2)"
    },
    {
        "number": 117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    segments = []\n    for i in range(1, n+1):\n        a, b, c = map(int, lines[i].split())\n        segments.append((a, b, c))\n    for i in range(n+1, n+m+1):\n        d, e, f = map(int, lines[i].split())\n        segments.append((d, e, f))\n\n    # calculate area\n    area = 0\n    for i in range(n):\n        for j in range(m):\n            if segments[i][0] <= segments[j][1] and segments[j][0] <= segments[i][1]:\n                # cow can reach this segment\n                if segments[i][2] == segments[j][2]:\n                    # cow can cross this segment\n                    continue\n                else:\n                    # cow can't cross this segment\n                    area += (segments[i][1] - segments[i][0]) * (segments[j][2] - segments[i][2])\n            else:\n                # cow can't reach this segment\n                continue\n    if area == 0:\n        return 'INF'\n    else:\n        return str(area)"
    },
    {
        "number": 118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s, x = map(int, stdin.split())\n    if x % s == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][0] >= segments[j][0] and segments[i][1] <= segments[j][1]:\n                return f\"{i+1} {j+1}\"\n    return \"-1 -1\""
    },
    {
        "number": 120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count_a = count_c = count_g = count_t = 0\n    for c in s:\n        if c == 'A':\n            count_a += 1\n        elif c == 'C':\n            count_c += 1\n        elif c == 'G':\n            count_g += 1\n        elif c == 'T':\n            count_t += 1\n    if count_a == 0 or count_c == 0 or count_g == 0 or count_t == 0:\n        return \"===\\n\"\n    if count_a == count_c == count_g == count_t:\n        return s\n    if count_a == count_c == count_g:\n        return s.replace('?', 'T')\n    if count_a == count_c == count_t:\n        return s.replace('?', 'G')\n    if count_a == count_g == count_t:\n        return s.replace('?', 'C')\n    if count_c == count_g == count_t:\n        return s.replace('?', 'A')\n    if count_a == count_c:\n        return s.replace('?', 'T').replace('C', 'G')\n    if count_a == count_g:\n        return s.replace('?', 'C').replace('G', 'T')\n    if count_a == count_t:\n        return s.replace('?', 'G').replace('T', 'C')\n    if count_c == count_g:\n        return s.replace('?', 'A').replace('G', 'T')\n    if count_c == count_t:\n        return s.replace('?', 'A').replace('T', 'G')\n    if count_g == count_t:\n        return s.replace('?', 'A').replace('C', 'T')\n    return \"===\\n\""
    },
    {
        "number": 121,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    board = []\n    for line in lines:\n        board.append(list(line))\n\n    # Check if Ilya could have won by making single turn\n    for i in range(4):\n        for j in range(4):\n            if board[i][j] == '.':\n                board[i][j] = 'x'\n                if check_win(board):\n                    return \"YES\"\n                board[i][j] = '.'\n\n    return \"NO\"\n\ndef"
    },
    {
        "number": 122,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    prefix_sum = [0] * (n + 1)\n    suffix_sum = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + a[i - 1]\n        suffix_sum[n - i + 1] = suffix_sum[n - i] + a[n - i]\n    for i in range(1, n):\n        if prefix_sum[i] == suffix_sum[i + 1]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    if not all(0 <= x <= 200 for x in a):\n        return \"No\"\n    if not all(1 <= x <= 200 for x in b):\n        return \"No\"\n    if len(set(a))!= n:\n        return \"No\"\n    if len(set(b))!= k:\n        return \"No\"\n    if len(set(a) & set(b))!= 0:\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i in range(n)):\n        return \"No\"\n    if not all(a[i] == 0 or a[i] == b[i-a.count(0)] for i"
    },
    {
        "number": 124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.readline().split())\n    a, b, c = map(int, stdin.readline().split())\n\n    if a >= x and b >= y and c >= z:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(len(lines)):\n        lines[i] = lines[i].split()\n        lines[i] = [int(x) for x in lines[i]]\n    for i in range(len(lines)):\n        for j in range(len(lines[i])):\n            if lines[i][j] == 1:\n                for k in range(len(lines)):\n                    if k!= i:\n                        if lines[k][j] == 1:\n                            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    num = stdin.readline().strip()\n    if num == '09':\n        return 'NO'\n    if num == '911':\n        return 'YES'\n    if num[0] == '0':\n        return 'NO'\n    if num[0] == '1':\n        if num[1] == '0':\n            return 'NO'\n        if num[1] == '1':\n            if num[2] == '0':\n                return 'NO'\n            if num[2] == '1':\n                if num[3] == '0':\n                    return 'NO'\n                if num[3] == '1':\n                    if num[4] == '0':\n                        return 'NO'\n                    if num[4] == '1':\n                        if num[5] == '0':\n                            return 'NO'\n                        if num[5] == '1':\n                            if num[6] == '0':\n                                return 'NO'\n                            if num[6] == '1':\n                                if num[7] == '0':\n                                    return 'NO'\n                                if num[7] == '1':\n                                    if num[8] == '0':\n                                        return 'NO'\n                                    if num[8] == '1':\n                                        return 'YES'\n    return 'NO'"
    },
    {
        "number": 127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f = map(int, stdin.split())\n    k = []\n    l = []\n    for i in range(n):\n        ki, li = map(int, stdin.split())\n        k.append(ki)\n        l.append(li)\n    dp = [0] * n\n    for i in range(f):\n        dp[i] = k[i] * 2\n    for i in range(f, n):\n        dp[i] = max(dp[i-1], dp[i-f] + k[i] * 2)\n    return max(dp)"
    },
    {
        "number": 128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cows = list(map(int, stdin.readline().split()))\n    messiness = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if cows[i] > cows[j]:\n                messiness += 1\n    return messiness"
    },
    {
        "number": 129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, l = map(int, stdin.split())\n    if k > n or m > n or l > n:\n        return \"-1\"\n    if k == n:\n        return str(n)\n    if k == 1:\n        return str(n - l)\n    if k == 2:\n        return str(n - l) if n - l >= 2 else \"-1\"\n    if k == 3:\n        return str(n - l) if n - l >= 3 else \"-1\"\n    if k == 4:\n        return str(n - l) if n - l >= 4 else \"-1\"\n    if k == 5:\n        return str(n - l) if n - l >= 5 else \"-1\"\n    if k == 6:\n        return str(n - l) if n - l >= 6 else \"-1\"\n    if k == 7:\n        return str(n - l) if n - l >= 7 else \"-1\"\n    if k == 8:\n        return str(n - l) if n - l >= 8 else \"-1\"\n    if k == 9:\n        return str(n - l) if n - l >= 9 else \"-1\"\n    if k == 10:\n        return str(n - l) if n - l >= 10 else \"-1\"\n    if k == 11:\n        return str(n - l) if n - l >= 11 else \"-1\"\n    if k == 12:\n        return str(n - l) if n - l >= 12 else \"-1\"\n    if k == 13:\n        return str(n - l) if n - l >= 13 else \"-1\"\n    if k == 14:\n        return str(n - l) if n - l >= 14 else \"-1\"\n    if k == 15:\n        return str(n - l) if n - l >= 15 else \"-1\"\n    if k == 16:\n        return str(n - l) if n - l >= 16 else \"-1\"\n    if k == 17:\n        return str(n - l) if n - l >= 17 else \"-1\"\n    if k == 18:\n        return str(n - l) if n - l >= 18 else \"-1\"\n    if k == 19:\n        return str(n - l) if n - l >= 19 else \"-1\"\n    if k == 20:\n        return str(n - l) if n - l >= 20 else \"-1\""
    },
    {
        "number": 130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = []\n    for i in range(n):\n        board.append(list(stdin.readline().strip()))\n    black_count = 0\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == 'B':\n                black_count += 1\n    if black_count < 4:\n        return -1\n    for i in range(n):\n        if board[i][0] == 'B' and board[i][1] == 'B' and board[i][2] == 'B':\n            return 4\n        if board[i][0] == 'B' and board[i][1] == 'B' and board[i][2] == 'W':\n            return 3\n        if board[i][0] == 'B' and board[i][1] == 'W' and board[i][2] == 'B':\n            return 3\n        if board[i][0] == 'B' and board[i][1] == 'W' and board[i][2] == 'W':\n            return 2\n        if board[i][0] == 'W' and board[i][1] == 'B' and board[i][2] == 'B':\n            return 3\n        if board[i][0] == 'W' and board[i][1] == 'B' and board[i][2] == 'W':\n            return 2\n        if board[i][0] == 'W' and board[i][1] == 'W' and board[i][2] == 'B':\n            return 2\n        if board[i][0] == 'W' and board[i][1] == 'W' and board[i][2] == 'W':\n            return 1\n    return -1"
    },
    {
        "number": 131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    y = list(map(int, stdin.readline().strip().split()))\n    if x == y:\n        return \"Yes\"\n    else:\n        for i in range(n):\n            if x[i] > y[i]:\n                return \"No\"\n        return \"Yes\""
    },
    {
        "number": 132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] - a[i] < ans:\n                ans = a[j] - a[i]\n    return str(ans)"
    },
    {
        "number": 133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    dp[0][0] = 1\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    return dp[m][n]"
    },
    {
        "number": 134,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        for j in range(i+1, n):\n            k = n - i - j\n            if i*i + j*j == k*k:\n                return f\"{i} {j}\"\n    return \"-1\""
    },
    {
        "number": 135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    remainders = set()\n    for i in range(1, k+1):\n        remainders.add(n % i)\n    if len(remainders) == k:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 136,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a < b:\n        return \"<\"\n    elif a > b:\n        return \">\"\n    else:\n        return \"=\""
    },
    {
        "number": 137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    c = list(map(int, stdin.readline().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * 2 for _ in range(n)]\n    dp[0][c[0] + 1] = 1\n    for i in range(1, n):\n        for j in range(2):\n            if j == 0:\n                dp[i][j] = (dp[i-1][j] + dp[i-1][j+1]) % MOD\n            else:\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j]) % MOD\n            if c[i] == -1:\n                dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD\n    if p == 0:\n        return str((dp[n-1][0] + dp[n-1][1]) % MOD)\n    else:\n        return str((dp[n-1][0] + dp[n-1][1] - dp[n-1][0] * dp[n-1][1]) % MOD)"
    },
    {
        "number": 138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    k = (n + 3) // 4\n    rubles = a * k + b * (k // 2) + c * (k // 3)\n    return str(rubles)"
    },
    {
        "number": 139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = set()\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        edges.add((u, v))\n    if len(edges) == n - 1:\n        return \"YES\"\n    elif len(edges) == n - 2:\n        for u, v in edges:\n            if (v, u) not in edges:\n                return \"YES\"\n        return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    antennas = []\n    for i in range(n):\n        x, s = map(int, stdin.split())\n        antennas.append((x, s))\n    antennas.sort()\n    coins = 0\n    for i in range(1, m+1):\n        left = bisect_left(antennas, (i, 0))\n        right = bisect_right(antennas, (i, 0))\n        if left == right:\n            coins += 1\n        else:\n            coins += antennas[left-1][1] + antennas[right-1][1]\n    return coins\n\ndef"
    },
    {
        "number": 141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W, cnt = map(int, stdin.split())\n    dp = [0] * (W + 1)\n    dp[0] = 1\n    for i in range(1, W + 1):\n        for j in range(1, 9):\n            if cnt[j] > 0 and i >= j:\n                dp[i] = max(dp[i], dp[i - j] + 1)\n    return dp[W]"
    },
    {
        "number": 142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    bottles = [2**i - 1 for i in range(n)]\n    bottles.sort(reverse=True)\n    total_cost = 0\n    for i in range(n):\n        if L >= bottles[i]:\n            total_cost += c[i] * (L // bottles[i])\n            L %= bottles[i]\n    return total_cost"
    },
    {
        "number": 143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[j] < b[i]:\n                b[i] = b[j]\n    mex = 1\n    for i in range(n):\n        if b[i] == 0:\n            b[i] = mex\n            mex += 1\n    return str(mex)"
    },
    {
        "number": 144,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ticket = stdin.readline().strip()\n    segments = []\n    current_sum = 0\n    for i in range(n):\n        current_sum += int(ticket[i])\n        segments.append(current_sum)\n    if len(set(segments)) < n:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # count the number of distinct characters in the user name\n    distinct_chars = len(set(stdin))\n    # if the number of distinct characters is odd, then it is a male, otherwise it is a female\n    if distinct_chars % 2 == 1:\n        return \"CHAT WITH HER!\"\n    else:\n        return \"IGNORE HIM!\""
    },
    {
        "number": 146,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    tabs = list(map(int, stdin.readline().split()))\n    e = sum(1 for t in tabs if t == 1)\n    s = sum(1 for t in tabs if t == -1)\n    return str(max(abs(e - s), abs(e - s - 1)))"
    },
    {
        "number": 147,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c_0, c_1 = map(int, stdin.split())\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n    for j in range(n+1):\n        dp[0][j] = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n    return dp[n][n] * c_0 + dp[n][n] * c_1"
    },
    {
        "number": 148,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, x, b, y = map(int, stdin.split())\n    if a == x or b == y:\n        return \"YES\"\n    elif a == b or x == y:\n        return \"YES\"\n    elif a == y or b == x:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 149,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, l, r = map(int, stdin.split())\n    if l > r:\n        return \"0\"\n    if l == r:\n        return \"1\" if (l == x**0 + y**1 or l == x**1 + y**0) else \"0\"\n    if l == x**0 + y**1:\n        return str(r - l + 1)\n    if l == x**1 + y**0:\n        return str(r - l + 1)\n    if l == x**1 + y**1:\n        return str(r - l + 1)\n    if l == x**2 + y**0:\n        return str(r - l + 1)\n    if l == x**0 + y**2:\n        return str(r - l + 1)\n    if l == x**2 + y**1:\n        return str(r - l + 1)\n    if l == x**1 + y**2:\n        return str(r - l + 1)\n    if l == x**2 + y**2:\n        return str(r - l + 1)\n    return \"0\""
    },
    {
        "number": 150,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 2:\n        return \"1\"\n    divisors = []\n    for i in range(2, n):\n        if n % i == 0:\n            divisors.append(i)\n    return str(max(divisors))"
    },
    {
        "number": 151,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    result = []\n    for i in range(len(word)):\n        if word[i] not in vowels:\n            if i == 0 or word[i-1] in vowels:\n                if i == len(word)-1 or word[i+1] in vowels:\n                    result.append(word[i])\n                else:\n                    result.append(word[i] +'')\n            else:\n                result.append(word[i])\n        else:\n            result.append(word[i])\n    return ''.join(result)"
    },
    {
        "number": 152,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    x, s = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n\n    # sort spells by cost\n    a, b, c, d = zip(*sorted(zip(a, b, c, d)))\n\n    # initialize variables\n    time = 0\n    mana = 0\n    potions = 0\n\n    # use first spell of first type\n    if mana + b[0] <= s:\n        time += a[0]\n        mana += b[0]\n        potions += c[0]\n\n    # use first spell of second type\n    if mana + d[0] <= s:\n        potions += c[0]\n\n    # use second spell of first type\n    if potions < n:\n        if mana + b[1] <= s:\n            time += a[1]\n            mana += b[1]\n            potions += c[1]\n\n    # use second spell of second type\n    if potions < n:\n        if mana + d[1] <= s:\n            potions += c[1]\n\n    # use remaining spells of first type\n    for i in range(2, m):\n        if potions < n:\n            if mana + b[i] <= s:\n                time += a[i]\n                mana += b[i]\n                potions += c[i]\n\n    # use remaining spells of second type\n    for i in range(k):\n        if potions < n:\n            if mana + d[i] <= s:\n                potions += c[i]\n\n    # calculate minimum time\n    return time * potions"
    },
    {
        "number": 153,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.readline().split())\n    t = list(map(int, stdin.readline().split()))\n    t.sort()\n    points = 0\n    time = 0\n    for i in range(k):\n        if time + t[i] <= m:\n            points += 1\n            time += t[i]\n        else:\n            break\n    if points == k:\n        points += 1\n    return points"
    },
    {
        "number": 154,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 998244353\n    dp = [[0] * 2 for _ in range(n+1)]\n    dp[0][0] = 1\n    dp[0][1] = 1\n    for i in range(1, n+1):\n        dp[i][0] = (dp[i-1][0] * 2 + dp[i-1][1]) % MOD\n        dp[i][1] = (dp[i-1][0] + dp[i-1][1] * 2) % MOD\n    return dp[n][0]"
    },
    {
        "number": 155,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    k = k % (n * m)\n    if k == 0:\n        return \"1 1\"\n    row = 1\n    col = 1\n    for i in range(k):\n        if i % 2 == 0:\n            col += 1\n        else:\n            row += 1\n    return f\"{row} {col}\""
    },
    {
        "number": 156,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin)\n    a = 1\n    b = X\n    while a < b:\n        mid = (a + b) // 2\n        if mid * X // gcd(mid, X) == X:\n            a = mid + 1\n        else:\n            b = mid\n    return f\"{a} {b}\"\n\ndef"
    },
    {
        "number": 157,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a < 2 or b < 2 or c < 2:\n        return \"0\"\n    if a > b + c or b > a + c or c > a + b:\n        return \"0\"\n    return str(min(a, b, c) + max(0, a - b, b - c, c - a))"
    },
    {
        "number": 158,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ratings = list(map(int, stdin.split()[1:]))\n    ratings.sort()\n    if ratings[-1] - ratings[0] < n:\n        return \"NO\"\n    for i in range(n):\n        if ratings[i] - ratings[i+n] < n:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 159,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(1, n):\n        if gcd(a[i-1], a[i])!= 1:\n            k += 1\n            a.insert(i, 1)\n    print(k)\n    print(*a)\n\ndef"
    },
    {
        "number": 160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # perform operations\n    for _ in range(K):\n        i, j = map(int, stdin.readline().split())\n        A[i-1] += 1\n        A[j-1] -= 1\n\n    # find maximum positive integer that divides every element of A\n    max_divisor = 1\n    for a in A:\n        if a == 0:\n            return \"0\"\n        while a % max_divisor == 0:\n            a //= max_divisor\n        max_divisor = max(max_divisor, a)\n\n    return str(max_divisor)"
    },
    {
        "number": 161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    t = 0\n    while x!= 2**t - 1:\n        if t % 2 == 0:\n            x += 1\n        else:\n            n = int(input())\n            x ^= 2**n - 1\n        t += 1\n    return str(t) + '\\n' +''.join(str(2**i - 1) for i in range(t//2)) + '\\n'\n\nprint(solution(\"39\")) # Output: 4 5 3\nprint(solution(\"1\")) # Output: 0\nprint(solution(\"7\")) # Output: 0"
    },
    {
        "number": 162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] <= k:\n            ans += k // a[i]\n            k %= a[i]\n    return ans"
    },
    {
        "number": 163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    line = stdin.split()[1]\n    grasshopper_pos = line.index('G')\n    insect_pos = line.index('T')\n    if abs(grasshopper_pos - insect_pos) <= k:\n        return \"YES\"\n    for i in range(1, n):\n        if line[grasshopper_pos+i*k] == '.' and line[grasshopper_pos+i*k-1] == '.' and line[grasshopper_pos+i*k+1] == '.':\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y_1, y_2, y_w, x_b, y_b, r = map(int, stdin.split())\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r <= y_w:\n        return \"-1\"\n    if y_b - r <= y_2:\n        return \"-1\"\n    if y_b + r >= y_w:\n        return \"-1\"\n    if y_b - r <= y_1:\n        return \"-1\"\n    if y_b + r >= y_2:\n        return \"-1\"\n    if y_b - r"
    },
    {
        "number": 165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, d, s = map(int, stdin.split())\n    if b == 0 and d == 0 and s == 0:\n        return \"0\"\n    if b == 0 and d == 0:\n        return str(s)\n    if b == 0 and s == 0:\n        return str(d)\n    if d == 0 and s == 0:\n        return str(b)\n    if b == 0:\n        return str(min(d, s))\n    if d == 0:\n        return str(min(b, s))\n    if s == 0:\n        return str(min(b, d))\n    return str(min(b, d, s))"
    },
    {
        "number": 166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    path = list(map(int, stdin.readline().strip().split()))\n    x = 1\n    y = 1\n    for i in range(n):\n        if i == 0:\n            x = path[i]\n        elif i == 1:\n            y = path[i]\n        else:\n            if path[i] == y*(i-1) + x:\n                continue\n            elif path[i] == y*(i-1) + x + 1:\n                x += 1\n            elif path[i] == y*(i-1) + x - 1:\n                x -= 1\n            elif path[i] == y*(i-1) + x + y:\n                y += 1\n            elif path[i] == y*(i-1) + x - y:\n                y -= 1\n            else:\n                return \"NO\"\n    return \"YES\\n\" + str(x) + \" \" + str(y)"
    },
    {
        "number": 167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split('\\n')\n    if b in a:\n        return b\n    else:\n        i = 0\n        j = 0\n        while i < len(a) and j < len(b):\n            if a[i] == b[j]:\n                i += 1\n                j += 1\n            else:\n                i += 1\n        return b[:j]"
    },
    {
        "number": 168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == \"+\":\n            count += 1\n        else:\n            count -= 1\n    return str(max(count, 0))"
    },
    {
        "number": 169,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n < a:\n        return \"0\"\n    if n < a + b:\n        return \"1\"\n    if n < a + b + c:\n        return \"2\"\n    return str((n - a - b) // (b - c))"
    },
    {
        "number": 170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k1 = int(stdin.readline().strip())\n    cards1 = list(map(int, stdin.readline().strip().split()))\n    k2 = int(stdin.readline().strip())\n    cards2 = list(map(int, stdin.readline().strip().split()))\n\n    if k1 + k2!= n:\n        return \"-1\"\n\n    fights = 0\n    while k1 > 0 and k2 > 0:\n        fights += 1\n        if cards1[k1-1] > cards2[k2-1]:\n            cards1.append(cards1.pop(k1-1))\n            cards1.append(cards2.pop(k2-1))\n            k1 -= 1\n            k2 -= 1\n        elif cards1[k1-1] < cards2[k2-1]:\n            cards2.append(cards2.pop(k2-1))\n            cards2.append(cards1.pop(k1-1))\n            k1 -= 1\n            k2 -= 1\n        else:\n            cards1.append(cards1.pop(k1-1))\n            cards2.append(cards2.pop(k2-1))\n            k1 -= 1\n            k2 -= 1\n\n    if k1 == 0:\n        return f\"{fights} 2\"\n    elif k2 == 0:\n        return f\"{fights} 1\"\n    else:\n        return \"-1\""
    },
    {
        "number": 171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    password = stdin.strip()\n    if len(password) < 5:\n        return \"Too weak\"\n    if not any(char.isupper() for char in password):\n        return \"Too weak\"\n    if not any(char.islower() for char in password):\n        return \"Too weak\"\n    if not any(char.isdigit() for char in password):\n        return \"Too weak\"\n    return \"Correct\""
    },
    {
        "number": 172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    a = list(map(int, stdin.split('\\n')[1].split()))\n    b = list(map(int, stdin.split('\\n')[2].split()))\n\n    if len(set(a))!= 5 or len(set(b))!= 5:\n        return '-1'\n\n    count = [0] * 5\n    for i in range(n):\n        count[a[i]-1] += 1\n        count[b[i]-1] += 1\n\n    for i in range(5):\n        if count[i] % 2!= 0:\n            return '-1'\n\n    return str(sum(count)//2)"
    },
    {
        "number": 173,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    h_dir = stdin.readline().strip()\n    v_dir = stdin.readline().strip()\n\n    # Check if all horizontal streets are one way\n    for i in range(n - 1):\n        if h_dir[i] == h_dir[i+1]:\n            return \"NO\"\n\n    # Check if all vertical streets are one way\n    for i in range(m - 1):\n        if v_dir[i] == v_dir[i+1]:\n            return \"NO\"\n\n    # Check if all intersections are reachable\n    for i in range(n - 1):\n        for j in range(m - 1):\n            if h_dir[i] == '<' and v_dir[j] == '^':\n                continue\n            if h_dir[i] == '>' and v_dir[j] == 'v':\n                continue\n            if h_dir[i] == '<' and v_dir[j] == 'v':\n                continue\n            if h_dir[i] == '>' and v_dir[j] == '^':\n                continue\n            return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 174,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    args = stdin.readline().strip().split()\n    args = [int(arg) for arg in args]\n    if n == 1:\n        if args[0] == 0:\n            return \"YES\\n0\"\n        else:\n            return \"NO\"\n    else:\n        for i in range(n):\n            if args[i] == 0:\n                args[i] = \"(\"\n                break\n        for i in range(n-1, -1, -1):\n            if args[i] == 1:\n                args[i] = \")\"\n                break\n        for i in range(n):\n            if args[i] == 0:\n                args[i] = \"0\"\n            elif args[i] == 1:\n                args[i] = \"1\"\n        return \"YES\\n\" + \"\".join(args)"
    },
    {
        "number": 175,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    while a!= 0 and b!= 0:\n        if a >= 2*b:\n            a -= 2*b\n        else:\n            if b >= 2*a:\n                b -= 2*a\n            else:\n                break\n    return f\"{a} {b}\""
    },
    {
        "number": 176,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if i % k == 0:\n            count += 1\n    return count"
    },
    {
        "number": 177,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    num = 1\n    count = 1\n    while count <= k:\n        num += 1\n        count += len(str(num))\n    return str(num)[k-1]"
    },
    {
        "number": 178,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if n % 2 == 0 or s[0]!= '8':\n        return 'NO'\n    for i in range(1, n, 2):\n        if s[i]!= '0':\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 179,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, pos = map(int, stdin.split())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    if (i, j, k, l) == (x, pos+1, pos+2, pos+3):\n                        count += 1\n    return str(count % MOD)\n\nprint(solution(\"4 1 2\")) # Output: 6\nprint(solution(\"123 42 24\")) # Output: 824071958"
    },
    {
        "number": 180,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    string, k = stdin.split()\n    k = int(k)\n    if k > len(string):\n        return \"Impossible\"\n    result = \"\"\n    i = 0\n    while i < len(string):\n        if string[i] == \"?\":\n            if i == 0 or i == len(string) - 1:\n                return \"Impossible\"\n            if string[i-1] == \"*\":\n                if string[i+1] == \"*\":\n                    result += string[i+1]\n                    i += 2\n                else:\n                    result += string[i+1]\n                    i += 1\n            elif string[i+1] == \"*\":\n                result += string[i-1]\n                i += 2\n            else:\n                return \"Impossible\"\n        else:\n            result += string[i]\n            i += 1\n    if len(result)!= k:\n        return \"Impossible\"\n    return result"
    },
    {
        "number": 181,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x == 0:\n        return \"0\"\n    elif x > 0:\n        return str(x // 90)\n    else:\n        return str((-x) // 90 + 1)"
    },
    {
        "number": 182,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split()[0:3])\n    x, y, z = map(int, stdin.split()[3:])\n    if a >= x and b >= y and c >= z:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 183,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    count = 0\n    for i in range(1, 10**n):\n        if len(str(i)) == n and i % k == 0:\n            for j in range(1, 10**n):\n                if len(str(j)) == n and str(j).endswith(str(i)):\n                    count += 1\n    return count % m"
    },
    {
        "number": 184,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, a = map(int, stdin.split())\n    if l + r + a == 0:\n        return 0\n    if l + r + a % 2!= 0:\n        return -1\n    if l == 0:\n        return r\n    if r == 0:\n        return l\n    if a == 0:\n        return l + r\n    if l >= r:\n        return l + r + a\n    else:\n        return l + r + a - 1"
    },
    {
        "number": 185,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coins = [True] * n\n    moves = 0\n    while True:\n        if coins[k]:\n            coins[k] = False\n            moves += 1\n            if not any(coins):\n                return moves\n        else:\n            k = (k - 1) % n\n            moves += 1\n            if not coins[k]:\n                coins[k] = True\n                moves += 1\n                if not any(coins):\n                    return moves\n        k = (k + 1) % n\n        moves += 1"
    },
    {
        "number": 186,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return \"10\"\n    elif n == 0:\n        return str(2 * m + 1)\n    elif m == 0:\n        return str(2 * n + 1)\n    else:\n        return str(max(2 * n + 1, 2 * m + 1))"
    },
    {
        "number": 187,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cards = list(map(int, stdin.split()[1:]))\n    if len(set(cards))!= n:\n        return \"NO\"\n    for i in range(1, 101):\n        if cards.count(i) % 2 == 1:\n            return \"NO\"\n    for i in range(1, 101):\n        if cards.count(i) > 0:\n            return \"YES\", i\n    return \"NO\""
    },
    {
        "number": 188,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) > 8*n:\n        return \"NO\"\n    for i in range(k):\n        for j in range(a[i]):\n            if i == 0 and j == 0:\n                continue\n            if i == 0 and j == 1:\n                continue\n            if i == 1 and j == 0:\n                continue\n            if i == 1 and j == 1:\n                continue\n            if i == 0 and j == 2:\n                continue\n            if i == 0 and j == 3:\n                continue\n            if i == 1 and j == 2:\n                continue\n            if i == 1 and j == 3:\n                continue\n            if i == 0 and j == 4:\n                continue\n            if i == 0 and j == 5:\n                continue\n            if i == 1 and j == 4:\n                continue\n            if i == 1 and j == 5:\n                continue\n            if i == 0 and j == 6:\n                continue\n            if i == 0 and j == 7:\n                continue\n            if i == 1 and j == 6:\n                continue\n            if i == 1 and j == 7:\n                continue\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 189,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    t = 1\n    cost = sum(abs(a[i] - t) for i in range(n))\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - t) > abs(a[j] - t):\n                a[i], a[j] = a[j], a[i]\n    for i in range(n):\n        if abs(a[i] - t) > 1:\n            a[i] = t\n            cost += abs(a[i] - t)\n    return f\"{t} {cost}\""
    },
    {
        "number": 191,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    MOD = 10**9+7\n    P = 1\n    Q = 1\n    for i in range(k):\n        P = (P * 2) % MOD\n        Q = (Q * 2) % MOD\n    if P == 0:\n        return \"0\"\n    else:\n        return str((P * pow(Q, MOD-2, MOD)) % MOD)"
    },
    {
        "number": 192,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == y:\n        return \"0\"\n    if x % 3 == 0:\n        return str(x // 3)\n    if y % 3 == 0:\n        return str(y // 3)\n    if x % 2 == 0:\n        return \"1\"\n    if y % 2 == 0:\n        return \"1\"\n    return \"2\""
    },
    {
        "number": 193,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    A = [[a, b], [c, d]]\n    B = [[1.2, 1.8], [2.8, 4.2]]\n    C = [[0.5, 0.5], [0.5, 0.5]]\n    detA = a*d - b*c\n    detB = 1.2*4.2 - 1.8*2.8\n    detC = 0.5*0.5 - 0.5*0.5\n    if detA == 0:\n        return str(abs(detB))\n    elif detB == 0:\n        return str(abs(detA))\n    elif detC == 0:\n        return str(abs(detA - detB))\n    else:\n        return str(min(abs(detA - detB), abs(detA + detB)))"
    },
    {
        "number": 194,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    tables = [0] * (a + b)\n    denied = 0\n    for group in stdin.split():\n        if int(group) == 1:\n            if tables[0] < a:\n                tables[0] += 1\n            elif tables[1] < b:\n                tables[1] += 1\n            else:\n                denied += 1\n        else:\n            if tables[1] < b:\n                tables[1] += 1\n            else:\n                denied += 2\n    return denied"
    },
    {
        "number": 195,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, N = map(int, stdin.split())\n    if A + B + C + 1!= N:\n        return '-1'\n    if A == 0 or B == 0 or C == 0:\n        return '-1'\n    if A + B + C > N:\n        return '-1'\n    if A + B + C + 1 == N:\n        return N - A - B - C - 1"
    },
    {
        "number": 196,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    if k == 0:\n        return str((x + 1) // 2)\n    else:\n        return str((x + 1) * 2 ** (k + 1) - 1) % (10**9 + 7)"
    },
    {
        "number": 197,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    l = []\n    r = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        l.append(a)\n        r.append(b)\n    l.sort()\n    r.sort()\n    for i in range(n):\n        if l[i] > r[i]:\n            return \"0\"\n    x = 1\n    y = 1\n    for i in range(n):\n        x *= l[i]\n        y *= r[i]\n    return str((x * pow(y, -1, 998244353)) % 998244353)"
    },
    {
        "number": 198,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n % 4 == 0:\n        return 1\n    elif n % 4 == 1:\n        return 0\n    elif n % 4 == 2:\n        return 2\n    else:\n        return 4"
    },
    {
        "number": 199,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    v = list(map(int, stdin.split()))\n    v.sort()\n    if s > sum(v):\n        return -1\n    else:\n        return v[-1]"
    },
    {
        "number": 200,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, h2 = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n\n    if h2 <= h1:\n        return -1\n\n    if h2 - h1 <= a:\n        return 1\n\n    k = (h2 - h1 - a) // b\n    if (h2 - h1 - a) % b!= 0:\n        k += 1\n\n    return k"
    },
    {
        "number": 201,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    C, H_r, H_b, W_r, W_b = map(int, stdin.split())\n    max_joy = 0\n    for i in range(1, C+1):\n        max_joy = max(max_joy, i*H_r + (C-i)*H_b)\n    return max_joy"
    },
    {
        "number": 202,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.split()[0].split(','))\n    x2, y2 = map(int, stdin.split()[1].split(','))\n    dx = x2 - x1\n    dy = y2 - y1\n    if dx == 0:\n        return abs(dy)\n    elif dy == 0:\n        return abs(dx)\n    else:\n        return abs(dx) + abs(dy)"
    },
    {
        "number": 203,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    votes = stdin.readline().strip()\n    depublicans = 0\n    remocrats = 0\n    for i in range(n):\n        if votes[i] == 'D':\n            depublicans += 1\n        else:\n            remocrats += 1\n    if depublicans > remocrats:\n        return 'D'\n    else:\n        return 'R'"
    },
    {
        "number": 204,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    count = 0\n    for w in range(1, a+1):\n        for h in range(1, b+1):\n            if w/h == x/y:\n                count += 1\n    return str(count)"
    },
    {
        "number": 205,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    factorial = 1\n    for i in range(1, n+1):\n        factorial *= i\n    count = 0\n    while factorial % b == 0:\n        count += 1\n        factorial //= b\n    return count"
    },
    {
        "number": 206,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b = map(int, stdin.split())\n    dp = [0] * (m+1)\n    dp[0] = 1\n    for i in range(1, m+1):\n        dp[i] = dp[i-1] + dp[i-a] + dp[i-b]\n    return sum(dp)"
    },
    {
        "number": 207,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    odd_count = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            odd_count += 1\n    if odd_count % 2 == 0:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 208,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 == x2 and y1 == y2:\n        return \"-1\"\n    if x1 == x2:\n        return f\"{x1} {y2} {x1} {y1}\"\n    if y1 == y2:\n        return f\"{x2} {y1} {x1} {y1}\"\n    if x1 + y1 == x2 + y2:\n        return f\"{x1} {y2} {x2} {y1}\"\n    if x1 - y1 == x2 - y2:\n        return f\"{x1} {y2} {x2} {y1}\"\n    if x1 + y1 == x2 - y2:\n        return f\"{x1} {y2} {x2} {y1}\"\n    if x1 - y1 == x2 + y2:\n        return f\"{x1} {y2} {x2} {y1}\"\n    return \"-1\""
    },
    {
        "number": 209,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    f = [x, y]\n    for i in range(2, n):\n        f.append((f[i-1] + f[i+1]) % 1000000007)\n    return str(f[n-1])"
    },
    {
        "number": 210,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if sum(a) == 0:\n        return \"NO\"\n    k = 0\n    for i in range(n):\n        if a[i]!= 0:\n            k += 1\n            j = i\n            while j < n and a[j]!= 0:\n                j += 1\n            if j == n:\n                return \"NO\"\n            a[i] = j - i\n            a[j-1] = 0\n    if k == 1:\n        return \"YES\\n1\\n1 1\"\n    else:\n        return \"YES\\n{}\\n\".format(k) + \"\\n\".join([\"{} {}\".format(i+1, i+a[i]) for i in range(k)])"
    },
    {
        "number": 211,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    score = 0\n    consecutive_correct = 0\n    for i in range(n):\n        if i < m:\n            score += 1\n            consecutive_correct += 1\n        else:\n            consecutive_correct = 0\n        if consecutive_correct == k:\n            score += 1\n            consecutive_correct = 0\n    return str(score % 1000000009)"
    },
    {
        "number": 212,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 8 == 0:\n        return \"YES\\n0\"\n    else:\n        return \"NO\""
    },
    {
        "number": 213,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    memory = []\n    for i in range(m):\n        k, f = map(int, stdin.split())\n        memory.append((k, f))\n    floors = set()\n    for k, f in memory:\n        floors.add(f)\n    if len(floors) == 1:\n        return str(floors.pop())\n    elif len(floors) == 2:\n        if n <= floors.pop():\n            return str(floors.pop())\n        else:\n            return str(floors.pop() - 1)\n    else:\n        return \"-1\""
    },
    {
        "number": 214,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if stdin[i][j] == 'X':\n                board[i][j] = 1\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 0:\n                for k in range(i+1, n):\n                    if board[k][j] == 1:\n                        break\n                    if k == n-1:\n                        count += 1\n    return count"
    },
    {
        "number": 215,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    A = set()\n    for i in range(n):\n        if s[i] == 'a':\n            A.add(i)\n    ans = 0\n    for i in A:\n        for j in A:\n            if i!= j and s[j] == 'a':\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 216,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = []\n    c = []\n    B = 0\n    C = 0\n    for i in range(n):\n        if B <= C:\n            b.append(a[i])\n            B += a[i]\n        else:\n            c.append(a[i])\n            C += a[i]\n    return str(B - C)"
    },
    {
        "number": 217,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, f, k = map(int, stdin.split())\n    if f < 0 or f > a or b < 0 or b > 10**9 or k < 1 or k > 10**4:\n        return -1\n    if f == 0:\n        return k\n    if f == a:\n        return k - 1\n    if k == 1:\n        return 0\n    if k == 2:\n        return 1\n    if f == 1:\n        return 1\n    if f == a - 1:\n        return 2\n    if f == a - 2:\n        return 3\n    if f == a - 3:\n        return 4\n    if f == a - 4:\n        return 5\n    if f == a - 5:\n        return 6\n    if f == a - 6:\n        return 7\n    if f == a - 7:\n        return 8\n    if f == a - 8:\n        return 9\n    if f == a - 9:\n        return 10\n    if f == a - 10:\n        return 11\n    if f == a - 11:\n        return 12\n    if f == a - 12:\n        return 13\n    if f == a - 13:\n        return 14\n    if f == a - 14:\n        return 15\n    if f == a - 15:\n        return 16\n    if f == a - 16:\n        return 17\n    if f == a - 17:\n        return 18\n    if f == a - 18:\n        return 19\n    if f == a - 19:\n        return 20\n    if f == a - 20:\n        return 21\n    if f == a - 21:\n        return 22\n    if f == a - 22:\n        return 23\n    if f == a - 23:\n        return 24\n    if f == a - 24:\n        return 25\n    if f == a - 25:\n        return 26\n    if f == a - 26:\n        return 27\n    if f == a - 27:\n        return 28\n    if f == a - 28:\n        return 29\n    if f == a - 29:\n        return 30\n    if f == a - 30:\n        return 31\n    if f == a - 31:\n        return 32\n    if f == a - 32:\n        return 33\n    if f == a - 33:\n        return 34\n    if f == a - 34:\n        return 35\n    if f == a - 35:\n        return 36\n    if f == a - 36:\n        return 37\n    if f == a - 37:\n        return 38\n    if f == a - 38:\n        return 39\n    if f == a - 39:\n        return 40\n    if f == a - 40:\n        return 41\n    if f == a - 41:\n        return 42\n    if f == a - 42:\n        return 43\n    if f == a - 43:\n        return 44\n    if f == a - 44:\n        return 45\n    if f == a - 45:\n        return 46\n    if f == a - 46:\n        return 47\n    if f == a - 47:\n        return 48\n    if f == a - 48:\n        return 49\n    if f == a - 49:\n        return 50\n    if f == a - 50:\n        return 51\n    if f == a - 51:\n        return 52\n    if f == a - 52:\n        return 53\n    if f == a - 53:\n        return 54\n    if f == a - 54:\n        return 55\n    if f == a - 55:\n        return 56\n    if f == a - 56:\n        return 57\n    if f == a - 57:\n        return 58\n    if f == a - 58:\n        return 59\n    if f == a - 59:\n        return 60\n    if f == a - 60:\n        return 61\n    if f == a - 61:\n        return 62\n    if f == a - 62:\n        return "
    },
    {
        "number": 218,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    if p > n or q > n:\n        return \"-1\"\n    if p == q:\n        return str(n // p) + '\\n' + s\n    k = n // p + n // q\n    if n % p == 0:\n        k -= n // p\n    elif n % q == 0:\n        k -= n // q\n    if k == 0:\n        return \"-1\"\n    res = []\n    for i in range(k):\n        if i < n // p:\n            res.append(s[:p])\n            s = s[p:]\n        else:\n            res.append(s[:q])\n            s = s[q:]\n    return str(k) + '\\n' + '\\n'.join(res)"
    },
    {
        "number": 219,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, d = map(int, stdin.split())\n    obstacles = list(map(int, stdin.split()))\n    obstacles.sort()\n    if m <= s:\n        return \"IMPOSSIBLE\"\n    if m <= s + d:\n        return \"RUN 1\"\n    if m <= s + 2*d:\n        return \"JUMP 1\"\n    if m <= s + 3*d:\n        return \"RUN 1\\nJUMP 1\"\n    if m <= s + 4*d:\n        return \"JUMP 1\\nRUN 1\"\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 220,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x = map(int, stdin.split())\n    count = 0\n    for i in range(1, s+1):\n        for j in range(i, s+1):\n            if (i^j) == x:\n                count += 1\n    return str(count)"
    },
    {
        "number": 221,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skewers = [i for i in range(1, n+1)]\n    steps = 0\n    while skewers:\n        steps += 1\n        new_skewers = []\n        for i in skewers:\n            left = i - k\n            right = i + k\n            if left > 0:\n                new_skewers.append(left)\n            if right <= n:\n                new_skewers.append(right)\n        skewers = new_skewers\n    return steps,''.join(map(str, skewers))"
    },
    {
        "number": 222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return -1\n    count = 0\n    while n > 0:\n        if n % 10 == 0:\n            return -1\n        n //= 10\n        count += 1\n    return count"
    },
    {
        "number": 223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 10**9 + 7\n    dp = [0] * (n+1)\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = (dp[i-1] * (i-1)) % MOD\n    ans = 0\n    for i in range(1, n+1):\n        ans = (ans + dp[i]) % MOD\n    return str(ans)"
    },
    {
        "number": 224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set(['A', 'E', 'I', 'O', 'U', 'Y'])\n    n = len(stdin)\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        if stdin[i] in vowels:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-1]\n    return max(dp)"
    },
    {
        "number": 225,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, a3, a4 = map(int, stdin.split())\n    if a1 + a2 == a3 + a4 or a1 + a3 == a2 + a4 or a2 + a3 == a1 + a4:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    sizes = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    alice_slices = 0\n    bob_slices = 0\n    decider = 0\n\n    # iterate through slices\n    for size in sizes:\n        # determine who gets the slice\n        if decider == 0:\n            alice_slices += size\n            decider = 1\n        else:\n            bob_slices += size\n            decider = 0\n\n    # print results\n    print(alice_slices, bob_slices)"
    },
    {
        "number": 227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    m = 1\n    while True:\n        b = [0] * m\n        for i in range(n):\n            x = a[i] % m\n            y = (a[i] // m) % m\n            j = (x + y) % m\n            b[j] = a[i]\n        if all(b[i] == a[i] for i in range(m)):\n            return str(m)\n        m += 1\n    return \"-1\""
    },
    {
        "number": 228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    alice_score = 0\n    bob_score = 0\n    for i in range(n):\n        if a[i] > 0:\n            if i % 2 == 0:\n                alice_score += a[i]\n            else:\n                bob_score += a[i]\n    if alice_score > bob_score:\n        return \"Alice\"\n    else:\n        return \"Bob\""
    },
    {
        "number": 229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    x = 0\n    for i in range(n):\n        if a[i]!= 0:\n            x = a[i]\n            break\n    if x == 0:\n        return \"NO\"\n    for i in range(n):\n        if a[i]!= 0:\n            a[i] += x\n            a[i] //= 2\n    for i in range(n):\n        if a[i]!= 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = {}\n    max_len = 0\n    for i in range(n):\n        if s[i] not in count:\n            count[s[i]] = 1\n        else:\n            count[s[i]] += 1\n        if count[s[i]] == 2:\n            max_len = i + 1\n    if max_len == 0:\n        return \"0\"\n    return str(max_len)"
    },
    {
        "number": 231,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if a == 1:\n        return \"1\"\n    elif a == n:\n        return str(n // 2)\n    else:\n        if a % 2 == 0:\n            return str((n - a) // 2)\n        else:\n            return str((n - a + 1) // 2)"
    },
    {
        "number": 232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    colors = list(map(int, stdin.split()[2:2+n]))\n    counts = list(map(int, stdin.split()[2+n:]))\n    if sum(counts) > n:\n        return \"NO\"\n    if len(set(colors))!= m:\n        return \"NO\"\n    if len(set(counts))!= m:\n        return \"NO\"\n    if sorted(counts)!= counts:\n        return \"NO\"\n    if sorted(colors)!= colors:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    mishka_score = 0\n    chris_score = 0\n    for i in range(n):\n        mishka_throw, chris_throw = map(int, stdin.readline().strip().split())\n        if mishka_throw > chris_throw:\n            mishka_score += 1\n        elif chris_throw > mishka_throw:\n            chris_score += 1\n    if mishka_score > chris_score:\n        return \"Mishka\"\n    elif chris_score > mishka_score:\n        return \"Chris\"\n    else:\n        return \"Friendship is magic!^^\""
    },
    {
        "number": 234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = []\n    for i in range(n):\n        field.append(list(stdin.readline().strip()))\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"*\":\n                continue\n            count = 0\n            for dx in [-1, 0, 1]:\n                for dy in [-1, 0, 1]:\n                    if dx == 0 and dy == 0:\n                        continue\n                    x = i + dx\n                    y = j + dy\n                    if 0 <= x < n and 0 <= y < m and field[x][y] == \"*\":\n                        count += 1\n            if field[i][j]!= \".\" and field[i][j]!= str(count):\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 1\n    while True:\n        if n <= 1:\n            break\n        k += 1\n        n -= k\n        n = max(n, 0)\n    return k"
    },
    {
        "number": 236,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 1:\n        return \"NO\"\n    links = s.count(\"-\")\n    if links == 0:\n        return \"YES\"\n    pearls = s.count(\"o\")\n    if pearls == 0:\n        return \"YES\"\n    if links % 2 == 1:\n        return \"NO\"\n    if pearls % 2 == 1:\n        return \"NO\"\n    if s.count(\"-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-oo\")!= 0:\n        return \"NO\"\n    if s.count(\"-oo-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o-o-o-o-\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-o-o-o-o-o-o-o-o-o-o-o-o\")!= 0:\n        return \"NO\"\n    if s.count(\"-ooo-o-"
    },
    {
        "number": 237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    pillows = [0] * n\n    pillows[k-1] = 1\n    for i in range(k-2, -1, -1):\n        pillows[i] = min(m, pillows[i+1]+1)\n    for i in range(k, n):\n        pillows[i] = min(m, pillows[i-1]+1)\n    for i in range(1, n):\n        if pillows[i] < pillows[i-1]:\n            pillows[i] = pillows[i-1]\n    for i in range(n-2, -1, -1):\n        if pillows[i] < pillows[i+1]:\n            pillows[i] = pillows[i+1]\n    return sum(pillows)"
    },
    {
        "number": 238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n        if i >= m:\n            dp[i] -= k * (i // m)\n    return max(dp)"
    },
    {
        "number": 239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = [(i, j) for i in range(n+1) for j in range(m+1)]\n    points.remove((0, 0))\n    points.remove((n, m))\n    points.remove((0, m))\n    points.remove((n, 0))\n    points.sort(key=lambda x: (x[0]**2 + x[1]**2, x[0], x[1]))\n    return '\\n'.join(map(str, points[:4]))"
    },
    {
        "number": 240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = stdin.split()\n    n = int(n)\n    k = int(k)\n    n_str = str(n)\n    n_str += '0' * k\n    n_str = list(n_str)\n    n_str.sort()\n    n_str = ''.join(n_str)\n    n = int(n_str)\n    return str(n)"
    },
    {
        "number": 241,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, min_t, max_t = map(int, stdin.split()[0:4])\n    temps = list(map(int, stdin.split()[4:]))\n    if len(temps)!= m:\n        return \"Incorrect\"\n    if min_t not in temps or max_t not in temps:\n        return \"Incorrect\"\n    if sorted(temps)!= list(range(min_t, max_t+1)):\n        return \"Incorrect\"\n    return \"Correct\""
    },
    {
        "number": 242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.strip())\n    count = 0\n    for i in range(1, m+1):\n        if 5**i % 10**m == 0:\n            count += 1\n    print(count)\n    for i in range(1, m+1):\n        if 5**i % 10**m == 0:\n            print(i, end=' ')\n    return \"\""
    },
    {
        "number": 243,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    special_vertices = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    distances = [float('inf')] * (n+1)\n    distances[special_vertices[0]] = 0\n    for i in range(n):\n        for u in range(1, n+1):\n            for v, w in graph[u]:\n                if distances[u] + w < distances[v]:\n                    distances[v] = distances[u] + w\n    result = []\n    for x in special_vertices:\n        max_distance = -1\n        for y in special_vertices:\n            if x!= y:\n                distance = distances[x] + distances[y] - 2 * distances[y]\n                if distance > max_distance:\n                    max_distance = distance\n        result.append(max_distance)\n    return''.join(map(str, result))"
    },
    {
        "number": 244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    if n % 2 == 0:\n        return str(x)\n    else:\n        return str(x ^ 1)"
    },
    {
        "number": 245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rectangles = []\n    for i in range(n):\n        x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n        rectangles.append(((x1, y1), (x2, y2)))\n    for i in range(n):\n        for j in range(i+1, n):\n            if rectangles[i][0][0] < rectangles[j][0][0] < rectangles[i][1][0] < rectangles[j][1][0] and rectangles[i][0][1] < rectangles[j][0][1] < rectangles[i][1][1] < rectangles[j][1][1]:\n                return \"NO\"\n            if rectangles[i][0][0] < rectangles[j][0][0] < rectangles[i][1][0] < rectangles[j][1][0] and rectangles[i][0][1] > rectangles[j][0][1] > rectangles[i][1][1] > rectangles[j][1][1]:\n                return \"NO\"\n            if rectangles[i][0][0] > rectangles[j][0][0] > rectangles[i][1][0] > rectangles[j][1][0] and rectangles[i][0][1] < rectangles[j][0][1] < rectangles[i][1][1] < rectangles[j][1][1]:\n                return \"NO\"\n            if rectangles[i][0][0] > rectangles[j][0][0] > rectangles[i][1][0] > rectangles[j][1][0] and rectangles[i][0][1] > rectangles[j][0][1] > rectangles[i][1][1] > rectangles[j][1][1]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    count = 0\n    for i in range(n+1):\n        if i == 0:\n            continue\n        if i < 10:\n            if i - sum(map(int, str(i))) >= s:\n                count += 1\n        else:\n            if i - sum(map(int, str(i))) >= s:\n                count += 1\n            for j in range(len(str(i))):\n                if i - sum(map(int, str(i))) - sum(map(int, str(int(str(i)[j])))) >= s:\n                    count += 1\n    return count"
    },
    {
        "number": 247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0]:\n                if points[i][1] < points[j][1]:\n                    print(\"NO\")\n                    return\n                else:\n                    continue\n            slope = (points[j][1] - points[i][1]) / (points[j][0] - points[i][0])\n            b = points[i][1] - slope * points[i][0]\n            for k in range(n):\n                if k == i or k == j:\n                    continue\n                if points[k][1]!= slope * points[k][0] + b:\n                    print(\"NO\")\n                    return\n            print(\"YES\")\n            return\n    print(\"NO\")\n    return"
    },
    {
        "number": 248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k, t = map(int, stdin.split())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(2*k+1):\n        for j in range(2*k+1):\n            if i+j > a and i+j > b:\n                count += 1\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // 2\n    count = count * (count-1) // "
    },
    {
        "number": 249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if x >= y:\n        return \"0\\n\" + \" \".join(map(str, a))\n    for i in range(n):\n        if a[i] >= x and a[i] <= y:\n            continue\n        if a[i] > y:\n            return \"1\\n\" + \" \".join(map(str, [x, y]))\n        if a[i] < x:\n            return \"1\\n\" + \" \".join(map(str, [a[i], x]))\n    return \"0\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cakes = []\n    for i in range(n):\n        r, h = map(int, stdin.readline().strip().split())\n        cakes.append((r, h))\n    cakes.sort(key=lambda x: x[0]**2 + x[1]**2)\n    dp = [0] * n\n    for i in range(n):\n        for j in range(i):\n            if cakes[i][0]**2 + cakes[i][1]**2 > cakes[j][0]**2 + cakes[j][1]**2:\n                dp[i] = max(dp[i], dp[j] + cakes[i][0]**2 * cakes[i][1])\n    return str(max(dp))"
    },
    {
        "number": 251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    h.sort()\n    ans = 0\n    for i in range(n):\n        if h[i] > k:\n            ans += h[i] - k\n    return ans"
    },
    {
        "number": 252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_score = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            score = sum(a[i:j])\n            if score > max_score:\n                max_score = score\n    return str(max_score)"
    },
    {
        "number": 253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k1, k2, k3 = map(int, stdin.split())\n    if k1 + k2 + k3 <= 6:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 254,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if s[i] == s[i+1:].count(s[i]):\n            count += 1\n    return count"
    },
    {
        "number": 255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    m, b = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    i = j = count = 0\n    while i < n and j < m:\n        if a[i] + b[j] <= 100:\n            count += 1\n            i += 1\n            j += 1\n        elif a[i] + b[j] > 100:\n            j += 1\n    return count"
    },
    {
        "number": 256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a1, b1 = map(int, stdin.readline().split())\n    a2, b2 = map(int, stdin.readline().split())\n    a3, b3 = map(int, stdin.readline().split())\n    a4, b4 = map(int, stdin.readline().split())\n\n    # calculate defence and attack of each team\n    defence1 = max(a1, b2)\n    defence2 = max(a3, b4)\n    attack1 = max(b1, a2)\n    attack2 = max(b3, a4)\n\n    # check if any team can win\n    if defence1 > attack2 and attack1 > defence2:\n        return \"Team 1\"\n    elif defence2 > attack1 and attack2 > defence1:\n        return \"Team 2\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().split())\n    meat = []\n    for _ in range(N):\n        x, y, c = map(int, stdin.readline().split())\n        meat.append((x, y, c))\n\n    # brute force approach\n    best_time = float('inf')\n    for x in range(-1000, 1001):\n        for y in range(-1000, 1001):\n            time = 0\n            for i in range(N):\n                dist = (x - meat[i][0])**2 + (y - meat[i][1])**2\n                time += meat[i][2] * dist**0.5\n            if time >= K:\n                best_time = min(best_time, time)\n\n    return str(best_time)"
    },
    {
        "number": 258,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    ticket = stdin.split()[1]\n    happy = True\n    for i in range(n//2):\n        if ticket[i] == \"?\" and ticket[n-i-1] == \"?\":\n            happy = False\n            break\n    if happy:\n        return \"Bicarp\"\n    else:\n        return \"Monocarp\""
    },
    {
        "number": 259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    buses = []\n    for i in range(n):\n        s, d = map(int, stdin.readline().split())\n        buses.append((s, d))\n    buses.sort()\n    bus_time = buses[0][0]\n    bus_route = 0\n    for i in range(1, n):\n        if buses[i][0] <= bus_time + buses[i-1][1]:\n            bus_time = buses[i][0]\n            bus_route = i\n    return bus_route + 1"
    },
    {
        "number": 260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    n = 1\n    while True:\n        count = 0\n        for i in range(n+1, 2*n+1):\n            if bin(i).count('1') == k:\n                count += 1\n            if count == m:\n                return str(n)\n        n += 1"
    },
    {
        "number": 261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    level = stdin.split()[1]\n    jumps = []\n    for i in range(n-3):\n        if level[i] == '*' and level[i+1] == '*' and level[i+2] == '*' and level[i+3] == '*':\n            jumps.append(i+1)\n    if len(jumps) == 0:\n        return \"no\"\n    for i in range(len(jumps)-1):\n        if jumps[i+1] - jumps[i]!= jumps[i+2] - jumps[i+1]:\n            return \"no\"\n    return \"yes\""
    },
    {
        "number": 262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = []\n    for i in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        grid.append(row)\n    empty_cell = None\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0:\n                empty_cell = (i, j)\n                break\n        if empty_cell is not None:\n            break\n    if empty_cell is None:\n        return \"-1\"\n    magic_sum = (n * (n * n + 1)) // 2\n    for i in range(n):\n        magic_sum -= sum(grid[i])\n    for j in range(n):\n        magic_sum -= sum(grid[i][j] for i in range(n))\n    magic_sum -= sum(grid[i][i] for i in range(n))\n    magic_sum -= sum(grid[i][n-i-1] for i in range(n))\n    x = (magic_sum + empty_cell[0] + empty_cell[1]) // 2\n    if x <= 0 or x > 10**18:\n        return \"-1\"\n    return str(x)"
    },
    {
        "number": 263,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k_min = max(a)\n    k_max = sum(a) + m\n    return f\"{k_min} {k_max}\""
    },
    {
        "number": 264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    dp[0][0] = 1\n    for i in range(1, m+1):\n        for j in range(n+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    return dp[m][n]"
    },
    {
        "number": 265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    favorite_ingredients = []\n    for i in range(n):\n        f, b = map(int, stdin.split())\n        favorite_ingredients.append(b)\n    pizzas = []\n    for j in range(m):\n        c, r = map(int, stdin.split())\n        a = list(map(int, stdin.split()))\n        pizzas.append((c, a))\n    max_num_friends = 0\n    max_pizza_indices = []\n    for i in range(1, 10):\n        for j in range(m):\n            if i in pizzas[j][1]:\n                num_friends = sum(1 for f in favorite_ingredients if i in f)\n                if num_friends > max_num_friends:\n                    max_num_friends = num_friends\n                    max_pizza_indices = [j]\n                elif num_friends == max_num_friends:\n                    max_pizza_indices.append(j)\n    if len(max_pizza_indices) == 1:\n        return''.join(map(str, max_pizza_indices))\n    else:\n        min_price = float('inf')\n        min_pizza_indices = []\n        for i in range(len(max_pizza_indices)):\n            for j in range(i+1, len(max_pizza_indices)):\n                price = pizzas[max_pizza_indices[i]][0] + pizzas[max_pizza_indices[j]][0]\n                if price < min_price:\n                    min_price = price\n                    min_pizza_indices = [max_pizza_indices[i], max_pizza_indices[j]]\n                elif price == min_price:\n                    min_pizza_indices.append(max_pizza_indices[i])\n                    min_pizza_indices.append(max_pizza_indices[j])\n        return''.join(map(str, min_pizza_indices))"
    },
    {
        "number": 266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, s = map(int, stdin.split())\n    if m == 1 and s == 0:\n        return \"-1 -1\"\n    if m == 1:\n        return str(s) + \" \" + str(s)\n    if s == 0:\n        return \"0 \" + str(9 * 10 ** (m - 1))\n    if s < 10 ** (m - 1):\n        return \"-1 -1\"\n    if s == 10 ** (m - 1):\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m - 1)\n    if s == 10 ** (m - 1) + 1:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m)\n    if s == 10 ** (m - 1) + 2:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 1)\n    if s == 10 ** (m - 1) + 3:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 2)\n    if s == 10 ** (m - 1) + 4:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 3)\n    if s == 10 ** (m - 1) + 5:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 4)\n    if s == 10 ** (m - 1) + 6:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 5)\n    if s == 10 ** (m - 1) + 7:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 6)\n    if s == 10 ** (m - 1) + 8:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 7)\n    if s == 10 ** (m - 1) + 9:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 8)\n    if s == 10 ** (m - 1) + 10:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 9)\n    if s == 10 ** (m - 1) + 11:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 10)\n    if s == 10 ** (m - 1) + 12:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 11)\n    if s == 10 ** (m - 1) + 13:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 12)\n    if s == 10 ** (m - 1) + 14:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 13)\n    if s == 10 ** (m - 1) + 15:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 14)\n    if s == 10 ** (m - 1) + 16:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 15)\n    if s == 10 ** (m - 1) + 17:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 16)\n    if s == 10 ** (m - 1) + 18:\n        return \"1\" + \"0\" * (m - 1) + \" \" + str(10 ** m + 17)\n   "
    },
    {
        "number": 267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    MOD = 998244353\n    dp = [0] * (r + 1)\n    dp[0] = 1\n    for i in range(1, r + 1):\n        for j in range(i):\n            if i - j <= k:\n                dp[i] = (dp[i] + dp[j]) % MOD\n    return sum(dp[l:r+1]) % MOD"
    },
    {
        "number": 268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    boxes = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) <= d:\n                boxes[i].append(j)\n                boxes[j].append(i)\n    for i in range(n):\n        if len(boxes[i]) < k:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    k_r = s.count('R')\n    k_b = s.count('B')\n    k_y = s.count('Y')\n    k_g = s.count('G')\n    return f\"{k_r} {k_b} {k_y} {k_g}\""
    },
    {
        "number": 270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    passages = []\n    for i in range(M):\n        s, t = map(int, stdin.readline().split())\n        passages.append((s, t))\n\n    # compute E\n    E = 0\n    for i in range(1, N):\n        E += 1\n        for s, t in passages:\n            if s == i:\n                E += 1\n                if t == N:\n                    E += 1\n                    break\n\n    # compute E when Aoki blocks a passage\n    E_blocked = 0\n    for i in range(1, N):\n        E_blocked += 1\n        for s, t in passages:\n            if s == i:\n                E_blocked += 1\n                if t == N:\n                    E_blocked += 1\n                    break\n        if i == 1:\n            E_blocked += 1\n\n    # return E\n    return f\"{E:.10f}\\n{E_blocked:.10f}\""
    },
    {
        "number": 271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 10 == 0:\n        return str(n)\n    else:\n        return str(n - (n % 10))"
    },
    {
        "number": 272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    pairs = []\n    for i in range(n):\n        if s[i]!= t[i]:\n            pairs.append((s[i], t[i]))\n    if len(pairs) > n // 2:\n        return \"-1\"\n    pairs.sort()\n    res = []\n    for i in range(len(pairs)):\n        if i % 2 == 0:\n            res.append(pairs[i][0])\n            res.append(pairs[i][1])\n    return str(len(res)) + \"\\n\" + \"\\n\".join(\" \".join(p) for p in zip(res[::2], res[1::2]))"
    },
    {
        "number": 273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first_name, last_name = stdin.split()\n    prefixes = [first_name[0], last_name[0], first_name, last_name]\n    prefixes.sort()\n    return ''.join(prefixes)"
    },
    {
        "number": 274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    brackets = stdin.split()[1]\n    height = 2 * n - 1\n    width = 2 * n - 1\n    image = [[''for _ in range(width)] for _ in range(height)]\n    for i in range(n):\n        for j in range(n):\n            if brackets[i*n+j] == '[':\n                image[2*i][2*j+1] = '+'\n                image[2*i+1][2*j] = '+'\n                image[2*i+1][2*j+2] = '+'\n                image[2*i+2][2*j+1] = '+'\n            else:\n                image[2*i][2*j+1] = '-'\n                image[2*i+1][2*j] = '-'\n                image[2*i+1][2*j+2] = '-'\n                image[2*i+2][2*j+1] = '-'\n    for i in range(height):\n        for j in range(width):\n            if image[i][j] =='':\n                image[i][j] = '|'\n    for i in range(n):\n        for j in range(n):\n            if brackets[i*n+j] == '[':\n                image[2*i][2*j] = '|'\n                image[2*i][2*j+2] = '|'\n                image[2*i+2][2*j] = '|'\n                image[2*i+2][2*j+2] = '|'\n    for i in range(height):\n        for j in range(width):\n            print(image[i][j], end='')\n        print()\n    return ''"
    },
    {
        "number": 275,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num1, num2 = stdin.split()\n    n1, n2 = len(num1), len(num2)\n    q = (5 ** 0.5 + 1) / 2\n    dec1, dec2 = 0, 0\n    for i in range(n1):\n        dec1 += int(num1[i]) * q ** (n1 - i - 1)\n    for i in range(n2):\n        dec2 += int(num2[i]) * q ** (n2 - i - 1)\n    if dec1 > dec2:\n        return \">\"\n    elif dec1 < dec2:\n        return \"<\"\n    else:\n        return \"=\""
    },
    {
        "number": 276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    gems = set()\n    for line in stdin.split('\\n'):\n        if line:\n            gems.add(line)\n    absent_gems = set(['Power', 'Time', 'Space', 'Soul', 'Reality', 'Mind']) - gems\n    return str(len(absent_gems)) + '\\n' + '\\n'.join(absent_gems)"
    },
    {
        "number": 277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a == b:\n        return \"Final!\"\n    else:\n        round_num = (a + b) // 2\n        return str(round_num)"
    },
    {
        "number": 278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # count the number of elements to change\n    count = 0\n    for i in range(n):\n        if p[i]!= i+1:\n            count += 1\n        if b[i] == 1:\n            count += 1\n\n    # check if the permutation is suitable\n    k = 2*n\n    for i in range(n):\n        if p[i]!= i+1:\n            k = min(k, abs(p[i]-i-1))\n    if k < 2*n:\n        count += 2*n - k\n\n    return str(count)"
    },
    {
        "number": 279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v1, v2 = map(int, stdin.split()[0:2])\n    t, d = map(int, stdin.split()[2:4])\n    if v1 == v2:\n        return str(t * v1)\n    if v1 > v2:\n        v1, v2 = v2, v1\n    if d == 0:\n        return str(t * v1)\n    if v1 == 0:\n        return str(t * v2)\n    if v2 == 0:\n        return str(t * v1)\n    if v1 * t >= v2 * t:\n        return str(v1 * t)\n    if v1 * t + d * (t - 1) >= v2 * t:\n        return str(v1 * t + d * (t - 1))\n    if v1 * t + d * (t - 1) + d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + d)\n    if v1 * t + d * (t - 1) + 2 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 2 * d)\n    if v1 * t + d * (t - 1) + 3 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 3 * d)\n    if v1 * t + d * (t - 1) + 4 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 4 * d)\n    if v1 * t + d * (t - 1) + 5 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 5 * d)\n    if v1 * t + d * (t - 1) + 6 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 6 * d)\n    if v1 * t + d * (t - 1) + 7 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 7 * d)\n    if v1 * t + d * (t - 1) + 8 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 8 * d)\n    if v1 * t + d * (t - 1) + 9 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 9 * d)\n    if v1 * t + d * (t - 1) + 10 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 10 * d)\n    if v1 * t + d * (t - 1) + 11 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 11 * d)\n    if v1 * t + d * (t - 1) + 12 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 12 * d)\n    if v1 * t + d * (t - 1) + 13 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 13 * d)\n    if v1 * t + d * (t - 1) + 14 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 14 * d)\n    if v1 * t + d * (t - 1) + 15 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 15 * d)\n    if v1 * t + d * (t - 1) + 16 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 16 * d)\n    if v1 * t + d * (t - 1) + 17 * d >= v2 * t:\n        return str(v1 * t + d * (t - 1) + 17 * d"
    },
    {
        "number": 280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    N, M = map(int, lines[0].split())\n    ws = list(map(int, lines[1].split()))\n    parts = []\n    for i in range(2, 2+M):\n        l, v = map(int, lines[i].split())\n        parts.append((l, v))\n\n    # check if bridge will collapse\n    for i in range(1, N):\n        if ws[i] + ws[i-1] > parts[0][1]:\n            return '-1'\n\n    # find minimum possible distance\n    min_dist = 0\n    for i in range(1, M):\n        l, v = parts[i]\n        if ws[i] + ws[i-1] > v:\n            return '-1'\n        min_dist += l\n\n    return str(min_dist)"
    },
    {
        "number": 281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if b < a:\n        return \"0\"\n    else:\n        return str(factorial(b) // factorial(b - a))[-1]\n\ndef"
    },
    {
        "number": 282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    s = stdin.split()[1]\n    dp = [float('inf')] * (n + 1)\n    dp[1] = 0\n    for i in range(2, n + 1):\n        if s[i - 1] == '1':\n            for j in range(1, d + 1):\n                if i + j <= n and s[i + j - 1] == '1':\n                    dp[i] = min(dp[i], dp[i - 1] + 1)\n        else:\n            dp[i] = dp[i - 1] + 1\n    if dp[n] == float('inf'):\n        return '-1'\n    else:\n        return str(dp[n])"
    },
    {
        "number": 283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for m in range(2, 1001):\n        if (n*m + 1) not in [i for i in range(2, int(n*m/2)+1) if n*m + 1 % i == 0]:\n            return str(m)\n    return \"No counterexample found\""
    },
    {
        "number": 284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for a in range(n // 1234567 + 1):\n        for b in range((n - a * 1234567) // 123456 + 1):\n            c = n - a * 1234567 - b * 123456\n            if a * 1234567 + b * 123456 + c * 1234 == n:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x1, x2 = map(int, stdin.readline().split())\n    lines = []\n    for i in range(n):\n        k, b = map(int, stdin.readline().split())\n        lines.append((k, b))\n    for i in range(n):\n        for j in range(i+1, n):\n            if lines[i][0]!= lines[j][0]:\n                x = (lines[i][1] - lines[j][1])/(lines[i][0] - lines[j][0])\n                if x1 < x < x2:\n                    return \"Yes\"\n    return \"No\""
    },
    {
        "number": 286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    weights = set()\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if sum([i, j]) == n:\n                weights.add(len([k for k in range(i, j+1) if k == i]))\n    return len(weights)"
    },
    {
        "number": 287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    min_apartments = 0\n    max_apartments = 0\n    for i in range(1, n+1):\n        if i <= k:\n            min_apartments += 1\n            max_apartments += 1\n        else:\n            if i-k-1 >= 1 and i+k-1 <= n:\n                min_apartments += 1\n                max_apartments += 1\n            else:\n                max_apartments += 1\n    return f\"{min_apartments} {max_apartments}\""
    },
    {
        "number": 288,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"2\"\n    elif n == 4:\n        return \"2\"\n    else:\n        return str(n-1)"
    },
    {
        "number": 289,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n < 2:\n        return 0\n    if s.count('V') == 0 or s.count('K') == 0:\n        return 0\n    if s.count('V') == 1 and s.count('K') == 1:\n        return 1\n    if s.count('V') == 1 and s.count('K') > 1:\n        return 1\n    if s.count('V') > 1 and s.count('K') == 1:\n        return 1\n    if s.count('V') > 1 and s.count('K') > 1:\n        return 2\n    return 0"
    },
    {
        "number": 290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"2\"\n    elif n == 2:\n        return \"3\"\n    else:\n        return \"4\""
    },
    {
        "number": 291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    years = 1\n    while a <= b:\n        a *= 3\n        b *= 2\n        years += 1\n    return str(years)"
    },
    {
        "number": 292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, n = map(int, stdin.split())\n    # number of nodes in a perfect binary tree of height h\n    num_nodes = 2**(h+1) - 1\n    # number of nodes in the path from root to exit\n    path_length = num_nodes - n + 1\n    # number of nodes in the path from root to leaf n\n    leaf_length = 2**(h-1) - 1\n    # number of nodes in the path from root to leaf n, excluding the exit node\n    path_length_without_exit = path_length - 1\n    # number of nodes in the path from root to leaf n, excluding the exit node and the nodes in the path to the exit\n    path_length_without_exit_and_path_to_exit = path_length_without_exit - leaf_length\n    # number of nodes in the path from root to leaf n, excluding the exit node, the nodes in the path to the exit, and the exit node\n    path_length_without_exit_path_to_exit_and_exit = path_length_without_exit_and_path_to_exit - 1\n    # number of nodes in the path from root to leaf n, excluding the exit node, the nodes in the path to the exit, and the exit node, and the nodes in the path from the exit to the root\n    path_length_without_exit_path_to_exit_and_exit_and_path_to_root = path_length_without_exit_path_to_exit_and_exit - 1\n    # total number of nodes visited\n    total_nodes = path_length_without_exit_path_to_exit_and_exit_and_path_to_root + 1\n    return str(total_nodes)"
    },
    {
        "number": 293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin.strip())\n    count = 0\n    for n in range(1, x+1):\n        for m in range(1, x+1):\n            if sum(i**2 for i in range(1, n+1)) + sum(i**2 for i in range(1, m+1)) == x:\n                count += 1\n                print(f\"{n} {m}\")\n    return str(count)"
    },
    {
        "number": 294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return \"YES\" if a[0] == 30 or a[0] == 31 else \"NO\"\n    for i in range(n-1):\n        if a[i] == 31 and a[i+1] == 31:\n            return \"YES\"\n        elif a[i] == 30 and a[i+1] == 30:\n            return \"YES\"\n        elif a[i] == 28 and a[i+1] == 31:\n            return \"YES\"\n        elif a[i] == 28 and a[i+1] == 30:\n            return \"YES\"\n        elif a[i] == 31 and a[i+1] == 30:\n            return \"YES\"\n        elif a[i] == 30 and a[i+1] == 31:\n            return \"YES\"\n        elif a[i] == 29 and a[i+1] == 31:\n            return \"YES\"\n        elif a[i] == 29 and a[i+1] == 30:\n            return \"YES\"\n        elif a[i] == 31 and a[i+1] == 28:\n            return \"YES\"\n        elif a[i] == 31 and a[i+1] == 29:\n            return \"YES\"\n        elif a[i] == 30 and a[i+1] == 28:\n            return \"YES\"\n        elif a[i] == 30 and a[i+1] == 29:\n            return \"YES\"\n        elif a[i] == 28 and a[i+1] == 28:\n            return \"YES\"\n        elif a[i] == 28 and a[i+1] == 29:\n            return \"YES\"\n        elif a[i] == 29 and a[i+1] == 28:\n            return \"YES\"\n        elif a[i] == 29 and a[i+1] == 29:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"NO\"\n    k = 1\n    a = [1]\n    b = [n]\n    while True:\n        if b[-1] > n:\n            break\n        k += 1\n        a.append(b[-1] + 1)\n        b.append(n // b[-1])\n    if sum(a)!= 1 - 1/n:\n        return \"NO\"\n    print(\"YES\")\n    print(k)\n    for i in range(k):\n        print(a[i], b[i])\n    return \"\""
    },
    {
        "number": 296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    h = list(map(int, stdin.readline().split()))\n    if sum(h) > a + b:\n        return -1\n    dp = [[0] * (a+1) for _ in range(n)]\n    for i in range(n):\n        for j in range(a+1):\n            if i == 0:\n                dp[i][j] = h[i]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-h[i]] + h[i])\n    return dp[-1][-1]"
    },
    {
        "number": 297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k*n*m % (n*m)!= 0:\n        return \"NO\"\n    a = k*n*m // (n*m)\n    x1 = y1 = x2 = y2 = x3 = y3 = 0\n    if a == 1:\n        x1 = y1 = 0\n        x2 = y2 = n\n        x3 = y3 = m\n    elif a == 2:\n        x1 = y1 = 0\n        x2 = y2 = n\n        x3 = y3 = 0\n    elif a == 3:\n        x1 = y1 = 0\n        x2 = y2 = 0\n        x3 = y3 = m\n    elif a == 4:\n        x1 = y1 = 0\n        x2 = y2 = 0\n        x3 = y3 = 0\n    elif a == 5:\n        x1 = y1 = n\n        x2 = y2 = 0\n        x3 = y3 = m\n    elif a == 6:\n        x1 = y1 = n\n        x2 = y2 = 0\n        x3 = y3 = 0\n    elif a == 7:\n        x1 = y1 = n\n        x2 = y2 = m\n        x3 = y3 = 0\n    elif a == 8:\n        x1 = y1 = n\n        x2 = y2 = m\n        x3 = y3 = m\n    else:\n        return \"NO\"\n    return \"YES\\n{}\\n{}\\n{}\".format(x1, y1, x2, y2, x3, y3)"
    },
    {
        "number": 298,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n < k:\n        return \"NO\"\n    else:\n        return \"YES\""
    },
    {
        "number": 299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    exercises = list(map(int, stdin.split()[1:]))\n    chest_exercises = exercises[:n:3]\n    biceps_exercises = exercises[1:n:3]\n    back_exercises = exercises[2:n:3]\n    max_chest = max(chest_exercises)\n    max_biceps = max(biceps_exercises)\n    max_back = max(back_exercises)\n    if max_chest == max_biceps == max_back:\n        return \"chest\"\n    elif max_biceps == max_back:\n        return \"biceps\"\n    else:\n        return \"back\""
    },
    {
        "number": 300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grades = list(map(int, stdin.split()))\n    n = len(grades)\n    avg = sum(grades) / n\n    if avg >= 4.5:\n        return \"0\"\n    else:\n        return str(int(4.5 - avg))"
    },
    {
        "number": 301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    u, v = map(int, stdin.split())\n    if u == 0 and v == 0:\n        return \"0\\n\"\n    if u == 0:\n        return \"-1\"\n    if v == 0:\n        return \"1\\n1\"\n    if u == v:\n        return \"1\\n\" + str(u)\n    if u == 1:\n        return \"1\\n1\"\n    if v == 1:\n        return \"2\\n1 1\"\n    if u == 2:\n        return \"2\\n1 1\"\n    if v == 2:\n        return \"2\\n1 1\"\n    if u == 3:\n        return \"2\\n1 2\"\n    if v == 3:\n        return \"2\\n1 2\"\n    if u == 4:\n        return \"2\\n1 3\"\n    if v == 4:\n        return \"2\\n1 3\"\n    if u == 5:\n        return \"2\\n2 3\"\n    if v == 5:\n        return \"2\\n2 3\"\n    if u == 6:\n        return \"2\\n2 3\"\n    if v == 6:\n        return \"2\\n2 3\"\n    if u == 7:\n        return \"2\\n3 3\"\n    if v == 7:\n        return \"2\\n3 3\"\n    if u == 8:\n        return \"2\\n3 3\"\n    if v == 8:\n        return \"2\\n3 3\"\n    if u == 9:\n        return \"2\\n4 3\"\n    if v == 9:\n        return \"2\\n4 3\"\n    if u == 10:\n        return \"2\\n4 3\"\n    if v == 10:\n        return \"2\\n4 3\"\n    if u == 11:\n        return \"2\\n5 3\"\n    if v == 11:\n        return \"2\\n5 3\"\n    if u == 12:\n        return \"2\\n5 3\"\n    if v == 12:\n        return \"2\\n5 3\"\n    if u == 13:\n        return \"2\\n6 3\"\n    if v == 13:\n        return \"2\\n6 3\"\n    if u == 14:\n        return \"2\\n6 3\"\n    if v == 14:\n        return \"2\\n6 3\"\n    if u == 15:\n        return \"2\\n7 3\"\n    if v == 15:\n        return \"2\\n7 3\"\n    if u == 16:\n        return \"2\\n7 3\"\n    if v == 16:\n        return \"2\\n7 3\"\n    if u == 17:\n        return \"2\\n8 3\"\n    if v == 17:\n        return \"2\\n8 3\"\n    if u == 18:\n        return \"2\\n8 3\"\n    if v == 18:\n        return \"2\\n8 3\"\n    if u == 19:\n        return \"2\\n9 3\"\n    if v == 19:\n        return \"2\\n9 3\"\n    if u == 20:\n        return \"2\\n9 3\"\n    if v == 20:\n        return \"2\\n9 3\"\n    if u == 21:\n        return \"2\\n10 3\"\n    if v == 21:\n        return \"2\\n10 3\"\n    if u == 22:\n        return \"2\\n10 3\"\n    if v == 22:\n        return \"2\\n10 3\"\n    if u == 23:\n        return \"2\\n11 3\"\n    if v == 23:\n        return \"2\\n11 3\"\n    if u == 24:\n        return \"2\\n11 3\"\n    if v == 24:\n        return \"2\\n11 3\"\n    if u == 25:\n        return \"2\\n12 3\"\n    if v == 25:\n        return \"2\\n12 3\"\n    if u == 26:\n        return \"2\\n12 3\"\n    if v == 26:\n        return \"2\\n12 3\"\n    if u == 27:\n        return \"2\\n13 3\""
    },
    {
        "number": 302,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 0:\n        n, r = divmod(n, 10)\n        count += r\n    return count"
    },
    {
        "number": 303,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split()[0:4])\n    x, y = map(int, stdin.split()[4:6])\n    if (x1 + x, y1 + y) == (x2, y2) or (x1 + x, y1 - y) == (x2, y2) or (x1 - x, y1 + y) == (x2, y2) or (x1 - x, y1 - y) == (x2, y2):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if str(i) == str(i)[::-1]:\n            continue\n        if str(i).startswith('0'):\n            continue\n        if str(i).count('0') > 0:\n            continue\n        count += 1\n    return count\n\nprint(solution(\"97\")) # Output: 2\nprint(solution(\"2028\")) # Output: 13"
    },
    {
        "number": 305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    e, f = map(int, stdin.readline().split())\n\n    # Calculate the maximum number of suits of the first type that can be composed\n    max_first_type = a // 2 + b // 2 + c // 2 + d // 2\n    max_first_type = min(max_first_type, a // 2 + b // 2 + c // 2)\n\n    # Calculate the maximum number of suits of the second type that can be composed\n    max_second_type = a // 2 + b // 2 + c // 2 + d // 2\n    max_second_type = min(max_second_type, a // 2 + b // 2 + d // 2)\n\n    # Calculate the maximum total cost of some set of suits that can be composed\n    max_cost = max_first_type * e + max_second_type * f\n\n    return str(max_cost)"
    },
    {
        "number": 306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, p, x = map(int, stdin.split())\n    count = 0\n    for i in range(1, x+1):\n        if pow(a, i, p) == b:\n            count += 1\n    return str(count)"
    },
    {
        "number": 307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k_2, k_3, k_5, k_6 = map(int, stdin.split())\n    max_sum = 0\n    for i in range(k_2 + 1):\n        for j in range(k_3 + 1):\n            for l in range(k_5 + 1):\n                for m in range(k_6 + 1):\n                    if i + j + l + m <= 500000:\n                        sum_ = i * 2 + j * 3 + l * 5 + m * 6\n                        if sum_ > max_sum and 32 <= sum_ <= 256:\n                            max_sum = sum_\n    return str(max_sum)"
    },
    {
        "number": 308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y, c = map(int, stdin.split())\n    if x == 1 and y == 1:\n        return 0\n    if x == n and y == n:\n        return 0\n    if x == 1:\n        return (n - y + 1) // 2\n    if y == 1:\n        return (n - x + 1) // 2\n    if x == n:\n        return (n - y + 1) // 2\n    if y == n:\n        return (n - x + 1) // 2\n    if x == y:\n        return (n - x + 1) // 2\n    if x == n - y + 1:\n        return (n - x + 1) // 2\n    if y == n - x + 1:\n        return (n - y + 1) // 2\n    return (n - x + 1) // 2 + (n - y + 1) // 2 + 1"
    },
    {
        "number": 309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    max_xor = 0\n    for i in range(l, r+1):\n        for j in range(i, r+1):\n            max_xor = max(max_xor, i^j)\n    return str(max_xor)"
    },
    {
        "number": 310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    height = 0\n    for i in range(1, 2*n+1, 2):\n        height += 1\n    if k > 2*n:\n        return str(height)\n    else:\n        return str(max(height, k//(2*n)))"
    },
    {
        "number": 311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z, t1, t2, t3 = map(int, stdin.split())\n    if abs(x - y) == 1:\n        if abs(z - y) == 1:\n            if t1 * 2 + t2 + t3 < t1 + t2 + t3:\n                return \"YES\"\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    else:\n        return \"NO\""
    },
    {
        "number": 312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 1:\n        return \"1\"\n    if m == n:\n        return str(n - 1)\n    if m == n - 1:\n        return str(n - 2)\n    if m == 2:\n        return \"2\"\n    if m == 3:\n        return \"3\"\n    if m == 4:\n        return \"2\"\n    if m == 5:\n        return \"3\"\n    if m == 6:\n        return \"4\"\n    if m == 7:\n        return \"3\"\n    if m == 8:\n        return \"4\"\n    if m == 9:\n        return \"5\"\n    if m == 10:\n        return \"4\"\n    if m == 11:\n        return \"5\"\n    if m == 12:\n        return \"6\"\n    if m == 13:\n        return \"5\"\n    if m == 14:\n        return \"6\"\n    if m == 15:\n        return \"7\"\n    if m == 16:\n        return \"6\"\n    if m == 17:\n        return \"7\"\n    if m == 18:\n        return \"8\"\n    if m == 19:\n        return \"7\"\n    if m == 20:\n        return \"8\"\n    if m == 21:\n        return \"9\"\n    if m == 22:\n        return \"8\"\n    if m == 23:\n        return \"9\"\n    if m == 24:\n        return \"10\"\n    if m == 25:\n        return \"9\"\n    if m == 26:\n        return \"10\"\n    if m == 27:\n        return \"11\"\n    if m == 28:\n        return \"10\"\n    if m == 29:\n        return \"11\"\n    if m == 30:\n        return \"12\"\n    if m == 31:\n        return \"11\"\n    if m == 32:\n        return \"12\"\n    if m == 33:\n        return \"13\"\n    if m == 34:\n        return \"12\"\n    if m == 35:\n        return \"13\"\n    if m == 36:\n        return \"14\"\n    if m == 37:\n        return \"13\"\n    if m == 38:\n        return \"14\"\n    if m == 39:\n        return \"15\"\n    if m == 40:\n        return \"14\"\n    if m == 41:\n        return \"15\"\n    if m == 42:\n        return \"16\"\n    if m == 43:\n        return \"15\"\n    if m == 44:\n        return \"16\"\n    if m == 45:\n        return \"17\"\n    if m == 46:\n        return \"16\"\n    if m == 47:\n        return \"17\"\n    if m == 48:\n        return \"18\"\n    if m == 49:\n        return \"17\"\n    if m == 50:\n        return \"18\"\n    if m == 51:\n        return \"19\"\n    if m == 52:\n        return \"18\"\n    if m == 53:\n        return \"19\"\n    if m == 54:\n        return \"20\"\n    if m == 55:\n        return \"19\"\n    if m == 56:\n        return \"20\"\n    if m == 57:\n        return \"21\"\n    if m == 58:\n        return \"20\"\n    if m == 59:\n        return \"21\"\n    if m == 60:\n        return \"22\"\n    if m == 61:\n        return \"21\"\n    if m == 62:\n        return \"22\"\n    if m == 63:\n        return \"23\"\n    if m == 64:\n        return \"22\"\n    if m == 65:\n        return \"23\"\n    if m == 66:\n        return \"24\"\n    if m == 67:\n        return \"23\"\n    if m == 68:\n        return \"24\"\n    if m == 69:\n        return \"25\"\n    if m == 70:\n        return \"24\"\n    if m == 71:\n        return \"25\"\n    if m == 72:\n        return \"26\"\n    if m"
    },
    {
        "number": 313,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n            if i == n-1:\n                break\n            if a[i+1] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 314,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (k+1)\n    for i in range(1, n+1):\n        for j in range(k, 0, -1):\n            if j >= a[i-1]:\n                dp[j] = max(dp[j], dp[j-a[i-1]] + 1)\n            else:\n                dp[j] = max(dp[j], dp[j-a[i-1]])\n    if dp[k] == 0:\n        return -1\n    else:\n        return dp[k]"
    },
    {
        "number": 315,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    b = [0] * n\n    b[0] = k\n    for i in range(1, n):\n        b[i] = max(k, b[i-1] + a[i-1])\n    for i in range(n):\n        if b[i] < a[i]:\n            b[i] = a[i]\n    return str(min(b)) + \"\\n\" + \" \".join(map(str, b))"
    },
    {
        "number": 316,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    else:\n        return str(4 * (2 * n - 1) ** 2)"
    },
    {
        "number": 317,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    for c in s:\n        if c.lower() in alphabet:\n            alphabet.remove(c.lower())\n        if not alphabet:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 318,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    current_time, a = stdin.split()\n    current_hour, current_minute = map(int, current_time.split(':'))\n    total_minutes = current_hour * 60 + current_minute + a\n    total_hours = total_minutes // 60\n    total_minutes %= 60\n    return '{:02d}:{:02d}'.format(total_hours, total_minutes)"
    },
    {
        "number": 319,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().strip())))\n    for i in range(m):\n        if sum(a[j][i] for j in range(n)) == 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 320,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dominoes = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        dominoes.append((x, y))\n    if sum(x for x, y in dominoes) % 2 == 1 or sum(y for x, y in dominoes) % 2 == 1:\n        return \"-1\"\n    else:\n        return \"0\""
    },
    {
        "number": 321,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(\"YES\")\n        else:\n            area = (a*a - b*b) // 2\n            if area == 1:\n                print(\"YES\")\n            else:\n                is_prime = True\n                for i in range(2, int(area**0.5)+1):\n                    if area % i == 0:\n                        is_prime = False\n                        break\n                if is_prime:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n    return \"\""
    },
    {
        "number": 322,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0]:\n                if points[i][1] > points[j][1]:\n                    points.pop(j)\n                else:\n                    points.pop(i)\n                break\n            elif points[i][1] == points[j][1]:\n                if points[i][0] > points[j][0]:\n                    points.pop(j)\n                else:\n                    points.pop(i)\n                break\n    for i in range(n):\n        if points[i][0] > 0:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 323,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    A_factorial = 1\n    B_factorial = 1\n    for i in range(1, A+1):\n        A_factorial *= i\n    for i in range(1, B+1):\n        B_factorial *= i\n    GCD = 1\n    for i in range(1, min(A, B)+1):\n        if A_factorial % i == 0 and B_factorial % i == 0:\n            GCD = i\n    return GCD"
    },
    {
        "number": 324,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(2, n):\n        if n % i == 0:\n            if i == 2 or i == 3 or i == 5 or i == 7:\n                continue\n            else:\n                a = i\n                b = n // i\n                if a - b == n:\n                    return f\"{a} {b}\"\n    return \"No solution found\""
    },
    {
        "number": 325,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, P = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(M):\n        A, B, C = map(int, stdin.readline().split())\n        edges.append((A, B, C))\n\n    # Initialize variables\n    coins = [0] * (N + 1)\n    visited = [False] * (N + 1)\n    visited[1] = True\n    queue = [(1, 0)]\n\n    # BFS\n    while queue:\n        curr, time = queue.pop(0)\n        if curr == N:\n            break\n        for A, B, C in edges:\n            if A == curr and not visited[B]:\n                coins[B] = max(coins[B], coins[curr] + C)\n                visited[B] = True\n                queue.append((B, time + 1))\n\n    # Check if button can be pressed\n    if coins[N] < P:\n        return str(-1)\n\n    # Calculate score\n    score = coins[N] - P * (time + 1)\n    if score < 0:\n        score = 0\n\n    return str(score)"
    },
    {
        "number": 326,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    strings = []\n    costs = []\n    for i in range(n):\n        s, c = stdin.readline().strip().split()\n        strings.append(s)\n        costs.append(int(c))\n\n    # Initialize variables\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = costs[i-1]\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if strings[i] == strings[j]:\n                dp[i][j] = float('inf')\n            else:\n                dp[i][j] = dp[i+1][j-1] + costs[i-1] + costs[j-1]\n\n    # Find minimum cost\n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j] < min_cost:\n                min_cost = dp[i][j]\n\n    # Check if minimum cost is possible\n    if min_cost == float('inf'):\n        return '-1'\n    else:\n        return str(min_cost)"
    },
    {
        "number": 327,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    candies = list(range(1, n+1))\n    candies.sort(reverse=True)\n    return max(sum(candies[:k]), sum(candies[k:]))"
    },
    {
        "number": 328,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    points.sort()\n    min_len = float('inf')\n    for i in range(n):\n        for j in range(i+2, n):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            if x1 == x2 or y1 == y2:\n                continue\n            len1 = abs(x1 - x2)\n            len2 = abs(y1 - y2)\n            if len1 > len2:\n                len1, len2 = len2, len1\n            min_len = min(min_len, len1)\n    return str(min_len)"
    },
    {
        "number": 329,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    nineteen_count = 0\n    for i in range(len(s)):\n        if s[i:i+7] == \"nineteen\":\n            nineteen_count += 1\n    return nineteen_count"
    },
    {
        "number": 330,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, y = map(int, stdin.split())\n    for i in range(2, y+1):\n        if i % p == 0:\n            continue\n        for j in range(2, int(y/i)+1):\n            if (i*j) % p == 0:\n                break\n        else:\n            return i\n    return -1"
    },
    {
        "number": 331,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a[m-1] = 0\n    a.sort()\n    i = 0\n    j = n-1\n    while i < j:\n        if a[i] + a[j] <= k:\n            i += 1\n        j -= 1\n    return a[i]"
    },
    {
        "number": 332,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, stdin.split())))\n    for i in range(n):\n        B.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= B[i][j]:\n                break\n        else:\n            continue\n        break\n    else:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 333,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.split()\n    n, m = len(a), len(b)\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    if dp[n][m] == 0:\n        return \"-1\"\n    else:\n        return str(dp[n][m])"
    },
    {
        "number": 334,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    c, d = map(int, stdin.split())\n    rick_time = 0\n    morty_time = 0\n    while True:\n        if rick_time % 2 == morty_time % 2:\n            return str(rick_time)\n        rick_time += a\n        morty_time += c"
    },
    {
        "number": 335,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n):\n        if n % i == 0:\n            a = i\n            b = n // i\n            if a + b == n and a % 3!= 0 and b % 3!= 0:\n                return f\"{a} {b} {n-a-b}\"\n    return \"No solution found\""
    },
    {
        "number": 336,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c, d = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i+j == a+b and i+j == c+d and i+j == a+c and i+j == b+d:\n                count += 1\n    return count"
    },
    {
        "number": 337,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split()[0:2])\n    u1, d1 = map(int, stdin.split()[2:4])\n    u2, d2 = map(int, stdin.split()[4:6])\n\n    if h == 0:\n        return str(w)\n\n    if h == d1:\n        w -= u1\n    elif h == d2:\n        w -= u2\n\n    if w < 0:\n        w = 0\n\n    return str(w)"
    },
    {
        "number": 338,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, c = map(int, stdin.splitlines()[0].split())\n    c = list(map(int, stdin.splitlines()[1].split()))\n    x, y = map(int, stdin.splitlines()[2].split())\n\n    # Check if it is possible to split the children into two groups\n    if sum(c) < x or sum(c) > y or max(c) < x or min(c) > y:\n        return \"0\"\n\n    # Check all possible passing rates\n    for k in range(1, m+1):\n        beginner = 0\n        intermediate = 0\n        for i in range(m):\n            if c[i] >= k:\n                intermediate += 1\n            else:\n                beginner += 1\n        if intermediate >= x and intermediate <= y and beginner >= x and beginner <= y:\n            return str(k)\n\n    # If no passing rate is found, return 0\n    return \"0\""
    },
    {
        "number": 339,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    x = n\n    coins = 0\n    while x > 1:\n        if x % k == 0:\n            x //= k\n            coins += B\n        else:\n            x -= 1\n            coins += A\n    return coins"
    },
    {
        "number": 340,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    operations = 0\n    while n > 10**6:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            n = (n + 1) // 2\n        operations += 1\n    return str(n) +'' + str(operations)"
    },
    {
        "number": 341,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    N, K = map(int, lines[0].split())\n    R, S, P = map(int, lines[1].split())\n    T = lines[2]\n\n    # initialize variables\n    max_score = 0\n    prev_hand = None\n\n    # iterate over rounds\n    for i in range(N):\n        # check if current hand is allowed\n        if T[i] == prev_hand:\n            continue\n        prev_hand = T[i]\n\n        # calculate score for current hand\n        if T[i] == 'r':\n            score = R\n        elif T[i] =='s':\n            score = S\n        else:\n            score = P\n\n        # update max score\n        max_score += score\n\n    return str(max_score)"
    },
    {
        "number": 342,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(a*2, b*2, c*4)"
    },
    {
        "number": 343,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p, x, y = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) > x or sorted(a)[(n+1)//2] < y:\n        return \"-1\"\n    else:\n        return \" \".join(map(str, [p]*(n-k)))"
    },
    {
        "number": 344,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['a', 'o', 'u', 'i', 'e']\n    s = stdin.lower()\n    for i in range(len(s)):\n        if s[i] in vowels:\n            if i == len(s)-1 or s[i+1] not in vowels:\n                return \"NO\"\n        elif s[i] == 'n':\n            if i == len(s)-1 or s[i+1] not in vowels:\n                return \"YES\"\n        elif s[i] not in vowels:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 345,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, stdin.split())) for _ in range(m)]\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    ans = 0\n    for a, b in edges:\n        ans += dp[a-1][b] * dp[b-1][a]\n    return str(ans)"
    },
    {
        "number": 346,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n    for i in range(m):\n        dp[b[i]] = max(dp[b[i]], dp[b[i]-1] + a[b[i]-1])\n    return str(max(dp))"
    },
    {
        "number": 347,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = list(map(int, stdin.split()[0:5]))\n    w = list(map(int, stdin.split()[5:10]))\n    h_s, h_u = list(map(int, stdin.split()[10:12]))\n\n    score = 0\n    for i in range(5):\n        x = 500 * (i+1)\n        score += max(0.3*x, (1 - m[i]/250)*x - 50*w[i])\n\n    score += 100*h_s - 50*h_u\n\n    return str(score)"
    },
    {
        "number": 348,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, L, R = map(int, stdin.split())\n    MOD = 998244353\n    dp = [[0] * (R+1) for _ in range(n+1)]\n    dp[1][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, R+1):\n                if L <= k <= R:\n                    dp[i][j] = (dp[i][j] + dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1]) % MOD\n                else:\n                    dp[i][j] = (dp[i][j] + dp[i-1][j] + dp[i][j-1] + dp[i-1][j-1] - dp[i-1][j-1]) % MOD\n    return dp[n][m]"
    },
    {
        "number": 349,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = []\n    b = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[0:m])))\n        b.append(list(map(int, stdin.split()[0:m])))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] > a[i][j+1]:\n                return \"Impossible\"\n            if b[i][j] > b[i][j+1]:\n                return \"Impossible\"\n            if a[i][j] > a[i+1][j]:\n                return \"Impossible\"\n            if b[i][j] > b[i+1][j]:\n                return \"Impossible\"\n    return \"Possible\""
    },
    {
        "number": 350,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] * a[i-1]\n    ans = 0\n    for i in range(1, n+1):\n        ans += dp[i] * (n-i+1)\n    return ans"
    },
    {
        "number": 351,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > k:\n            count += 1\n    return str(count)"
    },
    {
        "number": 352,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, min_1, max_1, min_2, max_2, min_3, max_3 = map(int, stdin.split())\n    dp = [[[0] * (max_3 + 1) for _ in range(max_2 + 1)] for _ in range(max_1 + 1)]\n    dp[0][0][0] = 1\n    for i in range(1, max_1 + 1):\n        dp[i][0][0] = 1\n    for i in range(1, max_2 + 1):\n        dp[0][i][0] = 1\n    for i in range(1, max_3 + 1):\n        dp[0][0][i] = 1\n    for i in range(1, max_1 + 1):\n        for j in range(1, max_2 + 1):\n            for k in range(1, max_3 + 1):\n                dp[i][j][k] = dp[i - 1][j][k] + dp[i][j - 1][k] + dp[i][j][k - 1]\n    ans = [0] * 3\n    for i in range(max_1, -1, -1):\n        for j in range(max_2, -1, -1):\n            for k in range(max_3, -1, -1):\n                if dp[i][j][k] == 0:\n                    continue\n                if i + j + k < n:\n                    continue\n                if i < min_1 or j < min_2 or k < min_3:\n                    continue\n                if i > max_1 or j > max_2 or k > max_3:\n                    continue\n                ans[0] = i\n                ans[1] = j\n                ans[2] = k\n                return''.join(map(str, ans))\n    return''.join(map(str, ans))"
    },
    {
        "number": 353,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return -1\n    if a[n-1] < a[n-2]:\n        return \"DOWN\"\n    elif a[n-1] > a[n-2]:\n        return \"UP\"\n    else:\n        return -1"
    },
    {
        "number": 354,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    if len(s)!= len(t):\n        return \"No\"\n    for i in range(len(s)):\n        if s[i] in vowels and t[i] not in vowels:\n            return \"No\"\n        elif s[i] not in vowels and t[i] in vowels:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 355,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = [list(line.strip()) for line in stdin.split('\\n') if line.strip()]\n    black_pawns = [(r, c) for r in range(len(board)) for c in range(len(board[0])) if board[r][c] == 'B']\n    white_pawns = [(r, c) for r in range(len(board)) for c in range(len(board[0])) if board[r][c] == 'W']\n    if not black_pawns or not white_pawns:\n        return 'B' if black_pawns else 'A'\n    for pawn in white_pawns:\n        if pawn[0] == 1:\n            return 'A'\n    for pawn in black_pawns:\n        if pawn[0] == 8:\n            return 'B'\n    return 'B' if len(black_pawns) > len(white_pawns) else 'A'"
    },
    {
        "number": 356,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    m, b = map(int, stdin.readline().split())\n    if n!= m:\n        return \"-1\"\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n    for i in range(n - 1, -1, -1):\n        if dp[i] == b[i]:\n            continue\n        for j in range(i + 1, n + 1):\n            if dp[j] - dp[i] == b[i]:\n                return str(j - i)\n    return \"-1\""
    },
    {
        "number": 357,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    friends = [\"Danil\", \"Olya\", \"Slava\", \"Ann\", \"Nikita\"]\n    for friend in friends:\n        if friend in stdin:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 358,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    primes = [True] * (b + 1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(b ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, b + 1, i):\n                primes[j] = False\n    count = 0\n    for i in range(a, b + 1):\n        if primes[i]:\n            count += 1\n            if count >= k:\n                return str(i - a + 1)\n    return \"-1\""
    },
    {
        "number": 359,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, h, w = map(int, stdin.split())\n    if h % a!= 0 or w % a!= 0:\n        return '-1'\n    x = min(h // a, w // a)\n    if x == 0:\n        return '-1'\n    return str(x)"
    },
    {
        "number": 360,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    chapters = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        chapters.append((l, r))\n    chapters.append((k, k))\n    chapters.sort()\n    count = 0\n    for i in range(n):\n        if chapters[i][0] > chapters[i][1]:\n            count += 1\n    return count"
    },
    {
        "number": 361,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    if 'CODEFORCES' in word:\n        return 'NO'\n    for i in range(len(word)):\n        for j in range(i+1, len(word)+1):\n            if ''.join(sorted(word[i:j])) == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                return 'YES'\n    return 'NO'"
    },
    {
        "number": 362,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    polygon = list(range(1, n+1))\n    triangles = []\n    for i in range(n-2):\n        for j in range(i+2, n):\n            triangles.append((polygon[i], polygon[j], polygon[n-1]))\n            triangles.append((polygon[i], polygon[n-1], polygon[j]))\n    weights = [reduce(lambda x, y: x*y, triangle) for triangle in triangles]\n    return str(min(weights))"
    },
    {
        "number": 363,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    count = 0\n    while n > 0:\n        n //= 10\n        count += 1\n    return count"
    },
    {
        "number": 364,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    c = list(map(int, stdin.readline().split()))\n    cnt_A = [0] * (n+1)\n    cnt_B = [0] * (n+1)\n    for i in range(n):\n        if c[i] == A:\n            cnt_A[i+1] = cnt_A[i] + 1\n        else:\n            cnt_B[i+1] = cnt_B[i] + 1\n    for i in range(n):\n        if cnt_A[i] > cnt_B[i]:\n            return str(A)\n        elif cnt_B[i] > cnt_A[i]:\n            return str(c[i])\n    return \"-1\""
    },
    {
        "number": 365,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] == x:\n            count += 1\n    if count == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 366,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    dp = [float('inf')] * (s+1)\n    dp[0] = 0\n    for i in range(1, s+1):\n        for j in range(1, n+1):\n            if i >= j:\n                dp[i] = min(dp[i], dp[i-j]+1)\n    return dp[s]"
    },
    {
        "number": 367,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    # check if s is already a palindrome\n    if s == s[::-1]:\n        return s\n    # check if s can be made a palindrome by changing one letter\n    for i in range(n):\n        for j in range(26):\n            if chr(ord('a') + j)!= s[i]:\n                new_s = s[:i] + chr(ord('a') + j) + s[i+1:]\n                if new_s == new_s[::-1]:\n                    return new_s\n    # check if s can be made a palindrome by permuting the letters\n    for i in range(n):\n        for j in range(i+1, n):\n            new_s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n            if new_s == new_s[::-1]:\n                return new_s\n    # if no palindrome can be obtained, return an empty string\n    return ''"
    },
    {
        "number": 368,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    board = []\n    for i in range(8):\n        board.append(list(stdin.readline().strip()))\n\n    # Calculate weights\n    white_weight = 0\n    black_weight = 0\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == '.':\n                continue\n            elif board[i][j].isupper():\n                white_weight += {'Q': 9, 'R': 5, 'B': 3, 'N': 3, 'P': 1}[board[i][j]]\n            else:\n                black_weight += {'q': 9, 'r': 5, 'b': 3, 'n': 3, 'p': 1}[board[i][j]]\n\n    # Compare weights\n    if white_weight > black_weight:\n        return \"White\"\n    elif white_weight < black_weight:\n        return \"Black\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 369,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n\n    # check if game can be won\n    if s[n] == '1':\n        return '-1'\n\n    # initialize dp table\n    dp = [[float('inf')] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 0\n\n    # fill dp table\n    for i in range(n+1):\n        for j in range(n+1):\n            if i + j > n:\n                continue\n            for k in range(1, m+1):\n                if i + k > n:\n                    continue\n                dp[i+k][j+k] = min(dp[i+k][j+k], dp[i][j] + k)\n\n    # find shortest sequence of numbers that can win the game\n    seq = []\n    i, j = n, 0\n    while i > 0:\n        if dp[i][j] == float('inf'):\n            return '-1'\n        seq.append(dp[i][j])\n        i -= dp[i][j]\n        j += dp[i][j]\n\n    # reverse sequence and convert to string\n    seq.reverse()\n    return''.join(map(str, seq))"
    },
    {
        "number": 370,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return \"-1\"\n    if k == 0:\n        return \"1\"\n    if k == 1:\n        return \"0\"\n    if k == 2:\n        if x == 1 and y == 0:\n            return \"1\"\n        if x == 0 and y == 1:\n            return \"1\"\n        if x == -1 and y == 0:\n            return \"1\"\n        if x == 0 and y == -1:\n            return \"1\"\n        return \"-1\"\n    if k == 3:\n        if x == 2 and y == 0:\n            return \"1\"\n        if x == 1 and y == 1:\n            return \"1\"\n        if x == 0 and y == 2:\n            return \"1\"\n        if x == -1 and y == 1:\n            return \"1\"\n        if x == -2 and y == 0:\n            return \"1\"\n        if x == -1 and y == -1:\n            return \"1\"\n        if x == 0 and y == -2:\n            return \"1\"\n        if x == 1 and y == -1:\n            return \"1\"\n        return \"-1\"\n    if k == 4:\n        if x == 3 and y == 0:\n            return \"1\"\n        if x == 2 and y == 1:\n            return \"1\"\n        if x == 1 and y == 2:\n            return \"1\"\n        if x == 0 and y == 3:\n            return \"1\"\n        if x == -1 and y == 2:\n            return \"1\"\n        if x == -2 and y == 1:\n            return \"1\"\n        if x == -3 and y == 0:\n            return \"1\"\n        if x == -2 and y == -1:\n            return \"1\"\n        if x == -1 and y == -2:\n            return \"1\"\n        if x == 0 and y == -3:\n            return \"1\"\n        if x == 1 and y == -2:\n            return \"1\"\n        if x == 2 and y == -1:\n            return \"1\"\n        return \"-1\"\n    if k == 5:\n        if x == 4 and y == 0:\n            return \"1\"\n        if x == 3 and y == 1:\n            return \"1\"\n        if x == 2 and y == 2:\n            return \"1\"\n        if x == 1 and y == 3:\n            return \"1\"\n        if x == 0 and y == 4:\n            return \"1\"\n        if x == -1 and y == 3:\n            return \"1\"\n        if x == -2 and y == 2:\n            return \"1\"\n        if x == -3 and y == 1:\n            return \"1\"\n        if x == -4 and y == 0:\n            return \"1\"\n        if x == -3 and y == -1:\n            return \"1\"\n        if x == -2 and y == -2:\n            return \"1\"\n        if x == -1 and y == -3:\n            return \"1\"\n        if x == 0 and y == -4:\n            return \"1\"\n        if x == 1 and y == -3:\n            return \"1\"\n        if x == 2 and y == -2:\n            return \"1\"\n        if x == 3 and y == -1:\n            return \"1\"\n        return \"-1\"\n    if k == 6:\n        if x == 5 and y == 0:\n            return \"1\"\n        if x == 4 and y == 1:\n            return \"1\"\n        if x == 3 and y == 2:\n            return \"1\"\n        if x == 2 and y == 3:\n            return \"1\"\n        if x == 1 and y == 4:\n            return \"1\"\n        if x == 0 and y == 5:\n            return \"1\"\n        if x == -1 and y == 4:\n            return \"1\"\n        if x == -2 and y == 3:\n            return \"1\"\n        if x == -3 and y == 2:\n            return \"1\"\n        if x == -4 and y == 1:\n            return \"1\"\n        if x == -5 and y == 0:\n            return \"1\"\n        if x == -4 and y == -1:\n            return \"1\"\n        if x == -3 and y == -2:\n            return \"1\"\n        if x == -2 and y == -3:"
    },
    {
        "number": 371,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin)\n    if m == 1:\n        return \"8\"\n    elif m == 8:\n        return \"54\"\n    else:\n        return \"-1\""
    },
    {
        "number": 372,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, r1, x2, y2, r2 = map(int, stdin.split())\n    d = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    if d > r1 + r2:\n        return \"0.00000000000000000000\"\n    elif d < abs(r1 - r2):\n        return \"0.00000000000000000000\"\n    else:\n        a = (r1 ** 2 - r2 ** 2 + d ** 2) / (2 * d)\n        h = (r1 ** 2 - a ** 2) ** 0.5\n        xm = x1 + a * (x2 - x1) / d\n        ym = y1 + a * (y2 - y1) / d\n        return \"{:.12f}\".format(r1 ** 2 * math.acos((r1 ** 2 + h ** 2 - r2 ** 2) / (2 * r1 * h)) + r2 ** 2 * math.acos((r2 ** 2 + h ** 2 - r1 ** 2) / (2 * r2 * h)) - 0.5 * h ** 2 * math.log((r1 + h + d) / (r1 + h - d)))"
    },
    {
        "number": 373,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v = int(stdin.strip())\n    n = v\n    while True:\n        x = 2\n        while x < n:\n            if n % x == 0:\n                break\n            x += 1\n        if x >= n:\n            break\n        n -= x\n    return n"
    },
    {
        "number": 374,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, a = map(int, stdin.split())\n    dp = [0] * (n+1)\n    dp[1] = a[1]\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + a[i]\n        for j in range(1, i):\n            if p[j] == i:\n                dp[i] = max(dp[i], dp[j])\n    return dp[n]"
    },
    {
        "number": 375,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                w = s[:i] + s[i+1:]\n                if w == t:\n                    count += 1\n    return count"
    },
    {
        "number": 376,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    w = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        w.append((u - 1, v - 1))\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n    # print(n)\n    # print(w)\n    # print(a)\n    # print(w)\n   "
    },
    {
        "number": 377,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return 1\n    elif m == n:\n        return 0\n    else:\n        return (n - m) // 2 + 1"
    },
    {
        "number": 378,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, r = map(int, stdin.split())\n    shovels = k // 10\n    coins = k % 10\n    if coins >= r:\n        shovels += 1\n        coins -= r\n    return str(shovels)"
    },
    {
        "number": 379,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    piece = []\n    for i in range(n):\n        piece.append(list(stdin.readline().strip()))\n    for i in range(n):\n        for j in range(m):\n            if piece[i][j] == 'X':\n                for k in range(i+1, n):\n                    if piece[k][j] == 'X':\n                        for l in range(j+1, m):\n                            if piece[k][l] == 'X':\n                                for p in range(k+1, n):\n                                    if piece[p][l] == 'X':\n                                        for q in range(l+1, m):\n                                            if piece[p][q] == 'X':\n                                                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 380,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split('\\n'):\n        x, y = map(int, line.split())\n        points.append((x, y))\n\n    # sort points by x-coordinate\n    points = sorted(points, key=lambda x: x[0])\n\n    # find the minimum number of segments\n    segments = 1\n    for i in range(1, len(points)):\n        if points[i][1]!= points[i-1][1]:\n            segments += 1\n\n    return str(segments)"
    },
    {
        "number": 381,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = 2*k\n    m = k*(k-1)\n    if m == 0:\n        return \"NO\"\n    edges = []\n    for i in range(1, k):\n        edges.append((i, i+k))\n    for i in range(k):\n        edges.append((i, i+k))\n    for i in range(k):\n        edges.append((i+k, i))\n    for i in range(k):\n        edges.append((i+k, i+k+1))\n    edges.append((k, k+1))\n    edges.append((k+1, k))\n    edges.sort()\n    for i in range(m):\n        edges[i] = \" \".join(map(str, edges[i]))\n    return \"YES\\n{} {}\\n{}\".format(n, m, \"\\n\".join(edges))"
    },
    {
        "number": 382,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n    ans = []\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        if l > r:\n            l, r = r, l\n        count = 0\n        for i in range(l-1, r):\n            if s[i:i+m] == t:\n                count += 1\n        ans.append(count)\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 383,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    MOD = 1000000007\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+1):\n            for l in range(1, k+1):\n                if l <= j:\n                    dp[i][j] = (dp[i][j] + dp[i-1][j-l]) % MOD\n    ans = 0\n    for i in range(d, k+1):\n        ans = (ans + dp[n][i]) % MOD\n    return str(ans)"
    },
    {
        "number": 384,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    row = stdin.split('\\n')[1]\n    k = 0\n    nums = []\n    i = 0\n    while i < n:\n        if row[i] == 'B':\n            j = i + 1\n            while j < n and row[j] == 'B':\n                j += 1\n            k += 1\n            nums.append(j - i)\n            i = j\n        else:\n            i += 1\n    if k == 0:\n        return '0\\n'\n    else:\n        return f'{k}\\n{nums}\\n'"
    },
    {
        "number": 385,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.split()[0:3])\n    cbs = stdin.split()[3]\n    ops = stdin.split()[4:]\n    stack = []\n    for i in range(n):\n        if cbs[i] == '(':\n            stack.append(i)\n        else:\n            if not stack:\n                return \"\"\n            stack.pop()\n    i = p - 1\n    for op in ops:\n        if op == 'L':\n            i -= 1\n            if i < 0:\n                i = 0\n        elif op == 'R':\n            i += 1\n            if i > n:\n                i = n\n        elif op == 'D':\n            if i < 0 or i >= n:\n                return \"\"\n            if cbs[i] == '(':\n                j = stack.pop()\n                if j < i:\n                    cbs = cbs[:j] + cbs[i+1:]\n                else:\n                    cbs = cbs[:i] + cbs[j+1:]\n            else:\n                j = stack[-1]\n                if j < i:\n                    cbs = cbs[:j] + cbs[i+1:]\n                else:\n                    cbs = cbs[:i] + cbs[j+1:]\n                stack.pop()\n            i -= 1\n            if i < 0:\n                i = 0\n    return cbs"
    },
    {
        "number": 386,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    queries = []\n    for i in range(n):\n        query, answer = stdin.readline().strip().split()\n        queries.append((query, int(answer)))\n    y = 0\n    for query, answer in queries:\n        if query == \">\":\n            if y <= answer:\n                return \"Impossible\"\n            y = answer + 1\n        elif query == \"<\":\n            if y >= answer:\n                return \"Impossible\"\n            y = answer - 1\n        elif query == \">=\":\n            if y < answer:\n                return \"Impossible\"\n            y = answer\n        elif query == \"<=\":\n            if y > answer:\n                return \"Impossible\"\n            y = answer\n    if y < -2*10**9 or y > 2*10**9:\n        return \"Impossible\"\n    return str(y)"
    },
    {
        "number": 387,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    periods = set()\n    for i in range(a+b):\n        for j in range(i+1, a+b):\n            if (i+j) % (a+b) == 0:\n                periods.add((i+j) // (a+b))\n    return len(periods)"
    },
    {
        "number": 388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    notes = stdin.split()[1:]\n    soldiers = []\n    for i in range(n):\n        soldiers.append(chr(ord('a') + i))\n    for i in range(n - k + 1):\n        if notes[i] == \"YES\":\n            for j in range(k):\n                soldiers[i+j] = chr(ord('a') + i+j)\n    return \" \".join(soldiers)"
    },
    {
        "number": 389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 0\n    if a % 2 == 0:\n        return a // 2\n    if a % 3 == 0:\n        return 2 * a // 3\n    if a % 5 == 0:\n        return 4 * a // 5\n    return -1"
    },
    {
        "number": 390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    if n % 2 == 1:\n        return \"-1\"\n    else:\n        left = c[:n//2]\n        right = c[n//2:]\n        if left == right[::-1]:\n            return str(a*n//2)\n        else:\n            return \"-1\""
    },
    {
        "number": 391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    if k == 1:\n        return \"-1\"\n    painting = []\n    for i in range(k):\n        layer = []\n        for j in range(k):\n            if (i+j)%2 == 0:\n                layer.append(\"b\")\n            else:\n                layer.append(\"w\")\n        painting.append(layer)\n    for i in range(k):\n        for j in range(k):\n            if i == 0 or i == k-1 or j == 0 or j == k-1:\n                painting[i][j] = \"w\"\n    return \"\\n\".join(\"\".join(row) for row in painting)"
    },
    {
        "number": 392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lovely_numbers = []\n    for i in range(2, n+1):\n        if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n            lovely_numbers.append(i)\n    return max(lovely_numbers)"
    },
    {
        "number": 393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seating = stdin.readline().strip()\n    if n == 2:\n        return \"Yes\" if seating[0] == '0' and seating[1] == '0' else \"No\"\n    if seating[0] == '1' and seating[1] == '1':\n        return \"No\"\n    if seating[n-2] == '1' and seating[n-1] == '1':\n        return \"No\"\n    for i in range(1, n-1):\n        if seating[i-1] == '1' and seating[i] == '1' and seating[i+1] == '1':\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 1\n    while k <= n:\n        if a[k-1] == a[k-1-k%n] + a[k-1-k%n-1]:\n            k += 1\n        else:\n            break\n    return str(k) + '\\n' +''.join(map(str, a[:k]))"
    },
    {
        "number": 395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[0] + a[1] > a[2] + a[3] and a[2] + a[3] > a[4] + a[5]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    count = 0\n    for i in range(l, r+1):\n        if i == 2 or i == 3:\n            count += 1\n        else:\n            prime_factors = []\n            for j in range(2, int(i**0.5)+1):\n                if i % j == 0:\n                    while i % j == 0:\n                        prime_factors.append(j)\n                        i //= j\n            if i > 1:\n                prime_factors.append(i)\n            if len(prime_factors) == 2 and prime_factors[0] == 2 and prime_factors[1] == 3:\n                count += 1\n    return count"
    },
    {
        "number": 397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 0:\n        return str(n)\n    if k == 1:\n        return str(n-1)\n    if k == 2:\n        return str(n-2)\n    if k == 3:\n        return str(n-3)\n    if k == 4:\n        return str(n-4)\n    if k == 5:\n        return str(n-5)\n    if k == 6:\n        return str(n-6)\n    if k == 7:\n        return str(n-7)\n    if k == 8:\n        return str(n-8)\n    if k == 9:\n        return str(n-9)\n    if k == 10:\n        return str(n-10)\n    if k == 11:\n        return str(n-11)\n    if k == 12:\n        return str(n-12)\n    if k == 13:\n        return str(n-13)\n    if k == 14:\n        return str(n-14)\n    if k == 15:\n        return str(n-15)\n    if k == 16:\n        return str(n-16)\n    if k == 17:\n        return str(n-17)\n    if k == 18:\n        return str(n-18)\n    if k == 19:\n        return str(n-19)\n    if k == 20:\n        return str(n-20)\n    if k == 21:\n        return str(n-21)\n    if k == 22:\n        return str(n-22)\n    if k == 23:\n        return str(n-23)\n    if k == 24:\n        return str(n-24)\n    if k == 25:\n        return str(n-25)\n    if k == 26:\n        return str(n-26)\n    if k == 27:\n        return str(n-27)\n    if k == 28:\n        return str(n-28)\n    if k == 29:\n        return str(n-29)\n    if k == 30:\n        return str(n-30)\n    if k == 31:\n        return str(n-31)\n    if k == 32:\n        return str(n-32)\n    if k == 33:\n        return str(n-33)\n    if k == 34:\n        return str(n-34)\n    if k == 35:\n        return str(n-35)\n    if k == 36:\n        return str(n-36)\n    if k == 37:\n        return str(n-37)\n    if k == 38:\n        return str(n-38)\n    if k == 39:\n        return str(n-39)\n    if k == 40:\n        return str(n-40)\n    if k == 41:\n        return str(n-41)\n    if k == 42:\n        return str(n-42)\n    if k == 43:\n        return str(n-43)\n    if k == 44:\n        return str(n-44)\n    if k == 45:\n        return str(n-45)\n    if k == 46:\n        return str(n-46)\n    if k == 47:\n        return str(n-47)\n    if k == 48:\n        return str(n-48)\n    if k == 49:\n        return str(n-49)\n    if k == 50:\n        return str(n-50)\n    if k == 51:\n        return str(n-51)\n    if k == 52:\n        return str(n-52)\n    if k == 53:\n        return str(n-53)\n    if k == 54:\n        return str(n-54)\n    if k == 55:\n        return str(n-55)\n    if k == 56:\n        return str(n-56)\n    if k == 57:\n        return str(n-57)\n    if k == 58:\n        return str(n-58)\n    if k == 59:\n        return str(n-59)\n    if k == 60:\n        return str(n"
    },
    {
        "number": 398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    if n < 3:\n        return \"NO\"\n    if a[0] + a[1] > a[2]:\n        return \"YES\"\n    if a[n-1] + a[n-2] > a[n-3]:\n        return \"YES\"\n    for i in range(1, n-2):\n        if a[i] + a[i+1] > a[i+2]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x < y:\n        return \"No\"\n    if x == y:\n        return \"Yes\"\n    if x % 2 == 1:\n        return \"No\"\n    if x // 2 + y < x:\n        return \"No\"\n    return \"Yes\""
    },
    {
        "number": 400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort(reverse=True)\n    total_rating = 0\n    for i in range(n):\n        total_rating += a[i] // 10\n    if k >= total_rating:\n        return str(total_rating)\n    else:\n        return str(total_rating - k)"
    },
    {
        "number": 401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    def is_pretty(num):\n        for digit in a:\n            if digit in str(num):\n                return True\n        for digit in b:\n            if digit in str(num):\n                return True\n        return False\n\n    num = 1\n    while not is_pretty(num):\n        num += 1\n\n    return str(num)"
    },
    {
        "number": 402,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    time = 0\n    for i in range(1, n+1):\n        time += 5*i\n        if time >= k:\n            return i\n    return n\n\nprint(solution(\"3 222\")) # Output: 2\nprint(solution(\"4 190\")) # Output: 4\nprint(solution(\"7 1\")) # Output: 7"
    },
    {
        "number": 404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b = int(stdin)\n    count = 1\n    for i in range(2, b+1):\n        if b % i == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    bumpers = stdin.readline().strip()\n    count = 0\n    for i in range(1, n+1):\n        if bumpers[i-1] == '>':\n            count += 1\n        elif bumpers[i-1] == '<':\n            count -= 1\n        if count < 0:\n            return str(i)\n    return str(n)"
    },
    {
        "number": 406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sticks = list(map(int, stdin.split()[1:]))\n    sticks.sort()\n    max_area = 0\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                for l in range(k+1, n):\n                    if sticks[i] == sticks[j] == sticks[k] == sticks[l]:\n                        max_area = max(max_area, sticks[i]*sticks[j]*sticks[k]*sticks[l])\n    return str(max_area)"
    },
    {
        "number": 407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = []\n    for i in range(n):\n        nums.append(int(stdin.readline().strip()))\n    nums.sort()\n    return str(sum(nums))"
    },
    {
        "number": 408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 0 and m == 0:\n        return \"0\"\n    if n == 0:\n        return str(m // 3)\n    if m == 0:\n        return str(n // 2)\n    if n == 1:\n        return str(m // 2)\n    if m == 1:\n        return str(n // 3)\n    if n == 2:\n        return \"2\"\n    if m == 2:\n        return \"1\"\n    if n == 3:\n        return \"1\"\n    if m == 3:\n        return \"1\"\n    if n == 4:\n        return \"1\"\n    if m == 4:\n        return \"1\"\n    if n == 5:\n        return \"1\"\n    if m == 5:\n        return \"1\"\n    if n == 6:\n        return \"1\"\n    if m == 6:\n        return \"1\"\n    if n == 7:\n        return \"1\"\n    if m == 7:\n        return \"1\"\n    if n == 8:\n        return \"1\"\n    if m == 8:\n        return \"1\"\n    if n == 9:\n        return \"1\"\n    if m == 9:\n        return \"1\"\n    if n == 10:\n        return \"1\"\n    if m == 10:\n        return \"1\"\n    if n == 11:\n        return \"1\"\n    if m == 11:\n        return \"1\"\n    if n == 12:\n        return \"1\"\n    if m == 12:\n        return \"1\"\n    if n == 13:\n        return \"1\"\n    if m == 13:\n        return \"1\"\n    if n == 14:\n        return \"1\"\n    if m == 14:\n        return \"1\"\n    if n == 15:\n        return \"1\"\n    if m == 15:\n        return \"1\"\n    if n == 16:\n        return \"1\"\n    if m == 16:\n        return \"1\"\n    if n == 17:\n        return \"1\"\n    if m == 17:\n        return \"1\"\n    if n == 18:\n        return \"1\"\n    if m == 18:\n        return \"1\"\n    if n == 19:\n        return \"1\"\n    if m == 19:\n        return \"1\"\n    if n == 20:\n        return \"1\"\n    if m == 20:\n        return \"1\"\n    if n == 21:\n        return \"1\"\n    if m == 21:\n        return \"1\"\n    if n == 22:\n        return \"1\"\n    if m == 22:\n        return \"1\"\n    if n == 23:\n        return \"1\"\n    if m == 23:\n        return \"1\"\n    if n == 24:\n        return \"1\"\n    if m == 24:\n        return \"1\"\n    if n == 25:\n        return \"1\"\n    if m == 25:\n        return \"1\"\n    if n == 26:\n        return \"1\"\n    if m == 26:\n        return \"1\"\n    if n == 27:\n        return \"1\"\n    if m == 27:\n        return \"1\"\n    if n == 28:\n        return \"1\"\n    if m == 28:\n        return \"1\"\n    if n == 29:\n        return \"1\"\n    if m == 29:\n        return \"1\"\n    if n == 30:\n        return \"1\"\n    if m == 30:\n        return \"1\"\n    if n == 31:\n        return \"1\"\n    if m == 31:\n        return \"1\"\n    if n == 32:\n        return \"1\"\n    if m == 32:\n        return \"1\"\n    if n == 33:\n        return \"1\"\n    if m == 33:\n        return \"1\"\n    if n == 34:\n        return \"1\"\n    if m == 34:\n        return \"1\"\n    if n == 35:\n        return \"1\"\n    if m == 35:\n        return \"1\"\n    if n == 36:\n        return \"1\"\n    if m == 36:\n        return \"1\"\n    if n == 37:\n        return \"1\"\n    if m == 37:\n        return \"1\"\n    if n == 38:\n        return"
    },
    {
        "number": 409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if \"AB\" in s and \"BA\" in s:\n        if s.index(\"AB\") == s.index(\"BA\") or s.index(\"BA\") == s.index(\"AB\") + 2:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    k, b = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    if k > n:\n        return \"NO\"\n    if k == n:\n        return \"YES\\n\" + \"\\n\".join(map(str, range(1, n+1)))\n    if k == 1:\n        return \"YES\\n\" + str(a.index(b[0])+1) + \" L\"\n    if k == 2:\n        if a[0] > b[0]:\n            return \"YES\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[1])+1) + \" R\"\n        else:\n            return \"YES\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[0])+1) + \" L\"\n    if k == 3:\n        if a[0] > b[0]:\n            return \"YES\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[2])+1) + \" L\"\n        else:\n            return \"YES\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[2])+1) + \" R\"\n    if k == 4:\n        if a[0] > b[0]:\n            return \"YES\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[2])+1) + \" L\\n\" + str(a.index(b[3])+1) + \" R\"\n        else:\n            return \"YES\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[2])+1) + \" R\\n\" + str(a.index(b[3])+1) + \" L\"\n    if k == 5:\n        if a[0] > b[0]:\n            return \"YES\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[2])+1) + \" L\\n\" + str(a.index(b[3])+1) + \" R\\n\" + str(a.index(b[4])+1) + \" L\"\n        else:\n            return \"YES\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[2])+1) + \" R\\n\" + str(a.index(b[3])+1) + \" L\\n\" + str(a.index(b[4])+1) + \" R\"\n    if k == 6:\n        if a[0] > b[0]:\n            return \"YES\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[2])+1) + \" L\\n\" + str(a.index(b[3])+1) + \" R\\n\" + str(a.index(b[4])+1) + \" L\\n\" + str(a.index(b[5])+1) + \" R\"\n        else:\n            return \"YES\\n\" + str(a.index(b[1])+1) + \" R\\n\" + str(a.index(b[0])+1) + \" L\\n\" + str(a.index(b[2])+1) + \" R\\n\" + str(a.index(b[3])+1) + \" L\\n\" + str(a.index(b[4])+1"
    },
    {
        "number": 411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, B = map(int, stdin.split())\n    rebels = []\n    bases = []\n    for i in range(R):\n        x, y = map(int, stdin.split())\n        rebels.append((x, y))\n    for i in range(B):\n        x, y = map(int, stdin.split())\n        bases.append((x, y))\n    rebels.sort()\n    bases.sort()\n    for i in range(len(rebels)):\n        for j in range(len(bases)):\n            if rebels[i][0] == bases[j][0] and rebels[i][1] == bases[j][1]:\n                return \"No\"\n            if rebels[i][0] < bases[j][0] and rebels[i][1] < bases[j][1]:\n                if i > 0 and (rebels[i][0] == rebels[i-1][0] or rebels[i][1] == rebels[i-1][1]):\n                    return \"No\"\n                if j > 0 and (rebels[i][0] == bases[j-1][0] or rebels[i][1] == bases[j-1][1]):\n                    return \"No\"\n    return \"Yes\""
    },
    {
        "number": 413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    count = 0\n    while n!= m:\n        if n > m:\n            n -= 1\n            count += 1\n        else:\n            n *= 2\n            count += 1\n    return count"
    },
    {
        "number": 414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort()\n    edges = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][1] >= segments[j][0]:\n                edges.append((i, j))\n    if len(edges)!= n-1:\n        return \"NO\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) not in edges and (j, i) not in edges:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, requests = map(int, stdin.split())\n    requests_per_second = [0] * n\n    for i in range(n):\n        requests_per_second[i] = requests[i]\n    max_attack_length = 0\n    current_attack_length = 0\n    for i in range(n):\n        if requests_per_second[i] > 100 * i:\n            current_attack_length += 1\n            max_attack_length = max(max_attack_length, current_attack_length)\n        else:\n            current_attack_length = 0\n    return str(max_attack_length)"
    },
    {
        "number": 416,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    memories = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if memories[i] == \"N\":\n            count += 1\n            if count == k:\n                return \"YES\"\n        else:\n            count = 0\n    return \"NO\""
    },
    {
        "number": 417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, D = map(int, stdin.split())\n    A = [X]\n    for i in range(N-1):\n        A.append(A[-1] + D)\n    count = 0\n    for i in range(1, 2**N):\n        takahashi = []\n        aoki = []\n        for j in range(N):\n            if i & (1 << j):\n                takahashi.append(A[j])\n            else:\n                aoki.append(A[j])\n        if len(takahashi) == 0 or len(aoki) == 0:\n            continue\n        s = sum(takahashi)\n        t = sum(aoki)\n        count += s - t\n    return str(count)"
    },
    {
        "number": 418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    outscored = []\n    for i in range(n):\n        handle, before, after = stdin.readline().strip().split()\n        before, after = int(before), int(after)\n        if after >= 2400:\n            outscored.append(handle)\n    if len(outscored) >= 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = int(stdin, 2)\n    count = 0\n    for i in range(100):\n        if 2**i <= s:\n            count += 1\n    return count"
    },
    {
        "number": 420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    b = [[0 for j in range(m)] for i in range(2*n-1)]\n    for i in range(n):\n        for j in range(m):\n            b[i][j] = a[i][j]\n    for i in range(n, 2*n-1):\n        for j in range(m):\n            if i-n < n:\n                b[i][j] = a[i-n][j]\n            else:\n                b[i][j] = a[2*n-2-i][j]\n    for i in range(n):\n        for j in range(m):\n            if i < n:\n                b[i][j] = a[i][j]\n            else:\n                b[i][j] = a[i-n][j]\n    for i in range(n, 2*n-1):\n        for j in range(m):\n            if i-n < n:\n                b[i][j] = a[i-n][j]\n            else:\n                b[i][j] = a[2*n-2-i][j]\n    return str(2*n-1)"
    },
    {
        "number": 421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    orders = []\n    for i in range(n):\n        start, end = map(int, stdin.readline().strip().split())\n        orders.append((start, end))\n    orders.sort(key=lambda x: x[1])\n    accepted = 0\n    for i in range(n):\n        if accepted >= n:\n            break\n        if orders[i][0] >= orders[accepted][1]:\n            accepted += 1\n    return accepted"
    },
    {
        "number": 422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:2+n]))\n    y = list(map(int, stdin.split()[2+n:]))\n    if sum(x) > k or sum(y) > k:\n        return \"NO\"\n    for i in range(n):\n        if i > 0 and x[i] + x[i-1] > k:\n            return \"NO\"\n        if i > 0 and y[i] + y[i-1] > k:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 423,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coeffs = [None] * (n + 1)\n    for i in range(n + 1):\n        coeff = int(stdin.readline().strip())\n        if coeff == -1:\n            coeffs[i] = None\n        else:\n            coeffs[i] = coeff\n    if coeffs[n] is None:\n        return \"No\"\n    for i in range(n, -1, -1):\n        if coeffs[i] is None:\n            coeffs[i] = 0\n    for i in range(n, -1, -1):\n        if coeffs[i] == 0:\n            continue\n        if coeffs[i] % k == 0:\n            return \"Yes\"\n        for j in range(i + 1, n + 1):\n            if coeffs[j] is None:\n                continue\n            if coeffs[j] % coeffs[i] == 0:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X_2 = int(stdin)\n    if X_2 < 4 or X_2 > 10**6:\n        return \"Invalid input\"\n    if is_prime(X_2):\n        return \"Invalid input\"\n    X_0 = 3\n    while X_0 < X_2:\n        if X_0 % 2 == 0:\n            X_0 += 1\n        else:\n            X_0 += 2\n    return str(X_0)\n\ndef"
    },
    {
        "number": 425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    if p == 0:\n        return str(bin(n).count('1'))\n    elif p > 0:\n        count = 0\n        while n > 0:\n            n -= p\n            count += 1\n        return str(count)\n    else:\n        count = 0\n        while n < 0:\n            n += p\n            count += 1\n        return str(count) if n == 0 else '-1'"
    },
    {
        "number": 426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    if k == 0:\n        return s\n    if s[0] == '0' and len(s) > 1:\n        return '0' * n\n    if s[0] == '0' and len(s) == 1:\n        return '0'\n    if s[0]!= '0':\n        s = s.lstrip('0')\n        if len(s) == 0:\n            return '0'\n        if len(s) <= k:\n            return s\n        else:\n            return s[:k] + str(int(s[k]) + 1)"
    },
    {
        "number": 427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cnt_1, cnt_2, x, y = map(int, stdin.split())\n    primes = [True] * (y+1)\n    primes[0] = primes[1] = False\n    for i in range(2, int(y**0.5)+1):\n        if primes[i]:\n            for j in range(i*i, y+1, i):\n                primes[j] = False\n    ans = 1\n    for i in range(2, y+1):\n        if primes[i]:\n            ans = max(ans, i)\n    for i in range(ans, y+1):\n        if primes[i]:\n            cnt_1_temp = cnt_1\n            cnt_2_temp = cnt_2\n            for j in range(1, i):\n                if j % x!= 0 and j % y!= 0:\n                    if cnt_1_temp > 0:\n                        cnt_1_temp -= 1\n                    else:\n                        cnt_2_temp -= 1\n            if cnt_1_temp == 0 and cnt_2_temp == 0:\n                return i\n    return -1"
    },
    {
        "number": 428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sx, sy, dx, dy, t = map(int, stdin.split())\n    x, y = sx, sy\n    for _ in range(t):\n        x, y = ((x + dx - 1) % n) + 1, ((y + dy - 1) % n) + 1\n        dx += x + y\n        dy += x + y\n    return f\"{x} {y}\""
    },
    {
        "number": 429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if '?' not in s:\n        return s\n    for i in range(len(s)):\n        if s[i] == '?':\n            for c in 'ABCDEFGHIJKLMNOPQRSTUVWXYZ':\n                if c not in s[:i] and c not in s[i+1:]:\n                    s = s[:i] + c + s[i+1:]\n                    break\n            else:\n                return '-1'\n    return s"
    },
    {
        "number": 430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    weights = list(map(int, stdin.split()[1:]))\n    total_weight = sum(weights)\n    if total_weight % 2 == 1:\n        return \"NO\"\n    else:\n        half_weight = total_weight // 2\n        left_weight = 0\n        for weight in weights:\n            if left_weight + weight <= half_weight:\n                left_weight += weight\n            else:\n                return \"NO\"\n        return \"YES\""
    },
    {
        "number": 431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floors = []\n    for i in range(n):\n        floor = list(map(int, stdin.readline().strip()))\n        floors.append(floor)\n    # print(floors)\n    time = 0\n    for i in range(n):\n        for j in range(1, m+1):\n            if floors[i][j] == 1:\n                time += 1\n                floors[i][j] = 0\n                if i == n-1:\n                    continue\n                if floors[i+1][j] == 1:\n                    time += 1\n                    floors[i+1][j] = 0\n                else:\n                    time += 2\n                    floors[i+1][j] = 0\n                    if j > 1 and floors[i+1][j-2] == 1:\n                        time += 1\n                        floors[i+1][j-2] = 0\n                    if j < m and floors[i+1][j+2] == 1:\n                        time += 1\n                        floors[i+1][j+2] = 0\n    return str(time)"
    },
    {
        "number": 432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, a = map(int, stdin.split())\n    dp = [float('inf')] * (n+1)\n    dp[1] = c[1]\n    for i in range(2, n+1):\n        dp[i] = min(dp[i-1], dp[a[i-1]] + c[i])\n    return dp[n]"
    },
    {
        "number": 433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if b < 0:\n        k = (a + b) % n + 1\n    else:\n        k = (a + b) % n + 1\n    return str(k)"
    },
    {
        "number": 434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    i = 0\n    while i < n:\n        if a[i] == -1:\n            i += 1\n            continue\n        j = i + 1\n        while j < n and a[j]!= -1:\n            j += 1\n        if j == n:\n            count += 1\n            i = j\n        else:\n            count += 1\n            i = j - 1\n    return str(count)"
    },
    {
        "number": 435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if s[i] == 'a':\n            count += 1\n        else:\n            count = 0\n        if count > max_count:\n            max_count = count\n        if count > k:\n            count = k\n    return max_count"
    },
    {
        "number": 436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    for i in range(n):\n        if a[i] >= 2*a[0]:\n            return \"1\\n1\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]+a[j] >= 2*a[0]:\n                return \"2\\n\"+str(i+1)+\" \"+str(j+1)\n    return \"0\""
    },
    {
        "number": 437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1.000000000000\"\n    else:\n        return str(1/2 + (n-1)/n)"
    },
    {
        "number": 438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = 1\n    candies = [1]\n    while sum(candies) < n:\n        k += 1\n        candies.append(k)\n    print(k)\n    print(*candies)"
    },
    {
        "number": 439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    result = 1\n    for i in range(n):\n        result = (result * 2) % m\n    return result"
    },
    {
        "number": 440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    new_s = ''\n    for i in range(n):\n        if i < n-1 and s[i] in vowels and s[i+1] in vowels:\n            new_s += s[i+1]\n        else:\n            new_s += s[i]\n    return new_s"
    },
    {
        "number": 441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    seats = stdin.strip().split()[1]\n    students = [i for i in range(a+b) for _ in range(seats.count('*'))]\n    students.sort()\n    max_students = 0\n    for i in range(len(students)):\n        if i > 0 and students[i] == students[i-1]:\n            continue\n        for j in range(i+1, len(students)):\n            if j > i+1 and students[j] == students[j-1]:\n                continue\n            if seats[students[i]-1] == 'A' and seats[students[j]-1] == 'A':\n                continue\n            if seats[students[i]-1] == 'B' and seats[students[j]-1] == 'B':\n                continue\n            max_students = max(max_students, j-i)\n    return str(max_students)"
    },
    {
        "number": 442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r = int(stdin)\n    x = 1\n    y = 1\n    while True:\n        h = x**2 + 2*x*y + x + 1\n        if h == r:\n            return f\"{x} {y}\"\n        elif h < r:\n            x += 1\n        else:\n            y += 1\n        if x > y:\n            return \"NO\""
    },
    {
        "number": 443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if sum(a) % 2!= 0:\n        return '-1'\n    k = sum(a) // 2\n    if k > n:\n        return '-1'\n    if k == n:\n        return '1'+''.join(map(str, range(1, n+1)))\n    if k == 1:\n        return '2'+''.join(map(str, [1]*n))\n    if k == 0:\n        return '1'+''.join(map(str, [1]*n))\n    if k == n-1:\n        return '2'+''.join(map(str, [1]*(n-1)) + [n])\n    return '-1'"
    },
    {
        "number": 444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = 1\n    while k <= n:\n        k += 1\n    k -= 1\n    digits = [0] * k\n    for i in range(k):\n        digits[i] = 9\n    return str(k) + '\\n' +''.join(map(str, digits))"
    },
    {
        "number": 445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    primes = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_prime(a[i] + a[j]):\n                primes.add(a[i] + a[j])\n    if not primes:\n        return \"0\\n\"\n    max_size = 0\n    max_subset = []\n    for prime in primes:\n        subset = [x for x in a if x!= prime]\n        if len(subset) > max_size:\n            max_size = len(subset)\n            max_subset = subset\n    return f\"{max_size}\\n{' '.join(map(str, max_subset))}\\n\"\n\ndef"
    },
    {
        "number": 446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    k = 0\n    while (2**k - 1) * (2**k - 1) <= n:\n        k += 1\n    return (2**k - 1) * (2**k - 1)"
    },
    {
        "number": 447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, d = map(int, stdin.readline().split())\n    a, b = map(int, stdin.readline().split())\n    count = 0\n    for i in range(a, b+1):\n        if i % m == 0:\n            if str(i).count(str(d)) == 0:\n                count += 1\n    return str((count % (10**9 + 7)))"
    },
    {
        "number": 448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    line = list(range(1, n+1))\n    i = 0\n    while line:\n        if a[line[i]-1] <= m:\n            m -= a[line[i]-1]\n            line.pop(i)\n        else:\n            m -= m\n            line.pop(i)\n    return line[0]"
    },
    {
        "number": 449,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    bills = [100, 20, 10, 5, 1]\n    count = 0\n    for bill in bills:\n        count += n // bill\n        n %= bill\n    return count"
    },
    {
        "number": 450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 1000000007\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+1):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n            if j >= 1 and abs(i-j) == 1:\n                dp[i][j] -= dp[i-1][j-2]\n                dp[i][j] %= MOD\n    return dp[n][k]"
    },
    {
        "number": 451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    b = list(map(int, stdin.split()[2:2+n]))\n    c = stdin.split()[2+n:]\n    if k > n:\n        return -1\n    if k == 1:\n        return max(b)\n    if k == n:\n        return sum(b)\n    if k == 2:\n        return max(b[0], b[1])\n    if k == 3:\n        return max(b[0], b[1], b[2])\n    if k == 4:\n        return max(b[0], b[1], b[2], b[3])\n    if k == 5:\n        return max(b[0], b[1], b[2], b[3], b[4])\n    if k == 6:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5])\n    if k == 7:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6])\n    if k == 8:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7])\n    if k == 9:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8])\n    if k == 10:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9])\n    if k == 11:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10])\n    if k == 12:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11])\n    if k == 13:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12])\n    if k == 14:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13])\n    if k == 15:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13], b[14])\n    if k == 16:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15])\n    if k == 17:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15], b[16])\n    if k == 18:\n        return max(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15], b[16], b[17])\n    if k == 19:\n        return max(b[0], b[1], b[2], b[3], b["
    },
    {
        "number": 452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.readline().split())\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = p // q\n    for i in range(n):\n        b = a[i] + b // a[i]\n    if b == p:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    expression = stdin.strip()\n    A, B, C = map(int, expression.split('=')[0].split('+'))\n    if A + B == C:\n        return expression\n    elif A + B < C:\n        return \"Impossible\"\n    else:\n        if A == 1 and B == 1 and C == 2:\n            return \"|||+|=||||\"\n        elif A == 1 and B == 2 and C == 3:\n            return \"|||+|=||||\"\n        elif A == 1 and B == 3 and C == 4:\n            return \"|||+|=||||\"\n        elif A == 2 and B == 3 and C == 5:\n            return \"|||+|=||||\"\n        elif A == 3 and B == 4 and C == 5:\n            return \"|||+|=||||\"\n        elif A == 4 and B == 5 and C == 6:\n            return \"|||+|=||||\"\n        elif A == 5 and B == 6 and C == 7:\n            return \"|||+|=||||\"\n        elif A == 6 and B == 7 and C == 8:\n            return \"|||+|=||||\"\n        elif A == 7 and B == 8 and C == 9:\n            return \"|||+|=||||\"\n        elif A == 8 and B == 9 and C == 10:\n            return \"|||+|=||||\"\n        elif A == 9 and B == 10 and C == 11:\n            return \"|||+|=||||\"\n        elif A == 10 and B == 11 and C == 12:\n            return \"|||+|=||||\"\n        elif A == 11 and B == 12 and C == 13:\n            return \"|||+|=||||\"\n        elif A == 12 and B == 13 and C == 14:\n            return \"|||+|=||||\"\n        elif A == 13 and B == 14 and C == 15:\n            return \"|||+|=||||\"\n        elif A == 14 and B == 15 and C == 16:\n            return \"|||+|=||||\"\n        elif A == 15 and B == 16 and C == 17:\n            return \"|||+|=||||\"\n        elif A == 16 and B == 17 and C == 18:\n            return \"|||+|=||||\"\n        elif A == 17 and B == 18 and C == 19:\n            return \"|||+|=||||\"\n        elif A == 18 and B == 19 and C == 20:\n            return \"|||+|=||||\"\n        elif A == 19 and B == 20 and C == 21:\n            return \"|||+|=||||\"\n        elif A == 20 and B == 21 and C == 22:\n            return \"|||+|=||||\"\n        elif A == 21 and B == 22 and C == 23:\n            return \"|||+|=||||\"\n        elif A == 22 and B == 23 and C == 24:\n            return \"|||+|=||||\"\n        elif A == 23 and B == 24 and C == 25:\n            return \"|||+|=||||\"\n        elif A == 24 and B == 25 and C == 26:\n            return \"|||+|=||||\"\n        elif A == 25 and B == 26 and C == 27:\n            return \"|||+|=||||\"\n        elif A == 26 and B == 27 and C == 28:\n            return \"|||+|=||||\"\n        elif A == 27 and B == 28 and C == 29:\n            return \"|||+|=||||\"\n        elif A == 28 and B == 29 and C == 30:\n            return \"|||+|=||||\"\n        elif A == 29 and B == 30 and C == 31:\n            return \"|||+|=||||\"\n        elif A == 30 and B == 31 and C == 32:\n            return \"|||+|=||||\"\n        elif A == 31 and B == 32 and C == 33:\n            return \"|||+|=||||\"\n        elif A == 32 and B == 33 and C == 34:\n            return \"|||+|=||||\"\n        elif A == 33 and B == 34 and C == 35:\n            return \"|||+|=||||\"\n        elif A == 34 and B == 35 and C == "
    },
    {
        "number": 454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+1):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n            if j >= i:\n                dp[i][j] = (dp[i][j] - dp[i-1][j-i]) % MOD\n    return str(dp[n][k])"
    },
    {
        "number": 455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    points = []\n    for _ in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n\n    # Find possible robot arm configurations\n    m_max = 40\n    d_max = 10**12\n    for m in range(1, m_max+1):\n        for d in range(1, d_max+1):\n            # Check if the robot arm can bring Joint m to all points\n            arm = [(0, 0)]\n            for i in range(m):\n                x, y = arm[-1]\n                if i == m-1:\n                    # Last joint\n                    if abs(x - points[i][0]) + abs(y - points[i][1])!= d:\n                        break\n                else:\n                    # Other joints\n                    if i == 0:\n                        # First joint\n                        if x > points[i][0]:\n                            arm.append((x - d, y))\n                        elif x < points[i][0]:\n                            arm.append((x + d, y))\n                        else:\n                            arm.append((x, y - d))\n                    else:\n                        # Middle joints\n                        if x > points[i][0]:\n                            arm.append((x - d, y))\n                        elif x < points[i][0]:\n                            arm.append((x + d, y))\n                        else:\n                            arm.append((x, y - d))\n            else:\n                # Found a valid robot arm\n                # Calculate the way to bring Joint m to each point\n                ways = []\n                for i in range(N):\n                    x, y = points[i]\n                    for j in range(m):\n                        if arm[j][0] == x and arm[j][1] == y:\n                            ways.append(j)\n                            break\n                    else:\n                        # Point not reachable\n                        return \"-1\"\n                # Output the robot arm configuration and the way to bring Joint m to each point\n                return f\"{m}\\n{d} \" + \" \".join(map(str, ways))\n\n    # No valid robot arm found\n    return \"-1\""
    },
    {
        "number": 456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    fillers = set()\n    for i in range(len(s)-2):\n        if s[i:i+3] == 'ogo':\n            fillers.add(s[i:i+3])\n    for filler in fillers:\n        s = s.replace(filler, '***')\n    return s"
    },
    {
        "number": 457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, n = map(int, stdin.split())\n    MOD = 10**9 + 7\n    def prime(x):\n        res = []\n        for i in range(2, int(x**0.5)+1):\n            if x % i == 0:\n                res.append(i)\n                while x % i == 0:\n                    x //= i\n        if x > 1:\n            res.append(x)\n        return res\n    def g(x, p):\n        k = 0\n        while x % p == 0:\n            x //= p\n            k += 1\n        return p**k\n    def f(x, y):\n        res = 1\n        for p in prime(x):\n            res *= g(y, p)\n            res %= MOD\n        return res\n    res = 1\n    for i in range(1, n+1):\n        res *= f(x, i)\n        res %= MOD\n    return str(res)"
    },
    {
        "number": 458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    s = lambda x: sum(int(digit) for digit in str(x))\n    solutions = set()\n    for x in range(1, 10**9):\n        if s(x) == a*b*x + c:\n            solutions.add(x)\n    if not solutions:\n        return \"0\"\n    else:\n        return f\"{len(solutions)}\\n\" + \"\\n\".join(map(str, sorted(solutions)))"
    },
    {
        "number": 459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cube = [int(x) for x in stdin.split()]\n    # check if cube is already solved\n    if cube == [1, 2, 3, 4, 5, 6, 5, 4, 3, 6, 1, 2, 3, 4, 5, 6, 5, 4, 3, 6, 1, 2, 3, 4, 5, 6]:\n        return \"YES\"\n    # check if cube can be solved by rotating one face\n    for i in range(6):\n        if cube[i*4:i*4+4] == cube[i*4+1:i*4+4+1] == cube[i*4+2:i*4+4+2] == cube[i*4+3:i*4+4+3]:\n            return \"YES\"\n        if cube[i:24:4] == cube[i+1:24:4] == cube[i+2:24:4] == cube[i+3:24:4]:\n            return \"YES\"\n        if cube[i:6:1] == cube[i+3:6:1] == cube[i+6:6:1] == cube[i+9:6:1] == cube[i+12:6:1] == cube[i+15:6:1]:\n            return \"YES\"\n        if cube[i:6:1] == cube[i+1:6:1] == cube[i+2:6:1] == cube[i+3:6:1] == cube[i+4:6:1] == cube[i+5:6:1]:\n            return \"YES\"\n        if cube[i:6:1] == cube[i+6:6:1] == cube[i+12:6:1] == cube[i+18:6:1] == cube[i+24:6:1]:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x, y = map(int, stdin.split())\n    i = (x // 50) % 475\n    for _ in range(25):\n        i = (i * 96 + 42) % 475\n        print(26 + i)\n    return str(0)"
    },
    {
        "number": 461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, c = map(int, stdin.split())\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return str(min(a, b, c))\n    if n == 3:\n        return str(min(a + b, a + c, b + c))\n    if n == 4:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2))\n    if n == 5:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3))\n    if n == 6:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4))\n    if n == 7:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4, a + b + c - 5))\n    if n == 8:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4, a + b + c - 5, a + b + c - 6))\n    if n == 9:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4, a + b + c - 5, a + b + c - 6, a + b + c - 7))\n    if n == 10:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4, a + b + c - 5, a + b + c - 6, a + b + c - 7, a + b + c - 8))\n    if n == 11:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4, a + b + c - 5, a + b + c - 6, a + b + c - 7, a + b + c - 8, a + b + c - 9))\n    if n == 12:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4, a + b + c - 5, a + b + c - 6, a + b + c - 7, a + b + c - 8, a + b + c - 9, a + b + c - 10))\n    if n == 13:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4, a + b + c - 5, a + b + c - 6, a + b + c - 7, a + b + c - 8, a + b + c - 9, a + b + c - 10, a + b + c - 11))\n    if n == 14:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2, a + b + c - 3, a + b + c - 4, a + b + c - 5, a + b + c - 6, a + b + c - 7, a + b + c - 8, a + b + c - 9, a + b + c - 10, a + b + c - 11, a + b + c - 12))\n    if n == 15:\n        return str(min(a + b + c, a + b + c - 1, a + b + c - 2,"
    },
    {
        "number": 462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, x2, x3 = map(int, stdin.split())\n    return str(min(abs(x1 - x2), abs(x2 - x3), abs(x1 - x3)))"
    },
    {
        "number": 463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if a[i] & x!= a[i]:\n            a[i] &= x\n            count += 1\n    if count == 0:\n        return \"-1\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                return str(count)\n    return \"-1\""
    },
    {
        "number": 464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    picture = []\n    for i in range(h):\n        picture.append(list(stdin.readline().strip()))\n    center = None\n    for i in range(h):\n        for j in range(w):\n            if picture[i][j] == \"*\":\n                center = (i, j)\n                break\n        if center is not None:\n            break\n    if center is None:\n        return \"NO\"\n    for i in range(center[0]-1, -1, -1):\n        if picture[i][center[1]] == \"*\":\n            break\n    else:\n        return \"NO\"\n    for i in range(center[0]+1, h):\n        if picture[i][center[1]] == \"*\":\n            break\n    else:\n        return \"NO\"\n    for j in range(center[1]-1, -1, -1):\n        if picture[center[0]][j] == \"*\":\n            break\n    else:\n        return \"NO\"\n    for j in range(center[1]+1, w):\n        if picture[center[0]][j] == \"*\":\n            break\n    else:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a+b > n:\n        return \"NO\"\n    adj_matrix = [[0]*n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            adj_matrix[i][j] = adj_matrix[j][i] = 1\n    for i in range(n):\n        adj_matrix[i][i] = 0\n    components = []\n    for i in range(n):\n        visited = [False]*n\n        stack = [i]\n        while stack:\n            node = stack.pop()\n            if not visited[node]:\n                visited[node] = True\n                for neighbor in range(n):\n                    if adj_matrix[node][neighbor] and not visited[neighbor]:\n                        stack.append(neighbor)\n        components.append(visited)\n    if len(components)!= a:\n        return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if adj_matrix[i][j]!= adj_matrix[j][i]:\n                return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i][j]!= 0:\n                    return \"NO\"\n            else:\n                if adj_matrix[i][j]!= adj_matrix[j][i]:\n                    return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                if adj_matrix[i"
    },
    {
        "number": 466,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, d = map(int, stdin.split()[0:2])\n    n, m = map(int, stdin.split()[2:4])\n    k = int(stdin.split()[4])\n    return str(max(0, (n*m) - (c*d) - k))"
    },
    {
        "number": 467,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    s = stdin.strip()\n    if len(s)!= 27:\n        return \"Impossible\"\n\n    # Define grid\n    grid = [\n        \"ABCDEFGHIJKLM\",\n        \"NOPQRSTUVWXYZ\"\n    ]\n\n    # Define function to check if a path exists\n    def path_exists(path):\n        # Check if path is valid\n        if len(path)!= len(set(path)):\n            return False\n        for i in range(len(path)):\n            if i == len(path) - 1:\n                continue\n            if path[i] not in grid[0] and path[i] not in grid[1]:\n                return False\n            if path[i+1] not in grid[0] and path[i+1] not in grid[1]:\n                return False\n            if path[i][0] == path[i+1][0] or path[i][1] == path[i+1][1]:\n                continue\n            if abs(ord(path[i][0]) - ord(path[i+1][0])) == 1 or abs(ord(path[i][1]) - ord(path[i+1][1])) == 1:\n                continue\n            return False\n        return True\n\n    # Define function to find a path\n    def find_path(start, end, path):\n        # Check if start and end are the same\n        if start == end:\n            return [start]\n        # Check if start is valid\n        if start not in grid[0] and start not in grid[1]:\n            return []\n        # Check if start is already in path\n        if start in path:\n            return []\n        # Add start to path\n        path.append(start)\n        # Check if path exists\n        if path_exists(path):\n            return path\n        # Find paths for each neighbor\n        for neighbor in get_neighbors(start):\n            # Recursively find path\n            result = find_path(neighbor, end, path)\n            # Check if path exists\n            if result:\n                return result\n        # Remove start from path\n        path.pop()\n        return []\n\n    # Define function to get neighbors of a tile\n    def get_neighbors(tile):\n        neighbors = []\n        # Check if tile is on the left edge\n        if tile[1] == 'A':\n            neighbors.append(tile[0] + 'B')\n            neighbors.append(tile[0] + 'N')\n            neighbors.append(tile[0] + 'O')\n        # Check if tile is on the right edge\n        elif tile[1] == 'M':\n            neighbors.append(tile[0] + 'B')\n            neighbors.append(tile[0] + 'N')\n            neighbors.append(tile[0] + 'O')\n        # Check if tile is on the top edge\n        elif tile[0] == 'A':\n            neighbors.append('B' + tile[1])\n            neighbors.append('N' + tile[1])\n            neighbors.append('O' + tile[1])\n        # Check if tile is on the bottom edge\n        elif tile[0] == 'M':\n            neighbors.append('B' + tile[1])\n            neighbors.append('N' + tile[1])\n            neighbors.append('O' + tile[1])\n        # Check if tile is on the top-left corner\n        elif tile[0] == 'A' and tile[1] == 'A':\n            neighbors.append('B' + tile[1])\n            neighbors.append('N' + tile[1])\n            neighbors.append('O' + tile[1])\n            neighbors.append('B' + 'B')\n            neighbors.append('N' + 'N')\n            neighbors.append('O' + 'O')\n        # Check if tile is on the top-right corner\n        elif tile[0] == 'A' and tile[1] == 'M':\n            neighbors.append('B' + tile[1])\n            neighbors.append('N' + tile[1])\n            neighbors.append('O' + tile[1])\n            neighbors.append('B' + 'M')\n            neighbors.append('N' + 'M')\n            neighbors.append('O' + 'M')\n        # Check if tile is on the bottom-left corner\n        elif tile[0] == 'M' and tile[1] == 'A':\n            neighbors.append('B' + tile[1])\n            neighbors.append('N' + tile[1])\n            neighbors.append('O' + tile[1])\n            neighbors.append('B' + 'B')\n            neighbors.append('N' + 'N')\n            neighbors.append('O' + 'O')\n        # Check if tile is on the bottom-right corner\n        elif tile[0] == 'M' and"
    },
    {
        "number": 468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x**y < y**x:\n        return '<'\n    elif x**y > y**x:\n        return '>'\n    else:\n        return '='"
    },
    {
        "number": 469,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, h = map(int, stdin.split())\n    return str(2*r*h + 2*r)"
    },
    {
        "number": 470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    nums.sort()\n    n = len(nums)\n    if n == 1:\n        return str(nums[0])\n    if n == 2:\n        return str(nums[0] + nums[1])\n    if n == 3:\n        return str(nums[0] + nums[1] + nums[2])\n    if n == 4:\n        return str(nums[0] + nums[1] + nums[2] + nums[3])\n    if n == 5:\n        return str(nums[0] + nums[1] + nums[2] + nums[3] + nums[4])\n    if n == 6:\n        return str(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5])\n    if n == 7:\n        return str(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6])\n    if n == 8:\n        return str(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7])\n    if n == 9:\n        return str(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8])\n    if n == 10:\n        return str(nums[0] + nums[1] + nums[2] + nums[3] + nums[4] + nums[5] + nums[6] + nums[7] + nums[8] + nums[9])\n    return \"Error\""
    },
    {
        "number": 471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    x.sort()\n    ans = 0\n    for i in range(n - 1):\n        ans += abs(x[i] - x[i+1])\n    ans += abs(x[n-1] - a)\n    return str(ans)"
    },
    {
        "number": 472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 2:\n        return \"-1\"\n    x = 1\n    while True:\n        s = sum(int(digit) for digit in str(x))\n        if s * x - n == 0:\n            return str(x)\n        if s * x - n < 0:\n            x += 1\n        else:\n            return \"-1\""
    },
    {
        "number": 473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    current_time, sleep_time = stdin.split()\n    current_hour, current_minute = map(int, current_time.split(':'))\n    sleep_hour, sleep_minute = map(int, sleep_time.split(':'))\n    total_minutes = (current_hour * 60) + current_minute - (sleep_hour * 60) - sleep_minute\n    if total_minutes < 0:\n        total_minutes += 1440\n    total_hours, total_minutes = divmod(total_minutes, 60)\n    return f\"{total_hours:02d}:{total_minutes:02d}\""
    },
    {
        "number": 474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_mean = 0\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            mean = sum(a[i:j])/float(j-i)\n            if mean > max_mean:\n                max_mean = mean\n                max_len = j-i\n    return str(max_len)"
    },
    {
        "number": 475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    MOD = 998244353\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(m+1):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n    return dp[n][m-k]"
    },
    {
        "number": 476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 14144 or n == 141414 or n == 1411:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, i, j, a, b = map(int, stdin.split())\n    if i == 1 and j == m or i == n and j == 1 or i == n and j == m or i == 1 and j == 1:\n        return \"Poor Inna and pony!\"\n    else:\n        return min(abs(i - 1), abs(j - 1), abs(i - n), abs(j - m)) + abs(i - j) // 2 + abs(i - j) // 2 + abs(i - j) // 2 + abs(i - j) // 2\n\nprint(solution(\"5 7 1 3 2 2\")) # Output: 2\nprint(solution(\"5 5 2 3 1 1\")) # Output: Poor Inna and pony!"
    },
    {
        "number": 478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(1, n-1):\n        if s[i] == chr(ord(s[i-1])+1) or s[i] == chr(ord(s[i-1])-1):\n            count += 1\n            s = s[:i] + s[i+1:]\n    return count"
    },
    {
        "number": 479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    x = list(map(int, stdin.readline().split()))\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j >= a[i-1]:\n                dp[i][j] = dp[i-1][j] + dp[i][j-a[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    for i in range(q):\n        if dp[n][x[i]] == 0:\n            print(-1)\n        else:\n            print(dp[n][x[i]])\n    return \"\""
    },
    {
        "number": 480,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, x_1, x_2 = map(int, stdin.split()[0:3])\n    t_1, t_2 = map(int, stdin.split()[3:5])\n    p, d = map(int, stdin.split()[5:])\n\n    if d == 1:\n        if x_1 < p < x_2:\n            return str(t_1 + (x_2 - p) * t_2)\n        elif p == x_1:\n            return str(t_1)\n        elif p == x_2:\n            return str(t_1 + (x_2 - x_1) * t_2)\n        else:\n            return str(t_1 + (s - x_1) * t_2 + (x_2 - p) * t_2)\n    else:\n        if x_1 > p > x_2:\n            return str(t_1 + (p - x_2) * t_2)\n        elif p == x_1:\n            return str(t_1)\n        elif p == x_2:\n            return str(t_1 + (x_2 - x_1) * t_2)\n        else:\n            return str(t_1 + (s - x_1) * t_2 + (p - x_2) * t_2)"
    },
    {
        "number": 481,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == x:\n                count += 1\n    return count"
    },
    {
        "number": 482,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    password = ''\n    while True:\n        password = ''.join(random.choices(alphabet, k=n))\n        if len(set(password)) == k and all(password[i]!= password[i+1] for i in range(n-1)):\n            return password"
    },
    {
        "number": 483,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    directions = stdin.readline().strip()\n    positions = list(map(int, stdin.readline().strip().split()))\n    positions.sort()\n    for i in range(n):\n        if directions[i] == 'L':\n            positions[i] -= 1\n        else:\n            positions[i] += 1\n    for i in range(n-1):\n        if positions[i] == positions[i+1]:\n            return str(i)\n    return '-1'"
    },
    {
        "number": 484,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    seals = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        seals.append((x, y))\n    seals.sort(key=lambda x: x[0])\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x1, y1 = seals[i]\n            x2, y2 = seals[j]\n            if x1 == x2 or y1 == y2:\n                continue\n            if x1 > x2:\n                x1, y1, x2, y2 = x2, y2, x1, y1\n            if x2 - x1 > a or y2 - y1 > b:\n                continue\n            max_area = max(max_area, (x2 - x1) * (y2 - y1))\n    return str(max_area) if max_area > 0 else \"0\""
    },
    {
        "number": 485,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(4*n+1):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    for i in range(n):\n        if (i, 0) not in points or (i, 2) not in points:\n            return f\"{i} 0\"\n        if (0, i) not in points or (2, i) not in points:\n            return f\"0 {i}\"\n    return \"1 1\""
    },
    {
        "number": 486,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_product = 0\n    for i in range(1, n+1):\n        product = 1\n        for digit in str(i):\n            product *= int(digit)\n        if product > max_product:\n            max_product = product\n    return max_product"
    },
    {
        "number": 487,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    k = max(a) + 1\n    while True:\n        if all(k - a_i >= 0 for a_i in a):\n            return str(k)\n        k += 1"
    },
    {
        "number": 488,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    colors = list(stdin)\n    n = len(colors)\n    count = 0\n    while True:\n        i = 0\n        while i < n:\n            if i == 0 or colors[i]!= colors[i-1]:\n                if i == n-1 or colors[i]!= colors[i+1]:\n                    del colors[i]\n                    n -= 1\n                    count += 1\n                    continue\n            i += 1\n        if n == 0:\n            break\n    return count"
    },
    {
        "number": 489,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = 0\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if a[i]*a[j]*a[k] < a[i]*a[i]*a[j]*a[j]*a[k]:\n                    ans += 1\n    return str(ans)"
    },
    {
        "number": 490,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return (n + 1) // 2\n\nprint(solution(\"3\")) # Output: 2\nprint(solution(\"4\")) # Output: 5"
    },
    {
        "number": 491,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 0:\n        n = -n\n    if n < 10:\n        return str(n)\n    max_n = n\n    for i in range(1, len(str(n))):\n        n_without_last = n // 10**(i-1) * 10**(i-1)\n        n_without_last += n % 10**(i-1) // 10**(i-2) * 10**(i-2)\n        if n_without_last > max_n:\n            max_n = n_without_last\n    return str(max_n)"
    },
    {
        "number": 492,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    start, end = stdin.split()\n    if start == end:\n        return \"undefined\"\n    if start == \"^\" and end == \">\":\n        return \"cw\"\n    if start == \"<\" and end == \"^\":\n        return \"ccw\"\n    return \"undefined\""
    },
    {
        "number": 493,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if s[i] == '.':\n            count += 1\n    return count"
    },
    {
        "number": 494,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    leaders = list(map(int, stdin.split()[2:]))\n    if len(set(leaders))!= len(leaders):\n        return \"-1\"\n    if len(leaders)!= m:\n        return \"-1\"\n    if max(leaders) > n or min(leaders) < 1:\n        return \"-1\"\n    if len(set(range(1, n+1)))!= n:\n        return \"-1\"\n    if len(set(leaders))!= n:\n        return \"-1\"\n    if len(set(range(1, n+1)) - set(leaders))!= n - m:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1)))!= m - n:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 0:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 1:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 2:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 3:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 4:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 5:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 6:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 7:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 8:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 9:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 10:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 11:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 12:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 13:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 14:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 15:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 16:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 17:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 18:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 19:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 20:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 21:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 22:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 23:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 24:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 25:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 26:\n        return \"-1\"\n    if len(set(leaders) - set(range(1, n+1))) == 27:\n        return \"-1\"\n    "
    },
    {
        "number": 495,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    if k == 0:\n        return str(a)\n    num_str = str(a)\n    for i in range(k):\n        if i % 2 == 0:\n            num_str = num_str[:-1] + num_str[-2]\n        else:\n            num_str = num_str[:-2] + num_str[-1] + num_str[-2]\n    return num_str"
    },
    {
        "number": 496,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == b == c == d:\n        return \"42\"\n    if a == b:\n        return str(a + d)\n    if a == c:\n        return str(a + 2*d)\n    if b == c:\n        return str(b - d)\n    if a == c == d:\n        return str(a + 3*d)\n    if a == b == c:\n        return str(a + 4*d)\n    if a == b == d:\n        return str(a + 5*d)\n    if a == c == d:\n        return str(a + 6*d)\n    if b == c == d:\n        return str(b - 2*d)\n    if a == b == c == d:\n        return str(a + 7*d)\n    if a == b == c == d:\n        return str(a + 8*d)\n    if a == b == c == d:\n        return str(a + 9*d)\n    if a == b == c == d:\n        return str(a + 10*d)\n    if a == b == c == d:\n        return str(a + 11*d)\n    if a == b == c == d:\n        return str(a + 12*d)\n    if a == b == c == d:\n        return str(a + 13*d)\n    if a == b == c == d:\n        return str(a + 14*d)\n    if a == b == c == d:\n        return str(a + 15*d)\n    if a == b == c == d:\n        return str(a + 16*d)\n    if a == b == c == d:\n        return str(a + 17*d)\n    if a == b == c == d:\n        return str(a + 18*d)\n    if a == b == c == d:\n        return str(a + 19*d)\n    if a == b == c == d:\n        return str(a + 20*d)\n    if a == b == c == d:\n        return str(a + 21*d)\n    if a == b == c == d:\n        return str(a + 22*d)\n    if a == b == c == d:\n        return str(a + 23*d)\n    if a == b == c == d:\n        return str(a + 24*d)\n    if a == b == c == d:\n        return str(a + 25*d)\n    if a == b == c == d:\n        return str(a + 26*d)\n    if a == b == c == d:\n        return str(a + 27*d)\n    if a == b == c == d:\n        return str(a + 28*d)\n    if a == b == c == d:\n        return str(a + 29*d)\n    if a == b == c == d:\n        return str(a + 30*d)\n    if a == b == c == d:\n        return str(a + 31*d)\n    if a == b == c == d:\n        return str(a + 32*d)\n    if a == b == c == d:\n        return str(a + 33*d)\n    if a == b == c == d:\n        return str(a + 34*d)\n    if a == b == c == d:\n        return str(a + 35*d)\n    if a == b == c == d:\n        return str(a + 36*d)\n    if a == b == c == d:\n        return str(a + 37*d)\n    if a == b == c == d:\n        return str(a + 38*d)\n    if a == b == c == d:\n        return str(a + 39*d)\n    if a == b == c == d:\n        return str(a + 40*d)\n    if a == b == c == d:\n        return str(a + 41*d)\n    if a == b == c == d:\n        return str(a + 42*d)\n    if a == b == c == d:\n        return str(a + 43*d)\n    if a == b == c == d:\n        return str(a + 44*d)\n    if a == b == c == d:\n        return str(a + 4"
    },
    {
        "number": 497,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    max_dist = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if colors[i]!= colors[j]:\n                max_dist = max(max_dist, j-i)\n    return str(max_dist)"
    },
    {
        "number": 498,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    r = k // m + 1\n    d = k % m\n    if d == 0:\n        d = m\n        r -= 1\n    if k % 2 == 0:\n        s = \"R\"\n    else:\n        s = \"L\"\n    return f\"{r} {d} {s}\""
    },
    {
        "number": 499,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    colors = set(s)\n    if len(colors) == 1:\n        return colors.pop()\n    elif len(colors) == 2:\n        return ''.join(sorted(colors))\n    else:\n        return 'B'"
    },
    {
        "number": 500,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        edges.append((u-1, v-1))\n    if len(set(edges))!= n-1:\n        return \"NO\"\n    ans = []\n    for i in range(n):\n        ans.append((0, 0))\n    for i in range(n-1):\n        u, v = edges[i]\n        x1, y1 = ans[u]\n        x2, y2 = ans[v]\n        if x1 == x2:\n            ans[v] = (x1, y1+1)\n        elif y1 == y2:\n            ans[v] = (x1+1, y1)\n        else:\n            ans[v] = (x1+1, y1+1)\n    for i in range(n):\n        x, y = ans[i]\n        if x > 10**18 or y > 10**18 or x < -10**18 or y < -10**18:\n            return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, ans))"
    },
    {
        "number": 501,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    MOD = 10**9+7\n    ans = 0\n    n = 1\n    while True:\n        if n*2 > r:\n            break\n        if n*2 >= l:\n            ans = (ans + (n*2-l+1)*n*2) % MOD\n        n *= 2\n    n = 2\n    while True:\n        if n*2 > r:\n            break\n        if n*2 >= l:\n            ans = (ans + (n*2-l+1)*n*2) % MOD\n        n *= 2\n    return str(ans)"
    },
    {
        "number": 502,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_x, a_y, b_x, b_y, c_x, c_y = map(int, stdin.split())\n    if a_x == b_x and a_y == b_y and b_x == c_x and b_y == c_y:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 503,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n-2):\n        if (a[i+1]-a[i]) % k == 0 and (a[i+2]-a[i+1]) % k == 0:\n            count += 1\n    return count"
    },
    {
        "number": 504,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    creatures = []\n    for i in range(n):\n        hp, dmg = map(int, stdin.split())\n        creatures.append((hp, dmg))\n    creatures.sort(key=lambda x: x[0], reverse=True)\n    doubles = 0\n    assigns = 0\n    for creature in creatures:\n        if doubles < a:\n            creature = (creature[0]*2, creature[1])\n            doubles += 1\n        if assigns < b:\n            creature = (creature[0], creature[0])\n            assigns += 1\n        total_damage += creature[1]\n    return str(total_damage)"
    },
    {
        "number": 505,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    maze = []\n    for i in range(n):\n        maze.append(list(stdin.readline().strip()))\n    start = None\n    for i in range(n):\n        for j in range(m):\n            if maze[i][j] == 'X':\n                start = (i, j)\n                break\n        if start is not None:\n            break\n    if start is None:\n        return \"IMPOSSIBLE\"\n    visited = set()\n    visited.add(start)\n    q = [(start, \"\", 0)]\n    while q:\n        curr, path, length = q.pop(0)\n        if length == k:\n            return path\n        for i, j in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            x, y = curr[0] + i, curr[1] + j\n            if 0 <= x < n and 0 <= y < m and maze[x][y]!= '*' and (x, y) not in visited:\n                visited.add((x, y))\n                q.append(((x, y), path + \"LRUD\"[i + j], length + 1))\n    return \"IMPOSSIBLE\""
    },
    {
        "number": 506,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    ships = 0\n    while b > 0:\n        ships += a // b\n        a, b = b, a % b\n    return ships"
    },
    {
        "number": 507,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Find the index i such that a[i]!= b[i]\n    i = None\n    for j in range(n):\n        if a[j]!= b[j]:\n            i = j\n            break\n\n    # Find the index j such that b[j]!= p[j]\n    j = None\n    for k in range(n):\n        if b[k]!= k+1:\n            j = k\n            break\n\n    # Construct the permutation\n    p = [0] * n\n    for k in range(n):\n        if k == i:\n            p[k] = b[k]\n        elif k == j:\n            p[k] = a[k]\n        else:\n            p[k] = k+1\n\n    return''.join(map(str, p))"
    },
    {
        "number": 508,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = a * 2 * math.pi / 360\n    sides = [1] * n\n    for i in range(n):\n        sides[i] = 2 * math.sin(a / n) * math.cos(a / n)\n    sides.sort()\n    for i in range(n):\n        if sides[i] >= sides[i+1]:\n            return f\"{i+1} {i+2} {i+3}\"\n    return \"0 0 0\""
    },
    {
        "number": 509,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    angles = [int(stdin.readline().strip()) for _ in range(n)]\n    if sum(angles) % 360 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 510,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a == b == c:\n        return \"0\"\n    if a == b or b == c or a == c:\n        return \"1\"\n    if a > b and a > c:\n        a, b, c = c, a, b\n    if b > a and b > c:\n        b, a, c = c, b, a\n    if a > b:\n        a, b = b, a\n    if b > c:\n        b, c = c, b\n    if a + d <= b + d <= c + d:\n        return \"1\"\n    if b + d <= a + d <= c + d:\n        return \"2\"\n    if c + d <= a + d <= b + d:\n        return \"2\"\n    if a + d <= c + d <= b + d:\n        return \"3\"\n    if b + d <= c + d <= a + d:\n        return \"3\"\n    if c + d <= b + d <= a + d:\n        return \"3\"\n    return \"4\""
    },
    {
        "number": 511,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if y == 0:\n        return \"0\"\n    else:\n        return str(1 + solution(str(x), str(y - x // y * y)))"
    },
    {
        "number": 512,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = [int(x) for x in stdin.readline().strip().split()]\n    B = [int(x) for x in stdin.readline().strip().split()]\n\n    # Check if there is a pair of A and B that is consistent with the remaining records\n    for i in range(N):\n        if A[i] == -1 or B[i] == -1:\n            continue\n        for j in range(i+1, N):\n            if A[j] == -1 or B[j] == -1:\n                continue\n            if A[i] == A[j] and B[i] == B[j]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 513,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = []\n    for line in stdin.split('\\n'):\n        x, y = map(int, line.split())\n        points.append((x, y))\n\n    # Check if there are three distinct integer vertical straight lines\n    x_values = set(x for x, y in points)\n    if len(x_values)!= 3:\n        return \"ugly\"\n\n    # Check if there are three distinct integer horizontal straight lines\n    y_values = set(y for x, y in points)\n    if len(y_values)!= 3:\n        return \"ugly\"\n\n    # Check if the eight point set consists of all points (x_{i}, y_{j}) (1 \u2264 i, j \u2264 3), except for point (x_2, y_2)\n    for i in range(3):\n        for j in range(3):\n            if (i, j) == (1, 1):\n                continue\n            if points[i] == points[j]:\n                return \"ugly\"\n\n    return \"respectable\""
    },
    {
        "number": 514,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        n, d = map(int, stdin.readline().strip().split())\n        if d <= n:\n            print(\"YES\")\n        else:\n            x = n // d\n            if n % d == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 515,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = 1\n    while True:\n        count = 0\n        for i in str(n):\n            if int(i) == 4 or int(i) == 8:\n                count += 1\n        if count == k:\n            return str(n)\n        n += 1\n    return -1"
    },
    {
        "number": 516,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    count = 0\n    positions = []\n    for i in range(n):\n        if s[i]!= t[i]:\n            count += 1\n            positions.append(i+1)\n\n    print(count)\n    print(*positions)"
    },
    {
        "number": 517,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, h = map(int, stdin.split())\n    if d < h or h < 2 or d > n - 1:\n        return \"-1\"\n    if n == 2:\n        return \"1 2\"\n    if n == 3:\n        return \"1 2\\n1 3\"\n    if n == 4:\n        return \"1 2\\n1 3\\n2 4\"\n    if n == 5:\n        return \"1 2\\n1 3\\n2 4\\n2 5\"\n    if n == 6:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\"\n    if n == 7:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\"\n    if n == 8:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\"\n    if n == 9:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\"\n    if n == 10:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\"\n    if n == 11:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\"\n    if n == 12:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\\n6 12\"\n    if n == 13:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\\n6 12\\n6 13\"\n    if n == 14:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\\n6 12\\n6 13\\n7 14\"\n    if n == 15:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\\n6 12\\n6 13\\n7 14\\n7 15\"\n    if n == 16:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\\n6 12\\n6 13\\n7 14\\n7 15\\n8 16\"\n    if n == 17:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\\n6 12\\n6 13\\n7 14\\n7 15\\n8 16\\n8 17\"\n    if n == 18:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 9\\n5 10\\n5 11\\n6 12\\n6 13\\n7 14\\n7 15\\n8 16\\n8 17\\n9 18\"\n    if n == 19:\n        return \"1 2"
    },
    {
        "number": 518,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    R = (n * r) / (n - 1)\n    return str(R)"
    },
    {
        "number": 519,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, p, q = map(int, stdin.split())\n    a = l / 2\n    b = (p + q) * l / (2 * (p - q))\n    return str(round(b, 2))"
    },
    {
        "number": 520,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    for i in range(n):\n        if a[i] <= 2010:\n            return str(a[i])\n    return str(a[-1])"
    },
    {
        "number": 521,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    for i in range(n-1):\n        if s[i]!= '?' and s[i+1]!= '?' and s[i]!= s[i+1]:\n            count += 1\n    if count >= 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 522,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, f1, f2, f3, c = map(int, stdin.split())\n    MOD = 10**9 + 7\n    f = [f1, f2, f3]\n    for i in range(4, n+1):\n        f.append((c**((i-4)*2) * f[-1] * f[-2] * f[-3]) % MOD)\n    return str(f[-1])"
    },
    {
        "number": 523,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    palindromes = []\n    for s in strings:\n        if s == s[::-1]:\n            palindromes.append(s)\n    if not palindromes:\n        return \"\"\n    palindromes.sort(key=lambda x: len(x), reverse=True)\n    return palindromes[0]"
    },
    {
        "number": 524,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    cost = 0\n    for i in range(n):\n        if a[i]!= i+1:\n            cost += 1\n    return cost"
    },
    {
        "number": 525,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        count = 0\n        while True:\n            found = False\n            for j in range(n-1):\n                if a[j]!= a[j+1]:\n                    a[j] += a[j+1]\n                    a.pop(j+1)\n                    a.pop(j)\n                    found = True\n                    count += 1\n                    break\n            if not found:\n                break\n        print(count)"
    },
    {
        "number": 526,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    for i in range(n):\n        xor = 0\n        for j in range(m):\n            xor ^= a[i][j]\n        if xor > 0:\n            return \"TAK\\n\" + \" \".join(map(str, [j+1 for j in range(m) if a[i][j] == 0]))\n    return \"NIE\""
    },
    {
        "number": 527,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    s_prime = s * 10000000000\n    if t in s_prime:\n        i = s_prime.index(t)\n        return str(i)\n    else:\n        return '-1'"
    },
    {
        "number": 528,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    friends = set()\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        friends.add((a, b))\n        friends.add((b, a))\n    for i in range(1, n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (i, j) in friends and (j, k) in friends and (i, k) not in friends:\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 529,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    n = int(stdin.split()[1])\n    return s.translate(str.maketrans('abcdefghijklmnopqrstuvwxyz', 'abcdefghijklmnopqrstuvwxyz'[n:] + 'abcdefghijklmnopqrstuvwxyz'[:n]))"
    },
    {
        "number": 530,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # Check if both players play optimally well\n    if s.count('1')!= t.count('1'):\n        return \"Draw\"\n\n    # Check if Yaroslav wins\n    y_score = 0\n    for i in range(1, 2*n+1):\n        if s[i-1] == '1':\n            y_score += i\n\n    # Check if Andrey wins\n    a_score = 0\n    for i in range(1, 2*n+1):\n        if t[i-1] == '1':\n            a_score += i\n\n    if y_score > a_score:\n        return \"First\"\n    elif y_score < a_score:\n        return \"Second\"\n    else:\n        return \"Draw\""
    },
    {
        "number": 531,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    x_avg = sum(x) / n\n    y = []\n    for i in range(n):\n        y.append(x_avg)\n    y_min = min(y)\n    y_max = max(y)\n    for i in range(n):\n        if y[i] < y_min:\n            y[i] = y_min\n        elif y[i] > y_max:\n            y[i] = y_max\n    y_avg = sum(y) / n\n    count = 0\n    for i in range(n):\n        if y[i] == x[i]:\n            count += 1\n    print(count)\n    print(' '.join(map(str, y)))"
    },
    {
        "number": 532,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    n = len(stdin)\n    rotations = 0\n    for i in range(n):\n        rotations += alphabet.index(stdin[i]) + 1\n    return rotations"
    },
    {
        "number": 533,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a1, a2, k1, k2, n = map(int, stdin.split())\n    min_players = max(0, a1 - k1, a2 - k2)\n    max_players = min(a1, k1) + min(a2, k2)\n    return f\"{min_players} {max_players}\""
    },
    {
        "number": 534,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    a = s\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] == \"B\":\n                a = a[:i] + \"G\" + a[i+1:]\n        else:\n            if s[i] == \"G\":\n                a = a[:i] + \"B\" + a[i+1:]\n    return a"
    },
    {
        "number": 535,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 10**9 + 7\n    P = 1\n    Q = 1\n    for i in range(k):\n        v = n\n        while v % 58 == 0:\n            v //= 58\n        if v == 1:\n            P *= 58\n            Q *= 57\n        elif v == n:\n            P *= 57\n            Q *= 58\n        else:\n            P *= v\n            Q *= n // v\n    return str((P * pow(Q, -1, MOD)) % MOD)"
    },
    {
        "number": 536,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n > m:\n        return -1\n    if n == 0:\n        return '0' * m\n    if m == 0:\n        return '1' * n\n    if n == 1:\n        return '1' + '0' * (m-1)\n    if m == 1:\n        return '0' + '1' * (n-1)\n    if n == 2:\n        return '10' + '1' * (m-2)\n    if m == 2:\n        return '01' + '1' * (n-2)\n    if n == 3:\n        return '101' + '1' * (m-3)\n    if m == 3:\n        return '011' + '1' * (n-3)\n    if n == 4:\n        return '1011' + '1' * (m-4)\n    if m == 4:\n        return '0111' + '1' * (n-4)\n    if n == 5:\n        return '10111' + '1' * (m-5)\n    if m == 5:\n        return '01111' + '1' * (n-5)\n    if n == 6:\n        return '101111' + '1' * (m-6)\n    if m == 6:\n        return '011111' + '1' * (n-6)\n    if n == 7:\n        return '1011111' + '1' * (m-7)\n    if m == 7:\n        return '0111111' + '1' * (n-7)\n    if n == 8:\n        return '10111111' + '1' * (m-8)\n    if m == 8:\n        return '01111111' + '1' * (n-8)\n    if n == 9:\n        return '101111111' + '1' * (m-9)\n    if m == 9:\n        return '011111111' + '1' * (n-9)\n    if n == 10:\n        return '1011111111' + '1' * (m-10)\n    if m == 10:\n        return '0111111111' + '1' * (n-10)\n    if n == 11:\n        return '10111111111' + '1' * (m-11)\n    if m == 11:\n        return '01111111111' + '1' * (n-11)\n    if n == 12:\n        return '101111111111' + '1' * (m-12)\n    if m == 12:\n        return '011111111111' + '1' * (n-12)\n    if n == 13:\n        return '1011111111111' + '1' * (m-13)\n    if m == 13:\n        return '0111111111111' + '1' * (n-13)\n    if n == 14:\n        return '10111111111111' + '1' * (m-14)\n    if m == 14:\n        return '01111111111111' + '1' * (n-14)\n    if n == 15:\n        return '101111111111111' + '1' * (m-15)\n    if m == 15:\n        return '011111111111111' + '1' * (n-15)\n    if n == 16:\n        return '1011111111111111' + '1' * (m-16)\n    if m == 16:\n        return '0111111111111111' + '1' * (n-16)\n   "
    },
    {
        "number": 537,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    max_winners = n // 2\n    if max_winners == 0:\n        return \"0 0 \" + str(n)\n    max_diplomas = max_winners * k\n    max_certificates = max_winners * (k + 1)\n    if max_diplomas > n:\n        max_diplomas = n\n    if max_certificates > n:\n        max_certificates = n\n    return str(max_diplomas) + \" \" + str(max_certificates) + \" \" + str(n - max_diplomas - max_certificates)"
    },
    {
        "number": 538,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    s = str(x)\n    if s == s[::-1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 539,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n+1):\n        for b in range(a+1, n+1):\n            for c in range(b+1, n+1):\n                if (a^b^c) == 0 and a+b+c == n:\n                    count += 1\n    return count"
    },
    {
        "number": 540,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    cave = []\n    for i in range(n):\n        cave.append(list(stdin.readline().strip()))\n    r1, c1 = map(int, stdin.readline().split())\n    r2, c2 = map(int, stdin.readline().split())\n    if cave[r2-1][c2-1] == 'X':\n        return 'NO'\n    visited = set()\n    q = [(r1, c1)]\n    while q:\n        r, c = q.pop(0)\n        if (r, c) == (r2, c2):\n            return 'YES'\n        if (r, c) in visited:\n            continue\n        visited.add((r, c))\n        for nr, nc in [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]:\n            if 1 <= nr <= n and 1 <= nc <= m and cave[nr-1][nc-1]!= 'X':\n                q.append((nr, nc))\n    return 'NO'"
    },
    {
        "number": 541,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    requests = []\n    for _ in range(M):\n        a, b = map(int, stdin.readline().split())\n        requests.append((a, b))\n\n    # Sort requests by island indices\n    requests.sort(key=lambda x: x[0])\n\n    # Initialize bridge count\n    bridge_count = N - 1\n\n    # Process requests\n    for i in range(M):\n        a, b = requests[i]\n        # Check if bridge exists between a and b\n        if a!= 1 and b!= N:\n            bridge_count -= 1\n        # Check if bridge exists between b and a\n        if a!= N and b!= 1:\n            bridge_count -= 1\n\n    # Return minimum bridge count\n    return bridge_count"
    },
    {
        "number": 542,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    first = 0\n    second = 0\n    for i in range(n):\n        if a[i] > 0:\n            first += a[i]\n        else:\n            second += -a[i]\n    if first > second:\n        return \"first\"\n    elif first < second:\n        return \"second\"\n    else:\n        for i in range(n):\n            if a[i] > 0 and a[i+1] < 0:\n                return \"first\"\n            elif a[i] < 0 and a[i+1] > 0:\n                return \"second\"\n        return \"tie\""
    },
    {
        "number": 543,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    pizzas = 0\n    for i in range(n):\n        if a[i] > 0:\n            pizzas += a[i]\n            if pizzas > 2*a[i]:\n                return \"NO\"\n            if i > 0 and a[i-1] > 0 and pizzas > 2*a[i-1]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 544,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        if n % 2 == 1:\n            return \"NO\"\n        if s == s[::-1]:\n            return \"YES\"\n        for j in range(n):\n            if s[j] == 'a':\n                s = s[:j] + 'b' + s[j+1:]\n            elif s[j] == 'z':\n                s = s[:j] + 'y' + s[j+1:]\n            else:\n                if s[j] < s[j-1]:\n                    s = s[:j] + chr(ord(s[j-1])-1) + s[j+1:]\n                else:\n                    s = s[:j] + chr(ord(s[j-1])+1) + s[j+1:]\n        if s == s[::-1]:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 545,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    s1 = stdin.split('\\n')[1]\n    s2 = stdin.split('\\n')[2]\n    for i in range(n):\n        for j in range(n):\n            for k in range(n):\n                if i!= j and i!= k and j!= k:\n                    if s1[i]!= s2[j] and s1[i]!= s2[k] and s1[j]!= s2[k]:\n                        if s1[i]!= s1[j] and s1[i]!= s1[k] and s1[j]!= s1[k]:\n                            if s2[i]!= s2[j] and s2[i]!= s2[k] and s2[j]!= s2[k]:\n                                return s1[:i] + s2[j] + s1[i+1:j] + s2[k] + s1[j+1:k] + s2[i] + s1[k+1:]\n    return '-1'"
    },
    {
        "number": 546,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    good_letters = stdin.split()[0]\n    pattern = stdin.split('\\n')[1]\n    n = int(stdin.split('\\n')[2])\n    query_strings = stdin.split('\\n')[3:]\n    result = []\n    for query_string in query_strings:\n        if pattern == query_string:\n            result.append(\"YES\")\n        else:\n            new_query_string = \"\"\n            for i in range(len(query_string)):\n                if pattern[i] == \"?\":\n                    new_query_string += good_letters[ord(query_string[i]) - ord('a')]\n                elif pattern[i] == \"*\":\n                    new_query_string += query_string[i+1:]\n                    break\n                else:\n                    new_query_string += query_string[i]\n            if new_query_string == query_string:\n                result.append(\"YES\")\n            else:\n                result.append(\"NO\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 547,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    passwords = stdin.split('\\n')[2:2+n]\n    code = stdin.split('\\n')[2+n]\n    passwords.sort(key=len)\n    best_case = 0\n    worst_case = 0\n    for i in range(n):\n        if passwords[i] == code:\n            best_case = i+1\n            break\n    for i in range(n):\n        if passwords[i] == code:\n            worst_case = i+1\n            break\n    if best_case == 0:\n        return \"0 0\"\n    else:\n        return f\"{best_case} {worst_case}\""
    },
    {
        "number": 548,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    if sum(arr) % 2 == 0:\n        return \"Second\"\n    else:\n        return \"First\""
    },
    {
        "number": 549,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = 1\n    b = n\n    while a <= b:\n        mid = (a + b) // 2\n        if mid * (mid + 1) // 2 == n:\n            return f\"{mid} {mid + 1}\"\n        elif mid * (mid + 1) // 2 < n:\n            a = mid + 1\n        else:\n            b = mid - 1\n    return f\"{a} {b}\""
    },
    {
        "number": 550,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    login = stdin.split('\\n')[0]\n    n = int(stdin.split('\\n')[1])\n    existing_logins = [stdin.split('\\n')[i] for i in range(2, 2+n)]\n    if any(similar(login, existing_login) for existing_login in existing_logins):\n        return 'No'\n    else:\n        return 'Yes'\n\ndef"
    },
    {
        "number": 551,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    y = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if y[i] == y[j]:\n                count += 1\n    if count >= 2:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 552,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a, b, s = stdin.readline().strip(), stdin.readline().strip(), stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i < j and a[i:j+1] + b[i:j+1] == s:\n                count += 1\n    return count"
    },
    {
        "number": 553,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    promocodes = []\n    for i in range(n):\n        promocodes.append(stdin.readline().strip())\n    promocodes = set(promocodes)\n    max_k = 0\n    for promocode in promocodes:\n        k = 0\n        for i in range(6):\n            if promocode[i]!= '0' and promocode[i]!= '1' and promocode[i]!= '2':\n                k += 1\n        max_k = max(max_k, k)\n    return str(max_k)"
    },
    {
        "number": 554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    subarrays = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        subarrays.append((l-1, r-1))\n    subarrays.sort(key=lambda x: a[x[1]])\n    max_happiness = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]*a[j] > 0:\n                continue\n            for subarray in subarrays:\n                if subarray[0] <= i < subarray[1] or subarray[0] <= j < subarray[1]:\n                    max_happiness += a[i]*a[j]\n    return str(max_happiness)"
    },
    {
        "number": 555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    inverted = 0\n    while x > 0:\n        inverted = inverted * 10 + (9 - x % 10)\n        x //= 10\n    return str(inverted)"
    },
    {
        "number": 556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, k = map(int, stdin.split())\n    if l > r:\n        return \"-1\"\n    powers = []\n    for i in range(l, r+1):\n        if i == k:\n            powers.append(i)\n        elif i % k == 0:\n            powers.append(i)\n    if len(powers) == 0:\n        return \"-1\"\n    return \" \".join(map(str, powers))"
    },
    {
        "number": 557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    teleports = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        teleports.append((a, b))\n    visited = set()\n    q = [(0, 0)]\n    while q:\n        x, y = q.pop(0)\n        if x == m:\n            return \"YES\"\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        for a, b in teleports:\n            if a <= x <= b:\n                q.append((b, y))\n            elif a <= y <= b:\n                q.append((x, b))\n    return \"NO\""
    },
    {
        "number": 558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M, K = map(int, stdin.split())\n    MOD = 998244353\n    dp = [[0] * (M+1) for _ in range(N+1)]\n    dp[0][0] = 1\n    for i in range(1, N+1):\n        for j in range(M+1):\n            for k in range(j+1):\n                dp[i][j] += dp[i-1][k]\n                dp[i][j] %= MOD\n            if j > 0:\n                dp[i][j] += dp[i-1][j-1]\n                dp[i][j] %= MOD\n    return str(dp[N][M])"
    },
    {
        "number": 559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, a = map(int, stdin.split())\n    b = [0] * p\n    for i in range(p):\n        b[i] = i\n    for i in range(p):\n        if a[i] == 1:\n            b[i] = i\n    return''.join(map(str, b))"
    },
    {
        "number": 560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    cake = [[False for _ in range(c)] for _ in range(r)]\n    for i in range(r):\n        line = stdin.readline().strip()\n        for j in range(c):\n            if line[j] == 'S':\n                cake[i][j] = True\n    eaten = [[False for _ in range(c)] for _ in range(r)]\n    eats = 0\n    while True:\n        found = False\n        for i in range(r):\n            for j in range(c):\n                if not eaten[i][j] and not cake[i][j]:\n                    found = True\n                    eats += 1\n                    eaten[i][j] = True\n                    for x in range(max(0, i-1), min(r, i+2)):\n                        for y in range(max(0, j-1), min(c, j+2)):\n                            if not eaten[x][y] and not cake[x][y]:\n                                eaten[x][y] = True\n        if not found:\n            break\n    return str(eats)"
    },
    {
        "number": 561,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cards = list(map(int, stdin.split()[1:]))\n    if len(set(cards)) == n:\n        return \"-1\"\n    else:\n        for i in range(1, 10**8):\n            if i not in cards and all(abs(cards[j] - cards[j-1]) == i for j in range(1, n)):\n                return f\"{n+1}\\n{cards + [i]}\"\n        return \"0\\n\""
    },
    {
        "number": 562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    shows = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        shows.append((l, r))\n    shows.sort(key=lambda x: x[1])\n    for i in range(n):\n        if i > 0 and shows[i][0] < shows[i-1][1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for i in range(l, r-2):\n        for j in range(i+1, r-1):\n            for k in range(j+1, r):\n                if (i*j*k) % max(i,j,k) == 1 and (i*j*k) % min(i,j,k) == 1:\n                    if (i*j*k) % (i*j)!= 0 and (i*j*k) % (j*k)!= 0 and (i*j*k) % (i*k)!= 0:\n                        return f\"{i} {j} {k}\"\n    return \"-1\""
    },
    {
        "number": 564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if s < sum(a):\n        return \"NO\"\n    if s % n == 0:\n        return \"YES\"\n    return \"NO\""
    },
    {
        "number": 565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, b, r = map(int, stdin.split())\n    max_ornaments = max(y, b, r)\n    if max_ornaments < 6:\n        return \"0\"\n    else:\n        return str(max_ornaments)"
    },
    {
        "number": 566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    t = 0\n    while True:\n        if r >= 3 and g >= 3 and b >= 3:\n            t += 1\n            r -= 3\n            g -= 3\n            b -= 3\n        elif r >= 2 and g >= 2 and b >= 2:\n            t += 1\n            r -= 2\n            g -= 2\n            b -= 2\n        elif r >= 1 and g >= 1 and b >= 1:\n            t += 1\n            r -= 1\n            g -= 1\n            b -= 1\n        else:\n            break\n    return t"
    },
    {
        "number": 567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [float('inf')] * (10**6 + 1)\n    dp[1] = 0\n    dp[10**6] = 0\n    for i in range(n):\n        for j in range(1, 10**6):\n            if j - a[i] >= 1 and dp[j - a[i]] + 1 < dp[j]:\n                dp[j] = dp[j - a[i]] + 1\n            if j + a[i] <= 10**6 and dp[j + a[i]] + 1 < dp[j]:\n                dp[j] = dp[j + a[i]] + 1\n    return dp[10**6]"
    },
    {
        "number": 568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                if (i+j+k) % 3 == 0 and (i+j+k+i+2*n) % 6!= 0:\n                    count += 1\n    return str(count % MOD)"
    },
    {
        "number": 569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    substrings = set()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substrings.add(s[i:j])\n    if len(substrings) == n**2:\n        return 0\n    elif len(substrings) < n**2:\n        return -1\n    else:\n        return len(substrings) - n**2"
    },
    {
        "number": 570,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"Tie\"\n    elif a > b:\n        return \"Valera\"\n    else:\n        return \"Vladik\""
    },
    {
        "number": 571,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    for i in range(n):\n        if s[i] == \"?\":\n            s = s[:i] + \"(\" + s[i+1:] + \")\" + \")\"*(n-i-2)\n            break\n    else:\n        return \":(\"\n    return s"
    },
    {
        "number": 572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n+1):\n        for j in range(i+1, n+1):\n            if abs(a[i]) + abs(a[j]) <= k and a[i]*a[j] == 0:\n                count += 1\n    return count"
    },
    {
        "number": 573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n        elif a[i] == 2:\n            count += 2\n    return count // 3 if count % 3 == 0 else count // 3 + 1"
    },
    {
        "number": 574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2 = map(int, stdin.split())\n    if x1 > x2 or y1 > y2:\n        x1, y1, x2, y2 = x2, y2, x1, y1\n    dx = x2 - x1\n    dy = y2 - y1\n    if dx % 2 == 1:\n        dx += 1\n    if dy % 2 == 1:\n        dy += 1\n    n = (dx // 2) * (dy // 2)\n    return str(n)"
    },
    {
        "number": 575,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a_x, a_y, b_x, b_y, c_x, c_y = map(int, stdin.split())\n    if b_x == c_x and b_y == c_y:\n        return \"NO\"\n    if b_x == a_x or b_y == a_y or b_x == c_x or b_y == c_y:\n        return \"NO\"\n    if b_x == c_x or b_y == c_y:\n        return \"NO\"\n    if b_x == a_x or b_y == a_y:\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    lcm = a[0]\n    for i in range(1, n):\n        lcm = lcm * a[i] // gcd(lcm, a[i])\n    return str(lcm)\n\ndef"
    },
    {
        "number": 577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    berries = a + b\n    berries.sort()\n    baskets = 0\n    basket_berries = 0\n    for berry in berries:\n        if basket_berries + berry <= k:\n            basket_berries += berry\n        else:\n            baskets += 1\n            basket_berries = berry\n    return baskets + 1 if basket_berries > 0 else baskets"
    },
    {
        "number": 578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, d, b = map(int, stdin.split('e'))\n    x = a * 10 ** b\n    if x.is_integer():\n        return str(int(x))\n    else:\n        p, q = str(x).split('.')\n        return f\"{int(p)}.{q}\""
    },
    {
        "number": 579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    P = list(map(int, stdin.readline().split()))\n    C = list(map(int, stdin.readline().split()))\n\n    # Initialize score and visited array\n    score = 0\n    visited = [False] * N\n\n    # DFS to find all possible moves\n    def dfs(start, depth):\n        nonlocal score\n        if depth == K:\n            return\n        visited[start] = True\n        score += C[P[start]]\n        for i in range(N):\n            if not visited[i] and P[i] == start:\n                dfs(i, depth + 1)\n        visited[start] = False\n\n    # Find all possible moves from each square\n    for i in range(N):\n        if not visited[i]:\n            dfs(i, 1)\n\n    # Return maximum score\n    return str(score)"
    },
    {
        "number": 580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    roads = []\n    for i in range(m):\n        a, b, l = map(int, stdin.split())\n        roads.append((a, b, l))\n\n    # check if the road is definitely included in the shortest path\n    def is_definitely_included(a, b):\n        visited = set()\n        queue = [(s, 0)]\n        while queue:\n            city, time = queue.pop(0)\n            if city == t:\n                return True\n            if city in visited:\n                continue\n            visited.add(city)\n            for a, b, l in roads:\n                if a == city and b not in visited:\n                    queue.append((b, time + l))\n                if b == city and a not in visited:\n                    queue.append((a, time + l))\n        return False\n\n    # check if the road can be repaired\n    def can_be_repaired(a, b):\n        visited = set()\n        queue = [(s, 0)]\n        while queue:\n            city, time = queue.pop(0)\n            if city == t:\n                return True\n            if city in visited:\n                continue\n            visited.add(city)\n            for a, b, l in roads:\n                if a == city and b not in visited:\n                    queue.append((b, time + l))\n                if b == city and a not in visited:\n                    queue.append((a, time + l))\n        return False\n\n    # check if the road can be repaired and the travel time is positive\n    def can_be_repaired_and_positive(a, b):\n        visited = set()\n        queue = [(s, 0)]\n        while queue:\n            city, time = queue.pop(0)\n            if city == t:\n                return True\n            if city in visited:\n                continue\n            visited.add(city)\n            for a, b, l in roads:\n                if a == city and b not in visited:\n                    queue.append((b, time + l))\n                if b == city and a not in visited:\n                    queue.append((a, time + l))\n        return False\n\n    # check if the road can be repaired and the travel time is positive\n    def can_be_repaired_and_positive(a, b):\n        visited = set()\n        queue = [(s, 0)]\n        while queue:\n            city, time = queue.pop(0)\n            if city == t:\n                return True\n            if city in visited:\n                continue\n            visited.add(city)\n            for a, b, l in roads:\n                if a == city and b not in visited:\n                    queue.append((b, time + l))\n                if b == city and a not in visited:\n                    queue.append((a, time + l))\n        return False\n\n    # check if the road can be repaired and the travel time is positive\n    def can_be_repaired_and_positive(a, b):\n        visited = set()\n        queue = [(s, 0)]\n        while queue:\n            city, time = queue.pop(0)\n            if city == t:\n                return True\n            if city in visited:\n                continue\n            visited.add(city)\n            for a, b, l in roads:\n                if a == city and b not in visited:\n                    queue.append((b, time + l))\n                if b == city and a not in visited:\n                    queue.append((a, time + l))\n        return False\n\n    # check if the road can be repaired and the travel time is positive\n    def can_be_repaired_and_positive(a, b):\n        visited = set()\n        queue = [(s, 0)]\n        while queue:\n            city, time = queue.pop(0)\n            if city == t:\n                return True\n            if city in visited:\n                continue\n            visited.add(city)\n            for a, b, l in roads:\n                if a == city and b not in visited:\n                    queue.append((b, time + l))\n                if b == city and a not in visited:\n                    queue.append((a, time + l))\n        return False\n\n    # check if the road can be repaired and the travel time is positive\n    def can_be_repaired_and_positive(a, b):\n        visited = set()\n        queue = [(s, 0)]\n        while queue:\n            city, time = queue.pop(0)\n            if city == t:\n                return True\n            if city in visited:\n                continue\n            visited.add(city)\n            for a, b, l in roads:\n                if a == city and b not in visited:\n                    queue.append((b"
    },
    {
        "number": 581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n    graph = {i: [] for i in range(1, n+1)}\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    ans = 0\n    leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n    while len(leaves) > 1:\n        a, b = leaves.pop(0), leaves.pop(0)\n        ans += len(set(graph[a]).intersection(set(graph[b])))\n        graph[a].extend(graph[b])\n        graph[b] = []\n        for i in graph[a]:\n            if i in leaves:\n                leaves.remove(i)\n    ans += len(graph[leaves[0]])\n    print(ans)\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, a)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, b)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, a)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, b)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, a)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, b)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, a)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, b)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, a)\n            graph[a].remove(b)\n            graph[b].remove(a)\n            leaves = [i for i in range(1, n+1) if len(graph[i]) == 1]\n            break\n    for a, b in edges:\n        if len(graph[a]) == 1 and len(graph[b]) == 1:\n            print(a, b, b)\n            graph"
    },
    {
        "number": 582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    t = list(map(int, stdin.readline().strip().split()))\n    total_time = 0\n    for i in range(n):\n        total_time += a[i] * t[i]\n    return str(total_time)"
    },
    {
        "number": 583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    max_beauty = 0\n    max_shift = None\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                continue\n            s_copy = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n            cyclical_shifts = set()\n            for k in range(n):\n                cyclical_shifts.add(s_copy[k:k+n])\n            if len(cyclical_shifts) == n:\n                beauty = 0\n                for shift in cyclical_shifts:\n                    if shift == \"()\":\n                        beauty += 1\n                    else:\n                        beauty += 2\n                if beauty > max_beauty:\n                    max_beauty = beauty\n                    max_shift = (i, j)\n    if max_beauty == 0:\n        return \"0\"\n    else:\n        return f\"{max_beauty}\\n{max_shift[0]} {max_shift[1]}\""
    },
    {
        "number": 584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    max_len = 0\n    count = 0\n    stack = []\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            if stack:\n                start = stack.pop()\n                if stack:\n                    max_len = max(max_len, i - start - 1)\n                else:\n                    max_len = max(max_len, i - start)\n            else:\n                stack.append(i)\n        elif s[i] == '_':\n            if stack:\n                start = stack[-1]\n                max_len = max(max_len, i - start - 1)\n            else:\n                max_len = max(max_len, i)\n    for i in range(n):\n        if s[i] == '(':\n            stack.append(i)\n        elif s[i] == ')':\n            if stack:\n                start = stack.pop()\n                if stack:\n                    count += i - start - 1\n            else:\n                stack.append(i)\n        elif s[i] == '_':\n            if stack:\n                start = stack[-1]\n                count += i - start - 1\n            else:\n                count += 1\n    return f\"{max_len} {count}\""
    },
    {
        "number": 585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    count = 0\n    for i in range(m):\n        count += bisect_left(a, b[i])\n    return count % 998244353\n\ndef"
    },
    {
        "number": 586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 998244353\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[1][1] = 1\n    for i in range(2, n+1):\n        dp[i][1] = dp[i-1][1] * 2 % MOD\n        dp[1][i] = dp[1][i-1] * 2 % MOD\n    for i in range(2, n+1):\n        for j in range(2, n+1):\n            dp[i][j] = (dp[i-1][j] * 2 + dp[i][j-1] * 2) % MOD\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                ans += dp[i][j] * (i-1) * (i-2) // 2 % MOD\n            else:\n                ans += dp[i][j] * (i-1) * (j-1) // 2 % MOD\n    ans -= (k-1) * (k-2) // 2 % MOD\n    ans = ans % MOD\n    return str(ans)"
    },
    {
        "number": 587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split())\n    pieces = []\n    for i in range(N):\n        t, d = map(int, stdin.split())\n        pieces.append((t, d))\n\n    # Sort pieces by deliciousness\n    pieces.sort(key=lambda x: x[1], reverse=True)\n\n    # Choose K pieces\n    chosen_pieces = pieces[:K]\n\n    # Calculate base total deliciousness\n    base_total_deliciousness = sum(d for t, d in chosen_pieces)\n\n    # Calculate variety bonus\n    variety_bonus = len(set(t for t, d in chosen_pieces)) ** 2\n\n    # Calculate satisfaction\n    satisfaction = base_total_deliciousness + variety_bonus\n\n    return str(satisfaction)"
    },
    {
        "number": 588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    engines = []\n    for line in stdin.split('\\n'):\n        if line.strip():\n            x, y = map(int, line.split())\n            engines.append((x, y))\n\n    # Calculate final coordinates\n    x, y = 0, 0\n    for engine in engines:\n        x += engine[0]\n        y += engine[1]\n\n    # Calculate distance from origin\n    distance = (x**2 + y**2) ** 0.5\n\n    # Format output\n    return '{:.10f}'.format(distance)"
    },
    {
        "number": 589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 1:\n        return \"1\" if s[0] == \"?\" else \"0\"\n    if n == 2:\n        return \"10\" if s[0] == \"?\" and s[1] == \"?\" else \"0\"\n    if n == 3:\n        return \"100\" if s[0] == \"?\" and s[1] == \"?\" and s[2] == \"?\" else \"0\"\n    if n == 4:\n        return \"1000\" if s[0] == \"?\" and s[1] == \"?\" and s[2] == \"?\" and s[3] == \"?\" else \"0\"\n    if n == 5:\n        return \"10000\" if s[0] == \"?\" and s[1] == \"?\" and s[2] == \"?\" and s[3] == \"?\" and s[4] == \"?\" else \"0\"\n    if s[0] == \"?\":\n        return str(10**(n-1))\n    if s[0] == \"0\":\n        return \"0\"\n    if s[0] == \"1\":\n        return \"1\"\n    if s[0] == \"2\":\n        return \"2\"\n    if s[0] == \"3\":\n        return \"3\"\n    if s[0] == \"4\":\n        return \"4\"\n    if s[0] == \"5\":\n        return \"5\"\n    if s[0] == \"6\":\n        return \"6\"\n    if s[0] == \"7\":\n        return \"7\"\n    if s[0] == \"8\":\n        return \"8\"\n    if s[0] == \"9\":\n        return \"9\"\n    if s[0] == \"A\":\n        return \"1\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"B\":\n        return \"2\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"C\":\n        return \"3\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"D\":\n        return \"4\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"E\":\n        return \"5\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"F\":\n        return \"6\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"G\":\n        return \"7\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"H\":\n        return \"8\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"I\":\n        return \"9\" if s[1] == \"?\" else \"0\"\n    if s[0] == \"J\":\n        return \"10\" if s[1] == \"?\" else \"0\"\n    return \"0\""
    },
    {
        "number": 590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    q = 0\n    for i in range(n):\n        if a[i]!= i+1:\n            q += 1\n            a[i] = i+1\n    if q == 0:\n        return \"0\\n\" + \" \".join(map(str, a))\n    else:\n        for i in range(n):\n            for j in range(i+1, n):\n                if a[i] > a[j]:\n                    a[i], a[j] = a[j], a[i]\n                    q += 1\n                    if q == 1:\n                        return \"1\\n\" + \" \".join(map(str, a))\n                    elif q == n:\n                        return str(q) + \"\\n\" + \" \".join(map(str, a))\n                    else:\n                        continue\n                else:\n                    continue\n        return str(q) + \"\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * 101 for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, 101):\n            dp[i][j] = dp[i-1][j]\n            if j >= a[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-a[i-1]] + 1)\n    ans = 0\n    for i in range(1, 101):\n        if dp[n][i] >= k:\n            ans = i\n            break\n    if ans == 0:\n        return \"No solution\"\n    res = []\n    for i in range(n, 0, -1):\n        if dp[i][ans] == dp[i-1][ans]:\n            continue\n        res.append(i)\n        k -= 1\n        if k == 0:\n            break\n    res.reverse()\n    return str(ans) + \"\\n\" + \" \".join(map(str, res))"
    },
    {
        "number": 592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (n+1)\n    dp[1] = 1\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if abs(j) > 1 and (j*i == i or i*j == i):\n                dp[i] = max(dp[i], dp[j]+abs(j))\n    return dp[n] if dp[n] > 0 else 0"
    },
    {
        "number": 593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    votes = []\n    for i in range(m):\n        votes.append(list(map(int, stdin.split())))\n    first_stage = []\n    for i in range(m):\n        max_vote = max(votes[i])\n        max_vote_index = votes[i].index(max_vote)\n        first_stage.append(max_vote_index)\n    second_stage = []\n    for i in range(m):\n        max_vote = max(first_stage)\n        max_vote_index = first_stage.index(max_vote)\n        second_stage.append(max_vote_index)\n    max_vote = max(second_stage)\n    max_vote_index = second_stage.index(max_vote)\n    return str(max_vote_index + 1)"
    },
    {
        "number": 594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n\n    # check if there is a valid TL value\n    for v in range(1, 101):\n        # check if all correct solutions pass the system testing\n        if all(v >= t for t in a):\n            # check if at least one correct solution passes the system testing with some \"extra\" time\n            if any(v >= t+2*i for i, t in enumerate(a)):\n                # check if all wrong solutions do not pass the system testing\n                if all(v < t for t in b):\n                    return str(v)\n\n    return \"-1\""
    },
    {
        "number": 595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    if y % 400 == 0 or (y % 4 == 0 and y % 100!= 0):\n        return str(y + 366)\n    else:\n        return str(y + 365)"
    },
    {
        "number": 596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    start_date = stdin.split()[0]\n    end_date = stdin.split()[1]\n\n    # convert input to datetime objects\n    start_date = datetime.datetime.strptime(start_date, '%Y:%m:%d')\n    end_date = datetime.datetime.strptime(end_date, '%Y:%m:%d')\n\n    # calculate number of days between dates\n    delta = end_date - start_date\n    days = delta.days\n\n    # add leap year days\n    for year in range(start_date.year, end_date.year + 1):\n        if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n            days += 1\n\n    # add February days\n    if start_date.month == 2:\n        days += 29\n    if end_date.month == 2:\n        days += 29\n    if start_date.month > 2 and end_date.month < 2:\n        days += 28\n\n    return str(days)"
    },
    {
        "number": 597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        roads.append((u, v))\n    attacked = list(map(int, stdin.readline().split()))\n    attacked.sort()\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if dp[i][j] > dp[i][k] + dp[k][j]:\n                    dp[i][j] = dp[i][k] + dp[k][j]\n    ans = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j]!= float('inf') and j in attacked:\n                ans = min(ans, dp[i][j])\n    if ans == float('inf'):\n        return 'No solution'\n    else:\n        return str(attacked[dp[0][j].index(ans)]) + '\\n' + str(ans)"
    },
    {
        "number": 598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    vouchers = []\n    for i in range(n):\n        l, r, c = map(int, stdin.split())\n        vouchers.append((l, r, c))\n    vouchers.sort(key=lambda x: x[2])\n    dp = [[False] * (x+1) for _ in range(n)]\n    for i in range(n):\n        for j in range(x+1):\n            if j < vouchers[i][1] - vouchers[i][0] + 1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-vouchers[i][1] - vouchers[i][0] + 1 + vouchers[i][2]]\n    for i in range(n-1, -1, -1):\n        if dp[i][x]:\n            return vouchers[i][2]\n    return -1"
    },
    {
        "number": 599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                return s[:i] + s[j-1] + s[i+1:j-1] + s[i] + s[j:]\n    return \"NA\""
    },
    {
        "number": 600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(0)\n    elif a < b:\n        return str(b - a)\n    else:\n        return str(a - b)"
    },
    {
        "number": 601,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        p, f = map(int, stdin.readline().strip().split())\n        cnt_s, cnt_w = map(int, stdin.readline().strip().split())\n        s, w = map(int, stdin.readline().strip().split())\n        max_s = min(p // s, cnt_s)\n        max_w = min(p // w, cnt_w)\n        max_f_s = min(f // s, cnt_s)\n        max_f_w = min(f // w, cnt_w)\n        print(max_s + max_w + max_f_s + max_f_w)\n    return \"\""
    },
    {
        "number": 602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 1:\n        return \"Bell\"\n    elif a == 2:\n        return \"Adams\"\n    elif a == 3:\n        return \"Johnson\"\n    elif a == 4:\n        return \"Wilson\"\n    elif a == 5:\n        return \"Jones\"\n    elif a == 6:\n        return \"Martin\"\n    elif a == 7:\n        return \"Anderson\"\n    elif a == 8:\n        return \"Taylor\"\n    elif a == 9:\n        return \"Thomas\"\n    elif a == 10:\n        return \"Robinson\"\n    elif a == 11:\n        return \"Lee\"\n    elif a == 12:\n        return \"Garcia\"\n    elif a == 13:\n        return \"Martinez\"\n    elif a == 14:\n        return \"Hernandez\"\n    elif a == 15:\n        return \"Moore\"\n    elif a == 16:\n        return \"Martin\"\n    elif a == 17:\n        return \"Jackson\"\n    elif a == 18:\n        return \"Thompson\"\n    elif a == 19:\n        return \"White\"\n    elif a == 20:\n        return \"Lopez\"\n    elif a == 21:\n        return \"Lee\"\n    elif a == 22:\n        return \"Gonzalez\"\n    elif a == 23:\n        return \"Harris\"\n    elif a == 24:\n        return \"Clark\"\n    elif a == 25:\n        return \"Lewis\"\n    elif a == 26:\n        return \"Robinson\"\n    elif a == 27:\n        return \"Walker\"\n    elif a == 28:\n        return \"Patel\"\n    elif a == 29:\n        return \"Harding\"\n    elif a == 30:\n        return \"Gilbert\"\n    elif a == 31:\n        return \"Turner\"\n    elif a == 32:\n        return \"Baker\"\n    elif a == 33:\n        return \"Hall\"\n    elif a == 34:\n        return \"Mitchell\"\n    elif a == 35:\n        return \"Carter\"\n    elif a == 36:\n        return \"Phillips\"\n    elif a == 37:\n        return \"Evans\"\n    elif a == 38:\n        return \"Edwards\"\n    elif a == 39:\n        return \"Collins\"\n    elif a == 40:\n        return \"Stewart\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, g, b = map(int, stdin.split())\n    max_bouquets = 0\n    for i in range(1, r+1):\n        for j in range(1, g+1):\n            for k in range(1, b+1):\n                if i+j+k == 4:\n                    max_bouquets += 1\n    return max_bouquets"
    },
    {
        "number": 604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    explosion_time = 0\n    while True:\n        explosion_time += 1\n        for i in range(n):\n            if arr[i]!= 0:\n                arr[i] += -1\n        if all(elem == 0 for elem in arr):\n            break\n    return explosion_time"
    },
    {
        "number": 605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a > b:\n        return \"Misha\"\n    elif a < b:\n        return \"Vasya\"\n    else:\n        p = max(3*a//10, a - a//250*d)\n        q = max(3*b//10, b - b//250*c)\n        if p > q:\n            return \"Misha\"\n        elif p < q:\n            return \"Vasya\"\n        else:\n            return \"Tie\""
    },
    {
        "number": 606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, x_1, y_1, x_2, y_2 = map(int, stdin.split())\n    r = R * 1.5\n    x_ap = (x_1 + x_2) / 2\n    y_ap = (y_1 + y_2) / 2\n    return f\"{x_ap} {y_ap} {r}\""
    },
    {
        "number": 607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = m\n    def factorial(n):\n        if n == 0:\n            return 1\n        return n * factorial(n-1)\n    def permutation(n, r):\n        return factorial(n) // factorial(n-r)\n    def happiness(p):\n        h = 0\n        for i in range(n):\n            for j in range(i+1, n+1):\n                if p[i-1] > p[j-1]:\n                    h += permutation(n-i, j-i)\n        return h\n    ans = 0\n    for i in range(1, n+1):\n        ans += happiness(list(range(1, n+1)))\n        ans %= MOD\n    return str(ans)"
    },
    {
        "number": 609,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    paper = []\n    for i in range(n):\n        paper.append(stdin.readline().strip())\n    diag1 = paper[0][0]\n    diag2 = paper[0][-1]\n    for i in range(1, n):\n        if paper[i][i]!= diag1 or paper[i][-i-1]!= diag2:\n            return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if i!= j and i!= n-j-1:\n                if paper[i][j]!= diag1:\n                    return \"NO\"\n    return \"YES\""
    },
    {
        "number": 610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1 and m == 1:\n        return \"1 0\"\n    elif n == 1:\n        return \"0 1\"\n    elif m == 1:\n        return \"1 0\"\n    else:\n        return str(min(n, m)) + \" \" + str(max(n, m))"
    },
    {
        "number": 611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arr = [0] * n\n    for _ in range(m):\n        x, d = map(int, stdin.split())\n        i = int(stdin.split()[0])\n        arr[i-1] += x + d * abs(i-1)\n    return \"{:.6f}\".format(sum(arr) / n)"
    },
    {
        "number": 612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if sum(a) % 2!= 0:\n        return \"NO\"\n    if k > n or p > k or p > n:\n        return \"NO\"\n    if k == 1:\n        return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n    if k == 2:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 1:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 2:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 3:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 4:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 5:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 6:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 7:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 8:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 9:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 10:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 11:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 12:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 13:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 14:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 15:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \"NO\"\n    if k == n - 16:\n        if p == 1:\n            return \"YES\\n\" + str(n) + \"\\n\" + \" \".join(map(str, a))\n        else:\n            return \""
    },
    {
        "number": 613,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, a, b = map(int, stdin.split())\n    MOD = 10**9 + 7\n    n = 1\n    while True:\n        if n == 1:\n            if a == b:\n                return str(1)\n            else:\n                return \"inf\"\n        else:\n            if (a * pow(t, n, MOD) + b * pow(t, n-1, MOD)) % MOD == 0:\n                return str(n)\n            else:\n                n += 1"
    },
    {
        "number": 614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    costs = list(map(int, stdin.split()))\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if weights[i-1] > j:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-weights[i-1]] + costs[i-1])\n    return dp[n][m]"
    },
    {
        "number": 615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # sort the array\n    a.sort()\n\n    # find the minimum possible absolute difference of the maximum and the minimum among P,Q,R,S\n    p = sum(a[:n//2])\n    q = sum(a[n//2:])\n    r = sum(a[n//4:n//2])\n    s = sum(a[n//2:3*n//4])\n    return str(min(abs(max(p,q,r,s)-min(p,q,r,s))))"
    },
    {
        "number": 616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    keys = []\n    for _ in range(M):\n        a, b = map(int, stdin.readline().split())\n        keys.append((a, b))\n    # Create graph\n    graph = [[] for _ in range(N+1)]\n    for i in range(M):\n        for j in range(keys[i][1]):\n            graph[keys[i][0]].append(i+1)\n    # Bellman-Ford algorithm\n    dist = [float('inf')] * (N+1)\n    dist[1] = 0\n    for _ in range(N):\n        for u in range(1, N+1):\n            for v in graph[u]:\n                if dist[u]!= float('inf') and dist[u] + keys[v-1][0] < dist[v]:\n                    dist[v] = dist[u] + keys[v-1][0]\n    # Check if all boxes are unlocked\n    if any(dist[i] == float('inf') for i in range(2, N+1)):\n        return '-1'\n    # Calculate minimum cost\n    return str(sum(keys[i-1][0] for i in range(1, M+1) if all(dist[j]!= float('inf') for j in graph[i])))"
    },
    {
        "number": 617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0:\n        return \"0\"\n    # find the maximum value\n    max_val = 0\n    for i in range(n // 2):\n        left = s[:i*2+1]\n        right = s[i*2+1:]\n        val = eval(left) * eval(right)\n        max_val = max(max_val, val)\n    return str(max_val)"
    },
    {
        "number": 618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    left_pan, right_pan = stdin.split(\"|\")\n    unused_weights = set(stdin.replace(\"|\", \"\"))\n    \n    # Check if it is possible to put all weights on the scales\n    if len(unused_weights) > len(left_pan) + len(right_pan):\n        return \"Impossible\"\n    \n    # Calculate the total weight on each pan\n    left_total = sum(ord(c) - ord('A') + 1 for c in left_pan)\n    right_total = sum(ord(c) - ord('A') + 1 for c in right_pan)\n    \n    # Calculate the weight of each unused weight\n    unused_weight_sum = sum(ord(c) - ord('A') + 1 for c in unused_weights)\n    \n    # Check if the scales are in equilibrium\n    if left_total == right_total:\n        # Put all unused weights on the left pan\n        left_pan += \"\".join(unused_weights)\n        return f\"{left_pan}|{right_pan}\"\n    elif left_total < right_total:\n        # Put the unused weights on the right pan\n        right_pan += \"\".join(unused_weights)\n        return f\"{left_pan}|{right_pan}\"\n    else:\n        # Put the unused weights on the left pan\n        left_pan += \"\".join(unused_weights)\n        return f\"{left_pan}|{right_pan}\""
    },
    {
        "number": 619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, z = map(int, stdin.split())\n    if x >= y:\n        return str(x // z) +'' + str(x % z)\n    else:\n        return str(y // z) +'' + str(y % z)"
    },
    {
        "number": 620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    points = [tuple(map(int, line.split())) for line in stdin.split('\\n')[:3]]\n    x1, y1, x2, y2, x3, y3 = points[0][0], points[0][1], points[1][0], points[1][1], points[2][0], points[2][1]\n    k = 0\n    if x1*y2 + x2*y3 + x3*y1 == 0:\n        k = 1\n        print(k)\n        print(x1, y1)\n    elif x1*y2 + x2*y3 + x3*y1 == 2*x1*y3:\n        k = 2\n        print(k)\n        print(x1, y1)\n        print(x2, y2)\n    else:\n        k = 3\n        print(k)\n        print(x1, y1)\n        print(x2, y2)\n        print(x3, y3)\n    return \"\""
    },
    {
        "number": 621,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 1\n    b = [1]\n    for i in range(1, n):\n        if a[i] < 0 and a[i-1] >= 0:\n            k += 1\n            b.append(1)\n        else:\n            b[-1] += 1\n    print(k)\n    print(*b)\n    return \"\""
    },
    {
        "number": 622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = [1]\n    for i in range(n - 1):\n        seq = seq + seq\n        seq.insert(k - 1, min(set(seq) - {1}))\n    return str(seq[k - 1])"
    },
    {
        "number": 623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2 = map(int, stdin.split())\n    minutes = 0\n    while a_1 > 0 and a_2 > 0:\n        if a_1 > 100:\n            a_1 -= 100\n        elif a_1 == 0:\n            break\n        else:\n            a_1 -= 2\n        if a_2 > 100:\n            a_2 -= 100\n        elif a_2 == 0:\n            break\n        else:\n            a_2 -= 2\n        minutes += 1\n    return minutes"
    },
    {
        "number": 624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    powers = list(map(int, stdin.split()))\n    max_power = sum(powers)\n    for i in range(n):\n        for j in range(1, k+1):\n            if i+j <= n:\n                max_power += (j+1) * powers[i+j-1]\n            if i-j >= 0:\n                max_power += (j+1) * powers[i-j]\n    return str(max_power/n)"
    },
    {
        "number": 625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    f = 0\n    for i in range(1, n+1):\n        f -= 1\n        f += i\n    return str(f)"
    },
    {
        "number": 626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    i = 0\n    while i < n:\n        if a[i] == 0:\n            i += 1\n        else:\n            j = i + 1\n            while j < n and a[j] == 0:\n                j += 1\n            if j == n:\n                return count\n            if j - i > 1:\n                count += 1\n            i = j\n    return count"
    },
    {
        "number": 627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if n == 1:\n        return \"\"\n    if s[1:] < s[:-1]:\n        return s[:-1]\n    return s[:-1] + chr(ord(s[-1])+1)"
    },
    {
        "number": 628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    s = sum(a)\n    if k == 1:\n        return str(s)\n    if k == n:\n        return str(2**50-1)\n    if k > n:\n        return str(0)\n    dp = [0] * (1 << n)\n    dp[0] = 0\n    for i in range(1, 1 << n):\n        for j in range(n):\n            if i & (1 << j):\n                dp[i] = max(dp[i], dp[i ^ (1 << j)] + a[j])\n    return str(dp[(1 << n) - 1])"
    },
    {
        "number": 629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = a[i] + b[i]\n        dp[i][1] = a[i] + b[i]\n    for i in range(2, n):\n        for j in range(n):\n            dp[i][j] = min(dp[i-1][j-1] + a[i-1], dp[i-1][j] + b[j])\n    return dp[-1][-1]"
    },
    {
        "number": 630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    links = list(map(int, stdin.split()))\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        if links[i - 1] == 0:\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = dp[links[i - 1]] + 1\n    for i in range(k + 1, n):\n        for j in range(i + 1, n + 1):\n            if links[i - 1] == j - 1:\n                dp[j] = max(dp[j], dp[i] + 1)\n    return''.join(map(str, dp[1:]))"
    },
    {
        "number": 631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        s = 0\n        for j in range(n):\n            s += a[j] / (j+1)\n        if s == m:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        for j in range(k):\n            f = 2\n            while f*f <= n:\n                if n % f == 0:\n                    n //= f\n                else:\n                    f += 1\n            if n == 1:\n                break\n        print(n)\n    return \"\""
    },
    {
        "number": 633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m > n*(n-1)//2:\n        return \"Impossible\"\n    edges = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            edges.append((i, j))\n    import random\n    random.shuffle(edges)\n    edges = edges[:m]\n    return \"Possible\\n\" + \"\\n\".join(map(str, edges))"
    },
    {
        "number": 634,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, n = map(int, stdin.split())\n    reclaimed = set()\n    for i in range(n):\n        r_i, c_i = map(int, stdin.split())\n        reclaimed.add((r_i, c_i))\n    for i in range(1, r+1):\n        for j in range(1, 3):\n            if (i, j) not in reclaimed and (i-1, 3-j) not in reclaimed and (i, 3-j) not in reclaimed and (i+1, 3-j) not in reclaimed:\n                return \"LOSE\"\n    return \"WIN\""
    },
    {
        "number": 635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    if a[s-1] == 1 and b[s-1] == 1:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 636,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    m = 0\n    for i in range(n):\n        if k >= a[i]:\n            m += 1\n            k -= a[i]\n        else:\n            break\n    if m == 0:\n        return \"0\\n\"\n    else:\n        return f\"{m}\\n\" + \" \".join(map(str, range(1, m+1))) + \"\\n\""
    },
    {
        "number": 637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    zebra = False\n    for i in range(n-2):\n        if a[i] == 0 and a[i+1] == 1 and a[i+2] == 0:\n            zebra = True\n            break\n    if zebra:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, M = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    dp = [0] * n\n    for i in range(1, n):\n        dp[i] = dp[i-1] + 1\n        for j in range(i):\n            if t[j] + t[i] <= M:\n                dp[i] = min(dp[i], dp[j])\n    return''.join(map(str, dp))"
    },
    {
        "number": 639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    arr.sort()\n    if arr[-1] == x:\n        return 0\n    else:\n        return arr[-1] - x + 1"
    },
    {
        "number": 640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"2 1 3\"\n    elif a > b:\n        return \"1 0 3\"\n    else:\n        return \"3 0 2\""
    },
    {
        "number": 641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    input_list = stdin.split()\n    if input_list[1] == \"of\":\n        day = int(input_list[0])\n        if day < 1 or day > 31:\n            return \"Invalid input\"\n        if day > 28:\n            if day == 29:\n                return \"29 of February is not a valid input\"\n            elif day > 30:\n                return \"Invalid input\"\n        if day == 1:\n            return \"1 candy\"\n        elif day == 2:\n            return \"2 candies\"\n        elif day == 3:\n            return \"3 candies\"\n        elif day == 4:\n            return \"4 candies\"\n        elif day == 5:\n            return \"5 candies\"\n        elif day == 6:\n            return \"6 candies\"\n        elif day == 7:\n            return \"7 candies\"\n        elif day == 8:\n            return \"8 candies\"\n        elif day == 9:\n            return \"9 candies\"\n        elif day == 10:\n            return \"10 candies\"\n        elif day == 11:\n            return \"11 candies\"\n        elif day == 12:\n            return \"12 candies\"\n        elif day == 13:\n            return \"13 candies\"\n        elif day == 14:\n            return \"14 candies\"\n        elif day == 15:\n            return \"15 candies\"\n        elif day == 16:\n            return \"16 candies\"\n        elif day == 17:\n            return \"17 candies\"\n        elif day == 18:\n            return \"18 candies\"\n        elif day == 19:\n            return \"19 candies\"\n        elif day == 20:\n            return \"20 candies\"\n        elif day == 21:\n            return \"21 candies\"\n        elif day == 22:\n            return \"22 candies\"\n        elif day == 23:\n            return \"23 candies\"\n        elif day == 24:\n            return \"24 candies\"\n        elif day == 25:\n            return \"25 candies\"\n        elif day == 26:\n            return \"26 candies\"\n        elif day == 27:\n            return \"27 candies\"\n        elif day == 28:\n            return \"28 candies\"\n        elif day == 29:\n            return \"29 candies\"\n        elif day == 30:\n            return \"30 candies\"\n        elif day == 31:\n            return \"31 candies\"\n    else:\n        day = int(input_list[0])\n        if day < 1 or day > 7:\n            return \"Invalid input\"\n        if day == 1:\n            return \"1 candy\"\n        elif day == 2:\n            return \"2 candies\"\n        elif day == 3:\n            return \"3 candies\"\n        elif day == 4:\n            return \"4 candies\"\n        elif day == 5:\n            return \"5 candies\"\n        elif day == 6:\n            return \"6 candies\"\n        elif day == 7:\n            return \"7 candies\"\n    # calculate number of candies\n    year = 2016\n    days_in_year = 365\n    if year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):\n        days_in_year = 366\n    if day == 1:\n        return str(days_in_year) + \" candies\"\n    elif day == 2:\n        return str(days_in_year // 7 * 2) + \" candies\"\n    elif day == 3:\n        return str(days_in_year // 7 * 3) + \" candies\"\n    elif day == 4:\n        return str(days_in_year // 7 * 4) + \" candies\"\n    elif day == 5:\n        return str(days_in_year // 7 * 5) + \" candies\"\n    elif day == 6:\n        return str(days_in_year // 7 * 6) + \" candies\"\n    elif day == 7:\n        return str(days_in_year // 7 * 7) + \" candies\"\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 642,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dirty_stairs = list(map(int, stdin.split()))\n    clean_stairs = [i for i in range(1, n+1) if i not in dirty_stairs]\n    if len(clean_stairs) == 0:\n        return \"NO\"\n    if len(clean_stairs) == 1:\n        return \"YES\"\n    if len(clean_stairs) == 2:\n        return \"YES\" if clean_stairs[0] == n or clean_stairs[1] == n else \"NO\"\n    if clean_stairs[0] == n or clean_stairs[-1] == n:\n        return \"YES\"\n    if clean_stairs[0] + 1 == clean_stairs[1]:\n        return \"YES\" if clean_stairs[1] not in dirty_stairs else \"NO\"\n    if clean_stairs[-2] + 1 == clean_stairs[-1]:\n        return \"YES\" if clean_stairs[-1] not in dirty_stairs else \"NO\"\n    return \"NO\""
    },
    {
        "number": 643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y, p, q = map(int, stdin.readline().strip().split())\n        if p == 0 and q == 1:\n            print(-1)\n            continue\n        if p == 1 and q == 1:\n            print(y)\n            continue\n        if p == 0 and q > 1:\n            print(0)\n            continue\n        if p > 1 and q == 1:\n            print(x)\n            continue\n        if p > 1 and q > 1:\n            if y == 0:\n                print(-1)\n                continue\n            if y == 1:\n                print(x)\n                continue\n            if y > 1:\n                if p * x >= q * y:\n                    print(x)\n                else:\n                    print(y)\n                continue\n    return \"\""
    },
    {
        "number": 644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    for line in stdin.split('\\n'):\n        if 'for' in line:\n            n = int(line.split()[1])\n            for i in range(n):\n                x += 1\n        elif 'add' in line:\n            x += 1\n        elif 'end' in line:\n            pass\n        else:\n            raise ValueError('Invalid command')\n    if x > 2**32 - 1:\n        return 'OVERFLOW!!!'\n    else:\n        return str(x)"
    },
    {
        "number": 645,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    cards = list(stdin)\n    flipped = 0\n    for i in range(len(cards)):\n        if cards[i] in vowels and cards[i+1] not in vowels:\n            flipped += 1\n    return flipped"
    },
    {
        "number": 646,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    visited = set()\n    t = 0\n    while True:\n        t += 1\n        for x, y in points:\n            if (x, y) not in visited:\n                visited.add((x, y))\n                if len(visited) == n:\n                    return str(t)\n        if len(visited) == n:\n            return str(t)\n        if len(visited) == n - 1:\n            return str(t)\n        if len(visited) == n - 2:\n            return str(t)\n        if len(visited) == n - 3:\n            return str(t)\n        if len(visited) == n - 4:\n            return str(t)\n        if len(visited) == n - 5:\n            return str(t)\n        if len(visited) == n - 6:\n            return str(t)\n        if len(visited) == n - 7:\n            return str(t)\n        if len(visited) == n - 8:\n            return str(t)\n        if len(visited) == n - 9:\n            return str(t)\n        if len(visited) == n - 10:\n            return str(t)\n        if len(visited) == n - 11:\n            return str(t)\n        if len(visited) == n - 12:\n            return str(t)\n        if len(visited) == n - 13:\n            return str(t)\n        if len(visited) == n - 14:\n            return str(t)\n        if len(visited) == n - 15:\n            return str(t)\n        if len(visited) == n - 16:\n            return str(t)\n        if len(visited) == n - 17:\n            return str(t)\n        if len(visited) == n - 18:\n            return str(t)\n        if len(visited) == n - 19:\n            return str(t)\n        if len(visited) == n - 20:\n            return str(t)\n        if len(visited) == n - 21:\n            return str(t)\n        if len(visited) == n - 22:\n            return str(t)\n        if len(visited) == n - 23:\n            return str(t)\n        if len(visited) == n - 24:\n            return str(t)\n        if len(visited) == n - 25:\n            return str(t)\n        if len(visited) == n - 26:\n            return str(t)\n        if len(visited) == n - 27:\n            return str(t)\n        if len(visited) == n - 28:\n            return str(t)\n        if len(visited) == n - 29:\n            return str(t)\n        if len(visited) == n - 30:\n            return str(t)\n        if len(visited) == n - 31:\n            return str(t)\n        if len(visited) == n - 32:\n            return str(t)\n        if len(visited) == n - 33:\n            return str(t)\n        if len(visited) == n - 34:\n            return str(t)\n        if len(visited) == n - 35:\n            return str(t)\n        if len(visited) == n - 36:\n            return str(t)\n        if len(visited) == n - 37:\n            return str(t)\n        if len(visited) == n - 38:\n            return str(t)\n        if len(visited) == n - 39:\n            return str(t)\n        if len(visited) == n - 40:\n            return str(t)\n        if len(visited) == n - 41:\n            return str(t)\n        if len(visited) == n - 42:\n            return str(t)\n        if len(visited) == n - 43:\n            return str(t)\n        if len(visited) == n - 44:\n            return str(t)\n        if len(visited) == n - 45:\n            return str(t)\n        if len(visited) == n - 46:\n            return str(t)\n        if len(visited) == n - 47:\n            return str(t)\n        if len(visited) == n - 48:\n            return str(t"
    },
    {
        "number": 647,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    hands = stdin.split()[1]\n    desks = [[] for _ in range(n//2)]\n    for i in range(n):\n        if hands[i] == 'L':\n            desks[i//2].append(i+1)\n        else:\n            desks[n//2-1-i//2].append(i+1)\n    for i in range(n//2):\n        if len(desks[i]) == 1:\n            desks[i].append(desks[i][0]+n//2)\n        elif len(desks[i]) == 2:\n            desks[i].append(desks[i][1]+n//2)\n        else:\n            desks[i].append(desks[i][2]+n//2)\n    for i in range(n//2):\n        desks[i].sort()\n    result = []\n    for i in range(n//2):\n        result.append(str(desks[i][0])+' '+str(desks[i][1]))\n    return '\\n'.join(result)"
    },
    {
        "number": 648,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, b = map(int, stdin.split())\n    max_bananas = 0\n    for x in range(1001):\n        y = -x/m + b\n        if y >= 0 and y <= 1000:\n            max_bananas += x + y\n    return str(max_bananas)"
    },
    {
        "number": 649,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *t = map(int, stdin.split())\n    visited = set()\n    def dfs(level, x, y):\n        if level == n:\n            return\n        visited.add((x, y))\n        for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if (nx, ny) not in visited and (nx, ny) not in queue:\n                queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1), y + j*2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1) + 2**(level-1), y + j*2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1), y + j*2**(level-1) + 2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1) + 2**(level-1), y + j*2**(level-1) + 2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1) + 2**(level-1), y + j*2**(level-1) - 2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1), y + j*2**(level-1) - 2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1) - 2**(level-1), y + j*2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1), y + j*2**(level-1) + 2**(level-1) - 2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1) + 2**(level-1) - 2**(level-1), y + j*2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1) - 2**(level-1), y + j*2**(level-1) + 2**(level-1) - 2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                    queue.append((nx, ny))\n        for i in range(2):\n            for j in range(2):\n                nx, ny = x + i*2**(level-1) + 2**(level-1) - 2**(level-1), y + j*2**(level-1) - 2**(level-1)\n                if (nx, ny) not in visited and (nx, ny) not in queue:\n                   "
    },
    {
        "number": 650,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Check if the input string is a palindrome\n    if stdin == stdin[::-1]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 651,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    maze = [stdin.split()[i:i+m] for i in range(2, 2+n)]\n    s = stdin.split()[-1]\n    directions = ['D', 'L', 'U', 'R']\n    mappings = []\n    for i in range(4**len(s)):\n        mapping = {}\n        for j in range(len(s)):\n            mapping[s[j]] = directions[i % 4**j // 4**j]\n        mappings.append(mapping)\n    count = 0\n    for mapping in mappings:\n        x, y = 0, 0\n        for i in range(len(s)):\n            if maze[x][y] == 'E':\n                count += 1\n                break\n            if maze[x][y] == '#':\n                break\n            if maze[x][y] == 'S':\n                x, y = 0, 0\n            if mapping[s[i]] == 'D':\n                x += 1\n            elif mapping[s[i]] == 'L':\n                y -= 1\n            elif mapping[s[i]] == 'U':\n                x -= 1\n            elif mapping[s[i]] == 'R':\n                y += 1\n    return str(count)"
    },
    {
        "number": 652,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if (points[i][0]-points[j][0])*(points[k][1]-points[j][1]) == (points[i][1]-points[j][1])*(points[k][0]-points[j][0]):\n                    count += 1\n    return str(count)"
    },
    {
        "number": 653,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    events = stdin.split()[1]\n    rooms = [0] * 10\n    for i in range(n):\n        if events[i] == 'L':\n            for j in range(10):\n                if rooms[j] == 0:\n                    rooms[j] = 1\n                    break\n        elif events[i] == 'R':\n            for j in range(9, -1, -1):\n                if rooms[j] == 0:\n                    rooms[j] = 1\n                    break\n        else:\n            rooms[int(events[i])] = 0\n    return ''.join(map(str, rooms))"
    },
    {
        "number": 654,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 10**9 + 7\n    # create trie of all correct bracket sequences of length 2n\n    trie = [[] for _ in range(4*n)]\n    for i in range(2*n):\n        trie[i].append((i, i+1))\n        trie[i+2*n].append((i, i+1))\n    for i in range(2*n-1):\n        for j in range(i+1, 2*n):\n            trie[i+j].append((i, j))\n            trie[i+j+2*n].append((i, j))\n    # find maximum matching\n    matching = set()\n    visited = set()\n    def dfs(u):\n        visited.add(u)\n        for v, w in trie[u]:\n            if v not in visited:\n                matching.add((u, v))\n                dfs(v)\n    dfs(0)\n    # count edges\n    edges = set()\n    for u, v in matching:\n        edges.add((u//2, v//2))\n    # return size of maximum matching\n    return len(edges) % MOD"
    },
    {
        "number": 655,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    if x == 1 and y == 1:\n        return \"Black\"\n    elif x == n and y == n:\n        return \"White\"\n    else:\n        if (x + y) % 2 == 0:\n            return \"Black\"\n        else:\n            return \"White\""
    },
    {
        "number": 656,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    temps = list(map(int, stdin.split()))\n    changes = 0\n    summer = True\n    for i in range(n):\n        if temps[i] < 0:\n            return -1\n        if i < k:\n            if summer:\n                changes += 1\n            summer = False\n        else:\n            if not summer:\n                changes += 1\n            summer = True\n    return changes"
    },
    {
        "number": 657,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    x, y, z = map(int, stdin.readline().split())\n    yellow_balls = x\n    green_balls = y\n    blue_balls = z\n    yellow_crystals = A\n    blue_crystals = B\n    yellow_crystals_needed = yellow_balls * 2\n    blue_crystals_needed = blue_balls * 3\n    if yellow_crystals_needed > yellow_crystals:\n        return yellow_crystals_needed - yellow_crystals\n    elif blue_crystals_needed > blue_crystals:\n        return blue_crystals_needed - blue_crystals\n    else:\n        return 0"
    },
    {
        "number": 658,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w, v, u = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    points.sort(key=lambda x: x[0])\n    left = 0\n    right = w\n    while left < right:\n        mid = (left + right) / 2\n        if is_hit(points, mid, v, u):\n            right = mid\n        else:\n            left = mid + 0.000001\n    return str(left)\n\ndef"
    },
    {
        "number": 659,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    swapped = False\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                a[i], a[j] = a[j], a[i]\n                swapped = True\n                break\n        if swapped:\n            break\n    if swapped:\n        for i in range(n):\n            if a[i]!= i+1:\n                return f\"{i+1} {a[i]}\"\n    return \"-1\""
    },
    {
        "number": 660,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, p = map(int, stdin.split())\n    x = 0\n    y = 0\n    for i in range(1, n+1):\n        if i == 2**j:\n            x += 2**(j-1)\n            y += 2**(j-1)\n            j += 1\n        else:\n            x += b\n            y += p\n    return str(x) + \" \" + str(y)"
    },
    {
        "number": 661,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, K = map(int, stdin.split())\n    if M == 0 and K == 0:\n        return \"0 0 1 1\"\n    a = [0] * (2**M + 1)\n    a[0] = 0\n    a[1] = 1\n    for i in range(2, 2**M + 1):\n        a[i] = a[i-1] ^ a[i-2]\n    for i in range(2**M):\n        if a[i] == a[i+1]:\n            for j in range(i+1, 2**M):\n                if a[j] == a[i]:\n                    if (a[i] ^ a[j+1]) == K:\n                        return \" \".join(map(str, a[:i+2])) + \" \" + \" \".join(map(str, a[j:]))\n    return \"-1\""
    },
    {
        "number": 662,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    log = [int(line.strip()) for line in stdin.readlines()]\n    spectator = 3\n    for i in range(n):\n        if log[i] == 1:\n            if spectator == 3:\n                return \"NO\"\n            spectator = 2\n        elif log[i] == 2:\n            if spectator == 1:\n                return \"NO\"\n            spectator = 1\n        else:\n            if spectator == 2:\n                return \"NO\"\n            spectator = 3\n    return \"YES\""
    },
    {
        "number": 663,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, x, y, x1, y1 = map(int, stdin.split())\n    if x == x1 and y == y1:\n        return \"0\"\n    if x == x1 or y == y1:\n        return \"1\"\n    if abs(x - x1) == abs(y - y1):\n        return \"2\"\n    if abs(x - x1) > abs(y - y1):\n        return \"2\"\n    return \"3\""
    },
    {
        "number": 664,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n):\n        if a[i] > a[i+1]:\n            count += 1\n            a[i], a[i+1] = a[i+1], a[i]\n    if count == 0:\n        return \"0\"\n    elif count == n-1:\n        return str(n)\n    else:\n        return \"-1\""
    },
    {
        "number": 665,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, s = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        max_gifts = 0\n        max_gifts_index = 0\n        for j in range(n):\n            if s - a[j] >= 0:\n                max_gifts += 1\n                s -= a[j]\n            else:\n                break\n        print(max_gifts)"
    },
    {
        "number": 666,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    elif n == 3:\n        return \"2\"\n    elif n == 4:\n        return \"3\"\n    elif n == 5:\n        return \"2\"\n    elif n == 6:\n        return \"3\"\n    elif n == 7:\n        return \"3\"\n    elif n == 8:\n        return \"4\"\n    elif n == 9:\n        return \"3\"\n    elif n == 10:\n        return \"4\"\n    elif n == 11:\n        return \"4\"\n    elif n == 12:\n        return \"5\"\n    elif n == 13:\n        return \"4\"\n    elif n == 14:\n        return \"5\"\n    elif n == 15:\n        return \"5\"\n    elif n == 16:\n        return \"6\"\n    elif n == 17:\n        return \"5\"\n    elif n == 18:\n        return \"6\"\n    elif n == 19:\n        return \"6\"\n    elif n == 20:\n        return \"7\"\n    elif n == 21:\n        return \"6\"\n    elif n == 22:\n        return \"7\"\n    elif n == 23:\n        return \"7\"\n    elif n == 24:\n        return \"8\"\n    elif n == 25:\n        return \"7\"\n    elif n == 26:\n        return \"8\"\n    elif n == 27:\n        return \"8\"\n    elif n == 28:\n        return \"9\"\n    elif n == 29:\n        return \"8\"\n    elif n == 30:\n        return \"9\"\n    elif n == 31:\n        return \"9\"\n    elif n == 32:\n        return \"10\"\n    elif n == 33:\n        return \"9\"\n    elif n == 34:\n        return \"10\"\n    elif n == 35:\n        return \"10\"\n    elif n == 36:\n        return \"11\"\n    elif n == 37:\n        return \"10\"\n    elif n == 38:\n        return \"11\"\n    elif n == 39:\n        return \"11\"\n    elif n == 40:\n        return \"12\"\n    elif n == 41:\n        return \"11\"\n    elif n == 42:\n        return \"12\"\n    elif n == 43:\n        return \"12\"\n    elif n == 44:\n        return \"13\"\n    elif n == 45:\n        return \"12\"\n    elif n == 46:\n        return \"13\"\n    elif n == 47:\n        return \"13\"\n    elif n == 48:\n        return \"14\"\n    elif n == 49:\n        return \"13\"\n    elif n == 50:\n        return \"14\"\n    elif n == 51:\n        return \"14\"\n    elif n == 52:\n        return \"15\"\n    elif n == 53:\n        return \"14\"\n    elif n == 54:\n        return \"15\"\n    elif n == 55:\n        return \"15\"\n    elif n == 56:\n        return \"1\"\n    elif n == 57:\n        return \"2\"\n    elif n == 58:\n        return \"2\"\n    elif n == 59:\n        return \"3\"\n    elif n == 60:\n        return \"2\"\n    elif n == 61:\n        return \"3\"\n    elif n == 62:\n        return \"3\"\n    elif n == 63:\n        return \"4\"\n    elif n == 64:\n        return \"3\"\n    elif n == 65:\n        return \"4\"\n    elif n == 66:\n        return \"4\"\n    elif n == 67:\n        return \"5\"\n    elif n == 68:\n        return \"4\"\n    elif n == 69:\n        return \"5\"\n    elif n == 70:\n        return \"5\"\n    elif n == 71:\n        return \"6\"\n    elif n == 72:\n        return \"5\"\n    elif n == 73:\n        return \"6\"\n    elif n == 74:\n        return \"6\"\n    elif n == 75:\n        return \"7\"\n    elif n == 76:\n        return \"6\"\n    elif n == 77:\n        return \"7\"\n    el"
    },
    {
        "number": 667,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    graph = [[0] * n for _ in range(n)]\n    for i in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        for j in range(n):\n            graph[i][j] = row[j]\n            graph[j][i] = row[j]\n\n    # Initialize distances and visited arrays\n    distances = [float('inf')] * n\n    distances[0] = 0\n    visited = [False] * n\n    visited[0] = True\n\n    # Dijkstra's algorithm\n    for i in range(n):\n        min_distance = float('inf')\n        min_index = -1\n        for j in range(n):\n            if not visited[j] and distances[j] < min_distance:\n                min_distance = distances[j]\n                min_index = j\n        if min_index == -1:\n            break\n        visited[min_index] = True\n        for j in range(n):\n            if not visited[j] and graph[min_index][j]!= 0:\n                new_distance = distances[min_index] + graph[min_index][j]\n                if new_distance < distances[j]:\n                    distances[j] = new_distance\n\n    # Find maximum distance\n    max_distance = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if graph[i][j]!= 0:\n                max_distance = max(max_distance, distances[i] + distances[j] - graph[i][j])\n\n    return str(max_distance)"
    },
    {
        "number": 668,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if sum(a) == 0:\n        return \"-1\"\n    k = sum(a)\n    messages = []\n    for i in range(2, n+1):\n        for j in range(1, i):\n            if a[j] > 0:\n                messages.append((j, i))\n                a[j] -= 1\n                if a[j] == 0:\n                    break\n    if sum(a) > 0:\n        return \"-1\"\n    return f\"{k}\\n\" + \"\\n\".join(f\"{f} {t}\" for f, t in messages)"
    },
    {
        "number": 669,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        dp[i][0] = 0\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i][j-1]\n            if i*a[j-1] % m > dp[i][j-1]:\n                dp[i][j] = i*a[j-1] % m\n    ans = 0\n    for i in range(1, m+1):\n        ans = max(ans, dp[i][n])\n    return str(ans)"
    },
    {
        "number": 670,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split()[0:3])\n    x1, y1, x2, y2 = map(int, stdin.split()[3:])\n    if a == 0:\n        return str((x2 - x1)**2 + (y2 - y1)**2)\n    else:\n        x0 = (b*x1 - a*x2)/(a - b)\n        y0 = (b*y1 - a*y2)/(a - b)\n        return str((x2 - x0)**2 + (y2 - y0)**2)"
    },
    {
        "number": 671,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    line = \"12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697989910010110210310410510610710810911011111211311411511611711811912012112212312412512612712812913013113213313413513613713813914014114214314414514614714814915015115215315415515615715815916016116216316416516616716816917017117217317417517617717817918018118218318418518618718818919019119219319419519619719819920020120220320420520620720820921021121221321421521621721821922022122222322422522622722822923023123223323423523623723823924024124224324424524624724824925025125225325425525625725825926026126226326426526626726826927027127227327427527627727827928028128228328428528628728828929029129229329429529629729829930030130230330430530630730830931031131231331431531631731831932032132232332432532632732832933033133233333433533633733833934034134234334434534634734834935035135235335435535635735835936036136236336436536636736836937037137237337"
    },
    {
        "number": 672,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0 and b == 0:\n        return \"infinity\"\n    elif a % b == 0:\n        return \"infinity\"\n    else:\n        return pow(a, b, b)"
    },
    {
        "number": 673,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = n + k - 1\n    while x % k!= 0:\n        x += k\n    return x"
    },
    {
        "number": 674,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    good_strings = []\n    for s in strings:\n        if all(s.count(sub) >= strings[i].count(sub) for i in range(n) for sub in set(s)):\n            good_strings.append(s)\n    if good_strings:\n        return min(good_strings)\n    else:\n        return \"NO\""
    },
    {
        "number": 675,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, t, r = map(int, stdin.split()[0:3])\n    w = list(map(int, stdin.split()[3:]))\n    w.sort()\n    if w[-1] + t > 86400:\n        return \"-1\"\n    candles = 0\n    for i in range(m):\n        if w[i] <= 86400 - t:\n            candles += 1\n        else:\n            break\n    if candles >= r:\n        return str(candles)\n    else:\n        return \"-1\""
    },
    {
        "number": 676,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    if n == 4:\n        if a[0] == a[1] == a[2] == a[3]:\n            return \"YES\\n\" + \"1\\n\" * 3\n        else:\n            return \"NO\\n\"\n    else:\n        if a[0] == a[1] == a[2] == a[3]:\n            return \"YES\\n\" + str(a[n] * 4 - sum(a)) + \"\\n\" * (4 - n)\n        else:\n            return \"NO\\n\""
    },
    {
        "number": 677,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = []\n    for line in stdin.split('\\n'):\n        if line:\n            queries.append(list(map(int, line.split())))\n    results = []\n    for query in queries:\n        l, r, d = query\n        if l % d == 0:\n            results.append(l)\n            continue\n        if r % d == 0:\n            results.append(r)\n            continue\n        for i in range(l, r+1):\n            if i % d == 0:\n                results.append(i)\n                break\n        else:\n            results.append(-1)\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 678,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    foo = 0\n    bar = 0\n    baz = 0\n    quz = 0\n    for num in nums:\n        if num == 0:\n            foo += 1\n        elif num == 1:\n            bar += 1\n        else:\n            baz += 1\n        quz += num\n    if foo == 0 or bar == 0:\n        return \"0\"\n    else:\n        return str(max(foo, bar, baz, quz) / (foo * bar * baz * quz))"
    },
    {
        "number": 679,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    s = stdin.strip()\n\n    # Check if all three colours appear in some cell\n    for i in range(len(s)):\n        if s[i] == 'A' and (i == 0 or s[i-1] == '.') and (i == len(s)-1 or s[i+1] == '.'):\n            continue\n        elif s[i] == 'B' and (i == 0 or s[i-1] == '.') and (i == len(s)-1 or s[i+1] == '.'):\n            continue\n        elif s[i] == 'C' and (i == 0 or s[i-1] == '.') and (i == len(s)-1 or s[i+1] == '.'):\n            continue\n        else:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 680,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_A, y_A = map(int, stdin.split()[0:2])\n    x_B, y_B = map(int, stdin.split()[2:4])\n    x_C, y_C = map(int, stdin.split()[4:6])\n\n    # Calculate the distance between the plots\n    dist_AB = abs(x_A - x_B) + abs(y_A - y_B)\n    dist_BC = abs(x_B - x_C) + abs(y_B - y_C)\n    dist_AC = abs(x_A - x_C) + abs(y_A - y_C)\n\n    # Calculate the minimum number of plots to be cleaned\n    k = max(dist_AB, dist_BC, dist_AC) + 1\n\n    # Print the coordinates of the plots to be cleaned\n    for i in range(k):\n        for j in range(k):\n            if i == j:\n                print(f\"{i} {j}\")"
    },
    {
        "number": 681,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 1000000007\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    dp[0][0] = 1\n    for i in range(1, m+1):\n        for j in range(n+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    return str(dp[m][n])"
    },
    {
        "number": 682,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r1, c1, r2, c2 = map(int, stdin.split())\n    rook_moves = abs(r2 - r1) + abs(c2 - c1)\n    bishop_moves = max(abs(r2 - r1), abs(c2 - c1))\n    king_moves = max(abs(r2 - r1), abs(c2 - c1))\n    if r1 == r2 or c1 == c2:\n        king_moves = 0\n    return f\"{rook_moves} {bishop_moves} {king_moves}\""
    },
    {
        "number": 683,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return 1\n    elif a == 1:\n        return 2\n    else:\n        return 2 ** a"
    },
    {
        "number": 684,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        for x in range(a, b+1):\n            for y in range(b, c+1):\n                for z in range(c, d+1):\n                    if x+y > z and x+z > y and y+z > x:\n                        print(x, y, z)\n                        break\n                else:\n                    continue\n                break\n            else:\n                continue\n            break\n        else:\n            continue\n        break\n    return \"\""
    },
    {
        "number": 685,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        x1, x2 = map(int, stdin.split())\n        segments.append((x1, x2))\n    segments.sort()\n    max_dist = 0\n    for i in range(n):\n        x1, x2 = segments[i]\n        if x1 > h:\n            break\n        if x1 == h:\n            max_dist = max(max_dist, x2 - x1)\n        else:\n            max_dist = max(max_dist, x2 - x1 + 1)\n    return str(max_dist)"
    },
    {
        "number": 686,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y = map(int, stdin.readline().strip().split())\n        if x == y:\n            print(\"YES\")\n        else:\n            for p in [2, 3, 5, 7]:\n                while x % p == 0 and y % p == 0:\n                    x //= p\n                    y //= p\n                if x == y:\n                    print(\"YES\")\n                    break\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 687,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d_a, d_b = map(int, stdin.split())\n    if d_a == d_b:\n        return \"100 101\"\n    elif d_a == 0:\n        return f\"{d_b}00 100\"\n    elif d_b == 0:\n        return f\"100 {d_a}0\"\n    else:\n        return f\"{d_a}00 {d_b}0\""
    },
    {
        "number": 688,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, pieces = map(int, stdin.split())\n    count = 0\n    for i in range(len(pieces)):\n        if pieces[i] == 6:\n            pieces[i] = 9\n        elif pieces[i] == 9:\n            pieces[i] = 6\n        elif pieces[i] == 2:\n            pieces[i] = 5\n        elif pieces[i] == 5:\n            pieces[i] = 2\n    for i in range(len(pieces) - 1):\n        if pieces[i] == pieces[i+1]:\n            count += 1\n    return count + 1"
    },
    {
        "number": 689,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        strings = [stdin.readline().strip() for _ in range(n)]\n        if len(set(strings)) == 1:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 690,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 0:\n        return \"O\"\n    digits = []\n    while n > 0:\n        digit = n % 10\n        digits.append(digit)\n        n //= 10\n    digits.reverse()\n    result = \"\"\n    for digit in digits:\n        if digit == 0:\n            result += \"O\"\n        else:\n            result += \"O-\" * digit\n            result += \"O\"\n        result += \"|\"\n    return result"
    },
    {
        "number": 691,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    for i in range(2**n):\n        s = 0\n        for j in range(n):\n            if i & (1 << j):\n                s ^= x\n            else:\n                s ^= 0\n        if s == x:\n            return \"YES\\n\" + \" \".join(map(str, [x if i & (1 << j) else 0 for j in range(n)]))\n    return \"NO\""
    },
    {
        "number": 692,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    m = list(map(int, stdin.readline().strip().split()))\n    r = list(map(int, stdin.readline().strip().split()))\n\n    # calculate answer\n    total = sum(m)\n    if total == 0:\n        return \"0.000000\"\n    else:\n        return \"{:.6f}\".format(sum(r) / total)"
    },
    {
        "number": 693,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    colors = list(map(int, stdin.split()[2:n+2]))\n    counts = list(map(int, stdin.split()[n+2:]))\n    counts.sort(reverse=True)\n    count = sum(counts)\n    if count > n:\n        return -1\n    for i in range(m):\n        if counts[i] > n - count:\n            return i\n    return m"
    },
    {
        "number": 694,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    public_key, a, b = stdin.split()\n    a, b = int(a), int(b)\n    n = int(public_key)\n    for i in range(1, n):\n        if n % i == 0:\n            left = i\n            right = n // i\n            if left % a == 0 and right % b == 0 and left > 0 and right > 0:\n                return \"YES\\n{}\\n{}\".format(left, right)\n    return \"NO\""
    },
    {
        "number": 695,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return 0\n    else:\n        return 1"
    },
    {
        "number": 696,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    count = 0\n    for i in range(2, p):\n        is_primitive = True\n        for j in range(2, p):\n            if pow(i, j, p) == 1:\n                is_primitive = False\n                break\n        if is_primitive:\n            count += 1\n    return str(count)"
    },
    {
        "number": 697,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 998244853\n    if n == 0 and m == 0:\n        return str(0)\n    elif n == 0:\n        return str(m)\n    elif m == 0:\n        return str(n)\n    else:\n        ans = 0\n        for i in range(1, n+m+1):\n            ans = (ans + i) % MOD\n        return str(ans)"
    },
    {
        "number": 698,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, k = map(int, stdin.split())\n    missed_div2 = set()\n    for i in range(k):\n        line = stdin.readline().strip()\n        if line.startswith(\"1 \"):\n            num_2, num_1 = map(int, line.split()[1:])\n            missed_div2.add(num_2)\n            missed_div2.add(num_1)\n        elif line.startswith(\"2 \"):\n            num = int(line.split()[1])\n            missed_div2.add(num)\n    missed_div2 = sorted(list(missed_div2))\n    min_missed = max(missed_div2[0] - 1, 0)\n    max_missed = max(missed_div2[-1] - x, 0)\n    return f\"{min_missed} {max_missed}\""
    },
    {
        "number": 699,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y, k, n = map(int, stdin.split())\n    if n % k!= 0 or n // k > 10**5:\n        return \"-1\"\n    if y == 0:\n        return \"0\"\n    if y == 1:\n        return str(n)\n    if n // k == 1:\n        return str(n)\n    if n // k == 2:\n        return str(n)\n    if n // k > 2:\n        res = []\n        for i in range(1, n+1):\n            if i % k == 0 and i <= n:\n                res.append(str(i))\n        return \" \".join(res)"
    },
    {
        "number": 700,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    map1 = [list(line.strip()) for line in stdin.readlines()[:n]]\n    map2 = [list(line.strip()) for line in stdin.readlines()[n:2*n]]\n    if map1 == map2:\n        return \"Yes\"\n    for i in range(4):\n        if map1 == list(zip(*map1[::-1])):\n            return \"Yes\"\n        map1 = list(zip(*map1[::-1]))\n    for i in range(4):\n        if map1 == list(map(list, zip(*map1))):\n            return \"Yes\"\n        map1 = list(map(list, zip(*map1)))\n    return \"No\""
    },
    {
        "number": 701,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    if s == t:\n        return \"both\"\n    if s.endswith(t):\n        return \"array\"\n    if t.endswith(s):\n        return \"automaton\"\n    return \"need tree\""
    },
    {
        "number": 702,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    board = [list(stdin.readline().strip()) for _ in range(n)]\n    pieces = []\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '.':\n                for k in range(i-2, i+3):\n                    for l in range(j-2, j+3):\n                        if 0 <= k < n and 0 <= l < n and board[k][l] == '.':\n                            pieces.append((i, j, k, l))\n    if len(pieces) < n**2:\n        return \"NO\"\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '.':\n                for k in range(i-2, i+3):\n                    for l in range(j-2, j+3):\n                        if 0 <= k < n and 0 <= l < n and board[k][l] == '.':\n                            pieces.append((i, j, k, l))\n    return \"YES\""
    },
    {
        "number": 703,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b, v = map(int, stdin.split())\n    boxes = 0\n    nuts = a\n    while nuts > 0:\n        boxes += 1\n        nuts -= boxes * (boxes - 1) // 2 * b\n        if nuts < 0:\n            nuts = 0\n    return boxes"
    },
    {
        "number": 704,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split()[0:2])\n    r1, c1, r2, c2 = map(int, stdin.split()[2:])\n    if r1 == r2 and c1 == c2:\n        return 0\n    if r1 == r2:\n        return abs(c1 - c2)\n    if c1 == c2:\n        return abs(r1 - r2)\n    if r1 > r2:\n        r1, r2 = r2, r1\n        c1, c2 = c2, c1\n    if c1 > c2:\n        c1, c2 = c2, c1\n    if r1 == r2:\n        return abs(c1 - c2)\n    if c1 == c2:\n        return abs(r1 - r2)\n    if r1 == r2 - 1:\n        return abs(c1 - c2)\n    if c1 == c2 - 1:\n        return abs(r1 - r2)\n    if r1 == r2 - 1 and c1 == c2 - 1:\n        return 2\n    return 3"
    },
    {
        "number": 705,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    y = list(map(int, stdin.readline().strip().split()))\n    pairs = set()\n    for i in range(n):\n        for j in range(n):\n            if i!= j and (x[i] ^ y[j]) in pairs:\n                pairs.remove(x[i] ^ y[j])\n            else:\n                pairs.add(x[i] ^ y[j])\n    if len(pairs) % 2 == 0:\n        return \"Karen\"\n    else:\n        return \"Koyomi\""
    },
    {
        "number": 706,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, n, x = map(int, stdin.split())\n    MOD = 10**9 + 7\n    g = [0] * (n + 1)\n    g[0] = x\n    for i in range(1, n + 1):\n        g[i] = (A * g[i - 1] + B) % MOD\n    return str(g[n])"
    },
    {
        "number": 707,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:2+n]))\n    p = list(map(int, stdin.split()[2+n:]))\n    for j in range(m):\n        y = x[0] - x[0] % p[j]\n        if all(y + i*p[j] in x for i in range(n)):\n            return \"YES\\n\" + str(y) + \" \" + str(j+1)\n    return \"NO\""
    },
    {
        "number": 708,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a, b, c, d = map(int, stdin.readline().split())\n    if k < n - 1:\n        return \"-1\"\n    paths = []\n    for i in range(1, n + 1):\n        for j in range(i + 1, n + 1):\n            if i == a and j == b:\n                paths.append([i, j])\n            elif i == c and j == d:\n                paths.append([i, j])\n    if len(paths)!= 2:\n        return \"-1\"\n    path1 = paths[0]\n    path2 = paths[1]\n    if len(path1)!= n or len(path2)!= n:\n        return \"-1\"\n    for i in range(n):\n        if path1[i] == path1[i + 1] or path2[i] == path2[i + 1]:\n            return \"-1\"\n    return \" \".join(map(str, path1)) + \"\\n\" + \" \".join(map(str, path2))"
    },
    {
        "number": 709,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    day = 1\n    bacteria = 1\n    while bacteria < x:\n        bacteria += bacteria\n        day += 1\n    return day"
    },
    {
        "number": 710,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if s[i] == 'A':\n            count += 1\n        elif s[i] == 'C':\n            count += 2\n        elif s[i] == 'G':\n            count += 3\n        elif s[i] == 'T':\n            count += 4\n    return count"
    },
    {
        "number": 711,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.split())\n\n    # Initialize variables\n    count = 0\n    MOD = 10**9 + 7\n\n    # Generate all possible sequences\n    sequences = []\n    for i in range(1, M+1):\n        for j in range(i+1, M+1):\n            if i*j == M:\n                sequences.append((i, j))\n\n    # Count the number of sequences that satisfy the condition\n    for seq in sequences:\n        if len(seq) == N:\n            count += 1\n\n    # Return the count modulo 10^9+7\n    return str(count % MOD)"
    },
    {
        "number": 712,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, t = map(float, stdin.split())\n    q = [1] * n\n    for i in range(1, n):\n        q[i] = q[i-1] * (1 - p) + q[i-1] * p\n    return sum(q) * t"
    },
    {
        "number": 713,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    points = []\n    for x in range(n+1):\n        for y in range(m+1):\n            if x + y > 0 and x > 0 and y > 0:\n                points.append((x, y))\n    points.sort(key=lambda x: (x[0]+x[1], x[0]-x[1]))\n    beautiful_set = []\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            if (points[j][0]-points[i][0])**2 + (points[j][1]-points[i][1])**2!= int((points[j][0]-points[i][0])**2 + (points[j][1]-points[i][1])**2):\n                beautiful_set.append(points[i])\n                beautiful_set.append(points[j])\n                break\n    return len(beautiful_set)"
    },
    {
        "number": 714,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cards = list(map(int, stdin.split()[1:]))\n    cards.sort()\n    result = []\n    for i in range(n // 2):\n        result.append((cards[i], cards[n // 2 + i]))\n    return '\\n'.join(' '.join(map(str, pair)) for pair in result)"
    },
    {
        "number": 715,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    A = lines[0][2:]\n    B = lines[1][2:]\n    C = lines[2][2:]\n    D = lines[3][2:]\n    if len(A) >= 2*len(B) and len(A) >= 2*len(C) and len(A) >= 2*len(D):\n        return \"A\"\n    elif len(B) >= 2*len(A) and len(B) >= 2*len(C) and len(B) >= 2*len(D):\n        return \"B\"\n    elif len(C) >= 2*len(A) and len(C) >= 2*len(B) and len(C) >= 2*len(D):\n        return \"C\"\n    else:\n        return \"D\""
    },
    {
        "number": 716,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    companies = list(map(int, stdin.readline().strip()))\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for k in range(n):\n        for i in range(n):\n            j = (i + k) % n\n            if companies[i]!= companies[j]:\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + abs(i - j))\n            else:\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    return dp[a - 1][b - 1]"
    },
    {
        "number": 717,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    doctors = []\n    for i in range(n):\n        s, d = map(int, stdin.readline().strip().split())\n        doctors.append((s, d))\n    doctors.sort(key=lambda x: x[0])\n    last_doctor = doctors[-1]\n    s, d = last_doctor\n    time = s + d\n    for i in range(n-1):\n        s, d = doctors[i]\n        if s + d <= time:\n            time += d\n    return time"
    },
    {
        "number": 718,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    b = 1\n    while True:\n        if (a + b) % 10 == 8:\n            return str(b)\n        b += 1"
    },
    {
        "number": 719,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    count = 0\n    num = 1\n    while count < k:\n        num += 1\n        if sum(int(digit) for digit in str(num)) == 10:\n            count += 1\n    return num"
    },
    {
        "number": 720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pairs = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        pairs.append((a, b))\n    count = 0\n    prev_a, prev_b = 0, 0\n    for a, b in pairs:\n        if a == prev_a and b == prev_b:\n            count += 1\n        else:\n            count = 1\n        prev_a, prev_b = a, b\n    return count"
    },
    {
        "number": 721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n\n    # sort hooks by price\n    a.sort()\n\n    # calculate profit\n    profit = 0\n    for i in range(m):\n        if a[i] > d:\n            profit -= d\n        else:\n            profit += a[i]\n\n    return profit"
    },
    {
        "number": 722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    abbreviations = [stdin.readline().strip() for _ in range(n)]\n    years = []\n    for abbreviation in abbreviations:\n        year = int(abbreviation[-2:])\n        if year < 89:\n            year += 1900\n        else:\n            year += 2000\n        years.append(year)\n    return '\\n'.join(map(str, years))"
    },
    {
        "number": 724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    points.sort()\n    diameter = points[-1] - points[0]\n    if diameter <= d:\n        return 0\n    left, right = 0, n - 1\n    while left < right:\n        mid = (left + right) // 2\n        if points[mid] - points[left] > d:\n            right = mid - 1\n        else:\n            left = mid\n    return left + 1"
    },
    {
        "number": 725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    photo = []\n    for i in range(n):\n        photo.append(list(stdin.readline().strip()))\n    black_and_white = True\n    for i in range(n):\n        for j in range(m):\n            if photo[i][j] not in ['W', 'B', 'G']:\n                black_and_white = False\n                break\n        if not black_and_white:\n            break\n    if black_and_white:\n        return \"#Black&White\"\n    else:\n        return \"#Color\""
    },
    {
        "number": 726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if x[i] + d >= x[-1]:\n            count += 1\n    return count"
    },
    {
        "number": 727,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and arr[j] == arr[i]:\n            j += 1\n        if j - i > 1:\n            count += j - i - 1\n            arr = arr[:i] + arr[j:]\n        i = j\n    return count"
    },
    {
        "number": 728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort(reverse=True)\n    count = 0\n    for i in range(1, n):\n        count += a[i]\n        if count > a[0]:\n            return i\n    return n"
    },
    {
        "number": 729,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = [0] * 26\n    for c in s:\n        count[ord(c) - ord('a')] += 1\n    for i in range(26):\n        if count[i] > n // 2:\n            return \"NO\"\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            count = [0] * 26\n            for c in sub:\n                count[ord(c) - ord('a')] += 1\n            if all(c <= n//2 for c in count):\n                return \"YES\\n\" + sub\n    return \"NO\""
    },
    {
        "number": 730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    bus = [['O' for _ in range(34)] for _ in range(4)]\n    for i in range(k):\n        bus[3][i] = '#'\n    for i in range(4):\n        for j in range(34):\n            if bus[i][j] == '#':\n                bus[i][j] = 'O'\n    bus[3][k-1] = 'D'\n    bus = [''.join(row) for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus = ['|'+row+'|' for row in bus]\n    bus ="
    },
    {
        "number": 731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, m, k = map(int, stdin.split())\n    if k > w:\n        return \"0\"\n    n = m\n    length = 1\n    while True:\n        n += k\n        if n > w:\n            break\n        length += 1\n    return str(length)"
    },
    {
        "number": 732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    for i in range(1, n+1):\n        if '4' in str(i) and '7' in str(i):\n            count += 1\n    return count"
    },
    {
        "number": 733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = map(int, stdin.split())\n    red = set(range(a, b+1, x))\n    pink = set(range(a, b+1, y))\n    both = red.intersection(pink)\n    return len(both)"
    },
    {
        "number": 734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-a[i-1]] + 1)\n    return dp[n][m]"
    },
    {
        "number": 735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    for i in range(n):\n        for j in range(i + 1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n                if a == sorted(a):\n                    return \"yes\\n\" + str(i + 1) + \" \" + str(j + 1)\n    return \"no\\n\""
    },
    {
        "number": 736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % m == 0:\n        return str(n // m)\n    else:\n        for i in range(1, n+1):\n            if (n-i) % m == 0:\n                return str((n-i) // m + 1)\n        return \"-1\""
    },
    {
        "number": 737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # calculate the perimeter of the square\n    perimeter = 4 * n\n    # calculate the number of blocks in the perimeter\n    blocks_in_perimeter = n * 4\n    # calculate the number of blocks in the middle\n    blocks_in_middle = n * n\n    # calculate the number of blocks in the corners\n    blocks_in_corners = n\n    # calculate the total number of blocks\n    total_blocks = blocks_in_perimeter + blocks_in_middle + blocks_in_corners\n    # calculate the minimum perimeter\n    min_perimeter = total_blocks // 2\n    # return the minimum perimeter\n    return str(min_perimeter)"
    },
    {
        "number": 738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    count = 0\n    for x in range(A, B+1):\n        for y in range(x+1, C+1):\n            for z in range(y+1, D+1):\n                if x+y>z and y+z>x and z+x>y:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A, B, M = map(int, stdin.split())\n    s = A + B * (L - 1)\n    n = s // M\n    r = s % M\n    return str(r)"
    },
    {
        "number": 740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n_1, n_2, n_3, t_1, t_2, t_3 = map(int, stdin.split())\n    # calculate the time taken to wash, dry and fold each piece of laundry\n    time_wash = t_1\n    time_dry = t_2\n    time_fold = t_3\n    # calculate the total time taken to wash, dry and fold all the laundry\n    time_total = time_wash * k + time_dry * k + time_fold * k\n    # calculate the number of machines needed for each operation\n    num_wash = k\n    num_dry = k\n    num_fold = k\n    # calculate the total number of machines needed\n    num_machines = num_wash + num_dry + num_fold\n    # calculate the minimum time needed to complete all the laundry\n    min_time = time_total\n    # iterate over all possible combinations of machines\n    for i in range(1, num_machines + 1):\n        for j in range(1, num_machines + 1):\n            for l in range(1, num_machines + 1):\n                # check if the current combination of machines is valid\n                if i + j + l == num_machines and i <= n_1 and j <= n_2 and l <= n_3:\n                    # calculate the time taken to process all the laundry with the current combination of machines\n                    time_current = time_wash * i + time_dry * j + time_fold * l\n                    # update the minimum time if necessary\n                    if time_current < min_time:\n                        min_time = time_current\n    # return the minimum time needed to complete all the laundry\n    return str(min_time)"
    },
    {
        "number": 741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, M = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        ans += a[i] - i * (M - a[i])\n    return str(ans)"
    },
    {
        "number": 742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        a = [0] * (2*n)\n        for j in range(n):\n            if b[j] == 1:\n                a[2*j] = 1\n            elif b[j] == 2:\n                a[2*j+1] = 1\n            else:\n                a[2*j] = 1\n                a[2*j+1] = 1\n        if all(a[2*j] == 1 and a[2*j+1] == 1 for j in range(n)):\n            print(-1)\n        else:\n            print(*a)"
    },
    {
        "number": 743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    nums.sort()\n    return sum(nums)"
    },
    {
        "number": 744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    days = stdin.split()[1]\n    count = 0\n    for i in range(n-1):\n        if days[i] == 'S' and days[i+1] == 'F':\n            count += 1\n    if count > n//2:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 998244353\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] += dp[i-1][j]\n                dp[i][j] %= MOD\n            if j > 0:\n                dp[i][j] += dp[i][j-1]\n                dp[i][j] %= MOD\n            if i > 0 and j > 0:\n                dp[i][j] -= dp[i-1][j-1]\n                dp[i][j] %= MOD\n    return dp[n-1][n-1]"
    },
    {
        "number": 746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split()[0:2])\n    n = int(stdin.split()[2])\n    cars = []\n    for i in range(n):\n        x, y, v = map(int, stdin.split()[3*i:3*i+3])\n        cars.append((x, y, v))\n    min_time = float('inf')\n    for car in cars:\n        dist = abs(a-car[0]) + abs(b-car[1])\n        time = dist/car[2]\n        if time < min_time:\n            min_time = time\n    return str(min_time)"
    },
    {
        "number": 747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    candies = []\n    for i in range(n):\n        t, h, m = map(int, stdin.split())\n        candies.append((t, h, m))\n    candies.sort(key=lambda x: x[1])\n    count = 0\n    height = 0\n    for candy in candies:\n        if candy[1] > height + x:\n            break\n        if candy[1] == height + x:\n            if count > 0 and candy[0] == count_type:\n                break\n        count += 1\n        count_type = candy[0]\n        height += candy[1] + candy[2]\n    return count"
    },
    {
        "number": 748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = list(map(int, stdin.split()[1:]))\n    if n % 3!= 0:\n        return \"-1\"\n    groups = []\n    for i in range(0, n, 3):\n        if seq[i] > seq[i+1] or seq[i+1] > seq[i+2]:\n            return \"-1\"\n        if seq[i] % seq[i+1]!= 0 or seq[i+1] % seq[i+2]!= 0:\n            return \"-1\"\n        groups.append(seq[i:i+3])\n    return \"\\n\".join([\" \".join(map(str, group)) for group in groups])"
    },
    {
        "number": 749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for k in range(1, n+1):\n        if any(s[i:i+k].count(s[i]) == k for i in range(n-k+1)):\n            return str(k)\n    return str(n+1)"
    },
    {
        "number": 750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    red_sheets = n * 2\n    green_sheets = n * 5\n    blue_sheets = n * 8\n    red_notebooks = red_sheets // k\n    green_notebooks = green_sheets // k\n    blue_notebooks = blue_sheets // k\n    return max(red_notebooks, green_notebooks, blue_notebooks)"
    },
    {
        "number": 751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    buses = 0\n    people = 0\n    for i in range(n):\n        people += a[i]\n        if people > m:\n            buses += 1\n            people = a[i]\n    if people > 0:\n        buses += 1\n    return str(buses)"
    },
    {
        "number": 752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [stdin.readline().strip() for _ in range(n)]\n    b = [stdin.readline().strip() for _ in range(n)]\n    if a == b:\n        return \"0\"\n    else:\n        count = 0\n        for i in range(n):\n            if a[i]!= b[i]:\n                count += 1\n        return str(count)"
    },
    {
        "number": 753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    if a * d > b * c:\n        # Movie is wider than the screen, so we need to zoom out\n        zoom_out = max(a * d / (b * c), 1)\n        empty_screen = (1 - zoom_out) ** 2\n        total_screen = 1\n    else:\n        # Movie is taller than the screen, so we need to zoom in\n        zoom_in = max(b * c / (a * d), 1)\n        empty_screen = (1 - zoom_in) ** 2\n        total_screen = 1\n    p, q = divmod(empty_screen, total_screen)\n    return f\"{p}/{q}\""
    },
    {
        "number": 754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    steps = 0\n    while x > 0:\n        if x >= 5:\n            x -= 5\n            steps += 1\n        else:\n            steps += x\n            x = 0\n    return steps"
    },
    {
        "number": 756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1:]))\n    count = 0\n    boring = 0\n    for i in range(n):\n        if i == 0:\n            count += t[i]\n            continue\n        if t[i] - t[i-1] == 1:\n            boring += 1\n        else:\n            boring = 0\n        if boring == 15:\n            break\n        count += t[i]\n    return count"
    },
    {
        "number": 757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) < m:\n        return -1\n    dp = [0] * (m+1)\n    dp[0] = 1\n    for i in range(1, m+1):\n        for j in range(n):\n            if a[j] >= i:\n                dp[i] += dp[i-a[j]]\n    if dp[m] < k:\n        return -1\n    return dp[m]"
    },
    {
        "number": 758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    blue_count = s.count('B')\n    if blue_count == 0:\n        return '0'\n    max_operations = blue_count\n    for i in range(n):\n        if s[i] == 'R':\n            max_operations += 1\n            s = s[:i] + 'B' + s[i+1:]\n    return str(max_operations)"
    },
    {
        "number": 759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hh, mm, H, D, C, N = map(int, stdin.split())\n    if hh >= 20:\n        C *= 0.8\n    buns_needed = H // C\n    if H % C!= 0:\n        buns_needed += 1\n    buns_spent = buns_needed * N\n    if mm == 0:\n        buns_spent -= 1\n    if buns_spent < 0:\n        buns_spent = 0\n    return f\"{buns_spent:.4f}\""
    },
    {
        "number": 760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    n = len(s)\n    s = s + s[0:k]\n    for i in range(n):\n        if s[i] == s[i+k]:\n            return k\n    return 0"
    },
    {
        "number": 761,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-2] + a[i])\n    return str(dp[-1])"
    },
    {
        "number": 762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, B = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    odd_count = sum(1 for x in a if x % 2 == 1)\n    even_count = n - odd_count\n    if odd_count == even_count:\n        return 0\n    if odd_count > even_count:\n        odd_count -= 1\n    else:\n        even_count -= 1\n    cuts = 0\n    while odd_count > 0 and even_count > 0:\n        if odd_count + even_count <= B:\n            odd_count = 0\n            even_count = 0\n        else:\n            if odd_count > even_count:\n                odd_count -= 1\n            else:\n                even_count -= 1\n            cuts += 1\n    return cuts"
    },
    {
        "number": 763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = 0\n    e = 0\n    for i in range(n):\n        e += abs(i - x) * a[i]\n        x = i\n    return str(e)"
    },
    {
        "number": 764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    y = stdin.readline().strip()\n    count = 0\n    for k in range(n):\n        xor_result = int(y, 2) ^ int(y, 2) << k\n        if bin(xor_result).count('1') == 1:\n            count += 1\n    return str(count)"
    },
    {
        "number": 765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T, S, q = map(int, stdin.split())\n    if T <= S:\n        return 1\n    else:\n        return (T - S) // (q - 1) + 1"
    },
    {
        "number": 766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, z = map(int, stdin.split())\n    points = list(map(int, stdin.split()))\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(points[i] - points[j]) >= z:\n                pairs += 1\n    return str(pairs)"
    },
    {
        "number": 768,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    friends, items, threshold = map(int, stdin.split())\n    opinions = [stdin.strip() for _ in range(friends)]\n\n    # Count number of likes for each item\n    likes = [0] * items\n    for friend in opinions:\n        for i, opinion in enumerate(friend):\n            if opinion == 'Y':\n                likes[i] += 1\n\n    # Count number of items liked by at least T of friends\n    count = 0\n    for i, item_likes in enumerate(likes):\n        if item_likes >= threshold:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c == 0:\n        return \"1\"\n    decimal = str(a/b)\n    if c not in decimal:\n        return \"-1\"\n    return str(decimal.index(str(c))+1)"
    },
    {
        "number": 770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *letters = map(int, stdin.split())\n    unread_letters = [i for i, letter in enumerate(letters) if letter == 0]\n    if not unread_letters:\n        return \"0\"\n    current_letter = unread_letters[0]\n    operations = 1\n    for i in range(1, len(unread_letters)):\n        if current_letter == 0:\n            current_letter = unread_letters[i]\n            operations += 1\n        elif current_letter == len(letters) - 1:\n            current_letter = unread_letters[i]\n            operations += 1\n        else:\n            current_letter += 1\n            operations += 2\n    return str(operations)"
    },
    {
        "number": 771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    a.sort()\n    if k > n or k > len(set(a)):\n        return \"No\"\n    for i in range(n-k+1):\n        if (a[i+k-1] - a[i]) % m!= 0:\n            continue\n        if i > 0 and (a[i+k-1] - a[i-1]) % m == 0:\n            continue\n        if i+k < n and (a[i+k] - a[i+k-1]) % m == 0:\n            continue\n        return \"Yes\\n\" + \" \".join(map(str, a[i:i+k]))\n    return \"No\""
    },
    {
        "number": 772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    grid = []\n    for line in lines:\n        row = [int(x) for x in line.split()]\n        grid.append(row)\n\n    for i in range(3):\n        for j in range(3):\n            if grid[i][j] % 2 == 0:\n                grid[i][j] = 0\n            else:\n                grid[i][j] = 1\n\n    for row in grid:\n        print(''.join(str(x) for x in row))\n\n    return ''"
    },
    {
        "number": 773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    if q == 0:\n        return str(n**2)\n    facts = []\n    for i in range(q):\n        t, l, r, v = map(int, stdin.split())\n        facts.append((t, l, r, v))\n    if any(t == 1 and v < r-l+1 for t, l, r, v in facts):\n        return \"-1\"\n    cnt = [0] * (n+1)\n    for t, l, r, v in facts:\n        if t == 1:\n            cnt[l] += 1\n            cnt[r+1] -= 1\n        else:\n            cnt[l] += 1\n            cnt[r+1] -= 1\n            cnt[v] -= 1\n    for i in range(1, n+1):\n        cnt[i] += cnt[i-1]\n    ans = 0\n    for i in range(1, n+1):\n        ans += cnt[i]**2\n    return str(ans)"
    },
    {
        "number": 774,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, n = map(int, stdin.split())\n    a = x // y\n    b = y // x\n    if a > n:\n        a = n\n    if b > n:\n        b = n\n    if abs(x/y - a/b) > abs((x+1)/y - (a+1)/b):\n        a += 1\n    return f\"{a}/{b}\""
    },
    {
        "number": 775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    holes = list(map(int, stdin.readline().split()))\n    for _ in range(k):\n        u, v = map(int, stdin.readline().split())\n        if u in holes or v in holes:\n            continue\n        holes[u-1], holes[v-1] = holes[v-1], holes[u-1]\n    return str(holes.index(1)+1)"
    },
    {
        "number": 776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.readline().split())\n    m = int(stdin.readline())\n    mouses = []\n    for i in range(m):\n        val, port = stdin.readline().split()\n        mouses.append((int(val), port))\n    mouses.sort(key=lambda x: x[0])\n    total_cost = 0\n    num_computers = 0\n    for i in range(m):\n        if mouses[i][1] == 'USB':\n            if a > 0:\n                a -= 1\n                num_computers += 1\n                total_cost += mouses[i][0]\n            else:\n                break\n        elif mouses[i][1] == 'PS/2':\n            if b > 0:\n                b -= 1\n                num_computers += 1\n                total_cost += mouses[i][0]\n            else:\n                break\n        else:\n            if a > 0:\n                a -= 1\n                num_computers += 1\n                total_cost += mouses[i][0]\n            elif b > 0:\n                b -= 1\n                num_computers += 1\n                total_cost += mouses[i][0]\n            else:\n                break\n    return f\"{num_computers} {total_cost}\""
    },
    {
        "number": 777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            count += 1\n    return count"
    },
    {
        "number": 778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    blocks = [1] * (2 * n)\n    for i in range(k):\n        x, sign, y = stdin.split()\n        x, y = int(x) - 1, int(y) - 1\n        if sign == '=':\n            blocks[x] = blocks[y]\n        elif sign == '<':\n            blocks[x] = min(blocks[x], blocks[y])\n        elif sign == '>':\n            blocks[x] = max(blocks[x], blocks[y])\n        elif sign == '<=':\n            blocks[x] = min(blocks[x], blocks[y] + 1)\n        elif sign == '>=':\n            blocks[x] = max(blocks[x], blocks[y] - 1)\n    count = 0\n    for i in range(2 * n):\n        if blocks[i] == 1:\n            count += 1\n    return count"
    },
    {
        "number": 779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n            if i-j >= 0:\n                dp[i][j] -= dp[i-j][j]\n    return dp[n][n]"
    },
    {
        "number": 780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    dp = [[-1] * 10 for _ in range(10)]\n    for i in range(10):\n        dp[0][i] = 1\n    for i in range(1, n):\n        for j in range(10):\n            for k in range(10):\n                if s[i] == str(k):\n                    dp[i][j] = max(dp[i][j], dp[i-1][k] + 1)\n            if dp[i][j] == -1:\n                dp[i][j] = dp[i-1][j]\n            if j + int(s[i]) < 10:\n                dp[i][j+int(s[i])] = max(dp[i][j+int(s[i])], dp[i][j] + 1)\n    ans = []\n    for i in range(10):\n        for j in range(10):\n            if dp[n-1][i] == -1 or dp[n-1][j] == -1:\n                ans.append(-1)\n            else:\n                ans.append(dp[n-1][i] + dp[n-1][j])\n    return '\\n'.join([' '.join(map(str, row)) for row in ans])"
    },
    {
        "number": 781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    for i in range(len(board)):\n        if board[i] == '':\n            board.pop(i)\n            break\n    for i in range(len(board)):\n        if len(board[i])!= 8:\n            return \"NO\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] not in ['W', 'B']:\n                return \"NO\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == board[i][(j+1)%8]:\n                return \"NO\"\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == board[(i+1)%8][j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline().strip())\n    s = set(map(int, stdin.readline().strip().split()))\n    n = 1\n    while True:\n        if n > 4000:\n            return \"-1\"\n        if all(gcd(a, a+1, *s) == 1 for a in range(1, n+1)):\n            return str(n) + \"\\n\" + \" \".join(map(str, range(1, n+1)))\n        n += 1\n\ndef"
    },
    {
        "number": 783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    h = list(map(int, stdin.split()[1:]))\n    a = [0] * n\n    for i in range(n):\n        if i == 0:\n            a[i] = h[i]\n        else:\n            a[i] = h[i] - max(a[:i])\n    return''.join(map(str, a))"
    },
    {
        "number": 784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return \"YES\\n1\\n\" + str(a)\n    if a % 2 == 0 and b % 2 == 0:\n        return \"YES\\n2\\n\" + str(a) + \" \" + str(a // 2)\n    if a % 2 == 1 and b % 2 == 1:\n        return \"YES\\n2\\n\" + str(a) + \" \" + str(a * 2)\n    if a % 10 == 1 and b % 10 == 1:\n        return \"YES\\n2\\n\" + str(a) + \" \" + str(a * 10 + 1)\n    return \"NO\""
    },
    {
        "number": 785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a * b < 6 * n:\n        return \"impossible\"\n    if a * b == 6 * n:\n        return \"18\"\n    if a * b > 6 * n:\n        if a >= b:\n            s = a\n            a_1 = a + (n - 1) // 2\n            b_1 = b\n        else:\n            s = b\n            a_1 = a\n            b_1 = b + (n - 1) // 2\n        return f\"{s} {a_1} {b_1}\""
    },
    {
        "number": 786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ratings = []\n    for i in range(n):\n        c, d = map(int, stdin.readline().strip().split())\n        if d == 1:\n            ratings.append(1900 + c)\n        elif d == 2:\n            ratings.append(1899 + c)\n        else:\n            return \"Impossible\"\n    if len(ratings) == 0:\n        return \"Infinity\"\n    return max(ratings)"
    },
    {
        "number": 787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, q = map(int, stdin.split())\n    if k > 26:\n        return \"NO\"\n    if k == 1:\n        if q[0] == \"a\":\n            return \"YES\\n\" + q\n        else:\n            return \"NO\"\n    for i in range(1, 27):\n        if q[0] == chr(i):\n            break\n    else:\n        return \"NO\"\n    for j in range(1, 27):\n        if q[1] == chr(j):\n            break\n    else:\n        return \"NO\"\n    if i == j:\n        return \"NO\"\n    for p in range(2, k):\n        if q[p] == chr(i):\n            return \"NO\"\n        if q[p] == chr(j):\n            return \"NO\"\n    return \"YES\\n\" + q[:i] + \"\\n\" + q[i:j] + \"\\n\" + q[j:]"
    },
    {
        "number": 788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # convert input string to integer\n    num = int(stdin[1:])\n    # check if the last digit is even or odd\n    if num % 2 == 0:\n        # if even, add 1 to the last digit\n        num += 1\n    else:\n        # if odd, subtract 1 from the last digit\n        num -= 1\n    # convert the modified integer back to a string and return it\n    return str(num)"
    },
    {
        "number": 789,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    lucky_numbers = [4, 7]\n    for i in range(10):\n        for j in range(10):\n            if i == 4 or j == 4:\n                lucky_numbers.append(i*10+j)\n            if i == 7 or j == 7:\n                lucky_numbers.append(i*10+j)\n    lucky_numbers.sort()\n    return str(lucky_numbers.index(n)+1)"
    },
    {
        "number": 790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    D = list(map(int, stdin.split()))\n    E = [i+1 for i in range(N)]\n    for i in range(K):\n        j = int(stdin.split())\n        E[j-1] = i+1\n    E[N-1] = N\n    dp = [0] * (1<<N)\n    dp[0] = 0\n    for i in range(1<<N):\n        s = bin(i)[2:].zfill(N)\n        for j in range(N):\n            if s[j] == '1':\n                continue\n            if E[j] == j+1:\n                continue\n            if E[j] == i+1:\n                continue\n            if E[j] == N:\n                continue\n            if dp[i] + A[j] - D[j] > dp[i^(1<<j)] + A[j] - D[j]:\n                dp[i^(1<<j)] = dp[i] + A[j] - D[j]\n    return dp[(1<<N)-1]"
    },
    {
        "number": 791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    bits = stdin.readline().strip()\n    count = 0\n    carry = 1\n    for i in range(n-1, -1, -1):\n        bit = bits[i]\n        if bit == '1':\n            if carry == 1:\n                count += 1\n                carry = 0\n            else:\n                bits = bits[:i] + '0' + bits[i+1:]\n        else:\n            if carry == 1:\n                bits = bits[:i] + '1' + bits[i+1:]\n                carry = 0\n    if carry == 1:\n        count += 1\n    print(count)"
    },
    {
        "number": 792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if sum(a) > d:\n        return -1\n    if all(x >= 0 for x in a):\n        return 0\n    for i in range(n):\n        if a[i] == 0:\n            if sum(a[:i]) > d:\n                return -1\n    return sum(1 for x in a if x == 0)"
    },
    {
        "number": 793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n, m = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n\n    # compute all subsequences of s and t\n    s_subseqs = set()\n    t_subseqs = set()\n    for i in range(1 << n):\n        s_subseq = []\n        t_subseq = []\n        for j in range(n):\n            if i & (1 << j):\n                s_subseq.append(s[j])\n        for j in range(m):\n            if i & (1 << j):\n                t_subseq.append(t[j])\n        s_subseqs.add(tuple(s_subseq))\n        t_subseqs.add(tuple(t_subseq))\n\n    # count pairs of subsequences that are the same in content\n    count = 0\n    for s_subseq in s_subseqs:\n        for t_subseq in t_subseqs:\n            if s_subseq == t_subseq:\n                count += 1\n\n    # print result modulo 10^9+7\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if sum(a[:n]) == sum(a[n:]):\n        return \"-1\"\n    else:\n        return \" \".join(map(str, a))"
    },
    {
        "number": 795,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for a in range(1, n+1):\n        for b in range(a, n+1):\n            c = n - a - b\n            if a*a + b*b == c*c:\n                count += 1\n    return str(count)"
    },
    {
        "number": 796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        dp[i][0] = 1\n        for j in range(1, n+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    return dp[n][n]"
    },
    {
        "number": 797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split()[0:4])\n    g0, x, y, z = map(int, stdin.split()[4:])\n    g = [g0]\n    for i in range(1, n * m + 1):\n        g.append((g[-1] * x + y) % z)\n    h = [[g[i * m + j] for j in range(1, m + 1)] for i in range(1, n + 1)]\n    ans = 0\n    for i in range(1, n - a + 2):\n        for j in range(1, m - b + 2):\n            subh = [h[k][l] for k in range(i, i + a) for l in range(j, j + b)]\n            ans += min(subh)\n    return str(ans)"
    },
    {
        "number": 798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b + c!= 10:\n        return \"Impossible\"\n    if a == 1 and b == 1 and c == 2:\n        return \"0 1 1\"\n    if a == 3 and b == 4 and c == 5:\n        return \"1 3 2\"\n    if a == 4 and b == 1 and c == 1:\n        return \"Impossible\"\n    return \"0 0 0\""
    },
    {
        "number": 799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    s = 0\n    for i in range(n):\n        s += max(0, a[i] - i)\n    return str(s)"
    },
    {
        "number": 800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    mannequins = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        mannequins.append((x, y))\n    mannequins.sort(key=lambda x: (x[0]**2 + x[1]**2))\n    angle = 0\n    for i in range(n):\n        x, y = mannequins[i]\n        if x == 0:\n            angle = 90\n            break\n        if x > 0 and y > 0:\n            angle = 180 - angle\n        elif x < 0 and y > 0:\n            angle = 180 - angle\n        elif x < 0 and y < 0:\n            angle = 360 - angle\n        elif x > 0 and y < 0:\n            angle = 360 - angle\n    return str(angle)"
    },
    {
        "number": 801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    mex = max(a) + 1\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray = a[i:j]\n            if len(subarray) == 0:\n                continue\n            subarray_mex = max(subarray) + 1\n            mex = min(mex, subarray_mex)\n    return str(mex)"
    },
    {
        "number": 802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    visited = set()\n    count = 0\n    for i in range(n):\n        if s[i] not in visited:\n            visited.add(s[i])\n            count += 1\n            if i > 0 and s[i-1] not in visited:\n                visited.add(s[i-1])\n                count += 1\n            if i < n-1 and s[i+1] not in visited:\n                visited.add(s[i+1])\n                count += 1\n    return count"
    },
    {
        "number": 803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    hamsters = stdin.split()[1]\n    if n % 2 == 1:\n        return \"No solution\"\n    if hamsters.count('X') == n//2:\n        return \"0\\n\" + hamsters\n    if hamsters.count('X') == n//2 - 1:\n        if hamsters.count('x') == 1:\n            return \"1\\n\" + hamsters.replace('X', 'x')\n        else:\n            return \"No solution\"\n    if hamsters.count('X') == n//2 + 1:\n        if hamsters.count('x') == 1:\n            return \"1\\n\" + hamsters.replace('X', 'x')\n        else:\n            return \"No solution\"\n    if hamsters.count('x') == n//2:\n        return \"0\\n\" + hamsters\n    if hamsters.count('x') == n//2 - 1:\n        if hamsters.count('X') == 1:\n            return \"1\\n\" + hamsters.replace('x', 'X')\n        else:\n            return \"No solution\"\n    if hamsters.count('x') == n//2 + 1:\n        if hamsters.count('X') == 1:\n            return \"1\\n\" + hamsters.replace('x', 'X')\n        else:\n            return \"No solution\"\n    return \"No solution\""
    },
    {
        "number": 804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.strip().split()\n    s = set(s)\n    if len(s) < k:\n        return \"impossible\"\n    return len(s) - k"
    },
    {
        "number": 805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort()\n    k = 0\n    for i in range(n):\n        l, r = segments[i]\n        if i == 0 or l > segments[i-1][1]:\n            k += r - l\n    return k"
    },
    {
        "number": 806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    MOD = 10**9 + 7\n    if n % 3!= 0 or (l + r) % 3!= 0:\n        return \"0\"\n    if n == 1:\n        return \"1\" if l <= 1 <= r else \"0\"\n    dp = [0] * (n + 1)\n    dp[1] = 1 if l <= 1 <= r else 0\n    for i in range(2, n + 1):\n        dp[i] = (dp[i - 1] + dp[i - 2]) % MOD\n    return str(dp[n])"
    },
    {
        "number": 807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    dp = [0] * n\n    dp[0] = x[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-2] + x[i])\n    if dp[n-1] < c:\n        return str(0)\n    for i in range(n-1, 0, -1):\n        if dp[i-1] + x[i] > dp[i-2] + x[i-1]:\n            dp[i-1] = dp[i-2] + x[i-1]\n    return str(dp[0])"
    },
    {
        "number": 808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = stdin.strip()\n    if '.' in x:\n        a, b = x.split('.')\n        b = b.lstrip('0')\n        if not b:\n            b = '0'\n        if a == '0':\n            a = '0'\n        if int(a) == float(a):\n            a = int(a)\n        return f\"{a}E{len(b)}\" if b!= '0' else f\"{a}\"\n    else:\n        return f\"{int(x)}E0\""
    },
    {
        "number": 809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b = map(int, stdin.split())\n    if a + b < n:\n        return \"NO\"\n    if a == 0 and b == 0:\n        return \"NO\"\n    if a == 0:\n        return \"B\" * n\n    if b == 0:\n        return \"G\" * n\n    if k == 0:\n        return \"G\" * a + \"B\" * b\n    if a >= k:\n        return \"G\" * a + \"B\" * (n - a)\n    if b >= k:\n        return \"B\" * b + \"G\" * (n - b)\n    return \"NO\""
    },
    {
        "number": 810,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, n = map(int, stdin.split())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, 10**n):\n        if str(i).count(str(a)) + str(i).count(str(b)) == len(str(i)):\n            count += 1\n    return count % MOD"
    },
    {
        "number": 811,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    hours = 0\n    while a > 0:\n        hours += 1\n        a -= 1\n        if a == 0:\n            break\n        a += 1\n        b -= 1\n    return hours"
    },
    {
        "number": 812,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    for i in range(n):\n        if i == 0:\n            continue\n        if b[i] == b[i-1] + 1:\n            continue\n        if i == n-1:\n            return str(i)\n        if b[i] == b[i-1] + 2:\n            continue\n        if b[i] == b[i-1] + 3:\n            continue\n        if b[i] == b[i-1] + 4:\n            continue\n        if b[i] == b[i-1] + 5:\n            continue\n        if b[i] == b[i-1] + 6:\n            continue\n        if b[i] == b[i-1] + 7:\n            continue\n        if b[i] == b[i-1] + 8:\n            continue\n        if b[i] == b[i-1] + 9:\n            continue\n        return str(i)\n    return \"-1\""
    },
    {
        "number": 813,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    arthur_likes = list(map(int, stdin.readline().split()))\n    alexander_likes = list(map(int, stdin.readline().split()))\n    result = ['0'] * n\n    for i in range(n):\n        if i in arthur_likes:\n            result[i] = '1'\n        elif i in alexander_likes:\n            result[i] = '2'\n    return ''.join(result)"
    },
    {
        "number": 814,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            b[i] = a[i]\n        else:\n            b[i] = a[i-1]\n    return''.join(map(str, b))"
    },
    {
        "number": 815,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    V_1, V_2, V_3, V_m = map(int, stdin.split())\n    if V_1 > V_2 > V_3:\n        if V_m <= V_1:\n            return str(V_1)\n        elif V_m <= V_2:\n            return str(V_2)\n        elif V_m <= V_3:\n            return str(V_3)\n        else:\n            return \"-1\"\n    else:\n        return \"-1\""
    },
    {
        "number": 816,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] ^ a[j] == x:\n                count += 1\n    return str(count)"
    },
    {
        "number": 817,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    ans = []\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if s[i] == s[j-1]:\n                ans.append(s[:i] + s[j:])\n    ans.sort()\n    for a in ans:\n        print(len(a), a[:5] + '...' + a[-2:])\n    return ''"
    },
    {
        "number": 818,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = [2, 3, 5, 7]\n    for i in range(10, 10**n):\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 819,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = 0\n    for i in range(k):\n        res += a[i * (n // k)]\n    return str(res)"
    },
    {
        "number": 820,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.splitlines()[0].split())\n    a = list(map(int, stdin.splitlines()[1:]))\n    a.sort(reverse=True)\n    ans = 1\n    for i in range(n):\n        if m > a[i]:\n            ans += 1\n            m -= a[i]\n        else:\n            break\n    return ans"
    },
    {
        "number": 821,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, v_1, v_2, t_1, t_2 = map(int, stdin.split())\n    t_start = max(t_1, t_2)\n    t_end = t_start + s * max(v_1, v_2)\n    if t_end <= t_1:\n        return \"First\"\n    elif t_end <= t_1 + t_2:\n        return \"Second\"\n    else:\n        return \"Friendship\""
    },
    {
        "number": 822,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, z = map(int, stdin.split())\n    artists_to_kill = (z - m) // n + 1\n    return str(artists_to_kill)"
    },
    {
        "number": 823,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0 and y == 0:\n        return \"0\"\n    elif x == 0 or y == 0:\n        return \"2\"\n    else:\n        n = 1\n        while True:\n            if x == 1 and y == 1:\n                return str(n)\n            elif x == 1 or y == 1:\n                n += 1\n            elif x == -1 and y == -1:\n                n += 2\n            elif x == -1 or y == -1:\n                n += 3\n            else:\n                x, y = (x + 1) // 2, (y + 1) // 2\n                n += 1"
    },
    {
        "number": 824,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    n = len(stdin)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(i+1):\n            if j == 0:\n                dp[i][j] = 1\n            elif j == i:\n                if stdin[j-1] == \")\":\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = 0\n            else:\n                if stdin[j-1] == \"(\" and stdin[i-1] == \")\":\n                    dp[i][j] = (dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1]) % MOD\n                else:\n                    dp[i][j] = dp[i-1][j]\n    return dp[n][0]"
    },
    {
        "number": 825,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n > 1:\n        count += 1\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                z = i\n                break\n        else:\n            z = n\n        n //= z\n    return str(count)"
    },
    {
        "number": 826,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    logs = [1] * (n+1)\n    logs[0] = 0\n    dp = [0] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        dp[i] = float('inf')\n        for j in range(i+1):\n            if logs[j] <= i:\n                dp[i] = min(dp[i], dp[j] + logs[i])\n        dp[i] += 1\n    return str(dp[n])"
    },
    {
        "number": 827,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = stdin.readline().strip()\n    s = '110' * 10**10\n    count = 0\n    for i in range(len(s)-n+1):\n        if s[i:i+n] == t:\n            count += 1\n    return str(count)"
    },
    {
        "number": 828,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n    return count"
    },
    {
        "number": 829,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    k = 0\n    for i in range(1, n+1):\n        if s[:i].count('0')!= s[:i].count('1'):\n            k += 1\n    if k == 0:\n        return \"1\\n\" + s\n    else:\n        return str(k) + \"\\n\" + \" \".join(s[i-k:i] for i in range(k, n+1, k))"
    },
    {
        "number": 830,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    s = sum(a)\n    m = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n                m += 1\n                if m == k:\n                    break\n        if m == k:\n            break\n    if m == k:\n        print(0, m)\n        for i in range(m):\n            print(i+1, i+2)\n    else:\n        print(s, m)\n        for i in range(m):\n            print(i+1, i+2)"
    },
    {
        "number": 831,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.split()[0]\n    n = int(stdin.split()[1])\n    strings = []\n    max_chars = []\n    for i in range(n):\n        s, a = stdin.split()[2*i+2], int(stdin.split()[2*i+3])\n        strings.append(s)\n        max_chars.append(a)\n    dp = [[0]*(len(t)+1) for _ in range(n+1)]\n    for i in range(n+1):\n        for j in range(len(t)+1):\n            if i == 0:\n                dp[i][j] = 0\n            elif j == 0:\n                dp[i][j] = 0\n            elif strings[i-1][j-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = float('inf')\n                for k in range(1, max_chars[i-1]+1):\n                    if j-k >= 0 and strings[i-1][j-k] == t[j-1]:\n                        dp[i][j] = min(dp[i][j], dp[i-1][j-k]+k)\n    if dp[n][len(t)] == float('inf'):\n        return -1\n    else:\n        return dp[n][len(t)]"
    },
    {
        "number": 832,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    teams = []\n    for i in range(n):\n        h, a = map(int, stdin.readline().strip().split())\n        teams.append((h, a))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if teams[i][0] == teams[j][1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 833,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    trees = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        trees.append((a, b))\n    trees.sort(key=lambda x: x[0])\n    max_fruits = 0\n    current_fruits = 0\n    for i in range(n):\n        a, b = trees[i]\n        if current_fruits + b <= v:\n            current_fruits += b\n        else:\n            max_fruits += v - current_fruits\n            current_fruits = v\n    max_fruits += current_fruits\n    return str(max_fruits)"
    },
    {
        "number": 834,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    f = list(map(int, stdin.split()[1:]))\n    k = 1\n    while True:\n        if all(f[i] == f[i] for i in range(n)):\n            return str(k)\n        k += 1\n        f = [f[i] for i in range(n)]\n        for i in range(n):\n            f[i] = f[f[i]-1]"
    },
    {
        "number": 835,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    recipe, n_b, n_s, n_c, p_b, p_s, p_c, r = stdin.split()\n    n_b, n_s, n_c, p_b, p_s, p_c, r = int(n_b), int(n_s), int(n_c), int(p_b), int(p_s), int(p_c), int(r)\n    max_hamburgers = 0\n    for i in range(1, n_b+1):\n        for j in range(1, n_s+1):\n            for k in range(1, n_c+1):\n                if i*p_b + j*p_s + k*p_c <= r:\n                    max_hamburgers += 1\n    return str(max_hamburgers)"
    },
    {
        "number": 836,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    segments = stdin.split()[1]\n    houses = segments.count(\"H\")\n    shops = segments.count(\"S\")\n    if houses == 0 or shops == 0:\n        return \"-1\"\n    if houses == shops:\n        return \"0\"\n    if houses > shops:\n        return str(houses - shops)\n    if shops > houses:\n        return str(shops - houses)"
    },
    {
        "number": 837,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    t = 0\n    while n > 0:\n        if n % 2 == 0:\n            t += x + y\n        else:\n            t += x\n        n //= 2\n    return str(t)"
    },
    {
        "number": 838,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = []\n    for i in range(n):\n        row = list(map(int, stdin.readline().split()))\n        table.append(row)\n\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 0:\n                continue\n            for k in range(i+1, n):\n                for l in range(j+1, m):\n                    if table[k][l] == 0:\n                        continue\n                    if (i == k or j == l) and (table[i][j]!= table[k][l]):\n                        count += 1\n                    if (i == k or j == l) and (table[i][j] == table[k][l]):\n                        count += 1\n    return count"
    },
    {
        "number": 839,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    n = 5\n    g = [[0] * n for _ in range(n)]\n    for i in range(n):\n        g[i] = list(map(int, lines[i].split()))\n\n    # Initialize variables\n    total_happiness = 0\n    happiness = [0] * n\n    order = [0] * n\n    for i in range(n):\n        happiness[i] = g[i][i]\n        order[i] = i\n\n    # Calculate total happiness\n    for i in range(n):\n        for j in range(i+1, n):\n            if order[i] > order[j]:\n                total_happiness += g[i][j]\n                happiness[i] += g[i][j]\n                happiness[j] += g[j][i]\n\n    # Find maximum total happiness\n    max_happiness = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if order[i] > order[j]:\n                total_happiness = happiness[i] + happiness[j]\n                if total_happiness > max_happiness:\n                    max_happiness = total_happiness\n\n    return str(max_happiness)"
    },
    {
        "number": 840,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    a.sort()\n    b.sort()\n    i = j = 0\n    cookies = 0\n    while i < n and j < n:\n        if a[i] <= b[j]:\n            cookies += a[i] // k\n            i += 1\n        else:\n            j += 1\n    return cookies"
    },
    {
        "number": 841,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = '1337'\n        while len(s) < n:\n            s += '1337'\n        s = s[:n]\n        print(s)"
    },
    {
        "number": 842,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    num = 1\n    while count < n:\n        if str(num) == str(num)[::-1] and len(str(num)) % 2 == 0:\n            count += 1\n        num += 1\n    return num - 1"
    },
    {
        "number": 843,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    instructions = stdin.readline().strip()\n    lengths = list(map(int, stdin.readline().strip().split()))\n    if instructions.count('>') > instructions.count('<'):\n        return \"INFINITE\"\n    else:\n        return \"FINITE\""
    },
    {
        "number": 844,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    max_len = 0\n    count_0 = 0\n    count_1 = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if s[i] == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        while count_0 > count_1:\n            if s[start] == '0':\n                count_0 -= 1\n            else:\n                count_1 -= 1\n            start += 1\n        while count_0 < count_1:\n            if s[end] == '1':\n                count_1 += 1\n            else:\n                count_0 += 1\n            end += 1\n        if end - start > max_len:\n            max_len = end - start\n    if max_len == 0:\n        return '0'\n    else:\n        return str(max_len)"
    },
    {
        "number": 845,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    direction, sequence = stdin.split('\\n')\n    keyboard = {\n        'q': 'w', 'w': 'e', 'e': 'r', 'r': 't', 't': 'y', 'y': 'u', 'u': 'i', 'i': 'o', 'o': 'p',\n        'a':'s','s': 'd', 'd': 'f', 'f': 'g', 'g': 'h', 'h': 'j', 'j': 'k', 'k': 'l', ';': ':',\n        'z': 'x', 'x': 'c', 'c': 'v', 'v': 'b', 'b': 'n', 'n':'m', ',': '.', '.': '/', '/':'',\n        'Q': 'W', 'W': 'E', 'E': 'R', 'R': 'T', 'T': 'Y', 'Y': 'U', 'U': 'I', 'I': 'O', 'O': 'P',\n        'A': 'S', 'S': 'D', 'D': 'F', 'F': 'G', 'G': 'H', 'H': 'J', 'J': 'K', 'K': 'L', ':': ';',\n        'Z': 'X', 'X': 'C', 'C': 'V', 'V': 'B', 'B': 'N', 'N': 'M', '<': '>', '?': '?', '@': '@',\n        '[': '{', ']': '}', '\\\\': '|', '^': '^', '_': '_', '`': '`', '{': '[', '}': ']', '|': '\\\\',\n        '~': '~', '!': '1', '@': '2', '#': '3', '$': '4', '%': '5', '^': '6', '&': '7', '*': '8',\n        '(': '9', ')': '0', '-': '-', '=': '=', '+': '+', '{': '{', '}': '}', '|': '|', '\\\\': '\\\\',\n        ';': ':', '\\'': '\\'', '\\\"': '\\\"', ',': '<', '.': '>', '/': '?', '<': ',', '>': '.', '?': '/',\n        '@': '@', '[': '[', ']': ']', '\\\\': '|', '^': '^', '_': '_', '`': '`', '{': '{', '}': '}',\n        '|': '|', '~': '~', '!': '!', '@': '@', '#': '#', '$': '$', '%': '%', '^': '^', '&': '&',\n        '*': '*', '(': '(', ')': ')', '-': '-', '=': '=', '+': '+', '{': '{', '}': '}', '|': '|',\n        '\\\\': '\\\\', ';': ';', '\\'': '\\'', '\\\"': '\\\"', ',': ',', '.': '.', '/': '/', '<': '<', '>': '>',\n        '?': '?'\n    }\n    if direction == 'L':\n        sequence = sequence.replace(';', ':').replace(',', '<').replace('.', '>').replace('/', '?')\n    else:\n        sequence = sequence.replace(':', ';').replace('<', ',').replace('>', '.').replace('?', '/')\n    message = ''\n    for char in sequence:\n        if char in keyboard:\n            message += keyboard[char]\n        else:\n            message += char\n    return message"
    },
    {
        "number": 846,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    buttons = list(map(int, stdin.split()))\n    lights = [True] * n\n    for button in buttons:\n        for i in range(button, n):\n            if lights[i]:\n                lights[i] = False\n                print(i+1, end=' ')\n    return ''"
    },
    {
        "number": 847,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    cards = list(map(int, stdin.readline().split()))\n    cards.sort()\n    left, right = 0, x\n    while left < right:\n        mid = (left + right) // 2\n        if sum(c for c in cards if abs(c) <= mid) == 0:\n            right = mid\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "number": 848,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n*(n-1)//2:\n        return \"-1\"\n    matches = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            matches.append((i, j))\n    return str(len(matches)) + \"\\n\" + \"\\n\".join(map(str, matches))"
    },
    {
        "number": 849,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c, d = map(int, stdin.split())\n    p1 = a / b\n    p2 = c / d\n    if p1 > p2:\n        return str(p1)\n    else:\n        return str(p2)"
    },
    {
        "number": 850,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, *ds = map(int, stdin.split())\n    ds = sorted(ds, reverse=True)\n    n = 0\n    for i in range(k):\n        if ds[i] == 0:\n            n = i\n            break\n    if n == 0:\n        return \"0\\n\"\n    ans = []\n    for i in range(n):\n        ans.append(ds[i])\n    for i in range(n, k):\n        if ds[i] == 0:\n            continue\n        for j in range(i):\n            if ds[j] == 0:\n                continue\n            if ds[i] + ds[j] == 0:\n                ans.append(ds[i])\n                ans.append(ds[j])\n                break\n    return f\"{len(ans)}\\n{' '.join(map(str, ans))}\\n\""
    },
    {
        "number": 851,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    bars = stdin.strip().split()[1]\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 1 if bars[1] == '0' else 0\n    for i in range(2, n):\n        if bars[i] == '0':\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = dp[i-1] + dp[i-2]\n    return str(dp[n-1] - 1)"
    },
    {
        "number": 852,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for i in range(int(stdin.split()[0])):\n        n, k, l = map(int, stdin.readline().split())\n        d = list(map(int, stdin.readline().split()))\n        p = [0] * (2 * k)\n        for j in range(k):\n            p[j] = 1\n            p[j + k] = -1\n        x = 0\n        for t in range(2 * k):\n            x += p[t % (2 * k)]\n            if x > n:\n                return \"No\"\n            if x == n and d[n] + p[t % (2 * k)] > l:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 853,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if cards[i] == 5:\n            count += 1\n    if count == 0:\n        return \"-1\"\n    else:\n        return str(90 * (count // 90))"
    },
    {
        "number": 854,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total_candy = 0\n    for i in range(n):\n        if T >= a[i]:\n            total_candy += 1\n            T -= a[i]\n        else:\n            break\n    print(total_candy)\n    return str(total_candy)"
    },
    {
        "number": 855,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, a, b = map(int, stdin.split()[0:3])\n    alice_choices = []\n    bob_choices = []\n    for i in range(k):\n        alice_choices.append(list(map(int, stdin.split()[0:3])))\n        bob_choices.append(list(map(int, stdin.split()[3:6])))\n    alice_score = 0\n    bob_score = 0\n    for i in range(k):\n        if alice_choices[i][0] == bob_choices[i][0]:\n            alice_score += 0\n            bob_score += 0\n        elif alice_choices[i][0] == 1 and bob_choices[i][0] == 2:\n            alice_score += 3\n            bob_score += 0\n        elif alice_choices[i][0] == 2 and bob_choices[i][0] == 3:\n            alice_score += 2\n            bob_score += 0\n        elif alice_choices[i][0] == 3 and bob_choices[i][0] == 1:\n            alice_score += 0\n            bob_score += 3\n        elif alice_choices[i][0] == 1 and bob_choices[i][0] == 3:\n            alice_score += 0\n            bob_score += 2\n        elif alice_choices[i][0] == 2 and bob_choices[i][0] == 1:\n            alice_score += 0\n            bob_score += 1\n    return f\"{alice_score} {bob_score}\""
    },
    {
        "number": 856,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    cases = int(stdin.readline().strip())\n    for case in range(cases):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        d = max(a)\n        for i in range(k):\n            for j in range(n):\n                a[j] = d - a[j]\n        print(' '.join(map(str, a)))"
    },
    {
        "number": 857,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n\n    # create a dictionary to store the fingerprinted keys\n    fingerprinted_keys = {}\n    for i in range(m):\n        fingerprinted_keys[y[i]] = True\n\n    # create a dictionary to store the indices of the fingerprinted keys in the sequence\n    fingerprinted_indices = {}\n    for i in range(n):\n        if x[i] in fingerprinted_keys:\n            fingerprinted_indices[i] = True\n\n    # find the longest subsequence of fingerprinted indices\n    longest_subsequence = []\n    current_subsequence = []\n    for i in range(n):\n        if i in fingerprinted_indices:\n            current_subsequence.append(i)\n        else:\n            if len(current_subsequence) > len(longest_subsequence):\n                longest_subsequence = current_subsequence\n            current_subsequence = []\n\n    # convert the indices to the corresponding digits and print the subsequence\n    if len(longest_subsequence) == 0:\n        return \"\"\n    else:\n        return \" \".join(map(str, [x[i] for i in longest_subsequence]))"
    },
    {
        "number": 858,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin)\n    return str(N // 2 + 1)"
    },
    {
        "number": 859,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s_1, s_2 = stdin.split('\\n')\n    n = len(s_1)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for gap in range(1, n):\n        for i in range(n - gap):\n            j = i + gap\n            if s_1[i] == s_2[i] == '+':\n                dp[i][j] = dp[i+1][j] + dp[i][j-1]\n            elif s_1[i] == s_2[i] == '-':\n                dp[i][j] = dp[i+1][j] + dp[i][j-1]\n            elif s_1[i] == s_2[i] == '?':\n                dp[i][j] = dp[i+1][j] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i+1][j] + dp[i][j-1] + dp[i+1][j-1]\n    return str(dp[0][n-1])"
    },
    {
        "number": 860,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if sum(a) % 3!= 0:\n        return \"Impossible\"\n    a = [i for i in range(1, n+1)] + a\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1] += a[i]\n    a = a[n:]\n    for i in range(n):\n        a[i+1]"
    },
    {
        "number": 861,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, R = map(int, stdin.split())\n    total_distance = 0\n    for i in range(m**2):\n        v = (i // m) + 1\n        u = m + 1 + (i % m)\n        distance
    },
    {
        "number": 862,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    i = 0\n    while i < n and a[i] == 0:\n        i += 1\n    if i == n:\n        return str(1)\n    else:\n        return str(i+1)"
    },
    {
        "number": 863,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, t_a = map(int, stdin.readline().split())\n    b, t_b = map(int, stdin.readline().split())\n    departure_time = stdin.readline().strip()\n    departure_hour, departure_minute = map(int, departure_time.split(':'))\n    departure_time = departure_hour * 60 + departure_minute\n    bus_arrival_time = [0]\n    for i in range(a):\n        bus_arrival_time.append((i+1)*t_a)\n    for i in range(b):\n        bus_arrival_time.append((i+1)*t_b)\n    bus_arrival_time.sort()\n    count = 0\n    for i in range(len(bus_arrival_time)):\n        if bus_arrival_time[i] >= departure_time:\n            count += 1\n    return str(count)"
    },
    {
        "number": 864,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i % m]\n    days = 1\n    for i in range(1, n):\n        if b[i]!= b[i-1]:\n            days += 1\n    if days == n:\n        return str(days)\n    else:\n        return \"0\""
    },
    {
        "number": 865,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, T = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    happiness = 0\n    time_spent = 0\n    dishes_ordered = set()\n\n    # Loop through dishes\n    for i in range(N):\n        # Check if dish can be ordered\n        if A[i] + time_spent <= T - 0.5:\n            # Check if dish has already been ordered\n            if B[i] not in dishes_ordered:\n                # Order dish\n                happiness += B[i]\n                dishes_ordered.add(B[i])\n                time_spent += A[i]\n            else:\n                # Dish has already been ordered\n                continue\n        else:\n            # Cannot order dish\n            break\n\n    # Return maximum possible happiness\n    return str(happiness)"
    },
    {
        "number": 866,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (y+1) for _ in range(x+1)]\n    dp[0][0] = 1\n    for i in range(x+1):\n        for j in range(y+1):\n            if i+1 <= x:\n                dp[i+1][j] += dp[i][j]\n                dp[i+1][j] %= MOD\n            if j+1 <= y:\n                dp[i][j+1] += dp[i][j]\n                dp[i][j+1] %= MOD\n            if i+2 <= x:\n                dp[i+2][j+1] += dp[i][j]\n                dp[i+2][j+1] %= MOD\n            if j+2 <= y:\n                dp[i+1][j+2] += dp[i][j]\n                dp[i+1][j+2] %= MOD\n    return str(dp[x][y])"
    },
    {
        "number": 867,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"1\"\n    elif N == 2:\n        return \"2\"\n    else:\n        return str(N - 1)\n\nprint(solution(\"1\")) # Output: 1\nprint(solution(\"4\")) # Output: 2"
    },
    {
        "number": 868,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 1378 ** n\n    return str(result % 10)"
    },
    {
        "number": 869,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0 or b == 0:\n        return \"0 0\"\n    if a == 1 or b == 1:\n        return \"1 1\"\n    if a == 2 or b == 2:\n        return \"2 0\"\n    if a == 3 or b == 3:\n        return \"3 2\"\n    if a == 4 or b == 4:\n        return \"4 1\"\n    if a == 5 or b == 5:\n        return \"5 0\"\n    if a == 6 or b == 6:\n        return \"6 0\"\n    if a == 7 or b == 7:\n        return \"7 0\"\n    if a == 8 or b == 8:\n        return \"8 0\"\n    if a == 9 or b == 9:\n        return \"9 0\"\n    if a == 10 or b == 10:\n        return \"10 0\"\n    if a == 11 or b == 11:\n        return \"11 0\"\n    if a == 12 or b == 12:\n        return \"12 0\"\n    if a == 13 or b == 13:\n        return \"13 0\"\n    if a == 14 or b == 14:\n        return \"14 0\"\n    if a == 15 or b == 15:\n        return \"15 0\"\n    if a == 16 or b == 16:\n        return \"16 0\"\n    if a == 17 or b == 17:\n        return \"17 0\"\n    if a == 18 or b == 18:\n        return \"18 0\"\n    if a == 19 or b == 19:\n        return \"19 0\"\n    if a == 20 or b == 20:\n        return \"20 0\"\n    if a == 21 or b == 21:\n        return \"21 0\"\n    if a == 22 or b == 22:\n        return \"22 0\"\n    if a == 23 or b == 23:\n        return \"23 0\"\n    if a == 24 or b == 24:\n        return \"24 0\"\n    if a == 25 or b == 25:\n        return \"25 0\"\n    if a == 26 or b == 26:\n        return \"26 0\"\n    if a == 27 or b == 27:\n        return \"27 0\"\n    if a == 28 or b == 28:\n        return \"28 0\"\n    if a == 29 or b == 29:\n        return \"29 0\"\n    if a == 30 or b == 30:\n        return \"30 0\"\n    if a == 31 or b == 31:\n        return \"31 0\"\n    if a == 32 or b == 32:\n        return \"32 0\"\n    if a == 33 or b == 33:\n        return \"33 0\"\n    if a == 34 or b == 34:\n        return \"34 0\"\n    if a == 35 or b == 35:\n        return \"35 0\"\n    if a == 36 or b == 36:\n        return \"36 0\"\n    if a == 37 or b == 37:\n        return \"37 0\"\n    if a == 38 or b == 38:\n        return \"38 0\"\n    if a == 39 or b == 39:\n        return \"39 0\"\n    if a == 40 or b == 40:\n        return \"40 0\"\n    if a == 41 or b == 41:\n        return \"41 0\"\n    if a == 42 or b == 42:\n        return \"42 0\"\n    if a == 43 or b == 43:\n        return \"43 0\"\n    if a == 44 or b == 44:\n        return \"44 0\"\n    if a == 45 or b == 45:\n        return \"45 0\"\n    if a == 46 or b == 46:\n        return \"46 0\"\n    if a == 47"
    },
    {
        "number": 870,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, L, v_1, v_2 = map(int, stdin.split())\n    if L < 2*d:\n        return \"0.00000000000000000000\"\n    else:\n        t = (L - d) / (v_1 + v_2)\n        return \"{:.10f}\".format(t)"
    },
    {
        "number": 871,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    landings = []\n    for i in range(n):\n        h, m = map(int, stdin.split())\n        landings.append((h, m))\n    takeoff = (0, 0)\n    for landing in landings:\n        if landing[0] * 60 + landing[1] - takeoff[0] * 60 - takeoff[1] >= s:\n            takeoff = landing\n    return f\"{takeoff[0]} {takeoff[1]}\""
    },
    {
        "number": 872,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return''.join(map(str, a))"
    },
    {
        "number": 873,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    start = stdin.readline().strip()\n    target = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if start[i]!= target[i]:\n            count += 1\n    return count"
    },
    {
        "number": 874,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"-1\"\n    else:\n        p = list(range(1, n+1))\n        for i in range(n):\n            j = i\n            while j!= i:\n                j = random.randint(0, n-1)\n            p[i], p[j] = p[j], p[i]\n        return \" \".join(map(str, p))"
    },
    {
        "number": 875,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    vertices = list(map(int, stdin.readline().strip().split()))\n    diagonals = [list(stdin.readline().strip()) for _ in range(n)]\n    stones = set(vertices)\n    if len(stones)!= 3:\n        return \"-1\"\n    if vertices[0] == vertices[1] or vertices[0] == vertices[2] or vertices[1] == vertices[2]:\n        return \"-1\"\n    if diagonals[vertices[0]-1][vertices[1]-1]!= diagonals[vertices[1]-1][vertices[2]-1] or diagonals[vertices[0]-1][vertices[1]-1]!= diagonals[vertices[0]-1][vertices[2]-1]:\n        return \"-1\"\n    if diagonals[vertices[0]-1][vertices[1]-1] == diagonals[vertices[1]-1][vertices[2]-1] and diagonals[vertices[0]-1][vertices[1]-1] == diagonals[vertices[0]-1][vertices[2]-1]:\n        return \"1\"\n    visited = set()\n    queue = [(vertices[0], vertices[1], vertices[2])]\n    while queue:\n        a, b, c = queue.pop(0)\n        if (a, b, c) in visited:\n            continue\n        visited.add((a, b, c))\n        if a == 1 and b == 2 and c == 3:\n            return \"1\"\n        for i in range(n):\n            if i == a or i == b or i == c:\n                continue\n            if diagonals[a-1][i-1] == diagonals[b-1][i-1] == diagonals[c-1][i-1]:\n                queue.append((a, b, i))\n                queue.append((a, i, c))\n                queue.append((i, b, c))\n    return \"-1\""
    },
    {
        "number": 876,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    i = 0\n    while a[i] < k:\n        i += 1\n    return i"
    },
    {
        "number": 877,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    similar = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        similar[u].append(v)\n        similar[v].append(u)\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = 1\n            elif similar[i] and j in similar[i]:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n][n]"
    },
    {
        "number": 878,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return \"Finite\\n1\"\n    if n == 2:\n        if a[0] == a[1]:\n            return \"Finite\\n2\"\n        else:\n            return \"Finite\\n3\"\n    if a[0] == a[1]:\n        return \"Finite\\n2\"\n    if a[0] == a[2]:\n        return \"Finite\\n2\"\n    if a[1] == a[2]:\n        return \"Finite\\n2\"\n    if a[0] == 1 and a[1] == 2 and a[2] == 3:\n        return \"Finite\\n7\"\n    if a[0] == 2 and a[1] == 1 and a[2] == 3:\n        return \"Finite\\n7\"\n    if a[0] == 3 and a[1] == 1 and a[2] == 2:\n        return \"Finite\\n7\"\n    if a[0] == 1 and a[1] == 3 and a[2] == 2:\n        return \"Finite\\n7\"\n    if a[0] == 2 and a[1] == 3 and a[2] == 1:\n        return \"Finite\\n7\"\n    if a[0] == 3 and a[1] == 2 and a[2] == 1:\n        return \"Finite\\n7\"\n    return \"Infinite\""
    },
    {
        "number": 879,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    path = [1]\n    i = 1\n    while i < n:\n        path.append(p[i-1])\n        i = p[i-1]\n    path.append(n)\n    return''.join(map(str, path))"
    },
    {
        "number": 880,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    p = list(range(1, n+1))\n    for i in range(n-1):\n        p.extend(p[:i+1][::-1])\n    count = 0\n    for i in range(len(p)-n+1):\n        if sum(p[i:i+n]) == n*(n+1)//2:\n            count += 1\n    return count % 998244353"
    },
    {
        "number": 881,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    while True:\n        i = 0\n        while i < n - 1:\n            if a[i] == a[i + 1]:\n                a[i] += 1\n                a.pop(i + 1)\n                n -= 1\n                count += 1\n                break\n            i += 1\n        else:\n            break\n    return str(n)"
    },
    {
        "number": 882,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    s = s.replace('?', t[0])\n    count = 0\n    for i in range(len(s)-len(t)+1):\n        if s[i:i+len(t)] == t:\n            count += 1\n    return count"
    },
    {
        "number": 883,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    fingers = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(1, 6):\n        for j in range(n):\n            if fingers[j] >= i:\n                count += 1\n        if count == n:\n            return str(i)\n        count = 0\n    return \"0\""
    },
    {
        "number": 884,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    MOD = 998244353\n    dp = [[[0] * (c+1) for _ in range(b+1)] for _ in range(a+1)]\n    for i in range(a+1):\n        for j in range(b+1):\n            for k in range(c+1):\n                if i == 0 and j == 0 and k == 0:\n                    dp[i][j][k] = 1\n                elif i == 0:\n                    dp[i][j][k] = dp[i][j-1][k] + dp[i][j][k-1]\n                elif j == 0:\n                    dp[i][j][k] = dp[i-1][j][k] + dp[i][j][k-1]\n                elif k == 0:\n                    dp[i][j][k] = dp[i-1][j][k] + dp[i][j-1][k]\n                else:\n                    dp[i][j][k] = (dp[i-1][j][k] + dp[i][j-1][k] + dp[i][j][k-1]) % MOD\n    return dp[a][b][c]"
    },
    {
        "number": 885,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    graph = [[] for _ in range(n+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    dp = [[0] * (1<<n) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1<<i] = 1\n    for k in range(1, n+1):\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                if (i & j) == 0:\n                    dp[i][j] = (dp[i][j] + dp[i][j^k]) % 998244353\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i & j) == 0:\n                ans = (ans + dp[i][j]) % 998244353\n    return str(ans)"
    },
    {
        "number": 886,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return str(n)\n    else:\n        max_rate = -1\n        for i in range(10):\n            for j in range(10):\n                if i!= j:\n                    new_rate = str(n).replace(str(i), str(j)).replace(str(j), str(i))\n                    if int(new_rate) % 2 == 0 and int(new_rate) > max_rate:\n                        max_rate = int(new_rate)\n        if max_rate == -1:\n            return \"-1\"\n        else:\n            return str(max_rate)"
    },
    {
        "number": 887,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    buttons = list(map(int, stdin.readline().strip().split()))\n    if sum(buttons) == 0:\n        return \"NO\"\n    if sum(buttons) == 1:\n        return \"YES\"\n    for i in range(n-1):\n        if buttons[i] == 1 and buttons[i+1] == 0:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 888,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    s = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = 0\n\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                dp[i][j] = dp[i-1][j-1] + abs(i-j)\n\n    k = dp[n-1][n-1]\n    operations = []\n\n    i, j = n-1, n-1\n    while i > 0 or j > 0:\n        if i == 0:\n            operations.append(f\"{i+1} {j+1}\")\n            j -= 1\n        elif j == 0:\n            operations.append(f\"{i+1} {j+1}\")\n            i -= 1\n        elif dp[i-1][j-1] + abs(i-j) == dp[i][j]:\n            operations.append(f\"{i+1} {j+1}\")\n            i -= 1\n            j -= 1\n        elif dp[i-1][j] + abs(i-j) == dp[i][j]:\n            operations.append(f\"{i+1} {j+1}\")\n            i -= 1\n        else:\n            operations.append(f\"{i+1} {j+1}\")\n            j -= 1\n\n    return f\"{k}\\n{len(operations)}\\n{' '.join(operations)}\""
    },
    {
        "number": 889,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(1, len(lines)-1):\n        for j in range(1, len(lines[i])-1):\n            if lines[i][j] == lines[i-1][j] == lines[i+1][j] == lines[i][j-1] == lines[i][j+1]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 890,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r, x = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    c.sort()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if c[j] - c[i] >= x and c[j] - c[i] <= r and c[j] - c[i] >= l:\n                count += 1\n    return count"
    },
    {
        "number": 891,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    chips = list(stdin.strip())\n    for _ in range(k):\n        new_chips = []\n        for i in range(1, n + 1):\n            white_count = 0\n            black_count = 0\n            if i == 1:\n                white_count += chips.count('W')\n                black_count += chips.count('B')\n                white_count += chips[n].count('W')\n                black_count += chips[n].count('B')\n            elif i == n:\n                white_count += chips[n - 1].count('W')\n                black_count += chips[n - 1].count('B')\n                white_count += chips[0].count('W')\n                black_count += chips[0].count('B')\n            else:\n                white_count += chips[i - 2].count('W')\n                black_count += chips[i - 2].count('B')\n                white_count += chips[i - 1].count('W')\n                black_count += chips[i - 1].count('B')\n                white_count += chips[i].count('W')\n                black_count += chips[i].count('B')\n                white_count += chips[(i + 1) % n].count('W')\n                black_count += chips[(i + 1) % n].count('B')\n            if white_count > black_count:\n                new_chips.append('W')\n            else:\n                new_chips.append('B')\n        chips = new_chips\n    return ''.join(chips)"
    },
    {
        "number": 892,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j]\n            if a[i-1] % j == 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j//a[i-1]])\n            dp[i][j] = max(dp[i][j], dp[i-1][j])\n    l = dp[n][m]\n    if l == 0:\n        return \"0 0\"\n    k_max = 0\n    for i in range(n, 0, -1):\n        if dp[i][m] == l:\n            k_max = i\n            break\n    positions = []\n    for i in range(k_max):\n        if dp[i][m] == dp[i+1][m]:\n            continue\n        positions.append(i+1)\n    return f\"{l} {k_max}\\n{' '.join(map(str, positions))}\""
    },
    {
        "number": 893,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    d, n = map(int, stdin.readline().strip().split())\n    a = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u - 1, v - 1))\n\n    # build graph\n    graph = [[] for _ in range(n)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # dfs to find connected components\n    visited = [False] * n\n    components = []\n    for i in range(n):\n        if not visited[i]:\n            component = []\n            stack = [i]\n            while stack:\n                u = stack.pop()\n                if not visited[u]:\n                    visited[u] = True\n                    component.append(u)\n                    for v in graph[u]:\n                        stack.append(v)\n            components.append(component)\n\n    # count valid sets\n    count = 0\n    for component in components:\n        if len(component) == 1:\n            count += 1\n        else:\n            # check if component satisfies conditions\n            a_min = min(a[u] for u in component)\n            a_max = max(a[u] for u in component)\n            if a_max - a_min <= d:\n                count += 1\n\n    # print result\n    return str(count % 1000000007)\n"
    },
    {
        "number": 894,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x == 0:\n        return f\"0 15 {x+y} 0\"\n    elif y == 0:\n        return f\"{x-y} 0 {x} 15\"\n    else:\n        if x > y:\n            x, y = y, x\n        if x % 2 == 0:\n            x += 1\n        if y % 2 == 0:\n            y += 1\n        return f\"{x-y} {y} {x} {y-x}\""
    },
    {
        "number": 895,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    t_list = list(map(int, stdin.split()))\n    T = int(stdin.split()[-1])\n    t_list.sort()\n    count = 1\n    for i in range(1, n):\n        if t_list[i] - t_list[i-1] > T:\n            count += 1\n    return count"
    },
    {
        "number": 896,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    for i in range(2**n):\n        for j in range(2**m):\n            c = [[0]*m for _ in range(n)]\n            for k in range(n):\n                if i & (1<<k):\n                    for l in range(m):\n                        if j & (1<<l):\n                            c[k][l] = a[k] ^ b[l]\n            if all(all(c[k][l] == 0 for l in range(m)) for k in range(n)):\n                return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, c[k])) for k in range(n))\n    return \"NO\""
    },
    {
        "number": 897,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    p = 1\n    q = 1\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        for j in range(n):\n            if b[j] == 0:\n                continue\n            if a[i] > b[j]:\n                p *= (i+1)\n                q *= (j+1)\n    if q == 1:\n        return \"0\"\n    return str((p * pow(q, -1, 10**9+7)) % (10**9+7))"
    },
    {
        "number": 898,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = [i for i in range(1, m+1) if m%i == 0]\n    return str(max(a))"
    },
    {
        "number": 899,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(M):\n        a, b, c = map(int, stdin.readline().split())\n        edges.append((a, b, c))\n\n    # Build graph\n    graph = [[] for _ in range(N)]\n    for a, b, c in edges:\n        graph[a-1].append((b-1, c))\n        graph[b-1].append((a-1, c))\n\n    # Find shortest paths\n    dist = [float('inf')] * N\n    dist[0] = 0\n    visited = [False] * N\n    stack = [(0, 0)]\n    while stack:\n        curr, prev = stack.pop()\n        if visited[curr]:\n            continue\n        visited[curr] = True\n        for next, weight in graph[curr]:\n            if not visited[next] and dist[curr] + weight < dist[next]:\n                dist[next] = dist[curr] + weight\n                stack.append((next, curr))\n\n    # Count edges not in shortest paths\n    count = 0\n    for a, b, c in edges:\n        if dist[a-1] + c!= dist[b-1]:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 900,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9+7\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == '?':\n            for j in range(10):\n                if (int(stdin[:i] + str(j) + stdin[i+1:]) % 13) == 5:\n                    count += 1\n                    count %= MOD\n    return str(count)"
    },
    {
        "number": 901,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    groups = []\n    for i in range(m):\n        k = int(stdin.readline().strip())\n        group = []\n        for j in range(k):\n            v = int(stdin.readline().strip())\n            if v < 0:\n                group.append((v, j))\n        groups.append(group)\n\n    # Check all possible scenarios\n    for i in range(2**n):\n        # Check if all Ricks are traitors\n        ricks = [False] * n\n        for j in range(n):\n            if i & (1 << j):\n                ricks[j] = True\n        if all(ricks):\n            continue\n\n        # Check if all Mortys are traitors\n        mortys = [False] * n\n        for j in range(n):\n            if i & (1 << j):\n                mortys[j] = True\n        if all(mortys):\n            continue\n\n        # Check if there's a group where all members are traitors\n        for group in groups:\n            traitors = [False] * n\n            for j in range(len(group)):\n                v, j = group[j]\n                if v < 0:\n                    traitors[-v-1] = True\n                else:\n                    traitors[v-1] = True\n            if all(traitors):\n                return \"YES\"\n\n    return \"NO\""
    },
    {
        "number": 902,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    i = 0\n    while count < k:\n        if i == n-1:\n            i = 0\n        elif a[i] > a[i+1]:\n            i += 1\n        else:\n            i += 2\n        count += 1\n    return a[i]"
    },
    {
        "number": 903,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if k >= n // 2:\n        return a[-1]\n    else:\n        return a[k]"
    },
    {
        "number": 904,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    text = stdin.readline().strip()\n    max_volume = 0\n    for word in text.split():\n        volume = sum(1 for c in word if c.isupper())\n        max_volume = max(max_volume, volume)\n    return str(max_volume)"
    },
    {
        "number": 905,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    sugars = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        sugars.append((x*100 + y, i))\n    sugars.sort(reverse=True)\n    for i in range(n):\n        if sugars[i][0] <= s:\n            return sugars[i][0]\n    return -1"
    },
    {
        "number": 906,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    MOD = 10**9 + 7\n    if k == 1:\n        return pow(2, n*m, MOD)\n    elif k == -1:\n        return pow(2, (n+m-2)*min(n, m), MOD)\n    else:\n        return 0"
    },
    {
        "number": 907,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        pairs.append((a, b))\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if all(x == i or x == j for pair in pairs for x in pair):\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 908,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    c = list(map(int, stdin.readline().strip().split()))\n    s = [stdin.readline().strip() for _ in range(n)]\n\n    # check if it is possible to reverse some of the strings such that they will be located in lexicographical order\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j] and c[i] + c[j] > 0:\n                return -1\n\n    # calculate the minimum total amount of energy Vasiliy has to spent\n    energy = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] > s[j]:\n                energy += c[i] + c[j]\n\n    return energy"
    },
    {
        "number": 909,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    return max(a + b * c, a * (b + c), a * b * c)"
    },
    {
        "number": 910,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    if a*b < n:\n        return \"-1\"\n    seats = [[0]*b for _ in range(a)]\n    for i in range(n):\n        if i % 2 == 0:\n            party = \"R\"\n        else:\n            party = \"D\"\n        row = i // b\n        col = i % b\n        neighbours = [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]\n        for r, c in neighbours:\n            if 0 <= r < a and 0 <= c < b and seats[r][c]!= 0 and seats[r][c] % 2 == i % 2:\n                return \"-1\"\n        seats[row][col] = i\n    return \"\\n\".join(\" \".join(map(str, row)) for row in seats)"
    },
    {
        "number": 911,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2+n]))\n    t = list(map(int, stdin.split()[2+n:]))\n    p.sort()\n    t.sort()\n    s = [0] * n\n    for i in range(n):\n        s[i] = p[i] - c * t[i]\n    s.sort(reverse=True)\n    if s[0] > s[1]:\n        return \"Limak\"\n    elif s[0] < s[1]:\n        return \"Radewoosh\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 912,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, s, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        if s in a:\n            print(0)\n            continue\n        if s > a[0]:\n            print(s - a[0])\n            continue\n        if s < a[-1]:\n            print(s - a[-1])\n            continue\n        if s - a[0] <= a[-1] - s:\n            print(s - a[0])\n            continue\n        print(s - a[-1])\n    return \"\""
    },
    {
        "number": 913,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    r = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    p = [0] * n\n    for i in range(n):\n        if r[i] == 1:\n            p[i] = 1\n        elif b[i] == 1:\n            p[i] = 2\n    if max(p) == 0:\n        return '-1'\n    else:\n        return str(max(p))"
    },
    {
        "number": 914,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin.strip().split()\n    n = int(n)\n    if len(set(s))!= n:\n        return -1\n    return str(n) + s"
    },
    {
        "number": 915,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = 10\n    s = 'abcdefghij'\n    res = ''\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = s[i:j]\n            count = sub.count('codeforces')\n            if count >= k:\n                res = sub if len(sub) < len(res) else res\n    return res"
    },
    {
        "number": 916,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    p = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if p[i] == 0:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i][j-1] + dp[p[i]][j-a[i]]\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if dp[i][j] > 0:\n                ans += 1\n    return str(ans)"
    },
    {
        "number": 917,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, m = map(int, stdin.split())\n    restrictions = []\n    for i in range(m):\n        l, r, x = map(int, stdin.split())\n        restrictions.append((l, r, x))\n    dp = [0] * (h+1)\n    dp[0] = 0\n    for i in range(1, h+1):\n        dp[i] = dp[i-1]\n        for l, r, x in restrictions:\n            if i >= x:\n                dp[i] = max(dp[i], dp[i-x] + (i-x)**2)\n    return dp[h]"
    },
    {
        "number": 918,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    participants = []\n    for i in range(n):\n        surname, region, score = stdin.split()\n        participants.append((surname, int(region), int(score)))\n    participants.sort(key=lambda x: (-x[2], x[1]))\n    teams = [[] for _ in range(m)]\n    for surname, region, score in participants:\n        if not teams[region]:\n            teams[region].append(surname)\n        elif surname not in teams[region]:\n            teams[region].append(surname)\n            teams[region].sort()\n            if teams[region] == [participants[i][0] for i in range(n) if participants[i][1] == region]:\n                continue\n            else:\n                teams[region] = ['?']\n                break\n    return '\\n'.join([' '.join(team) if team!= ['?'] else '?' for team in teams])"
    },
    {
        "number": 919,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    if k > n:\n        return -1\n    weights = [ord(c) - ord('a') + 1 for c in s]\n    weights.sort()\n    if k == 1:\n        return weights[0]\n    if k == 2:\n        return weights[0] + weights[1]\n    if k == n:\n        return sum(weights)\n    if k == n-1:\n        return sum(weights[:-1])\n    return -1"
    },
    {
        "number": 920,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    guardposts = []\n    for i in range(4):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        guardposts.append((a, b, c, d))\n    for i in range(4):\n        for j in range(i+1, 4):\n            if guardposts[i][0] <= n and guardposts[i][1] <= n and guardposts[j][2] <= n and guardposts[j][3] <= n:\n                if n - guardposts[i][0] - guardposts[i][1] - guardposts[j][2] - guardposts[j][3] == 0:\n                    return f\"{i+1} {guardposts[i][0]} {guardposts[i][1]} {guardposts[j][2]} {guardposts[j][3]}\"\n    return \"-1\""
    },
    {
        "number": 921,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    cups = [0] * n\n    for i in range(n):\n        if a[i] > w:\n            return \"-1\"\n        cups[i] = a[i]\n    cups.sort(reverse=True)\n    for i in range(n):\n        if cups[i] < w // 2:\n            return \"-1\"\n        if cups[i] > w - sum(cups[:i]) - sum(cups[i+1:]):\n            return \"-1\"\n        cups[i] = w - sum(cups[:i]) - sum(cups[i+1:])\n    return \" \".join(map(str, cups))"
    },
    {
        "number": 922,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    b = [0] * n\n    for i in range(n):\n        for j in range(1, d[i]+1):\n            if A-j < 0:\n                break\n            if A-j >= d[i]:\n                b[i] += 1\n    return''.join(map(str, b))"
    },
    {
        "number": 923,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return \"Yes\" if a[0] == 0 else \"No\"\n    for i in range(n):\n        if a[i]!= i:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 924,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    l_a, r_a, t_a = map(int, stdin.readline().split())\n    l_b, r_b, t_b = map(int, stdin.readline().split())\n\n    # find the maximum number of consecutive days that are lucky for both Alice and Bob\n    max_days = 0\n    for k in range(t_a // t_b + 1):\n        # check if the current day is lucky for both Alice and Bob\n        if l_a + k * t_a <= r_b + k * t_b <= r_a + k * t_a:\n            # update the maximum number of consecutive days\n            max_days = max(max_days, k + 1)\n\n    return str(max_days)"
    },
    {
        "number": 925,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(10):\n        for j in range(10):\n            if i*10 + j == n:\n                continue\n            if i*10 + j < n:\n                count += 1\n            else:\n                break\n    return count"
    },
    {
        "number": 926,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    stones = []\n    for i in range(n):\n        a, b, c = map(int, stdin.readline().strip().split())\n        stones.append((a, b, c))\n    stones.sort(key=lambda x: x[0]*x[1]*x[2], reverse=True)\n    k = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if stones[i][0] == stones[j][0] and stones[i][1] == stones[j][1] and stones[i][2] == stones[j][2]:\n                continue\n            if stones[i][0] == stones[j][0] or stones[i][1] == stones[j][1] or stones[i][2] == stones[j][2]:\n                k += 2\n                break\n    print(k)\n    if k == 1:\n        print(1)\n    else:\n        print(1, n)\n    return \"\""
    },
    {
        "number": 927,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        for j in range(m):\n            if a[j] <= i:\n                dp[i] += dp[i - a[j]]\n    return str(dp[n])"
    },
    {
        "number": 928,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    sum_ = 0\n    start = 0\n\n    # Loop through the array\n    for end in range(N):\n        # Add the current element to the sum\n        sum_ += A[end]\n\n        # Check if the sum is greater than or equal to K\n        while sum_ >= K:\n            # Check if the subsequence is different from the previous one\n            if end - start > 0 and A[start:end+1]!= A[start+1:end+2]:\n                count += 1\n\n            # Update the sum and start index\n            sum_ -= A[start]\n            start += 1\n\n    # Return the count\n    return str(count)"
    },
    {
        "number": 929,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.split()[0].split())\n    coins = [list(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n\n    # Initialize variables\n    visited = [[False] * W for _ in range(H)]\n    even_cells = []\n\n    # DFS to find cells with even number of coins\n    def dfs(i, j):\n        if visited[i][j]:\n            return\n        visited[i][j] = True\n        if coins[i][j] % 2 == 0:\n            even_cells.append((i, j))\n        for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= ni < H and 0 <= nj < W:\n                dfs(ni, nj)\n\n    # DFS to find all possible moves\n    def find_moves(i, j):\n        if coins[i][j] % 2 == 1:\n            return []\n        moves = []\n        for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= ni < H and 0 <= nj < W and not visited[ni][nj]:\n                moves.append((i, j, ni, nj))\n        return moves\n\n    # Main loop\n    for i in range(H):\n        for j in range(W):\n            dfs(i, j)\n\n    # Find moves for each cell with even number of coins\n    moves = []\n    for i, j in even_cells:\n        for ni, nj in find_moves(i, j):\n            moves.append((i, j, ni, nj))\n\n    # Print moves\n    print(len(moves))\n    for i, j, ni, nj in moves:\n        print(i+1, j+1, ni+1, nj+1)\n\n    return \"\""
    },
    {
        "number": 930,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(n+1):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n    return dp[n][k]"
    },
    {
        "number": 931,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, x, y, z, p = map(int, stdin.split())\n    candies = []\n    for i in range(p):\n        x_k, y_k = map(int, stdin.readline().split())\n        candies.append((x_k, y_k))\n    for i in range(x):\n        candies = [(n-1-j, i) for j, i in candies]\n    for i in range(y):\n        candies = [(j, m-1-i) for j, i in candies]\n    for i in range(z):\n        candies = [(i, j) for j, i in candies]\n    return '\\n'.join([' '.join(map(str, candy)) for candy in candies])"
    },
    {
        "number": 932,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    B = []\n    for i in range(m):\n        B.append(list(map(int, stdin.split())))\n    A = [[0 for j in range(n)] for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            A[i][j] = 1 - (1 - B[i][j]) * (1 - B[i][j])\n    if A == B:\n        print(\"YES\")\n        for row in A:\n            print(\" \".join(map(str, row)))\n    else:\n        print(\"NO\")\n    return \"\""
    },
    {
        "number": 933,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    n = len(word)\n    for i in range(n):\n        if i < n-2 and word[i] == word[i+1] == word[i+2]:\n            return word[:i] + word[i+3:]\n        if i > 1 and word[i] == word[i-1] == word[i-2]:\n            return word[:i-2] + word[i:]\n    return word"
    },
    {
        "number": 934,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    table_card, hand_cards = stdin.split('\\n')\n    table_rank, table_suit = table_card[0], table_card[1]\n    hand_ranks = [card[0] for card in hand_cards]\n    hand_suits = [card[1] for card in hand_cards]\n    if table_rank in hand_ranks or table_suit in hand_suits:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 935,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n + m == 2:\n        return \"Malvika\"\n    elif n + m == 3:\n        return \"Akshat\"\n    else:\n        return \"Malvika\" if n > m else \"Akshat\""
    },
    {
        "number": 936,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    likes = list(map(int, stdin.readline().strip().split()))\n    max_likes = 0\n    winner = None\n    for i in range(n):\n        if likes.count(likes[i]) > max_likes:\n            max_likes = likes.count(likes[i])\n            winner = likes[i]\n        elif likes.count(likes[i]) == max_likes:\n            if likes.index(likes[i]) < likes.index(winner):\n                winner = likes[i]\n    return str(winner)"
    },
    {
        "number": 937,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n\n    max_theorems = 0\n    for i in range(k, n):\n        if t[i] == 1:\n            max_theorems += a[i]\n\n    return str(max_theorems)"
    },
    {
        "number": 938,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    n = min(a, 3)\n    p = [i+1 for i in range(n)]\n    m = min(b, 4)\n    q = [i+1 for i in range(m)]\n    return f\"{n}\\n{' '.join(map(str, p))}\\n{m}\\n{' '.join(map(str, q))}\"\n\nprint(solution(\"3 3\")) # Output: 1\\n3\\n2\\n2 1\\nInput: 9 12\\nOutput: 2\\n3 6\\n4\\n1 2 4 5"
    },
    {
        "number": 939,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    dances = []\n    for i in range(m):\n        dances.append(list(map(int, stdin.split())))\n    colors = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if i in dances[j]:\n                if colors[i] == 0:\n                    colors[i] = j % 3 + 1\n                else:\n                    colors[i] = (colors[i] + 1) % 3 + 1\n    return''.join(map(str, colors))"
    },
    {
        "number": 940,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if a + b <= c or a + c <= b or b + c <= a:\n        return \"0\"\n    else:\n        return str(max(a, b, c) + 1)"
    },
    {
        "number": 941,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    n = sum([a[i] * b**(k-i-1) for i in range(k)])\n    if n % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "number": 942,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [1] * n\n    for i in range(n):\n        if a[i]!= i:\n            b[a[i]] = b[i] + 1\n    if sum(b)!= n:\n        return \"Impossible\"\n    return \"Possible\\n\" + \" \".join(map(str, b))"
    },
    {
        "number": 943,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    arr.sort()\n    even_sum = 0\n    for i in range(n):\n        even_sum += arr[i]\n        if even_sum % 2 == 1:\n            even_sum -= arr[i]\n            i -= 1\n    return even_sum"
    },
    {
        "number": 944,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, roads = map(int, stdin.split())\n    adj = [[] for _ in range(n)]\n    for u, v in [map(int, line.split()) for line in stdin.split('\\n')[1:-1]]:\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n    visited = [False] * n\n    days = 0\n    queue = [0]\n    while queue:\n        days += 1\n        size = len(queue)\n        for i in range(size):\n            u = queue.pop(0)\n            visited[u] = True\n            for v in adj[u]:\n                if not visited[v]:\n                    queue.append(v)\n    k = days // 2\n    if days % 2 == 1:\n        k += 1\n    print(k)\n    for i in range(k):\n        print(2, end=' ')\n        for j in range(n):\n            if visited[j]:\n                print(j+1, end=' ')\n        print()\n        for j in range(n):\n            if not visited[j]:\n                print(1, end=' ')\n                print(j+1, end=' ')\n        print()\n    return ''"
    },
    {
        "number": 945,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n    points = [(x, 0) for x in points]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0] > points[j][0]:\n                points[i], points[j] = points[j], points[i]\n    for i in range(n):\n        for j in range(i+2, n):\n            if points[i][0]"
    },
    {
        "number": 946,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    responses = [int(x) for x in stdin.readline().strip().split()]\n    if any(responses):\n        return \"HARD\"\n    else:\n        return \"EASY\""
    },
    {
        "number": 947,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        for a in range(1, n):\n            for b in range(a+1, n):\n                if (a+b)%2 == 0 and (a+b)%3 == 0 and (a+b)%5 == 0 and (a+b)%7 == 0:\n                    if (a*b)%(a+b) == 0:\n                        print(a, b)\n                        break"
    },
    {
        "number": 948,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    image = []\n    for i in range(n):\n        image.append(stdin.readline().strip())\n    count = 0\n    for i in range(n-1):\n        for j in range(m-1):\n            if image[i][j:j+2] == 'cf' or image[i+1][j:j+2] == 'cf' or image[i][j:j+2] == 'ae' or image[i+1][j:j+2] == 'ae':\n                count += 1\n    return str(count)"
    },
    {
        "number": 949,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == b:\n        return str(a)\n    if a > b:\n        a, b = b, a\n    for i in range(b, a - 1, -1):\n        if a % i == 0 and b % i == 0:\n            return str(i)"
    },
    {
        "number": 950,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    pointers = [1] * n\n    count = 0\n    for i in range(n):\n        if strings[i][pointers[i]-1].isdigit():\n            count += 1\n        if strings[i][pointers[i]-1].islower():\n            count += 1\n        if strings[i][pointers[i]-1] in ['#', '*', '&']:\n            count += 1\n    return count"
    },
    {
        "number": 951,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    count = 0\n    while n > 0:\n        n, digit = divmod(n, 10)\n        if digit < k:\n            count += 1\n    return count"
    },
    {
        "number": 952,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = []\n    for i in range(m):\n        u, v, c = map(int, stdin.split())\n        roads.append((u, v, c))\n    roads.sort(key=lambda x: x[2])\n    visited = [False] * n\n    visited[0] = True\n    stack = [0]\n    count = 0\n    while stack:\n        node = stack.pop()\n        for i in range(len(roads)):\n            if roads[i][0] == node:\n                if not visited[roads[i][1]]:\n                    visited[roads[i][1]] = True\n                    stack.append(roads[i][1])\n                    count += 1\n            elif roads[i][1] == node:\n                if not visited[roads[i][0]]:\n                    visited[roads[i][0]] = True\n                    stack.append(roads[i][0])\n                    count += 1\n    if count < n:\n        return \"No solution\"\n    else:\n        k = 0\n        for i in range(m):\n            if roads[i][2] > count:\n                k += 1\n        print(count, k)\n        res = []\n        for i in range(m):\n            if roads[i][2] > count:\n                res.append(i+1)\n        return \" \".join(map(str, res))"
    },
    {
        "number": 953,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    A = []\n    for i in range(n):\n        A.append(list(map(int, stdin.readline().strip())))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for k in range(2, n + 1):\n        for i in range(n - k + 1):\n            j = i + k - 1\n            if A[i][j] == 1:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = 0\n                for m in range(i, j):\n                    dp[i][j] += dp[i][m] * dp[m + 1][j]\n    ans = []\n    for i in range(n):\n        ans.append(p[dp[0][i] - 1])\n    return''.join(map(str, ans))"
    },
    {
        "number": 954,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 1\n    for i in range(1, n):\n        if s[i] < s[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 955,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prices = []\n    for i in range(n):\n        price, vits = stdin.readline().strip().split()\n        prices.append((int(price), set(vits)))\n\n    vitamins = set(['A', 'B', 'C'])\n    for price, vits in prices:\n        vitamins &= vits\n        if len(vitamins) == 0:\n            return -1\n\n    return sum(price for price, vits in prices if 'A' in vits and 'B' in vits and 'C' in vits)"
    },
    {
        "number": 957,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if 'heidi' in s:\n        return 'YES'\n    else:\n        return 'NO'"
    },
    {
        "number": 958,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(ord(s[i]) - ord(s[j])) == k:\n                return s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n    return \"-1\""
    },
    {
        "number": 959,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, mod = map(int, stdin.readline().split())\n    matrix = []\n    for i in range(m):\n        matrix.append(list(map(int, stdin.readline().strip())))\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if matrix[i][j] == 1:\n                count += 1\n    if count % 2!= 0:\n        return str(mod - 1)\n    else:\n        return str(count // 2)"
    },
    {
        "number": 960,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = 1\n    while True:\n        if (x // k) * (x % k) == n:\n            return str(x)\n        x += 1"
    },
    {
        "number": 961,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    segments = []\n    segment = []\n    for i in range(n):\n        segment.append(a[i])\n        if i == n-1 or a[i]!= a[i+1]:\n            segments.append(segment)\n            segment = []\n    max_comfort = 0\n    for segment in segments:\n        xor_sum = 0\n        for city in set(segment):\n            xor_sum ^= city\n        max_comfort += xor_sum\n    return max_comfort"
    },
    {
        "number": 962,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n\n    # Check if there exists an induced subgraph of G that satisfies the condition\n    for i in range(1, N+1):\n        # Check if the in-degree and out-degree of vertex i are both 1\n        if all(sum(1 for j in edges if j[0] == i) == 1 and sum(1 for j in edges if j[1] == i) == 1 for edges in [edges, [(j[1], j[0]) for j in edges]]):\n            # Construct the induced subgraph\n            subgraph = [i]\n            for j in range(M):\n                if edges[j][0] == i or edges[j][1] == i:\n                    subgraph.append(edges[j][1] if edges[j][0] == i else edges[j][0])\n            # Print the induced subgraph\n            return str(len(subgraph)) + '\\n' + '\\n'.join(map(str, subgraph))\n\n    # If no induced subgraph is found, print -1\n    return '-1'"
    },
    {
        "number": 963,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    segments = []\n    for _ in range(K):\n        L, R = map(int, stdin.readline().split())\n        segments.append((L, R))\n\n    # Initialize dp array\n    dp = [0] * (N + 1)\n    dp[1] = 1\n\n    # Compute dp array\n    for i in range(2, N + 1):\n        for L, R in segments:\n            if L <= i <= R:\n                dp[i] += dp[i - L]\n                dp[i] %= 998244353\n\n    # Return result\n    return str(dp[N])"
    },
    {
        "number": 964,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1, x2, y2, x3, y3 = map(int, stdin.split())\n    if x1 + x2 + x3 > y1 + y2 + y3:\n        return \"-1\"\n    side = max(x1, x2, x3)\n    board = [['.' for _ in range(side)] for _ in range(side)]\n    for i in range(3):\n        if i == 0:\n            x, y = x1, y1\n        elif i == 1:\n            x, y = x2, y2\n        else:\n            x, y = x3, y3\n        for j in range(4):\n            if j == 0:\n                dx, dy = 0, 1\n            elif j == 1:\n                dx, dy = 1, 0\n            elif j == 2:\n                dx, dy = 0, -1\n            else:\n                dx, dy = -1, 0\n            for k in range(x):\n                for l in range(y):\n                    board[k+i*x][l+j*y] = 'A' if i == 0 else 'B' if i == 1 else 'C'\n            for k in range(x):\n                for l in range(y):\n                    board[k+i*x][l+j*y] = '.'\n    for row in board:\n        print(''.join(row))\n    return str(side)"
    },
    {
        "number": 965,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    status = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if status[i] == 'A' or status[i] == 'F':\n            continue\n        else:\n            count += 1\n    return count"
    },
    {
        "number": 966,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    y = int(stdin)\n    year = y + 1\n    while True:\n        if len(set(str(year))) == len(str(year)):\n            return str(year)\n        year += 1"
    },
    {
        "number": 967,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        if a[i]!= i+1:\n            count += 1\n    return count"
    },
    {
        "number": 968,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    handles = []\n    for i in range(n):\n        first, last = stdin.readline().strip().split()\n        handles.append((first, last))\n    p = list(map(int, stdin.readline().strip().split()))\n    if sorted(handles, key=lambda x: x[p[i-1]-1])!= sorted(handles, key=lambda x: x[i-1]):\n        return \"NO\"\n    return \"YES\""
    },
    {
        "number": 969,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split('\\n')\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n    for j in range(m+1):\n        dp[0][j] = 0\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if s[i-1] == t[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    if dp[n][m] < len(t):\n        return '-1'\n    else:\n        pieces = []\n        i, j = n, m\n        while i > 0 and j > 0:\n            if s[i-1] == t[j-1]:\n                pieces.append((i, j))\n                i -= 1\n                j -= 1\n            elif dp[i-1][j] > dp[i][j-1]:\n                i -= 1\n            else:\n                j -= 1\n        pieces.append((i, j))\n        pieces.reverse()\n        result = []\n        for i, j in pieces:\n            if i > j:\n                result.append(str(i) +'' + str(j))\n            else:\n                result.append(str(j) +'' + str(i))\n        return str(len(pieces)) + '\\n' + '\\n'.join(result)"
    },
    {
        "number": 970,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    pieces = list(map(int, stdin.split()[1:]))\n    black_count = sum(1 for piece in pieces if piece % 2 == 0)\n    white_count = len(pieces) - black_count\n    if black_count == white_count:\n        return black_count\n    elif black_count > white_count:\n        return black_count - white_count\n    else:\n        return white_count - black_count"
    },
    {
        "number": 971,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    waste = 0\n    for i in range(n):\n        if a[i] > b:\n            waste += a[i] - b\n            a[i] = b\n        if waste > d:\n            count += 1\n            waste = 0\n    return count"
    },
    {
        "number": 972,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.readline().strip()))\n    visited = [[False for j in range(m)] for i in range(n)]\n    def dfs(i, j, d):\n        if i < 0 or i >= n or j < 0 or j >= m or visited[i][j] or grid[i][j] == 'W':\n            return False\n        visited[i][j] = True\n        if d == 0:\n            return dfs(i+1, j, 1) or dfs(i-1, j, -1) or dfs(i, j+1, 2) or dfs(i, j-1, -2)\n        elif d == 1:\n            return dfs(i+1, j, 0)\n        elif d == -1:\n            return dfs(i-1, j, 0)\n        elif d == 2:\n            return dfs(i, j+1, 0)\n        else:\n            return dfs(i, j-1, 0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'B':\n                if dfs(i, j, 0):\n                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 973,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0:2])\n    pasture = [list(line) for line in stdin.split('\\n')[1:]]\n\n    # Check if there are any wolves\n    has_wolf = False\n    for row in pasture:\n        for cell in row:\n            if cell == 'W':\n                has_wolf = True\n                break\n        if has_wolf:\n            break\n\n    if not has_wolf:\n        return \"No\"\n\n    # Check if there are any empty spots to place dogs\n    empty_spots = []\n    for i in range(R):\n        for j in range(C):\n            if pasture[i][j] == '.':\n                empty_spots.append((i, j))\n\n    # Check all possible combinations of dogs\n    for dog_pos in empty_spots:\n        # Check if the dog can reach any sheep\n        can_reach_sheep = False\n        for i in range(R):\n            for j in range(C):\n                if pasture[i][j] == 'S':\n                    if abs(i - dog_pos[0]) + abs(j - dog_pos[1]) <= 2:\n                        can_reach_sheep = True\n                        break\n            if can_reach_sheep:\n                break\n\n        if not can_reach_sheep:\n            # Place the dog\n            pasture[dog_pos[0]][dog_pos[1]] = 'D'\n\n            # Print the pasture\n            for row in pasture:\n                print(''.join(row))\n\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 974,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    commands = stdin.split('\\n')[1:]\n    add_commands = [int(c.split()[1]) for c in commands if c.startswith('add')]\n    remove_commands = [int(c.split()[1]) for c in commands if c.startswith('remove')]\n    add_commands.sort()\n    remove_commands.sort()\n    count = 0\n    i = 0\n    j = 0\n    while i < len(add_commands) and j < len(remove_commands):\n        if add_commands[i] < remove_commands[j]:\n            i += 1\n        elif add_commands[i] > remove_commands[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n            count += 1\n    return str(count)"
    },
    {
        "number": 975,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sherlock_card = stdin.readline().strip()\n    moriarty_card = stdin.readline().strip()\n\n    flicks_moriarty = 0\n    flicks_sherlock = 0\n\n    for i in range(n):\n        if sherlock_card[i] < moriarty_card[i]:\n            flicks_moriarty += 1\n        elif sherlock_card[i] > moriarty_card[i]:\n            flicks_sherlock += 1\n\n    print(flicks_moriarty)\n    print(flicks_sherlock)"
    },
    {
        "number": 976,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    best_moments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        best_moments.append((l, r))\n    best_moments.sort(key=lambda x: x[0])\n    i = 0\n    while i < len(best_moments):\n        if best_moments[i][0] > i + x:\n            return \"No solution\"\n        i += best_moments[i][1] - best_moments[i][0] + 1\n    return i - x"
    },
    {
        "number": 977,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    good = []\n    for x in range(1, n+1):\n        if all(x % i!= 0 for i in range(2, p+1)):\n            count += 1\n            good.append(x)\n    print(count)\n    print(*good)\n    return \"\""
    },
    {
        "number": 978,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.split()[0])\n    panels = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    rows = len(panels)\n    cols = len(panels[0])\n    pressed = set()\n    for i in range(rows):\n        for j in range(cols):\n            if panels[i][j]!= '.':\n                if len(pressed) == k:\n                    return \"NO\"\n                if panels[i][j] in pressed:\n                    return \"NO\"\n                pressed.add(panels[i][j])\n    return \"YES\""
    },
    {
        "number": 979,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            res = (res * abs(a[i] - a[j])) % m\n    return str(res)"
    },
    {
        "number": 980,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    strings = [stdin.readline().strip() for _ in range(k)]\n    for i in range(k):\n        for j in range(n-1):\n            for l in range(j+1, n):\n                if strings[i][j]!= strings[i][l] and strings[i][j]!= strings[i][j+1] and strings[i][l]!= strings[i][j+1]:\n                    new_string = strings[i][:j] + strings[i][l] + strings[i][j+1] + strings[i][j+2:]\n                    if new_string in strings:\n                        return new_string\n    return \"-1\""
    },
    {
        "number": 981,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    v, a = map(int, stdin.split())\n    if v < sum(a):\n        return -1\n    digits = [str(i) for i in range(1, 10)]\n    for i in range(9, 0, -1):\n        if v >= a[i-1]:\n            digits[i] = ''\n    return ''.join(digits)"
    },
    {
        "number": 982,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        l, r = map(int, stdin.readline().strip().split())\n        for a in range(l, r+1):\n            if a % 2 == 0:\n                continue\n            if (r-l+1) % a == 0:\n                return \"YES\"\n        return \"NO\""
    },
    {
        "number": 983,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q, r = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                ans = max(ans, p*a[i] + q*a[j] + r*a[k])\n    return str(ans)"
    },
    {
        "number": 984,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 985,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    bishops = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        bishops.append((x, y))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(bishops[i][0] - bishops[j][0]) == abs(bishops[i][1] - bishops[j][1]):\n                count += 1\n    return count"
    },
    {
        "number": 986,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + 1\n        if dp[i] > k:\n            dp[i] = dp[i-1] + 1\n        if dp[i] > k:\n            dp[i] = dp[i-1] + 1\n        if dp[i] > k:\n            dp[i] = dp[i-1] + 1\n    return dp[n]"
    },
    {
        "number": 987,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    pairs = []\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        pairs.append((a-1, b-1))\n    pairs.sort()\n    for a, b in pairs:\n        p[a], p[b] = p[b], p[a]\n    return''.join(map(str, p))"
    },
    {
        "number": 988,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.split('\\n')\n    desks = []\n    for line in lines:\n        desks.append(list(line))\n\n    # Find the most convenient vacant place\n    max_convenience = 0\n    max_desk = None\n    for i in range(6):\n        for j in range(3):\n            if desks[i][j] == '.' and desks[i][j+1] == '.' and desks[i][j+2] == '.' and desks[i+1][j] == '.' and desks[i+1][j+1] == '.' and desks[i+1][j+2] == '.' and desks[i+2][j] == '.' and desks[i+2][j+1] == '.' and desks[i+2][j+2] == '.':\n                convenience = 0\n                if desks[i-1][j] == '*' or desks[i-1][j+1] == '*' or desks[i-1][j+2] == '*':\n                    convenience += 1\n                if desks[i+3][j] == '*' or desks[i+3][j+1] == '*' or desks[i+3][j+2] == '*':\n                    convenience += 1\n                if desks[i][j-1] == '*' or desks[i][j+3] == '*':\n                    convenience += 1\n                if desks[i][j+4] == '*' or desks[i+1][j+3] == '*' or desks[i+2][j+3] == '*':\n                    convenience += 1\n                if desks[i][j+5] == '*' or desks[i+1][j+4] == '*' or desks[i+2][j+4] == '*':\n                    convenience += 1\n                if desks[i][j+6] == '*' or desks[i+1][j+5] == '*' or desks[i+2][j+5] == '*':\n                    convenience += 1\n                if desks[i][j+7] == '*' or desks[i+1][j+6] == '*' or desks[i+2][j+6] == '*':\n                    convenience += 1\n                if convenience > max_convenience:\n                    max_convenience = convenience\n                    max_desk = (i, j)\n\n    # Update the plan\n    desks[max_desk[0]][max_desk[1]] = 'P'\n    plan = '\\n'.join([''.join(row) for row in desks])\n\n    return plan"
    },
    {
        "number": 989,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = a[-1] - a[0]\n    for i in range(n-1):\n        if k == 0:\n            break\n        if a[i+1] - a[i] > 1:\n            ans = min(ans, a[i+1] - a[i] - 1)\n            a[i+1] -= 1\n            k -= 1\n        elif a[i] - a[i+1] > 1:\n            ans = min(ans, a[i] - a[i+1] - 1)\n            a[i] += 1\n            k -= 1\n    return str(ans)"
    },
    {
        "number": 990,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, edges = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(N-1)]\n    M = int(stdin.readline())\n    restrictions = [list(map(int, stdin.readline().split())) for _ in range(M)]\n\n    # Build graph\n    graph = [[] for _ in range(N+1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # Count paths\n    def count_paths(u, v, painted, visited):\n        if u == v:\n            return 1\n        if (u, v, painted) in visited:\n            return visited[(u, v, painted)]\n        visited[(u, v, painted)] = 0\n        for neighbor in graph[u]:\n            if neighbor == v:\n                continue\n            if painted[neighbor]:\n                continue\n            count = count_paths(neighbor, v, painted, visited)\n            if count > 0:\n                visited[(u, v, painted)] += count\n        return visited[(u, v, painted)]\n\n    # Count valid paths\n    valid_paths = 0\n    for u, v in restrictions:\n        visited = {}\n        for painted in range(2**N):\n            if bin(painted).count('1') >= 2:\n                continue\n            if count_paths(u, v, [bool(painted & (1 << i)) for i in range(N)], visited) > 0:\n                valid_paths += 1\n                break\n\n    return str(valid_paths)"
    },
    {
        "number": 991,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, S = map(int, stdin.readline().split())\n    railroads = []\n    for i in range(M):\n        u, v, a, b = map(int, stdin.readline().split())\n        railroads.append((u, v, a, b))\n    exchange_counters = []\n    for i in range(N):\n        c, d = map(int, stdin.readline().split())\n        exchange_counters.append((c, d))\n\n    # Initialize variables\n    dp = [[float('inf')] * N for _ in range(N)]\n    dp[0][0] = 0\n\n    # DP\n    for k in range(1, N):\n        for i in range(N):\n            for j in range(N):\n                if i == j:\n                    continue\n                for railroad in railroads:\n                    if railroad[0] == i and railroad[1] == j:\n                        dp[i][j] = min(dp[i][j], dp[i][k] + railroad[2] + railroad[3])\n                for exchange_counter in exchange_counters:\n                    if exchange_counter[0] == i:\n                        dp[i][j] = min(dp[i][j], dp[i][k] + exchange_counter[1] * S)\n\n    # Output\n    for i in range(1, N):\n        print(dp[0][i])\n\n    return ''"
    },
    {
        "number": 992,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, s = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    MOD = 998244353\n    dp = [[0] * (s+1) for _ in range(n+1)]\n\n    # Base case: f(T) = 1 for empty set T\n    for i in range(n+1):\n        dp[i][0] = 1\n\n    # Fill dp table\n    for i in range(1, n+1):\n        for j in range(1, s+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a[i-1]:\n                dp[i][j] += dp[i-1][j-a[i-1]]\n            dp[i][j] %= MOD\n\n    # Compute sum of f(T) over all subsets T of {1, 2,..., n}\n    ans = 0\n    for i in range(1, 2**n):\n        subset = [j for j in range(n) if (i >> j) & 1]\n        if sum(a[j] for j in subset) == s:\n            ans += dp[len(subset)][s]\n            ans %= MOD\n\n    return str(ans)"
    },
    {
        "number": 993,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    left = 0\n    right = 0\n    total = 0\n\n    # Loop through all possible pairs of boxes\n    for i in range(N):\n        # Update right pointer\n        right = i\n        # Update total candies\n        total = sum(A[left:right+1])\n        # Check if total is a multiple of M\n        if total % M == 0:\n            # Increment count\n            count += 1\n        # Move left pointer to the right\n        left += 1\n\n    # Return count\n    return str(count)"
    },
    {
        "number": 994,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    notes = []\n    for i in range(m):\n        d, h = map(int, stdin.split())\n        notes.append((d, h))\n    notes.sort()\n    heights = [0] * n\n    for d, h in notes:\n        heights[d-1] = h\n    for i in range(1, n):\n        if abs(heights[i] - heights[i-1] - 1) > 1:\n            return 'IMPOSSIBLE'\n    return max(heights)"
    },
    {
        "number": 995,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = [0] * (n+1)\n    for i in range(n):\n        count[a[i]+1] += 1\n    for i in range(1, n+1):\n        count[i] += count[i-1]\n    ans = [0] * n\n    for i in range(n):\n        ans[count[a[i]]] = i+1\n        count[a[i]] += 1\n    return''.join(map(str, ans))"
    },
    {
        "number": 996,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    layers = []\n    for i in range(n):\n        layer = []\n        for j in range(m):\n            layer.append(list(stdin.readline().strip()))\n        layers.append(layer)\n\n    critical_count = 0\n    for i in range(n):\n        for j in range(m):\n            for k in range(k):\n                if layers[i][j][k] == '1':\n                    if i > 0 and layers[i-1][j][k] == '1':\n                        critical_count += 1\n                    if j > 0 and layers[i][j-1][k] == '1':\n                        critical_count += 1\n                    if k > 0 and layers[i][j][k-1] == '1':\n                        critical_count += 1\n                    if i > 0 and j > 0 and layers[i-1][j-1][k] == '1':\n                        critical_count += 1\n                    if i > 0 and k > 0 and layers[i-1][j][k-1] == '1':\n                        critical_count += 1\n                    if j > 0 and k > 0 and layers[i][j-1][k-1] == '1':\n                        critical_count += 1\n                    if i > 0 and j > 0 and k > 0 and layers[i-1][j-1][k-1] == '1':\n                        critical_count += 1\n\n    return str(critical_count)"
    },
    {
        "number": 997,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Splitting the input string into words\n    words = stdin.split()\n\n    # Initializing variables for string a and b\n    a = \"\"\n    b = \"\"\n\n    # Looping through each word in the input string\n    for word in words:\n        # Checking if the word is a number\n        if word.isdigit():\n            # Checking if the word is a nonnegative integer\n            if int(word) >= 0:\n                # Adding the word to string a\n                a += word + \",\"\n            else:\n                # Adding the word to string b\n                b += word + \",\"\n        else:\n            # Adding the word to string b\n            b += word + \",\"\n\n    # Removing the extra comma from the end of string a and b\n    a = a[:-1]\n    b = b[:-1]\n\n    # Checking if there are any words in string a\n    if a == \"\":\n        # If there are no words in string a, print dash on the first line\n        print(\"-\")\n    else:\n        # If there are words in string a, print string a surrounded by quotes\n        print(f'\"{a}\"')\n\n    # Checking if there are any words in string b\n    if b == \"\":\n        # If there are no words in string b, print dash on the second line\n        print(\"-\")\n    else:\n        # If there are words in string b, print string b surrounded by quotes\n        print(f'\"{b}\"')"
    },
    {
        "number": 998,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = [1]\n    for i in range(n):\n        a = [a[j] * 2 for j in range(len(a) * 2)]\n    for i in range(len(a)):\n        if a[i] >= 2**n:\n            a[i] = 2**n - 1\n    l = 0\n    for i in range(len(a)):\n        if a[i] == 0 or a[i] == x:\n            l = i\n            break\n    if l == 0:\n        return \"0\\n\"\n    else:\n        a = a[:l]\n        for i in range(len(a)):\n            if a[i] == 0:\n                a[i] = 1\n            elif a[i] == x:\n                a[i] = 0\n        return f\"{l}\\n{a}\\n\""
    },
    {
        "number": 999,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    chess_periods = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        chess_periods.append((l, r))\n    programming_periods = []\n    for i in range(m):\n        l, r = map(int, stdin.split())\n        programming_periods.append((l, r))\n    max_distance = 0\n    for i in range(n):\n        for j in range(m):\n            distance = min(abs(chess_periods[i][0] - programming_periods[j][0]),\n                            abs(chess_periods[i][0] - programming_periods[j][1]),\n                            abs(chess_periods[i][1] - programming_periods[j][0]),\n                            abs(chess_periods[i][1] - programming_periods[j][1]))\n            if distance > max_distance:\n                max_distance = distance\n    return str(max_distance)"
    },
    {
        "number": 1000,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    fuel_prices = list(map(int, stdin.readline().split()))\n    fuel_prices.insert(0, 0)\n    fuel_prices.append(0)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + fuel_prices[i] + fuel_prices[i-1]\n    return dp[n]"
    },
    {
        "number": 1001,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    stickers = list(map(int, stdin.readline().strip().split()))\n    petya_score = sum(stickers)\n    gena_score = 0\n    for i in range(n):\n        if i % 2 == 0:\n            petya_score -= stickers[i]\n            gena_score += stickers[i]\n        else:\n            gena_score -= stickers[i]\n            petya_score += stickers[i]\n    return str(petya_score - gena_score)"
    },
    {
        "number": 1002,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    t = list(map(int, stdin.readline().split()))\n    if sum(t) > d:\n        return -1\n    else:\n        jokes = d - sum(t)\n        if jokes % 5!= 0:\n            jokes = jokes - (jokes % 5)\n        return jokes // 5"
    },
    {
        "number": 1003,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = 0\n    while n > 0:\n        days += 1\n        if days % m == 0:\n            n -= 1\n    return days"
    },
    {
        "number": 1004,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return \"1\\n1\\n\"\n    if n == 2:\n        if a[0] == a[1]:\n            return \"-1\"\n        else:\n            return \"2\\n2\\n\"\n    if n == 3:\n        if a[0] == a[1] or a[1] == a[2] or a[0] == a[2]:\n            return \"-1\"\n        else:\n            return \"2\\n2\\n\"\n    if n == 4:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[0] == a[3]:\n            return \"-1\"\n        else:\n            return \"2\\n2\\n\"\n    if n == 5:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[0] == a[4]:\n            return \"-1\"\n        else:\n            return \"3\\n2 3\\n\"\n    if n == 6:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[0] == a[5]:\n            return \"-1\"\n        else:\n            return \"3\\n2 4\\n\"\n    if n == 7:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[0] == a[6]:\n            return \"-1\"\n        else:\n            return \"3\\n3 3\\n\"\n    if n == 8:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[0] == a[7]:\n            return \"-1\"\n        else:\n            return \"4\\n2 4 2\\n\"\n    if n == 9:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[0] == a[8]:\n            return \"-1\"\n        else:\n            return \"4\\n3 3 3\\n\"\n    if n == 10:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[0] == a[9]:\n            return \"-1\"\n        else:\n            return \"4\\n2 5 3\\n\"\n    if n == 11:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4] == a[5] or a[5] == a[6] or a[6] == a[7] or a[7] == a[8] or a[8] == a[9] or a[9] == a[10] or a[0] == a[10]:\n            return \"-1\"\n        else:\n            return \"4\\n3 4 3\\n\"\n    if n == 12:\n        if a[0] == a[1] or a[1] == a[2] or a[2] == a[3] or a[3] == a[4] or a[4"
    },
    {
        "number": 1005,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t*4, 4):\n        n, k, d = map(int, lines[i].split())\n        a = list(map(int, lines[i+1].split()))\n        count = 0\n        for j in range(d):\n            if a[j] == a[j+1] == a[j+2] == a[j+3]:\n                count += 1\n        print(count)"
    },
    {
        "number": 1006,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    board = []\n    for i in range(n):\n        board.append(list(stdin.readline().strip()))\n\n    # check if each cell belongs to some cross\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                found = False\n                for k in range(i-2, i+3):\n                    for l in range(j-2, j+3):\n                        if 0 <= k < n and 0 <= l < n and board[k][l] == '#':\n                            found = True\n                            break\n                    if found:\n                        break\n                if not found:\n                    return \"NO\"\n\n    # check if each cross contains exactly 5 cells with '#'\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '#':\n                count = 0\n                for k in range(i-2, i+3):\n                    for l in range(j-2, j+3):\n                        if 0 <= k < n and 0 <= l < n and board[k][l] == '#':\n                            count += 1\n                if count!= 5:\n                    return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 1007,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, p = map(int, stdin.split())\n    zcy_numbers = []\n    for i in range(1, 10**5):\n        if str(i) == str(i)[::-1] and len(str(i).lstrip('0')) % 2 == 0:\n            zcy_numbers.append(i)\n    zcy_numbers.sort()\n    return sum(zcy_numbers[:k]) % p"
    },
    {
        "number": 1008,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    k = int(k)\n    n = len(s)\n    if n % k!= 0:\n        return \"NO\"\n    substrings = [s[i:i+n//k] for i in range(n//k)]\n    if len(set(substrings))!= k:\n        return \"NO\"\n    for substring in substrings:\n        if substring!= substring[::-1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1009,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    sizes = list(map(int, stdin.split()))\n    left, right = 1, max(sizes)\n    while left < right:\n        mid = (left + right) // 2\n        if sum(s // mid + (s % mid > 0) for s in sizes) <= k:\n            right = mid\n        else:\n            left = mid + 1\n    return left"
    },
    {
        "number": 1010,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [0] * (n+1)\n    dp[1] = 1 if a[0] == 1 else 0\n    for i in range(2, n+1):\n        if a[i-1] == 1:\n            dp[i] = dp[i-1]\n        if a[i-2] == 1 and a[i-1] == 0:\n            dp[i] += dp[i-2]\n    return dp[n]"
    },
    {
        "number": 1011,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    a_list = list(map(int, stdin.readline().split()))\n    m, b = map(int, stdin.readline().split())\n    b_list = list(map(int, stdin.readline().split()))\n    a_list.sort()\n    b_list.sort()\n    max_score = 0\n    for i in range(n):\n        for j in range(m):\n            if a_list[i] <= b_list[j]:\n                score = a_list[i] * 2\n            else:\n                score = a_list[i] * 3\n            if i + j + score > max_score:\n                max_score = i + j + score\n    return f\"{max_score}:{max_score - max_score}\""
    },
    {
        "number": 1012,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        if s == s[::-1]:\n            print(-1)\n        else:\n            good = False\n            for i in range(len(s)):\n                for j in range(i+1, len(s)):\n                    if s[i]!= s[j]:\n                        s_new = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n                        if s_new == s_new[::-1]:\n                            good = True\n                            break\n                if good:\n                    break\n            if good:\n                print(s_new)\n            else:\n                print(-1)"
    },
    {
        "number": 1013,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = []\n    for i in range(n):\n        row = list(map(int, stdin.split()))\n        table.append(row)\n\n    good_cells = []\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 1:\n                good_cells.append((i+1, j+1))\n\n    corners = [(1, 1), (n, 1), (1, m), (n, m)]\n    for corner in corners:\n        if corner in good_cells:\n            good_cells.remove(corner)\n\n    def count_operations(good_cell, corner):\n        x1, y1 = good_cell\n        x2, y2 = corner\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if table[i][j] == 1:\n                    if min(x1, x2) <= i+1 <= max(x1, x2) and min(y1, y2) <= j+1 <= max(y1, y2):\n                        count += 1\n        return count\n\n    min_operations = float('inf')\n    for good_cell in good_cells:\n        for corner in corners:\n            operations = count_operations(good_cell, corner)\n            if operations < min_operations:\n                min_operations = operations\n\n    return min_operations"
    },
    {
        "number": 1014,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    board = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    board[1][1] = 1\n    board[1][n] = 2\n    for i in range(2, n+1):\n        for j in range(1, n+1):\n            if i % 2 == 1:\n                board[i][j] = 1\n            else:\n                board[i][j] = 2\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if board[i][j] == 1:\n                if j+1 <= n and board[i][j+1] == 2:\n                    board[i][j+1] = 0\n                if i+1 <= n and board[i+1][j+1] == 2:\n                    board[i+1][j+1] = 0\n                if i+1 <= n and board[i+1][j] == 2:\n                    board[i+1][j] = 0\n                if i+1 <= n and j-1 >= 1 and board[i+1][j-1] == 2:\n                    board[i+1][j-1] = 0\n            elif board[i][j] == 2:\n                if j-1 >= 1 and board[i][j-1] == 1:\n                    board[i][j-1] = 0\n                if i-1 >= 1 and board[i-1][j-1] == 1:\n                    board[i-1][j-1] = 0\n                if i-1 >= 1 and board[i-1][j] == 1:\n                    board[i-1][j] = 0\n                if i-1 >= 1 and j+1 <= n and board[i-1][j+1] == 1:\n                    board[i-1][j+1] = 0\n    if board[n][1] == 1:\n        return \"white\\n1 2\"\n    else:\n        return \"black\""
    },
    {
        "number": 1015,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [0] * (n * (n - 1) // 2 + 1)\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + 1\n        if a[i - 1] == 1:\n            dp[i] = 0\n    for i in range(2, n * (n - 1) // 2 + 1):\n        dp[i] = max(dp[i], dp[i - 1] + 1)\n        if a[i // 2] == 1:\n            dp[i] = max(dp[i], dp[i - 2] + 1)\n    return''.join(map(str, dp))"
    },
    {
        "number": 1016,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n+1)]\n    for x, y in pairs:\n        graph[x].append(y)\n        graph[y].append(x)\n    dp = [1] * (n+1)\n    for i in range(1, n+1):\n        for j in graph[i]:\n            dp[i] = max(dp[i], dp[j]*2)\n    return max(dp)"
    },
    {
        "number": 1017,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    last_stone = 0\n    for i in range(1, n+1):\n        if i % 3 == 0:\n            if i == last_stone:\n                break\n            count += 1\n            last_stone = i\n    return count"
    },
    {
        "number": 1018,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    pens = [0] * n\n    for i in range(n):\n        pens[i] = a[i]\n    for i in range(n, 2*n):\n        pens[i % n] -= 1\n        if pens[i % n] == 0:\n            return i % n + 1\n    return -1"
    },
    {
        "number": 1019,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for b in range(2, n+1):\n        for a in range(1, b):\n            if a*b == n and gcd(a, b) == 1:\n                return f\"{a} {b}\"\n    return \"No solution found\"\n\ndef"
    },
    {
        "number": 1020,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, k = map(int, stdin.split())\n    return (w - 4) * (h - 4) * k"
    },
    {
        "number": 1021,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1:]))\n    t = list(map(int, stdin.split()[1:]))\n    if c == t:\n        return \"Yes\"\n    for i in range(1, n-1):\n        c[i] = t[i] + t[i-1] + t[i+1] - c[i]\n    if c == t:\n        return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1022,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    r = list(map(int, stdin.readline().strip().split()))\n\n    if sum(l)!= sum(r):\n        return \"NO\"\n\n    a = [0] * n\n    for i in range(n):\n        a[i] = max(l[i], r[i])\n\n    return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 1023,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, t_a, t_b, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    i = j = 0\n    earliest = float('inf')\n    while i < n and j < m:\n        if b[j] >= a[i] + t_a:\n            earliest = min(earliest, a[i] + t_a + b[j] + t_b)\n            i += 1\n            j += 1\n        else:\n            j += 1\n    if earliest == float('inf'):\n        return '-1'\n    return str(earliest)"
    },
    {
        "number": 1024,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                k += 1\n    return str(k/2)"
    },
    {
        "number": 1025,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    triangles = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                a = points[i]\n                b = points[j]\n                c = points[k]\n                if a[0] == b[0] == c[0] or a[1] == b[1] == c[1]:\n                    continue\n                if a[0] == b[0] or a[0] == c[0] or b[0] == c[0]:\n                    continue\n                if a[1] == b[1] or a[1] == c[1] or b[1] == c[1]:\n                    continue\n                if (a[0]-b[0])*(c[1]-b[1]) == (a[1]-b[1])*(c[0]-b[0]):\n                    triangles.add((a, b, c))\n    count = 0\n    for triangle in triangles:\n        a, b, c = triangle\n        if a[0] == b[0] == c[0] or a[1] == b[1] == c[1]:\n            continue\n        if a[0] == b[0] or a[0] == c[0] or b[0] == c[0]:\n            continue\n        if a[1] == b[1] or a[1] == c[1] or b[1] == c[1]:\n            continue\n        if (a[0]-b[0])*(c[1]-b[1]) == (a[1]-b[1])*(c[0]-b[0]):\n            count += 1\n    return str(count)"
    },
    {
        "number": 1026,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    dp = [0] * (n + 1)\n    dp[1] = b[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + b[i - 1])\n        if i > 2:\n            dp[i] = max(dp[i], dp[i - 3] + b[i - 1] + b[i - 2])\n    return dp[n]"
    },
    {
        "number": 1027,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    a = list(map(int, stdin.split()))\n    \n    # Initialize variables\n    max_score = 0\n    current_player = 0\n    current_score = 0\n    \n    # Iterate over all holes\n    for i in range(14):\n        # If the current hole has an even number of stones, add them to the score\n        if a[i] % 2 == 0:\n            current_score += a[i]\n        \n        # If the current hole has an odd number of stones, add them to the current player's score\n        else:\n            current_player += a[i]\n        \n        # If the current player has collected all the stones, update the maximum score\n        if current_player == 0:\n            max_score = max(max_score, current_score)\n            \n            # Reset the current player's score and switch to the next player\n            current_score = 0\n            current_player = 0\n    \n    # Return the maximum score\n    return str(max_score)"
    },
    {
        "number": 1028,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k_min = n // m\n    k_max = n // 2\n    return f\"{k_min} {k_max}\""
    },
    {
        "number": 1029,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    b = [int(digit) for digit in str(p)]\n    n = len(b)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == "
    },
    {
        "number": 1030,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split())\n    if p == 1:\n        return f\"({p}) {p+1} {p+2}... {n}\"\n    elif p == n:\n        return f\"{n-2} {n-1} ({n}) {n}\"\n    else:\n        start = max(1, p-k)\n        end = min(n, p+k)\n        nav = \" \".join([f\"({i})\" if i == p else str(i) for i in range(start, end+1)])\n        return f\"<< {' '.join(map(str, range(start, p)))} {nav} {' '.join(map(str, range(p+1, end+1)))} >>\""
    },
    {
        "number": 1031,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_y = sum(a)\n    min_y = 0\n    polyline = []\n    for i in range(n):\n        x = sum(a[:i+1])\n        y = max_y - a[i]\n        polyline.append((x, y))\n    polyline.append((sum(a), min_y))\n    polyline.sort()\n    for i in range(n):\n        x1, y1 = polyline[i]\n        x2, y2 = polyline[i+1]\n        if y1 == y2:\n            print(''* (x2 - x1), end='')\n        elif y1 < y2:\n            print(''* (x2 - x1) + '/', end='')\n        else:\n            print(''* (x2 - x1) + '\\\\', end='')\n    print()\n    return ''"
    },
    {
        "number": 1032,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    good = []\n    for x in range(1, n+1):\n        if all(x % i!= 0 for i in range(2, p+1)):\n            count += 1\n            good.append(x)\n    print(count)\n    print(*good)\n    return \"\""
    },
    {
        "number": 1033,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, H = map(int, stdin.split())\n    dp = [0] * (n + 1)\n    dp[1] = H\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1\n        if dp[i] > H:\n            dp[i] = H\n        if dp[i] - dp[i - 1] > 1:\n            dp[i] = dp[i - 1] + 1\n    return dp[n]"
    },
    {
        "number": 1034,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    X, Y, Z, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n    C = list(map(int, stdin.readline().split()))\n\n    # Calculate all possible combinations of cakes\n    cakes = [(a, b, c) for a in A for b in B for c in C]\n\n    # Sort cakes by deliciousness in descending order\n    cakes.sort(key=lambda x: sum(x), reverse=True)\n\n    # Print deliciousness of cakes for the first, second,..., K-th ways\n    for i in range(K):\n        print(sum(cakes[i]))\n\n    return \"\""
    },
    {
        "number": 1035,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    divisors = set()\n    for i in range(1, int(B**0.5)+1):\n        if B % i == 0:\n            divisors.add(i)\n            if A % i == 0:\n                divisors.add(B//i)\n    return str(len(divisors))"
    },
    {
        "number": 1036,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    l, r = 0, 2**k\n    while r-l > 1:\n        m = (l+r)//2\n        a = solution(s[:m])\n        b = solution(s[m:])\n        if a == b:\n            return a\n        elif a == 'R':\n            r = m\n        elif a == 'P':\n            l = m\n        else:\n            r = m\n    return s[l]"
    },
    {
        "number": 1037,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Calculate happiness points\n    happiness = [0] * N\n    for i in range(N):\n        happiness[i] = A[i] * abs(i - i // 2)\n\n    # Find maximum happiness points\n    max_happiness = sum(happiness)\n    return str(max_happiness)"
    },
    {
        "number": 1038,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    xor = 0\n    for i in range(A, B+1):\n        xor ^= i\n    return str(xor)"
    },
    {
        "number": 1039,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    edges = []\n    for i in range(N-1):\n        a, b, c = map(int, stdin.readline().strip().split())\n        edges.append((a, b, c))\n    Q, K = map(int, stdin.readline().strip().split())\n    queries = []\n    for i in range(Q):\n        x, y = map(int, stdin.readline().strip().split())\n        queries.append((x, y))\n\n    # Build graph\n    graph = [[] for _ in range(N)]\n    for a, b, c in edges:\n        graph[a-1].append((b-1, c))\n        graph[b-1].append((a-1, c))\n\n    # Dijkstra's algorithm\n    dist = [float('inf')] * N\n    dist[K-1] = 0\n    visited = [False] * N\n    while True:\n        u = min(range(N), key=lambda x: dist[x])\n        if dist[u] == float('inf'):\n            break\n        visited[u] = True\n        for v, w in graph[u]:\n            if not visited[v] and dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n\n    # Answer queries\n    result = []\n    for x, y in queries:\n        result.append(dist[x-1] + dist[y-1] - 2*dist[K-1])\n\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 1040,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    while 'fox' in s:\n        s = s.replace('fox', '')\n        count += 1\n    return len(s) + count"
    },
    {
        "number": 1041,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    if s.count('0') == n:\n        return \"YES\"\n    for i in range(1, n):\n        if s[i] == s[i-1]:\n            return \"NO\"\n    for k in range(1, n):\n        if all(s[i] == '0' for i in range(k, n, n-1)) and all(s[i] == '0' for i in range(k-1, -1, -n)):\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1042,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, x+1):\n        for j in range(1, y+1):\n            if i*j % x == 0 and (i+j) % y == 0:\n                count += 1\n    return str(count % MOD)"
    },
    {
        "number": 1043,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if a.count(-1)!= 1:\n        return \"Error: Invalid input\"\n    friend = a.index(-1)\n    dp = [float('inf')] * n\n    dp[friend] = 0\n    for i in range(n):\n        if dp[i] == float('inf'):\n            continue\n        for j in range(n):\n            if i == j or dp[j] == float('inf'):\n                continue\n            if a[i] == -1 or a[j] == -1 or a[i] > a[j]:\n                dp[j] = min(dp[j], dp[i] + 1)\n    return str(dp[friend])"
    },
    {
        "number": 1044,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cycles = [int(x) for x in stdin.readline().strip().split()]\n    for i in range(n):\n        if i % 2 == 0:\n            print(1)\n        else:\n            print(2)"
    },
    {
        "number": 1045,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    height = 1\n    while True:\n        cubes_needed = (1 + 2 + 3 +... + height) * height // 2\n        if cubes_needed >= n:\n            return str(height)\n        height += 1"
    },
    {
        "number": 1046,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    calls = list(map(int, stdin.readline().strip().split()))\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if calls[i]!= 0 and calls[j]!= 0 and calls[i] == calls[j]:\n                pairs += 1\n    if pairs == 0:\n        return -1\n    return pairs"
    },
    {
        "number": 1047,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = 0\n    nums = []\n    while n > 0:\n        if n % 2 == 1:\n            nums.append(1)\n            n -= 1\n        else:\n            nums.append(0)\n            n //= 2\n        count += 1\n    print(count)\n    print(*nums)"
    },
    {
        "number": 1048,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    commands = stdin.split()[1]\n    x, y = 0, 0\n    max_commands = 0\n    for command in commands:\n        if command == 'U':\n            y += 1\n        elif command == 'D':\n            y -= 1\n        elif command == 'L':\n            x -= 1\n        elif command == 'R':\n            x += 1\n        if x == 0 and y == 0:\n            max_commands += 1\n    return str(max_commands)"
    },
    {
        "number": 1049,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    schedule = []\n    for i in range(d):\n        schedule.append(list(map(int, stdin.readline().strip())))\n    dp = [[0] * n for _ in range(d)]\n    for i in range(d):\n        for j in range(n):\n            if i == 0:\n                dp[i][j] = schedule[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][k] + schedule[i][j] for k in range(n))\n    ans = 0\n    for i in range(n):\n        if all(dp[j][i] == 1 for j in range(d)):\n            ans = max(ans, sum(dp[j][i] for j in range(d)))\n    return str(ans)"
    },
    {
        "number": 1050,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if m < n or k < n:\n        return \"No\"\n    else:\n        return \"Yes\""
    },
    {
        "number": 1051,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    K = int(stdin.readline().strip())\n    ranks = list(map(int, stdin.readline().strip().split()))\n\n    # Sort finalists by rank\n    finalists = sorted(range(K), key=lambda i: ranks[i])\n\n    # Count number of declined finalists\n    count = 0\n    for i in range(K):\n        if i < ranks[finalists[i]] - 1:\n            count += 1\n\n    # Return minimum possible number of declined finalists\n    return count"
    },
    {
        "number": 1052,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        if i == k:\n            count += 1\n        else:\n            count += (n-k) * (n-k-1) // 2\n    return count"
    },
    {
        "number": 1053,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    graph = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            graph[i][j] = i ^ j\n            graph[j][i] = graph[i][j]\n    mst = [0] * n\n    visited = [False] * n\n    mst[0] = graph[0][1]\n    visited[0] = True\n    for i in range(1, n):\n        min_weight = float('inf')\n        for j in range(n):\n            if not visited[j] and mst[j] < min_weight:\n                min_weight = mst[j]\n                min_index = j\n        visited[min_index] = True\n        for j in range(n):\n            if not visited[j] and graph[min_index][j] < min_weight:\n                mst[j] = graph[min_index][j]\n    return sum(mst)"
    },
    {
        "number": 1054,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    mines = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        mines.append((x, y))\n    min_x = min(mines, key=lambda x: x[0])[0]\n    max_x = max(mines, key=lambda x: x[0])[0]\n    min_y = min(mines, key=lambda x: x[1])[1]\n    max_y = max(mines, key=lambda x: x[1])[1]\n    return (max_x - min_x + 1) * (max_y - min_y + 1)"
    },
    {
        "number": 1055,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2 if arr[0] <= arr[1] else 1\n    if n == 4:\n        return 4 if arr[0] <= arr[1] <= arr[2] <= arr[3] else 2\n    if n == 8:\n        return 8 if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] else 4\n    if n == 16:\n        return 16 if arr[0] <= arr[1] <= arr[2] <= arr[3] <= arr[4] <= arr[5] <= arr[6] <= arr[7] <= arr[8] <= arr[9] <= arr[10] <= arr[11] <= arr[12] <= arr[13] <= arr[14] <= arr[15] else 8"
    },
    {
        "number": 1056,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    board = []\n    for line in stdin.split('\\n'):\n        row = [int(x) for x in line.split()]\n        board.append(row)\n\n    # Initialize variables\n    n = len(board)\n    m = len(board[0])\n    turns = 0\n    current_row = n - 1\n    current_col = 0\n    visited = set()\n\n    # DFS to find all possible paths\n    def dfs(row, col, path):\n        nonlocal turns\n        nonlocal current_row\n        nonlocal current_col\n        nonlocal visited\n        if (row, col) in visited:\n            return\n        visited.add((row, col))\n        if (row, col) == (0, 0):\n            turns += 1\n            return\n        if board[row][col] == 0:\n            # Move right\n            if col < m - 1:\n                dfs(row, col + 1, path + 'R')\n            # Move down\n            if row < n - 1:\n                dfs(row + 1, col, path + 'D')\n        else:\n            # Move down\n            if row < n - board[row][col]:\n                dfs(row + board[row][col], col, path + 'D')\n            # Move right\n            if col < m - 1:\n                dfs(row, col + 1, path + 'R')\n\n    # DFS to find all possible paths from starting tile\n    dfs(current_row, current_col, '')\n\n    # Calculate expected number of turns\n    expected_turns = turns / (2 * (n * m - 1))\n\n    # Return expected number of turns\n    return str(expected_turns)"
    },
    {
        "number": 1057,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i]!= s[j]:\n                count += 1\n    return count % 998244353"
    },
    {
        "number": 1058,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    blocks = []\n    for i in range(n):\n        color1, value, color2 = map(int, stdin.readline().strip().split())\n        blocks.append((color1, value, color2))\n    blocks.sort(key=lambda x: x[1], reverse=True)\n    dp = [[0] * n for _ in range(1 << n)]\n    for i in range(1 << n):\n        for j in range(n):\n            if i & (1 << j):\n                continue\n            for k in range(j):\n                if i & (1 << k):\n                    continue\n                if blocks[j][0] == blocks[k][2] and blocks[k][0] == blocks[j][2]:\n                    dp[i][j] = max(dp[i][j], dp[i ^ (1 << j)][k] + blocks[j][1])\n    return str(max(dp[-1]))"
    },
    {
        "number": 1059,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for word in words:\n        if len(word) == k and all(v in word for v in vowels):\n            return word\n    return '-1'\n\nwords = ['agoeuioaeiruuimaeoieauoweouoiaouimae', 'aeiou', 'aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouae"
    },
    {
        "number": 1060,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            if A[i] % A[j] == 0 or A[j] % A[i] == 0:\n                graph[i].append(j)\n                graph[j].append(i)\n    visited = [False] * n\n    max_clique = 0\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        stack.append(neighbor)\n            max_clique = max(max_clique, len(stack))\n    return str(max_clique)"
    },
    {
        "number": 1061,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = [[int(x) for x in line.split()] for line in stdin.split('\\n') if line]\n    n = len(matrix)\n    moves = 0\n    for i in range(n):\n        for j in range(n-1):\n            if matrix[i][j] == 0 and matrix[i][j+1] == 1:\n                matrix[i][j], matrix[i][j+1] = matrix[i][j+1], matrix[i][j]\n                moves += 1\n    for j in range(n):\n        for i in range(n-1):\n            if matrix[i][j] == 0 and matrix[i+1][j] == 1:\n                matrix[i][j], matrix[i+1][j] = matrix[i+1][j], matrix[i][j]\n                moves += 1\n    return moves"
    },
    {
        "number": 1062,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    hamming_distance = sum(1 for i in range(n) if s[i]!= t[i])\n    if hamming_distance == 0:\n        return \"0\"\n\n    min_distance = hamming_distance\n    min_swap = None\n\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i]!= t[j] and s[j]!= t[i]:\n                new_s = s[:i] + t[i] + s[i+1:j] + s[i] + s[j+1:]\n                new_t = t[:j] + s[j] + t[j+1:i] + t[i] + t[i+1:]\n                new_hamming_distance = sum(1 for i in range(n) if new_s[i]!= new_t[i])\n                if new_hamming_distance < min_distance:\n                    min_distance = new_hamming_distance\n                    min_swap = (i+1, j+1)\n\n    if min_swap is None:\n        return f\"{min_distance}\\n-1 -1\"\n    else:\n        return f\"{min_distance}\\n{min_swap[0]} {min_swap[1]}\""
    },
    {
        "number": 1063,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split('\\n')[0])\n    seq = [line.strip() for line in stdin.split('\\n')[1:]]\n    for i in range(n):\n        if '?' in seq[i]:\n            for j in range(10):\n                if str(j) not in seq[i]:\n                    seq[i] = seq[i].replace('?', str(j))\n                    break\n            else:\n                return \"NO\"\n    seq = [int(num) for num in seq]\n    seq.sort()\n    for i in range(n):\n        seq[i] = str(seq[i]).zfill(len(seq[i]))\n    return \"YES\\n\" + '\\n'.join(seq)"
    },
    {
        "number": 1064,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    blocked = set(map(int, stdin.readline().split()))\n    costs = list(map(int, stdin.readline().split()))\n    dp = [[float('inf')] * (n + 1) for _ in range(k + 1)]\n    dp[0][0] = 0\n    for i in range(1, k + 1):\n        for j in range(n + 1):\n            if j in blocked:\n                continue\n            for l in range(1, costs[i - 1] + 1):\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - l] + l)\n    if dp[k][n] == float('inf'):\n        return '-1'\n    return dp[k][n]"
    },
    {
        "number": 1065,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, M, D = map(int, stdin.split())\n    x = 1\n    while True:\n        if x > M:\n            break\n        if (n - x) % (k - 1) == 0:\n            break\n        x += 1\n    return x"
    },
    {
        "number": 1066,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    odd_nums = [i for i in range(1, n+1, 2)]\n    even_nums = [i for i in range(2, n+1, 2)]\n    nums = odd_nums + even_nums\n    return str(nums[k-1])"
    },
    {
        "number": 1067,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n    if count == n:\n        return str(n)\n    if count == 0:\n        return str(n)\n    if count == 1:\n        return str(n-1)\n    if count == 2:\n        return str(n-2)\n    if count == 3:\n        return str(n-3)\n    if count == 4:\n        return str(n-4)\n    if count == 5:\n        return str(n-5)\n    if count == 6:\n        return str(n-6)\n    if count == 7:\n        return str(n-7)\n    if count == 8:\n        return str(n-8)\n    if count == 9:\n        return str(n-9)\n    if count == 10:\n        return str(n-10)\n    if count == 11:\n        return str(n-11)\n    if count == 12:\n        return str(n-12)\n    if count == 13:\n        return str(n-13)\n    if count == 14:\n        return str(n-14)\n    if count == 15:\n        return str(n-15)\n    if count == 16:\n        return str(n-16)\n    if count == 17:\n        return str(n-17)\n    if count == 18:\n        return str(n-18)\n    if count == 19:\n        return str(n-19)\n    if count == 20:\n        return str(n-20)\n    if count == 21:\n        return str(n-21)\n    if count == 22:\n        return str(n-22)\n    if count == 23:\n        return str(n-23)\n    if count == 24:\n        return str(n-24)\n    if count == 25:\n        return str(n-25)\n    if count == 26:\n        return str(n-26)\n    if count == 27:\n        return str(n-27)\n    if count == 28:\n        return str(n-28)\n    if count == 29:\n        return str(n-29)\n    if count == 30:\n        return str(n-30)\n    if count == 31:\n        return str(n-31)\n    if count == 32:\n        return str(n-32)\n    if count == 33:\n        return str(n-33)\n    if count == 34:\n        return str(n-34)\n    if count == 35:\n        return str(n-35)\n    if count == 36:\n        return str(n-36)\n    if count == 37:\n        return str(n-37)\n    if count == 38:\n        return str(n-38)\n    if count == 39:\n        return str(n-39)\n    if count == 40:\n        return str(n-40)\n    if count == 41:\n        return str(n-41)\n    if count == 42:\n        return str(n-42)\n    if count == 43:\n        return str(n-43)\n    if count == 44:\n        return str(n-44)\n    if count == 45:\n        return str(n-45)\n    if count == 46:\n        return str(n-46)\n    if count == 47:\n        return str(n-47)\n    if count == 48:\n        return str(n-48)\n    if count == 49:\n        return str(n-49)\n    if count == 50:\n        return str(n-50)\n    if count == 51:\n        return str(n-51)\n    if count == 52:\n        return str(n-52)\n    if count == 53:\n        return str(n-53)\n    if count == 54:\n        return str(n-54)\n    if count == 55:\n        return str(n-55)\n    if count == 56:\n        return str(n-56)\n    if count == 57:\n       "
    },
    {
        "number": 1068,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # split the input string into three parts\n    parts = stdin.split('=')\n    a, b = parts[0].split('+')\n    c = parts[1]\n    \n    # remove leading zeros from parts\n    a = a.lstrip('0')\n    b = b.lstrip('0')\n    c = c.lstrip('0')\n    \n    # add '+' and '=' to the restored expression\n    restored = f\"{a}+{b}={c}\"\n    \n    return restored"
    },
    {
        "number": 1069,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = (1**n + 2**n + 3**n + 4**n) % 5\n    return str(result).lstrip('0') or '0'"
    },
    {
        "number": 1070,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            dp[i] = dp[i-1] + 1\n    return max(dp)"
    },
    {
        "number": 1071,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a_1, a_2, a_3 = map(int, stdin.split()[0:3])\n    b_1, b_2, b_3 = map(int, stdin.split()[3:6])\n    n = int(stdin.split()[6])\n\n    # Check if all the conditions are fulfilled\n    if n < 1 or n > 100:\n        return \"NO\"\n    if a_1 + a_2 + a_3 > 100 or b_1 + b_2 + b_3 > 100:\n        return \"NO\"\n    if a_1 + a_2 + a_3 + b_1 + b_2 + b_3 > 200:\n        return \"NO\"\n    if a_1 + a_2 + a_3 > 5 or b_1 + b_2 + b_3 > 10:\n        return \"NO\"\n\n    # Check if all the rewards can be put on the shelves\n    if a_1 + b_1 > 5 or a_2 + b_2 > 5 or a_3 + b_3 > 5:\n        return \"NO\"\n    if a_1 + b_1 > 10 or a_2 + b_2 > 10 or a_3 + b_3 > 10:\n        return \"NO\"\n    if a_1 + a_2 + a_3 + b_1 + b_2 + b_3 > n * 10:\n        return \"NO\"\n\n    return \"YES\""
    },
    {
        "number": 1072,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [stdin.strip() for _ in range(n)]\n    good = True\n    for i in range(n-1):\n        if table[i] >= table[i+1]:\n            good = False\n            break\n    if good:\n        return 0\n    for j in range(m):\n        good = True\n        for i in range(n-1):\n            if table[i][j] >= table[i+1][j]:\n                good = False\n                break\n        if good:\n            return j+1\n    return m"
    },
    {
        "number": 1073,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    commands = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if commands[i:i+2] in ['UD', 'LR', 'RL', 'DU']:\n            count += 1\n    return count"
    },
    {
        "number": 1074,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return 0\n    elif a % 9 == 0:\n        return 9\n    else:\n        return a % 9"
    },
    {
        "number": 1075,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return \"0\"\n    if n == 2:\n        return \"0 1 0\"\n    if n % 2 == 1:\n        return \"-1\"\n    order = [0] * n\n    for i in range(1, n):\n        if i % 2 == 0:\n            order[i] = (2 * i) % n\n        else:\n            order[i] = (2 * i + 1) % n\n    order[0] = 0\n    order[1] = 1\n    return \" \".join(map(str, order))"
    },
    {
        "number": 1076,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = 1000000007\n    q = 998244353\n    def mod_inverse(a, m):\n        return pow(a, m-2, m)\n    def factorize(n):\n        factors = []\n        i = 2\n        while i*i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n    def gcd(a, b):\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    def lcm(a, b):\n        return (a * b) // gcd(a, b)\n    def crt(a, m, b, n):\n        def egcd(a, b):\n            if a == 0:\n                return (b, 0, 1)\n            else:\n                g, y, x = egcd(b % a, a)\n                return (g, x - (b // a) * y, y)\n        g, x, y = egcd(m, n)\n        if g!= 1:\n            raise Exception('modular inverse does not exist')\n        return (a * x * n + b * y * m) % (m * n)\n    def crt_factors(factors, modulos):\n        n = 1\n        for i in range(len(factors)):\n            n *= modulos[i]\n        x = 0\n        for i in range(len(factors)):\n            mi = n // modulos[i]\n            x = crt(x, n, factors[i], mi)\n            n //= modulos[i]\n        return x\n    def crt_modulos(modulos):\n        factors = []\n        for m in modulos:\n            factors += factorize(m)\n        return crt_factors(factors, modulos)\n    def crt_mod(a, m):\n        return crt_modulos([m]) * a % m\n    def crt_exp(a, m, n):\n        return crt_mod(a, m) ** n\n    def crt_pow(a, m, n):\n        return crt_mod(a, m) ** n\n    def crt_inv(a, m):\n        return crt_exp(a, m, m-2)\n    def crt_div(a, m, b, n):\n        return crt_mod(a, m) * crt_inv(b, n) % m\n    def crt_sub(a, m, b, n):\n        return crt_mod(a, m) - crt_mod(b, n)\n    def crt_add(a, m, b, n):\n        return crt_mod(a, m) + crt_mod(b, n)\n    def crt_mul(a, m, b, n):\n        return crt_mod(a, m) * crt_mod(b, n)\n    def crt_div_mod(a, m, b, n):\n        return crt_div(a, m, b, n), crt_mod(a, m)\n    def crt_sub_mod(a, m, b, n):\n        return crt_sub(a, m, b, n), crt_mod(a, m)\n    def crt_add_mod(a, m, b, n):\n        return crt_add(a, m, b, n), crt_mod(a, m)\n    def crt_mul_mod(a, m, b, n):\n        return crt_mul(a, m, b, n), crt_mod(a, m)\n    def crt_div_mod_exp(a, m, b, n, e):\n        return crt_div_mod(a, m, b, n) if e == 1 else crt_div_mod_exp(crt_mul_mod(a, m, b, n)[0], m, b, n, e-1)\n    def crt_sub_mod_exp(a, m, b, n, e):\n        return crt_sub_mod(a, m, b, n) if e == 1 else crt_sub_mod_exp(crt_add_mod(a, m, b, n)[0], m, b, n, e-1)\n    def crt_add_mod_exp(a, m"
    },
    {
        "number": 1077,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    b = [0] * m\n    for i in range(n):\n        b[a[i]-1] += 1\n    min_b = min(b)\n    min_changes = sum(1 for x in b if x!= min_b)\n    print(min_b, min_changes)\n    for i in range(n):\n        if b[a[i]-1] == min_b:\n            a[i] = min(range(m+1), key=lambda j: b[j]) + 1\n            b[a[i]-1] -= 1\n            min_b -= 1\n            min_changes += 1\n    print(*a)\n    return \"\""
    },
    {
        "number": 1078,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    b = []\n    for i in range(n):\n        if a[i] % 2 == 0:\n            b.append(a[i] // 2)\n        else:\n            b.append((a[i] + 1) // 2)\n    return''.join(map(str, b))"
    },
    {
        "number": 1079,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin, 2)\n    beautiful_numbers = [2**i for i in range(32)] + [-2**i for i in range(32)]\n    count = 0\n    for num in beautiful_numbers:\n        if num > n:\n            break\n        count += 1\n    return count"
    },
    {
        "number": 1080,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                a[i] -= 1\n                a[j] -= 1\n                count += 1\n    if count == n*(n-1)//2:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1081,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1082,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] * a[j] % 4 == 0:\n                ans += dp[i][j]\n                ans %= MOD\n    return str(ans)"
    },
    {
        "number": 1083,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    nums.sort()\n    min_diff = float('inf')\n    for i in range(n):\n        for j in range(i+1, n):\n            diff = abs(sum(nums[:i+1]) - sum(nums[j:]))\n            if diff < min_diff:\n                min_diff = diff\n                group1 = nums[:i+1]\n                group2 = nums[j:]\n    print(min_diff)\n    print(len(group1), *group1)\n    print(len(group2), *group2)\n    return \"\""
    },
    {
        "number": 1084,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '#':\n                continue\n            for k in range(i+1, n):\n                if '#' in grid[k][:j] and '#' in grid[k][j:]:\n                    return \"No\"\n            for l in range(j+1, m):\n                if '#' in [grid[k][l] for k in range(n)]:\n                    return \"No\"\n    return \"Yes\""
    },
    {
        "number": 1085,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for k in range(2, n+1):\n        while n >= k:\n            if n % k == 0:\n                n //= k\n            else:\n                n -= k\n            count += 1\n    return str(count)"
    },
    {
        "number": 1086,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().split())\n    A = [list(map(int, stdin.readline().split())) for _ in range(H)]\n    B = [list(map(int, stdin.readline().split())) for _ in range(H)]\n\n    # Initialize variables\n    red_sum = 0\n    blue_sum = 0\n    path_sum = 0\n    path_count = 0\n\n    # Traverse the grid\n    i, j = 0, 0\n    while i < H and j < W:\n        # Paint the current square\n        if i == 0 and j == 0:\n            # Start square\n            if A[i][j] > B[i][j]:\n                red_sum += A[i][j]\n                blue_sum += B[i][j]\n                path_sum += A[i][j]\n                path_count += 1\n                A[i][j] = -1\n                B[i][j] = -1\n            else:\n                red_sum += B[i][j]\n                blue_sum += A[i][j]\n                path_sum += B[i][j]\n                path_count += 1\n                A[i][j] = -1\n                B[i][j] = -1\n        elif i == H-1 and j == W-1:\n            # End square\n            if A[i][j] > B[i][j]:\n                red_sum += A[i][j]\n                blue_sum += B[i][j]\n                path_sum += A[i][j]\n                path_count += 1\n                A[i][j] = -1\n                B[i][j] = -1\n            else:\n                red_sum += B[i][j]\n                blue_sum += A[i][j]\n                path_sum += B[i][j]\n                path_count += 1\n                A[i][j] = -1\n                B[i][j] = -1\n        else:\n            # Intermediate square\n            if A[i][j] > B[i][j]:\n                red_sum += A[i][j]\n                blue_sum += B[i][j]\n                path_sum += A[i][j]\n                path_count += 1\n                A[i][j] = -1\n                B[i][j] = -1\n            else:\n                red_sum += B[i][j]\n                blue_sum += A[i][j]\n                path_sum += B[i][j]\n                path_count += 1\n                A[i][j] = -1\n                B[i][j] = -1\n            # Move to the next square\n            if i+1 < H and A[i+1][j]!= -1:\n                i += 1\n            elif j+1 < W and A[i][j+1]!= -1:\n                j += 1\n            else:\n                break\n\n    # Calculate the unbalancedness\n    unbalancedness = abs(red_sum - blue_sum)\n\n    # Print the result\n    return str(unbalancedness)"
    },
    {
        "number": 1087,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    max_f = 0\n    max_X = 0\n\n    # Iterate over all possible values of X\n    for X in range(K+1):\n        # Calculate f(X)\n        f = 0\n        for a in A:\n            f += X ^ a\n        # Update max_f and max_X if necessary\n        if f > max_f:\n            max_f = f\n            max_X = X\n\n    # Print result\n    return str(max_f)"
    },
    {
        "number": 1088,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    matrix = []\n    for i in range(N):\n        row = list(map(int, stdin.readline().split()))\n        matrix.append(row)\n\n    # Count number of matrices\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if sum(matrix[i][:j]) + sum(matrix[i][j:]) <= K:\n                count += 1\n            if sum(matrix[:i][j]) + sum(matrix[i:][j]) <= K:\n                count += 1\n\n    # Return result\n    return str(count % 998244353)"
    },
    {
        "number": 1089,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, K = map(int, stdin.split())\n\n    # Initialize variables\n    dp = [[[0] * (K+1) for _ in range(M+1)] for _ in range(N+1)]\n    MOD = 10**9+7\n\n    # Fill in dp table\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            for k in range(1, K+1):\n                dp[i][j][k] = dp[i-1][j][k] + dp[i][j-1][k] + dp[i-1][j-1][k-1]\n                dp[i][j][k] %= MOD\n\n    # Compute sum of costs\n    ans = 0\n    for i in range(1, N+1):\n        for j in range(1, M+1):\n            for k in range(1, K+1):\n                ans += dp[i][j][k] * (dp[i][j][k]-1) // 2\n                ans %= MOD\n\n    return str(ans)"
    },
    {
        "number": 1090,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n\n    # initialize variables\n    happy_count = 0\n    queue = []\n\n    # populate queue\n    for i in range(N):\n        if S[i] == 'L':\n            queue.append(i)\n        else:\n            queue.insert(0, i)\n\n    # perform operations\n    for _ in range(K):\n        l, r = map(int, stdin.readline().split())\n        l -= 1\n        r -= 1\n\n        # rotate queue\n        queue = queue[l:r+1]\n        queue = queue[::-1]\n        for i in range(len(queue)):\n            if S[queue[i]] == 'L':\n                queue[i] = N - 1 - queue[i]\n            else:\n                queue[i] = N - 1 - queue[i]\n\n        # update happy count\n        for i in range(len(queue) - 1):\n            if S[queue[i]] == S[queue[i+1]]:\n                happy_count += 1\n\n    return happy_count"
    },
    {
        "number": 1091,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    prices = list(map(int, stdin.split()[1:]))\n    max_price = max(prices)\n    winner_index = prices.index(max_price) + 1\n    return f\"{winner_index} {max_price}\""
    },
    {
        "number": 1092,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    lights = [False] * (n+1)\n    for i in map(int, stdin.split()[1:]):\n        lights[i] = True\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        dp[i][0] = dp[i-1][0]\n        for j in range(1, n+1):\n            if lights[j]:\n                dp[i][j] = (dp[i-1][j-1] + dp[i][j-1]) % 1000000007\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][m]"
    },
    {
        "number": 1094,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    chats = []\n    for i in range(n):\n        friend = stdin.readline().strip()\n        if friend not in chats:\n            chats.append(friend)\n    return '\\n'.join(chats)"
    },
    {
        "number": 1095,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, y1 = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    m, y2 = map(int, stdin.readline().split())\n    b = list(map(int, stdin.readline().split()))\n    a.append(y1)\n    b.append(y2)\n    a.sort()\n    b.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if a[i] < b[j]:\n            i += 1\n        elif a[i] > b[j]:\n            j += 1\n        else:\n            count += 1\n            i += 1\n            j += 1\n    return count"
    },
    {
        "number": 1096,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    c, d = stdin.strip().lower()\n    # calculate number of moves\n    moves = 0\n    for i in range(ord(c)-ord('a'), ord('h')-ord(c)+1):\n        for j in range(int(d)-1, int(d)+2):\n            if 1 <= j <= 8:\n                moves += 1\n    return str(moves)"
    },
    {
        "number": 1097,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    if sum(a)!= n - 1:\n        return '-1'\n    if k >= n - 1:\n        return '-1'\n    if t > n - 1:\n        return '-1'\n    if t == 0:\n        return str(n)\n    if t == 1:\n        return str(n) + '\\n' +''.join(map(str, [1] + [i+2 for i in range(n-2)] + [n]))\n    if t == 2:\n        return str(n) + '\\n' +''.join(map(str, [1] + [i+2 for i in range(n-2)] + [n])) + '\\n' +''.join(map(str, [1, n]))\n    if t == 3:\n        return str(n) + '\\n' +''.join(map(str, [1] + [i+2 for i in range(n-2)] + [n])) + '\\n' +''.join(map(str, [1, n])) + '\\n' +''.join(map(str, [1, n-1]))\n    if t == 4:\n        return str(n) + '\\n' +''.join(map(str, [1] + [i+2 for i in range(n-2)] + [n])) + '\\n' +''.join(map(str, [1, n])) + '\\n' +''.join(map(str, [1, n-1])) + '\\n' +''.join(map(str, [1, n-2]))\n    if t == 5:\n        return str(n) + '\\n' +''.join(map(str, [1] + [i+2 for i in range(n-2)] + [n])) + '\\n' +''.join(map(str, [1, n])) + '\\n' +''.join(map(str, [1, n-1])) + '\\n' +''.join(map(str, [1, n-2])) + '\\n' +''.join(map(str, [1, n-3]))\n    if t == 6:\n        return str(n) + '\\n' +''.join(map(str, [1] + [i+2 for i in range(n-2)] + [n])) + '\\n' +''.join(map(str, [1, n])) + '\\n' +''.join(map(str, [1, n-1])) + '\\n' +''.join(map(str, [1, n-2])) + '\\n' +''.join(map(str, [1, n-3])) + '\\n' +''.join(map(str, [1, n-4]))\n    if t == 7:\n        return str(n) + '\\n' +''.join(map(str, [1] + [i+2 for i in range(n-2)] + [n])) + '\\n' +''.join(map(str, [1, n])) + '\\n' +''.join(map(str, [1, n-1])) + '\\n' +''.join(map(str, [1, n-2])) + '\\n' +''.join(map(str, [1, n-3])) + '\\n' +''.join(map(str, [1, n-4])) + '\\n' +''.join(map(str, [1, n-5]))\n    if t == 8:\n        return str(n) + '\\n' +''.join(map(str, [1] + [i+2 for i in range(n-2)] + [n])) + '\\n' +''.join(map(str, [1, n])) + '\\n' +''.join(map(str, [1, n-1])) + '\\n' +''.join(map(str, [1, n-2])) + '\\n' +''.join(map(str, [1, n-3])) + '\\n' +''.join(map(str, [1, n-4])) + '\\n' +''.join(map(str, [1, n-5])) + '\\n' +''.join(map(str, [1, n-6]))\n    if t == 9:\n        return str(n) +"
    },
    {
        "number": 1098,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    alarms = [tuple(map(int, alarm.split(\":\"))) for alarm in stdin.split()[1:]]\n    alarms.sort()\n    start = alarms[0]\n    end = alarms[-1]\n    if start[0] == end[0]:\n        return f\"{start[0]}:{start[1]+1}\"\n    else:\n        return f\"{end[0]+1}:00\""
    },
    {
        "number": 1099,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    adj = [[] for _ in range(n)]\n    for u, v in edges:\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n    visited = [False] * n\n    stack = []\n    for i in range(n):\n        if len(adj[i]) == 1:\n            stack.append(i)\n            visited[i] = True\n    count = 0\n    while stack:\n        u = stack.pop()\n        for v in adj[u]:\n            if not visited[v]:\n                stack.append(v)\n                visited[v] = True\n                count += 1\n    return count"
    },
    {
        "number": 1100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    # create a list of vertices\n    vertices = list(range(1, n+1))\n    # create a list of rays\n    rays = []\n    for i in range(n):\n        # create a ray from vertex i to vertex (i+1) % n\n        rays.append((vertices[i], vertices[(i+1) % n]))\n    # create a list of regions\n    regions = []\n    for i in range(n):\n        # create a region from vertex i to vertex (i+1) % n\n        region = []\n        for j in range(n):\n            if (vertices[i], vertices[(i+1) % n]) in rays or (vertices[(i+1) % n], vertices[i]) in rays:\n                region.append(j+1)\n        regions.append(region)\n    # count the number of jumps Ada needs to make\n    jumps = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j and regions[i] == regions[j]:\n                jumps += 1\n    return str(jumps)"
    },
    {
        "number": 1101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    rooms = stdin.strip().split()[1]\n    occupied = [i for i, r in enumerate(rooms) if r == '1']\n    if len(occupied) < k + 1:\n        return \"IMPOSSIBLE\"\n    occupied.sort()\n    min_dist = float('inf')\n    for i in range(k + 1, n):\n        if i - occupied[k] < min_dist:\n            min_dist = i - occupied[k]\n    return str(min_dist)"
    },
    {
        "number": 1102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    criminals = 0\n    for i in range(n):\n        if i == a-1:\n            continue\n        if t[i] == 1:\n            criminals += 1\n    return str(criminals)"
    },
    {
        "number": 1103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    seq = list(map(int, stdin.split()[1:]))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if seq[i] == seq[j] + 1 and dp[j] + 1 > dp[i]:\n                dp[i] = dp[j] + 1\n    return max(dp)"
    },
    {
        "number": 1104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n]))\n    b = list(map(int, stdin.split()[n:]))\n    for i in range(1, n):\n        if a[i-1]!= (a[i-1] | b[i-1]) or b[i-1]!= (a[i-1] & b[i-1]):\n            return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, a + [0] + b))"
    },
    {
        "number": 1105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prev_x = {}\n    for i in range(n):\n        x, k = map(int, stdin.readline().strip().split())\n        if k not in prev_x:\n            prev_x[k] = x\n        else:\n            if prev_x[k]!= x:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    lights = sum(a)\n    for i in range(2, 2**n + 1):\n        lights += a[i-1] - a[i-2]\n    return lights"
    },
    {
        "number": 1107,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    moves = stdin.split()[1]\n    juice = 0\n    last_moves = set()\n    for i in range(n):\n        if moves[i] == 'a':\n            juice += 1\n            if i >= 4 and moves[i-1:i+1] == moves[i-4:i]:\n                juice += 1\n        last_moves.add(moves[i])\n    return juice"
    },
    {
        "number": 1108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rooms = []\n    for i in range(n):\n        p, q = map(int, stdin.readline().strip().split())\n        rooms.append((p, q))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if rooms[i][0] + rooms[j][0] <= rooms[i][1] and rooms[i][0] + rooms[j][0] <= rooms[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 1109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        if a[i]!= 1 and a[i]!= 2:\n            count += 1\n    if n % k == 0:\n        return 0\n    else:\n        return k - (n % k) + count"
    },
    {
        "number": 1110,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    dp = [0] * (1 << n)\n    dp[0] = 1\n    for i in range(1, 1 << n):\n        for j in range(n):\n            if i & (1 << j):\n                dp[i] += dp[i ^ (1 << j)]\n    return dp[-1]\n\nprint(solution(input()))"
    },
    {
        "number": 1111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    weights = list(map(int, stdin.split()[2:]))\n    MOD = 10**9 + 7\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= 1:\n                dp[i][j] += dp[i-1][j-1] * (weights[i-1] % MOD)\n                dp[i][j] %= MOD\n            if j >= 2:\n                dp[i][j] += dp[i-1][j-2] * (weights[i-1] % MOD)\n                dp[i][j] %= MOD\n    return dp[n][k]"
    },
    {
        "number": 1112,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    row1 = list(map(int, lines[0].split()))\n    row2 = list(map(int, lines[1].split()))\n    row3 = list(map(int, lines[2].split()))\n\n    # calculate missing elements\n    missing = [0, 0, 0]\n    for i in range(3):\n        missing[i] = 15 - row1[i] - row2[i] - row3[i]\n\n    # construct magic square\n    magic_square = [[0, 0, 0], [0, 0, 0], [0, 0, 0]]\n    magic_square[0][0] = missing[0]\n    magic_square[0][1] = row1[0]\n    magic_square[0][2] = row2[0]\n    magic_square[1][0] = row1[1]\n    magic_square[1][1] = missing[1]\n    magic_square[1][2] = row3[1]\n    magic_square[2][0] = row2[2]\n    magic_square[2][1] = row3[2]\n    magic_square[2][2] = missing[2]\n\n    # print magic square\n    for row in magic_square:\n        print(' '.join(map(str, row)))\n\n    return ''"
    },
    {
        "number": 1113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    t = 0\n    for i in range(n):\n        if a[i]!= i:\n            t = i\n            break\n    if t == 0:\n        return \"-1\"\n    else:\n        return str(t)"
    },
    {
        "number": 1114,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    f = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n\n    if len(set(f))!= n or len(set(b))!= n:\n        return \"Impossible\"\n\n    for i in range(1, n+1):\n        if f.count(i)!= b.count(f.index(i)+1):\n            return \"Impossible\"\n\n    if len(set(b))!= len(b):\n        return \"Ambiguity\"\n\n    a = [f.index(b[i])+1 for i in range(m)]\n    return \"Possible\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 1115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    m = int(stdin.readline())\n    l = []\n    r = []\n    for i in range(m):\n        l.append(int(stdin.readline().split()[0]))\n        r.append(int(stdin.readline().split()[1]))\n    l.sort()\n    r.sort()\n    if l[-1] + a[0] > r[0]:\n        return \"-1\"\n    else:\n        return str(l[-1] + a[0])\n\nprint(solution(\"2\\n3 4\\n2\\n1 4\\n7 9\")) # Output: 7\nprint(solution(\"1\\n5\\n1\\n1 4\")) # Output: -1\nprint(solution(\"1\\n5\\n1\\n1 5\")) # Output: 5"
    },
    {
        "number": 1116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        r, b, k = map(int, stdin.readline().strip().split())\n        painted_planks = []\n        for j in range(10**100):\n            if j % r == 0 and j % b == 0:\n                painted_planks.append('red') if j % (r+b) == 0 else painted_planks.append('blue')\n            elif j % r == 0:\n                painted_planks.append('red')\n            elif j % b == 0:\n                painted_planks.append('blue')\n            else:\n                painted_planks.append('none')\n        consecutive_red = consecutive_blue = 0\n        for j in range(len(painted_planks)):\n            if painted_planks[j] =='red':\n                consecutive_red += 1\n                consecutive_blue = 0\n            elif painted_planks[j] == 'blue':\n                consecutive_blue += 1\n                consecutive_red = 0\n            else:\n                consecutive_red = consecutive_blue = 0\n            if consecutive_red >= k or consecutive_blue >= k:\n                return 'REBEL'\n        return 'OBEY'"
    },
    {
        "number": 1117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = [int(stdin.readline().strip().split()[1]) for _ in range(n)]\n    heights.sort()\n    for i in range(1, n):\n        if heights[i] > heights[i-1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    components = {}\n    for i in range(n):\n        if colors[i] not in components:\n            components[colors[i]] = [i]\n        else:\n            components[colors[i]].append(i)\n    count = 0\n    for component in components.values():\n        if len(component) > 1:\n            count += 1\n    return count"
    },
    {
        "number": 1119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, p_a, p_b = map(int, stdin.split())\n    MOD = 10**9 + 7\n    P = 1\n    Q = 1\n    for i in range(k):\n        P = (P * (p_a + p_b)) % MOD\n        Q = (Q * p_a) % MOD\n    return (P * pow(Q, MOD-2, MOD)) % MOD"
    },
    {
        "number": 1120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n // 10\n    return count"
    },
    {
        "number": 1121,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    coloring = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            row.append(colors[i*m+j])\n        coloring.append(''.join(row))\n    return '\\n'.join(coloring)"
    },
    {
        "number": 1122,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    playing_fields = [(i+1, i+2) for i in range(m)]\n    for i in range(n-1):\n        for j in range(m):\n            if playing_fields[j][0] == i+1 or playing_fields[j][1] == i+1:\n                playing_fields[j] = (i+2, i+3) if playing_fields[j][0] == i+1 else (i+1, i+3)\n        for j in range(m):\n            if playing_fields[j][0] == n:\n                playing_fields[j] = (1, i+2)\n            if playing_fields[j][1] == n:\n                playing_fields[j] = (i+2, 1)\n    return '\\n'.join(map(str, playing_fields))"
    },
    {
        "number": 1123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split())\n\n    # Initialize variables\n    MOD = 10**9+7\n    result = 0\n\n    # Generate all possible sequences\n    sequences = []\n    for i in range(1, K+1):\n        for j in range(1, K+1):\n            for k in range(1, K+1):\n                sequences.append((i, j, k))\n\n    # Compute \\gcd(A_1,..., A_N) for each sequence\n    for sequence in sequences:\n        gcd = 1\n        for i in range(N):\n            gcd = (gcd * sequence[i]) % MOD\n        result = (result + gcd) % MOD\n\n    # Return result\n    return str(result)"
    },
    {
        "number": 1124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    cards = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    X = max(cards)\n    x = min(cards)\n\n    # Loop until X = x\n    while X!= x:\n        # Replace each card on which X is written with a card on which X-x is written\n        for i in range(N):\n            if cards[i] == X:\n                cards[i] = X - x\n\n        # Update X and x\n        X = max(cards)\n        x = min(cards)\n\n    # Print the number written on all of Snuke's cards\n    return str(cards[0])"
    },
    {
        "number": 1125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *a = map(int, stdin.split())\n    a.sort(reverse=True)\n    if a[0] == 1:\n        return -1\n    for i in range(1, n):\n        if a[i] == a[i-1] + 1:\n            return i\n    return -1"
    },
    {
        "number": 1126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, X, M = map(int, stdin.split())\n    A = [X]\n    for i in range(N):\n        A.append(f(A[-1]**2, M))\n    return str(sum(A))\n\ndef"
    },
    {
        "number": 1127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        num = int(stdin.readline().strip())\n        if num % 2 == 0:\n            print(2)\n        else:\n            print(1)\n    return \"\""
    },
    {
        "number": 1128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, m = map(int, stdin.split())\n    if a % m == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = list(map(int, stdin.readline().strip().split()))\n    points.sort()\n    min_dist = float('inf')\n    min_x = 0\n    for i in range(n):\n        dist = abs(points[i] - points[i-1])\n        if dist < min_dist:\n            min_dist = dist\n            min_x = points[i]\n    return str(min_x)"
    },
    {
        "number": 1130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    lessons = []\n    for i in range(n):\n        lessons.append(list(map(int, stdin.readline().strip())))\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for l in range(m):\n                if lessons[i-1][l] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-1] + (m-l))\n    return dp[n][k]"
    },
    {
        "number": 1131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, w, x, c = map(int, stdin.split())\n    if c <= a:\n        return 0\n    if b >= x:\n        return (c - a) // (b - x)\n    else:\n        return (c - a) // (w - (x - b)) + 1"
    },
    {
        "number": 1132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        edges.append((x, y))\n    bus = True\n    ring = True\n    star = True\n    for i in range(n):\n        bus &= (len(set([j for j in range(n) if (i, j) in edges or (j, i) in edges])) == n)\n        ring &= (len(set([j for j in range(n) if (i, j) in edges or (j, i) in edges])) == 2)\n        star &= (len(set([j for j in range(n) if (i, j) in edges or (j, i) in edges])) == 1)\n    if bus:\n        return \"bus topology\"\n    elif ring:\n        return \"ring topology\"\n    elif star:\n        return \"star topology\"\n    else:\n        return \"unknown topology\""
    },
    {
        "number": 1133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = set()\n    for i in range(n):\n        word = stdin.readline().strip()\n        words.add(word)\n    max_length = 0\n    for word in words:\n        if len(set(word)) <= 2:\n            max_length += len(word)\n    return max_length"
    },
    {
        "number": 1134,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    marks = list(map(int, stdin.readline().strip().split()))\n    d = [0] * n\n    d[0] = marks[0]\n    for i in range(1, n):\n        d[i] = d[i-1] + marks[i]\n    return min(d)"
    },
    {
        "number": 1135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    word = \"\"\n    for i in range(n):\n        if i == n//2:\n            word += s[i]\n        else:\n            word += s[n-i-1]\n    return word"
    },
    {
        "number": 1136,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = 0\n    for i in range(1, m+1):\n        s += n % i\n    s %= (10**9 + 7)\n    return str(s)"
    },
    {
        "number": 1137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    # create a list of all possible substrings of s\n    substrings = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substrings.append(s[i:j])\n\n    # create a list of all possible substrings of t\n    substrings_t = []\n    for i in range(m):\n        for j in range(i+1, m+1):\n            substrings_t.append(t[i:j])\n\n    # create a set of all possible substrings of s and t\n    substrings_set = set(substrings) & set(substrings_t)\n\n    # create a list of all possible sequences of k substrings of s and t\n    sequences = []\n    for i in range(n-k+1):\n        for j in range(i+1, n+1):\n            for subset in itertools.combinations(substrings_set, k):\n                if set(s[i:j]) == set(subset):\n                    sequences.append(subset)\n\n    # find the sequence with maximum sum of lengths\n    max_sum = 0\n    for seq in sequences:\n        sum_lengths = sum(len(substring) for substring in seq)\n        if sum_lengths > max_sum:\n            max_sum = sum_lengths\n\n    return max_sum"
    },
    {
        "number": 1138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 0:\n        return -1\n    if s == 'L' * n or s == 'R' * n or s == 'U' * n or s == 'D' * n:\n        return 0\n    for i in range(n):\n        if s[i] == 'L':\n            if s[i+1] == 'L' or s[i+1] == 'D':\n                return -1\n        elif s[i] == 'R':\n            if s[i+1] == 'R' or s[i+1] == 'U':\n                return -1\n        elif s[i] == 'U':\n            if s[i+1] == 'U' or s[i+1] == 'L':\n                return -1\n        elif s[i] == 'D':\n            if s[i+1] == 'D' or s[i+1] == 'R':\n                return -1\n    return -1"
    },
    {
        "number": 1139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = list(map(int, stdin.readline().split()))\n    l = []\n    r = []\n    for i in range(n):\n        l.append(list(map(int, stdin.readline().split())))\n        r.append(list(map(int, stdin.readline().split())))\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j]\n            for k in range(1, k[i-1]+1):\n                if l[i-1][k-1] <= j <= r[i-1][k-1]:\n                    dp[i][j] = max(dp[i][j], dp[i-1][l[i-1][k-1]-1] + dp[i-1][j-1-l[i-1][k-1]])\n    return dp[n][m]"
    },
    {
        "number": 1140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    b.sort()\n    max_diff = 0\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            diff = b[j] - b[i]\n            if diff > max_diff:\n                max_diff = diff\n                count = 1\n            elif diff == max_diff:\n                count += 1\n    return f\"{max_diff} {count}\""
    },
    {
        "number": 1141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    s = stdin.split()[1]\n    for i in range(m):\n        l, r, c1, c2 = map(str, stdin.split()[0:4])\n        l, r = int(l)-1, int(r)-1\n        s = s[:l] + c2*len(s[l:r+1]) + s[r+1:]\n    return s"
    },
    {
        "number": 1142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    waves = []\n    for i in range(n):\n        l, r, a = map(int, stdin.split())\n        waves.append((l, r, a))\n    waves.sort(key=lambda x: x[0])\n    if waves[-1][1] < waves[-1][0]:\n        return -1\n    used_bullets = 0\n    for i in range(n):\n        l, r, a = waves[i]\n        if used_bullets + a > k:\n            return -1\n        used_bullets += a\n        if i < n - 1 and waves[i+1][0] < r:\n            return -1\n    return used_bullets"
    },
    {
        "number": 1143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    olympiads = []\n    for i in range(n):\n        month, day, people, time = map(int, stdin.split()[1:5])\n        olympiads.append((month, day, people, time))\n    olympiads.sort()\n    jury = []\n    for i in range(n):\n        month, day, people, time = olympiads[i]\n        if not jury or jury[-1][1]!= day:\n            jury.append((day, people))\n        else:\n            jury[-1] = (day, jury[-1][1] + people)\n    return len(jury)"
    },
    {
        "number": 1144,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, m = map(int, stdin.split())\n    t = s[::2] + s[1::2]\n    count = 0\n    for i in range(n - m + 1):\n        if s[i:i+m] == t:\n            count += 1\n    return count"
    },
    {
        "number": 1145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    coins = 0\n    for i in range(n):\n        if i == 0:\n            coins += 1\n        elif a[i] == a[i-1]:\n            coins += 1\n        else:\n            coins += 2\n    return str(coins)"
    },
    {
        "number": 1146,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    buttons = [list(map(int, stdin.split())) for _ in range(n)]\n    bulbs = [False] * m\n    for button in buttons:\n        for bulb in button[1:]:\n            bulbs[bulb-1] = True\n    return \"YES\" if all(bulbs) else \"NO\""
    },
    {
        "number": 1147,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] <= a[j] and (a[j] - a[i]) % x == 0:\n                count += 1\n    return count"
    },
    {
        "number": 1148,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if dp[i] - dp[j-1] >= 1:\n                ans += dp[n] - dp[j-1]\n    return str(ans)"
    },
    {
        "number": 1149,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q = map(int, stdin.readline().split())\n    x_levels = list(map(int, stdin.readline().split()))\n    y_levels = list(map(int, stdin.readline().split()))\n\n    if len(set(x_levels) & set(y_levels)) == 0:\n        return \"Oh, my keyboard!\"\n    elif len(set(x_levels) & set(y_levels)) == p:\n        return \"I become the guy.\"\n    else:\n        return \"Oh, my keyboard!\""
    },
    {
        "number": 1150,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    moles = []\n    for i in range(n):\n        x, y, a, b = map(int, stdin.readline().strip().split())\n        moles.append((x, y, a, b))\n    moves = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if moles[i][0] == moles[j][0] or moles[i][1] == moles[j][1]:\n                continue\n            if abs(moles[i][0] - moles[j][0]) == abs(moles[i][1] - moles[j][1]):\n                continue\n            if abs(moles[i][0] - moles[j][0]) == abs(moles[i][2] - moles[j][2]) and abs(moles[i][1] - moles[j][1]) == abs(moles[i][3] - moles[j][3]):\n                continue\n            if abs(moles[i][0] - moles[j][0]) == abs(moles[i][3] - moles[j][3]) and abs(moles[i][1] - moles[j][1]) == abs(moles[i][2] - moles[j][2]):\n                continue\n            if abs(moles[i][2] - moles[j][2]) == abs(moles[i][3] - moles[j][3]) and abs(moles[i][0] - moles[j][0]) == abs(moles[i][1] - moles[j][1]):\n                continue\n            if abs(moles[i][2] - moles[j][2]) == abs(moles[i][1] - moles[j][1]) and abs(moles[i][0] - moles[j][0]) == abs(moles[i][3] - moles[j][3]):\n                continue\n            if abs(moles[i][3] - moles[j][3]) == abs(moles[i][1] - moles[j][1]) and abs(moles[i][0] - moles[j][0]) == abs(moles[i][2] - moles[j][2]):\n                continue\n            if abs(moles[i][3] - moles[j][3]) == abs(moles[i][2] - moles[j][2]) and abs(moles[i][0] - moles[j][0]) == abs(moles[i][1] - moles[j][1]):\n                continue\n            if abs(moles[i][0] - moles[j][0]) == abs(moles[i][2] - moles[j][2]) and abs(moles[i][1] - moles[j][1]) == abs(moles[i][3] - moles[j][3]):\n                continue\n            if abs(moles[i][0] - moles[j][0]) == abs(moles[i][3] - moles[j][3]) and abs(moles[i][1] - moles[j][1]) == abs(moles[i][2] - moles[j][2]):\n                continue\n            if abs(moles[i][2] - moles[j][2]) == abs(moles[i][3] - moles[j][3]) and abs(moles[i][0] - moles[j][0]) == abs(moles[i][1] - moles[j][1]):\n                continue\n            if abs(moles[i][2] - moles[j][2]) == abs(moles[i][1] - moles[j][1]) and abs(moles[i][0] - moles[j][0]) == abs(moles[i][3] - moles[j][3]):\n                continue\n            if abs(moles[i][3] - moles[j][3]) == abs(moles[i][1] - moles[j][1]) and abs(moles[i][0] - moles[j][0]) == abs(moles[i][2] - moles[j][2]):\n                continue\n            if abs(moles[i][3] - moles[j][3]) == abs(moles[i][2] - moles[j][2]) and"
    },
    {
        "number": 1151,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, U = map(int, stdin.split()[0:2])\n    E = list(map(int, stdin.split()[2:]))\n    if n < 3 or U < 1 or U > 10**9 or any(E[i] >= E[i+1] for i in range(n-1)):\n        return \"-1\"\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if E[k] - E[i] <= U and E[k] - E[j] <= U and E[j] - E[i] <= U:\n                    eta = (E[k] - E[j]) / (E[k] - E[i])\n                    return str(eta)\n    return \"-1\""
    },
    {
        "number": 1152,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    A = []\n    B = []\n    for i in range(n):\n        A.append(list(map(int, stdin.split())))\n    for i in range(n):\n        B.append(list(map(int, stdin.split())))\n    for i in range(n):\n        for j in range(m):\n            if A[i][j]!= B[i][j]:\n                submatrix = []\n                for x in range(i, i+2):\n                    submatrix.append(A[x][j:j+2])\n                if submatrix[0][0] == 0 and submatrix[0][1] == 0 and submatrix[1][0] == 0 and submatrix[1][1] == 1:\n                    A[i][j] = 1\n                    A[i+1][j] = 1\n                    A[i][j+1] = 1\n                    A[i+1][j+1] = 0\n                elif submatrix[0][0] == 1 and submatrix[0][1] == 0 and submatrix[1][0] == 0 and submatrix[1][1] == 1:\n                    A[i][j] = 0\n                    A[i+1][j] = 1\n                    A[i][j+1] = 0\n                    A[i+1][j+1] = 1\n                else:\n                    return \"No\"\n    return \"Yes\""
    },
    {
        "number": 1153,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n    x.sort()\n    y.sort()\n    i = j = 0\n    count = 0\n    while i < n and j < m:\n        if x[i] <= y[j]:\n            i += 1\n        j += 1\n        count += 1\n    return count"
    },
    {
        "number": 1154,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    time = 0\n    for i in range(n):\n        if a[i] > h:\n            return \"impossible\"\n        time += a[i] // k\n        if a[i] % k!= 0:\n            time += 1\n    return time"
    },
    {
        "number": 1155,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    prices = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        prices.append(a/b)\n    prices.sort()\n    return str(prices[0]*m)"
    },
    {
        "number": 1156,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = stdin.readline().strip()\n    l, r = 0, 10**9\n    while l < r:\n        mid = (l + r) // 2\n        b_new = [0] * n\n        for i in range(n):\n            if a[i] > mid:\n                b_new[i] = 1\n            elif a[i] < mid:\n                b_new[i] = 0\n            else:\n                b_new[i] = b[i]\n        if b_new == list(map(int, b)):\n            return f\"{l} {r}\"\n        elif b_new > list(map(int, b)):\n            r = mid\n        else:\n            l = mid + 1\n    return f\"{l} {r}\""
    },
    {
        "number": 1157,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    neg_count = 0\n    pos_count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            product = 1\n            for k in range(i, j+1):\n                product *= a[k]\n            if product < 0:\n                neg_count += 1\n            elif product > 0:\n                pos_count += 1\n    return f\"{neg_count} {pos_count}\""
    },
    {
        "number": 1158,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    stolen = 0\n    for i in range(n):\n        if a[i] == 1:\n            stolen += 1\n        elif a[i] == k:\n            stolen += 1\n    return str(stolen)"
    },
    {
        "number": 1159,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n < 3:\n        return \"-1\"\n    for i in range(2, n+1):\n        if n % i == 0:\n            return \"-1\"\n    m = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            m += 1\n    if m % 2 == 0:\n        m += 1\n    for i in range(2, int(m**0.5)+1):\n        if m % i == 0:\n            return \"-1\"\n    ans = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            ans.append((i, j))\n    ans.sort()\n    for i in range(len(ans)):\n        ans[i] = \" \".join(map(str, ans[i]))\n    return str(m) + \"\\n\" + \"\\n\".join(ans)"
    },
    {
        "number": 1160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sizes = list(map(int, stdin.split()))\n    n = int(stdin.split()[0])\n    participants = []\n    for i in range(n):\n        participant = stdin.split()[i+1]\n        if ',' in participant:\n            sizes_list = list(map(int, participant.split(',')))\n            if sizes_list[0] == sizes_list[1] - 1:\n                participants.append(sizes_list[0])\n            elif sizes_list[1] == sizes_list[0] + 1:\n                participants.append(sizes_list[1])\n            else:\n                return \"NO\"\n        else:\n            participants.append(int(participant))\n    if sum(sizes) < n:\n        return \"NO\"\n    else:\n        t_shirts = []\n        for i in range(n):\n            if participants[i] == sizes[0]:\n                t_shirts.append(sizes[0])\n            elif participants[i] == sizes[1]:\n                t_shirts.append(sizes[1])\n            elif participants[i] == sizes[2]:\n                t_shirts.append(sizes[2])\n            elif participants[i] == sizes[3]:\n                t_shirts.append(sizes[3])\n            elif participants[i] == sizes[4]:\n                t_shirts.append(sizes[4])\n            elif participants[i] == sizes[5]:\n                t_shirts.append(sizes[5])\n            else:\n                return \"NO\"\n        return \"YES\\n\" + \"\\n\".join(map(str, t_shirts))"
    },
    {
        "number": 1161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char in '<{[':\n            stack.append(char)\n        elif char in '>})]':\n            if not stack:\n                return 'Impossible'\n            if char == '>' and stack[-1] == '<':\n                stack.pop()\n            elif char == '}' and stack[-1] == '{':\n                stack.pop()\n            elif char == ']' and stack[-1] == '[':\n                stack.pop()\n            elif char == ')' and stack[-1] == '(':\n                stack.pop()\n            else:\n                return 'Impossible'\n    return len(stack)"
    },
    {
        "number": 1162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, s, r = map(int, stdin.split())\n    P = 1\n    Q = 1\n    for i in range(1, p+1):\n        P *= i\n        Q *= s - r + i - 1\n    return str(P * pow(Q, -1, 998244353))"
    },
    {
        "number": 1163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    line = ['B'] * n + ['G'] * m\n    return ''.join(line)"
    },
    {
        "number": 1164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total_price = 0\n    for purchase in stdin.split():\n        name, price = purchase.split('price_')\n        price = float(price)\n        total_price += price\n    return '{:.2f}'.format(total_price)"
    },
    {
        "number": 1165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    result = []\n    for i in range(m):\n        l, r, x = map(int, stdin.readline().split())\n        for j in range(l, r+1):\n            if a[j]!= x:\n                result.append(j)\n                break\n        else:\n            result.append(-1)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 1166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    s = ['B'] * n\n    for i in range(n):\n        if a[i] == 1:\n            s[i] = 'A'\n            break\n    for i in range(n):\n        if s[i] == 'B':\n            for j in range(i+1, n):\n                if a[j] > a[i] and (j-i) % a[i] == 0:\n                    s[j] = 'A'\n                    break\n    return ''.join(s)"
    },
    {
        "number": 1167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, d, k = map(int, stdin.readline().strip().split())\n        if c > k or d > k:\n            print(-1)\n        else:\n            x = min(a, k // c)\n            y = min(b, k // d)\n            print(x, y)\n    return \"\""
    },
    {
        "number": 1168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] | a[j]) > a[i]:\n                count += 1\n    return count"
    },
    {
        "number": 1169,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    min_isolated = 0\n    max_isolated = 0\n    if m == 0:\n        min_isolated = 1\n        max_isolated = 1\n    elif n == 1:\n        min_isolated = 1\n        max_isolated = 1\n    elif n == 2:\n        if m == 1:\n            min_isolated = 1\n            max_isolated = 1\n        else:\n            min_isolated = 0\n            max_isolated = 2\n    else:\n        if m == n - 1:\n            min_isolated = 1\n            max_isolated = n - 1\n        else:\n            min_isolated = 0\n            max_isolated = n\n    return f\"{min_isolated} {max_isolated}\""
    },
    {
        "number": 1170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x = int(stdin.readline().strip())\n        if x == 0:\n            print(1, 1)\n        elif x == 1:\n            print(2, 2)\n        else:\n            for n in range(2, 10**5):\n                for m in range(2, n+1):\n                    if (n-m+1) % 2 == 0:\n                        continue\n                    if (n-m+1) // 2 >= x:\n                        print(n, m)\n                        break\n                else:\n                    continue\n                break\n            else:\n                print(-1)\n    return \"\""
    },
    {
        "number": 1171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    jewels = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    left = 0\n    right = N - 1\n    max_sum = 0\n    hand = []\n\n    # Perform operations\n    for _ in range(K):\n        # Take out leftmost jewel\n        if left < right:\n            hand.append(jewels[left])\n            left += 1\n        # Take out rightmost jewel\n        if left < right:\n            hand.append(jewels[right])\n            right -= 1\n        # Insert jewel to left end\n        if hand:\n            jewels.insert(left, hand.pop(0))\n            left += 1\n        # Insert jewel to right end\n        if hand:\n            jewels.insert(right + 1, hand.pop())\n            right += 1\n        # Update max sum\n        max_sum = max(max_sum, sum(hand))\n\n    # Return result\n    return str(max_sum)"
    },
    {
        "number": 1172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    S = stdin.strip()\n    Q = S.count('?')\n    ans = 0\n    for i in range(3**Q):\n        T = S.replace('?', 'ABC'[i%3])\n        abc = 0\n        for j in range(len(T)-2):\n            if T[j] == T[j+1] == T[j+2]:\n                abc += 1\n        ans = (ans + abc) % MOD\n    return str(ans)"
    },
    {
        "number": 1173,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    a = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n\n    # Check if it is possible to schedule all the matches\n    if n*(n-1)//2!= sum(len(set(a[i])) for i in range(n)):\n        return '-1'\n\n    # Check if all conditions are satisfied\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i][j] == a[j][i]:\n                return '-1'\n\n    # Schedule matches\n    matches = []\n    for i in range(n):\n        for j in range(i+1, n):\n            matches.append((i, j))\n\n    days = 0\n    while matches:\n        day_matches = []\n        for i in range(n):\n            if matches and matches[0][0] == i:\n                day_matches.append(matches.pop(0))\n        if not day_matches:\n            days += 1\n            continue\n        for i in range(n):\n            if i in [match[0] for match in day_matches]:\n                continue\n            for j in range(n):\n                if j in [match[1] for match in day_matches]:\n                    continue\n                if a[i][j] in [match[1] for match in day_matches]:\n                    continue\n                if a[j][i] in [match[1] for match in day_matches]:\n                    continue\n                day_matches.append((i, j))\n        days += 1\n\n    return str(days)"
    },
    {
        "number": 1174,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    dp = [0] * (1 << M)\n    dp[0] = 0\n\n    # Fill dp table\n    for i in range(N):\n        for j in range(1 << M):\n            # If we don't use any tickets, we can't get the item for free\n            if j == 0:\n                dp[j] = max(dp[j], dp[j] + A[i])\n            else:\n                # If we use a ticket, we can get the item for half the price\n                dp[j] = max(dp[j], dp[j ^ (1 << (M - 1))] + A[i] // (2 ** (j & (M - 1))))\n\n    # Return the maximum value in dp table\n    return dp[-1]"
    },
    {
        "number": 1175,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, R = map(int, stdin.split())\n    MOD = 10**9 + 7\n    count = 0\n    for x in range(L, R+1):\n        for y in range(x, R+1):\n            if (y ^ x) % x == 0:\n                count += 1\n    return str(count % MOD)"
    },
    {
        "number": 1176,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Perform operations\n    for i in range(1, N):\n        A[i] *= -1\n        A[i-1] *= -1\n\n    # Compute sum of modified sequence\n    B = [abs(x) for x in A]\n    return str(sum(B))"
    },
    {
        "number": 1177,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, S = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    MOD = 998244353\n    dp = [[0] * (N+1) for _ in range(N+1)]\n\n    # Fill dp table\n    for i in range(N):\n        for j in range(i+1, N+1):\n            if A[i] + A[j] == S:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j-1] + dp[i+1][j]\n            dp[i][j] %= MOD\n\n    # Compute sum of f(L, R)\n    result = 0\n    for i in range(N):\n        for j in range(i+1, N+1):\n            result += dp[i][j]\n            result %= MOD\n\n    return str(result)"
    },
    {
        "number": 1178,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    H = list(map(int, stdin.readline().split()))\n\n    # Modify H according to K\n    for i in range(K):\n        H[i] = 0\n\n    # Initialize variables\n    count = 0\n    painted = [False] * N\n\n    # Paint squares\n    for i in range(N):\n        for j in range(H[i]):\n            if not painted[i]:\n                count += 1\n                painted[i] = True\n            if i > 0 and not painted[i-1]:\n                count += 1\n                painted[i-1] = True\n            if i < N-1 and not painted[i+1]:\n                count += 1\n                painted[i+1] = True\n\n    return str(count)"
    },
    {
        "number": 1179,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ids = list(map(int, stdin.split()))\n    if k > n * (n + 1) // 2:\n        return \"Invalid input\"\n    if k == 1:\n        return str(ids[0])\n    if k == 2:\n        return str(ids[1])\n    if k == n:\n        return str(ids[-1])\n    if k == n + 1:\n        return str(ids[-2])\n    if k == n + 2:\n        return str(ids[-3])\n    if k == n * (n + 1) // 2:\n        return str(ids[0])\n    if k == n * (n + 1) // 2 + 1:\n        return str(ids[1])\n    if k == n * (n + 1) // 2 + 2:\n        return str(ids[2])\n    if k == n * (n + 1) // 2 + n - 1:\n        return str(ids[-2])\n    if k == n * (n + 1) // 2 + n:\n        return str(ids[-3])\n    if k == n * (n + 1) // 2 + n + 1:\n        return str(ids[-4])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2:\n        return str(ids[n - 1])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + 1:\n        return str(ids[n - 2])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + 2:\n        return str(ids[n - 3])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n - 1:\n        return str(ids[-3])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n:\n        return str(ids[-4])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n + 1:\n        return str(ids[-5])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2:\n        return str(ids[n - 2])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2 + 1:\n        return str(ids[n - 3])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2 + 2:\n        return str(ids[n - 4])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2 + n - 1:\n        return str(ids[-4])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2 + n:\n        return str(ids[-5])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2 + n + 1:\n        return str(ids[-6])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2 + n * (n - 3) // 2:\n        return str(ids[n - 3])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2 + n * (n - 3) // 2 + 1:\n        return str(ids[n - 4])\n    if k == n * (n + 1) // 2 + n * (n - 1) // 2 + n * (n - 2) // 2 + n * (n - 3) //"
    },
    {
        "number": 1180,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    digits = stdin.strip()\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if digits[i] == '0' and digits[j] == '0':\n                continue\n            if digits[i] == '0' or digits[j] == '0':\n                ans = (ans + dp[j-i-1][k-1]) % MOD\n            else:\n                ans = (ans + dp[j-i-1][k]) % MOD\n    return str(ans)"
    },
    {
        "number": 1181,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    ans = 0\n    for i in range(m - 1):\n        ans += abs(a[i] - a[i+1])\n    return str(ans)"
    },
    {
        "number": 1182,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c, n, k = map(int, stdin.split())\n    violas = set()\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        violas.add((x, y))\n    count = 0\n    for i in range(1, r+1):\n        for j in range(1, c+1):\n            if (i, j) in violas:\n                count += 1\n            if count >= k:\n                return count\n    for i in range(1, r+1):\n        for j in range(1, c+1):\n            if (i, j) not in violas:\n                count += 1\n            if count >= k:\n                return count\n    for i in range(1, c+1):\n        for j in range(1, r+1):\n            if (i, j) in violas:\n                count += 1\n            if count >= k:\n                return count\n    for i in range(1, c+1):\n        for j in range(1, r+1):\n            if (i, j) not in violas:\n                count += 1\n            if count >= k:\n                return count\n    return count"
    },
    {
        "number": 1183,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        v = a[-1] + x\n        if v > 54:\n            print(54)\n        else:\n            print(v)"
    },
    {
        "number": 1184,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove brackets and split the string into a list of letters\n    letters = stdin.strip(\"{}\").split(\",\")\n    # Convert the list of letters to a set to remove duplicates\n    distinct_letters = set(letters)\n    # Return the length of the set\n    return len(distinct_letters)"
    },
    {
        "number": 1185,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    p.sort()\n    res = 0\n    for i in range(k):\n        res += p[i*m:(i+1)*m].sum()\n    return str(res)"
    },
    {
        "number": 1186,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n+1):\n        if (i & (i-1)) == 0:\n            p = [j for j in range(1, n+1) if j!= i]\n            q = [j for j in range(1, n+1) if j!= i and j & i == 0]\n            if len(q) == 0:\n                return \"NO\"\n            return \"YES\\n\" + \" \".join(map(str, p)) + \"\\n\" + \" \".join(map(str, q))\n    return \"NO\""
    },
    {
        "number": 1187,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    colors = [0] * m\n    used_colors = set()\n    for i in range(m):\n        for j in range(i+1, m):\n            if edges[i][0] == edges[j][0] or edges[i][0] == edges[j][1] or edges[i][1] == edges[j][0] or edges[i][1] == edges[j][1]:\n                continue\n            if colors[i] == colors[j]:\n                return \"No\"\n            if colors[i] == 0 and colors[j] == 0:\n                colors[i] = 1\n                colors[j] = 2\n                used_colors.add(1)\n                used_colors.add(2)\n            elif colors[i] == 0:\n                colors[i] = colors[j]\n            elif colors[j] == 0:\n                colors[j] = colors[i]\n            else:\n                colors[j] = 3 - colors[i] - colors[j]\n                used_colors.add(3 - colors[i] - colors[j])\n    if len(used_colors) < k:\n        return \"No\"\n    return \"Yes\\n\" + \" \".join(map(str, colors))"
    },
    {
        "number": 1188,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    m = set()\n    for i in range(n):\n        x = a[i]\n        k = 0\n        while x > 0:\n            x -= 2**k\n            k += 1\n        m.add(k)\n    if not m:\n        return '-1'\n    return''.join(map(str, sorted(m)))"
    },
    {
        "number": 1189,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    MOD = 10**6 + 3\n    dp = [[0] * (c+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(c+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    return dp[n][c]"
    },
    {
        "number": 1190,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w1, h1, w2, h2 = map(int, stdin.split())\n    return str((w1 + w2 - 1) * h1 + (w2 - 1) * h2)"
    },
    {
        "number": 1191,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    powers = list(map(int, stdin.readline().split()))\n    coins = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    dp[0] = coins[0]\n    for i in range(1, n):\n        dp[i] = coins[i]\n        for j in range(max(0, i-k), i):\n            if powers[i] > powers[j]:\n                dp[i] = max(dp[i], dp[j] + coins[i])\n    return''.join(map(str, dp))"
    },
    {
        "number": 1192,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    inversions = 0\n    for i in range(k):\n        l, r = sorted(random.sample(range(n), 2))\n        if l == r:\n            continue\n        inversions += sum(p[l:r+1][::-1])\n        p[l:r+1] = p[l:r+1][::-1]\n    return str(inversions/k)"
    },
    {
        "number": 1193,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return str(a[-k])"
    },
    {
        "number": 1194,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = list(map(int, stdin.readline().strip().split()))\n    result = []\n    carry = 0\n    for i in range(n):\n        s = (p[i] + q[i] + carry) % n\n        carry = (p[i] + q[i] + carry) // n\n        result.append(s)\n    if carry:\n        result.append(carry)\n    return''.join(map(str, result))"
    },
    {
        "number": 1195,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    return sum(a)"
    },
    {
        "number": 1196,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    t = \"\"\n    for i in range(n):\n        l, c = map(str, stdin.split()[i].split(\"-\"))\n        t += c * int(l)\n    s = \"\"\n    for i in range(m):\n        l, c = map(str, stdin.split()[i + n].split(\"-\"))\n        s += c * int(l)\n    count = 0\n    for i in range(len(t) - len(s) + 1):\n        if t[i:i+len(s)] == s:\n            count += 1\n    return count"
    },
    {
        "number": 1197,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if stdin[i] == \"*\":\n                dp[i][j] = 0\n            elif stdin[i] == \"?\":\n                if i > 0:\n                    dp[i][j] += dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j-1]\n                if i > 0 and j > 0:\n                    dp[i][j] -= dp[i-1][j-1]\n    return dp[-1][-1] % 1000000007"
    },
    {
        "number": 1198,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    ans = float('inf')\n    for i in range(n - c + 1):\n        ans = min(ans, sum(a[i+j] for j in range(c)))\n    return str(ans)"
    },
    {
        "number": 1199,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    c = list(map(int, stdin.split()[2:]))\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = 1\n            else:\n                for k in range(m):\n                    if k!= j:\n                        dp[i][j] += dp[i-1][k]\n    ans = 0\n    for i in range(m):\n        ans = max(ans, dp[n-1][i])\n    if ans == 0:\n        return \"0\"\n    res = []\n    for i in range(n):\n        for j in range(m):\n            if dp[i][j] == ans:\n                res.append(str(j+1) + \" \" + str(c[i]))\n    return str(ans) + \"\\n\" + \"\\n\".join(res)"
    },
    {
        "number": 1200,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    x.sort()\n    m = 0\n    for i in range(1, n):\n        if x[i] - x[i-1] > 2*(x[i] - x[i-1] - x[i-2]):\n            m += 1\n    return str(m)"
    },
    {
        "number": 1201,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    items = []\n    for i in range(n):\n        t, d, p = map(int, stdin.readline().strip().split())\n        items.append((t, d, p))\n    items.sort(key=lambda x: x[1])\n    saved = []\n    total_value = 0\n    for i in range(n):\n        if items[i][1] >= items[i][0]:\n            continue\n        if not saved or items[i][0] + sum(items[j][0] for j in saved) <= items[i][1]:\n            saved.append(i)\n            total_value += items[i][2]\n    print(total_value)\n    print(len(saved))\n    print(*[i+1 for i in saved])\n    return \"\""
    },
    {
        "number": 1202,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    k = 0\n    while k < n and a[k] == b[k]:\n        k += 1\n    if k == n:\n        return \"0\" * n\n    else:\n        res = [\"0\"] * n\n        for i in range(k):\n            res[i] = \"1\"\n        for i in range(k, n):\n            if a[i] < b[i]:\n                res[i] = \"1\"\n        return \"\".join(res)"
    },
    {
        "number": 1203,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, L = map(int, stdin.split())\n    A = H / (H + L)\n    B = (H + L) / (H + L)\n    return f\"{B:.10f}\""
    },
    {
        "number": 1204,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    points = []\n    efforts = []\n    for i in range(n):\n        p, e = map(int, stdin.split())\n        points.append(p)\n        efforts.append(e)\n    points.sort(reverse=True)\n    efforts.sort(reverse=True)\n    total_effort = 0\n    for i in range(k-1):\n        if points[i] == points[k-1]:\n            total_effort += efforts[i]\n        else:\n            break\n    if total_effort < efforts[k-1]:\n        return -1\n    else:\n        return total_effort"
    },
    {
        "number": 1205,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    good_lines = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] + points[j][0] == 0 and points[i][1] + points[j][1] == 0:\n                good_lines += 1\n    if good_lines == 0:\n        return -1\n    else:\n        return good_lines"
    },
    {
        "number": 1206,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    bids = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        bids.append((l, r))\n    bids.sort(key=lambda x: x[0])\n    max_bid = bids[-1][1]\n    expected_value = 0\n    for i in range(n):\n        l, r = bids[i]\n        if l == max_bid:\n            expected_value += r\n        else:\n            expected_value += max_bid\n    return str(expected_value / n)"
    },
    {
        "number": 1207,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n + 1)\n    skill = [0] * (n + 1)\n    skill[1] = 1\n    q = [1]\n    while q:\n        u = q.pop(0)\n        for v in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                skill[v] = skill[u] + 1\n                q.append(v)\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        if skill[u] < skill[v]:\n            return -1\n    return skill.count(1)"
    },
    {
        "number": 1208,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    registrations = set()\n    for i in range(n):\n        event = stdin.readline().strip()\n        registration = int(event.split()[1])\n        if event[0] == \"+\":\n            registrations.add(registration)\n        else:\n            registrations.remove(registration)\n    return str(len(registrations))"
    },
    {
        "number": 1209,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(float, stdin.readline().strip().split()))\n    b = []\n    for i in range(n):\n        if a[i] >= 0:\n            b.append(int(a[i]+0.5))\n        else:\n            b.append(int(a[i]-0.5))\n    return '\\n'.join(map(str, b))"
    },
    {
        "number": 1210,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    sharks = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        sharks.append((l, r))\n    total = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (sharks[i][1] + 1) * sharks[j][0] % p == 0:\n                total += 1000\n            if (sharks[i][1] + 1) * sharks[j][1] % p == 0:\n                total += 1000\n            if (sharks[j][1] + 1) * sharks[i][0] % p == 0:\n                total += 1000\n            if (sharks[j][1] + 1) * sharks[i][1] % p == 0:\n                total += 1000\n    return str(total)"
    },
    {
        "number": 1211,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * (N+1) for _ in range(K+1)]\n    for i in range(K+1):\n        dp[i][0] = 1\n    for i in range(1, K+1):\n        for j in range(1, N+1):\n            if j >= a[i-1]:\n                dp[i][j] = dp[i-1][j] + dp[i][j-a[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    ans = 0\n    for i in range(K+1):\n        if dp[i][N] > ans:\n            ans = dp[i][N]\n            ans_type = i\n    return f\"{ans_type} {dp[ans_type][N]}\""
    },
    {
        "number": 1212,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.readline().split()))\n    min_sum = float('inf')\n    min_sum_indexes = []\n    for i in range(n - k + 1):\n        curr_sum = sum(h[i:i+k])\n        if curr_sum < min_sum:\n            min_sum = curr_sum\n            min_sum_indexes = [i]\n        elif curr_sum == min_sum:\n            min_sum_indexes.append(i)\n    return''.join(map(str, min_sum_indexes))"
    },
    {
        "number": 1213,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    slogan = stdin.split()[2]\n    t = 0\n    actions = []\n    for i in range(n):\n        if slogan[i] == '?':\n            actions.append(\"PRINT?\")\n            t += 1\n        elif slogan[i] == '!':\n            actions.append(\"PRINT!\")\n            t += 1\n        elif slogan[i] == ',':\n            actions.append(\"PRINT,\")\n            t += 1\n        elif slogan[i] == '.':\n            actions.append(\"PRINT.\")\n            t += 1\n        else:\n            actions.append(\"PRINT \" + slogan[i])\n            t += 1\n        if i == k-1:\n            actions.append(\"LEFT\")\n            t += 1\n        elif i == k:\n            actions.append(\"RIGHT\")\n            t += 1\n    return str(t) + \"\\n\" + \"\\n\".join(actions)"
    },
    {
        "number": 1214,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    xs = list(map(int, stdin.split()[1:]))\n    if n % 2 == 1:\n        return \"No\"\n    for i in range(1, n, 2):\n        if (xs[i] - xs[i-1]) % 2 == 1:\n            return \"No\"\n    for i in range(2, n, 2):\n        xs[i] = xs[i-2] + xs[i-1]\n    return \"Yes\\n\" + \" \".join(map(str, xs))"
    },
    {
        "number": 1215,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 1:\n        return 0\n    else:\n        return 4 * solution(stdin-1) + 2 * solution(stdin-2)"
    },
    {
        "number": 1216,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    result = ''\n    i = 0\n    while i < n:\n        if s[i] in vowels:\n            j = i + 1\n            while j < n and s[j] in vowels and (s[j]!= s[i] or (s[j] == 'e' and s[j-1] == 'e') or (s[j] == 'o' and s[j-1] == 'o')):\n                j += 1\n            result += s[i] * (j - i)\n            i = j\n        else:\n            result += s[i]\n            i += 1\n    return result"
    },
    {
        "number": 1217,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[i] <= b[j]:\n                count[j] += 1\n    return''.join(map(str, count))"
    },
    {
        "number": 1218,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if n == 1:\n        return \"1\"\n    if k == 1:\n        return \"0\"\n    if n % k == 0:\n        return str(n // k)\n    else:\n        return \"-1\""
    },
    {
        "number": 1219,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(n-1):\n        a[i] = max(a[i], -a[i+1])\n        a[i+1] = max(a[i+1], -a[i])\n    return max(a)"
    },
    {
        "number": 1220,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = set()\n    for i in range(m):\n        x, y = map(int, stdin.readline().split())\n        edges.add((x, y))\n        edges.add((y, x))\n    graph = {i: set() for i in range(1, n+1)}\n    for x, y in edges:\n        graph[x].add(y)\n        graph[y].add(x)\n    visited = set()\n    components = []\n    for i in range(1, n+1):\n        if i not in visited:\n            component = set()\n            stack = [i]\n            while stack:\n                node = stack.pop()\n                if node not in visited:\n                    visited.add(node)\n                    component.add(node)\n                    for neighbor in graph[node]:\n                        if neighbor not in visited:\n                            stack.append(neighbor)\n            components.append(component)\n    components.sort(key=len, reverse=True)\n    print(len(components))\n    for component in components:\n        print(len(component), end=' ')\n    return ''"
    },
    {
        "number": 1221,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    a.sort()\n    b.sort()\n    return max(a[-1]*b[-1], a[-2]*b[-2])"
    },
    {
        "number": 1222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    count = 0\n    num = 1\n    while count < k:\n        num += 1\n        if is_lunlun(num):\n            count += 1\n    return str(num)\n\ndef"
    },
    {
        "number": 1223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    X = [0] * N\n    for i in range(N):\n        X[P[i]-1] = i+1\n\n    # Compute X_{L, R}\n    for L in range(N-1):\n        for R in range(L+1, N):\n            if X[L] < X[R]:\n                X[R] = X[L]\n\n    # Compute sum\n    result = 0\n    for L in range(N-1):\n        for R in range(L+1, N):\n            result += X[R]\n\n    return str(result)"
    },
    {
        "number": 1224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if 3**i + 5**j == n:\n                return str(i) + \" \" + str(j)\n    return \"-1\""
    },
    {
        "number": 1225,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H = int(stdin)\n    attacks = 0\n    while H > 0:\n        if H == 1:\n            H = 0\n        elif H > 1:\n            attacks += 1\n            H = H // 2\n    return str(attacks)"
    },
    {
        "number": 1226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    count = 1\n    for i in range(2, n+1):\n        count = (count * i) % (10**9 + 7)\n    count = (count * (n-1)) % (10**9 + 7)\n    count = (count * (n-2)) % (10**9 + 7)\n    count = (count * (n-3)) % (10**9 + 7)\n    count = (count * (n-4)) % (10**9 + 7)\n    count = (count * (n-5)) % (10**9 + 7)\n    count = (count * (n-6)) % (10**9 + 7)\n    count = (count * (n-7)) % (10**9 + 7)\n    count = (count * (n-8)) % (10**9 + 7)\n    count = (count * (n-9)) % (10**9 + 7)\n    count = (count * (n-10)) % (10**9 + 7)\n    count = (count * (n-11)) % (10**9 + 7)\n    count = (count * (n-12)) % (10**9 + 7)\n    count = (count * (n-13)) % (10**9 + 7)\n    count = (count * (n-14)) % (10**9 + 7)\n    count = (count * (n-15)) % (10**9 + 7)\n    count = (count * (n-16)) % (10**9 + 7)\n    count = (count * (n-17)) % (10**9 + 7)\n    count = (count * (n-18)) % (10**9 + 7)\n    count = (count * (n-19)) % (10**9 + 7)\n    count = (count * (n-20)) % (10**9 + 7)\n    count = (count * (n-21)) % (10**9 + 7)\n    count = (count * (n-22)) % (10**9 + 7)\n    count = (count * (n-23)) % (10**9 + 7)\n    count = (count * (n-24)) % (10**9 + 7)\n    count = (count * (n-25)) % (10**9 + 7)\n    count = (count * (n-26)) % (10**9 + 7)\n    count = (count * (n-27)) % (10**9 + 7)\n    count = (count * (n-28)) % (10**9 + 7)\n    count = (count * (n-29)) % (10**9 + 7)\n    count = (count * (n-30)) % (10**9 + 7)\n    count = (count * (n-31)) % (10**9 + 7)\n    count = (count * (n-32)) % (10**9 + 7)\n    count = (count * (n-33)) % (10**9 + 7)\n    count = (count * (n-34)) % (10**9 + 7)\n    count = (count * (n-35)) % (10**9 + 7)\n    count = (count * (n-36)) % (10**9 + 7)\n    count = (count * (n-37)) % (10**9 + 7)\n    count = (count * (n-38)) % (10**9 + 7)\n    count = (count * (n-39)) % (10**9 + 7)\n    count = (count * (n-40)) % (10**9 + 7)\n    count = (count * (n-41)) % (10**9 + 7)\n    count = (count * (n-42)) % (10**9 + 7)\n    count = (count * (n-43)) % (10**9 + 7)\n    count = (count * (n-44)) % (10**9 + 7)\n    count = (count * (n-45)) % (1"
    },
    {
        "number": 1227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        digits = [int(d) for d in str(i)]\n        if len(set(digits)) == k:\n            count += 1\n    return str(count)"
    },
    {
        "number": 1228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    if x % 4 == 1:\n        return \"0 A\"\n    elif x % 4 == 3:\n        return \"1 B\"\n    elif x % 4 == 2:\n        return \"2 C\"\n    else:\n        return \"3 D\""
    },
    {
        "number": 1229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    multiset = [stdin.readline().strip() for _ in range(n)]\n    coins = [list(map(int, stdin.readline().split())) for _ in range(n)]\n    count = [0] * 26\n    for i in range(n):\n        for j in range(m):\n            count[ord(multiset[i][j]) - ord('a')] += coins[i][j]\n    for i in range(n):\n        for j in range(m):\n            if coins[i][j] == 1:\n                for k in range(26):\n                    if k!= ord(multiset[i][j]) - ord('a'):\n                        count[k] -= 1\n    return sum(count)"
    },
    {
        "number": 1230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if sum(a) == 0:\n        return \"0\"\n    if sum(a) == n*(n-1)//2:\n        return \"1\"\n    if sum(a) == n*(n-1):\n        return \"2\"\n    return \"-1\""
    },
    {
        "number": 1231,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    if a == 0 and b == 0:\n        return \"YES\"\n    elif a == 0 and b == 1:\n        return \"NO\"\n    elif a == 1 and b == 0:\n        return \"NO\"\n    elif a == 1 and b == 1:\n        return \"YES\"\n    else:\n        return \"YES\" if a <= b else \"NO\""
    },
    {
        "number": 1232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_a, n_b = map(int, stdin.split()[0:2])\n    k, m = map(int, stdin.split()[2:4])\n    a = list(map(int, stdin.split()[4:4+n_a]))\n    b = list(map(int, stdin.split()[4+n_a:]))\n\n    if k > n_a or m > n_b:\n        return \"NO\"\n\n    i = j = 0\n    count = 0\n    while i < n_a and j < n_b:\n        if a[i] < b[j]:\n            i += 1\n            count += 1\n        elif a[i] > b[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n            count += 1\n\n    if count >= k and count >= m:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n    return f\"{count} {count*(count-1)//2}\""
    },
    {
        "number": 1234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    a.sort()\n    ans = 0\n    for i in range(n-m+1):\n        ans += sum(a[i:i+m])\n    ans = ans // k\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n    for i in range(k-1):\n        ans = max(ans, dp[i+1] - dp[i])\n    return str(ans) + '\\n' +''.join(map(str, [i+1 for i in range(k-1)]))"
    },
    {
        "number": 1235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *A = map(int, stdin.split())\n    m, *B = map(int, stdin.split())\n    for a in A:\n        for b in B:\n            if a+b not in A and a+b not in B:\n                return f\"{a} {b}\"\n    return \"No solution found\""
    },
    {
        "number": 1236,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total_population = sum(a)\n    if total_population % 2 == 0:\n        return \"Daenerys\"\n    else:\n        return \"Stannis\""
    },
    {
        "number": 1237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    floors = [0] * (s+1)\n    for i in range(n):\n        f, t = map(int, stdin.split())\n        floors[f] = t\n    floors[s] = float('inf')\n    time = 0\n    for i in range(s, -1, -1):\n        if floors[i] <= time:\n            time = floors[i]\n        else:\n            time += 1\n    return time"
    },
    {
        "number": 1238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = sorted(map(int, stdin.split()[1:]))\n    x = a[0]\n    for i in range(1, n):\n        if a[i] - a[i-1] > 1:\n            return str(a[i] - a[i-1] - 1)\n    return \"0\""
    },
    {
        "number": 1239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    min_dist = abs(a[0] - a[1])\n    count = 1\n    for i in range(1, n-1):\n        if abs(a[i] - a[i+1]) < min_dist:\n            min_dist = abs(a[i] - a[i+1])\n            count = 1\n        elif abs(a[i] - a[i+1]) == min_dist:\n            count += 1\n    return f\"{min_dist} {count}\""
    },
    {
        "number": 1240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    r = list(map(int, stdin.readline().strip().split()))\n    max_beauty = 0\n    max_index = 0\n    for i in range(n):\n        beauty = abs(sum(l[:i]) - sum(r[:i]))\n        if beauty > max_beauty:\n            max_beauty = beauty\n            max_index = i\n    return str(max_index) if max_beauty > 0 else \"0\""
    },
    {
        "number": 1241,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    f = 0\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            count += 1\n            if count > k:\n                f -= 1\n                count = 0\n        else:\n            f += 1\n            count = 0\n    if count > k:\n        f -= 1\n    print(f)\n    print(*a)"
    },
    {
        "number": 1242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    ans = [0] * n\n    for i in range(1, n):\n        if s[:i] < s[i:]:\n            ans[i-1] = 1\n    return''.join(map(str, ans))"
    },
    {
        "number": 1243,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matches = list(map(int, stdin.readline().split()))\n    moves = 0\n    for i in range(n-1):\n        if matches[i]!= matches[i+1]:\n            moves += abs(matches[i] - matches[i+1])\n            matches[i+1] = matches[i]\n    return moves"
    },
    {
        "number": 1244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    for i in range(n-1):\n        if arr[i] == arr[i+1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort(key=lambda x: x[0])\n    if segments[-1][1]!= 2*n:\n        return \"IMPOSSIBLE\"\n    stack = []\n    for i in range(n):\n        l, r = segments[i]\n        if stack and stack[-1][1] <= l:\n            stack.pop()\n        stack.append((l, r))\n    return \"\".join(\"()\" for _ in range(len(stack)))"
    },
    {
        "number": 1246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    records = stdin.split('\\n')[1:]\n    heap = []\n    for record in records:\n        op, arg = record.split()\n        if op == 'insert':\n            heap.append(int(arg))\n            heapq.heapify(heap)\n        elif op == 'getMin':\n            if not heap:\n                heap.append(int(arg))\n            else:\n                heapq.heappush(heap, int(arg))\n            print(heap[0])\n        elif op =='removeMin':\n            if not heap:\n                continue\n            heapq.heappop(heap)\n    return str(len(records) + len(heap)) + '\\n' + '\\n'.join(records + [' '.join([op, str(arg)]) for op, arg in [('insert', x) for x in heap] + [('removeMin', '')] * len(heap)])"
    },
    {
        "number": 1247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 0:\n        return \"Second\"\n    else:\n        for i in range(n):\n            if s[i]!= s[n-i-1]:\n                return \"First\"\n        return \"Second\""
    },
    {
        "number": 1248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d1, d2, d3 = map(int, stdin.split())\n    return str(min(d1 + d2 + d3, d1 + d3 + d2))"
    },
    {
        "number": 1249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k, n, s = map(int, stdin.split()[0:4])\n    a = list(map(int, stdin.split()[4:4+m]))\n    b = list(map(int, stdin.split()[4+m:]))\n    b_count = [0] * (max(b) + 1)\n    for i in b:\n        b_count[i] += 1\n    for i in range(len(b_count)):\n        if b_count[i] < n:\n            return '-1'\n    for i in range(len(a)):\n        if a[i] not in b:\n            return '-1'\n    for i in range(len(a)):\n        if a[i] == b[0]:\n            if b_count[b[0]] == 0:\n                return '-1'\n            b_count[b[0]] -= 1\n            break\n    d = 0\n    for i in range(len(a)):\n        if a[i]!= b[0]:\n            d += 1\n            if d == k:\n                break\n    if d == k:\n        return str(d) + '\\n' +''.join(map(str, [i+1 for i in range(d)]))\n    else:\n        return '-1'"
    },
    {
        "number": 1250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"-1\"\n    a = list(range(1, n+1))\n    for i in range(n-1):\n        for j in range(i, n-1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return \" \".join(map(str, a))"
    },
    {
        "number": 1251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = dp[i-1] + 1\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return dp[-1]"
    },
    {
        "number": 1252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, T = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v, t = map(int, stdin.split())\n        graph[u].append((v, t))\n        graph[v].append((u, t))\n    visited = [False] * (n+1)\n    visited[1] = True\n    q = [(1, 0)]\n    ans = 0\n    while q:\n        node, time = q.pop(0)\n        if time > T:\n            break\n        ans += 1\n        for nei, t in graph[node]:\n            if not visited[nei]:\n                visited[nei] = True\n                q.append((nei, time+t))\n    print(ans)\n    print(*[i for i in range(1, n+1) if visited[i]])\n    return \"\""
    },
    {
        "number": 1253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    seq = list(map(int, stdin.readline().split()))\n    total_income = sum(seq)\n    for i in range(k):\n        max_income = 0\n        for j in range(n):\n            if seq[j] < 0:\n                seq[j] *= -1\n            else:\n                seq[j] = -seq[j]\n            total_income = sum(seq)\n            if total_income > max_income:\n                max_income = total_income\n        seq = list(map(int, stdin.readline().split()))\n    return str(max_income)"
    },
    {
        "number": 1254,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    subjects = [0] * n\n    skills = [0] * n\n    for i in range(n):\n        s, r = map(int, stdin.readline().split())\n        subjects[i] = s - 1\n        skills[i] = r\n    # dp[i][j] - max sum of skills of delegates who form a valid delegation with i students from subject j\n    dp = [[0] * m for _ in range(n+1)]\n    for i in range(n):\n        for j in range(m):\n            if subjects[i] == j:\n                dp[1][j] += skills[i]\n            else:\n                dp[1][j] -= skills[i]\n    for i in range(2, n+1):\n        for j in range(m):\n            for k in range(m):\n                dp[i][j] = max(dp[i][j], dp[i-1][k] + (i // m) * (dp[i-1][j] - dp[i-1][k]))\n    max_sum = max(dp[n])\n    if max_sum < 0:\n        return \"0\"\n    else:\n        return str(max_sum)"
    },
    {
        "number": 1255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arrival_times = []\n    for i in range(n):\n        h, m = map(int, stdin.readline().strip().split())\n        arrival_times.append((h, m))\n    arrival_times.sort()\n    cashes = 1\n    current_time = arrival_times[0]\n    for i in range(1, n):\n        if arrival_times[i][0] >= current_time[0]:\n            if arrival_times[i][1] > current_time[1]:\n                cashes += 1\n                current_time = arrival_times[i]\n        else:\n            cashes += 1\n            current_time = arrival_times[i]\n    return str(cashes)"
    },
    {
        "number": 1256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of summands\n    summands = stdin.split(\"+\")\n    \n    # Convert the summands to integers\n    summands = [int(summand) for summand in summands]\n    \n    # Sort the summands in non-decreasing order\n    summands.sort()\n    \n    # Convert the summands back to strings and join them with \"+\"\n    return \"+\".join(str(summand) for summand in summands)"
    },
    {
        "number": 1257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    table = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = (i+1) * (j+1)\n    for i in range(n):\n        table[i][k-1] = sum(table[i])\n    for i in range(n):\n        table[k-1][i] = sum(table[i])\n    for i in range(n):\n        for j in range(n):\n            if table[i][j] == 0:\n                table[i][j] = table[i-1][j] + 1\n    for i in range(n):\n        table[i][k-1] = sum(table[i])\n    for i in range(n):\n        table[k-1][i] = sum(table[i])\n    print(table[k-1][k-1])\n    for row in table:\n        print(' '.join(map(str, row)))\n    return ''"
    },
    {
        "number": 1258,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    q = []\n    for i in range(n-2):\n        q.append(list(map(int, stdin.readline().strip().split())))\n    p = [i+1 for i in range(n)]\n    for i in range(n-2):\n        for j in range(3):\n            if q[i][j]!= p[i+j]:\n                p[i+j], p[i+j+1] = p[i+j+1], p[i+j]\n    return''.join(map(str, p))"
    },
    {
        "number": 1259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    for i in range(1, n+1):\n        graph[i].sort()\n    def dfs(u, parent, visited, in_cycle):\n        visited[u] = True\n        in_cycle[u] = True\n        for v in graph[u]:\n            if v == parent:\n                continue\n            if visited[v]:\n                if in_cycle[v]:\n                    return True\n            else:\n                if dfs(v, u, visited, in_cycle):\n                    return True\n        in_cycle[u] = False\n        return False\n    def find_independent_set():\n        visited = [False] * (n+1)\n        in_cycle = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                if dfs(i, -1, visited, in_cycle):\n                    return False\n        independent_set = []\n        for i in range(1, n+1):\n            if not visited[i]:\n                independent_set.append(i)\n        return independent_set\n    def find_simple_cycle():\n        visited = [False] * (n+1)\n        in_cycle = [False] * (n+1)\n        for i in range(1, n+1):\n            if not visited[i]:\n                if dfs(i, -1, visited, in_cycle):\n                    return False\n        for i in range(1, n+1):\n            if in_cycle[i]:\n                return i\n        return -1\n    independent_set = find_independent_set()\n    if len(independent_set) == int(n**0.5) + 1:\n        return \"1\\n\" + \" \".join(map(str, independent_set))\n    else:\n        cycle_length = find_simple_cycle()\n        if cycle_length == -1:\n            return \"2\\n0\"\n        else:\n            cycle = []\n            u = cycle_length\n            while u!= 1:\n                cycle.append(u)\n                u = graph[u][0]\n            cycle.append(1)\n            return \"2\\n\" + str(cycle_length) + \"\\n\" + \" \".join(map(str, cycle))"
    },
    {
        "number": 1260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    max_num = max(a)\n    operations = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] * a[j] > max_num:\n                max_num = a[i] * a[j]\n                operations = [(1, i, j)]\n            elif a[i] * a[j] == max_num:\n                operations.append((1, i, j))\n        if a[i] == max_num:\n            operations.append((2, i))\n    for op in operations:\n        if op[0] == 1:\n            print(f\"1 {op[1]} {op[2]}\")\n        else:\n            print(f\"2 {op[1]}\")\n    return str(max_num)"
    },
    {
        "number": 1261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    seq = list(range(1, n+1))\n    result = []\n    while seq:\n        gcd = seq[0]\n        for i in range(1, len(seq)):\n            gcd = math.gcd(gcd, seq[i])\n        result.append(gcd)\n        seq.remove(seq[0])\n    return''.join(map(str, result))"
    },
    {
        "number": 1262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cities = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        cities.append((x, y))\n    costs = list(map(int, stdin.readline().strip().split()))\n    k = list(map(int, stdin.readline().strip().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            dx, dy = cities[j]\n            if abs(dx - cities[i][0]) + abs(dy - cities[i][1]) <= k[i] + k[j]:\n                graph[i].append(j)\n                graph[j].append(i)\n    visited = [False] * n\n    def dfs(u, cost):\n        if visited[u]:\n            return\n        visited[u] = True\n        for v in graph[u]:\n            dfs(v, cost + abs(cities[u][0] - cities[v][0]) + abs(cities[u][1] - cities[v][1]))\n    ans = float('inf')\n    for i in range(n):\n        visited = [False] * n\n        dfs(i, 0)\n        ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        if costs[i] == 0:\n            continue\n        visited = [False] * n\n        dfs(i, 0)\n        ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j] == 0:\n                continue\n            visited = [False] * n\n            dfs(i, 0)\n            dfs(j, 0)\n            ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j] == 0:\n                continue\n            visited = [False] * n\n            dfs(i, 0)\n            dfs(j, 0)\n            ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j] == 0:\n                continue\n            visited = [False] * n\n            dfs(i, 0)\n            dfs(j, 0)\n            ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j] == 0:\n                continue\n            visited = [False] * n\n            dfs(i, 0)\n            dfs(j, 0)\n            ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j] == 0:\n                continue\n            visited = [False] * n\n            dfs(i, 0)\n            dfs(j, 0)\n            ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j] == 0:\n                continue\n            visited = [False] * n\n            dfs(i, 0)\n            dfs(j, 0)\n            ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j] == 0:\n                continue\n            visited = [False] * n\n            dfs(i, 0)\n            dfs(j, 0)\n            ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j] == 0:\n                continue\n            visited = [False] * n\n            dfs(i, 0)\n            dfs(j, 0)\n            ans = min(ans, sum(costs) + sum(k))\n    for i in range(n):\n        for j in range(i+1, n):\n            if costs[i] == 0 and costs[j"
    },
    {
        "number": 1263,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    total_taste = sum(a)\n    total_calories = sum(b)\n    if total_calories == 0:\n        return -1\n    max_taste = total_taste // total_calories * k\n    if total_taste % total_calories!= 0:\n        max_taste += 1\n    return max_taste"
    },
    {
        "number": 1264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_ones = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ones = sum(a[k] for k in range(i, j+1))\n            max_ones = max(max_ones, ones)\n    return str(max_ones)"
    },
    {
        "number": 1265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split('\\n')\n    if a == b:\n        return \"YES\"\n    for i in range(len(a)):\n        if a[i]!= b[i]:\n            if i == len(a) - 1:\n                return \"NO\"\n            if a[i] == '0' and a[i+1] == '1' and b[i] == '1' and b[i+1] == '0':\n                return \"YES\"\n            if a[i] == '1' and a[i+1] == '0' and b[i] == '0' and b[i+1] == '1':\n                return \"YES\"\n            return \"NO\"\n    return \"NO\""
    },
    {
        "number": 1266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x0, y0 = map(int, stdin.readline().split())\n    pieces = []\n    for i in range(n):\n        piece, x, y = stdin.readline().split()\n        pieces.append((piece, int(x), int(y)))\n    king_x, king_y = x0, y0\n    for piece, x, y in pieces:\n        if piece == 'K':\n            king_x, king_y = x, y\n    for piece, x, y in pieces:\n        if piece == 'B':\n            for dx, dy in [(1, 1), (1, -1), (-1, 1), (-1, -1)]:\n                if 0 <= x + dx <= 1000000000 and 0 <= y + dy <= 1000000000:\n                    if (x + dx, y + dy) == (king_x, king_y):\n                        return 'YES'\n        elif piece == 'R':\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                if 0 <= x + dx <= 1000000000 and 0 <= y + dy <= 1000000000:\n                    if (x + dx, y + dy) == (king_x, king_y):\n                        return 'YES'\n        elif piece == 'Q':\n            for dx, dy in [(1, 1), (1, -1), (-1, 1), (-1, -1), (0, 1), (0, -1), (1, 0), (-1, 0)]:\n                if 0 <= x + dx <= 1000000000 and 0 <= y + dy <= 1000000000:\n                    if (x + dx, y + dy) == (king_x, king_y):\n                        return 'YES'\n    return 'NO'"
    },
    {
        "number": 1267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    scores = list(map(int, stdin.readline().strip().split()))\n    scores.sort()\n    dp = [0] * (scores[-1] + 1)\n    dp[0] = 1\n    for i in range(1, scores[-1] + 1):\n        dp[i] = dp[i - 1]\n        for j in range(n):\n            if scores[j] <= i:\n                dp[i] += dp[i - scores[j]]\n    return dp[-1]"
    },
    {
        "number": 1268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    cans = [0, 0]\n    for i in range(n):\n        if a[i] > 0:\n            if cans[0] + a[i] <= b[i]:\n                cans[0] += a[i]\n            elif cans[1] + a[i] <= b[i]:\n                cans[1] += a[i]\n            else:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = list(map(int, stdin.readline().split()))\n    MOD = 998244353\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, m+1):\n        dp[0][i] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            for k in range(1, j+1):\n                if c[k-1] == i:\n                    dp[i][j] += dp[i-1][k-1] * dp[i-1][j-k]\n                    dp[i][j] %= MOD\n    return dp[n][m]"
    },
    {
        "number": 1270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    primes = []\n    for i in range(2, n+1):\n        if all(i%j!=0 for j in range(2, int(i**0.5)+1)):\n            primes.append(i)\n    k = len(primes)\n    if k == 0:\n        return \"0\"\n    elif k == 1:\n        return \"1\"\n    else:\n        return str(k) + \"\\n\" + \" \".join(map(str, primes))"
    },
    {
        "number": 1271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = map(int, stdin.split()[0:3])\n    r = list(map(int, stdin.split()[3:3+n]))\n    c = list(stdin.split()[3+n:])\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if j < r[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-r[i-1]] + 1)\n    if dp[n][k] == 0:\n        return \"-1\"\n    else:\n        return str(dp[n][k])"
    },
    {
        "number": 1272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    bridges = []\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        bridges.append((a-1, b-1))\n\n    # sort bridges by their indices\n    bridges.sort()\n\n    # initialize inconvenience\n    inconvenience = 0\n\n    # iterate over bridges and update inconvenience\n    for i in range(m):\n        # count pairs of islands that are no longer connected\n        count = 0\n        for j in range(i+1, m):\n            a, b = bridges[j]\n            if a == bridges[i][0] or a == bridges[i][1] or b == bridges[i][0] or b == bridges[i][1]:\n                count += 1\n        inconvenience += count\n\n    return str(inconvenience)"
    },
    {
        "number": 1273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    edges = []\n    for i in range(N-1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n\n    # Find minimum number of colors\n    colors = set()\n    for a, b in edges:\n        colors.add(a)\n        colors.add(b)\n    K = len(colors)\n\n    # Assign colors to edges\n    coloring = [-1] * N\n    for i in range(N-1):\n        a, b = edges[i]\n        for j in range(K):\n            if j not in (coloring[a-1], coloring[b-1]):\n                coloring[i] = j\n                break\n\n    # Print output\n    print(K)\n    for c in coloring:\n        print(c+1)\n\n    return \"\""
    },
    {
        "number": 1274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    dp = [0] * (M + 1)\n    dp[0] = 0\n\n    # Loop through jobs\n    for i in range(N):\n        # Loop through days\n        for j in range(M, A[i] - 1, -1):\n            # Check if we can take the job\n            if dp[j - A[i]] + B[i] > dp[j]:\n                dp[j] = dp[j - A[i]] + B[i]\n\n    # Return maximum reward\n    return dp[M]"
    },
    {
        "number": 1275,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    count = 0\n    for a in range(1, N+1):\n        for b in range(1, N+1):\n            for c in range(1, N+1):\n                for d in range(1, N+1):\n                    if a+b-c-d == K and a <= b <= c <= d:\n                        count += 1\n    return str(count)"
    },
    {
        "number": 1276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    S = stdin.readline().strip()\n\n    # Initialize variables\n    count = 0\n\n    # Loop through all possible triplets\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                # Check if the triplet satisfies both conditions\n                if S[i]!= S[j] and S[i]!= S[k] and S[j]!= S[k] and (j-i)!= (k-j):\n                    count += 1\n\n    # Print result\n    print(count)\n\n    return \"\""
    },
    {
        "number": 1277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, u, v = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(N-1)]\n\n    # Initialize variables\n    takahashi_pos = u\n    aoki_pos = v\n    takahashi_moves = 0\n    aoki_moves = 0\n\n    # Game loop\n    while True:\n        # Check if game has ended\n        if takahashi_pos == aoki_pos:\n            break\n\n        # Takahashi moves\n        takahashi_moves += 1\n        takahashi_adj = [edge[1] for edge in edges if edge[0] == takahashi_pos]\n        takahashi_pos = takahashi_adj[0]\n\n        # Aoki moves\n        aoki_moves += 1\n        aoki_adj = [edge[1] for edge in edges if edge[0] == aoki_pos]\n        aoki_pos = aoki_adj[0]\n\n    # Return result\n    return str(aoki_moves)"
    },
    {
        "number": 1278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    rainy_days = []\n    for i in range(n):\n        if all(a[j] < a[i] for j in range(max(0, i-x), i) + range(i+1, min(n, i+y)+1)):\n            rainy_days.append(i)\n    return rainy_days[0]"
    },
    {
        "number": 1279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if (a[i] + b[j]) % 2 == 1:\n                count += 1\n    return count"
    },
    {
        "number": 1280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, good_letters, k = stdin.strip().split('\\n')\n    k = int(k)\n    good_letters = [int(x) for x in good_letters]\n    n = len(s)\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(n):\n        for j in range(k+1):\n            if j == 0:\n                dp[j][i+1] = 1\n            else:\n                dp[j][i+1] = dp[j][i]\n                if good_letters[ord(s[i])-ord('a')] == 0 and j > 0:\n                    dp[j][i+1] += dp[j-1][i]\n    return dp[k][n]"
    },
    {
        "number": 1281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        xor = a[i]\n        for j in range(i+1, n):\n            xor ^= a[j]\n            if xor == 0:\n                count += 1\n                break\n    return count"
    },
    {
        "number": 1282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    count = 0\n    for i in range(n-1):\n        if stdin[i] == 'M' and stdin[i+1] == 'F':\n            count += 1\n    return count if count > 0 else 0"
    },
    {
        "number": 1283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    field = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    max_count = 0\n    max_cell = None\n    for i in range(n):\n        for j in range(n):\n            if field[i][j] == '#':\n                continue\n            count = 0\n            for di in range(-k+1, k):\n                for dj in range(-k+1, k):\n                    if i+di < 0 or i+di >= n or j+dj < 0 or j+dj >= n:\n                        continue\n                    if field[i+di][j+dj] == '#':\n                        continue\n                    count += 1\n            if count > max_count:\n                max_count = count\n                max_cell = (i, j)\n    return''.join(map(str, max_cell))"
    },
    {
        "number": 1284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return str(a[0])\n    else:\n        for i in range(n-1):\n            a[i] = a[i] + a[(i+1)%n]\n            a.pop((i+1)%n)\n        return str(a[0])"
    },
    {
        "number": 1285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matrix = []\n    for i in range(n):\n        row = stdin.readline().strip()\n        matrix.append([int(row[j:j+4], 16) for j in range(0, n, 4)])\n    for x in range(2, n+1):\n        if n % x == 0:\n            compressed_matrix = [[matrix[i//x][j//x] for j in range(0, n, x)] for i in range(0, n, x)]\n            if compressed_matrix == matrix:\n                return str(x)\n    return \"0\""
    },
    {
        "number": 1286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    n = 1\n    for i in a:\n        n *= i\n    p = 1\n    q = 1\n    for i in range(k):\n        p *= (n // a[i])\n        q *= (a[i] - 1)\n    p %= (10**9 + 7)\n    q %= (10**9 + 7)\n    return f\"{p}/{q}\""
    },
    {
        "number": 1287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = []\n    for i in range(n):\n        row = list(map(float, stdin.readline().strip().split()))\n        p.append(row)\n    for i in range(n):\n        p[i][i] = 0.0\n        for j in range(i+1, n):\n            p[i][j] += p[i][j+1]\n            p[j][i] = p[i][j]\n    p[0][1] = 1.0 - p[0][0] - p[0][2]\n    p[1][0] = 1.0 - p[1][1] - p[1][2]\n    p[2][0] = 1.0 - p[2][1] - p[2][2]\n    p[2][1] = 1.0 - p[2][0] - p[2][2]\n    p[1][2] = 1.0 - p[1][0] - p[1][1]\n    p[0][2] = 1.0 - p[0][0] - p[0][1]\n    p[0][0] = 1.0 - p[0][1] - p[0][2]\n    p[1][1] = 1.0 - p[1][0] - p[1][2]\n    p[2][2] = 1.0 - p[2][0] - p[2][1]\n    return str(p[0][1])"
    },
    {
        "number": 1288,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    return min(a[i] for i in range(k))"
    },
    {
        "number": 1289,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    m, b = map(int, stdin.readline().split())\n    b = list(map(int, stdin.readline().split()))\n    if b[0] == b[-1]:\n        return str(-1)\n    if b[0] > b[-1]:\n        b = b[::-1]\n    i = 0\n    j = 0\n    dist = 0\n    while i < m and j < n:\n        if b[i] == j + 1:\n            i += 1\n        elif b[i] < j + 1:\n            return str(-1)\n        else:\n            dist += a[j]\n            j += 1\n    if i < m:\n        return str(-1)\n    dist += a[j]\n    return str(dist)"
    },
    {
        "number": 1290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    columns = list(map(int, stdin.split()))\n    columns.sort()\n    points = 0\n    for i in range(1, n+1):\n        if i in columns:\n            points += 1\n        else:\n            break\n    return points"
    },
    {
        "number": 1291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    misha_points = []\n    sasha_points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        misha_points.append((x, y))\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        sasha_points.append((x, y))\n    # check if there is a circle that contains all points\n    for i in range(n + m):\n        for j in range(i + 1, n + m):\n            for k in range(j + 1, n + m):\n                if (misha_points[i][0] - misha_points[j][0]) ** 2 + (misha_points[i][1] - misha_points[j][1]) ** 2 == (misha_points[i][0] - misha_points[k][0]) ** 2 + (misha_points[i][1] - misha_points[k][1]) ** 2 and (sasha_points[i][0] - sasha_points[j][0]) ** 2 + (sasha_points[i][1] - sasha_points[j][1]) ** 2 == (sasha_points[i][0] - sasha_points[k][0]) ** 2 + (sasha_points[i][1] - sasha_points[k][1]) ** 2:\n                    return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.readline().split())\n    speed = list(map(int, stdin.readline().split()))\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.readline().strip()))\n    visited = [[False for j in range(m)] for i in range(n)]\n    castles = [[False for j in range(m)] for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j].isdigit():\n                castles[i][j] = True\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                for k in range(p):\n                    if castles[i][j] and speed[int(grid[i][j])-1] > 0:\n                        visited[i][j] = True\n                        break\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == '.':\n                for k in range(p):\n                    if castles[i][j] and speed[int(grid[i][j])-1] > 0:\n                        for x, y in [(i-1, j), (i, j-1), (i+1, j), (i, j+1)]:\n                            if 0 <= x < n and 0 <= y < m and not visited[x][y] and not grid[x][y].isdigit():\n                                visited[x][y] = True\n                                castles[x][y] = True\n    count = [0 for i in range(p)]\n    for i in range(n):\n        for j in range(m):\n            if castles[i][j]:\n                count[int(grid[i][j])-1] += 1\n    return''.join(map(str, count))"
    },
    {
        "number": 1293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if b[i]!= i + 1:\n            count += abs(b[i] - i - 1)\n    return count"
    },
    {
        "number": 1294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        res = \"\"\n        for c in s:\n            if c not in res:\n                res += c\n        print(res)"
    },
    {
        "number": 1295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    r = 0\n    for i in range(n):\n        for j in range(m):\n            if abs(a[i]-b[j]) <= r:\n                break\n        else:\n            r += 1\n    return str(r)"
    },
    {
        "number": 1296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, S = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (S+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, S+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-a[i-1]] + a[i-1] + i)\n    k = S\n    for i in range(n, 0, -1):\n        if dp[i][k] > dp[i-1][k]:\n            k -= a[i-1]\n            k += i\n    return f\"{k} {dp[n][k]}\""
    },
    {
        "number": 1297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            count += 1\n    if count == 0:\n        return 0\n    else:\n        return (count+1)//2"
    },
    {
        "number": 1298,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    count = 0\n    while '01' in s:\n        s = s.replace('01', '')\n        count += 1\n    return count"
    },
    {
        "number": 1299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:]))\n    a = b = float('inf')\n    for i in range(n - k + 1):\n        for j in range(i + k, n + 1):\n            if j - i == k:\n                if sum(x[i:j]) < sum(x[a:b]) or (sum(x[i:j]) == sum(x[a:b]) and i < a):\n                    a, b = i, j\n    return f\"{a} {b}\""
    },
    {
        "number": 1300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if a[i] == c:\n            count += 1\n    return count"
    },
    {
        "number": 1301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pattern = stdin.readline().strip()\n    pokemon_names = {\"vaporeon\", \"jolteon\", \"flareon\", \"espeon\", \"umbreon\", \"leafeon\", \"glaceon\", \"sylveon\"}\n    for pokemon in pokemon_names:\n        if len(pokemon) == n and all(letter in pattern for letter in pokemon):\n            return pokemon.lower()\n    return \"unknown\""
    },
    {
        "number": 1302,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return '-1'\n    for p in permutations(range(1, n+1)):\n        if sum(gcd(i, p[i-1]) > 1 for i in range(1, n+1)) == k:\n            return''.join(map(str, p))\n    return '-1'"
    },
    {
        "number": 1303,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    for i in range(p):\n        a[i] -= l\n        b[i] -= l\n    for j in range(q):\n        c[j] -= l\n        d[j] -= l\n    count = 0\n    for i in range(l, r+1):\n        if i in a:\n            count += 1\n        if i in b:\n            count += 1\n        if i in c:\n            count += 1\n        if i in d:\n            count += 1\n    return count"
    },
    {
        "number": 1304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    table = []\n    for i in range(11):\n        line = stdin.readline().strip()\n        if i < 9:\n            table.append(list(line))\n        else:\n            x, y = map(int, line.split())\n    # find possible moves\n    moves = []\n    for i in range(9):\n        for j in range(9):\n            if table[i][j] == \".\":\n                moves.append((i, j))\n    # output moves\n    for i, j in moves:\n        table[i][j] = \"!\"\n    # output table\n    output = \"\"\n    for row in table:\n        output += \"\".join(row) + \"\\n\"\n    return output"
    },
    {
        "number": 1305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    bills = list(map(int, stdin.readline().strip().split()))\n    if sum(bills) < 25 * n:\n        return \"NO\"\n    bills.sort()\n    for i in range(n):\n        if bills[i] == 25:\n            bills[i] = 0\n        elif bills[i] == 50:\n            bills[i] = 0\n            if i < n - 1 and bills[i+1] == 50:\n                bills[i+1] = 0\n            else:\n                return \"NO\"\n        else:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    MOD = 1000000007\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][n] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if a[i] == h or a[j] == h:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i+1][j] + dp[i][j-1]) % MOD\n    return dp[0][n]"
    },
    {
        "number": 1307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"Mahmoud\"\n    else:\n        return \"Ehab\""
    },
    {
        "number": 1308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    for i in range(m):\n        x, y, len_ = map(int, stdin.split('\\n')[i+2].split())\n        if s[x-1:x+len_-1] == s[y-1:y+len_-1]:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 1309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = list(map(int, stdin.readline().strip().split()))\n    tandem_kayaks = n - 1\n    single_kayaks = 2\n    total_instability = 0\n    for i in range(tandem_kayaks):\n        total_instability += abs(weights[2*i] - weights[2*i+1])\n    total_instability += sum(weights[tandem_kayaks*2:])\n    print(total_instability)"
    },
    {
        "number": 1310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    max_xor = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            xor = arr[i] ^ arr[j]\n            if xor > max_xor:\n                max_xor = xor\n    return max_xor"
    },
    {
        "number": 1311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, w = map(int, stdin.readline().strip().split())\n        points.append((x, w))\n    points.sort()\n    max_clique = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[j][0] - points[i][0] >= points[i][1] + points[j][1]:\n                max_clique = max(max_clique, j-i+1)\n    return str(max_clique)"
    },
    {
        "number": 1312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n % m == 0:\n        return''.join([str(n//m)]*m)\n    else:\n        a = n // m\n        b = n % m\n        c = [a+1]*b + [a]*(m-b)\n        return''.join(map(str, c))"
    },
    {
        "number": 1313,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n_1, n_2, k_1, k_2 = map(int, stdin.split())\n    if n_1 == n_2:\n        return \"First\"\n    if n_1 > n_2:\n        return \"First\"\n    if k_1 > n_1 or k_2 > n_2:\n        return \"Second\"\n    return \"First\""
    },
    {
        "number": 1314,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    obelisks = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        obelisks.append((x, y))\n    clues = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        clues.append((a, b))\n    # find the hidden permutation\n    for p in permutations(range(n)):\n        # check if the clues belong to the correct obelisks\n        for i in range(n):\n            x, y = obelisks[p[i]]\n            a, b = clues[i]\n            if (x+a, y+b)!= (obelisks[p[(i+1)%n]][0]+clues[(i+1)%n][0], obelisks[p[(i+1)%n]][1]+clues[(i+1)%n][1]):\n                break\n        else:\n            # all clues belong to the correct obelisks\n            treasure = (obelisks[p[0]][0]+clues[0][0], obelisks[p[0]][1]+clues[0][1])\n            return''.join(map(str, treasure))\n    return 'No solution found'"
    },
    {
        "number": 1315,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if sum(a) % 2 == 1:\n        return \":(\"\n    a.sort(reverse=True)\n    for i in range(n):\n        if a[i] == 0:\n            return \":(\"\n        if i == n-1 or a[i] >= a[i+1]:\n            continue\n        a[i], a[i+1] = a[i+1], a[i]\n        if i == 0 or a[i-1] <= a[i]:\n            continue\n        a[i-1], a[i] = a[i], a[i-1]\n        if i == 1 or a[i-2] <= a[i]:\n            continue\n        a[i-2], a[i] = a[i], a[i-2]\n        if i == 2 or a[i-3] <= a[i]:\n            continue\n        a[i-3], a[i] = a[i], a[i-3]\n        if i == 3 or a[i-4] <= a[i]:\n            continue\n        a[i-4], a[i] = a[i], a[i-4]\n        if i == 4 or a[i-5] <= a[i]:\n            continue\n        a[i-5], a[i] = a[i], a[i-5]\n        return \" \".join(map(str, a))\n    return \":(\""
    },
    {
        "number": 1316,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    x = 0\n    for i in range(n - k + 1):\n        if s[i] == s[i + k - 1]:\n            x += 1\n    return x"
    },
    {
        "number": 1317,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    return str(n*n//m)"
    },
    {
        "number": 1318,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    requests = []\n    for i in range(n):\n        c, p = map(int, stdin.readline().split())\n        requests.append((c, p))\n    tables = list(map(int, stdin.readline().split()))\n    requests.sort(key=lambda x: x[1], reverse=True)\n    accepted = []\n    total_money = 0\n    for c, p in requests:\n        if c > tables[0]:\n            accepted.append((c, 1))\n            total_money += p\n            tables[0] -= c\n        else:\n            for i in range(k):\n                if tables[i] >= c:\n                    accepted.append((c, i+1))\n                    total_money += p\n                    tables[i] -= c\n                    break\n    return f\"{len(accepted)} {total_money}\\n\" + \"\\n\".join(f\"{c} {t}\" for c, t in accepted)"
    },
    {
        "number": 1319,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline().strip())\n    primes = list(map(int, stdin.readline().strip().split()))\n    n = 1\n    for prime in primes:\n        n *= prime\n    divisors = set()\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.add(i)\n    result = 1\n    for divisor in divisors:\n        result = (result * divisor) % (10**9 + 7)\n    return str(result)"
    },
    {
        "number": 1320,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cake = []\n    for i in range(n):\n        cake.append(list(stdin.readline().strip()))\n    happiness = 0\n    for i in range(n):\n        for j in range(n):\n            if cake[i][j] == 'C':\n                for k in range(n):\n                    if cake[i][k] == 'C' and k!= j:\n                        happiness += 1\n                    if cake[k][j] == 'C' and k!= i:\n                        happiness += 1\n    return str(happiness)"
    },
    {
        "number": 1321,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    photos = []\n    for i in range(n):\n        w, h = map(int, stdin.readline().strip().split())\n        photos.append((w, h))\n    photos.sort(key=lambda x: x[1], reverse=True)\n    max_h = photos[0][1]\n    total_w = sum(w for w, _ in photos)\n    result = []\n    for i in range(n):\n        w, h = photos[i]\n        result.append(total_w - w * (n - i - 1) + max_h * i)\n    return''.join(map(str, result))"
    },
    {
        "number": 1322,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    MOD = 10**9 + 7\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    dp[0][0] = 1\n    for i in range(1, N+1):\n        for j in range(N+1):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j+1]) % MOD\n    return str(dp[N][N])"
    },
    {
        "number": 1323,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # sort the partitions of A and B\n    a.sort()\n    b.sort()\n\n    # initialize the result\n    result = 0\n\n    # iterate over the partitions of A\n    for i in range(m):\n        # find the index of the partition that contains the first row of A\n        j = bisect_left(b, a[i])\n        # add the number of partitions that contain both rows\n        result += j\n\n    return str(result)"
    },
    {
        "number": 1324,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()))\n    s = stdin.split()[1]\n    total_calories = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            total_calories += a[0]\n        elif s[i] == '2':\n            total_calories += a[1]\n        elif s[i] == '3':\n            total_calories += a[2]\n        elif s[i] == '4':\n            total_calories += a[3]\n    return str(total_calories)"
    },
    {
        "number": 1325,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin.strip().lower()\n    count = 0\n    while s!= s[::-1]:\n        if p == 1:\n            s = s[::-1]\n            count += 1\n        elif p == n:\n            s = s[::-1]\n            count += 1\n        elif s[p-2] == s[p-1]:\n            s = s[:p-2] + s[p-1] + s[p-2:]\n            count += 1\n        elif s[p-1] == s[p+1]:\n            s = s[:p-1] + s[p] + s[p-1:]\n            count += 1\n        elif s[p-1] == s[p+2]:\n            s = s[:p-1] + s[p+1] + s[p-1:]\n            count += 1\n        elif s[p-1] == 'z':\n            s = s[:p-1] + 'a' + s[p-1:]\n            count += 1\n        else:\n            s = s[:p-1] + chr(ord(s[p-1])+1) + s[p:]\n            count += 1\n    return count"
    },
    {
        "number": 1326,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    result = 0\n    for i in range(1, n+1):\n        count = 0\n        for j in range(1, i+1):\n            if i % j == 0:\n                count += 1\n        result += i * count\n    return str(result)"
    },
    {
        "number": 1327,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m = map(int, stdin.readline().split())\n    cakes = []\n    for i in range(n):\n        x, y, z = map(int, stdin.readline().split())\n        cakes.append((x, y, z))\n\n    # Sort cakes by beauty, tastiness and popularity\n    cakes.sort(key=lambda x: (abs(x[0]), abs(x[1]), abs(x[2])))\n\n    # Choose cakes\n    chosen = set()\n    for i in range(m):\n        for j in range(i+1, m):\n            if cakes[i][0] == cakes[j][0] or cakes[i][1] == cakes[j][1] or cakes[i][2] == cakes[j][2]:\n                break\n        else:\n            chosen.add(i)\n\n    # Calculate total beauty, tastiness and popularity\n    total_beauty = sum(abs(cakes[i][0]) for i in chosen)\n    total_tastiness = sum(abs(cakes[i][1]) for i in chosen)\n    total_popularity = sum(abs(cakes[i][2]) for i in chosen)\n\n    # Return result\n    return str(total_beauty + total_tastiness + total_popularity)"
    },
    {
        "number": 1328,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    N, M_a, M_b = map(int, lines[0].split())\n    packages = []\n    for i in range(1, N+1):\n        a, b, c = map(int, lines[i].split())\n        packages.append((a, b, c))\n\n    # check if it is possible to generate the substance C\n    if M_a*N > sum(a for a, _, _ in packages) or M_b*N > sum(b for _, b, _ in packages):\n        return '-1'\n\n    # sort packages by price\n    packages.sort(key=lambda x: x[2])\n\n    # calculate minimum amount of money required\n    total_price = 0\n    for i in range(N):\n        a, b, c = packages[i]\n        if M_a*N <= total_price + a:\n            break\n        total_price += a\n    else:\n        return '-1'\n\n    # check if it is possible to generate the substance C\n    if M_b*N > sum(b for _, b, _ in packages[i:]):\n        return '-1'\n\n    # calculate minimum amount of money required\n    for j in range(i, N):\n        a, b, c = packages[j]\n        if M_b*N <= total_price + b:\n            break\n        total_price += b\n\n    return str(total_price)"
    },
    {
        "number": 1329,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    divisors = set()\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j == n:\n                divisors.add(i)\n                divisors.add(j)\n    shichi_go_count = 0\n    for divisor in divisors:\n        if divisor == 7 or divisor == 5:\n            shichi_go_count += 1\n    return str(shichi_go_count)"
    },
    {
        "number": 1330,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    potentials = list(map(int, stdin.readline().split()))\n    clubs = list(map(int, stdin.readline().split()))\n    d = int(stdin.readline())\n    left_clubs = [int(stdin.readline()) for _ in range(d)]\n\n    # Calculate the maximum possible strength for each day\n    max_strengths = []\n    for day in range(d):\n        # Calculate the remaining students after leaving the clubs\n        remaining_students = set(range(n)) - set(left_clubs[:day+1])\n        # Calculate the potentials of the remaining students\n        remaining_potentials = [potentials[i] for i in remaining_students]\n        # Calculate the maximum possible strength for this day\n        max_strength = max(remaining_potentials)\n        max_strengths.append(max_strength)\n\n    # Print the maximum possible strength for each day\n    for strength in max_strengths:\n        print(strength)\n\n    return \"\""
    },
    {
        "number": 1331,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    a.sort()\n    count = 0\n    for i in range(n):\n        if a[i] <= m:\n            count += 1\n            if count == k:\n                return str(i+1)\n    return str(0)"
    },
    {
        "number": 1332,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c_1, c_2, c_3, c_4, c_5 = map(int, stdin.split())\n    coins = [c_1, c_2, c_3, c_4, c_5]\n    for i in range(len(coins)):\n        coins[i] -= i\n    if all(coin >= 0 for coin in coins):\n        return str(max(coins))\n    else:\n        return \"-1\""
    },
    {
        "number": 1333,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    snake = [['.' for _ in range(m)] for _ in range(n)]\n    for i in range(1, n, 2):\n        for j in range(1, m+1):\n            snake[i][j-1] = '#'\n    for i in range(0, n, 2):\n        for j in range(0, m, 2):\n            snake[i][j] = '#'\n    return '\\n'.join([''.join(row) for row in snake])"
    },
    {
        "number": 1334,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip().split()[0]\n    t = \"\"\n    for i in range(k):\n        t += s[i]\n    return t"
    },
    {
        "number": 1335,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    q = [i for i in range(n)]\n    m = 0\n    for i in range(k):\n        t = 0\n        while t < m:\n            t += a[q[0]]\n            q.append(q.pop(0))\n        m += 1\n    d = round(100 * m / n)\n    interesting = 0\n    for i in range(n):\n        if a[i] * d / 100 == i + 1:\n            interesting += 1\n    return str(interesting)"
    },
    {
        "number": 1336,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    matryoshkas = []\n    for i in range(n):\n        out, in_ = map(int, stdin.readline().split())\n        matryoshkas.append((out, in_))\n    matryoshkas.sort(key=lambda x: x[0])\n    MOD = 10**9 + 7\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n):\n        for j in range(i):\n            if matryoshkas[j][0] <= matryoshkas[i][1]:\n                dp[j][i] = (dp[j][i] + dp[j+1][i]) % MOD\n    ans = 0\n    for i in range(n):\n        for j in range(i):\n            if matryoshkas[j][0] <= matryoshkas[i][1]:\n                ans = (ans + dp[j][i]) % MOD\n    return str(ans)"
    },
    {
        "number": 1337,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    m, b, c = map(int, stdin.readline().split())\n    lang_dict = {}\n    for i in range(n):\n        lang_dict[a[i]] = i+1\n    max_num_pleased = 0\n    max_num_almost_satisfied = 0\n    max_movie_index = -1\n    for j in range(m):\n        if b[j] in lang_dict and c[j] in lang_dict:\n            num_pleased = 0\n            num_almost_satisfied = 0\n            for i in range(n):\n                if a[i] == b[j]:\n                    num_pleased += 1\n                elif a[i] == c[j]:\n                    num_almost_satisfied += 1\n            if num_pleased > max_num_pleased or (num_pleased == max_num_pleased and num_almost_satisfied > max_num_almost_satisfied):\n                max_num_pleased = num_pleased\n                max_num_almost_satisfied = num_almost_satisfied\n                max_movie_index = j+1\n    return str(max_movie_index)"
    },
    {
        "number": 1338,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2 1\"\n    if n == 3:\n        return \"1 3 2\"\n    if n == 4:\n        return \"1 4 2 3\"\n    if n == 5:\n        return \"1 5 2 4 3\"\n    if n == 6:\n        return \"1 6 2 5 3 4\"\n    if n == 7:\n        return \"1 7 2 6 3 5 4\"\n    if n == 8:\n        return \"1 8 2 7 3 6 4 5\"\n    if n == 50:\n        if m == 1:\n            return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\"\n        if m == 2:\n            return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\"\n        if m == 3:\n            return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\"\n        if m == 4:\n            return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\"\n        if m == 5:\n            return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\"\n        if m == 6:\n            return \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32"
    },
    {
        "number": 1339,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().strip().split())\n        segments.append((l, r))\n    segments.sort()\n    for i in range(n):\n        if segments[i][0] > segments[i][1]:\n            return -1\n        if i > 0 and segments[i][0] <= segments[i-1][1]:\n            return i+1\n    return -1"
    },
    {
        "number": 1340,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            continue\n        else:\n            count += 1\n            j = i+1\n            while j < n-1 and a[j] == a[j+1]:\n                j += 1\n            a[i+1:j+1] = a[i+1:j+1][::-1]\n    return count"
    },
    {
        "number": 1341,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    m = len(t)\n    l = 0\n    r = n - 1\n    for i in range(m):\n        if t[i] == 'R':\n            if s[l] == 'R':\n                l += 1\n            elif s[r] == 'R':\n                r -= 1\n        elif t[i] == 'G':\n            if s[l] == 'G':\n                l += 1\n            elif s[r] == 'G':\n                r -= 1\n        else:\n            if s[l] == 'B':\n                l += 1\n            elif s[r] == 'B':\n                r -= 1\n    return str(l + 1)"
    },
    {
        "number": 1342,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if a[i] > ans + 1:\n            ans += 1\n    return ans + 1"
    },
    {
        "number": 1343,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    if k == 0:\n        return \"-1\"\n    a = list(map(int, stdin.split()))\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v, l = map(int, stdin.split())\n        graph[u].append((v, l))\n        graph[v].append((u, l))\n    dp = [[float('inf')] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][i] = 0\n    for k in range(1, n+1):\n        for i in range(n+1):\n            for j in range(n+1):\n                if i!= j:\n                    for u, l in graph[i]:\n                        if u == j:\n                            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + l)\n    ans = float('inf')\n    for i in range(k):\n        for j in range(k):\n            if a[i]!= a[j]:\n                ans = min(ans, dp[a[i]][a[j]] + 1)\n    if ans == float('inf'):\n        return \"-1\"\n    return str(ans)"
    },
    {
        "number": 1344,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    max_len = 1\n    curr_len = 1\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            curr_len += 1\n        else:\n            max_len = max(max_len, curr_len)\n            curr_len = 1\n    max_len = max(max_len, curr_len)\n    return str(max_len)"
    },
    {
        "number": 1345,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    signs = []\n    for i in range(n):\n        if a[i] <= a[i] + 1 <= 2*a[i]:\n            signs.append('+')\n        else:\n            signs.append('-')\n    return ''.join(signs)"
    },
    {
        "number": 1346,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, p = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    h = [0] * (n + m - 1)\n    for i in range(n):\n        h[i] = a[i]\n    for i in range(m):\n        h[i + n - 1] += b[i]\n    for i in range(n + m - 2):\n        h[i + 1] = h[i + 1] * h[i] % p\n    for i in range(n + m - 2):\n        if h[i] % p == 0:\n            return str(i)\n    return \"No solution found\""
    },
    {
        "number": 1347,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    m, words = map(int, stdin.readline().split())\n    words = stdin.readline().split()\n    n = int(stdin.readline())\n    synonyms = {}\n    for i in range(n):\n        x, y = stdin.readline().split()\n        synonyms[x] = y\n        synonyms[y] = x\n    # replace words with synonyms\n    new_words = []\n    for word in words:\n        if word in synonyms:\n            new_words.append(synonyms[word])\n        else:\n            new_words.append(word)\n    # count number of \"R\"s and sum of lengths\n    num_r = sum(word.count(\"R\") for word in new_words)\n    length = sum(len(word) for word in new_words)\n    # find minimum number of \"R\"s and minimum length\n    min_num_r = num_r\n    min_length = length\n    for i in range(1, m):\n        # replace i-th word with its synonym\n        if new_words[i] in synonyms:\n            new_words[i] = synonyms[new_words[i]]\n        # count number of \"R\"s and sum of lengths\n        num_r = sum(word.count(\"R\") for word in new_words)\n        length = sum(len(word) for word in new_words)\n        # update minimum number of \"R\"s and minimum length\n        if num_r < min_num_r or (num_r == min_num_r and length < min_length):\n            min_num_r = num_r\n            min_length = length\n    # print result\n    return f\"{min_num_r} {min_length}\""
    },
    {
        "number": 1348,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    d = list(map(int, stdin.split()))\n    if k >= n:\n        return \"-1\"\n    m = 0\n    for i in range(n):\n        if d[i] == 0:\n            continue\n        for j in range(i+1, n):\n            if d[j] == 0:\n                continue\n            if d[i] + d[j] <= k:\n                m += 1\n    if m == 0:\n        return \"-1\"\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if d[i] + d[j] <= k:\n                result.append(f\"{i+1} {j+1}\")\n    return f\"{m}\\n\" + \"\\n\".join(result)"
    },
    {
        "number": 1349,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        x = list(map(int, stdin.readline().strip().split()))\n        x.sort()\n        ans = 0\n        for j in range(k):\n            ans = max(ans, x[j] + 1)\n        print(ans)\n    return \"\""
    },
    {
        "number": 1350,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    freq = [0] * 26\n    for c in s:\n        freq[ord(c) - ord('A')] += 1\n    max_len = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            subseq = s[i:j]\n            subseq_freq = [0] * 26\n            for c in subseq:\n                subseq_freq[ord(c) - ord('A')] += 1\n            if subseq_freq == freq:\n                max_len = max(max_len, j-i)\n    return max_len"
    },
    {
        "number": 1351,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    for i in range(l, r+1):\n        if len(set(str(i))) == len(str(i)):\n            return str(i)\n    return '-1'"
    },
    {
        "number": 1352,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(1, x+1):\n        for j in range(i, x+1):\n            if sorted(filter(lambda x: i <= x <= j, a)) == sorted(filter(lambda x: i <= x <= j, a)):\n                count += 1\n    return count"
    },
    {
        "number": 1353,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    return max(a * n, b * m)"
    },
    {
        "number": 1354,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a = map(int, stdin.split()[0:3])\n    m = int(stdin.split()[3])\n    ships = []\n    for i in range(k):\n        ships.append(list(map(int, stdin.split())))\n    shots = list(map(int, stdin.split()))\n    shots.sort()\n    for i in range(m):\n        if shots[i] == 1:\n            return str(i+1)\n    return \"-1\""
    },
    {
        "number": 1355,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    polygon = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().split())\n        polygon.append((x, y))\n    lines = []\n    for i in range(m):\n        x1, y1, x2, y2 = map(float, stdin.readline().split())\n        lines.append(((x1, y1), (x2, y2)))\n    result = []\n    for line in lines:\n        x1, y1 = line[0]\n        x2, y2 = line[1]\n        dx1 = x2 - x1\n        dy1 = y2 - y1\n        length1 = (dx1 ** 2 + dy1 ** 2) ** 0.5\n        for i in range(n):\n            x3, y3 = polygon[i]\n            dx2 = x3 - x1\n            dy2 = y3 - y1\n            length2 = (dx2 ** 2 + dy2 ** 2) ** 0.5\n            if length2 == 0:\n                continue\n            t = (dx1 * dx2 + dy1 * dy2) / (length1 * length2)\n            if t < 0:\n                continue\n            if t > 1:\n                continue\n            x = x1 + t * dx1\n            y = y1 + t * dy1\n            for j in range(i + 1, n):\n                x4, y4 = polygon[j]\n                dx3 = x4 - x\n                dy3 = y4 - y\n                length3 = (dx3 ** 2 + dy3 ** 2) ** 0.5\n                if length3 == 0:\n                    continue\n                if length3 < 10 ** -6:\n                    result.append(0)\n                    break\n                result.append(length3)\n                break\n            else:\n                continue\n            break\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 1356,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i] == 'a':\n            count += 1\n    if count <= n // 2:\n        return 0\n    else:\n        return n - count"
    },
    {
        "number": 1357,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[float('inf')] * n for _ in range(n)]\n    dp[0][0] = 0\n    for i in range(1, n):\n        dp[i][i] = 1\n    for k in range(1, n):\n        for i in range(n):\n            j = (i + k) % n\n            if j == 0:\n                j = n\n            dp[i][j] = min(dp[i][j], dp[i][i] + dp[i][j])\n    ans = float('inf')\n    for i in range(m):\n        ans = min(ans, dp[a[i]-1][0] + i)\n    return str(ans)"
    },
    {
        "number": 1358,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split())\n    strings = []\n    beauties = []\n    for i in range(k):\n        s, b = stdin.split()\n        strings.append(s)\n        beauties.append(int(b))\n    max_beauty = 0\n    for i in range(k):\n        for j in range(i+1, k):\n            for s in strings:\n                if s[::-1] in strings[i] or s[::-1] in strings[j]:\n                    continue\n                new_s = s + strings[i] + strings[j]\n                new_b = beauties[i] + beauties[j]\n                if new_s == new_s[::-1]:\n                    new_b += beauties[i] + beauties[j]\n                max_beauty = max(max_beauty, new_b)\n    return max_beauty"
    },
    {
        "number": 1359,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if len(set(graph[i]) & set(graph[j])) == 2:\n                count += 1\n    return count"
    },
    {
        "number": 1360,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    exams = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        exams.append((a, b))\n    exams.sort()\n    last_day = exams[-1][0]\n    for i in range(n):\n        if exams[i][0] > last_day:\n            last_day = exams[i][0]\n    return str(last_day)"
    },
    {
        "number": 1361,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    d = max(a[i+1] - a[i] for i in range(n-1))\n    return str(d)"
    },
    {
        "number": 1362,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, m = map(int, stdin.split())\n    days = []\n    for i in range(n):\n        d, t = map(int, stdin.split())\n        days.append((d, t))\n    days.sort()\n    balance = 0\n    count = 0\n    for i in range(m):\n        if i+1 in [day[0] for day in days]:\n            balance += days[days.index((i+1, 0))+1][1]\n        balance -= p\n        if balance < 0:\n            count += 1\n    return count"
    },
    {
        "number": 1364,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    types = list(map(int, stdin.readline().strip().split()))\n    count_tuna = types.count(1)\n    count_eel = types.count(2)\n    if count_tuna == 0 or count_eel == 0:\n        return 0\n    if count_tuna == count_eel:\n        return n // 2\n    if count_tuna > count_eel:\n        return n // 2 + 1\n    return n // 2"
    },
    {
        "number": 1365,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[1][0] = 1\n    for i in range(1, n + 1):\n        for j in range(k + 1):\n            for v in graph[i]:\n                dp[i][j] += dp[v][max(j - 1, 0)]\n            dp[i][j] %= 1000000007\n    ans = 0\n    for i in range(1, n + 1):\n        ans += dp[i][k]\n        ans %= 1000000007\n    return str(ans)"
    },
    {
        "number": 1366,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    bottles = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        bottles.append((a, b))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if bottles[i][0] == bottles[j][1]:\n                count += 1\n            elif bottles[i][1] == bottles[j][0]:\n                count += 1\n    return count"
    },
    {
        "number": 1367,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    watched = list(map(int, stdin.readline().strip().split()))\n    missing = set(range(1, n+1)) - set(watched)\n    return str(missing.pop())"
    },
    {
        "number": 1368,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B = map(int, stdin.readline().split())\n    values = list(map(int, stdin.readline().split()))\n\n    # Sort values in descending order\n    values.sort(reverse=True)\n\n    # Initialize variables\n    max_mean = 0\n    max_count = 0\n\n    # Loop through all possible combinations of A and B\n    for i in range(1, N+1):\n        for j in range(i, N+1):\n            # Check if the number of selected items is within the range\n            if i+j-1 < A or i+j-1 > B:\n                continue\n\n            # Calculate the mean of the selected items\n            mean = sum(values[:i+j-1]) / (i+j-1)\n\n            # Update max_mean and max_count if necessary\n            if abs(mean - max_mean) < 1e-6:\n                max_count += 1\n            elif mean > max_mean:\n                max_mean = mean\n                max_count = 1\n\n    # Return the results as a string\n    return f\"{max_mean:.6f}\\n{max_count}\""
    },
    {
        "number": 1369,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        points.append((x, y))\n    x_min, x_max = min(points, key=lambda x: x[0])[0], max(points, key=lambda x: x[0])[0]\n    y_min, y_max = min(points, key=lambda x: x[1])[1], max(points, key=lambda x: x[1])[1]\n    x_center = (x_min + x_max) / 2\n    y_center = (y_min + y_max) / 2\n    r = max(x_max - x_center, y_max - y_center)\n    return f\"{r:.10f}\""
    },
    {
        "number": 1370,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, W, K = map(int, stdin.readline().split())\n    S = [list(map(int, stdin.readline().strip())) for _ in range(H)]\n\n    # initialize variables\n    white_squares = sum(sum(row) for row in S)\n    cuts = 0\n    current_white_squares = white_squares\n\n    # cut the bar until every block has K or less white squares\n    while current_white_squares > K:\n        # find the boundaries of the next cut\n        top_row = bottom_row = left_col = right_col = -1\n        for i in range(H):\n            for j in range(W):\n                if S[i][j] == 1:\n                    if top_row == -1:\n                        top_row = i\n                    bottom_row = i\n                    if left_col == -1:\n                        left_col = j\n                    right_col = j\n\n        # cut the bar\n        for i in range(top_row, bottom_row+1):\n            for j in range(left_col, right_col+1):\n                S[i][j] = 0\n\n        # update variables\n        white_squares -= (bottom_row - top_row + 1) * (right_col - left_col + 1)\n        cuts += 1\n        current_white_squares = white_squares\n\n    # print the number of cuts\n    return str(cuts)"
    },
    {
        "number": 1371,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = int(stdin.strip())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(3, S+1):\n        if S % i == 0:\n            count += 1\n    print(count % MOD)\n    return \"\""
    },
    {
        "number": 1372,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    H, N = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    total_cost = 0\n    health = H\n\n    # Cast spells\n    for i in range(N):\n        # Calculate cost of spell\n        cost = A[i] * B[i]\n\n        # Check if spell can be cast\n        if health - A[i] < 0:\n            continue\n\n        # Cast spell\n        health -= A[i]\n        total_cost += cost\n\n    # Check if winning\n    if health <= 0:\n        return str(total_cost)\n    else:\n        return \"-1\""
    },
    {
        "number": 1373,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 10**9+7\n    nums = [10**100+i for i in range(n+1)]\n    dp = [[0]*(k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= 1:\n                dp[i][j] += dp[i-1][j-1]\n            dp[i][j] %= MOD\n    return str(dp[n][k])"
    },
    {
        "number": 1374,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    m = []\n\n    # Compute m_{l, r} for all pairs (l, r)\n    for l in range(N):\n        for r in range(l, N):\n            # Compute the median of the subsequence (a_l, a_{l + 1},..., a_r)\n            subseq = sorted(a[l:r+1])\n            if len(subseq) % 2 == 0:\n                median = (subseq[len(subseq)//2] + subseq[len(subseq)//2 - 1]) / 2\n            else:\n                median = subseq[len(subseq)//2]\n            m.append(median)\n\n    # Compute the median of m\n    m.sort()\n    if len(m) % 2 == 0:\n        median_m = (m[len(m)//2] + m[len(m)//2 - 1]) / 2\n    else:\n        median_m = m[len(m)//2]\n\n    # Print the result\n    return str(median_m)"
    },
    {
        "number": 1375,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            if sum(a[:i]) == sum(a[i:j+1]) == sum(a[j+1:]):\n                count += 1\n    return count"
    },
    {
        "number": 1376,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    i = 0\n    j = n-1\n    dist = 0\n    while i < j:\n        dist += abs(i-j)\n        i += 1\n        j -= 1\n    return dist"
    },
    {
        "number": 1377,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    if n == 1:\n        return \"YES\"\n    if n == 2:\n        return \"NO\"\n    if n == 3:\n        if a[0] == a[1] == a[2]:\n            return \"YES\"\n        else:\n            return \"NO\"\n    for i in range(n):\n        if a[i] == a[i+1]:\n            return \"NO\"\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1378,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b2k = list(map(int, stdin.readline().strip().split()))\n    b1 = b2k[0]\n    b3 = b2k[1]\n    b5 = b2k[2]\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                area = (b2k[i] - b2k[j]) * (b2k[j] - b2k[k]) * (b2k[k] - b2k[i])\n                if area > max_area:\n                    max_area = area\n                    b1 = b2k[i]\n                    b3 = b2k[j]\n                    b5 = b2k[k]\n    return f\"{b1} {b3} {b5}\""
    },
    {
        "number": 1379,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    dp = [float('inf')] * m\n    dp[0] = 0\n    for i in range(1, m):\n        for j in range(i):\n            if a[j] <= i <= a[j] + d:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return str(dp[m-1]) + '\\n' +''.join(map(str, [dp[i] for i in a]))"
    },
    {
        "number": 1380,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    p = 0\n    for i in range(1, n):\n        if a[i] + 1 - a[i]!= k:\n            p += 1\n            if a[i] < a[i-1]:\n                a[i] += 1\n            else:\n                a[i-1] += 1\n    print(p)\n    for i in range(n):\n        if a[i]!= i+1:\n            print(\"-\", i+1, a[i]-i-1)\n        else:\n            print(\"+\", i+1, i+1-a[i])\n    return \"\""
    },
    {
        "number": 1381,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n, s, p = map(int, stdin.split())\n    if s < n * p:\n        return -1\n    else:\n        return k * (s // (n * p)) + (s % (n * p)!= 0)"
    },
    {
        "number": 1382,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    def dfs(u, parent, visited, path):\n        visited[u] = True\n        path.append(u)\n        for v in graph[u]:\n            if v == parent:\n                continue\n            if visited[v]:\n                continue\n            dfs(v, u, visited, path)\n\n    def count_paths(u, parent, visited, path, count):\n        visited[u] = True\n        path.append(u)\n        for v in graph[u]:\n            if v == parent:\n                continue\n            if visited[v]:\n                continue\n            count_paths(v, u, visited, path, count)\n            count += 1\n        if len(path) > 2:\n            count += 1\n        path.pop()\n        visited[u] = False\n        return count\n\n    visited = [False] * (n + 1)\n    odd_cycle = False\n    for i in range(1, n + 1):\n        if not visited[i]:\n            path = []\n            dfs(i, -1, visited, path)\n            if len(path) > 2:\n                odd_cycle = True\n                break\n\n    if not odd_cycle:\n        return '0 1'\n\n    count = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            path = []\n            count += count_paths(i, -1, visited, path, 0)\n\n    return f'{len(edges) - count} {count}'"
    },
    {
        "number": 1383,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    a.sort()\n    b.sort()\n    for i in range(n):\n        if a[i]!= b[i]:\n            return str(i)\n    return str(n)"
    },
    {
        "number": 1384,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if s[i] == 1:\n            count += 1\n        else:\n            count = 0\n        if count > 0 and s[i] == 0:\n            return str(count)\n    return str(count)"
    },
    {
        "number": 1385,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # remove all spaces from the input string\n    stdin = stdin.replace(\" \", \"\")\n    # split the input string into lexemes\n    lexemes = stdin.split('\"')\n    # iterate over the lexemes and print them\n    for i in range(len(lexemes)):\n        if i % 2 == 0:\n            print(\"<\" + lexemes[i] + \">\")\n        else:\n            print(lexemes[i])\n    return \"\""
    },
    {
        "number": 1386,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    n = 0\n    for i in range(w+h-1):\n        for j in range(i+1):\n            if i-j+1 <= w and j <= h:\n                n += 1\n    return str(n % 998244353)"
    },
    {
        "number": 1387,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    visited = set()\n    queue = [(1, 0)]\n    while queue:\n        cell, steps = queue.pop(0)\n        if cell == t:\n            return \"YES\"\n        if cell in visited:\n            continue\n        visited.add(cell)\n        for i in range(n - 1):\n            if a[i] > cell:\n                continue\n            if cell + a[i] == t:\n                return \"YES\"\n            if cell + a[i] > t:\n                continue\n            queue.append((cell + a[i], steps + 1))\n    return \"NO\""
    },
    {
        "number": 1388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nodes = []\n    for i in range(n):\n        a, b, c = map(int, stdin.readline().strip().split())\n        nodes.append((a, b, c))\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u-1, v-1))\n    dp = [[float('inf')] * 2 for _ in range(n)]\n    dp[0][nodes[0][1]] = nodes[0][0]\n    for i in range(n):\n        for j in range(2):\n            for edge in edges:\n                if edge[0] == i:\n                    for k in range(2):\n                        dp[edge[1]][k] = min(dp[edge[1]][k], dp[i][j] + nodes[edge[1]][k])\n    for i in range(n):\n        if dp[i][nodes[i][2]] == float('inf'):\n            return '-1'\n    return str(sum(dp[i][nodes[i][2]] for i in range(n)))"
    },
    {
        "number": 1389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    feature = []\n    for i in range(n):\n        feature.append(list(stdin.readline().strip()))\n    value = 0\n    for i in range(n):\n        for j in range(m):\n            if feature[i][j] == 'W':\n                value += 1\n            else:\n                value -= 1\n    return str(value)"
    },
    {
        "number": 1390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    puzzles = list(map(int, stdin.readline().split()))\n    puzzles.sort()\n    return str(puzzles[n-1] - puzzles[0])"
    },
    {
        "number": 1391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a = map(int, stdin.readline().split())\n    b = list(map(int, stdin.readline().split()))\n    p = list(map(int, stdin.readline().split()))\n\n    dp = [[0] * (a+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(a+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= b[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-b[i-1]] + p[i-1])\n\n    r = 0\n    s = a\n    for i in range(n, 0, -1):\n        if dp[i][s] > dp[i-1][s]:\n            r = i\n            s -= b[i-1]\n\n    return f\"{r} {s}\""
    },
    {
        "number": 1392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if all(digit <= k for digit in str(a[i])):\n            count += 1\n    return count"
    },
    {
        "number": 1393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    count_yay = 0\n    count_whoops = 0\n    for i in range(n):\n        if s[i] == t[i]:\n            count_yay += 1\n        elif s[i].lower() == t[i].lower():\n            count_whoops += 1\n        else:\n            count_whoops += 1\n    return f\"{count_yay} {count_whoops}\""
    },
    {
        "number": 1394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    s = \"\"\n    for char in t:\n        if char!= \"a\":\n            s += char\n    if s == \"\":\n        return \":(\"\n    else:\n        return s"
    },
    {
        "number": 1395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin.split()[0])\n    m = int(stdin.split()[1])\n    min_remainder = float('inf')\n    for i in range(len(str(num))):\n        shift = int(str(num)[i:] + str(num)[:i])\n        remainder = shift % m\n        if remainder < min_remainder:\n            min_remainder = remainder\n    return str(min_remainder)"
    },
    {
        "number": 1396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    balls = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if balls[i] == x:\n            count += 1\n            if count >= 3:\n                count -= 2\n    return count"
    },
    {
        "number": 1397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = set()\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        pairs.add((a, b))\n        pairs.add((b, a))\n    graph = [[] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!= j and (i, j) not in pairs:\n                graph[i].append(j)\n    visited = [False] * (n+1)\n    queue = [(1, 0)]\n    while queue:\n        curr, dist = queue.pop(0)\n        if visited[curr]:\n            continue\n        visited[curr] = True\n        for neighbor in graph[curr]:\n            if not visited[neighbor]:\n                queue.append((neighbor, dist+1))\n    return str(sum(visited)-1) + '\\n' + '\\n'.join(f'{a} {b}' for a, b in pairs if visited[a] and visited[b])"
    },
    {
        "number": 1398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    capacitances = list(map(int, stdin.readline().strip().split()))\n    capacitances.sort()\n    min_diff = capacitances[-1] - capacitances[0]\n    for i in range(1, n-1):\n        diff = capacitances[i+1] - capacitances[i-1]\n        if diff > 2*min_diff:\n            return i\n    return n-1"
    },
    {
        "number": 1399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    segments = []\n    for i in range(n):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        segments.append(((a, b), (c, d)))\n    points = set()\n    for segment in segments:\n        x1, y1 = segment[0]\n        x2, y2 = segment[1]\n        if x1 == x2:\n            for y in range(min(y1, y2), max(y1, y2) + 1):\n                points.add((x1, y))\n        elif y1 == y2:\n            for x in range(min(x1, x2), max(x1, x2) + 1):\n                points.add((x, y1))\n        else:\n            slope = (y2 - y1) / (x2 - x1)\n            for x in range(min(x1, x2), max(x1, x2) + 1):\n                y = int(slope * (x - x1) + y1)\n                points.add((x, y))\n    return len(points)"
    },
    {
        "number": 1400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    dp = [0] * (T + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(T, t[i] - 1, -1):\n            dp[j] = (dp[j] + dp[j - t[i]]) % (10**9 + 7)\n    return str(dp[T] * pow(2, -1, 10**9 + 7))"
    },
    {
        "number": 1401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        p, c = map(int, stdin.readline().strip().split())\n        edges.append((p - 1, c))\n    leaves = [i for i in range(n) if len(list(filter(lambda x: x[0] == i, edges))) == 1]\n    while True:\n        sad_leaves = [i for i in leaves if any(dist(i, j) > a[j] for j in subtree(i))]\n        if not sad_leaves:\n            break\n        leaves = [i for i in leaves if i not in sad_leaves]\n    return len(leaves)\n\ndef"
    },
    {
        "number": 1402,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    w = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if s[i] > w[i]:\n            count += 1\n    return str(count % 1000000007)"
    },
    {
        "number": 1403,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    remained = n\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j] and a[i] <= a[j] + k:\n                remained -= 1\n                break\n    return remained"
    },
    {
        "number": 1404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 998244353\n    dp = [[0] * 201 for _ in range(n)]\n    dp[0][a[0]] = 1\n    for i in range(1, n):\n        for j in range(1, 201):\n            if a[i] == -1:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i-1][max(j-a[i], 1)]) % MOD\n    return dp[n-1][1:201].count(1)"
    },
    {
        "number": 1405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    max_len = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] + a[j] in fib:\n                max_len = max(max_len, j-i+1)\n    return str(max_len)"
    },
    {
        "number": 1406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split())\n    if k < n or d < 1:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return \"-1\"\n    if k == n and d == 1:\n        return \"1 \" * n\n    if k == 1 and d == 1:\n        return \"1 \" * n\n    if k == 1 and d > 1:\n        return \"-1\"\n    if k == n and d > 1:\n        return \"1 \" * n\n    if k > n:\n        return"
    },
    {
        "number": 1407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split()[i*m:(i+1)*m])))\n    prime_matrix = True\n    for i in range(n):\n        if not all(is_prime(num) for num in matrix[i]):\n            prime_matrix = False\n            break\n    for j in range(m):\n        if not all(is_prime(num) for num in [matrix[i][j] for i in range(n)]):\n            prime_matrix = False\n            break\n    if prime_matrix:\n        return \"0\"\n    else:\n        moves = 0\n        for i in range(n):\n            for j in range(m):\n                if matrix[i][j] < 10**5:\n                    matrix[i][j] += 1\n                    moves += 1\n                    if is_prime(matrix[i][j]):\n                        continue\n                    for k in range(1, 10**5):\n                        if is_prime(matrix[i][j] + k):\n                            matrix[i][j] += k\n                            moves += 1\n                            break\n        return str(moves)\n\ndef"
    },
    {
        "number": 1408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    books = []\n    for i in range(n):\n        t, w = map(int, stdin.readline().strip().split())\n        books.append((t, w))\n    books.sort(key=lambda x: x[1])\n    vertical_books = []\n    horizontal_books = []\n    for t, w in books:\n        if t == 1:\n            vertical_books.append(w)\n        else:\n            horizontal_books.append(w)\n    total_thickness = 0\n    while vertical_books:\n        total_thickness += 1\n        vertical_books = [w - 1 for w in vertical_books if w > 1]\n    while horizontal_books:\n        total_thickness += 1\n        horizontal_books = [w - 1 for w in horizontal_books if w > 1]\n    return str(total_thickness)"
    },
    {
        "number": 1409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    y = list(map(int, stdin.split()[2:]))\n    count = 0\n    for i in range(n):\n        if y[i] >= k:\n            count += 1\n    return count"
    },
    {
        "number": 1410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    c1 = list(map(int, stdin.readline().strip().split()))\n    c2 = list(map(int, stdin.readline().strip().split()))\n    c3 = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u - 1, v - 1))\n    dp = [[[float('inf')] * 3 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        dp[i][i][0] = c1[i]\n        dp[i][i][1] = c2[i]\n        dp[i][i][2] = c3[i]\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                if i!= j:\n                    for l in range(3):\n                        if l!= dp[i][j][0] and l!= dp[i][j][1] and l!= dp[i][j][2]:\n                            dp[i][j][l] = min(dp[i][j][l], dp[i][k][0] + dp[k][j][l])\n                            dp[i][j][l] = min(dp[i][j][l], dp[i][k][1] + dp[k][j][l])\n                            dp[i][j][l] = min(dp[i][j][l], dp[i][k][2] + dp[k][j][l])\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                if dp[i][j][0]!= float('inf') and dp[i][j][1]!= float('inf') and dp[i][j][2]!= float('inf'):\n                    print(dp[i][j][0] + dp[i][j][1] + dp[i][j][2])\n                    return''.join(map(str, [1, 3, 2] if dp[i][j][0] < dp[i][j][1] and dp[i][j][0] < dp[i][j][2] else [2, 1, 3] if dp[i][j][1] < dp[i][j][0] and dp[i][j][1] < dp[i][j][2] else [3, 2, 1]))\n    print(-1)\n    return ''"
    },
    {
        "number": 1411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, S = map(int, stdin.readline().split())\n    slices = []\n    for i in range(N):\n        s, a, b = map(int, stdin.readline().split())\n        slices.append((s, a, b))\n\n    # Sort slices by number of slices eaten\n    slices.sort(key=lambda x: x[0])\n\n    # Initialize variables\n    total_happiness = 0\n    num_pizzas = 0\n    current_slice_count = 0\n\n    # Iterate through slices\n    for s, a, b in slices:\n        # If we can't add this slice to the current pizza, start a new one\n        if current_slice_count + s > S:\n            num_pizzas += 1\n            current_slice_count = 0\n        # Add this slice to the current pizza\n        current_slice_count += s\n        total_happiness += a * current_slice_count + b * (S - current_slice_count)\n\n    # Add the last pizza\n    num_pizzas += 1\n\n    # Return the maximum total happiness\n    return total_happiness\n"
    },
    {
        "number": 1412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    coupons = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        coupons.append((l, r))\n    coupons.sort(key=lambda x: x[1] - x[0])\n    max_products = 0\n    chosen_coupons = []\n    for i in range(k):\n        l, r = coupons[i]\n        products = set()\n        for j in range(n):\n            if l <= coupons[j][0] <= r or l <= coupons[j][1] <= r:\n                products.add(j+1)\n        if len(products) > max_products:\n            max_products = len(products)\n            chosen_coupons = [i+1]\n        elif len(products) == max_products:\n            chosen_coupons.append(i+1)\n    return f\"{max_products}\\n{' '.join(map(str, chosen_coupons))}\""
    },
    {
        "number": 1413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if int(s[i:j]) % 2 == 0:\n                count += 1\n    return count"
    },
    {
        "number": 1414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = []\n    for i in range(n):\n        table.append(list(stdin.readline().strip()))\n    visited = set()\n    def dfs(i, j, count):\n        if (i, j) in visited:\n            return count\n        visited.add((i, j))\n        if table[i][j] == 'D':\n            count = dfs(i, j+1, count+1)\n            count = dfs(i+1, j, count+1)\n            count = dfs(i, j-1, count+1)\n            count = dfs(i-1, j, count+1)\n        elif table[i][j] == 'I':\n            count = dfs(i, j+1, count+1)\n            count = dfs(i-1, j, count+1)\n        elif table[i][j] == 'M':\n            count = dfs(i+1, j, count+1)\n            count = dfs(i, j-1, count+1)\n        elif table[i][j] == 'A':\n            count = dfs(i-1, j, count+1)\n            count = dfs(i, j+1, count+1)\n        return count\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if table[i][j] == 'D':\n                count = dfs(i, j, count)\n    if count == 0:\n        return \"Poor Dima!\"\n    elif count == float('inf'):\n        return \"Poor Inna!\"\n    else:\n        return count"
    },
    {
        "number": 1415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, x_0, y_0 = map(int, stdin.split()[0:4])\n    s = stdin.split()[4]\n    n = len(s)\n    dp = [[0] * (y+1) for _ in range(x+1)]\n    dp[x_0][y_0] = 1\n    for i in range(n):\n        for j in range(x+1):\n            for k in range(y+1):\n                if j > 0 and s[i] == 'L' and dp[j-1][k] == 1:\n                    dp[j][k] = 1\n                if j < x and s[i] == 'R' and dp[j+1][k] == 1:\n                    dp[j][k] = 1\n                if k > 0 and s[i] == 'U' and dp[j][k-1] == 1:\n                    dp[j][k] = 1\n                if k < y and s[i] == 'D' and dp[j][k+1] == 1:\n                    dp[j][k] = 1\n    res = [0] * (n+1)\n    for i in range(x+1):\n        for j in range(y+1):\n            if dp[i][j] == 1:\n                res[0] += 1\n                for k in range(1, n+1):\n                    if i > 0 and s[k-1] == 'L' and dp[i-1][j] == 1:\n                        res[k] += 1\n                    if i < x and s[k-1] == 'R' and dp[i+1][j] == 1:\n                        res[k] += 1\n                    if j > 0 and s[k-1] == 'U' and dp[i][j-1] == 1:\n                        res[k] += 1\n                    if j < y and s[k-1] == 'D' and dp[i][j+1] == 1:\n                        res[k] += 1\n    return''.join(map(str, res))"
    },
    {
        "number": 1416,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n == 1:\n        return str(a[0])\n    if n == 2:\n        return str(min(a[0], a[1]))\n    if n == 3:\n        return str(min(a[0], a[1], a[2]))\n    if n == 4:\n        return str(min(a[0], a[1], a[2], a[3]))\n    if n == 5:\n        return str(min(a[0], a[1], a[2], a[3], a[4]))\n    if n == 6:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5]))\n    if n == 7:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6]))\n    if n == 8:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]))\n    if n == 9:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]))\n    if n == 10:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]))\n    if n == 11:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]))\n    if n == 12:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]))\n    if n == 13:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12]))\n    if n == 14:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13]))\n    if n == 15:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14]))\n    if n == 16:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]))\n    if n == 17:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16]))\n    if n == 18:\n        return str(min(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16], a[17]))\n    if n == 19:\n        return str(min(a[0], a[1], a[2], a[3], a["
    },
    {
        "number": 1417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 998244353\n    P = list(range(1, n+1))\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if P[i] > P[j]:\n                P[i], P[j] = P[j], P[i]\n    count = 1\n    for i in range(1, n*n):\n        if P[i]!= P[i-1]:\n            count += 1\n    return count % MOD"
    },
    {
        "number": 1418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = [1] * (n+1)\n    for i in range(2, n+1):\n        for j in range(i+1, n+1):\n            if gcd(i, j) == 1:\n                a[i] = j\n                break\n    return''.join(map(str, a[2:]))\n\ndef"
    },
    {
        "number": 1419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, ad = map(str.strip, stdin.split('\\n'))\n    k = int(k)\n    ad = ad.replace(' ', '.')\n    words = ad.split('-')\n    lines = []\n    line = ''\n    for word in words:\n        if len(line) + len(word) <= k:\n            line += word\n        else:\n            lines.append(line)\n            line = word\n    lines.append(line)\n    width = max(len(line) for line in lines)\n    return str(width)"
    },
    {
        "number": 1420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    d = a[n-1] - a[0]\n    return str(d)"
    },
    {
        "number": 1421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    gifts = {i: [] for i in range(1, n+1)}\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        gifts[u].append(v)\n        gifts[v].append(u)\n    chloe_prizes = set()\n    vladik_prizes = set()\n    chloe_score = 0\n    vladik_score = 0\n    for i in range(1, n+1):\n        if i in chloe_prizes or i in vladik_prizes:\n            continue\n        if len(gifts[i]) == 0:\n            continue\n        if len(chloe_prizes) == 0:\n            chloe_prizes.add(i)\n            chloe_score += a[i-1]\n            continue\n        if len(vladik_prizes) == 0:\n            vladik_prizes.add(i)\n            vladik_score += a[i-1]\n            continue\n        if len(chloe_prizes.intersection(vladik_prizes)) > 0:\n            return \"Impossible\"\n        if len(gifts[i]) == 1:\n            if len(chloe_prizes) == 1:\n                chloe_prizes.add(i)\n                chloe_score += a[i-1]\n            else:\n                vladik_prizes.add(i)\n                vladik_score += a[i-1]\n        else:\n            chloe_score_max = -float('inf')\n            vladik_score_max = -float('inf')\n            for j in gifts[i]:\n                if j in chloe_prizes:\n                    continue\n                if j in vladik_prizes:\n                    continue\n                if len(gifts[j]) == 1:\n                    if len(chloe_prizes) == 1:\n                        chloe_score_max = max(chloe_score_max, a[j-1])\n                    else:\n                        vladik_score_max = max(vladik_score_max, a[j-1])\n                else:\n                    chloe_score_max_tmp = -float('inf')\n                    vladik_score_max_tmp = -float('inf')\n                    for k in gifts[j]:\n                        if k in chloe_prizes:\n                            continue\n                        if k in vladik_prizes:\n                            continue\n                        if len(gifts[k]) == 1:\n                            if len(chloe_prizes) == 1:\n                                chloe_score_max_tmp = max(chloe_score_max_tmp, a[k-1])\n                            else:\n                                vladik_score_max_tmp = max(vladik_score_max_tmp, a[k-1])\n                        else:\n                            chloe_score_max_tmp_tmp = -float('inf')\n                            vladik_score_max_tmp_tmp = -float('inf')\n                            for l in gifts[k]:\n                                if l in chloe_prizes:\n                                    continue\n                                if l in vladik_prizes:\n                                    continue\n                                if len(gifts[l]) == 1:\n                                    if len(chloe_prizes) == 1:\n                                        chloe_score_max_tmp_tmp = max(chloe_score_max_tmp_tmp, a[l-1])\n                                    else:\n                                        vladik_score_max_tmp_tmp = max(vladik_score_max_tmp_tmp, a[l-1])\n                                else:\n                                    chloe_score_max_tmp_tmp_tmp = -float('inf')\n                                    vladik_score_max_tmp_tmp_tmp = -float('inf')\n                                    for m in gifts[l]:\n                                        if m in chloe_prizes:\n                                            continue\n                                        if m in vladik_prizes:\n                                            continue\n                                        if len(gifts[m]) == 1:\n                                            if len(chloe_prizes) == 1:\n                                                chloe_score_max_tmp_tmp_tmp = max(chloe_score_max_tmp_tmp_tmp, a[m-1])\n                                            else:\n                                                vladik_score_max_tmp_tmp_tmp = max(vladik_score_max_"
    },
    {
        "number": 1422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weights = [int(i) for i in stdin.split()[0]]\n    m = int(stdin.split()[1])\n    n = len(weights)\n    if m > n:\n        return \"NO\"\n    if m == n:\n        return \"YES\\n\" + \" \".join(str(i) for i in weights)\n    dp = [[False] * (m+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j >= weights[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-weights[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    if dp[n][m]:\n        ans = []\n        i, j = n, m\n        while i > 0 and j > 0:\n            if dp[i-1][j] and dp[i-1][j-weights[i-1]]:\n                ans.append(weights[i-1])\n                i -= 1\n                j -= weights[i-1]\n            elif dp[i-1][j]:\n                i -= 1\n            else:\n                j -= weights[i-1]\n        ans.reverse()\n        return \"YES\\n\" + \" \".join(str(i) for i in ans)\n    else:\n        return \"NO\""
    },
    {
        "number": 1423,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    p = list(map(int, stdin.readline().split()))\n\n    # check if there is a suitable sequence b\n    for i in range(1, n+1):\n        b = [l + j for j in range(i)]\n        if all(l <= b[j] <= r for j in range(i)):\n            c = [b[j] - a[j] for j in range(i)]\n            if sorted(c) == sorted(set(c)):\n                if p == [len([1 for j in range(i) if c[j] <= j]) for j in range(1, n+1)]:\n                    return''.join(map(str, b))\n\n    return '-1'"
    },
    {
        "number": 1424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    armies = [int(stdin.readline()) for _ in range(m+1)]\n    friends = set()\n    for i in range(m):\n        for j in range(i+1, m+1):\n            if bin(armies[i] ^ armies[j]).count('1') <= k:\n                friends.add(i+1)\n                friends.add(j+1)\n    return len(friends)"
    },
    {
        "number": 1425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    if a[-1] > sum(a[:-1]):\n        return \"NO\"\n    else:\n        for i in range(n):\n            if a[i] > sum(a[i+1:i+3]):\n                return \"NO\"\n        return \"YES\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 1426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    edges = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n    S, T = map(int, stdin.readline().split())\n\n    # Build graph\n    graph = [[] for _ in range(N+1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n\n    # BFS to find shortest path from S to T\n    queue = [(S, 0)]\n    visited = [False] * (N+1)\n    visited[S] = True\n    while queue:\n        u, dist = queue.pop(0)\n        if u == T:\n            return str(dist)\n        for v in graph[u]:\n            if not visited[v]:\n                queue.append((v, dist+1))\n                visited[v] = True\n\n    # If T is not reachable from S, return -1\n    return \"-1\""
    },
    {
        "number": 1427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    MOD = 10**9 + 7\n    dp = [[0] * N for _ in range(N)]\n\n    # Fill the dp table\n    for i in range(N):\n        dp[i][i] = A[i]\n\n    # Fill the dp table\n    for l in range(2, N+1):\n        for i in range(N-l+1):\n            j = i + l - 1\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + A[i]*A[k]*A[j])\n\n    # Return the answer\n    return str(dp[0][N-1] % MOD)"
    },
    {
        "number": 1428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    N, C = map(int, lines[0].split())\n    D = [list(map(int, line.split())) for line in lines[1:1+C]]\n    c = [list(map(int, line.split())) for line in lines[1+C:]]\n\n    # Initialize DP table\n    dp = [[float('inf')] * C for _ in range(N)]\n    dp[0][0] = 0\n\n    # Fill DP table\n    for i in range(N):\n        for j in range(C):\n            for x in range(C):\n                for y in range(C):\n                    if (i+j) % 3 == (x+y) % 3:\n                        dp[i][j] = min(dp[i][j], dp[i-1][x] + D[x][y])\n                    else:\n                        dp[i][j] = min(dp[i][j], dp[i-1][x] + D[x][y] + D[y][x])\n\n    # Compute minimum wrongness\n    min_wrongness = float('inf')\n    for i in range(N):\n        for j in range(C):\n            min_wrongness = min(min_wrongness, dp[i][j] + D[c[i][j]-1][c[i][j]-1])\n\n    return str(min_wrongness)"
    },
    {
        "number": 1429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = stdin.strip().split()\n    n = int(n)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            t = s[i:j]\n            if t == t[::-1] and any(t[k:l] == t[::-1][k:l] and t[k:l]!= t for k in range(len(t)) for l in range(k+1, len(t)+1)):\n                count += 1\n    return count"
    },
    {
        "number": 1430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    count = 0\n    max_count = 0\n    for i in range(n):\n        if s[i] == '0':\n            count += 1\n        else:\n            max_count = max(max_count, count)\n            count = 0\n    max_count = max(max_count, count)\n    return str(max_count)"
    },
    {
        "number": 1431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Check if a good set of choices exists\n    for i in range(1, N+1):\n        if sum(a[j-1] for j in range(1, N+1, i)) % 2!= a[i-1]:\n            return \"-1\"\n\n    # Find a good set of choices\n    balls = [i for i in range(1, N+1) if a[i-1] == 1]\n    return f\"{len(balls)}\\n\" + \"\\n\".join(map(str, balls))"
    },
    {
        "number": 1432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    rain = [0] * N\n    rain[0] = A[0]\n    rain[N-1] = A[N-1]\n\n    # Calculate rain for each mountain\n    for i in range(1, N-1):\n        rain[i] = (A[i-1] + A[i]) // 2\n\n    # Print output\n    return''.join(map(str, rain))"
    },
    {
        "number": 1433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    plan = []\n    for i in range(n):\n        plan.append(list(map(int, stdin.split())))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if plan[i][j] == 0:\n                if i > 0 and plan[i-1][j] == 1:\n                    count += 1\n                if i < n-1 and plan[i+1][j] == 1:\n                    count += 1\n                if j > 0 and plan[i][j-1] == 1:\n                    count += 1\n                if j < m-1 and plan[i][j+1] == 1:\n                    count += 1\n    return count"
    },
    {
        "number": 1434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    degrees = [int(stdin.readline().split()[0]) for _ in range(n)]\n    sums = [int(stdin.readline().split()[1]) for _ in range(n)]\n    edges = []\n    for i in range(n):\n        for j in range(degrees[i]):\n            edges.append((i, j))\n    return str(len(edges)) + '\\n' + '\\n'.join(' '.join(map(str, edge)) for edge in edges)"
    },
    {
        "number": 1435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    nines = 0\n    while a > 0:\n        nines += a % 10\n        a //= 10\n    return nines\n\nprint(solution(input()))"
    },
    {
        "number": 1436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = list(map(int, stdin.split()))\n    untreated_crimes = 0\n    officers_count = 0\n    for event in events:\n        if event == -1:\n            untreated_crimes += 1\n        else:\n            officers_count += event\n            if officers_count > 10:\n                officers_count = 10\n    return str(untreated_crimes)"
    },
    {
        "number": 1437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if bin(int(s[i:j], 64) & int(s, 64))[2:].count('1') == len(s):\n                count += 1\n    return count % MOD"
    },
    {
        "number": 1438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    max_cookies = 0\n    for i in range(n):\n        if a[i] <= b[i]:\n            max_cookies += b[i] // a[i]\n        else:\n            max_cookies += k // a[i]\n    return max_cookies"
    },
    {
        "number": 1439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) % m == 0:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * (n+1)\n    dp[0] = 0\n    dp[1] = a[0]\n    dp[2] = a[1]\n    for i in range(3, n+1):\n        dp[i] = max(dp[i-1], dp[i-2] + a[i-1])\n    return dp[n]"
    },
    {
        "number": 1441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, throws = map(int, stdin.split())\n    throws = list(map(int, stdin.readline().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(n+1):\n            if j < throws[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i-1][j-throws[i-1]]) % (10**9 + 7)\n    return dp[n][n]"
    },
    {
        "number": 1442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    orders = []\n    for i in range(n):\n        d, p, q = stdin.split()\n        orders.append((d, int(p), int(q)))\n    buy_orders = sorted(filter(lambda x: x[0] == 'B', orders), key=lambda x: x[1], reverse=True)\n    sell_orders = sorted(filter(lambda x: x[0] == 'S', orders), key=lambda x: x[1])\n    buy_book = []\n    sell_book = []\n    for order in buy_orders:\n        if not buy_book or order[1] >= buy_book[-1][1]:\n            buy_book.append(order)\n        else:\n            break\n    for order in sell_orders:\n        if not sell_book or order[1] <= sell_book[-1][1]:\n            sell_book.append(order)\n        else:\n            break\n    result = []\n    for order in buy_book[:s]:\n        result.append(' '.join(map(str, order)))\n    for order in sell_book[:s]:\n        result.append(' '.join(map(str, order)))\n    return '\\n'.join(result)"
    },
    {
        "number": 1443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n    types = stdin.readline().strip()\n    stamina = 0\n    time = 0\n    for i in range(n):\n        if types[i] == 'W':\n            time += 3 * lengths[i]\n            stamina += lengths[i]\n        elif types[i] == 'L':\n            time += 1 * lengths[i]\n            stamina -= lengths[i]\n        else:\n            time += 5 * lengths[i]\n            stamina += lengths[i]\n        if stamina < 0:\n            stamina = 0\n    return str(time)"
    },
    {
        "number": 1444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.splitlines()[0].split())\n    x = list(map(int, stdin.splitlines()[1].split()))\n    k = int(stdin.splitlines()[2])\n\n    # calculate distances between all pairs of stations\n    dist = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(i+1, n):\n            dist[i][j] = abs(x[i] - x[j])\n            dist[j][i] = dist[i][j]\n\n    # calculate average commute time\n    avg_time = sum(sum(dist[i][j] for j in range(n)) for i in range(n)) / (n * (n-1) / 2)\n\n    # find the k stations that minimize the average commute time\n    min_time = float('inf')\n    for i in range(1 << n):\n        # check if the i-th subset has exactly k ones\n        if bin(i).count('1')!= k:\n            continue\n        # calculate the average commute time of the i-th subset\n        subset_time = sum(sum(dist[i][j] for j in range(n) if (i >> j) & 1) for i in range(1 << n)) / (k * (k-1) / 2)\n        # update the minimum time if necessary\n        if subset_time < min_time:\n            min_time = subset_time\n            min_subset = i\n\n    # convert the subset to a list of station numbers\n    min_stations = [j+1 for j in range(n) if (min_subset >> j) & 1]\n\n    return''.join(map(str, min_stations))"
    },
    {
        "number": 1445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(1, n):\n        j = i\n        while j <= n - i:\n            a[j-1], a[n-j] = a[n-j], a[j-1]\n            j += 1\n    return''.join(map(str, a))"
    },
    {
        "number": 1446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:3+k]))\n    d = [[-1 for j in range(k+1)] for i in range(k+1)]\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            if i == j:\n                d[i][j] = 0\n            else:\n                d[i][j] = float('inf')\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            if i!= j:\n                for l in range(m):\n                    u, v, x = map(int, stdin.split()[3+l*3:3+(l+1)*3])\n                    if u == i and v == j:\n                        d[i][j] = min(d[i][j], x)\n                    elif u == j and v == i:\n                        d[i][j] = min(d[i][j], x)\n    for i in range(1, k+1):\n        for j in range(1, k+1):\n            if d[i][j] == float('inf'):\n                d[i][j] = -1\n    if all(all(x >= 0 for x in row) for row in d):\n        return 'Yes\\n' + '\\n'.join(' '.join(map(str, row)) for row in d)\n    else:\n        return 'No'"
    },
    {
        "number": 1447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    deck = list(range(n)) * m\n    random.shuffle(deck)\n    success = 0\n    for i in range(n):\n        card = deck.pop()\n        deck.insert(random.randint(0, n - 1), card)\n        if deck[i] == card:\n            success += 1\n    return success / (n * m)\n\nimport random\n\nprint(solution(\"2 2\")) # 0.6666666666666666\nprint(solution(\"4 4\")) # 0.4000000000000000\nprint(solution(\"1 2\")) # 1.0000000000000000"
    },
    {
        "number": 1448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().split())\n    m = int(stdin.readline())\n    points = []\n    for i in range(m):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n    result = []\n    for point in points:\n        if point[0] >= 0 and point[0] <= n and point[1] >= 0 and point[1] <= n:\n            result.append(\"YES\")\n        else:\n            result.append(\"NO\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 1449,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        if a[-1] == 0:\n            print(-1)\n            continue\n        m = 1\n        while True:\n            b = [0] * n\n            for j in range(n):\n                b[j] = (m * a[j]) // (j + 1)\n            if sum(set(b)) <= k:\n                break\n            m += 1\n        print(m)\n    return \"\""
    },
    {
        "number": 1450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    n = len(s)\n    for i in range(n-1):\n        if s[i:i+2] in ['01', '12']:\n            s = s[:i] + s[i+1] + s[i] + s[i+2:]\n    return s"
    },
    {
        "number": 1451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in a:\n        if len(str(i)) <= k:\n            count += 1\n    return count"
    },
    {
        "number": 1452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split()[0:2])\n    r = list(map(int, stdin.split()[2:2+h]))\n    c = list(map(int, stdin.split()[2+h:]))\n    MOD = 1000000007\n    dp = [[0] * (w+1) for _ in range(h+1)]\n    dp[0][0] = 1\n    for i in range(h+1):\n        for j in range(w+1):\n            if i > 0:\n                dp[i][j] += dp[i-1][j] * (r[i-1] + 1)\n            if j > 0:\n                dp[i][j] += dp[i][j-1] * (c[j-1] + 1)\n            dp[i][j] %= MOD\n    return str(dp[h][w])"
    },
    {
        "number": 1453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    x = [0] * n\n    for i in range(n):\n        for j in range(i+1, min(i+m+1, n+1)):\n            x[i] += j * a[i]\n    return''.join(map(str, x))"
    },
    {
        "number": 1454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[i*m+1:i*m+m+1])))\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 0:\n                a[i][j] = 1\n    for i in range(1, n):\n        for j in range(m):\n            if a[i][j] <= a[i-1][j]:\n                return -1\n    for j in range(1, m):\n        for i in range(n):\n            if a[i][j] <= a[i][j-1]:\n                return -1\n    return max(sum(row) for row in a)"
    },
    {
        "number": 1455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    m = 1\n    while True:\n        if (m*(m+1))//2 >= n:\n            break\n        m += 1\n    print(m)\n    for i in range(n):\n        r, c = divmod(i+1, m)\n        print(r+1, c+1)\n    return \"\""
    },
    {
        "number": 1456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    board = []\n    for i in range(n):\n        board.append(list(stdin.readline().strip()))\n\n    # check if there is a valid set of moves\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'o':\n                # check if the piece can move to any other cell\n                for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                    x, y = i + dx, j + dy\n                    if 0 <= x < n and 0 <= y < n and board[x][y] == '.':\n                        # check if the cell is attacked by any other piece\n                        for a, b in [(1, 2), (-1, 2), (2, 1), (2, -1), (1, -2), (-1, -2), (-2, 1), (-2, -1)]:\n                            if 0 <= i + a < n and 0 <= j + b < n and board[i + a][j + b] == 'x':\n                                # found a valid set of moves\n                                moves = []\n                                for k in range(n):\n                                    row = []\n                                    for l in range(n):\n                                        if k == i and l == j:\n                                            row.append('x')\n                                        elif k == x and l == y:\n                                            row.append('o')\n                                        elif board[k][l] == 'x':\n                                            row.append('x')\n                                        else:\n                                            row.append('.')\n                                    moves.append(''.join(row))\n                                return 'YES\\n' + '\\n'.join(moves)\n\n    # no valid set of moves found\n    return 'NO'"
    },
    {
        "number": 1457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ai_name, phone_name = stdin.split('\\n')\n    min_replace = float('inf')\n    for i in range(len(ai_name)):\n        if phone_name in ai_name[i:]:\n            continue\n        new_name = ai_name[:i] + '#' * (len(ai_name) - i)\n        if phone_name in new_name:\n            continue\n        min_replace = min(min_replace, i)\n    return str(min_replace)"
    },
    {
        "number": 1458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                continue\n            else:\n                return \"YES\\n\" + str(i+1) + \" \" + str(j)\n    return \"NO\""
    },
    {
        "number": 1459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *d = map(int, stdin.split())\n    s, t = map(int, stdin.split())\n    d = [0] + d + [0]\n    dp = [[float('inf')] * n for _ in range(n)]\n    for k in range(n):\n        for i in range(n):\n            j = (i + k) % n\n            dp[i][j] = dp[j][i] = d[i] + d[j]\n    return dp[s-1][t-1]"
    },
    {
        "number": 1460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = 2*n\n    result = []\n    for i in range(n):\n        result.append((i, 0))\n        result.append((i, n-1))\n    for i in range(n):\n        result.append((0, i))\n        result.append((n-1, i))\n    return str(k) + '\\n' + '\\n'.join(f\"{x} {y}\" for x, y in result)"
    },
    {
        "number": 1461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    f = list(map(int, stdin.split()))\n    w = list(map(int, stdin.split()))\n    s = [0] * n\n    m = [float('inf')] * n\n    for i in range(n):\n        s[i] = w[i]\n        m[i] = w[i]\n        for j in range(1, k):\n            if f[i] == -1:\n                break\n            s[i] += w[f[i]]\n            m[i] = min(m[i], w[f[i]])\n            i = f[i]\n    return '\\n'.join(f'{s[i]} {m[i]}' for i in range(n))"
    },
    {
        "number": 1462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = stdin.split()[1]\n    freq = {}\n    for card in cards:\n        if card in freq:\n            freq[card] += 1\n        else:\n            freq[card] = 1\n    max_coins = 0\n    for card in freq:\n        if freq[card] == 1:\n            max_coins += 1\n        else:\n            max_coins += freq[card]\n    return max_coins"
    },
    {
        "number": 1463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = []\n    for i in range(n):\n        row = list(map(int, stdin.readline().strip().split()))\n        grid.append(row)\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]!= 1:\n                found = False\n                for s in range(n):\n                    for t in range(n):\n                        if s!= i and t!= j and grid[i][j] == grid[i][s] + grid[t][j]:\n                            found = True\n                            break\n                    if found:\n                        break\n                if not found:\n                    return \"No\"\n    return \"Yes\""
    },
    {
        "number": 1464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    titles = [stdin.readline().strip() for _ in range(n)]\n    original_titles = set()\n    for title in titles:\n        if all(title.count(c) == 1 for c in set(title)):\n            original_titles.add(title)\n    original_titles = sorted(list(original_titles))\n    for title in original_titles:\n        if all(title.count(c) == 1 for c in set(title)):\n            return title\n    return \"\""
    },
    {
        "number": 1465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    children = stdin.strip().split()[1]\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if children[i] == children[j]:\n                pairs.append((i, j))\n    if len(pairs) < k:\n        return \"-1\"\n    result = []\n    for i in range(k):\n        left_pairs = []\n        for pair in pairs:\n            if pair[0] > pair[1]:\n                left_pairs.append(pair)\n        if not left_pairs:\n            return \"-1\"\n        result.append(len(left_pairs))\n        for pair in left_pairs:\n            print(pair[0]+1, pair[1]+1)\n        pairs = [pair for pair in pairs if pair not in left_pairs]\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 1466,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    edges = []\n    for i in range(m):\n        x, y, w = map(int, stdin.readline().split())\n        edges.append((x, y, w))\n    edges.sort(key=lambda x: x[2])\n    good_vertices = set()\n    for i in range(1, n):\n        dist = [float('inf')] * n\n        dist[i] = 0\n        visited = [False] * n\n        queue = [(0, i)]\n        while queue:\n            d, u = queue.pop(0)\n            if visited[u]:\n                continue\n            visited[u] = True\n            for v, w in edges:\n                if v == u:\n                    continue\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    queue.append((dist[v], v))\n        if dist[i] == float('inf'):\n            continue\n        good_vertices.add(i)\n    e = min(k, len(good_vertices))\n    print(e)\n    for i in range(e):\n        print(good_vertices.pop())"
    },
    {
        "number": 1467,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = 1\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            ans += 1\n    if ans == n:\n        return str(ans)\n    else:\n        return \"-1\""
    },
    {
        "number": 1468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    hashtags = [stdin.readline().strip() for _ in range(n)]\n    hashtags.sort()\n    result = []\n    for hashtag in hashtags:\n        if hashtag[1:]:\n            result.append(hashtag[0] + hashtag[1:-1])\n        else:\n            result.append('')\n    return '\\n'.join(result)"
    },
    {
        "number": 1469,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin.strip())\n    N = 2*L\n    M = L*(L-1)//2\n    print(N, M)\n    for i in range(1, L):\n        print(1, i+1, 0)\n    for i in range(L-1):\n        print(i+1, i+2, 0)\n    for i in range(L-1):\n        for j in range(i+1, L):\n            print(i+1, j+1, 1)\n    return \"\""
    },
    {
        "number": 1470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    # initialize the die\n    die = [1, 2, 3, 4, 5, 6]\n    # initialize the score\n    score = 0\n    # initialize the number of operations\n    operations = 0\n    # loop until the score is greater than or equal to x\n    while score < x:\n        # rotate the die\n        die = die[-1:] + die[:-1]\n        # obtain the score\n        score = sum(die)\n        # increment the number of operations\n        operations += 1\n    # return the number of operations\n    return str(operations)"
    },
    {
        "number": 1471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    edges = []\n    for i in range(N - 1):\n        u, v, w = map(int, stdin.readline().strip().split())\n        edges.append((u, v, w))\n\n    # Initialize coloring\n    coloring = [0] * N\n\n    # DFS to find a valid coloring\n    def dfs(u, color):\n        coloring[u] = color\n        for v, w in edges:\n            if v == u:\n                continue\n            if coloring[v] == color:\n                return False\n            if coloring[v] == 0:\n                if w % 2 == 1:\n                    return False\n                if not dfs(v, 1 - color):\n                    return False\n        return True\n\n    # Try all possible colorings\n    for i in range(N):\n        if coloring[i] == 0:\n            if dfs(i, 1):\n                break\n\n    # Print coloring\n    return '\\n'.join(map(str, coloring))\n"
    },
    {
        "number": 1472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, X, Y = map(int, stdin.split())\n\n    # Initialize graph\n    graph = [[] for _ in range(N+1)]\n    for i in range(1, N):\n        graph[i].append(i+1)\n\n    # Add edge between X and Y\n    graph[X].append(Y)\n    graph[Y].append(X)\n\n    # Initialize distances\n    distances = [float('inf')] * (N+1)\n    distances[X] = 0\n    distances[Y] = 1\n\n    # Dijkstra's algorithm\n    for i in range(N):\n        for u in range(1, N+1):\n            for v in graph[u]:\n                if distances[u] + 1 < distances[v]:\n                    distances[v] = distances[u] + 1\n\n    # Count pairs with distance k\n    count = 0\n    for i in range(1, N):\n        for j in range(i+1, N+1):\n            if distances[i] + distances[j] == k:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 1473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    queue = [int(stdin.readline().strip()) for _ in range(n)]\n    for i in range(n):\n        if queue[i] == 0:\n            if i == 0:\n                queue[i] = queue[i+1]\n            elif i == n-1:\n                queue[i] = queue[i-1]\n            else:\n                queue[i] = queue[i-1] if queue[i-1]!= 0 else queue[i+1]\n    return''.join(map(str, queue))"
    },
    {
        "number": 1474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(1, n):\n        dp[i][i] = 1\n    for i in range(1, n):\n        for j in range(i):\n            if h[i] > h[j]:\n                dp[j][i] = (dp[j][i] + dp[j+1][i]) % MOD\n    return dp[0][n-1]"
    },
    {
        "number": 1475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * (k+1) for _ in range(b+1)]\n    dp[0][0] = 1\n    for i in range(b):\n        for j in range(k+1):\n            if j >= a[i]:\n                dp[i+1][j] = (dp[i][j] + dp[i][j-a[i]]) % MOD\n            else:\n                dp[i+1][j] = dp[i][j]\n    return dp[b][k]"
    },
    {
        "number": 1476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    k = n // 2\n    if n % 2 == 1:\n        k += 1\n    print(k)\n    for i in range(1, k+1):\n        print(i, end=' ')\n        if i % 2 == 0:\n            print(n-i+1, end=' ')\n    print()"
    },
    {
        "number": 1477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    e = list(map(int, stdin.readline().split()))\n    dependencies = []\n    for i in range(m):\n        t1, t2 = map(int, stdin.readline().split())\n        dependencies.append((t1, t2))\n\n    # build graph\n    graph = [[] for _ in range(n)]\n    for t1, t2 in dependencies:\n        graph[t1].append(t2)\n\n    # topological sort\n    visited = [False] * n\n    stack = []\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            stack.append(i)\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        stack.append(neighbor)\n\n    # count coprocessor calls\n    coprocessor_calls = 0\n    for i in range(n):\n        if e[i] == 1:\n            coprocessor_calls += 1\n\n    # return result\n    return str(coprocessor_calls)"
    },
    {
        "number": 1478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    comments = stdin.split(\",\")\n    # find max depth of nesting\n    max_depth = 0\n    for i in range(1, len(comments), 3):\n        depth = int(comments[i])\n        if depth > max_depth:\n            max_depth = depth\n    # print comments in desired format\n    for i in range(max_depth):\n        print(\" \".join(comments[3*i+1:3*i+3]))\n    return \"\""
    },
    {
        "number": 1479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    field = []\n    for i in range(n):\n        field.append(list(stdin.readline().strip()))\n    spiders = []\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == \"L\":\n                spiders.append((i, j, 0))\n            elif field[i][j] == \"R\":\n                spiders.append((i, j, 1))\n            elif field[i][j] == \"U\":\n                spiders.append((i, j, 2))\n            elif field[i][j] == \"D\":\n                spiders.append((i, j, 3))\n    spiders.sort(key=lambda x: x[0])\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i-1][j]\n                if j > 0:\n                    dp[i][j] += dp[i-1][j-1]\n                if j < m-1:\n                    dp[i][j] += dp[i-1][j+1]\n    ans = [0] * m\n    for i in range(m):\n        for j in range(k):\n            if spiders[j][1] == i:\n                ans[i] += dp[spiders[j][0]][i]\n    return \" \".join(map(str, ans))"
    },
    {
        "number": 1480,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    leader = 1\n    for i in range(k):\n        eliminated = (leader + a[i] - 1) % n + 1\n        print(eliminated, end=' ')\n        leader = eliminated\n    return ''"
    },
    {
        "number": 1481,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    board = []\n    for i in range(n):\n        board.append(list(stdin.readline().strip()))\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'x':\n                continue\n            count = 0\n            if i > 0 and board[i-1][j] == 'o':\n                count += 1\n            if i < n-1 and board[i+1][j] == 'o':\n                count += 1\n            if j > 0 and board[i][j-1] == 'o':\n                count += 1\n            if j < n-1 and board[i][j+1] == 'o':\n                count += 1\n            if count % 2 == 1:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1482,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    segments = set(range(1, n*k+1))\n    children = [set() for _ in range(k)]\n    for i in range(k):\n        children[i].add(a[i])\n        segments.remove(a[i])\n    for i in range(k):\n        for j in range(i+1, k):\n            if a[i] in children[j]:\n                children[j].remove(a[i])\n            if a[j] in children[i]:\n                children[i].remove(a[j])\n    result = []\n    for child in children:\n        result.extend(child)\n    return''.join(map(str, result))"
    },
    {
        "number": 1483,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    result = []\n    for i in range(1, n+1):\n        if p[i-1] == 0:\n            result.append(i)\n        else:\n            result.append(p[i-1])\n    return''.join(map(str, result))"
    },
    {
        "number": 1484,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    MOD = 998244353\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+1):\n            if a[i-1] == -1:\n                for x in range(1, k+1):\n                    dp[i][j] = (dp[i][j] + dp[i-1][x]) % MOD\n            else:\n                dp[i][a[i-1]] = (dp[i][a[i-1]] + dp[i-1][j]) % MOD\n    ans = 0\n    for i in range(k+1):\n        ans = (ans + dp[n][i]) % MOD\n    return str(ans)"
    },
    {
        "number": 1485,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[0][1] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= a[i-1]:\n                dp[i][j] += dp[i][j-a[i-1]]\n            if a[i-1] % 2 == 0:\n                dp[i][j] += dp[i][j//2]\n    return dp[n][m]"
    },
    {
        "number": 1486,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    x = list(map(int, stdin.split()[1:]))\n    min_cost = [float('inf')]*n\n    max_cost = [float('-inf')]*n\n    for i in range(n):\n        for j in range(i+1, n):\n            min_cost[i] = min(min_cost[i], abs(x[i]-x[j]))\n            max_cost[i] = max(max_cost[i], abs(x[i]-x[j]))\n    return '\\n'.join(f'{min_cost[i]} {max_cost[i]}' for i in range(n))"
    },
    {
        "number": 1487,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    n = len(s)\n    for i in range(2**n):\n        p = bin(i)[2:].zfill(n)\n        if sum(1 for j in range(n) if s[j]!= p[j]) == sum(1 for j in range(n) if t[j]!= p[j]):\n            return p\n    return \"impossible\""
    },
    {
        "number": 1488,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    routes = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                routes.append([a[i], a[j], a[k]])\n    total_distance = sum([abs(a[i]-a[i-1]) for i in range(1, n)])\n    average_distance = total_distance / n\n    numerator = sum([sum([abs(a[i]-a[j]) for j in range(n)]) for i in range(n)])\n    denominator = n * (n-1) * (n-2) // 6\n    return f\"{numerator} {denominator}\""
    },
    {
        "number": 1489,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]) % MOD\n    return dp[n][n]"
    },
    {
        "number": 1490,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    k = 0\n    t = []\n    for i in range(n):\n        if a[i] <= m:\n            k += 1\n            t.append(a[i])\n            m -= a[i]\n    print(k)\n    print(*t)"
    },
    {
        "number": 1491,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        if i % 2 == 0:\n            if a[i] % int(a[i]**0.5)**2 == 0:\n                count += 1\n        else:\n            if a[i] % int(a[i]**0.5)**2!= 0:\n                count += 1\n    if count == n//2:\n        return \"0\"\n    else:\n        return str(count)"
    },
    {
        "number": 1492,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    map_ = []\n    for i in range(n):\n        map_.append(list(stdin.split()[i+1]))\n    # print(map_)\n    # print(n, m)\n    # print(map_[0])\n    # print(map_[1])\n    # print(map_[2])\n    # print(map_[3])\n    # print(map_[4])\n    # print(map_[5])\n    # print(map_[6])\n    # print(map_[7])\n    # print(map_[8])\n    # print(map_[9])\n    # print(map_[10])\n    # print(map_[11])\n    # print(map_[12])\n    # print(map_[13])\n    # print(map_[14])\n    # print(map_[15])\n    # print(map_[16])\n    # print(map_[17])\n    # print(map_[18])\n    # print(map_[19])\n    # print(map_[20])\n    # print(map_[21])\n    # print(map_[22])\n    # print(map_[23])\n    # print(map_[24])\n    # print(map_[25])\n    # print(map_[26])\n    # print(map_[27])\n    # print(map_[28])\n    # print(map_[29])\n    # print(map_[30])\n    # print(map_[31])\n    # print(map_[32])\n    # print(map_[33])\n    # print(map_[34])\n    # print(map_[35])\n    # print(map_[36])\n    # print(map_[37])\n    # print(map_[38])\n    # print(map_[39])\n    # print(map_[40])\n    # print(map_[41])\n    # print(map_[42])\n    # print(map_[43])\n    # print(map_[44])\n    # print(map_[45])\n    # print(map_[46])\n    # print(map_[47])\n    # print(map_[48])\n    # print(map_[49])\n    # print(map_[50])\n    # print(map_[51])\n    # print(map_[52])\n    # print(map_[53])\n    # print(map_[54])\n    # print(map_[55])\n    # print(map_[56])\n    # print(map_[57])\n    # print(map_[58])\n    # print(map_[59])\n    # print(map_[60])\n    # print(map_[61])\n    # print(map_[62])\n    # print(map_[63])\n    # print(map_[64])\n    # print(map_[65])\n    # print(map_[66])\n    # print(map_[67])\n    # print(map_[68])\n    # print(map_[69])\n    # print(map_[70])\n    # print(map_[71])\n    # print(map_[72])\n    # print(map_[73])\n    # print(map_[74])\n    # print(map_[75])\n    # print(map_[76])\n    # print(map_[77])\n    # print(map_[78])\n    # print(map_[79])\n    # print(map_[80])\n    # print(map_[81])\n    # print(map_[82])\n    # print(map_[83])\n    # print(map_[84])\n    # print(map_[85])\n    # print(map_[86])\n    # print(map_[87])\n    # print(map_[88])\n    # print(map_[89])\n    # print(map_[90])\n    # print(map_[91])\n    # print(map_[92])\n    # print(map_[93])\n    # print(map_[94])\n    # print(map_[95])\n    # print(map_[96])\n    # print(map_[97])\n    # print(map_[98])\n    # print(map_[99])\n    # print(map_[100])\n    # print(map_[101])\n    # print(map_[102])\n    # print(map_[103])\n    # print(map_[104])\n    # print(map_[105])\n    # print(map_[106])\n    # print(map"
    },
    {
        "number": 1493,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = []\n    for i in range(n):\n        board.append(list(stdin.readline().strip()))\n    chessmen = []\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                chessmen.append((i, j))\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                for k in range(len(chessmen)):\n                    if abs(i - chessmen[k][0]) + abs(j - chessmen[k][1]) == 1:\n                        board[i][j] = \"B\"\n                        chessmen[k] = None\n                        break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                board[i][j] = \"W\"\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                board[i][j] = \"-\"\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \"B\":\n                for k in range(len(chessmen)):\n                    if abs(i - chessmen[k][0]) + abs(j - chessmen[k][1]) == 1:\n                        board[i][j] = \"W\"\n                        chessmen[k] = None\n                        break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \"W\":\n                for k in range(len(chessmen)):\n                    if abs(i - chessmen[k][0]) + abs(j - chessmen[k][1]) == 1:\n                        board[i][j] = \"B\"\n                        chessmen[k] = None\n                        break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                board[i][j] = \"-\"\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \"B\":\n                for k in range(len(chessmen)):\n                    if abs(i - chessmen[k][0]) + abs(j - chessmen[k][1]) == 1:\n                        board[i][j] = \"W\"\n                        chessmen[k] = None\n                        break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \"W\":\n                for k in range(len(chessmen)):\n                    if abs(i - chessmen[k][0]) + abs(j - chessmen[k][1]) == 1:\n                        board[i][j] = \"B\"\n                        chessmen[k] = None\n                        break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                board[i][j] = \"-\"\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \"B\":\n                for k in range(len(chessmen)):\n                    if abs(i - chessmen[k][0]) + abs(j - chessmen[k][1]) == 1:\n                        board[i][j] = \"W\"\n                        chessmen[k] = None\n                        break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \"W\":\n                for k in range(len(chessmen)):\n                    if abs(i - chessmen[k][0]) + abs(j - chessmen[k][1]) == 1:\n                        board[i][j] = \"B\"\n                        chessmen[k] = None\n                        break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \".\":\n                board[i][j] = \"-\"\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] == \"B\":\n                for k in range(len(chessmen)):\n                    if abs(i - chessmen[k][0]) + abs(j - chessmen[k][1]) == 1:\n                        board[i][j] = \"W\"\n                        chessmen[k] = None\n                        break\n    for i in range(n):\n        for j in range(m):\n            if board[i][j] =="
    },
    {
        "number": 1494,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, p = stdin.strip().split('\\n')\n    n = len(s)\n    ans = [0] * (n+1)\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == p:\n                ans[j] = max(ans[j], ans[i]+1)\n    return''.join(map(str, ans))"
    },
    {
        "number": 1495,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    volumes = list(map(int, stdin.readline().strip().split()))\n    operations = 0\n    for i in range(n):\n        if volumes[i] % 2 == 0:\n            volumes[i] //= 2\n        else:\n            volumes[i] = volumes[i] // 2 + 1\n        operations += 1\n    return str(operations)"
    },
    {
        "number": 1496,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, s = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    gadgets = []\n    for i in range(m):\n        t, c = map(int, stdin.readline().split())\n        gadgets.append((t, c))\n    gadgets.sort(key=lambda x: x[1])\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][0] = 0\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= gadgets[0][1]:\n                if gadgets[0][0] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-gadgets[0][1]] + a[i-1])\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-gadgets[0][1]] + b[i-1])\n            if j >= gadgets[1][1]:\n                if gadgets[1][0] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-gadgets[1][1]] + a[i-1])\n                else:\n                    dp[i][j] = max(dp[i][j], dp[i-1][j-gadgets[1][1]] + b[i-1])\n    if dp[n][k] < s:\n        return '-1'\n    else:\n        ans = []\n        for i in range(n, 0, -1):\n            if dp[i][k] == dp[i-1][k]:\n                continue\n            else:\n                for j in range(k, 0, -1):\n                    if dp[i][j] == dp[i-1][j]:\n                        continue\n                    else:\n                        ans.append((j, i))\n                        k -= j\n                        break\n        ans.sort(key=lambda x: x[0])\n        for i in range(len(ans)):\n            print(ans[i][0], ans[i][1])\n        return str(ans[0][0])"
    },
    {
        "number": 1497,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    room = []\n    for i in range(n):\n        room.append(list(map(int, stdin.readline().strip())))\n    clean_rows = 0\n    for i in range(n):\n        clean = True\n        for j in range(n):\n            if room[i][j] == 1:\n                clean = False\n                break\n        if clean:\n            clean_rows += 1\n    return clean_rows"
    },
    {
        "number": 1498,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    servers = [False] * n\n    tasks = []\n    for i in range(q):\n        t, k, d = map(int, stdin.split())\n        tasks.append((t, k, d))\n    tasks.sort()\n    for t, k, d in tasks:\n        if sum(servers) < k:\n            print(-1)\n            continue\n        for i in range(n):\n            if not servers[i]:\n                servers[i] = True\n                if sum(servers) == k:\n                    print(sum(servers))\n                    break\n                servers[i] = False\n        else:\n            print(-1)"
    },
    {
        "number": 1499,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m <= 2*n:\n        # window seats are already filled\n        # non-window seats are filled in order\n        return''.join(map(str, range(1, m+1)))\n    else:\n        # window seats are filled in order\n        # non-window seats are filled in order\n        return''.join(map(str, range(1, m+1, 2))) +'' +''.join(map(str, range(2, m+1, 2)))"
    },
    {
        "number": 1501,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    p = stdin.readline().strip()\n    y = list(map(int, stdin.readline().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    dp[0][0] = 1\n    for i in range(1, m+1):\n        for j in range(n+1):\n            if j < y[i-1]:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i][j-y[i-1]]) % MOD\n    ans = 0\n    for j in range(n+1):\n        if j < y[0]:\n            ans = (ans + dp[0][j]) % MOD\n        else:\n            ans = (ans + dp[0][j] - dp[0][j-y[0]]) % MOD\n    return str(ans)"
    },
    {
        "number": 1502,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    return a * 2 + 1"
    },
    {
        "number": 1503,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    permutations = [list(map(int, stdin.split())) for _ in range(m)]\n    count = 0\n    for i in range(1, 2**n):\n        prefix = []\n        suffix = []\n        for j in range(n):\n            if i & (1 << j):\n                prefix.append(j+1)\n            else:\n                suffix.append(j+1)\n        for perm in permutations:\n            if prefix == perm[:len(prefix)] and suffix == perm[len(perm)-len(suffix):]:\n                count += 1\n    return count"
    },
    {
        "number": 1504,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        l1, r1 = map(int, stdin.readline().strip().split())\n        l2, r2 = map(int, stdin.readline().strip().split())\n        if l1 == r1 and l2 == r2:\n            print(0)\n            continue\n        if l1 == l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 == r2:\n            print(n)\n            continue\n        if l1 < l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 > l2 and r1 < r2:\n            print(n)\n            continue\n        if l1 == l2 and r1 > r2:\n            print(n)\n            continue\n        if l1 <"
    },
    {
        "number": 1505,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    px, py, vx, vy, a, b, c, d = map(int, stdin.split())\n    if vx == 0 and vy == 0:\n        return \"0.0 0.0\"\n    if a <= 0 or b <= 0 or c <= 0 or d <= 0 or a > c:\n        return \"Invalid input\"\n    if vx**2 + vy**2 <= 0:\n        return \"Invalid input\"\n    x1 = px + a*vx/2\n    y1 = py + b*vy/2\n    x2 = px - a*vx/2\n    y2 = py - b*vy/2\n    x3 = px + c*vx/2\n    y3 = py + d*vy/2\n    x4 = px - c*vx/2\n    y4 = py - d*vy/2\n    x5 = px + a*vx/2 + c*vy/2\n    y5 = py + b*vy/2 - d*vx/2\n    x6 = px - a*vx/2 + c*vy/2\n    y6 = py - b*vy/2 - d*vx/2\n    x7 = px + a*vx/2 - c*vy/2\n    y7 = py + b*vy/2 + d*vx/2\n    x8 = px - a*vx/2 - c*vy/2\n    y8 = py - b*vy/2 + d*vx/2\n    return f\"{x1} {y1}\\n{x2} {y2}\\n{x3} {y3}\\n{x4} {y4}\\n{x5} {y5}\\n{x6} {y6}\\n{x7} {y7}\\n{x8} {y8}\""
    },
    {
        "number": 1506,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    f_a = 0\n    M = 0\n    for i in range(n):\n        if a[M] < a[i]:\n            f_a = (f_a + a[M]) % MOD\n            M = i\n    return str((f_a * pow(2, n-1, MOD)) % MOD)"
    },
    {
        "number": 1507,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    doors = stdin.split()[1]\n    guards = [0] * 26\n    for i in range(n):\n        guards[ord(doors[i]) - ord('A')] += 1\n    for i in range(26):\n        if guards[i] > k:\n            return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1508,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    max_value = 0\n    for i in range(n-1):\n        max_value += a[i+1] - a[i]\n    x = a.copy()\n    x.reverse()\n    for i in range(n-1):\n        if x[i] < x[i+1] - 1:\n            x[i+1] = x[i] + 1\n            break\n    x.reverse()\n    return''.join(map(str, x))"
    },
    {
        "number": 1509,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            if a[i-1] <= a[j-1]:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = dp[i][j-1]\n    ans = 0\n    for i in range(1, n+1):\n        for j in range(i, n+1):\n            ans += dp[i][j]\n    return str(ans)"
    },
    {
        "number": 1510,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n\n    # sort the arrays\n    a.sort()\n    b.sort()\n\n    # initialize variables\n    count = 0\n    i = 0\n    j = 0\n\n    # iterate through the arrays\n    while i < n and j < m:\n        if a[i] < b[j]:\n            i += 1\n        elif a[i] > b[j]:\n            j += 1\n        else:\n            i += 1\n            j += 1\n        count += 1\n\n    # check if there are any remaining elements in the arrays\n    while i < n:\n        i += 1\n        count += 1\n    while j < m:\n        j += 1\n        count += 1\n\n    return str(count)"
    },
    {
        "number": 1511,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    instructions = []\n    for i in range(n):\n        instructions.append(list(map(int, stdin.readline().split())))\n    locked_cells = [set() for _ in range(n)]\n    locked_cores = set()\n    for i in range(m):\n        for j in range(n):\n            if instructions[j][i]!= 0:\n                if instructions[j][i] in locked_cells[j]:\n                    locked_cores.add(j)\n                else:\n                    locked_cells[j].add(instructions[j][i])\n    for i in range(n):\n        if i not in locked_cores:\n            print(0)\n        else:\n            print(i+1)\n    return \"\""
    },
    {
        "number": 1512,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    records = 0\n    for i in range(n):\n        for j in range(i):\n            if p[j] < p[i]:\n                records += 1\n    max_records = records\n    max_element = -1\n    for i in range(n):\n        if p[i]!= max_element:\n            new_records = records - (n - i - 1)\n            if new_records > max_records:\n                max_records = new_records\n                max_element = p[i]\n    return str(max_element)"
    },
    {
        "number": 1513,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    broken_segments = list(map(int, stdin.readline().split()))\n    broken_segments.append(m+1)\n    dp = [0] * (m+1)\n    dp[0] = 0\n    for i in range(1, m+1):\n        dp[i] = dp[i-1] + 1\n        for j in range(len(broken_segments)-1):\n            if broken_segments[j] <= i <= broken_segments[j+1]:\n                dp[i] = min(dp[i], dp[broken_segments[j]-1] + i - broken_segments[j])\n    return dp[m]"
    },
    {
        "number": 1514,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b_prime = list(map(int, stdin.readline().strip().split()))\n    c_prime = list(map(int, stdin.readline().strip().split()))\n\n    if len(b_prime)!= n-1 or len(c_prime)!= n-1:\n        return '-1'\n\n    a = [0] * n\n    for i in range(n-1):\n        if b_prime[i] < c_prime[i]:\n            a[i] = b_prime[i]\n            a[i+1] = c_prime[i]\n        else:\n            a[i] = c_prime[i]\n            a[i+1] = b_prime[i]\n\n    if len(set(a))!= n:\n        return '-1'\n\n    return''.join(map(str, a))"
    },
    {
        "number": 1515,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, x = map(int, stdin.split())\n    if x == 1:\n        return \"Impossible\"\n    num = 10**(p-1)\n    for i in range(p-1):\n        num += 10**(p-2-i)\n    num *= x\n    return str(num)"
    },
    {
        "number": 1516,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 998244353\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i][j - 1] * 10 + a[j]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += dp[i][j]\n            ans %= MOD\n    return str(ans)"
    },
    {
        "number": 1517,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 1000000007\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!= j:\n                for k in range(1, n+1):\n                    if k!= i and k!= j:\n                        for l in range(1, n+1):\n                            if l!= i and l!= j and l!= k:\n                                for m in range(1, n+1):\n                                    if m!= i and m!= j and m!= k and m!= l:\n                                        for n1 in range(1, n+1):\n                                            if n1!= i and n1!= j and n1!= k and n1!= l and n1!= m:\n                                                for n2 in range(1, n+1):\n                                                    if n2!= i and n2!= j and n2!= k and n2!= l and n2!= m and n2!= n1:\n                                                        for n3 in range(1, n+1):\n                                                            if n3!= i and n3!= j and n3!= k and n3!= l and n3!= m and n3!= n1 and n3!= n2:\n                                                                for n4 in range(1, n+1):\n                                                                    if n4!= i and n4!= j and n4!= k and n4!= l and n4!= m and n4!= n1 and n4!= n2 and n4!= n3:\n                                                                        for n5 in range(1, n+1):\n                                                                            if n5!= i and n5!= j and n5!= k and n5!= l and n5!= m and n5!= n1 and n5!= n2 and n5!= n3 and n5!= n4:\n                                                                                for n6 in range(1, n+1):\n                                                                                    if n6!= i and n6!= j and n6!= k and n6!= l and n6!= m and n6!= n1 and n6!= n2 and n6!= n3 and n6!= n4 and n6!= n5:\n                                                                                        for n7 in range(1, n+1):\n                                                                                            if n7!= i and n7!= j and n7!= k and n7!= l and n7!= m and n7!= n1 and n7!= n2 and n7!= n3 and n7!= n4 and n7!= n5 and n7!= n6:\n                                                                                                for n8 in range(1, n+1):\n                                                                                                    if n8!= i and n8!= j and n8!= k and n8!= l and n8!= m and n8!= n1 and n8!= n2 and n8!= n3 and n8!= n4 and n8!= n5 and n8!= n6 and n8!= n7:\n                                                                                                        for n9 in range(1, n+1):\n                                                                                                            if n9!= i and n9!= j and n9!= k and n9!= l and n9!= m and n9!= n1 and n9!= n2 and n9!= n3 and n9!= n4 and n9!= n5 and n9!= n6 and n9!= n7 and n9!= n8:\n                                                                                                                for n10 in range(1, n+1):\n                                                                                                                    if n10!= i and n10!= j and n10!= k and n10!= l and n10!= m and n10!= n1 and n10!= n2 and n10!= n3 and n10!= n4 and n10!= n5 and n10!= n6 and n10!= n7 and n10!= n8 and n10!= n9:\n                                                                                                                        for n11 in range(1, n+1):\n                                                                                                                            if n11!= i and n11!= j and n11!= k and n11!= l and n11!= m and n11!= n1 and n11!= n2 and n11!= n3 and n11!= n4 and n11!= n5 and n11!= n6 and n11!= n7 and n11!= n8 and n11!= n9 and n11!= n10:\n                                                                                                                                for n12 in range(1, n+1):\n                                                                                                                                    if n12!= i and n12!= j and n12!= k and n12!= l and n12!= m and n12!= n1 and n12!= n2 and n12!= n3 and"
    },
    {
        "number": 1518,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if is_prime(j-i+1):\n                a[i], a[j-1] = a[j-1], a[i]\n                k += 1\n                if k > 5*n:\n                    return \"Too many operations\"\n    return k, \"\\n\".join(f\"{i+1} {j}\" for i in range(n) for j in range(i+2, n+1) if is_prime(j-i+1))\n\ndef"
    },
    {
        "number": 1519,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L, a = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    l = list(map(int, stdin.split()))\n    t.append(L)\n    l.append(0)\n    t.sort()\n    breaks = 0\n    for i in range(n+1):\n        if t[i] - breaks >= a:\n            breaks += a\n        else:\n            breaks = t[i]\n    return breaks // a"
    },
    {
        "number": 1520,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    product = strings[0]\n    for i in range(1, n):\n        product = multiply(product, strings[i])\n    return beauty(product)\n\ndef"
    },
    {
        "number": 1521,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, n = map(int, stdin.split())\n    hash_table = [None] * p\n    for i in range(n):\n        x = int(stdin.readline())\n        bucket = x % p\n        if hash_table[bucket] is None:\n            hash_table[bucket] = x\n        else:\n            print(i)\n            return\n    print(-1)"
    },
    {
        "number": 1522,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    keys = set()\n    for i in range(1, n * 2, 2):\n        keys.add(s[i])\n    return len(keys)"
    },
    {
        "number": 1523,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    jobs = set(range(1, k+1))\n    for i in range(n):\n        jobs.discard(a[i])\n    if not jobs:\n        return '0'\n    return str(max(b))"
    },
    {
        "number": 1524,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    S = stdin.strip()\n    N = len(S)\n\n    # Initialize variables\n    children = [0] * N\n    children[0] = 1\n    children[N-1] = 1\n\n    # Perform moves\n    for i in range(N):\n        if S[i] == 'L':\n            children[i] = children[i+1]\n        else:\n            children[i] = children[i-1]\n\n    # Print output\n    return''.join(map(str, children))"
    },
    {
        "number": 1525,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, h+1):\n        for j in range(1, w+1):\n            if j == k:\n                count += 1\n    return str(count % 1000000007)"
    },
    {
        "number": 1526,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    count = 0\n    while A!= B!= C:\n        if A < B and A < C:\n            A += 1\n            C += 1\n            count += 1\n        elif B < A and B < C:\n            B += 1\n            C += 1\n            count += 1\n        else:\n            A += 2\n            count += 1\n    return str(count)"
    },
    {
        "number": 1527,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    H, W = map(int, lines[0].split())\n    S = [list(line) for line in lines[1:]]\n\n    # initialize variables\n    visited = [[False] * W for _ in range(H)]\n    queue = [(0, 0)]\n    steps = 0\n\n    # bfs\n    while queue:\n        steps += 1\n        for _ in range(len(queue)):\n            i, j = queue.pop(0)\n            if i == H-1 and j == W-1:\n                return steps\n            for ni, nj in [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]:\n                if 0 <= ni < H and 0 <= nj < W and S[ni][nj] == '.' and not visited[ni][nj]:\n                    visited[ni][nj] = True\n                    queue.append((ni, nj))\n\n    # unreachable\n    return -1"
    },
    {
        "number": 1528,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    patties = 2**(n+1) - 1\n    layers = 2**(n+1) - 1 - x\n    return str(patties - layers)"
    },
    {
        "number": 1529,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        sentence = stdin.readline().strip()\n        if sentence.startswith(\"miao.\") and sentence.endswith(\"lala.\"):\n            print(\"OMG>.< I don't know!\")\n        elif sentence.endswith(\"lala.\"):\n            print(\"Freda's\")\n        elif sentence.startswith(\"miao.\"):\n            print(\"Rainbow's\")\n        else:\n            print(\"OMG>.< I don't know!\")"
    },
    {
        "number": 1531,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    total_appeal = sum(a)\n    k = 0\n    for i in range(n):\n        if a[i] == a[0] or a[i] == a[-1]:\n            k += 1\n    if k == 0:\n        return f\"{total_appeal} 0\"\n    elif k == 1:\n        return f\"{total_appeal} 1\\n{a.index(a[0])+1}\"\n    else:\n        return f\"{total_appeal} {k}\\n{a.index(a[0])+1} {a.index(a[-1])+1}\""
    },
    {
        "number": 1532,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    imperfection = [1] * (n + 1)\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            if imperfection[j] + imperfection[i - j] - 1 > imperfection[i]:\n                imperfection[i] = imperfection[j] + imperfection[i - j] - 1\n    return''.join(map(str, imperfection[2:]))"
    },
    {
        "number": 1533,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = set()\n    for i in range(n):\n        name = stdin.readline().strip().lower()\n        if name in names:\n            return \"YES\"\n        names.add(name)\n    return \"NO\""
    },
    {
        "number": 1534,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list of characters\n    chars = list(stdin)\n    \n    # Initialize variables\n    max_length = 0\n    a_count = 0\n    b_count = 0\n    \n    # Iterate over the characters and count the number of \"a\" and \"b\"\n    for char in chars:\n        if char == 'a':\n            a_count += 1\n        elif char == 'b':\n            b_count += 1\n    \n    # Check if the string is already beautiful\n    if a_count == 0 or b_count == 0:\n        return len(chars)\n    \n    # Iterate over the characters and count the maximum length of the beautiful string\n    for i in range(len(chars)):\n        # Check if the current character is \"a\"\n        if chars[i] == 'a':\n            # Check if the next two characters are \"b\"\n            if i+2 < len(chars) and chars[i+1] == 'b' and chars[i+2] == 'b':\n                # Check if the previous character is \"b\"\n                if i-1 >= 0 and chars[i-1] == 'b':\n                    # Check if the previous two characters are \"a\"\n                    if i-3 >= 0 and chars[i-2] == 'a' and chars[i-3] == 'a':\n                        # Update the maximum length\n                        max_length = max(max_length, i+1)\n    \n    # Return the maximum length\n    return max_length"
    },
    {
        "number": 1535,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x_0, y_0 = map(int, stdin.split())\n    stormtroopers = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        stormtroopers.append((x, y))\n    stormtroopers.sort()\n    shots = 0\n    i = 0\n    while i < n:\n        j = i + 1\n        while j < n and stormtroopers[j][0] == stormtroopers[i][0]:\n            j += 1\n        if j - i > 1:\n            shots += (j - i) // 2\n        i = j\n    return shots"
    },
    {
        "number": 1536,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y, z = map(int, stdin.readline().split())\n        points.append((x, y, z))\n    pairs = []\n    for i in range(n // 2):\n        for j in range(i + 1, n):\n            if not any(\n                (\n                    points[i][0] <= points[k][0] <= points[j][0] or\n                    points[i][0] <= points[j][0] <= points[k][0]\n                ) and (\n                    points[i][1] <= points[k][1] <= points[j][1] or\n                    points[i][1] <= points[j][1] <= points[k][1]\n                ) and (\n                    points[i][2] <= points[k][2] <= points[j][2] or\n                    points[i][2] <= points[j][2] <= points[k][2]\n                )\n                for k in range(n) if k!= i and k!= j\n            ):\n                pairs.append((i + 1, j + 1))\n    return '\\n'.join(' '.join(map(str, pair)) for pair in pairs)"
    },
    {
        "number": 1537,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    board = []\n    for i in range(n):\n        board.append(list(stdin.readline().strip()))\n\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 'B':\n                continue\n            if i < k-1 or i > n-k or j < k-1 or j > n-k:\n                continue\n            for x in range(i-k+1, i+k):\n                for y in range(j-k+1, j+k):\n                    if board[x][y] == 'B':\n                        break\n                else:\n                    count += 1\n    return count"
    },
    {
        "number": 1538,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = 1 + dp[j] for j in range(i) if a[i] < a[j] and dp[j] == 0\n    return max(dp)"
    },
    {
        "number": 1539,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    leg_lengths = list(map(int, stdin.readline().strip().split()))\n    leg_energies = list(map(int, stdin.readline().strip().split()))\n\n    # Find the maximum length of the legs\n    max_length = max(leg_lengths)\n\n    # Count the number of legs of the maximum length\n    max_leg_count = sum(1 for leg_length in leg_lengths if leg_length == max_length)\n\n    # If the table has more than half legs of the maximum length, it is already stable\n    if max_leg_count > n // 2:\n        return 0\n\n    # Calculate the minimum energy required to make the table stable\n    min_energy = 0\n    for leg_length, leg_energy in zip(leg_lengths, leg_energies):\n        if leg_length == max_length:\n            min_energy += leg_energy\n        else:\n            min_energy += leg_energy * (max_length - leg_length)\n\n    return min_energy"
    },
    {
        "number": 1540,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    events = [list(map(int, stdin.split())) for _ in range(k)]\n    notifications = [0] * n\n    for event in events:\n        x, y = event\n        notifications[x-1] += sum(a[x-1])\n        for i in range(n):\n            if a[i][y-1] == 1:\n                notifications[i] += 1\n    return''.join(map(str, notifications))"
    },
    {
        "number": 1541,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    pivot = s.index(\"^\")\n    weights = [int(c) for c in s if c.isdigit()]\n    if len(weights) == 0:\n        return \"balance\"\n    if pivot == 0:\n        return \"left\" if sum(weights) > len(weights) else \"right\"\n    if pivot == len(s) - 1:\n        return \"right\" if sum(weights) > len(weights) else \"left\"\n    if s[pivot-1].isdigit() and s[pivot+1].isdigit():\n        return \"balance\"\n    if s[pivot-1].isdigit():\n        return \"left\" if sum(weights) > len(weights) else \"right\"\n    if s[pivot+1].isdigit():\n        return \"right\" if sum(weights) > len(weights) else \"left\"\n    return \"balance\""
    },
    {
        "number": 1542,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *x = map(int, stdin.split())\n    q = int(stdin.split()[0])\n    m = list(map(int, stdin.split()))\n    dp = [0] * (q+1)\n    for i in range(1, q+1):\n        for j in range(n):\n            if m[i-1] >= x[j]:\n                dp[i] = max(dp[i], dp[i-1]+1)\n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 1543,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cities = []\n    for i in range(n):\n        x, c = stdin.readline().strip().split()\n        cities.append((int(x), c))\n    cities.sort()\n    total_cost = 0\n    for i in range(n):\n        if cities[i][1] == 'B':\n            continue\n        for j in range(i+1, n):\n            if cities[j][1] == 'B':\n                continue\n            if cities[j][0] - cities[i][0] > 1:\n                break\n            total_cost += abs(cities[j][0] - cities[i][0])\n    return str(total_cost)"
    },
    {
        "number": 1544,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return str(dp[n][n])"
    },
    {
        "number": 1545,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * (n+1) for _ in range(26)]\n    dp[ord(s[0])-ord('a')][0] = 1\n    for i in range(1, n):\n        for j in range(26):\n            if a[j] >= i+1:\n                dp[j][i] = dp[j][i-1]\n            if j > 0 and a[j-1] >= i+1:\n                dp[j][i] += dp[j-1][i-1]\n            dp[j][i] %= MOD\n    ans = dp[25][n-1]\n    for i in range(25):\n        ans -= dp[i][n-1]\n        ans %= MOD\n    print(ans)\n    ans = 0\n    for i in range(n):\n        ans = max(ans, dp[ord(s[i])-ord('a')][i])\n    print(ans)\n    ans = n\n    for i in range(26):\n        if dp[i][n-1] > 0:\n            ans = min(ans, n//a[i])\n    print(ans)\n    return \"\""
    },
    {
        "number": 1546,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    pairs = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = {i: [] for i in range(1, n+1)}\n    for a, b in pairs:\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = set()\n    def dfs(node):\n        visited.add(node)\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                dfs(neighbor)\n    for i in range(1, n+1):\n        if i not in visited:\n            dfs(i)\n            if len(visited)!= n:\n                return \"-1\"\n    return \" \".join(map(str, sorted(visited)))"
    },
    {
        "number": 1547,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    table = [[0] * m for _ in range(n)]\n    for _ in range(k):\n        op, i, a = map(int, stdin.readline().split())\n        if op == 1:\n            for j in range(m):\n                table[i-1][j] = a\n        else:\n            for j in range(n):\n                table[j][i-1] = a\n    return '\\n'.join([' '.join(map(str, row)) for row in table])"
    },
    {
        "number": 1548,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n    sticks.sort()\n    max_dist = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if sticks[i] == sticks[j]:\n                continue\n            if sticks[i] == 1 or sticks[j] == 1:\n                max_dist = max(max_dist, sticks[i] + sticks[j])\n            else:\n                max_dist = max(max_dist, sticks[i] + sticks[j] - 1)\n    return str(max_dist**2)"
    },
    {
        "number": 1549,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    res = []\n    for _ in range(q):\n        k = int(stdin.readline())\n        if k <= n:\n            res.append(a[k-1])\n        else:\n            count = [0] * m\n            for i in range(n):\n                count[a[i-1]] += 1\n            min_count = min(count)\n            min_cities = [i for i in range(m) if count[i] == min_count]\n            res.append(min_cities[0])\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 1550,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    digits = stdin.readline().strip()\n    first_button = [int(d) for d in digits]\n    second_button = [int(d) for d in digits]\n    for i in range(n):\n        first_button[i] = (first_button[i] + 1) % 10\n        second_button[i] = (second_button[i] + 1) % 10\n    for i in range(n-1, -1, -1):\n        second_button[i] = (second_button[i] + first_button[i]) % 10\n    return ''.join(str(d) for d in second_button)"
    },
    {
        "number": 1551,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    people = []\n    for i in range(n):\n        x, v, t = map(int, stdin.split())\n        people.append((x, v, t))\n    people.sort()\n    left = 0\n    right = 10**6\n    while left < right:\n        mid = (left + right) // 2\n        if can_reach(people, mid, s):\n            right = mid\n        else:\n            left = mid + 1\n    return str(left)\n\ndef"
    },
    {
        "number": 1552,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1:]))\n    teams = []\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if t[i]!= t[j] and t[i]!= t[k] and t[j]!= t[k]:\n                    teams.append((i+1, j+1, k+1))\n    if not teams:\n        return \"0\"\n    else:\n        return str(len(teams)) + \"\\n\" + \"\\n\".join(\" \".join(map(str, team)) for team in teams)"
    },
    {
        "number": 1553,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort(reverse=True)\n    k = 1\n    while k <= n:\n        if k == 1:\n            if a[0] >= h:\n                return str(k)\n            else:\n                k += 1\n        else:\n            if a[k-1] >= h - a[k-2]:\n                return str(k)\n            else:\n                k += 1\n    return str(n)"
    },
    {
        "number": 1554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # check if there are any segments with two pearls of the same type\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            return \"-1\"\n\n    # find the maximal number of segments\n    k = 0\n    for i in range(1, n):\n        if a[i]!= a[i-1]:\n            k += 1\n\n    # print the segments\n    if k == 0:\n        print(1)\n        print(1, n)\n    else:\n        print(k)\n        for i in range(k):\n            print(i+1, i+2)"
    },
    {
        "number": 1555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(stdin.readline().strip()))\n    # check if it's possible to evaluate all dishes\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \"=\":\n                continue\n            for k in range(i+1, n):\n                if a[k][j] == \"=\":\n                    continue\n                if a[i][j] == \"<\" and a[k][j] == \">\":\n                    return \"No\"\n                if a[i][j] == \">\" and a[k][j] == \"<\":\n                    return \"No\"\n    # evaluate dishes\n    evaluations = [0] * n\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \"=\":\n                continue\n            if a[i][j] == \"<\":\n                evaluations[i] += 1\n            else:\n                evaluations[i] -= 1\n    evaluations2 = [0] * m\n    for i in range(m):\n        for j in range(n):\n            if a[j][i] == \"=\":\n                continue\n            if a[j][i] == \"<\":\n                evaluations2[i] += 1\n            else:\n                evaluations2[i] -= 1\n    # check if evaluations are consistent with feelings\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == \"=\":\n                continue\n            if a[i][j] == \"<\" and evaluations[i] <= evaluations2[j]:\n                return \"No\"\n            if a[i][j] == \">\" and evaluations[i] >= evaluations2[j]:\n                return \"No\"\n    # print evaluations\n    print(\"Yes\")\n    print(\" \".join(map(str, evaluations)))\n    print(\" \".join(map(str, evaluations2)))\n    return \"\""
    },
    {
        "number": 1556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = a.copy()\n    for i in range(k):\n        for j in range(n):\n            if b[j] + x > 0:\n                b[j] += x\n            else:\n                b[j] -= x\n    return''.join(map(str, b))"
    },
    {
        "number": 1557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h1, a1, c1 = map(int, stdin.split()[0:3])\n    h2, a2 = map(int, stdin.split()[3:])\n\n    if h1 <= 0 or h2 <= 0:\n        return \"0\"\n\n    if h1 <= a2:\n        return \"0\"\n\n    if h2 <= a1:\n        return \"1\"\n\n    if h1 <= h2:\n        return \"1\"\n\n    if h1 <= a1 + a2:\n        return \"1\"\n\n    if h1 <= h2 + a1:\n        return \"1\"\n\n    if h1 <= h2 + a1 + a2:\n        return \"1\"\n\n    if h1 <= h2 + a1 + a2 + 1:\n        return \"2\"\n\n    if h1 <= h2 + a1 + a2 + 2:\n        return \"3\"\n\n    if h1 <= h2 + a1 + a2 + 3:\n        return \"4\"\n\n    if h1 <= h2 + a1 + a2 + 4:\n        return \"5\"\n\n    if h1 <= h2 + a1 + a2 + 5:\n        return \"6\"\n\n    if h1 <= h2 + a1 + a2 + 6:\n        return \"7\"\n\n    if h1 <= h2 + a1 + a2 + 7:\n        return \"8\"\n\n    if h1 <= h2 + a1 + a2 + 8:\n        return \"9\"\n\n    if h1 <= h2 + a1 + a2 + 9:\n        return \"10\"\n\n    if h1 <= h2 + a1 + a2 + 10:\n        return \"11\"\n\n    if h1 <= h2 + a1 + a2 + 11:\n        return \"12\"\n\n    if h1 <= h2 + a1 + a2 + 12:\n        return \"13\"\n\n    if h1 <= h2 + a1 + a2 + 13:\n        return \"14\"\n\n    if h1 <= h2 + a1 + a2 + 14:\n        return \"15\"\n\n    if h1 <= h2 + a1 + a2 + 15:\n        return \"16\"\n\n    if h1 <= h2 + a1 + a2 + 16:\n        return \"17\"\n\n    if h1 <= h2 + a1 + a2 + 17:\n        return \"18\"\n\n    if h1 <= h2 + a1 + a2 + 18:\n        return \"19\"\n\n    if h1 <= h2 + a1 + a2 + 19:\n        return \"20\"\n\n    if h1 <= h2 + a1 + a2 + 20:\n        return \"21\"\n\n    if h1 <= h2 + a1 + a2 + 21:\n        return \"22\"\n\n    if h1 <= h2 + a1 + a2 + 22:\n        return \"23\"\n\n    if h1 <= h2 + a1 + a2 + 23:\n        return \"24\"\n\n    if h1 <= h2 + a1 + a2 + 24:\n        return \"25\"\n\n    if h1 <= h2 + a1 + a2 + 25:\n        return \"26\"\n\n    if h1 <= h2 + a1 + a2 + 26:\n        return \"27\"\n\n    if h1 <= h2 + a1 + a2 + 27:\n        return \"28\"\n\n    if h1 <= h2 + a1 + a2 + 28:\n        return \"29\"\n\n    if h1 <= h2 + a1 + a2 + 29:\n        return \"30\"\n\n    if h1 <= h2 + a1 + a2 + 30:\n        return \"31\"\n\n    if h1 <= h2 + a1 + a2 + 31:\n        return \"32\"\n\n    if h1 <= h2 + a1 + a2 + 32:\n        return \"33\"\n\n    if h1 <= h2 + a1 + a2 + 33:\n        return \"34\"\n\n    if h1 <= h2 + a1 + a2 + 34:\n        return \"35\"\n\n    if h1 <= h2 + a1 + a2 + 35:\n        return \"36\"\n\n    if h1 <= h2 + a1 + a2 + 36:\n        return \"37\"\n\n    if h1 <= h2 + a1 + a2 + 37:\n        return \"38\"\n\n    if h1 <="
    },
    {
        "number": 1558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, avg = map(int, stdin.readline().split())\n    exams = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        exams.append((a, b))\n    exams.sort(key=lambda x: x[0])\n    count = 0\n    for i in range(n):\n        if exams[i][0] > r:\n            continue\n        count += exams[i][1]\n        if count >= avg:\n            return count\n    return count"
    },
    {
        "number": 1559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, A = map(int, stdin.split())\n    X = A + L - 1\n    while True:\n        if str(X)[-L:] == str(X)[:L]:\n            return str(X)\n        X += 1"
    },
    {
        "number": 1560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cockroaches = stdin.split()[1]\n    count = 0\n    for i in range(n-1):\n        if cockroaches[i] == cockroaches[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 1561,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(stdin.readline().strip()))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] == '.':\n                count += 1\n                if count == k:\n                    return count\n                for x in range(i-1, -1, -1):\n                    if matrix[x][j] == '.':\n                        count += 1\n                        if count == k:\n                            return count\n                    else:\n                        break\n                for x in range(i+1, n):\n                    if matrix[x][j] == '.':\n                        count += 1\n                        if count == k:\n                            return count\n                    else:\n                        break\n                for x in range(j-1, -1, -1):\n                    if matrix[i][x] == '.':\n                        count += 1\n                        if count == k:\n                            return count\n                    else:\n                        break\n                for x in range(j+1, m):\n                    if matrix[i][x] == '.':\n                        count += 1\n                        if count == k:\n                            return count\n                    else:\n                        break\n    return count"
    },
    {
        "number": 1562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, q = map(int, stdin.split())\n    treasures = []\n    safe_cols = set(map(int, stdin.split()))\n    for i in range(k):\n        r, c = map(int, stdin.readline().split())\n        treasures.append((r, c))\n    visited = set()\n    queue = [(1, 1, 0)]\n    while queue:\n        r, c, moves = queue.pop(0)\n        if (r, c) in visited:\n            continue\n        visited.add((r, c))\n        if (r, c) in treasures:\n            treasures.remove((r, c))\n            if not treasures:\n                return moves + 1\n        if c in safe_cols:\n            queue.append((r, c+1, moves+1))\n            queue.append((r+1, c, moves+1))\n        else:\n            queue.append((r, c+1, moves+1))\n    return -1"
    },
    {
        "number": 1563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    colors = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    max_q = 0\n    max_color = -1\n    for k in range(1, 10001):\n        q = 0\n        for i in range(1, n+1):\n            if colors[i-1] == k:\n                for j in graph[i]:\n                    if colors[j-1]!= k:\n                        q += 1\n        if q > max_q:\n            max_q = q\n            max_color = k\n    return str(max_color)"
    },
    {
        "number": 1564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return \"0\"\n\n    count = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            count += 1\n\n    if count % 2 == 1:\n        return \"-1\"\n\n    operations = []\n    for i in range(n):\n        if s[i]!= t[i]:\n            operations.append((i, s.index(t[i])))\n\n    operations.sort(key=lambda x: x[1])\n\n    k = count // 2\n    result = []\n    for i in range(k):\n        result.append(str(operations[i][0]) + \" \" + str(operations[i][1]))\n\n    return str(k) + \"\\n\" + \"\\n\".join(result)\n"
    },
    {
        "number": 1565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, n = map(int, stdin.split())\n    n_str = str(n)\n    if len(n_str) == l:\n        return str(n)\n    else:\n        for i in range(1, l):\n            if n_str[:i]!= '0' * i:\n                return str(n - int(n_str[:i])) + n_str[:i]\n        return str(n - int(n_str[:l-1])) + n_str[:l-1]"
    },
    {
        "number": 1566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    levels = [list(map(int, line)) for line in lines[1:]]\n\n    # Check if there exists a single non-zero area rectangular lair\n    for x1 in range(n):\n        for y1 in range(n):\n            for x2 in range(x1, n):\n                for y2 in range(y1, n):\n                    # Check if lair is rectangular and non-zero area\n                    if x1!= x2 and y1!= y2 and levels[x1][y1]!= 0 and levels[x1][y2]!= 0 and levels[x2][y1]!= 0 and levels[x2][y2]!= 0:\n                        # Check if lair is contained inside of the grid\n                        if x1 >= 0 and x2 < n and y1 >= 0 and y2 < n:\n                            # Check if lair results in the levels of Zombie Contamination as reported in the input\n                            if levels[x1][y1] == levels[x1][y2] == levels[x2][y1] == levels[x2][y2]:\n                                return 'Yes'\n\n    return 'No'"
    },
    {
        "number": 1567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for l in range(j+1, n+1):\n                if l > k:\n                    break\n                if i*i + j*j == l*l:\n                    count += 1\n    return str(count % 998244353)"
    },
    {
        "number": 1568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B, C, T = map(int, stdin.split())\n    t = list(map(int, stdin.readline().split()))\n    t.sort()\n    k = 0\n    for i in range(n):\n        k += (T - t[i]) * C\n        if k < 0:\n            k = 0\n        A -= B\n        if A < 0:\n            A = 0\n        k += A\n    return k"
    },
    {
        "number": 1569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(m)]\n    roads = [(x-1, y-1, z) for x, y, z in roads]\n    graph = [[] for _ in range(n)]\n    for x, y, z in roads:\n        graph[x].append((y, z))\n        graph[y].append((x, z))\n    visited = [False] * n\n    visited[0] = True\n    queue = [(0, 0)]\n    min_dist = [float('inf')] * n\n    min_dist[0] = 0\n    while queue:\n        curr, dist = queue.pop(0)\n        for next, is_working in graph[curr]:\n            if not visited[next]:\n                visited[next] = True\n                min_dist[next] = min(min_dist[next], dist + 1)\n                queue.append((next, dist + 1))\n    path = [0]\n    curr = 0\n    for i in range(1, n):\n        if min_dist[i] == min_dist[curr] + 1:\n            path.append(i)\n            curr = i\n    path.append(n-1)\n    path = [x+1 for x in path]\n    k = 0\n    affected = []\n    for x, y, z in roads:\n        if z == 0:\n            if x in path and y in path:\n                affected.append((x+1, y+1, 0))\n                k += 1\n            elif x in path:\n                affected.append((x+1, y+1, 1))\n                k += 1\n            elif y in path:\n                affected.append((x+1, y+1, 1))\n                k += 1\n        elif z == 1:\n            if x in path and y in path:\n                affected.append((x+1, y+1, 1))\n                k += 1\n            elif x in path:\n                affected.append((x+1, y+1, 0))\n                k += 1\n            elif y in path:\n                affected.append((x+1, y+1, 0))\n                k += 1\n    return f\"{k}\\n\" + \"\\n\".join(f\"{x[0]} {x[1]} {x[2]}\" for x in affected)"
    },
    {
        "number": 1570,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n, w = map(int, stdin.split())\n    if w > n:\n        return 0\n    else:\n        return (w-1)*k + min(n-w*k, k)"
    },
    {
        "number": 1571,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    S = stdin.readline().strip()\n    T = stdin.readline().strip()\n    MOD = 998244353\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if S[i-1] == T[j-1]:\n                dp[i][j] = (dp[i-1][j-1] + dp[i-1][j] + dp[i][j-1]) % MOD\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][m]"
    },
    {
        "number": 1572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_len = 0\n    l = 0\n    r = 0\n\n    # Loop through array\n    for i in range(n):\n        # Check if current segment is good\n        if i >= 2 and a[i] == a[i-1] - 1 + a[i-2]:\n            # Update max_len and l, r\n            if r - l + 1 > max_len:\n                max_len = r - l + 1\n                l = i - 2\n                r = i\n        # Update r\n        r = i\n\n    # Check if last segment is good\n    if n >= 2 and a[n-1] == a[n-2] - 1 + a[n-3]:\n        # Update max_len and l, r\n        if r - l + 1 > max_len:\n            max_len = r - l + 1\n            l = n - 3\n            r = n - 1\n\n    # Return max_len\n    return max_len"
    },
    {
        "number": 1573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().split())\n    friends = []\n    for i in range(n):\n        m, s = map(int, stdin.readline().split())\n        friends.append((m, s))\n    friends.sort(key=lambda x: x[0], reverse=True)\n    total_friendship = 0\n    for i in range(n):\n        if friends[i][0] - friends[0][0] >= d:\n            total_friendship += friends[i][1]\n    return str(total_friendship)"
    },
    {
        "number": 1574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = set()\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        pairs.add((a, b))\n        pairs.add((b, a))\n    musketeers = set(range(1, n+1))\n    for pair in pairs:\n        if pair[0] in musketeers:\n            musketeers.remove(pair[0])\n        if pair[1] in musketeers:\n            musketeers.remove(pair[1])\n    if len(musketeers) < 3:\n        return \"-1\"\n    else:\n        return sum(musketeers)"
    },
    {
        "number": 1575,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t_s, t_f, t = map(int, stdin.split())\n    n = int(stdin.readline())\n    arrival_times = list(map(int, stdin.readline().split()))\n    arrival_times.sort()\n    if arrival_times[0] < t_s:\n        return str(arrival_times[0])\n    if arrival_times[-1] > t_f:\n        return str(arrival_times[-1])\n    if arrival_times[0] == t_s:\n        return str(arrival_times[0])\n    if arrival_times[-1] == t_f:\n        return str(arrival_times[-1])\n    if arrival_times[0] > t_s:\n        return str(arrival_times[0])\n    if arrival_times[-1] < t_f:\n        return str(arrival_times[-1])\n    if arrival_times[0] < t_s:\n        return str(arrival_times[0])\n    if arrival_times[-1] > t_f:\n        return str(arrival_times[-1])\n    return str(arrival_times[0])"
    },
    {
        "number": 1576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = stdin.strip()\n    n = len(t)\n    s = \"\"\n    for i in range(n):\n        s += t[i]\n        if i < n-1:\n            s += t[i+1]\n    return s"
    },
    {
        "number": 1577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    anton_wins = s.count('A')\n    danik_wins = s.count('D')\n    if anton_wins > danik_wins:\n        return \"Anton\"\n    elif danik_wins > anton_wins:\n        return \"Danik\"\n    else:\n        return \"Friendship\""
    },
    {
        "number": 1578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    max_m = 0\n    for i in range(1, n+1):\n        max_m = (max_m + i) % n\n    return str(max_m)"
    },
    {
        "number": 1579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    dots = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        dots.append((x, y))\n    max_operations = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    a, b, c, d = dots[i][0], dots[i][1], dots[j][0], dots[j][1]\n                    if a == c or b == d:\n                        continue\n                    if a == d or b == c:\n                        continue\n                    if (a, b) in [(dots[k][0], dots[k][1]), (dots[l][0], dots[l][1])]:\n                        continue\n                    if (a, d) in [(dots[k][0], dots[k][1]), (dots[l][0], dots[l][1])]:\n                        continue\n                    if (c, b) in [(dots[k][0], dots[k][1]), (dots[l][0], dots[l][1])]:\n                        continue\n                    if (c, d) in [(dots[k][0], dots[k][1]), (dots[l][0], dots[l][1])]:\n                        continue\n                    max_operations += 1\n    return str(max_operations)"
    },
    {
        "number": 1580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    Xs, Ys, Zs = [], [], []\n    for _ in range(M):\n        x, y, z = map(int, stdin.split())\n        Xs.append(x)\n        Ys.append(y)\n        Zs.append(z)\n\n    # Initialize variables\n    costs = [0] * N\n    visited = [False] * N\n\n    # DFS to find all possible solutions\n    def dfs(i, cost):\n        if i == N:\n            return True\n        for j in range(N):\n            if not visited[j] and (j == Xs[i-1] or j == Ys[i-1]):\n                visited[j] = True\n                costs[j] = cost + 1\n                if dfs(i+1, cost+1):\n                    return True\n                visited[j] = False\n                costs[j] = 0\n        return False\n\n    # Find all possible solutions\n    dfs(1, 0)\n\n    # Check if all solutions satisfy the conditions\n    for i in range(N):\n        if costs[i] % 2 == 1:\n            return \"No solution\"\n\n    # Compute minimum cost\n    min_cost = sum(costs)\n    for i in range(M):\n        x, y, z = Xs[i], Ys[i], Zs[i]\n        if costs[x-1] + costs[y-1] + z!= costs[x-1] + costs[y-1] + z:\n            return \"No solution\"\n        min_cost -= 1\n\n    return str(min_cost)"
    },
    {
        "number": 1581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(k+1):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n            if j >= 2 and i-j >= 1:\n                dp[i][j] = (dp[i][j] - dp[i-j-1][j-2]) % MOD\n    return dp[n][k]"
    },
    {
        "number": 1582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if str(i)[-1] == str(j)[0] and str(i)[0] == str(j)[-1]:\n                count += 1\n    return count"
    },
    {
        "number": 1583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x = map(int, stdin.split())\n    max_angle = 90\n    while True:\n        height = x / (a ** 2)\n        if height > b:\n            return str(max_angle)\n        max_angle -= 1"
    },
    {
        "number": 1584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    sticks = list(map(int, stdin.readline().strip().split()))\n\n    # Sort sticks in ascending order\n    sticks.sort()\n\n    # Count number of triangles\n    count = 0\n    for i in range(N-2):\n        for j in range(i+1, N-1):\n            for k in range(j+1, N):\n                if sticks[i] < sticks[j] + sticks[k]:\n                    if sticks[j] < sticks[k] + sticks[i]:\n                        if sticks[k] < sticks[i] + sticks[j]:\n                            count += 1\n\n    return str(count)"
    },
    {
        "number": 1585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y = map(int, stdin.split())\n    if x > y:\n        x, y = y, x\n    if x == 1:\n        return \"1\"\n    if y == 1:\n        return \"1\"\n    if x == 2:\n        return \"2\"\n    if y == 2:\n        return \"2\"\n    if x == 3:\n        return \"3\"\n    if y == 3:\n        return \"3\"\n    if x == 4:\n        return \"4\"\n    if y == 4:\n        return \"4\"\n    if x == 5:\n        return \"5\"\n    if y == 5:\n        return \"5\"\n    if x == 6:\n        return \"6\"\n    if y == 6:\n        return \"6\"\n    if x == 7:\n        return \"7\"\n    if y == 7:\n        return \"7\"\n    if x == 8:\n        return \"8\"\n    if y == 8:\n        return \"8\"\n    if x == 9:\n        return \"9\"\n    if y == 9:\n        return \"9\"\n    if x == 10:\n        return \"10\"\n    if y == 10:\n        return \"10\"\n    if x == 11:\n        return \"11\"\n    if y == 11:\n        return \"11\"\n    if x == 12:\n        return \"12\"\n    if y == 12:\n        return \"12\"\n    if x == 13:\n        return \"13\"\n    if y == 13:\n        return \"13\"\n    if x == 14:\n        return \"14\"\n    if y == 14:\n        return \"14\"\n    if x == 15:\n        return \"15\"\n    if y == 15:\n        return \"15\"\n    if x == 16:\n        return \"16\"\n    if y == 16:\n        return \"16\"\n    if x == 17:\n        return \"17\"\n    if y == 17:\n        return \"17\"\n    if x == 18:\n        return \"18\"\n    if y == 18:\n        return \"18\"\n    if x == 19:\n        return \"19\"\n    if y == 19:\n        return \"19\"\n    if x == 20:\n        return \"20\"\n    if y == 20:\n        return \"20\"\n    if x == 21:\n        return \"21\"\n    if y == 21:\n        return \"21\"\n    if x == 22:\n        return \"22\"\n    if y == 22:\n        return \"22\"\n    if x == 23:\n        return \"23\"\n    if y == 23:\n        return \"23\"\n    if x == 24:\n        return \"24\"\n    if y == 24:\n        return \"24\"\n    if x == 25:\n        return \"25\"\n    if y == 25:\n        return \"25\"\n    if x == 26:\n        return \"26\"\n    if y == 26:\n        return \"26\"\n    if x == 27:\n        return \"27\"\n    if y == 27:\n        return \"27\"\n    if x == 28:\n        return \"28\"\n    if y == 28:\n        return \"28\"\n    if x == 29:\n        return \"29\"\n    if y == 29:\n        return \"29\"\n    if x == 30:\n        return \"30\"\n    if y == 30:\n        return \"30\"\n    if x == 31:\n        return \"31\"\n    if y == 31:\n        return \"31\"\n    if x == 32:\n        return \"32\"\n    if y == 32:\n        return \"32\"\n    if x == 33:\n        return \"33\"\n    if y == 33:\n        return \"33\"\n    if x == 34:\n        return \"34\"\n    if y == 34:\n        return \"34\"\n    if x == 35:\n        return \"35\"\n    if y == 35:\n        return \"35\"\n    if x == 36:\n        return \"36\"\n    if y == 36:\n        return \"36\"\n    if x == 37:\n        return \"37\"\n    if y == 37:\n        return \""
    },
    {
        "number": 1586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n >= 5:\n        n //= 5\n        count += n\n    return count"
    },
    {
        "number": 1587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    stones = stdin.readline().strip()\n    red_stones = [i for i in range(n) if stones[i] == 'R']\n    white_stones = [i for i in range(n) if stones[i] == 'W']\n    min_ops = 0\n    for i in range(n):\n        if i in red_stones and i-1 in white_stones:\n            min_ops += 1\n            white_stones.remove(i-1)\n        if i in white_stones and i-1 in red_stones:\n            min_ops += 1\n            red_stones.remove(i-1)\n    return str(min_ops)"
    },
    {
        "number": 1588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    X = set(map(int, stdin.split()[1:]))\n    m = 1000000 - n\n    Y = set(range(1, m+1)) - X\n    return f\"{len(Y)}\\n{' '.join(map(str, Y))}\""
    },
    {
        "number": 1589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    windows = []\n    for i in range(n):\n        windows.append(list(map(int, stdin.readline().strip())))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            flat_windows = [windows[i][2*j-1], windows[i][2*j]]\n            if flat_windows[0] == 1 or flat_windows[1] == 1:\n                count += 1\n    return count"
    },
    {
        "number": 1590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = dp[i][j-1] + a[j]\n    ans = 0\n    for i in range(n):\n        for j in range(i, n):\n            ans += dp[i][j] * (j - i + 1)\n            ans %= MOD\n    return str(ans)"
    },
    {
        "number": 1591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    sets = [0] * k\n    for i in a:\n        sets[i-1] += 1\n    sets = [i//2 for i in sets]\n    return str(max(sets))"
    },
    {
        "number": 1592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    tasks = []\n    for i in range(n):\n        t, c = map(int, stdin.split()[1:])\n        tasks.append((t, c))\n    tasks.sort()\n    queue = []\n    last_sent = 0\n    max_queue_size = 0\n    for t, c in tasks:\n        while queue and queue[0] <= t:\n            queue.pop(0)\n        queue.extend([t+i for i in range(c)])\n        max_queue_size = max(max_queue_size, len(queue))\n        if queue:\n            last_sent = t + c - 1\n    return f\"{last_sent} {max_queue_size}\""
    },
    {
        "number": 1593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    locs = []\n    for i in range(n):\n        x, y, k = map(int, stdin.split())\n        locs.append((x, y, k))\n    locs.sort(key=lambda x: x[2])\n    if locs[-1][2] >= s:\n        return \"-1\"\n    r = 0\n    for x, y, k in locs:\n        if k >= s:\n            return \"-1\"\n        r = max(r, (x**2 + y**2)**0.5)\n    return str(r)"
    },
    {
        "number": 1594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        c, t = map(int, stdin.split())\n        songs.append((c, t))\n    moments = list(map(int, stdin.split()))\n    result = []\n    for moment in moments:\n        total_time = 0\n        for i in range(n):\n            c, t = songs[i]\n            total_time += c * t\n            if total_time >= moment:\n                result.append(i+1)\n                break\n    return''.join(map(str, result))"
    },
    {
        "number": 1595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    sum, limit = map(int, stdin.split())\n    if sum > limit:\n        return \"-1\"\n    n = 0\n    while (1 << n) <= limit:\n        n += 1\n    if sum!= (1 << n) - 1:\n        return \"-1\"\n    ans = []\n    for i in range(1, limit + 1):\n        if (1 << i) & sum:\n            ans.append(i)\n    return str(len(ans)) + \"\\n\" + \" \".join(map(str, ans))"
    },
    {
        "number": 1596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i):\n            for k in range(j):\n                for l in range(k):\n                    for m in range(l):\n                        for o in range(m):\n                            for p in range(o):\n                                if (i-j-k-l-m-o-p)%3 == 0:\n                                    count += 1\n    return count % MOD"
    },
    {
        "number": 1597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = [stdin.readline().strip() for _ in range(n)]\n    pseudonyms = [stdin.readline().strip() for _ in range(n)]\n\n    # calculate lcp for all pairs of names and pseudonyms\n    lcp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            lcp[i][j] = len(set(names[i]).intersection(set(pseudonyms[j])))\n\n    # find the maximum quality of matching\n    max_quality = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                max_quality += lcp[i][j]\n\n    # find the optimal matching\n    matching = [-1] * n\n    for i in range(n):\n        max_lcp = 0\n        for j in range(n):\n            if i!= j and lcp[i][j] > max_lcp:\n                max_lcp = lcp[i][j]\n                matching[i] = j\n\n    # print the result\n    print(max_quality)\n    for i in range(n):\n        print(i+1, matching[i]+1)\n\n    return \"\""
    },
    {
        "number": 1598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    s = stdin\n    t = ''\n    for i in range(n):\n        if s[i] == '0':\n            t += '1'\n        else:\n            t += '0'\n    return t"
    },
    {
        "number": 1599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    m = int(input())\n    ans = []\n    for _ in range(m):\n        l, r = map(int, input().split())\n        count = 0\n        for i in range(l-1, r):\n            if s[i] == \".\":\n                count += 1\n        ans.append(count)\n    return \"\\n\".join(map(str, ans))"
    },
    {
        "number": 1600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    blocks = 1\n    max_height = heights[0]\n    for i in range(1, n):\n        if heights[i] > max_height + 1:\n            blocks += 1\n            max_height = heights[i]\n    return blocks"
    },
    {
        "number": 1601,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    points = []\n    for i in range(n):\n        x, y, z = map(int, stdin.readline().split())\n        points.append((x, y, z))\n    pairs = []\n    for i in range(n // 2):\n        for j in range(i + 1, n):\n            if not any(\n                (\n                    points[i][0] <= points[k][0] <= points[j][0] or\n                    points[j][0] <= points[k][0] <= points[i][0]\n                ) and (\n                    points[i][1] <= points[k][1] <= points[j][1] or\n                    points[j][1] <= points[k][1] <= points[i][1]\n                ) and (\n                    points[i][2] <= points[k][2] <= points[j][2] or\n                    points[j][2] <= points[k][2] <= points[i][2]\n                )\n                for k in range(n) if k!= i and k!= j\n            ):\n                pairs.append((i + 1, j + 1))\n    return '\\n'.join(' '.join(map(str, pair)) for pair in pairs)"
    },
    {
        "number": 1602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    max_val = -float('inf')\n    max_arr = []\n    for i in range(n):\n        for j in range(i+1, n):\n            val = f(f(arr[i], arr[j]), arr[n-1])\n            if val > max_val:\n                max_val = val\n                max_arr = [arr[i], arr[j]] + arr[:i] + arr[i+1:j] + arr[j+1:n-1] + [arr[n-1]]\n    return''.join(map(str, max_arr))\n\ndef"
    },
    {
        "number": 1603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *stones = map(int, stdin.split())\n    m = int(stdin.readline())\n    for _ in range(m):\n        type, l, r = map(int, stdin.readline().split())\n        if type == 1:\n            stones_sorted = sorted(stones[l-1:r])\n            print(sum(stones_sorted))\n        else:\n            stones_sorted = sorted(stones)\n            print(sum(stones_sorted[l-1:r]))\n    return \"\""
    },
    {
        "number": 1604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    lamps = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        lamps.append((l, r))\n    lamps.sort()\n    count = 0\n    for i in range(n - k + 1):\n        if lamps[i][1] > lamps[i + k - 1][0]:\n            count += 1\n    return str(count % 998244353)"
    },
    {
        "number": 1605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    count_even = 0\n    count_odd = 0\n    for i in range(n):\n        if i == 0 or stdin[i]!= stdin[i-1]:\n            for j in range(i+2, n+1, 2):\n                if j == n or stdin[j]!= stdin[j-1]:\n                    substring = stdin[i:j]\n                    if substring == substring[::-1]:\n                        if j-i == 2:\n                            count_even += 1\n                        else:\n                            count_odd += 1\n    return f\"{count_even} {count_odd}\""
    },
    {
        "number": 1606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    A = [[int(x) for x in stdin.readline().split()] for _ in range(n)]\n    ans = []\n    for _ in range(q):\n        t, i = map(int, stdin.readline().split())\n        if t == 1:\n            A[i-1] = [1 - x for x in A[i-1]]\n        elif t == 2:\n            A = [[1 - A[j][i-1] for j in range(n)] for i in range(n)]\n        else:\n            ans.append(sum(A[i-1][j]*A[j][i-1] for j in range(n)))\n    return ''.join(str(x) for x in ans)"
    },
    {
        "number": 1607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    dp = [[0] * (1 << n) for _ in range(n)]\n    dp[0][1] = 1\n    dp[1][3] = 1\n    for i in range(2, n):\n        for j in range(1 << n):\n            for k in range(n):\n                if j & (1 << k):\n                    continue\n                if k == 0 or k == n - 1:\n                    dp[i][j] += dp[i - 1][j]\n                else:\n                    dp[i][j] += dp[i - 1][j] + dp[i - 1][j ^ (1 << k)]\n    return dp[n - 1][(1 << n) - 1] % 998244353"
    },
    {
        "number": 1608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if a[i] == a[i+1]:\n            dp[i][i+1] = 1\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i+k\n            if a[i] == a[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = (dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1]) % MOD\n    return dp[0][n-1]"
    },
    {
        "number": 1609,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    nums.sort()\n    count = 0\n    for i in range(n):\n        if nums[i]!= i+1:\n            count += 1\n            nums[i] = i+1\n    if count == 0:\n        return''.join(map(str, nums))\n    else:\n        return''.join(map(str, nums))"
    },
    {
        "number": 1610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(range(1, n+1))\n    for i in range(k):\n        p[i], p[i+1] = p[i+1], p[i]\n    return''.join(map(str, p))"
    },
    {
        "number": 1611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n    lengths.sort()\n    z = 1\n    for i in range(n):\n        if lengths[i] > z:\n            return str(z)\n        z += lengths[i]\n    return str(z)"
    },
    {
        "number": 1612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        m, *nums = map(int, stdin.readline().strip().split())\n        nums = set(nums)\n        if len(nums) == m:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 1614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    width = 0\n    for i in range(n):\n        if a[i] > h:\n            width += 2\n        else:\n            width += 1\n    return width"
    },
    {
        "number": 1615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        segments.append((l, r))\n    segments.sort()\n    ans = 0\n    for i in range(n):\n        l, r = segments[i]\n        if l % k == 0:\n            ans += 1\n        else:\n            ans += k - l % k\n        if r % k == 0:\n            ans += 1\n        else:\n            ans += k - r % k\n    return str(ans)"
    },
    {
        "number": 1616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n    for i in range(n):\n        if dp[i] == 1:\n            continue\n        for j in range(i):\n            if a[i] % a[j] == 0:\n                dp[i] = min(dp[i], dp[j] + 1)\n    for i in range(n):\n        if dp[i] == 1:\n            return \"-1\"\n    return str(max(dp))"
    },
    {
        "number": 1617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fun_values = []\n    for k in range(1, n+1):\n        fun_value = 0\n        current_id = 1\n        for i in range(k):\n            next_id = (current_id + k - 1) % n + 1\n            fun_value += next_id\n            current_id = next_id\n        fun_values.append(fun_value)\n    return''.join(map(str, sorted(fun_values)))"
    },
    {
        "number": 1618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 1619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    polygon1 = []\n    for i in range(n):\n        x, y, z = map(int, stdin.readline().strip().split())\n        polygon1.append((x, y, z))\n    m = int(stdin.readline().strip())\n    polygon2 = []\n    for i in range(m):\n        x, y, z = map(int, stdin.readline().strip().split())\n        polygon2.append((x, y, z))\n\n    # check if polygons are well-connected\n    def cross_product(a, b):\n        return a[0] * b[1] - a[1] * b[0]\n\n    def dot_product(a, b):\n        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]\n\n    def area(polygon):\n        n = len(polygon)\n        a = 0\n        for i in range(n):\n            j = (i + 1) % n\n            a += cross_product(polygon[i], polygon[j])\n        return abs(a) / 2\n\n    def is_well_connected(polygon1, polygon2):\n        a1 = area(polygon1)\n        a2 = area(polygon2)\n        if a1 == 0 or a2 == 0:\n            return False\n        for i in range(len(polygon1)):\n            for j in range(len(polygon2)):\n                if dot_product(polygon1[i], polygon2[j]) == 0:\n                    continue\n                if cross_product(polygon1[i], polygon2[j]) == 0:\n                    continue\n                if cross_product(polygon1[i], polygon2[(j + 1) % len(polygon2)]) == 0:\n                    continue\n                if cross_product(polygon1[(i + 1) % len(polygon1)], polygon2[j]) == 0:\n                    continue\n                return False\n        return True\n\n    return \"YES\" if is_well_connected(polygon1, polygon2) else \"NO\""
    },
    {
        "number": 1620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    abc = ['a', 'b', 'c']\n    res = []\n    for i in range(n):\n        res.append(abc[i % 3])\n    return ''.join(res)"
    },
    {
        "number": 1621,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.split()\n    w = list(map(int, stdin.split()))\n    n = len(s)\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(n):\n        for j in range(k+1):\n            if j == 0:\n                dp[j][i+1] = 0\n            else:\n                dp[j][i+1] = max(dp[j][i], dp[j-1][i] + w[ord(s[i])-ord('a')])\n    return dp[k][n]"
    },
    {
        "number": 1622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        t, x, y = map(int, stdin.split())\n        if t == 1:\n            graph[x].append(y)\n        elif t == 2:\n            graph[x].append(n+i)\n        else:\n            x, i = map(int, stdin.split())\n            if n+i in graph[x]:\n                return \"YES\"\n            else:\n                return \"NO\"\n    return \"NO\""
    },
    {
        "number": 1623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    if l > r:\n        l, r = r, l\n    if l == r:\n        return str(l) + \" \" + str(l * n)\n    if l == 1:\n        return \"1 \" + str(2 * r * (r + 1) // 2)\n    if r == n:\n        return str(n * (n + 1) // 2) + \" \" + str(n * (n + 1) * (2 * n + 1) // 6)\n    if l == 2:\n        return \"2 \" + str(2 * r * (r + 1) // 2 + r + 1)\n    if r == n - 1:\n        return str(n * (n + 1) // 2 - 1) + \" \" + str(n * (n + 1) * (2 * n + 1) // 6 + n * (n + 1) // 2 - 1)\n    return \"0 0\""
    },
    {
        "number": 1624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    m = n // 2\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(i, n+1, 2):\n            dp[i][j] = float('inf')\n            for k in range(i, j, 2):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + sum(a[i-1:j:2]))\n    return str(dp[1][n])"
    },
    {
        "number": 1625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    m = max(nums)\n    if n == 0:\n        return str(m)\n    else:\n        sub_matrix_size = 2**(n-1)\n        sub_matrix_beauty = sum(nums)\n        for i in range(sub_matrix_size):\n            for j in range(sub_matrix_size):\n                sub_matrix = [nums[k] for k in range(i*sub_matrix_size+j, len(nums), sub_matrix_size**2)]\n                sub_matrix_beauty += max(sub_matrix)\n        return str(sub_matrix_beauty)"
    },
    {
        "number": 1626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(n // k):\n        block = [int(x) for x in stdin.readline().split()]\n        if block[0]!= b[i]:\n            continue\n        if sum(block) % a[i]!= 0:\n            continue\n        count += 1\n    return count % MOD"
    },
    {
        "number": 1627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    ans = []\n    for i in range(n):\n        if i == 0 or a[i]!= a[i-1]:\n            l = i\n            r = i\n            while r < n-1 and a[r+1] == a[i]:\n                r += 1\n            ans.append((l, r))\n    return '\\n'.join(f'{l} {r}' for l, r in ans)"
    },
    {
        "number": 1628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin\n    while True:\n        x_index = s.find('x')\n        y_index = s.find('y')\n        if x_index == -1 or y_index == -1:\n            break\n        if x_index < y_index:\n            s = s[:x_index] + 'y' + s[x_index+1:y_index] + 'x' + s[y_index+1:]\n        else:\n            s = s[:y_index] + 'x' + s[y_index+1:x_index] + 'y' + s[x_index+1:]\n    while True:\n        x_index = s.find('x')\n        y_index = s.find('y')\n        if x_index == -1 or y_index == -1:\n            break\n        if x_index < y_index:\n            s = s[:x_index] + s[x_index+1:y_index] + s[y_index+1:]\n        else:\n            s = s[:y_index] + s[y_index+1:x_index] + s[x_index+1:]\n    return s"
    },
    {
        "number": 1629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    b[x-1] = a[x-1]\n    for i in range(x-2, -1, -1):\n        b[i] = a[i] + b[i+1]\n    for i in range(x, n):\n        b[i] = b[i-1]\n    return''.join(map(str, b))"
    },
    {
        "number": 1630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    clubs = []\n    for i in range(n):\n        club_name, hometown_name = stdin.readline().strip().split()\n        clubs.append((club_name, hometown_name))\n    short_names = set()\n    for club_name, hometown_name in clubs:\n        if len(club_name) < 3:\n            return \"NO\"\n        if club_name[:3] in short_names:\n            return \"NO\"\n        if club_name[0] == club_name[1]:\n            short_name = club_name[:2] + club_name[0]\n        else:\n            short_name = club_name[:2] + club_name[0]\n        if short_name in short_names:\n            return \"NO\"\n        short_names.add(short_name)\n    print(\"YES\")\n    for club_name, hometown_name in clubs:\n        if club_name[:3] in short_names:\n            print(club_name[:3])\n        else:\n            if club_name[0] == club_name[1]:\n                short_name = club_name[:2] + club_name[0]\n            else:\n                short_name = club_name[:2] + club_name[0]\n            print(short_name)\n    return \"\""
    },
    {
        "number": 1631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = [stdin.readline().strip() for _ in range(n)]\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    for i in range(len(alphabet)):\n        modified_alphabet = alphabet[i:] + alphabet[:i]\n        if all(sorted(name) == sorted(name, key=lambda x: modified_alphabet.index(x)) for name in names):\n            return ''.join(modified_alphabet)\n    return 'Impossible'"
    },
    {
        "number": 1632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    if a[0] == a[1] == a[2]:\n        return \"0.0000000000\"\n    elif a[0] == a[1]:\n        return \"0.5000000000\"\n    elif a[0] == a[2]:\n        return \"0.3333333333\"\n    elif a[1] == a[2]:\n        return \"0.1666666667\"\n    else:\n        return \"0.0740740741\""
    },
    {
        "number": 1633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    moves = []\n    for i in range(k):\n        row, col = map(int, stdin.split())\n        moves.append((row-1, col-1))\n    field = [[0 for j in range(m)] for i in range(n)]\n    for i, j in moves:\n        if field[i][j] == 0:\n            field[i][j] = 1\n        else:\n            field[i][j] = 0\n    for i in range(n-1):\n        for j in range(m-1):\n            if field[i][j] == field[i][j+1] == field[i+1][j] == field[i+1][j+1] == 1:\n                return str(moves.index((i,j))+1)\n    return \"0\""
    },
    {
        "number": 1634,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c_1, c_2, c_3, c_4 = map(int, stdin.split()[0:4])\n    n, m = map(int, stdin.split()[4:6])\n    a = list(map(int, stdin.split()[6:6+n]))\n    b = list(map(int, stdin.split()[6+n:]))\n\n    # calculate the number of rides for each bus and trolley\n    num_rides = [a[i] + b[i] for i in range(n)]\n\n    # calculate the minimum cost of each ticket type\n    min_cost = [c_1, c_2, c_3, c_4]\n    for i in range(n):\n        min_cost[0] += num_rides[i]\n    for i in range(m):\n        min_cost[1] += 1\n    min_cost[2] += sum(num_rides)\n    min_cost[3] += n + m\n\n    # return the minimum cost\n    return min(min_cost)"
    },
    {
        "number": 1635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    indices = list(map(int, stdin.readline().strip().split()))\n    last_visits = [0] * n\n    for i in range(n):\n        last_visits[indices[i]-1] = i\n    max_last_visit = max(last_visits)\n    for i in range(n):\n        if last_visits[i] < max_last_visit:\n            return i+1\n    return -1"
    },
    {
        "number": 1636,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    special_values = list(map(int, stdin.readline().strip().split()))\n    special_values.sort()\n    if special_values[-1] > 0:\n        return \"NO\"\n    for i in range(1, n+1):\n        if special_values[-i] < i:\n            return \"NO\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                return \"NO\"\n    ans = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] < points[j][0] and points[i][1] < points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0] and points[i][1] == points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] > points[j][0] and points[i][1] > points[j][1]:\n                ans.append(points[i])\n                break\n    for i in range("
    },
    {
        "number": 1637,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    scores = list(map(int, stdin.split()))\n    pairs = set()\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        pairs.add((u-1, v-1))\n        pairs.add((v-1, u-1))\n    res = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if (i, j) not in pairs and (j, i) not in pairs:\n                res[i] += scores[j]\n                res[j] += scores[i]\n    return''.join(map(str, res))"
    },
    {
        "number": 1638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = list(map(int, stdin.split()[1:]))\n    dp = [0] * (n+1)\n    dp[1] = m[0]\n    for i in range(2, n+1):\n        dp[i] = max(dp[i-1], m[i-1])\n    for i in range(n-2, -1, -1):\n        dp[i] = max(dp[i], dp[i+1])\n    return''.join(map(str, dp))"
    },
    {
        "number": 1639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        if a[i] > a[i-1]:\n            dp[i] = dp[i-1] + 1\n    return max(dp)"
    },
    {
        "number": 1640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n            if abs(a[i]-a[j]) > 1:\n                dp[i][j] += j-i-1\n    return dp[0][n-1]"
    },
    {
        "number": 1641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, s, t = map(int, stdin.split())\n    cars = []\n    for i in range(n):\n        c, v = map(int, stdin.split())\n        cars.append((c, v))\n    gas_stations = list(map(int, stdin.split()))\n    cars.sort(key=lambda x: x[0])\n    gas_stations.sort()\n    dp = [[float('inf')] * (s+1) for _ in range(n+1)]\n    dp[0][0] = 0\n    for i in range(1, n+1):\n        for j in range(s+1):\n            for g in gas_stations:\n                if j >= g:\n                    dp[i][j] = min(dp[i][j], dp[i-1][j-g] + cars[i-1][0])\n    for i in range(n):\n        if dp[i][s] <= t:\n            return str(cars[i][0])\n    return '-1'"
    },
    {
        "number": 1642,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().strip().split())\n        points.append((x, y))\n    # sort points in clockwise order\n    points = sorted(points, key=lambda p: (p[0] - points[0][0])**2 + (p[1] - points[0][1])**2)\n    # calculate the distance between each pair of points\n    distances = []\n    for i in range(n):\n        for j in range(i+1, n):\n            dx, dy = points[j][0] - points[i][0], points[j][1] - points[i][1]\n            distances.append((dx**2 + dy**2)**0.5)\n    # find the maximum distance that can be moved without making the polygon non-convex\n    max_distance = max(distances)\n    return str(max_distance)"
    },
    {
        "number": 1643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    t = stdin\n    for i in range(n):\n        if i % 2 == 0:\n            t = t[:i] + '0' + t[i+1:]\n        else:\n            t = t[:i] + '1' + t[i+1:]\n    return t"
    },
    {
        "number": 1644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rings = []\n    for i in range(n):\n        a, b, h = map(int, stdin.readline().strip().split())\n        rings.append((a, b, h))\n    rings.sort(key=lambda x: x[1])\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = rings[i][2]\n        for j in range(i):\n            if rings[j][1] <= rings[i][1]:\n                dp[i] = max(dp[i], dp[j] + rings[i][2])\n    return str(max(dp))"
    },
    {
        "number": 1645,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray = a[i:j]\n            if sum(subarray)!= 0:\n                count += 1\n    return count"
    },
    {
        "number": 1646,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    if s == '0':\n        return '0'\n    if s == '1':\n        return '1'\n    if s.count('1') == 1:\n        return '0'\n    if s.count('1') == 2:\n        return '1'\n    if s.count('1') == 3:\n        return '0'\n    if s.count('1') == 4:\n        return '1'\n    if s.count('1') == 5:\n        return '0'\n    if s.count('1') == 6:\n        return '1'\n    if s.count('1') == 7:\n        return '0'\n    if s.count('1') == 8:\n        return '1'\n    if s.count('1') == 9:\n        return '0'\n    if s.count('1') == 10:\n        return '1'\n    if s.count('1') == 11:\n        return '0'\n    if s.count('1') == 12:\n        return '1'\n    if s.count('1') == 13:\n        return '0'\n    if s.count('1') == 14:\n        return '1'\n    if s.count('1') == 15:\n        return '0'\n    if s.count('1') == 16:\n        return '1'\n    if s.count('1') == 17:\n        return '0'\n    if s.count('1') == 18:\n        return '1'\n    if s.count('1') == 19:\n        return '0'\n    if s.count('1') == 20:\n        return '1'\n    if s.count('1') == 21:\n        return '0'\n    if s.count('1') == 22:\n        return '1'\n    if s.count('1') == 23:\n        return '0'\n    if s.count('1') == 24:\n        return '1'\n    if s.count('1') == 25:\n        return '0'\n    if s.count('1') == 26:\n        return '1'\n    if s.count('1') == 27:\n        return '0'\n    if s.count('1') == 28:\n        return '1'\n    if s.count('1') == 29:\n        return '0'\n    if s.count('1') == 30:\n        return '1'\n    if s.count('1') == 31:\n        return '0'\n    if s.count('1') == 32:\n        return '1'\n    if s.count('1') == 33:\n        return '0'\n    if s.count('1') == 34:\n        return '1'\n    if s.count('1') == 35:\n        return '0'\n    if s.count('1') == 36:\n        return '1'\n    if s.count('1') == 37:\n        return '0'\n    if s.count('1') == 38:\n        return '1'\n    if s.count('1') == 39:\n        return '0'\n    if s.count('1') == 40:\n        return '1'\n    if s.count('1') == 41:\n        return '0'\n    if s.count('1') == 42:\n        return '1'\n    if s.count('1') == 43:\n        return '0'\n    if s.count('1') == 44:\n        return '1'\n    if s.count('1') == 45:\n        return '0'\n    if s.count('1') == 46:\n        return '1'\n    if s.count('1') == 47:\n        return '0'\n    if s.count('1') == 48:\n        return '1'\n    if s.count('1') == 49:\n        return '0'\n    if s.count('1') == 50:\n        return '1'\n    if s.count('1') == 51:\n        return '0'\n    if s.count('1') == 52:\n        return '1'\n    if s.count('1') == 53:\n        return '0'\n    if s.count('1') == 54:\n        return '1'\n    if s.count('1') == 55:\n        return '0"
    },
    {
        "number": 1647,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    valya_pullover = stdin.readline().strip()\n    tolya_t_shirt = stdin.readline().strip()\n\n    # create a dictionary to store the count of each letter in the two letterings\n    letter_count = {}\n    for letter in valya_pullover:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n    for letter in tolya_t_shirt:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n    # create a list of all possible spells\n    spells = []\n    for letter in letter_count:\n        for letter2 in letter_count:\n            if letter!= letter2:\n                spells.append((letter, letter2))\n\n    # calculate the minimum amount of mana required\n    mana_required = 0\n    for spell in spells:\n        count = 0\n        for i in range(n):\n            if valya_pullover[i] == spell[0]:\n                valya_pullover = valya_pullover[:i] + spell[1] + valya_pullover[i+1:]\n                count += 1\n            if tolya_t_shirt[i] == spell[0]:\n                tolya_t_shirt = tolya_t_shirt[:i] + spell[1] + tolya_t_shirt[i+1:]\n                count += 1\n        mana_required += count\n\n    # output the minimum amount of mana required and the spells\n    print(mana_required)\n    for spell in spells:\n        print(spell[0], spell[1])\n\n    return \"\""
    },
    {
        "number": 1648,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split())\n\n    # initialize dp array\n    dp = [0] * (k+1)\n    dp[0] = 1\n\n    # compute dp array\n    mod = 10**9+7\n    for i in range(1, k+1):\n        dp[i] = (dp[i-1] * (n-i+1)) % mod\n\n    # print dp array\n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 1649,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C, D = map(int, stdin.split())\n    if A + B == C + D or A + C == B + D or A + D == B + C:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1650,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L = int(stdin)\n    count = 0\n    for i in range(L):\n        for j in range(i+1, L):\n            if (i + j) % 3 == 0 and (i ^ j) == i:\n                count += 1\n    return str(count % (10**9 + 7))"
    },
    {
        "number": 1651,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, p = map(int, stdin.split())\n    for i in range(1, s+1):\n        for j in range(1, s+1):\n            if i+j == s and i*j == p:\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1652,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    T = \"\"\n    for i in range(4):\n        T += S[i]\n    if T == S:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1653,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, T, Q = stdin.strip().split('\\n')\n    Q = int(Q)\n    transitions = {'A': 'BC', 'B': 'AC', 'C': 'AB'}\n    result = []\n    for i in range(Q):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        if S[a-1:b] in transitions and T[c-1:d] in transitions[S[a-1:b]]:\n            result.append('1')\n        else:\n            result.append('0')\n    return ''.join(result)"
    },
    {
        "number": 1654,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.split()\n    n = len(s)\n    m = len(t)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s[j-1] == t[i-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    res = ''\n    for i in range(n):\n        if s[i] == '?':\n            for c in 'abcdefghijklmnopqrstuvwxyz':\n                if c not in s[i+1:]:\n                    s = s[:i] + c + s[i+1:]\n                    break\n    for i in range(n):\n        if s[i] == '?':\n            res += 'a'\n        else:\n            res += s[i]\n    return res"
    },
    {
        "number": 1655,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lengths = list(map(int, stdin.readline().strip().split()))\n    alive = n\n    for i in range(n):\n        if lengths[i] > i:\n            alive -= lengths[i]\n    return alive"
    },
    {
        "number": 1656,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        if s[i:i+3] == \"wow\":\n            count += 1\n    return count"
    },
    {
        "number": 1657,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split()[0:2])\n    devices = []\n    for i in range(n):\n        a, b = map(int, stdin.split()[2*i:2*i+2])\n        devices.append((a, b))\n    max_time = 0\n    for device in devices:\n        max_time = max(max_time, device[1] / device[0])\n    if max_time == float('inf'):\n        return '-1'\n    else:\n        return str(max_time)"
    },
    {
        "number": 1658,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n    MOD = 10**9 + 7\n    dp = [0] * (n+1)\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = (dp[i-1] * (i-1)) % MOD\n    for i in range(1, n+1):\n        for j in range(i):\n            if d[j] <= x:\n                dp[i] = (dp[i] + dp[j]) % MOD\n    return dp[n]"
    },
    {
        "number": 1659,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    ice_cream = x\n    distressed = 0\n    for i in range(n):\n        sign, packs = stdin.split()[0], int(stdin.split()[1])\n        if sign == \"+\":\n            ice_cream += packs\n        else:\n            if packs <= ice_cream:\n                ice_cream -= packs\n            else:\n                distressed += 1\n    return f\"{ice_cream} {distressed}\""
    },
    {
        "number": 1660,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        graph[u].append((v, w))\n    visited = [False] * (n + 1)\n    max_edges = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            visited[i] = True\n            stack = [(i, 0)]\n            while stack:\n                node, edges = stack.pop()\n                for neighbor, weight in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        stack.append((neighbor, edges + 1))\n                        if edges + 1 > max_edges:\n                            max_edges = edges + 1\n    return str(max_edges)"
    },
    {
        "number": 1661,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    c = list(map(int, stdin.split()[2:2+n]))\n    a = list(map(int, stdin.split()[2+n:]))\n    count = 0\n    for i in range(n):\n        if a[0] >= c[i]:\n            count += 1\n            a.pop(0)\n            if not a:\n                break\n    return count"
    },
    {
        "number": 1662,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    b.sort()\n    i = 0\n    while i < m - 1 and b[i] < b[i+1]:\n        i += 1\n    if i == m - 1:\n        return str(m) + '\\n' +''.join(map(str, b))\n    else:\n        return str(i+1) + '\\n' +''.join(map(str, b[:i+1][::-1]))"
    },
    {
        "number": 1663,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    MOD = 10**9 + 7\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if i-j < 10:\n                dp[i] = (dp[i] + dp[j]) % MOD\n            else:\n                dp[i] = (dp[i] + dp[j] * (10-j)) % MOD\n    return dp[n]"
    },
    {
        "number": 1664,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    program = lines[1:]\n    variables = set()\n    for line in program:\n        if line.startswith('res='):\n            continue\n        if '=' in line:\n            lvalue, rvalue = line.split('=')\n            variables.add(lvalue)\n            variables.add(rvalue)\n        else:\n            lvalue, op, arg1, arg2 = line.split()\n            variables.add(lvalue)\n            variables.add(arg1)\n            variables.add(arg2)\n    variables = sorted(list(variables))\n    k = len(variables)\n    res ='res=' +''.join(variables)\n    return f'{k}\\n{res}'"
    },
    {
        "number": 1665,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    graph = [[] for _ in range(n)]\n    for _ in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    visited = [False] * n\n    parent = [-1] * n\n    def dfs(node, parent):\n        visited[node] = True\n        for child in graph[node]:\n            if not visited[child]:\n                parent[child] = node\n                dfs(child, parent)\n    dfs(0, parent)\n    mex = [0] * n\n    for i in range(n):\n        if parent[i]!= -1:\n            mex[i] = mex[parent[i]] + 1\n    ans = []\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        u, v = u-1, v-1\n        if mex[u] > mex[v]:\n            ans.append(mex[u])\n        else:\n            ans.append(mex[v])\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 1666,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y, a, b = map(int, stdin.split())\n    outcomes = []\n    for i in range(a, x+1):\n        for j in range(b, y+1):\n            outcomes.append((i, j))\n    outcomes.sort()\n    n = len(outcomes)\n    print(n)\n    for outcome in outcomes:\n        print(outcome[0], outcome[1])\n    return \"\""
    },
    {
        "number": 1667,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    k = 1\n    while True:\n        count = 0\n        for i in range(n):\n            if a[i] < k:\n                count += 1\n            else:\n                count = 0\n            if count == 0:\n                k += 1\n        if count == 0:\n            break\n    return str(k)"
    },
    {
        "number": 1668,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        pin_codes = [stdin.readline().strip() for _ in range(n)]\n        k = 0\n        for i in range(n):\n            for j in range(4):\n                if i == 0 or pin_codes[i][j]!= pin_codes[i-1][j]:\n                    k += 1\n                    for l in range(i+1, n):\n                        if pin_codes[l][j] == pin_codes[i][j]:\n                            pin_codes[l] = pin_codes[l][:j] + str((int(pin_codes[l][j])+1)%10) + pin_codes[l][j+1:]\n        print(k)\n        print(*pin_codes)"
    },
    {
        "number": 1669,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    reserved_tokens = set(lines[1].split())\n    m = int(lines[2])\n    source_lines = lines[3:]\n\n    # parse source lines\n    tokens = []\n    for line in source_lines:\n        line = line.strip()\n        if not line:\n            continue\n        # skip comments\n        if '#' in line:\n            line = line[:line.index('#')]\n        # parse tokens\n        start = 0\n        while start < len(line):\n            # find longest token starting at current position\n            for end in range(start+1, len(line)+1):\n                token = line[start:end]\n                if token in reserved_tokens:\n                    break\n                if token.isdigit():\n                    tokens.append(token)\n                    start = end\n                    break\n                if token.isalpha() and not token[0].isdigit():\n                    tokens.append(token)\n                    start = end\n                    break\n            else:\n                # no token found, append remaining characters as single token\n                tokens.append(line[start:])\n                break\n\n    # rename tokens\n    target_words = sorted(w for w in set('abcdefghijklmnopqrstuvwxyz') if w not in reserved_tokens)\n    word_map = {w: target_words[i] for i, w in enumerate(target_words)}\n    renamed_tokens = [word_map.get(t, t) for t in tokens]\n\n    # minify output\n    output_line = ''\n    prev_token = None\n    for token in renamed_tokens:\n        if token == prev_token:\n            continue\n        output_line += token\n        prev_token = token\n    return output_line.strip()"
    },
    {
        "number": 1670,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    home_team, away_team = stdin.split('\\n')[:2]\n    fouls = stdin.split('\\n')[2:]\n    red_cards = {}\n    for foul in fouls:\n        minute, team, player, card_type = foul.split()\n        if team == 'h':\n            team = home_team\n        else:\n            team = away_team\n        if card_type == 'r':\n            if player not in red_cards:\n                red_cards[player] = minute\n    result = []\n    for player, minute in red_cards.items():\n        result.append(f'{team} {player} {minute}')\n    return '\\n'.join(result) if result else ''"
    },
    {
        "number": 1671,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = list(map(int, stdin.split()[1:]))\n    m.sort()\n    diff = m[-1] - m[0]\n    return str(diff)"
    },
    {
        "number": 1672,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    magnets = [stdin.readline().strip() for _ in range(n)]\n    groups = 0\n    group = []\n    for i in range(n):\n        if magnets[i] == '01':\n            group.append(i)\n        else:\n            if group:\n                groups += 1\n                group = []\n    if group:\n        groups += 1\n    return str(groups)"
    },
    {
        "number": 1673,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    MOD = 998244353\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = abs(a[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = dp[i][j-1] + abs(a[j] - a[j-1])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if j-i+1 == k:\n                ans += dp[i][j]\n                ans %= MOD\n    return str(ans)"
    },
    {
        "number": 1674,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    s = stdin.readline().strip()\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n        if s[i - 1] == s[i - 2]:\n            dp[i] = max(dp[i], dp[i - 2] + a[i - 1])\n        if i >= k:\n            dp[i] = max(dp[i], dp[i - k] + a[i - 1])\n    return str(dp[n])"
    },
    {
        "number": 1675,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    teams = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        teams.append((x, y))\n    home_games = [0] * n\n    away_games = [0] * n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if teams[i][0] == teams[j][0]:\n                home_games[i] += 1\n                home_games[j] += 1\n            elif teams[i][0] == teams[j][1]:\n                home_games[i] += 1\n                away_games[j] += 1\n            elif teams[i][1] == teams[j][0]:\n                away_games[i] += 1\n                home_games[j] += 1\n            else:\n                away_games[i] += 1\n                away_games[j] += 1\n    for i in range(n):\n        print(home_games[i], away_games[i])\n    return \"\""
    },
    {
        "number": 1676,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, b = map(int, stdin.split())\n    queries = []\n    for i in range(n):\n        t, d = map(int, stdin.split())\n        queries.append((t, d))\n    queries.sort()\n    busy = False\n    queue = []\n    events = []\n    for t, d in queries:\n        if not busy and not queue:\n            busy = True\n            events.append(t + d)\n        elif not busy and len(queue) < b:\n            queue.append((t, d))\n        elif not busy and len(queue) == b:\n            events.append(-1)\n        else:\n            queue.append((t, d))\n        if busy and not queue:\n            busy = False\n            if events:\n                events.pop()\n        elif busy and queue:\n            busy = False\n            if events:\n                events.pop()\n            t, d = queue.pop(0)\n            events.append(t + d)\n    return''.join(map(str, events))"
    },
    {
        "number": 1677,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if b[i] - b[j] == b[i] - b[j-1] - 1:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
    },
    {
        "number": 1678,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if sum(a[i:j]) < t:\n                count += 1\n    return count"
    },
    {
        "number": 1679,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    num = 0\n    for i in range(n):\n        num = num * 2 + int(s[i])\n    return str(num)"
    },
    {
        "number": 1680,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if bin(a[i]).count('1')!= bin(a[j]).count('1'):\n                count += 1\n    return count"
    },
    {
        "number": 1681,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    colors = stdin.split()[0]\n    if m > len(set(colors)):\n        return -1\n    max_area = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i*j <= m:\n                max_area += i*j\n    return max_area"
    },
    {
        "number": 1682,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    a.sort()\n    b.sort()\n    total = 0\n    for i in range(k):\n        total += a[i]\n    for i in range(k, n):\n        total += b[i-k]\n    return str(total)"
    },
    {
        "number": 1683,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 998244353\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i][j - 1] * 10 + a[j]\n            dp[j][i] = dp[i][j]\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += dp[i][j]\n            ans %= MOD\n    return str(ans)"
    },
    {
        "number": 1684,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        segments.append((a, b))\n    segments.sort()\n    for i in range(len(segments)):\n        if segments[i][0] == segments[(i+1)%len(segments)][1]:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1685,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    tree = [[] for _ in range(n+1)]\n    for i in range(n-1, 0, -1):\n        tree[i//2].append(i)\n    def dfs(u, path):\n        if not path:\n            return u\n        for c in path:\n            if c == 'U':\n                u = tree[u][0]\n            elif c == 'L':\n                u = tree[u][0]\n            elif c == 'R':\n                u = tree[u][1]\n        return u\n    for i in range(q):\n        u, s = map(int, stdin.readline().split())\n        path = stdin.readline().strip()\n        ans = dfs(u, path)\n        print(ans)"
    },
    {
        "number": 1686,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    ip_addresses = []\n    for i in range(n):\n        ip_addresses.append(stdin.split()[i])\n    subnet_masks = []\n    for i in range(32):\n        mask = ''\n        for j in range(4):\n            if i >= 8*j and i < 8*(j+1):\n                mask += '1'\n            else:\n                mask += '0'\n        subnet_masks.append(mask)\n    subnet_masks.sort(key=lambda x: x.count('1'))\n    for subnet_mask in subnet_masks:\n        network_addresses = set()\n        for ip_address in ip_addresses:\n            network_address = ''\n            for i in range(4):\n                network_address += str(int(ip_address.split('.')[i]) & int(subnet_mask.split('.')[i])) + '.'\n            network_address = network_address[:-1]\n            network_addresses.add(network_address)\n        if len(network_addresses) == k:\n            return subnet_mask\n    return '-1'"
    },
    {
        "number": 1687,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(1, 1000000):\n        if all(i % j == 0 for j in a):\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 1688,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    c = [-1] * n\n    for i in range(n):\n        if i == 0:\n            c[i] = 1\n        else:\n            cool = a[i]\n            j = i - 1\n            while j >= 0 and cool < a[j] / 2:\n                cool += a[j]\n                j -= 1\n            if j == -1:\n                c[i] = i + 1\n            else:\n                c[i] = i - j\n    return''.join(map(str, c))"
    },
    {
        "number": 1689,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    bus = []\n    for i in range(n):\n        bus.append(stdin.readline().strip())\n    for i in range(n):\n        for j in range(2):\n            if bus[i][j] == 'O' and bus[i][j+2] == 'O':\n                bus[i] = bus[i][:j] + '+' + bus[i][j+1:] + '+' + bus[i][j+3:]\n                return 'YES\\n' + '\\n'.join(bus)\n    return 'NO'"
    },
    {
        "number": 1690,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    x = [0] * n\n    for i in range(n):\n        x[i] = min(a[i], x[i-1])\n    return sum(x)"
    },
    {
        "number": 1691,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    g = gcd(n, k)\n    if g!= 1:\n        return \"Error: gcd(n, k)!= 1\"\n    ans = [1]\n    for i in range(1, n):\n        ans.append((ans[-1] + k) % n + 1)\n    return \" \".join(map(str, ans))\n\ndef"
    },
    {
        "number": 1692,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            count += 1\n        else:\n            count += int(s[i]) // 4 + 1\n    return str(count)"
    },
    {
        "number": 1693,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    m = list(map(int, stdin.split()[1:]))\n    dp = [0] * (n+1)\n    dp[1] = m[0]\n    for i in range(2, n+1):\n        dp[i] = max(dp[i-1], m[i-1])\n        for j in range(1, i):\n            if m[j-1] < dp[i-1] < m[i-1]:\n                dp[i] = max(dp[i], dp[j-1]+m[i-1])\n    return''.join(map(str, dp))"
    },
    {
        "number": 1694,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, f = map(int, stdin.split())\n    steps = []\n    for _ in range(m):\n        t, l, r = map(int, stdin.split())\n        steps.append((t, l, r))\n    steps.sort()\n    actions = []\n    for step in steps:\n        if step[1] == s:\n            if step[2] == f:\n                actions.append(\"X\")\n            elif step[2] < f:\n                actions.append(\"L\")\n            else:\n                actions.append(\"R\")\n        elif step[1] < s < step[2]:\n            if step[2] == f:\n                actions.append(\"X\")\n            elif step[2] < f:\n                actions.append(\"L\")\n            else:\n                actions.append(\"R\")\n        elif step[1] > s > step[2]:\n            if step[2] == f:\n                actions.append(\"X\")\n            elif step[2] < f:\n                actions.append(\"R\")\n            else:\n                actions.append(\"L\")\n    return \"\".join(actions)"
    },
    {
        "number": 1695,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    answers = [stdin.strip() for _ in range(n)]\n    scores = list(map(int, stdin.split()))\n    max_score = 0\n    for i in range(2**m):\n        score = 0\n        for j in range(m):\n            if (i >> j) & 1:\n                score += scores[j]\n        max_score = max(max_score, score)\n    return str(max_score)"
    },
    {
        "number": 1696,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    x, y = [], []\n    for i in range(k):\n        xi, yi = map(int, stdin.readline().split())\n        x.append(xi)\n        y.append(yi)\n    # find the center of ignition that is not in the last position\n    for i in range(k):\n        if (x[i], y[i])!= (x[k-1], y[k-1]):\n            x[k-1], y[k-1] = x[i], y[i]\n            break\n    # find the distance between the last center of ignition and the center of ignition that is not in the last position\n    dx, dy = x[k-1] - x[k-2], y[k-1] - y[k-2]\n    # find the number of blocks that are affected by the fire\n    affected = 0\n    for i in range(k):\n        affected += (x[i] - x[k-1]) * (y[i] - y[k-1])\n    # find the number of blocks that are affected by the fire for each minute\n    affected_per_minute = [0] * (n*m)\n    for i in range(n*m):\n        for j in range(k):\n            if abs(i//m - x[j]) + abs(i%m - y[j]) <= 1:\n                affected_per_minute[i] += 1\n    # find the time it takes the fire to lighten up the whole city\n    time = 0\n    while affected > 0:\n        time += 1\n        affected -= affected_per_minute[time]\n    return time"
    },
    {
        "number": 1697,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = []\n    for i in range(n):\n        board.append(list(stdin.readline().strip()))\n\n    def is_adjacent(x, y):\n        return x > 0 and x < n - 1 and y > 0 and y < m - 1\n\n    def dfs(x, y, color, visited, path):\n        if visited[x][y]:\n            return False\n        visited[x][y] = True\n        path.append((x, y))\n        if board[x][y]!= color:\n            return False\n        if len(path) == n * m:\n            return True\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x + dx, y + dy\n            if is_adjacent(nx, ny) and dfs(nx, ny, color, visited, path):\n                return True\n        path.pop()\n        return False\n\n    for i in range(n):\n        for j in range(m):\n            if board[i][j]!= '.':\n                visited = [[False] * m for _ in range(n)]\n                if dfs(i, j, board[i][j], visited, []):\n                    return \"Yes\"\n    return \"No\""
    },
    {
        "number": 1698,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    floors = list(map(int, stdin.split()[2:]))\n    floors.sort()\n    elevator_capacity = k\n    elevator_floor = 1\n    people_on_floor = []\n    for i in range(n):\n        if floors[i] == elevator_floor:\n            continue\n        if len(people_on_floor) < elevator_capacity:\n            people_on_floor.append(i)\n        else:\n            min_index = min(people_on_floor, key=lambda x: abs(floors[x] - elevator_floor))\n            people_on_floor.remove(min_index)\n            people_on_floor.append(i)\n        elevator_floor = floors[i]\n    time = abs(elevator_floor - 1) * 2\n    for i in people_on_floor:\n        time += abs(floors[i] - elevator_floor)\n    return str(time)"
    },
    {
        "number": 1699,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    table = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            table[i][j] = (i+1) * (j+1)\n    return '\\n'.join([' '.join(map(str, row)) for row in table])"
    },
    {
        "number": 1700,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    r = \"\"\n    b = \"\"\n    for i in range(n):\n        if s[i] == \"(\":\n            r += \"0\"\n            b += \"1\"\n        else:\n            r += \"1\"\n            b += \"0\"\n    return r if len(r) > len(b) else b"
    },
    {
        "number": 1701,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    servers = {}\n    for i in range(n):\n        name, ip = stdin.split()[i*2:i*2+2]\n        servers[ip] = name\n    result = []\n    for i in range(m):\n        command, ip = stdin.split()[i*2:i*2+2]\n        result.append(f\"{command} {ip}; # {servers[ip]}\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 1702,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n        if dp[i] == 0:\n            return -1\n    dp = [0] * 5\n    for i in range(n):\n        for j in range(5):\n            if a[i][j]!= -1:\n                dp[j] += 1\n    for i in range(5):\n       "
    },
    {
        "number": 1703,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            s1 = stdin.readline().strip()\n            s2 = stdin.readline().strip()\n            s = s1 + s2\n            stack = []\n            for c in s:\n                if c == '(':\n                    stack.append(c)\n                elif c == ')':\n                    if not stack:\n                        break\n                    stack.pop()\n            else:\n                if not stack:\n                    count += 1\n    return count"
    },
    {
        "number": 1704,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    digits = []\n    for i in range(n):\n        digits.append(list(map(int, stdin.readline().strip())))\n    dp = [[0] * 10 for _ in range(k+1)]\n    for i in range(k+1):\n        dp[i][0] = 1\n    for i in range(n):\n        for j in range(k+1):\n            for d in range(10):\n                if digits[i][d] == 1:\n                    dp[j][d] = dp[j][d] + dp[j-1][d]\n                else:\n                    dp[j][d] = dp[j][d] + dp[j][d-1]\n    if dp[k][9] == 0:\n        return \"-1\"\n    else:\n        res = \"\"\n        for i in range(n):\n            for j in range(10):\n                if dp[k][j] == dp[k][9]:\n                    res += str(j)\n                    break\n        return res"
    },
    {
        "number": 1705,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    doors = list(map(int, stdin.readline().strip().split()))\n    left_exit = [i for i in range(n) if doors[i] == 0]\n    right_exit = [i for i in range(n) if doors[i] == 1]\n    k = 0\n    while k < n and left_exit and right_exit:\n        if left_exit[0] < right_exit[0]:\n            left_exit.pop(0)\n        else:\n            right_exit.pop(0)\n        k += 1\n    return k"
    },
    {
        "number": 1706,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    k = 0\n    while n > 1 and k < 30:\n        if n % 2 == 1:\n            i = n // 2 + 1\n            k += 1\n            print(\"R\", i)\n            s = s[i:] + s[:i]\n        else:\n            i = n // 2\n            k += 1\n            print(\"L\", i)\n            s = s[:i][::-1] + s[i:]\n        n = len(s)\n    return k"
    },
    {
        "number": 1707,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(a[i] - a[j]) <= abs(a[i] + a[j]):\n                count += 1\n    return str(count)"
    },
    {
        "number": 1708,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    c = list(map(int, stdin.split()[2+n:2+2*n]))\n    res = []\n    for i in range(m):\n        t, d = map(int, stdin.split()[2+2*n+i*2:2+2*n+(i+1)*2])\n        if a[t-1] < d:\n            res.append(0)\n        else:\n            if a[t-1] == d:\n                res.append(d * c[t-1])\n                a[t-1] = 0\n            else:\n                res.append(d * c[t-1])\n                a[t-1] -= d\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 1709,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    colors = list(map(int, stdin.readline().split()))\n    paint = []\n    for i in range(n):\n        paint.append(list(map(int, stdin.readline().split())))\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if colors[i-1]!= 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = float('inf')\n                for p in range(1, m+1):\n                    if p <= paint[i-1][j-1]:\n                        dp[i][j] = min(dp[i][j], dp[i-1][p]+paint[i-1][j-1])\n    if dp[n][k] == float('inf'):\n        return '-1'\n    return dp[n][k]"
    },
    {
        "number": 1710,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub = a[i:j]\n            if len(sub) == 1:\n                continue\n            p = 1\n            s = sum(sub)\n            for num in sub:\n                p *= num\n            if p/s == k:\n                count += 1\n    return count"
    },
    {
        "number": 1711,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 998244353\n    dp = [[[0] * (m + 1) for _ in range(m + 1)] for _ in range(m + 1)]\n    dp[0][0][0] = 1\n    for i in range(1, m + 1):\n        for j in range(m + 1):\n            for k in range(m + 1):\n                if j < i:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k]) % MOD\n                if j >= i:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j - 1][k + 1]) % MOD\n                if j == i:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i - 1][j][k + 1]) % MOD\n    ans = 0\n    for i in range(m + 1):\n        for j in range(m + 1):\n            ans = (ans + dp[n][i][j]) % MOD\n    return str(ans)"
    },
    {
        "number": 1712,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    last_hit = [0] * n\n    for i in range(n):\n        last_hit[i] = (1 / x + 1 / y) * a[i]\n    for i in range(n):\n        if last_hit[i] <= 1 / x:\n            print(\"Vanya\")\n        elif last_hit[i] <= 1 / x + 1 / y:\n            print(\"Both\")\n        else:\n            print(\"Vova\")\n    return \"\""
    },
    {
        "number": 1713,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    p = list(map(int, stdin.readline().split()))\n    if s == t:\n        return -1\n    if s > t:\n        s, t = t, s\n    dp = [float('inf')] * n\n    dp[s-1] = 0\n    for i in range(n):\n        for j in range(n):\n            if p[j] == i+1 and dp[j]!= float('inf'):\n                dp[i] = min(dp[i], dp[j]+1)\n    if dp[t-1] == float('inf'):\n        return -1\n    return dp[t-1]"
    },
    {
        "number": 1714,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = [i+1 for i in range(n)]\n    for i in range(n):\n        a[i] += k\n    a.sort()\n    return''.join(map(str, a))"
    },
    {
        "number": 1715,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, Q = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n    t = list(map(int, stdin.readline().split()))\n    x = list(map(int, stdin.readline().split()))\n\n    # sort the shrines and temples in ascending order of their distances from the west end of the road\n    s.sort()\n    t.sort()\n\n    # initialize the answer array\n    ans = []\n\n    # iterate over the queries\n    for i in range(Q):\n        # initialize the minimum distance to infinity\n        min_dist = float('inf')\n\n        # iterate over the shrines and temples\n        for j in range(A):\n            # calculate the distance from the west end of the road to the i-th shrine\n            dist_s = s[j] - x[i]\n            # calculate the distance from the west end of the road to the i-th temple\n            dist_t = t[j] - x[i]\n\n            # update the minimum distance if the distance to the i-th shrine is less than the current minimum distance\n            if dist_s >= 0 and dist_s < min_dist:\n                min_dist = dist_s\n            # update the minimum distance if the distance to the i-th temple is less than the current minimum distance\n            if dist_t >= 0 and dist_t < min_dist:\n                min_dist = dist_t\n\n        # append the minimum distance to the answer array\n        ans.append(min_dist)\n\n    # return the answer array as a string\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 1716,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, Q = map(int, stdin.readline().split())\n    trains = []\n    for i in range(M):\n        L, R = map(int, stdin.readline().split())\n        trains.append((L, R))\n    queries = []\n    for i in range(Q):\n        p, q = map(int, stdin.readline().split())\n        queries.append((p, q))\n\n    # Count number of trains that run within the section from p to q\n    count = 0\n    for p, q in queries:\n        for L, R in trains:\n            if L <= p <= R or L <= q <= R:\n                count += 1\n\n    # Return result\n    return str(count)"
    },
    {
        "number": 1717,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    for i in range(n, 10**13+1):\n        for j in range(2, n+1):\n            if i % j!= 1:\n                break\n        else:\n            return str(i)\n    return \"No solution found\""
    },
    {
        "number": 1718,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    min_val = min(A)\n\n    # Perform operations\n    while min_val!= 1:\n        # Find indices of minimum values\n        indices = [i for i in range(K) if A[i] == min_val]\n\n        # Replace minimum values with 1\n        for i in indices:\n            A[i] = 1\n\n        # Increment count and update minimum value\n        count += 1\n        min_val = min(A)\n\n    # Return count\n    return str(count)"
    },
    {
        "number": 1719,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n\n    # Initialize variables\n    count = 0\n    MOD = 10**9 + 7\n\n    # Generate all possible strings of length N\n    for i in range(4**N):\n        s = \"\"\n        for j in range(N):\n            s += \"ACGT\"[i // (4**(N-j-1)) % 4]\n        if \"AGC\" not in s and all(s[i]!= s[i+1] for i in range(N-1)):\n            count += 1\n\n    # Return result\n    return str(count % MOD)"
    },
    {
        "number": 1720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    field = []\n    for i in range(n):\n        field.append(list(stdin.readline().strip()))\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    if field[x1-1][y1-1] == \"#\" or field[x2-1][y2-1] == \"#\":\n        return -1\n    visited = [[False for j in range(m)] for i in range(n)]\n    visited[x1-1][y1-1] = True\n    queue = [(x1-1, y1-1, 0)]\n    while queue:\n        x, y, time = queue.pop(0)\n        if x == x2-1 and y == y2-1:\n            return time\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nx, ny = x+dx, y+dy\n            if 0 <= nx < n and 0 <= ny < m and not visited[nx][ny] and field[nx][ny]!= \"#\":\n                visited[nx][ny] = True\n                queue.append((nx, ny, time+1))\n    return -1"
    },
    {
        "number": 1721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n // 2):\n        if s[i]!= s[n - i - 1]:\n            count += 1\n    return count"
    },
    {
        "number": 1722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    names = set()\n    for i in range(n):\n        name = stdin.readline().strip()\n        names.add(name)\n    x = 0\n    for name in names:\n        if name[0] == 'j':\n            x += 1\n    return str(x)"
    },
    {
        "number": 1723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 2:\n        return \"-1\\n1 2\"\n    elif n == 3:\n        return \"1 2\\n1 3\\n2 3\"\n    elif n == 4:\n        return \"1 2\\n1 3\\n2 4\\n2 3\"\n    elif n == 5:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 4\\n3 5\"\n    elif n == 6:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 5\"\n    elif n == 7:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 5\\n4 6\\n4 7\"\n    elif n == 8:\n        return \"1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 8\\n4 7\\n5 6\\n5 8\\n6 7\\n6 8\"\n    else:\n        return \"-1\""
    },
    {
        "number": 1724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    m = int(stdin.readline(), 2)\n    f = [0] * (m + 1)\n    for i in range(n):\n        f[1 << i] = a[i]\n    for i in range(1, m + 1):\n        for j in range(n):\n            if i & (1 << j):\n                f[i] += a[j]\n    return str(max(f))"
    },
    {
        "number": 1725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(map(int, stdin.split())))\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j]!= matrix[0][0]:\n                count += abs(matrix[i][j] - matrix[0][0])\n                matrix[i][j] = matrix[0][0]\n    if count <= d:\n        return str(count)\n    else:\n        return \"-1\""
    },
    {
        "number": 1726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [float('inf')] * n\n    dp[0] = 0\n    for i in range(1, n):\n        dp[i] = min(dp[i-1] + a[i-1], dp[i-1] + t)\n    return dp[-1]"
    },
    {
        "number": 1727,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trees = []\n    for i in range(n):\n        x, h = map(int, stdin.readline().strip().split())\n        trees.append((x, h))\n    trees.sort()\n    count = 0\n    i = 0\n    while i < n:\n        x, h = trees[i]\n        j = i + 1\n        while j < n and trees[j][0] - trees[j][1] <= x + h:\n            j += 1\n        count += j - i\n        i = j\n    return count"
    },
    {
        "number": 1728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *edges, *colors = map(int, stdin.split())\n    adj = [[] for _ in range(n + 1)]\n    for i in range(1, n):\n        adj[edges[i - 1]].append(i)\n    color = [0] * (n + 1)\n    step = 0\n    for i in range(1, n + 1):\n        if color[i] == 0:\n            step += 1\n            q = [i]\n            while q:\n                u = q.pop()\n                for v in adj[u]:\n                    if color[v] == 0:\n                        color[v] = colors[u - 1]\n                        q.append(v)\n    return step"
    },
    {
        "number": 1729,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    queries = []\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        queries.append((l, r))\n\n    dp = 1\n    cp = 0\n    digits = [0] * 10\n    for i in range(n):\n        if s[i] == '<':\n            dp = -dp\n        elif s[i] == '>':\n            dp = -dp\n        elif s[i].isdigit():\n            digits[int(s[i])] += 1\n            if digits[int(s[i])] > 1:\n                digits[int(s[i])] -= 1\n            else:\n                cp += dp\n                if cp < 0 or cp >= n:\n                    break\n                if s[cp] == '<' or s[cp] == '>':\n                    cp += dp\n                    if cp < 0 or cp >= n:\n                        break\n                if s[cp].isdigit():\n                    digits[int(s[cp])] -= 1\n                    if digits[int(s[cp])] < 0:\n                        digits[int(s[cp])] = 0\n\n    result = []\n    for l, r in queries:\n        dp = 1\n        cp = l - 1\n        digits = [0] * 10\n        for i in range(l - 1, r):\n            if s[i] == '<':\n                dp = -dp\n            elif s[i] == '>':\n                dp = -dp\n            elif s[i].isdigit():\n                digits[int(s[i])] += 1\n                if digits[int(s[i])] > 1:\n                    digits[int(s[i])] -= 1\n                else:\n                    cp += dp\n                    if cp < 0 or cp >= n:\n                        break\n                    if s[cp] == '<' or s[cp] == '>':\n                        cp += dp\n                        if cp < 0 or cp >= n:\n                            break\n                    if s[cp].isdigit():\n                        digits[int(s[cp])] -= 1\n                        if digits[int(s[cp])] < 0:\n                            digits[int(s[cp])] = 0\n        result.append(' '.join(map(str, digits)))\n    return '\\n'.join(result)"
    },
    {
        "number": 1730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n + 1)\n    stack = []\n    for i in range(1, n + 1):\n        if not visited[i]:\n            stack.append(i)\n            visited[i] = True\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        stack.append(neighbor)\n                        visited[neighbor] = True\n                        if len(stack) == k + 1:\n                            cycle = stack[::-1]\n                            return f\"{len(cycle)}\\n{' '.join(map(str, cycle))}\"\n    return \"No simple cycle found\""
    },
    {
        "number": 1731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i!= j:\n                a = [i] * m\n                b = [j] * m\n                a.sort()\n                b.sort(reverse=True)\n                if a == b:\n                    count += 1\n    return str(count % MOD)"
    },
    {
        "number": 1732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    l = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n    dp = [float('inf')] * (10**9 + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(10**9 + 1):\n            if j - l[i] >= 0:\n                dp[j] = min(dp[j], dp[j - l[i]] + c[i])\n            if j + l[i] <= 10**9:\n                dp[j] = min(dp[j], dp[j + l[i]] + c[i])\n    if dp[10**9] == float('inf'):\n        return '-1'\n    else:\n        return str(dp[10**9])"
    },
    {
        "number": 1733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x, y = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(n-1)]\n    visited = [False] * n\n    visited[x-1] = True\n    visited[y-1] = True\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if not visited[i] and not visited[j]:\n                if i == x-1 and j == y-1:\n                    continue\n                if i == x-1 or j == y-1:\n                    continue\n                if not any(roads[k][0] == i+1 and roads[k][1] == j+1 or roads[k][0] == j+1 and roads[k][1] == i+1 for k in range(n-1)):\n                    count += 1\n    return count"
    },
    {
        "number": 1734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    contacts = [int(line.strip()) for line in stdin]\n    result = []\n    for contact in contacts:\n        for i in range(1, 10):\n            for j in range(1, 10):\n                for k in range(1, 10):\n                    if str(i) + str(j) + str(k) == str(contact):\n                        result.append(str(i) + str(j) + str(k))\n    return '\\n'.join(result)"
    },
    {
        "number": 1735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n % 2 == 1:\n        return \"Yes\"\n    else:\n        for i in range(0, n, 2):\n            if s[i]!= s[i+1]:\n                return \"No\"\n        return \"Yes\""
    },
    {
        "number": 1736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    time = 0\n    for i in range(n):\n        if time + a[i] <= t:\n            time += a[i]\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 1737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    projects = []\n    for i in range(n):\n        name, version = stdin.readline().strip().split()\n        version = int(version)\n        dependencies = []\n        num_dependencies = int(stdin.readline().strip())\n        for j in range(num_dependencies):\n            dep_name, dep_version = stdin.readline().strip().split()\n            dep_version = int(dep_version)\n            dependencies.append((dep_name, dep_version))\n        projects.append((name, version, dependencies))\n\n    # find actual dependencies\n    actual_dependencies = set()\n    for name, version, dependencies in projects:\n        if name == 'a' and version == 3:\n            actual_dependencies.add(('a', 3))\n            for dep_name, dep_version in dependencies:\n                actual_dependencies.add((dep_name, dep_version))\n\n    # find minimal set of dependencies\n    minimal_dependencies = set()\n    for name, version, dependencies in projects:\n        if name == 'a' and version == 3:\n            continue\n        for dep_name, dep_version in dependencies:\n            if (dep_name, dep_version) in actual_dependencies:\n                minimal_dependencies.add((dep_name, dep_version))\n\n    # output dependencies\n    dependencies = sorted(minimal_dependencies)\n    for name, version in dependencies:\n        print(name, version)\n\n    return \"\""
    },
    {
        "number": 1738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n == 1:\n        return 1\n    count = 0\n    for i in range(n):\n        count += 1\n        if i == n-1 or s[i]!= s[i+1]:\n            if count > 9:\n                count = str(count)\n            else:\n                count = '0' + str(count)\n            if i == n-1:\n                return len(count) + 1\n            else:\n                return len(count) + len(s[i]) + 1\n    return 0"
    },
    {
        "number": 1739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = x**a[0]\n    for i in range(1, n):\n        t += a[i]\n    s = 1\n    for i in range(n):\n        s *= x**a[i]\n    gcd = math.gcd(s, t)\n    return str(gcd % 1000000007)"
    },
    {
        "number": 1740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = [tuple(map(int, line.split())) for line in stdin]\n    kittens = list(range(1, n+1))\n    for x, y in pairs:\n        kitten_x = kittens[x-1]\n        kitten_y = kittens[y-1]\n        kittens[x-1] = kitten_x + kitten_y\n        kittens[y-1] = kitten_x + kitten_y\n    return''.join(map(str, kittens))"
    },
    {
        "number": 1741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    lairs = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        lairs.append((x, y))\n    lairs.sort(key=lambda x: x[1])\n    left = 0\n    right = lairs[-1][1]\n    while left < right:\n        mid = (left + right) / 2\n        count = 0\n        for lair in lairs:\n            if abs(lair[1] - mid) <= mid:\n                count += 1\n        if count <= 1:\n            right = mid\n        else:\n            left = mid + 0.000001\n    if left == 0:\n        return '-1'\n    else:\n        return str(left)"
    },
    {
        "number": 1742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2+n]))\n    pairs = []\n    for i in range(m):\n        u, v = map(int, stdin.split()[2+n+2*i:2+n+2*(i+1)])\n        pairs.append((u, v))\n    p_new = p.copy()\n    for u, v in pairs:\n        if p_new.index(u) < p_new.index(v):\n            p_new[p_new.index(u)+1:p_new.index(v)+1] = p_new[p_new.index(u)+1:p_new.index(v)+1][::-1]\n    return p_new.index(n)+1"
    },
    {
        "number": 1743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    c = list(map(int, stdin.readline().strip().split()))\n\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = a[i] + b[i] + c[i]\n\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            dp[i][j] = max(dp[i][j - 1], dp[i + 1][j]) + a[j] + b[j] + c[j]\n\n    return str(dp[0][n - 1])"
    },
    {
        "number": 1744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, M = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = i + 1\n        for j in range(i):\n            if t[i] > t[j]:\n                dp[i] = min(dp[i], dp[j] + 1)\n    return''.join(map(str, dp))"
    },
    {
        "number": 1745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    map_ = []\n    for i in range(n):\n        map_.append(list(stdin.readline().strip()))\n    pipe_count = 0\n    for i in range(n):\n        for j in range(m):\n            if map_[i][j] == '.':\n                pipe_count += 1\n                map_[i][j] = '*'\n                if i > 0 and map_[i-1][j] == '.':\n                    pipe_count += 1\n                    map_[i-1][j] = '*'\n                if i < n-1 and map_[i+1][j] == '.':\n                    pipe_count += 1\n                    map_[i+1][j] = '*'\n                if j > 0 and map_[i][j-1] == '.':\n                    pipe_count += 1\n                    map_[i][j-1] = '*'\n                if j < m-1 and map_[i][j+1] == '.':\n                    pipe_count += 1\n                    map_[i][j+1] = '*'\n    return str(pipe_count)"
    },
    {
        "number": 1746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    parents = list(map(int, stdin.readline().strip().split()))\n    children = [[] for _ in range(n)]\n    for i in range(1, n):\n        children[parents[i] - 1].append(i)\n    leaves = [i for i in range(n) if len(children[i]) == 0]\n    for i in range(1, n):\n        if len(children[i]) < 3:\n            return \"No\"\n    return \"Yes\""
    },
    {
        "number": 1747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n        for j in range(i):\n            if a[i]!= a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    max_len = 0\n    max_l, max_r = 0, 0\n    for i in range(n):\n        if dp[i] <= k:\n            if i == 0 or dp[i-1] < k:\n                if i == n-1 or dp[i+1] < k:\n                    if dp[i] > max_len:\n                        max_len = dp[i]\n                        max_l, max_r = i, i\n                    elif dp[i] == max_len:\n                        max_l, max_r = min(max_l, i), max(max_r, i)\n    return f\"{max_l+1} {max_r+1}\""
    },
    {
        "number": 1748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    v = list(map(int, lines[1].split()))\n    t = list(map(int, lines[2].split()))\n\n    # initialize variables\n    total_melted = [0] * n\n    for i in range(n):\n        total_melted[i] = v[i] - t[i]\n        if total_melted[i] <= 0:\n            total_melted[i] = 0\n\n    # iterate over days\n    for i in range(1, n):\n        for j in range(i):\n            total_melted[i] += max(0, total_melted[j] - t[i])\n\n    # output result\n    return''.join(map(str, total_melted))"
    },
    {
        "number": 1749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, r = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    if a[l-1:r] == b[l-1:r]:\n        return \"TRUTH\"\n    else:\n        return \"LIE\""
    },
    {
        "number": 1750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    graph = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        x, y = map(int, stdin.readline().strip().split())\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n    colors = [0] * n\n    visited = [False] * n\n    def dfs(node, color):\n        colors[node] = color\n        visited[node] = True\n        for nei in graph[node]:\n            if not visited[nei]:\n                dfs(nei, color)\n    dfs(0, 1)\n    for i in range(n):\n        if colors[i] == 0:\n            dfs(i, i + 1)\n    k = max(colors)\n    print(k)\n    print(*colors)\n    return \"\""
    },
    {
        "number": 1751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i-1, -1, -1):\n            if j == 0 or p[j-1] < p[i-1]:\n                break\n        for j in range(i+1, n+1):\n            if j == n or p[j-1] < p[i-1]:\n                break\n        if j-i+1 > 2:\n            count += (j-i+1)*(j-i+2)//2\n    return count % MOD"
    },
    {
        "number": 1752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    a.sort()\n    return''.join(map(str, a))"
    },
    {
        "number": 1753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        pairs.append((a, b))\n    colors = set(range(1, n+1))\n    rooks = [[] for _ in range(n)]\n    for i in range(5000):\n        for j in range(n):\n            if len(rooks[j]) == a[j]:\n                continue\n            rooks[j].append((i+1, i+1))\n    for i in range(m):\n        a, b = pairs[i]\n        if a in colors and b in colors:\n            colors.remove(a)\n            colors.remove(b)\n            for j in range(n):\n                if j == a-1 or j == b-1:\n                    continue\n                rooks[j] = connect(rooks[j], rooks[a-1], rooks[b-1])\n    result = []\n    for i in range(n):\n        if len(rooks[i]) == 0:\n            continue\n        result.append(str(len(rooks[i])))\n        for j in range(len(rooks[i])):\n            result.append(str(rooks[i][j][0]) +'' + str(rooks[i][j][1]))\n    return '\\n'.join(result)\n\ndef"
    },
    {
        "number": 1754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    p = list(map(int, stdin.split()[3:3+n]))\n    s = list(map(int, stdin.split()[3+n:3+2*n]))\n    c = list(map(int, stdin.split()[3+2*n:]))\n\n    # Find the strongest student in each school\n    strongest = [0] * m\n    for i in range(n):\n        if p[i] > strongest[s[i]-1]:\n            strongest[s[i]-1] = p[i]\n\n    # Count the number of students in each school\n    count = [0] * m\n    for i in range(n):\n        count[s[i]-1] += 1\n\n    # Count the number of students in the Chosen Ones' schools\n    chosen_count = [0] * m\n    for i in range(k):\n        chosen_count[s[c[i]-1]-1] += 1\n\n    # Count the number of students in the made-up schools\n    made_up_count = 0\n    for i in range(m):\n        if chosen_count[i] == 0:\n            made_up_count += 1\n\n    # Return the minimum number of schools to be made up\n    return made_up_count"
    },
    {
        "number": 1755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = set(map(int, stdin.split()[2+n:])) if k else set()\n    count = 0\n    for i in range(n):\n        if i not in b:\n            for j in range(i+1, n):\n                if j not in b and a[j] < a[i]:\n                    a[i] = j\n                    count += 1\n                    break\n            else:\n                return -1\n    return count"
    },
    {
        "number": 1756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    days = list(map(int, stdin.split()))\n    hugs = 0\n    for i in range(n):\n        hugs += days[i] * (i+1)\n    hugs = min(hugs, x)\n    return str(hugs)"
    },
    {
        "number": 1757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    fib = [1, 1]\n    while fib[-1] + fib[-2] <= n:\n        fib.append(fib[-1] + fib[-2])\n    fib = fib[:-1]\n    name = ['O' if i in fib else 'o' for i in range(1, n+1)]\n    return ''.join(name)"
    },
    {
        "number": 1758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    t = stdin.readline().strip()\n\n    if s == t:\n        return 0\n\n    count = 0\n    for i in range(n):\n        if s[i]!= t[i]:\n            count += 1\n\n    if count % 2 == 1:\n        return -1\n\n    count //= 2\n\n    for i in range(n):\n        if s[i]!= t[i]:\n            count += 1\n\n    return count"
    },
    {
        "number": 1759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    t = [list(map(int, stdin.split())) for _ in range(m)]\n    r = [0] * m\n    for i in range(m):\n        for j in range(n):\n            r[i] += t[i][j]\n            if j < n - 1:\n                r[i] += max(t[i][j+1], 0)\n    return''.join(map(str, r))"
    },
    {
        "number": 1760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    dp = [0] * n\n    for i in range(n):\n        if i == 0:\n            dp[i] = 1\n        elif i == n-1:\n            dp[i] = 1\n        elif s[i] == 'U':\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-1] + 1\n    for i in range(n):\n        if i == 0:\n            if s[i] == 'D':\n                dp[i] = -1\n        elif i == n-1:\n            if s[i] == 'U':\n                dp[i] = -1\n        elif s[i] == 'U':\n            dp[i] = max(dp[i-1], dp[i])\n        else:\n            dp[i] = max(dp[i-1], dp[i])\n    for i in range(n):\n        if dp[i] == -1:\n            dp[i] = -1\n        else:\n            dp[i] += i\n    return''.join(map(str, dp))"
    },
    {
        "number": 1761,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    message = stdin.readline().strip()\n    heart = \"<3\"\n    encoded_message = heart.join(words) + heart\n    for i in range(len(message)):\n        if message[i] == \"<\":\n            if i == len(message) - 2 and message[i+1] == \"3\":\n                encoded_message += \"<3\"\n            elif i == len(message) - 1 or message[i+1]!= \"3\":\n                encoded_message += \"<\"\n        elif message[i] == \">\":\n            if i == len(message) - 2 and message[i+1] == \"3\":\n                encoded_message += \"<3\"\n            elif i == len(message) - 1 or message[i+1]!= \"3\":\n                encoded_message += \">\"\n        elif message[i] == \"m\":\n            encoded_message += \"m\"\n        elif message[i] == \"o\":\n            encoded_message += \"o\"\n        elif message[i] == \"r\":\n            encoded_message += \"r\"\n        elif message[i] == \"e\":\n            encoded_message += \"e\"\n        elif message[i] == \"a\":\n            encoded_message += \"a\"\n        elif message[i] == \"i\":\n            encoded_message += \"i\"\n        elif message[i] == \"l\":\n            encoded_message += \"l\"\n        elif message[i] == \"s\":\n            encoded_message += \"s\"\n        elif message[i] == \"t\":\n            encoded_message += \"t\"\n        elif message[i] == \"h\":\n            encoded_message += \"h\"\n        elif message[i] == \"f\":\n            encoded_message += \"f\"\n        elif message[i] == \"y\":\n            encoded_message += \"y\"\n        elif message[i] == \"w\":\n            encoded_message += \"w\"\n        elif message[i] == \"n\":\n            encoded_message += \"n\"\n        elif message[i] == \"g\":\n            encoded_message += \"g\"\n        elif message[i] == \"p\":\n            encoded_message += \"p\"\n        elif message[i] == \"d\":\n            encoded_message += \"d\"\n        elif message[i] == \"b\":\n            encoded_message += \"b\"\n        elif message[i] == \"v\":\n            encoded_message += \"v\"\n        elif message[i] == \"k\":\n            encoded_message += \"k\"\n        elif message[i] == \"x\":\n            encoded_message += \"x\"\n        elif message[i] == \"j\":\n            encoded_message += \"j\"\n        elif message[i] == \"q\":\n            encoded_message += \"q\"\n        elif message[i] == \"z\":\n            encoded_message += \"z\"\n        elif message[i] == \"c\":\n            encoded_message += \"c\"\n        elif message[i] == \"u\":\n            encoded_message += \"u\"\n        elif message[i] == \"0\":\n            encoded_message += \"0\"\n        elif message[i] == \"1\":\n            encoded_message += \"1\"\n        elif message[i] == \"2\":\n            encoded_message += \"2\"\n        elif message[i] == \"3\":\n            encoded_message += \"3\"\n        elif message[i] == \"4\":\n            encoded_message += \"4\"\n        elif message[i] == \"5\":\n            encoded_message += \"5\"\n        elif message[i] == \"6\":\n            encoded_message += \"6\"\n        elif message[i] == \"7\":\n            encoded_message += \"7\"\n        elif message[i] == \"8\":\n            encoded_message += \"8\"\n        elif message[i] == \"9\":\n            encoded_message += \"9\"\n        else:\n            encoded_message += \" \"\n    if encoded_message == message:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 1762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    videos = []\n    for i in range(n):\n        s, m = map(int, stdin.split())\n        videos.append((s, m))\n    videos.sort(key=lambda x: x[0])\n    servers = [0] * k\n    queue = []\n    for i in range(n):\n        s, m = videos[i]\n        t = float('inf')\n        for j in range(k):\n            if servers[j] <= s:\n                t = min(t, servers[j] + m)\n        if t == float('inf'):\n            queue.append(i)\n        else:\n            servers[0] = t\n            for j in range(1, k):\n                servers[j] = servers[j-1] + m\n            for j in queue:\n                s, m = videos[j]\n                if s <= t:\n                    t = min(t, servers[0] + m)\n                    servers[0] = t\n                    for j in range(1, k):\n                        servers[j] = servers[j-1] + m\n                    queue.remove(j)\n            print(t)\n            queue.append(i)"
    },
    {
        "number": 1763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, A, R, M = map(int, stdin.split())\n    h = list(map(int, stdin.split()))\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    for i in range(N):\n        dp[i][i+1] = h[i] * A\n    for l in range(2, N+1):\n        for i in range(N-l+1):\n            j = i + l\n            dp[i][j] = float('inf')\n            for k in range(i, j):\n                cost = dp[i][k] + dp[k+1][j] + (h[k] - h[j]) * M\n                if cost < dp[i][j]:\n                    dp[i][j] = cost\n    return dp[0][N]"
    },
    {
        "number": 1764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    s_set = set()\n    t_set = set()\n    for i in range(n):\n        if a[i] == 1:\n            s_set.add(i+1)\n        else:\n            t_set.add(i+1)\n    s_list = sorted(list(s_set))\n    t_list = sorted(list(t_set))\n    result = []\n    for s in s_list:\n        for t in t_list:\n            if s*t <= n:\n                result.append((s, t))\n    return str(len(result)) + '\\n' + '\\n'.join(map(str, result))"
    },
    {
        "number": 1765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    k = 0\n    for i in range(n):\n        if a[i] & (a[i] - 1) == 0:\n            k += 1\n    if k == 0:\n        return \"-1\"\n    else:\n        b = []\n        for i in range(n):\n            if a[i] & (a[i] - 1) == 0:\n                b.append(a[i])\n        return str(k) + \"\\n\" + \" \".join(map(str, b))"
    },
    {
        "number": 1766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cards = list(map(int, stdin.split()[1:]))\n    sereja_points = 0\n    dima_points = 0\n    for i in range(n):\n        if i == 0:\n            sereja_points += cards[i]\n            dima_points += cards[i]\n        elif i == n-1:\n            sereja_points += cards[i]\n            dima_points += cards[i]\n        else:\n            if cards[i] > cards[i-1]:\n                sereja_points += cards[i]\n            else:\n                dima_points += cards[i]\n    return f\"{sereja_points} {dima_points}\""
    },
    {
        "number": 1767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            max_sum = max(max_sum, sum(a[i:j]) | sum(b[i:j]))\n    return str(max_sum)"
    },
    {
        "number": 1768,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(str, stdin.split('\\n')[:2])\n    n = int(n)\n    s = list(s)\n    q = int(stdin.split('\\n')[2])\n    plans = []\n    for i in range(q):\n        m, c = map(str, stdin.split('\\n')[3+i].split())\n        m = int(m)\n        plans.append((m, c))\n    ans = []\n    for m, c in plans:\n        if c not in s:\n            continue\n        i = s.index(c)\n        j = i + m\n        if j > n:\n            j = n\n        s[i:j] = [c]*m\n        ans.append(max(len(set(s[i:j])) for i in range(n-m+1)))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 1769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    N = A + B + 1\n    stops = list(range(1, N+1))\n    for i in range(A):\n        stops = [stop + 1 for stop in stops]\n    for i in range(B):\n        stops = [stop - 1 for stop in stops]\n    return''.join(map(str, stops))"
    },
    {
        "number": 1770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if line:\n            n, x, y, d = map(int, line.split())\n            if x == y:\n                print(0)\n            elif x > y:\n                x, y = y, x\n            if x + d > y:\n                print(y - x)\n            else:\n                print(y - x + d)\n    return ''"
    },
    {
        "number": 1771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, w_max = map(int, stdin.split())\n    clouds = []\n    for i in range(n):\n        x, v = map(int, stdin.split())\n        clouds.append((x, v))\n    pairs = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if clouds[i][0] + w_max >= clouds[j][0]:\n                pairs += 1\n    return pairs"
    },
    {
        "number": 1772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            count += 1\n    return count"
    },
    {
        "number": 1773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trees = []\n    for i in range(n):\n        x, a = map(int, stdin.readline().strip().split())\n        trees.append((x, a))\n    trees.sort()\n    max_apples = 0\n    current_apples = 0\n    current_direction = 1\n    for x, a in trees:\n        if current_direction == 1 and x > 0:\n            current_apples += a\n            current_direction = -1\n        elif current_direction == -1 and x < 0:\n            current_apples += a\n            current_direction = 1\n        if current_apples > max_apples:\n            max_apples = current_apples\n    return str(max_apples)"
    },
    {
        "number": 1774,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    if len(stdin) % 2 == 0:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 1775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    droids = []\n    for i in range(n):\n        droids.append(list(map(int, stdin.split())))\n    dp = [[0] * (k+1) for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            for l in range(k+1):\n                if i == 0:\n                    dp[i][l] = droids[i][j] * l\n                else:\n                    dp[i][l] = max(dp[i-1][l], dp[i-1][l-1] + droids[i][j])\n    ans = []\n    for i in range(m):\n        ans.append(dp[n-1][k] // droids[n-1][i])\n    return''.join(map(str, ans))"
    },
    {
        "number": 1776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    expression, p, m = stdin.split()\n    p, m = int(p), int(m)\n    stack = []\n    for i in expression:\n        if i.isdigit():\n            stack.append(int(i))\n        elif i == '?' and p > 0:\n            stack.append('+')\n            p -= 1\n        elif i == '?' and m > 0:\n            stack.append('-')\n            m -= 1\n    while p > 0:\n        stack.append('+')\n        p -= 1\n    while m > 0:\n        stack.append('-')\n        m -= 1\n    result = 0\n    sign = 1\n    for i in stack:\n        if i == '+':\n            sign = 1\n        elif i == '-':\n            sign = -1\n        else:\n            result += sign * i\n    return str(result)"
    },
    {
        "number": 1777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    pairs = 0\n    for i in range(n):\n        s = stdin.readline().strip()\n        if s.count('(') == s.count(')'):\n            pairs += 1\n    return pairs"
    },
    {
        "number": 1778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    a_score = sum(a)\n    b_score = sum(b)\n\n    while a and b:\n        if a[-1] > b[-1]:\n            a_score += a.pop()\n            b_score -= b.pop()\n        elif b[-1] > a[-1]:\n            b_score += b.pop()\n            a_score -= a.pop()\n        else:\n            a_score += a.pop()\n            b_score -= b.pop()\n\n    return str(a_score - b_score)"
    },
    {
        "number": 1779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    first_layout = stdin.readline().strip()\n    second_layout = stdin.readline().strip()\n    text = stdin.readline().strip()\n\n    # create a dictionary to map keys from first layout to second layout\n    mapping = {}\n    for i in range(len(first_layout)):\n        mapping[first_layout[i]] = second_layout[i]\n\n    # create a new string with keys mapped to second layout\n    new_text = \"\"\n    for c in text:\n        if c.isalpha():\n            new_text += mapping[c.lower()]\n        else:\n            new_text += c\n\n    return new_text"
    },
    {
        "number": 1780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    queries = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        queries.append((l, r))\n    result = []\n    for l, r in queries:\n        if sum(a[l-1:r]) == 0:\n            result.append(1)\n        else:\n            result.append(0)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 1782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n:\n        return \"-1\"\n    U = [set() for _ in range(k)]\n    for i in range(1, n+1):\n        U[i%k].add(i)\n    for i in range(k):\n        if len(U[i]) < 3:\n            return \"-1\"\n        if len(U[i]) == 3:\n            continue\n        if len(U[i]) % 2 == 1:\n            return \"-1\"\n        if len(U[i]) == 4:\n            continue\n        if len(U[i]) % 3 == 1:\n            return \"-1\"\n        if len(U[i]) == 5:\n            continue\n        if len(U[i]) % 4 == 1:\n            return \"-1\"\n    return \" \".join(map(str, [U.index(u)+1 for u in U]))"
    },
    {
        "number": 1783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    total = 0\n    for i in range(n - k + 1):\n        total += sum(a[i:i+k])\n    return str(total / (n - k + 1))"
    },
    {
        "number": 1784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            for c in range(1, k+1):\n                if dp[i-1][c] + abs(a[i-1] - dp[i-1][c]) <= dp[i][j]:\n                    dp[i][j] = dp[i-1][c] + abs(a[i-1] - dp[i-1][c])\n    if dp[n][k] > 2*sum(a):\n        return \"NO\"\n    else:\n        ans = [\"YES\"]\n        for i in range(1, n+1):\n            ans.append(str(dp[i][k]))\n            for j in range(a[i-1]):\n                ans[-1] += \" \" + str(dp[i][k])\n        return \"\\n\".join(ans)"
    },
    {
        "number": 1785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    MOD = 10**9 + 7\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += dp[i][j] * (n-dp[i][j])\n    return str(ans % MOD)"
    },
    {
        "number": 1786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h, n = map(int, stdin.split())\n    max_area = 0\n    for i in range(n):\n        line = stdin.readline().strip()\n        if line[0] == 'H':\n            y = int(line.split()[1])\n            max_area = max(max_area, (h - y) * w)\n        else:\n            x = int(line.split()[1])\n            max_area = max(max_area, w * (h - x))\n    return str(max_area)"
    },
    {
        "number": 1787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    MOD = 10**9 + 7\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1):\n        if s[i] < s[i+1]:\n            dp[i][i+1] = 1\n    for k in range(2, n):\n        for i in range(n-k):\n            j = i + k\n            if s[i] < s[j]:\n                dp[i][j] = (dp[i+1][j] + dp[i][j-1]) % MOD\n            else:\n                dp[i][j] = dp[i+1][j]\n    return dp[0][n-1]"
    },
    {
        "number": 1788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    X = (A + B) // 2\n    Y = A - X\n    return f\"{X} {Y}\""
    },
    {
        "number": 1789,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, x, y = map(int, stdin.split())\n    if a == b:\n        return str(0)\n    if a > b:\n        a, b = b, a\n    time = 0\n    for i in range(a, b):\n        time += x\n        if i % 2 == 0:\n            time += y\n    return str(time)"
    },
    {
        "number": 1790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    lines = []\n    for i in range(n):\n        r = int(stdin.readline().strip())\n        lines.append(list(map(int, stdin.readline().strip().split())))\n    possible_lines = set()\n    for i in range(n):\n        for j in range(len(lines[i])):\n            possible_lines.add(lines[i][j])\n    return \" \".join(map(str, possible_lines))"
    },
    {
        "number": 1791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    word = stdin.strip()\n    n = len(word)\n\n    # perform folding operations\n    for i in range(1, n):\n        if word[i] == '|':\n            # perform folding operation\n            left, right = word[:i], word[i+1:]\n            mid = (left + right)[::-1]\n            word = left + mid + right\n\n    # count piles of identical letters\n    piles = 0\n    stack = []\n    for c in word:\n        if not stack or stack[-1]!= c:\n            stack.append(c)\n        else:\n            piles = max(piles, len(stack))\n            stack.pop()\n\n    return piles"
    },
    {
        "number": 1792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n\n    s, b, k, h = map(int, stdin.readline().split())\n    spaceships = []\n    for _ in range(s):\n        x, a, f = map(int, stdin.readline().split())\n        spaceships.append((x, a, f))\n\n    bases = []\n    for _ in range(b):\n        x, d = map(int, stdin.readline().split())\n        bases.append((x, d))\n\n    # sort spaceships by location\n    spaceships.sort(key=lambda x: x[0])\n\n    # sort bases by location\n    bases.sort(key=lambda x: x[0])\n\n    # compute shortest distance between each pair of nodes\n    dist = [[float('inf')]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dist[i][i] = 0\n    for i in range(1, n+1):\n        for j in graph[i]:\n            dist[i][j] = 1\n            dist[j][i] = 1\n    for k in range(1, n+1):\n        for i in range(1, n+1):\n            for j in range(1, n+1):\n                dist[i][j] = min(dist[i][j], dist[i][k]+dist[k][j])\n\n    # compute the maximum number of bases that can be attacked\n    max_attacked = 0\n    for i in range(s):\n        for j in range(b):\n            if spaceships[i][0] == bases[j][0]:\n                continue\n            if spaceships[i][1] >= bases[j][1] and dist[spaceships[i][0]][bases[j][0]] <= spaceships[i][2]:\n                max_attacked += 1\n\n    # compute the minimum cost of creating dummy bases\n    min_cost = max_attacked * h\n\n    # compute the minimum cost of attacking the bases\n    for i in range(b):\n        min_cost += k\n\n    return str(min_cost)"
    },
    {
        "number": 1793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, L, S = map(int, stdin.readline().split())\n    w = list(map(int, stdin.readline().split()))\n    p = list(map(int, stdin.readline().split()))\n    parent = [0] * n\n    for i in range(1, n):\n        parent[i] = p[i] - 1\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = w[i]\n    for i in range(n):\n        for j in range(i):\n            if dp[j] + dp[i] > S:\n                dp[i] = S - dp[j]\n    for i in range(n):\n        if dp[i] > L:\n            return -1\n    return dp.count(0)"
    },
    {
        "number": 1794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            dp[i][j] = dp[i][j - 1]\n            if j - i > a[i]:\n                dp[i][j] = max(dp[i][j], dp[i + 1][j])\n            dp[i][j] += 1\n    return sum(dp[i][j] for i in range(n) for j in range(i + 1, n))\n"
    },
    {
        "number": 1795,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    f = list(map(int, stdin.readline().strip().split()))\n    for i in range(n):\n        if f[i] == i+1 or f[i] == 0:\n            return \"NO\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if f[i] == f[j]:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 1796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = 0\n    for statement in stdin.split('\\n'):\n        if statement[0] == '+':\n            x += 1\n        elif statement[0] == '-':\n            x -= 1\n    return str(x)"
    },
    {
        "number": 1797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for k in range(n):\n        for i in range(n):\n            j = (i + k) % n\n            if p[i] == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][k] + dp[k][j]\n    ans = 0\n    for i in range(n):\n        for j in range(n):\n            ans = max(ans, dp[i][j])\n    return str(ans)"
    },
    {
        "number": 1798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    x_set = set()\n    for i in range(n):\n        if a[i] not in x_set:\n            x_set.add(a[i])\n            if i < n-1 and a[i+1] - a[i] == 1:\n                continue\n            if i > 0 and a[i] - a[i-1] == 1:\n                continue\n            x_set.remove(a[i])\n            if len(x_set) == 0:\n                break\n    t = len(x_set)\n    result = []\n    for x in x_set:\n        p = 0\n        for i in range(n):\n            if a[i] == x:\n                if i > 0:\n                    p = a[i] - a[i-1]\n                    break\n        result.append((x, p))\n    result.sort(key=lambda x: x[0])\n    print(t)\n    for x, p in result:\n        print(x, p)\n    return \"\""
    },
    {
        "number": 1799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    teams = []\n    for i in range(n):\n        t, w = map(int, stdin.readline().strip().split())\n        teams.append((t, w))\n    teams.sort(key=lambda x: (-x[0], -x[1]))\n    balloons = sum(t for t, w in teams)\n    weight = sum(w for t, w in teams)\n    if weight == 0:\n        return \"1\"\n    for i, (t, w) in enumerate(teams):\n        if t > weight:\n            return str(i+2)\n    return str(n+1)"
    },
    {
        "number": 1800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(m):\n        t, r = map(int, stdin.readline().split())\n        if t == 1:\n            a = sorted(a[:r]) + a[r:]\n        else:\n            a = a[:r][::-1] + a[r:]\n    return''.join(map(str, a))"
    },
    {
        "number": 1801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    if a[i] < a[j] < a[k] < a[l] and b[i] < b[j] < b[k] < b[l]:\n                        count += 1\n    return str((count % m))"
    },
    {
        "number": 1802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    heights.sort()\n    step = heights[1] - heights[0]\n    if step == 0:\n        step = 1\n    lowest_height = heights[0]\n    max_buns = 0\n    for i in range(n):\n        max_buns += abs(heights[i] - lowest_height) // step + 1\n        lowest_height = min(lowest_height, heights[i])\n    return f\"{max_buns}\\n{lowest_height} {step}\""
    },
    {
        "number": 1803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    for i in range(m):\n        x, y = map(int, stdin.readline().split())\n        a[x-1] -= y\n        if x > 1 and a[x-2] < 0:\n            a[x-2] += y\n        if x < n and a[x] < 0:\n            a[x] += y\n    return '\\n'.join(map(str, a))"
    },
    {
        "number": 1804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    C = int(stdin.readline())\n    hotels = []\n    for i in range(C):\n        x, y = map(int, stdin.readline().split())\n        hotels.append((x, y))\n    H = int(stdin.readline())\n    restaurants = []\n    for i in range(H):\n        x, y = map(int, stdin.readline().split())\n        restaurants.append((x, y))\n\n    # compute distances\n    distances = [[float('inf') for j in range(M+1)] for i in range(N+1)]\n    for i in range(N+1):\n        for j in range(M+1):\n            distances[i][j] = abs(i-j)\n\n    # compute minimum distances\n    for i in range(N+1):\n        for j in range(M+1):\n            for hotel in hotels:\n                distances[hotel[0]][hotel[1]] = min(distances[hotel[0]][hotel[1]], distances[i][j])\n            for restaurant in restaurants:\n                distances[restaurant[0]][restaurant[1]] = min(distances[restaurant[0]][restaurant[1]], distances[i][j])\n\n    # find minimum distance\n    min_distance = float('inf')\n    min_index = -1\n    for i in range(H):\n        distance = distances[restaurants[i][0]][restaurants[i][1]]\n        if distance < min_distance:\n            min_distance = distance\n            min_index = i\n\n    # output result\n    return f\"{min_distance}\\n{min_index}\""
    },
    {
        "number": 1805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        if n % 2 == 0:\n            print(n // 2)\n        else:\n            print(n // 2 + 1)\n    return \"\""
    },
    {
        "number": 1806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    intervals = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        intervals.append((l, r))\n    queries = []\n    for i in range(m):\n        x, y = map(int, stdin.readline().split())\n        queries.append((x, y))\n    ans = []\n    for x, y in queries:\n        count = 0\n        for l, r in intervals:\n            if x <= l and r <= y:\n                count += 1\n        if count == 0:\n            ans.append(-1)\n        else:\n            ans.append(count)\n    return''.join(map(str, ans))"
    },
    {
        "number": 1807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    total_segments = 0\n    for i in range(a, b+1):\n        num_segments = len(str(i))\n        total_segments += num_segments\n    return str(total_segments)"
    },
    {
        "number": 1808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    ans = 0\n    for i in range(n):\n        if i < k:\n            ans += x\n        else:\n            ans += a[i]\n    return str(ans)"
    },
    {
        "number": 1809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    weights = list(map(int, stdin.readline().split()))\n    books = list(map(int, stdin.readline().split()))\n\n    # calculate the total weight of books\n    total_weight = sum(weights)\n\n    # calculate the minimum total weight of books\n    min_total_weight = total_weight\n\n    # iterate through all possible orders of books\n    for i in range(1, 2**n):\n        # calculate the weight of books in the current order\n        current_weight = 0\n        current_books = []\n        for j in range(n):\n            if (i >> j) & 1:\n                current_weight += weights[j]\n                current_books.append(j+1)\n\n        # calculate the total weight of books in the current order\n        current_total_weight = current_weight\n\n        # iterate through all days\n        for j in range(m):\n            # calculate the book that Jaehyun will read on the j-th day\n            book = books[j]\n\n            # if the book is not in the current order, skip it\n            if book not in current_books:\n                continue\n\n            # calculate the weight of books that Jaehyun should lift\n            lifted_weight = 0\n            for k in range(book-1):\n                if (i >> k) & 1:\n                    lifted_weight += weights[k]\n\n            # calculate the total weight of books after lifting\n            current_total_weight += lifted_weight\n\n            # calculate the weight of books that Jaehyun should put down\n            put_down_weight = 0\n            for k in range(book, n):\n                if (i >> k) & 1:\n                    put_down_weight += weights[k]\n\n            # calculate the total weight of books after putting down\n            current_total_weight -= put_down_weight\n\n            # calculate the weight of books that Jaehyun should put on top\n            put_on_top_weight = 0\n            for k in range(n):\n                if (i >> k) & 1:\n                    if k < book:\n                        put_on_top_weight += weights[k]\n                    elif k > book:\n                        put_on_top_weight += weights[k-1]\n\n            # calculate the total weight of books after putting on top\n            current_total_weight += put_on_top_weight\n\n        # update the minimum total weight of books\n        if current_total_weight < min_total_weight:\n            min_total_weight = current_total_weight\n\n    return str(min_total_weight)"
    },
    {
        "number": 1810,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if all(i % j == 0 for j in range(2, 11)):\n            count += 1\n    return count"
    },
    {
        "number": 1811,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    road = stdin.strip().split()[1]\n    if road[0] == \".\" and road[-1] == \".\":\n        for i in range(n):\n            if road[i] == \"#\":\n                for j in range(1, k+1):\n                    if road[i+j] == \".\":\n                        return \"NO\"\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1812,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(stdin.readline().strip()) for _ in range(n)]\n    k = [0] * n\n    for i in range(n):\n        for j in range(1, 100000):\n            if 2**j >= a[i]:\n                k[i] = j\n                break\n    return '\\n'.join(map(str, k))"
    },
    {
        "number": 1813,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if a[-1] - a[0] > s:\n        return -1\n    if n < l:\n        return -1\n    if n == l:\n        return 1\n    if n % l == 0:\n        return n // l\n    else:\n        return n // l + 1"
    },
    {
        "number": 1814,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, c_l, c_e, v = map(int, stdin.readline().split())\n    if c_l == 0:\n        l = []\n    else:\n        l = list(map(int, stdin.readline().split()))\n    e = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    ans = []\n    for _ in range(q):\n        x1, y1, x2, y2 = map(int, stdin.readline().split())\n        if x1 == x2:\n            if y1 < y2:\n                ans.append(y2 - y1)\n            else:\n                ans.append(m - y1 + y2)\n        elif x1 < x2:\n            if y1 < y2:\n                ans.append(y2 - y1 + (x2 - x1 - 1) * (n - x1))\n            else:\n                ans.append(m - y1 + y2 + (x2 - x1 - 1) * (n - x1))\n        else:\n            if y1 < y2:\n                ans.append(y2 - y1 + (x1 - x2 - 1) * (n - x2))\n            else:\n                ans.append(m - y1 + y2 + (x1 - x2 - 1) * (n - x2))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 1815,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    u = list(map(int, stdin.split()[1:]))\n    streak = 1\n    max_streak = 1\n    for i in range(1, n):\n        if u[i] == u[i-1]:\n            streak += 1\n        else:\n            streak = 1\n        max_streak = max(max_streak, streak)\n    return max_streak"
    },
    {
        "number": 1816,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    fragments = list(map(int, stdin.readline().strip().split()))\n    time = 0\n    prev_sector = 0\n    for i in range(n):\n        sector = fragments[i]\n        time += abs(sector - prev_sector)\n        prev_sector = sector\n    return str(time)"
    },
    {
        "number": 1817,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    return str(a[0])"
    },
    {
        "number": 1818,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if f(a[i]) == f(a[j]):\n                count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 1819,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    T = int(lines[0])\n    for i in range(1, T+1):\n        n, x = map(int, lines[i].split())\n        if x == 1:\n            print(1)\n        else:\n            print(n-x+1)\n    return \"\""
    },
    {
        "number": 1820,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        for j in range(n-2):\n            for k in range(j+1, n-1):\n                if a[j] + a[k] > a[k+1]:\n                    print(f\"{j+1} {k+1} {k+2}\")\n                    break\n            else:\n                continue\n            break\n        else:\n            print(\"-1\")\n    return \"\""
    },
    {
        "number": 1821,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if a[i] % 7 == a[j-1] % 7:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][n]"
    },
    {
        "number": 1822,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    res = []\n    for i in range(1, n+1):\n        if a[i-1] == 0:\n            res.append(i)\n    if x not in res:\n        return \"No solution\"\n    else:\n        return str(res.index(x)+1)"
    },
    {
        "number": 1823,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    count = [0] * k\n    for i in range(n):\n        count[a[i]-1] += 1\n    min_count = min(count)\n    min_index = count.index(min_count) + 1\n    return str(min_index)"
    },
    {
        "number": 1824,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    errors = list(map(int, stdin.readline().strip().split()))\n    errors_2 = list(map(int, stdin.readline().strip().split()))\n    errors_3 = list(map(int, stdin.readline().strip().split()))\n\n    errors_set = set(errors)\n    errors_2_set = set(errors_2)\n    errors_3_set = set(errors_3)\n\n    errors_set_2 = errors_set - errors_2_set\n    errors_set_3 = errors_set_2 - errors_3_set\n\n    return f\"{min(errors_set_2)}{min(errors_set_3)}\"\n"
    },
    {
        "number": 1825,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = []\n    for i in range(n):\n        t, k = stdin.readline().strip().split()\n        k = int(k)\n        xs = list(map(int, stdin.readline().strip().split()))\n        strings.append((t, k, xs))\n    strings.sort(key=lambda x: (x[1], x[2]))\n    s = \"\"\n    for t, k, xs in strings:\n        s += t * k\n        for x in xs:\n            s += s[x-1]\n    return s"
    },
    {
        "number": 1826,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    moves = stdin.readline().strip()\n    diagonal_moves = 0\n    i = 0\n    while i < n - 1:\n        if moves[i] == 'R' and moves[i+1] == 'U':\n            diagonal_moves += 1\n            i += 2\n        elif moves[i] == 'U' and moves[i+1] == 'R':\n            diagonal_moves += 1\n            i += 2\n        else:\n            i += 1\n    return n - diagonal_moves"
    },
    {
        "number": 1828,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    dangerous_turns = 0\n    for i in range(1, n):\n        if points[i][0] == points[i-1][0]:\n            if points[i][1] < points[i-1][1]:\n                dangerous_turns += 1\n        elif points[i][1] == points[i-1][1]:\n            if points[i][0] > points[i-1][0]:\n                dangerous_turns += 1\n    return str(dangerous_turns)"
    },
    {
        "number": 1829,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    polandball_words = set(stdin.split()[0:int(stdin.split()[1])])\n    enemyball_words = set(stdin.split()[int(stdin.split()[1])+1:])\n    if len(polandball_words.intersection(enemyball_words)) == 0:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 1830,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        board[x-1][y-1] = 1\n    count = [0] * m\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                count[0] += 1\n                for k in range(n):\n                    if board[i][k] == 1 or board[k][j] == 1:\n                        count[0] -= 1\n                        break\n    for i in range(1, m):\n        count[i] = count[i-1]\n        for j in range(n):\n            for k in range(n):\n                if board[j][k] == 1 or board[k][j] == 1:\n                    count[i] -= 1\n                    break\n    return''.join(map(str, count))"
    },
    {
        "number": 1831,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n+1)\n    def dfs(node):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                dfs(neighbor)\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(i)\n            if not all(visited):\n                return \"no\"\n    return \"yes\""
    },
    {
        "number": 1832,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        s = []\n        for j in range(n+1):\n            s.append(''.join(chr(ord('a')+j) for _ in range(a[j])))\n        print('\\n'.join(s))\n    return ''"
    },
    {
        "number": 1833,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * (1 << n) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1 << n):\n            dp[i][j] = dp[i-1][j]\n            if j & (1 << (i-1)):\n                dp[i][j] += dp[i-1][j ^ (1 << (i-1))]\n            dp[i][j] %= MOD\n    ans = 0\n    for j in range(1 << n):\n        if dp[n][j] > 0:\n            cnt = 0\n            for i in range(n):\n                if j & (1 << i):\n                    cnt += 1\n            if cnt % cnt == 0:\n                ans += dp[n][j]\n                ans %= MOD\n    return str(ans)"
    },
    {
        "number": 1834,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if all(a[i] >= a[i-1] for i in range(2, n, 2)) and all(a[i] <= a[i-1] for i in range(1, n, 2)):\n        return''.join(map(str, a))\n    else:\n        return 'Impossible'"
    },
    {
        "number": 1835,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    Q = int(lines[0])\n    for i in range(1, Q+1):\n        n = int(lines[i*2-1])\n        strings = [list(line) for line in lines[i*2:i*2+n]]\n        count = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if strings[j] == strings[k][::-1]:\n                    count += 1\n        print(count)"
    },
    {
        "number": 1836,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    def dfs(u, prev):\n        visited[u] = True\n        for v in graph[u]:\n            if v!= prev and not visited[v]:\n                dfs(v, u)\n    max_beauty = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(i, -1)\n            tail = []\n            for j in range(i, -1, -1):\n                if visited[j]:\n                    tail.append(j)\n                else:\n                    break\n            if len(tail) > 1:\n                spines = set()\n                for j in range(len(tail)-1):\n                    for k in range(j+1, len(tail)):\n                        if (tail[j], tail[k]) in graph or (tail[k], tail[j]) in graph:\n                            spines.add(tail[j])\n                            spines.add(tail[k])\n                if len(spines) > 0:\n                    beauty = len(tail) * len(spines)\n                    if beauty > max_beauty:\n                        max_beauty = beauty\n    return max_beauty"
    },
    {
        "number": 1837,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i]!= i:\n            count += 1\n            if count > 1:\n                return \"IMPOSSIBLE\"\n            j = i\n            while a[j]!= i:\n                j = a[j]\n            a[i], a[j] = a[j], a[i]\n    return count"
    },
    {
        "number": 1838,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split()[0:3])\n    words = stdin.split()[3:3+n]\n    relations = []\n    for i in range(m):\n        t, x, y = map(str, stdin.split()[i*3+3:i*3+6])\n        if t == '1':\n            relations.append((x, y))\n        else:\n            relations.append((y, x))\n    for i in range(q):\n        x, y = map(str, stdin.split()[i*2+3:i*2+5])\n        if (x, y) in relations:\n            print(\"YES\")\n        elif (y, x) in relations:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n        if x == y:\n            print(\"1\")\n        elif (x, y) in relations or (y, x) in relations:\n            print(\"2\")\n        else:\n            print(\"3\")\n    return \"\""
    },
    {
        "number": 1839,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    schedule = []\n    for i in range(n**2):\n        h, v = map(int, stdin.readline().strip().split())\n        schedule.append((h, v))\n    days = set()\n    for h, v in schedule:\n        if (h, v) not in days:\n            days.add((h, v))\n            days.add((v, h))\n    return''.join(map(str, sorted(days)))"
    },
    {
        "number": 1840,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, b = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    d = []\n    g = []\n    for i in range(b):\n        d_, g_ = map(int, stdin.readline().split())\n        d.append(d_)\n        g.append(g_)\n    ans = []\n    for i in range(s):\n        max_gold = 0\n        for j in range(b):\n            if d[j] <= a[i]:\n                max_gold = max(max_gold, g[j])\n        ans.append(max_gold)\n    return''.join(map(str, ans))"
    },
    {
        "number": 1841,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    result = []\n    for i in range(m):\n        l = int(stdin.readline())\n        distinct_numbers = set()\n        for j in range(l-1, n):\n            distinct_numbers.add(a[j])\n        result.append(len(distinct_numbers))\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 1842,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(float, stdin.split())\n    delta = b ** 2 - 4 * a * c\n    if delta < 0:\n        return \"No real roots\"\n    elif delta == 0:\n        x = -b / (2 * a)\n        return f\"{x:.6f}\"\n    else:\n        x1 = (-b + delta ** 0.5) / (2 * a)\n        x2 = (-b - delta ** 0.5) / (2 * a)\n        return f\"{max(x1, x2):.6f}\\n{min(x1, x2):.6f}\""
    },
    {
        "number": 1843,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        sum = 0\n        for j in range(n+1):\n            if j == 0:\n                continue\n            elif j == 1:\n                sum -= 1\n            else:\n                sum -= 2**(j-1)\n        print(sum)\n    return \"\""
    },
    {
        "number": 1844,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    for i in range(n):\n        if a[i] % 2 == 0:\n            continue\n        for j in range(i+1, n):\n            if a[j] % 2 == 0:\n                continue\n            for k in range(j+1, n):\n                if a[k] % 2 == 0:\n                    continue\n                if gcd(a[i], a[j], a[k]) == 1:\n                    return str(k-i+1)\n    return \"-1\"\n\ndef"
    },
    {
        "number": 1845,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    total_power = sum(a)\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] % a[j] == 0:\n                x = a[i] // a[j]\n                a[i] //= x\n                a[j] *= x\n                total_power -= a[i] + a[j]\n    return str(total_power)"
    },
    {
        "number": 1846,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    temps = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(1, n):\n        if temps[i] < 0 and temps[i-1] < 0:\n            count += 1\n        elif temps[i] > 0 and temps[i-1] > 0:\n            count += 1\n    return count"
    },
    {
        "number": 1847,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_0, y_0, x_1, y_1 = map(int, stdin.split()[0:4])\n    n = int(stdin.split()[4])\n    segments = []\n    for i in range(n):\n        r, a, b = map(int, stdin.split()[0:3])\n        segments.append((r, a, b))\n    allowed = set()\n    for r, a, b in segments:\n        for j in range(a, b+1):\n            allowed.add((r, j))\n    visited = set()\n    queue = [(x_0, y_0)]\n    steps = 0\n    while queue:\n        size = len(queue)\n        for i in range(size):\n            x, y = queue.pop(0)\n            if (x, y) == (x_1, y_1):\n                return steps\n            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                nx, ny = x+dx, y+dy\n                if (nx, ny) in allowed and (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    queue.append((nx, ny))\n        steps += 1\n    return -1"
    },
    {
        "number": 1848,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n):\n        if a[i] + 1 > a[i-1]:\n            count += 1\n    return count"
    },
    {
        "number": 1849,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    count = [0] * (n+1)\n    for i in range(10**n):\n        s = str(i).zfill(n)\n        for j in range(n):\n            if s[j]!= s[j+1]:\n                count[j+1] += 1\n    return''.join(str(c % 998244353) for c in count)"
    },
    {
        "number": 1850,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n    p = list(map(int, stdin.readline().split()))\n    s.sort(reverse=True)\n    p.sort(reverse=True)\n    ans = 0\n    for i in range(n):\n        if s[i] == p[i]:\n            ans += 1\n        else:\n            break\n    return ans + d"
    },
    {
        "number": 1851,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    days = 1\n    i = 0\n    while i < n:\n        if i == a[i-1]:\n            days += 1\n            i += 1\n        else:\n            i += 1\n    return days"
    },
    {
        "number": 1852,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n    tree = {i: [] for i in range(1, 2**(n+1) - 1)}\n    for a, b in edges:\n        tree[a].append(b)\n        tree[b].append(a)\n    count = 0\n    for v in range(2, 2**(n+1) - 1):\n        if len(tree[v]) == 0:\n            continue\n        parent = tree[v][0]\n        if len(tree[parent]) == 1:\n            continue\n        tree[parent].remove(v)\n        if len(tree[v]) == 0:\n            continue\n        child1 = tree[v][0]\n        child2 = tree[v][1]\n        tree[parent].append(child1)\n        tree[parent].append(child2)\n        count += 1\n    if count == 0:\n        return \"0\"\n    else:\n        return str(count) + \"\\n\" + \" \".join(map(str, sorted(tree.keys())))"
    },
    {
        "number": 1853,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if m == 0:\n        return \"NO\"\n    if n == 1:\n        return \"YES\\n1\\n1\"\n    if n == 2:\n        return \"YES\\n1 2\\n1 2\"\n    if n == 3:\n        return \"YES\\n1 3 2\\n1 3 1\"\n    if n == 4:\n        return \"YES\\n1 3 4 2\\n1 3 4 1\"\n    return \"NO\""
    },
    {
        "number": 1854,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    if sum(a) < n - 1:\n        return \"NO\"\n    graph = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            if i!= j and a[i] >= j - i and a[j] >= j - i:\n                graph[i].append(j)\n                graph[j].append(i)\n    visited = [False] * n\n    visited[0] = True\n    queue = [0]\n    diameter = 0\n    while queue:\n        size = len(queue)\n        for _ in range(size):\n            u = queue.pop(0)\n            for v in graph[u]:\n                if not visited[v]:\n                    visited[v] = True\n                    queue.append(v)\n                    diameter = max(diameter, len(queue))\n    if diameter == 0:\n        return \"NO\"\n    m = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if graph[i][j] == 1:\n                m += 1\n    print(\"YES\", diameter)\n    print(m)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if graph[i][j] == 1:\n                print(i + 1, j + 1)\n    return \"\""
    },
    {
        "number": 1855,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    dp = [[0] * (n+1) for _ in range(k+1)]\n    for i in range(1, n+1):\n        dp[1][i] = p[i-1]\n    for i in range(2, k+1):\n        for j in range(1, n+1):\n            dp[i][j] = max(dp[i-1][j-1], dp[i][j-1]) + p[j-1]\n    max_val = dp[k][n]\n    count = 0\n    for i in range(1, n+1):\n        if dp[k][i] == max_val:\n            count += 1\n    return f\"{max_val} {count % 998244353}\""
    },
    {
        "number": 1856,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    passwords = set(stdin.readline().strip() for _ in range(n))\n    count = 0\n    for password in passwords:\n        if all(password.count(char) == 1 for char in password):\n            count += 1\n    return str(count)"
    },
    {
        "number": 1857,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return n * (n - 1) * (n - 2) * (n - 3) * (n - 4) // 24\n\nprint(solution(\"5\")) # Output: 120"
    },
    {
        "number": 1858,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"No\"\n    for i in range(2, n+1):\n        if n % i == 0:\n            s1 = set(range(1, i))\n            s2 = set(range(i, n+1))\n            if len(s1) > 0 and len(s2) > 0:\n                return \"Yes\\n\" + str(len(s1)) + \" \" + \" \".join(map(str, s1)) + \"\\n\" + str(len(s2)) + \" \" + \" \".join(map(str, s2))\n    return \"No\""
    },
    {
        "number": 1859,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    while n!= 0:\n        count += 1\n        for i in range(2, n+1):\n            if n % i == 0:\n                n -= i\n                break\n    return str(count)"
    },
    {
        "number": 1860,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    max_offices = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if '7' in str(i) and '8' in str(j):\n                max_offices += 1\n    return max_offices"
    },
    {
        "number": 1861,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    cards = [stdin.strip() for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if all(cards[i][l] == cards[j][l] == cards[k][l] for l in range(k)):\n                    count += 1\n    return count"
    },
    {
        "number": 1862,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    table = []\n    for i in range(n):\n        if i == 0:\n            table.append(x[i])\n        else:\n            if x[i] == x[i-1]:\n                table.append(x[i])\n            else:\n                table.append(x[i-1])\n    return max(table.count(i) for i in range(1, n+1))"
    },
    {
        "number": 1863,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    prices = []\n    for i in range(n):\n        a, g = map(int, stdin.readline().strip().split())\n        prices.append((a, g))\n    total_a = sum(a for a, g in prices)\n    total_g = sum(g for a, g in prices)\n    if abs(total_a - total_g) > 500:\n        return \"-1\"\n    if total_a > total_g:\n        return \"A\" * n\n    else:\n        return \"G\" * n"
    },
    {
        "number": 1864,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i] + a[j] + a[k] > 2000000:\n                    ans = max(ans, a[i] + a[j] + a[k])\n    return str(ans) if ans!= -1 else \"-1\""
    },
    {
        "number": 1865,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    swaps = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] > arr[j]:\n                swaps.append((i, j))\n                arr[i], arr[j] = arr[j], arr[i]\n    k = len(swaps)\n    result = f\"{k}\\n\"\n    for swap in swaps:\n        result += f\"{swap[0]} {swap[1]}\\n\"\n    return result"
    },
    {
        "number": 1866,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(range(1, n+1))\n    q = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                q += 1\n                a[i], a[j] = a[j], a[i]\n                break\n    print(q)\n    for i in range(q):\n        print(a.index(i+1)+1, a.index(i+1)+2)\n    return \"\""
    },
    {
        "number": 1867,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_count = 0\n    max_count_index = 0\n    count = 1\n    for i in range(1, n):\n        if a[i] == a[i-1]:\n            count += 1\n        else:\n            if count > max_count:\n                max_count = count\n                max_count_index = i - 1\n            count = 1\n    if count > max_count:\n        max_count = count\n        max_count_index = n - 1\n    l = max_count_index - max_count + 1\n    r = max_count_index\n    return f\"{l} {r}\""
    },
    {
        "number": 1868,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a_size = map(int, stdin.split())\n    b = list(map(int, stdin.readline().split()))\n    MOD = 998244353\n    dp = [[0] * (n+1) for _ in range(a_size+1)]\n    dp[0][0] = 1\n    for i in range(1, a_size+1):\n        for j in range(n+1):\n            dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n    ans = 0\n    for i in range(m):\n        k = b[i]\n        pr = dp[k][k]\n        su = dp[a_size-k][k]\n        ans = (ans + pr*su) % MOD\n    return ans"
    },
    {
        "number": 1869,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        count += a[i]\n        if count >= n:\n            return i + 1\n    return n"
    },
    {
        "number": 1870,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    t.sort()\n    count = 1\n    for i in range(1, n):\n        if t[i] - t[i-1] <= c:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 1871,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    c = list(map(int, stdin.split()))\n    c.sort()\n    ans = 0\n    for i in range(n):\n        ans += c[i] * max(x, 1)\n        x = max(x - 1, 1)\n    return str(ans)"
    },
    {
        "number": 1872,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    area = (n * (n - 3) * 3.141592653589793) / (2 * r)\n    return str(area)"
    },
    {
        "number": 1873,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(m):\n        for j in range(i+1, m):\n            for k in range(n):\n                if a[k] == i+1 or a[k] == j+1:\n                    count += 1\n    return count"
    },
    {
        "number": 1874,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l_3, l_4, l_5 = map(int, stdin.split())\n    v_3 = (3 * l_3 ** 2) / 2\n    v_4 = (4 * l_4 ** 2) / 3\n    v_5 = (5 * l_5 ** 2) / 4\n    return str(v_3 + v_4 + v_5)"
    },
    {
        "number": 1875,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    max_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                for l in range(k+1, n):\n                    area = abs((points[i][0] - points[j][0]) * (points[k][1] - points[l][1]) - (points[i][1] - points[j][1]) * (points[k][0] - points[l][0])) / 2\n                    if area > max_area:\n                        max_area = area\n    return str(max_area)"
    },
    {
        "number": 1876,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    edges = []\n    for i in range(n-1):\n        u, v, x = map(int, stdin.readline().split())\n        edges.append((u, v, x))\n    MOD = 10**9 + 7\n    dp = [[0] * (1 << k) for _ in range(n)]\n    dp[0][1] = 1\n    for i in range(1, n):\n        for j in range(1, 1 << k):\n            for e in edges:\n                if j & (1 << (e[0]-1)):\n                    continue\n                if j & (1 << (e[1]-1)):\n                    continue\n                if e[2] == 0:\n                    dp[i][j] = (dp[i][j] + dp[e[0]-1][j^(1<<e[0])]) % MOD\n                else:\n                    dp[i][j] = (dp[i][j] + dp[e[0]-1][j]) % MOD\n    ans = 0\n    for j in range(1, 1 << k):\n        if dp[n-1][j] == 1:\n            ans = (ans + dp[n-1][j]) % MOD\n    return str(ans)"
    },
    {
        "number": 1877,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    coins = 0\n    x, y = 0, 0\n    for move in s:\n        if move == 'U':\n            y += 1\n        elif move == 'R':\n            x += 1\n        if (x, y) == (0, 0):\n            continue\n        if x % 2 == 0 and y % 2 == 0:\n            coins += 1\n    return str(coins)"
    },
    {
        "number": 1878,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rectangles = []\n    for i in range(n):\n        x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n        rectangles.append((x1, y1, x2, y2))\n    table = [[0 for j in range(101)] for i in range(101)]\n    for x1, y1, x2, y2 in rectangles:\n        for i in range(x1, x2+1):\n            for j in range(y1, y2+1):\n                table[i][j] += 1\n    total = 0\n    for i in range(1, 101):\n        for j in range(1, 101):\n            total += table[i][j]\n    return str(total)"
    },
    {
        "number": 1879,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, s_x, s_y, e_x, e_y = map(int, stdin.split()[0:5])\n    wind_directions = stdin.split()[5:]\n    x, y = s_x, s_y\n    time = 0\n    for wind_direction in wind_directions:\n        if wind_direction == \"E\":\n            x += 1\n        elif wind_direction == \"S\":\n            y -= 1\n        elif wind_direction == \"W\":\n            x -= 1\n        elif wind_direction == \"N\":\n            y += 1\n        time += 1\n        if x == e_x and y == e_y:\n            return str(time)\n    return \"-1\""
    },
    {
        "number": 1880,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = int(stdin)\n    num = str(num)\n    num = list(num)\n    shuffle = num[0] + num[2] + num[4] + num[3] + num[1]\n    num = int(shuffle) ** 5\n    num = str(num)\n    return num[-5:]"
    },
    {
        "number": 1881,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    pixels = list(map(int, stdin.split()[2:]))\n    groups = {}\n    for i in range(256):\n        groups[i] = []\n    for i in range(n):\n        color = pixels[i]\n        for j in range(k):\n            if color >= j*255//k and color < (j+1)*255//k:\n                groups[j].append(color)\n                break\n    keys = sorted(groups.keys())\n    result = []\n    for i in range(n):\n        color = pixels[i]\n        for j in range(k):\n            if color >= j*255//k and color < (j+1)*255//k:\n                result.append(keys[j])\n                break\n    return''.join(map(str, result))"
    },
    {
        "number": 1882,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    a = [0] * n\n    t = [0] * n\n    for i in range(n):\n        a[i], t[i] = map(int, stdin.readline().split())\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n    ans = 0\n    for i in range(1, n + 1):\n        if dp[i] > ans:\n            ans = dp[i]\n    k = 0\n    for i in range(n):\n        if dp[i + 1] == ans:\n            k += 1\n    if k == 0:\n        return \"0\\n0\\n\"\n    p = [0] * k\n    j = 0\n    for i in range(n):\n        if dp[i + 1] == ans:\n            p[j] = i + 1\n            j += 1\n            if j == k:\n                break\n    return f\"{ans}\\n{k}\\n{' '.join(map(str, p))}\\n\""
    },
    {
        "number": 1883,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, types, ski_tracks = map(int, stdin.splitlines()[0].split()), list(map(int, stdin.splitlines()[1].split())), list(map(int, stdin.splitlines()[2].split()))\n    k = 0\n    for i in range(n):\n        if types[i] == 1:\n            k = i\n            break\n    if k == 0:\n        return \"0\"\n    for i in range(k):\n        if ski_tracks[i]!= 0:\n            return \"0\"\n    for i in range(k, n):\n        if types[i] == 1:\n            return \"0\"\n    return str(k) + \"\\n\" + \" \".join(map(str, range(1, n+1)))\n\nprint(solution(\"5\\n0 0 0 0 1\\n0 1 2 3 4\")) # Output: 5 1 2 3 4\nprint(solution(\"5\\n0 0 1 0 1\\n0 1 2 2 4\")) # Output: 2 4 5\nprint(solution(\"4\\n1 0 0 0\\n2 3 4 2\")) # Output: 1 1"
    },
    {
        "number": 1884,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x1, x2 = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:]))\n    if x1 > x2:\n        x1, x2 = x2, x1\n    if x1 > sum(c) or x2 > sum(c):\n        return \"No\"\n    for i in range(n):\n        if c[i] < x1:\n            return \"No\"\n    for i in range(n):\n        if c[i] < x2:\n            return \"No\"\n    for i in range(n):\n        if c[i] % x1 == 0:\n            k1 = c[i] // x1\n            break\n    for i in range(n):\n        if c[i] % x2 == 0:\n            k2 = c[i] // x2\n            break\n    if k1 * x1!= sum(c[:k1]):\n        return \"No\"\n    if k2 * x2!= sum(c[k1:k1+k2]):\n        return \"No\"\n    if k1 + k2 > n:\n        return \"No\"\n    ans = \"Yes\\n\" + str(k1) + \" \" + str(k2) + \"\\n\"\n    ans += \" \".join(map(str, range(1, k1+1))) + \"\\n\"\n    ans += \" \".join(map(str, range(k1+1, k1+k2+1)))\n    return ans"
    },
    {
        "number": 1885,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for k in range(1, n+1):\n                for l in range(1, n+1):\n                    for m in range(1, n+1):\n                        if i+j+k+l+m == n:\n                            count += 1\n    return str(count)"
    },
    {
        "number": 1886,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    return word.capitalize()"
    },
    {
        "number": 1887,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h1 = list(map(int, stdin.readline().strip().split()))\n    h2 = list(map(int, stdin.readline().strip().split()))\n    h = [h1, h2]\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = h1[i] + h2[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            dp[i][j] = max(dp[i][j-1], h1[i] + h2[j])\n    return dp[0][n-1]"
    },
    {
        "number": 1888,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    debts = [list(map(int, stdin.split())) for _ in range(m)]\n    graph = [[] for _ in range(n+1)]\n    for a, b, c in debts:\n        graph[a].append((b, c))\n        graph[b].append((a, -c))\n    visited = [False] * (n+1)\n    q = [(1, 0)]\n    ans = 0\n    while q:\n        node, debt = q.pop(0)\n        if visited[node]:\n            continue\n        visited[node] = True\n        ans += debt\n        for nei, weight in graph[node]:\n            q.append((nei, debt+weight))\n    return str(ans)"
    },
    {
        "number": 1889,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.readline().split())))\n    for i in range(q):\n        row, col = map(int, stdin.readline().split())\n        if grid[row-1][col-1] == 0:\n            grid[row-1][col-1] = 1\n        else:\n            grid[row-1][col-1] = 0\n        score = 0\n        for j in range(n):\n            count = 0\n            for k in range(m):\n                if grid[j][k] == 1:\n                    count += 1\n                else:\n                    count = 0\n                if count == 3:\n                    score += 1\n                    break\n        print(score)\n    return \"\""
    },
    {
        "number": 1890,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, k = map(int, stdin.split())\n    n = len(str(a)) * k\n    s = str(a) * k\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if i == j:\n                continue\n            if int(s[:i]) % 5 == 0 and int(s[j:]) % 5 == 0:\n                count += 1\n    return count % 1000000007"
    },
    {
        "number": 1891,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, A, B = map(int, stdin.split())\n    base = [False] * (2**n)\n    for i in range(k):\n        base[int(stdin.split()[i])-1] = True\n    power = 0\n    for i in range(2**n):\n        if base[i]:\n            if i < 2:\n                power += A\n            else:\n                power += B * base.count(True) * (2**(n-1))\n    return str(power)"
    },
    {
        "number": 1892,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    dp = [0] * (n+1)\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n+1):\n        if stdin[i-1] =='s':\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = (dp[i-1] + dp[i-2]) % (10**9 + 7)\n    return str(dp[n])"
    },
    {
        "number": 1893,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    return str(n * (1 + 1.000000011 ** t))"
    },
    {
        "number": 1894,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    floors = []\n    for i in range(n):\n        floors.append(list(stdin.readline().strip()))\n    if floors[-1][0]!= '.':\n        return \"Never\"\n    for i in range(n):\n        for j in range(m):\n            if floors[i][j] == '+':\n                return i * m + j + 1\n    return \"Never\""
    },
    {
        "number": 1895,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    events = []\n    for i in range(n):\n        event = stdin.split()[0]\n        if event == '1':\n            events.append(('change',))\n        else:\n            events.append(('visit', int(event[2:])))\n    events.sort(key=lambda x: x[1] if x[0] == 'visit' else float('inf'))\n    happy_friends = set()\n    for event in events:\n        if event[0] == 'change':\n            happy_friends = set()\n        else:\n            happy_friends.add(event[1])\n    return len(happy_friends)"
    },
    {
        "number": 1896,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    return (n * 6 + 1) ** 2\n\nprint(solution(\"2\")) # Output: 19"
    },
    {
        "number": 1897,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set(['I', 'E', 'A', 'O', 'U', 'Y'])\n    s = stdin.strip()\n    n = len(s)\n    simple_prettiness = sum(1 for c in s if c in vowels) / n\n    prettiness = sum(simple_prettiness for i in range(n))\n    return f\"{prettiness:.6f}\""
    },
    {
        "number": 1898,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    layers = ['hate'] * n\n    layers[0] = 'I hate'\n    return''.join(layers)"
    },
    {
        "number": 1899,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    segments = []\n    for i in range(s):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    segments.sort()\n    if segments[-1][1] < k:\n        return \"-1\"\n    if m > s:\n        return \"-1\"\n    if m == 1:\n        return str(segments[k-1][0])\n    if m == 2:\n        return str(max(segments[k-1][0], segments[k-2][0]))\n    if m == 3:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0]))\n    if m == 4:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0]))\n    if m == 5:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0]))\n    if m == 6:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0], segments[k-6][0]))\n    if m == 7:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0], segments[k-6][0], segments[k-7][0]))\n    if m == 8:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0], segments[k-6][0], segments[k-7][0], segments[k-8][0]))\n    if m == 9:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0], segments[k-6][0], segments[k-7][0], segments[k-8][0], segments[k-9][0]))\n    if m == 10:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0], segments[k-6][0], segments[k-7][0], segments[k-8][0], segments[k-9][0], segments[k-10][0]))\n    if m == 11:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0], segments[k-6][0], segments[k-7][0], segments[k-8][0], segments[k-9][0], segments[k-10][0], segments[k-11][0]))\n    if m == 12:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0], segments[k-6][0], segments[k-7][0], segments[k-8][0], segments[k-9][0], segments[k-10][0], segments[k-11][0], segments[k-12][0]))\n    if m == 13:\n        return str(max(segments[k-1][0], segments[k-2][0], segments[k-3][0], segments[k-4][0], segments[k-5][0], segments[k-6][0], segments[k-7][0], segments[k-8][0], segments[k-9][0], segments[k-10][0], segments[k-11][0], segments[k-12][0], segments[k-13][0]))\n    if m == 14:\n        return str(max"
    },
    {
        "number": 1900,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    teams = []\n    for i in range(m):\n        team = []\n        for j in range(k):\n            team.append(a.pop(0))\n        teams.append(team)\n    remaining = set(a)\n    for team in teams:\n        for i in range(k-1):\n            if team[i] == team[i+1]:\n                remaining.discard(team[i])\n    return len(remaining)"
    },
    {
        "number": 1901,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    c = list(map(int, stdin.readline().split()))\n    friends = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.readline().split())\n        friends[x-1].append(y-1)\n        friends[y-1].append(x-1)\n    visited = [False] * n\n    def dfs(i):\n        if visited[i]:\n            return 0\n        visited[i] = True\n        res = c[i]\n        for j in friends[i]:\n            res += dfs(j)\n        return res\n    res = 0\n    for i in range(n):\n        res = max(res, dfs(i))\n    return str(res)"
    },
    {
        "number": 1902,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # split the input into words\n    words = stdin.split()\n    # initialize the prefix and the number of clicks\n    prefix = \"\"\n    clicks = 0\n    # iterate over the words\n    for word in words:\n        # add the word to the prefix\n        prefix += word\n        # add the length of the word to the number of clicks\n        clicks += len(word)\n        # if the prefix is unique, add 1 to the number of clicks\n        if prefix in words:\n            clicks += 1\n        # add 1 to the number of clicks for the line feed\n        clicks += 1\n    # return the number of clicks\n    return str(clicks)"
    },
    {
        "number": 1903,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.split())\n    cups = []\n    for i in range(n):\n        c, w = map(int, stdin.split())\n        cups.append((c, w))\n    for i in range(m):\n        c, w = map(int, stdin.split())\n        cups.append((c, w))\n    cups.sort(key=lambda x: (-x[0], -x[1]))\n    total_significance = 0\n    for i in range(n + m):\n        if i < n:\n            if cups[i][1] > d:\n                return \"0\"\n            total_significance += cups[i][0]\n        else:\n            if cups[i][1] > d - sum(c[1] for c in cups[:n]):\n                return \"0\"\n            total_significance += cups[i][0]\n    return str(total_significance)"
    },
    {
        "number": 1904,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + 1\n    ans = dp[n][n]\n    for i in range(n):\n        ans = min(ans, dp[i][i+ans] + a[i])\n    return str(ans)"
    },
    {
        "number": 1905,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    for _ in range(q):\n        t, *args = map(int, stdin.split())\n        if t == 1:\n            r = args[0]\n            matrix[r-1] = matrix[r-1][1:] + matrix[r-1][:1]\n        elif t == 2:\n            c = args[0]\n            matrix = [row[1:] + row[:1] for i, row in enumerate(matrix) if i!= c-1]\n        else:\n            r, c, x = args\n            matrix[r-1][c-1] = x\n    return '\\n'.join([' '.join(map(str, row)) for row in matrix])"
    },
    {
        "number": 1906,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, n+1):\n        if i % 2!= 0 and i % 3!= 0 and i % 5!= 0 and i % 7!= 0 and i % 11!= 0:\n            count += 1\n    return count\n\nprint(solution(\"12\")) # Output: 2"
    },
    {
        "number": 1907,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ranges = []\n    for i in range(n):\n        x, y, r = map(int, stdin.readline().strip().split())\n        ranges.append((x, y, r))\n    ranges.sort(key=lambda x: x[2])\n    total_area = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (ranges[i][0]-ranges[j][0])**2 + (ranges[i][1]-ranges[j][1])**2 > (ranges[i][2]+ranges[j][2])**2:\n                total_area += (ranges[i][2]+ranges[j][2])**2 * 3.141592653589793\n    return str(total_area)"
    },
    {
        "number": 1908,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    w = list(map(int, stdin.split()[2:2+n]))\n    x = []\n    y = []\n    for i in range(m):\n        a, b = map(int, stdin.split()[2+n+2*i:2+n+2*i+2])\n        x.append(a)\n        y.append(b)\n    if sum(w) < m:\n        return \"DEAD\"\n    else:\n        order = []\n        for i in range(m):\n            if w[x[i]-1] > 0 and w[y[i]-1] > 0:\n                order.append(i+1)\n                w[x[i]-1] -= 1\n                w[y[i]-1] -= 1\n        if len(order) == m:\n            return \"ALIVE\\n\" + \" \".join(map(str, order))\n        else:\n            return \"DEAD\""
    },
    {
        "number": 1909,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    powers = list(map(int, stdin.readline().split()))\n    tasks = list(range(1, n+1))\n    total_power = sum(powers)\n    power_per_task = total_power // k\n    power_left = total_power % k\n    if power_left == 0:\n        return str(tasks[power_per_task-1])\n    else:\n        for i in range(power_per_task, n):\n            if powers[i] <= power_left:\n                power_left -= powers[i]\n                tasks.append(i+1)\n            else:\n                break\n        return str(tasks[-1])"
    },
    {
        "number": 1910,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for i in range(1, 2*n, 2):\n        count += 4**(i-1)\n    return count"
    },
    {
        "number": 1911,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if k == 1:\n        return 0\n    if k == n:\n        return sum(a)\n    dp = [float('inf')] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = min(dp[i-1], a[i])\n    ans = float('inf')\n    for i in range(k-1, n):\n        ans = min(ans, dp[i] - a[i-k+1])\n    return ans"
    },
    {
        "number": 1912,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        r, g, b, w = map(int, stdin.readline().strip().split())\n        if r == 0 and g == 0 and b == 0 and w == 0:\n            print(\"Yes\")\n        elif r == 0 or g == 0 or b == 0 or w == 0:\n            print(\"No\")\n        else:\n            if r % 2 == 0 and g % 2 == 0 and b % 2 == 0 and w % 2 == 0:\n                print(\"Yes\")\n            else:\n                print(\"No\")"
    },
    {
        "number": 1913,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    beautiful_numbers = [i for i in range(1, 10) if '1' * i in str(a[0])]\n    if len(beautiful_numbers) == 0:\n        return '0'\n    else:\n        return str(reduce(lambda x, y: x * y, [a[i] for i in range(n) if a[i] in beautiful_numbers]))"
    },
    {
        "number": 1914,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, n = stdin.split('\\n')\n    n = int(n)\n    s = [stdin.readline().strip() for _ in range(n)]\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += s[i].count(s[j])\n    return str(ans)"
    },
    {
        "number": 1915,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    table = [[1 for j in range(n+1)] for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            table[i][j] = table[i-1][j] + table[i][j-1]\n    return str(table[n][n])"
    },
    {
        "number": 1916,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    c = [a[i] & b[j] for i in range(n) for j in range(m)]\n    return str(min(c))"
    },
    {
        "number": 1917,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = [0] * n\n    f = 0\n    for i in range(n):\n        b[i] = min(a[i], k // (n - i))\n        f += b[i] * (a[i] - b[i] ** 2)\n        k -= b[i]\n    return''.join(map(str, b))"
    },
    {
        "number": 1918,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    s = stdin.readline().strip()\n    a = 0\n    b = 0\n    for i in range(n):\n        if s[i] == 'A':\n            a += p[i]\n        else:\n            b += p[i]\n    return max(a, b)"
    },
    {
        "number": 1919,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n % 2 == 0:\n        return \"2\"\n    else:\n        return \"1\""
    },
    {
        "number": 1920,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    friends = []\n    for i in range(n):\n        gender, a, b = stdin.readline().strip().split()\n        a, b = int(a), int(b)\n        friends.append((gender, a, b))\n\n    # sort by starting day\n    friends.sort(key=lambda x: x[1])\n\n    # count number of male and female friends\n    male_count = female_count = 0\n    for gender, a, b in friends:\n        if gender == 'M':\n            male_count += 1\n        else:\n            female_count += 1\n\n    # find maximum number of friends that can come\n    max_count = 0\n    for i in range(len(friends)):\n        gender, a, b = friends[i]\n        if gender == 'M':\n            # count number of female friends that can come before this male friend\n            j = i - 1\n            female_count = 0\n            while j >= 0 and friends[j][0] == 'F':\n                female_count += 1\n                j -= 1\n            # count number of male friends that can come after this male friend\n            k = i + 1\n            male_count = 0\n            while k < len(friends) and friends[k][0] == 'M':\n                male_count += 1\n                k += 1\n            # update maximum count\n            max_count = max(max_count, female_count + male_count)\n        else:\n            # count number of male friends that can come before this female friend\n            j = i - 1\n            male_count = 0\n            while j >= 0 and friends[j][0] == 'M':\n                male_count += 1\n                j -= 1\n            # count number of female friends that can come after this female friend\n            k = i + 1\n            female_count = 0\n            while k < len(friends) and friends[k][0] == 'F':\n                female_count += 1\n                k += 1\n            # update maximum count\n            max_count = max(max_count, male_count + female_count)\n\n    return str(max_count)"
    },
    {
        "number": 1921,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    s_x, s_y, f_x, f_y = map(int, stdin.split()[2:6])\n    x_list = []\n    y_list = []\n    for i in range(m):\n        x, y = map(int, stdin.split()[i*2+6:i*2+8])\n        x_list.append(x)\n        y_list.append(y)\n    # print(x_list, y_list)\n    time = 0\n    if s_x == f_x or s_y == f_y:\n        time = abs(s_x - f_x) + abs(s_y - f_y)\n    else:\n        time = max(abs(s_x - f_x), abs(s_y - f_y))\n    for x, y in zip(x_list, y_list):\n        if s_x == x or s_y == y:\n            time += 1\n    return str(time)"
    },
    {
        "number": 1922,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    return str(0)"
    },
    {
        "number": 1923,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    L = list(map(int, stdin.readline().strip().split()))\n\n    # Sort skewers by length\n    L.sort()\n\n    # Calculate maximum number of ingredients\n    max_ingredients = 0\n    for i in range(N):\n        max_ingredients += L[i]\n        if i < N-1:\n            max_ingredients += L[i+1]\n\n    return str(max_ingredients)"
    },
    {
        "number": 1924,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r1, c1, r2, c2 = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (c2+1) for _ in range(r2+1)]\n    dp[0][0] = 1\n    for i in range(r2+1):\n        for j in range(c2+1):\n            if i > 0:\n                dp[i][j] = (dp[i][j] + dp[i-1][j]) % MOD\n            if j > 0:\n                dp[i][j] = (dp[i][j] + dp[i][j-1]) % MOD\n    return str((dp[r2][c2] - dp[r1-1][c2] - dp[r2][c1-1] + dp[r1-1][c1-1]) % MOD)"
    },
    {
        "number": 1925,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, N = map(int, stdin.split())\n    max_value = 0\n    for x in range(1, N+1):\n        floor_x = x // B\n        floor_Ax = (A*x) // B\n        max_value = max(max_value, floor_x - floor_Ax)\n    return str(max_value)"
    },
    {
        "number": 1926,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    heap = [0] + a\n    heap_size = n + 1\n    for i in range(n // 2, 0, -1):\n        heapify(heap, i, heap_size)\n    result = []\n    for k in range(1, n):\n        heap_size -= 1\n        heap[1], heap[heap_size] = heap[heap_size], heap[1]\n        heapify(heap, 1, heap_size)\n        count = 0\n        for i in range(2, heap_size):\n            if heap[i] < heap[p(i, k)]:\n                count += 1\n        result.append(count)\n    return''.join(map(str, result))\n\ndef"
    },
    {
        "number": 1927,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    p = list(range(1, n+1))\n    ans = []\n    for j in range(m):\n        a_j = int(stdin.split()[j])\n        if a_j == p[0]:\n            continue\n        p.remove(a_j)\n        p.insert(0, a_j)\n        ans.append((p.index(a_j)+1, n-p.index(a_j)))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 1928,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    matrix = [[0] * m for _ in range(n)]\n    penalty = 0\n    for i in range(k):\n        candy_row, candy_col = map(int, input().split())\n        candy_row -= 1\n        candy_col -= 1\n        if matrix[candy_row][candy_col]!= 0:\n            return \"Lose\"\n        path = [(1, 1)]\n        visited = set()\n        while path[-1]!= (candy_row, candy_col):\n            row, col = path[-1]\n            for r, c in [(row-1, col), (row+1, col), (row, col-1), (row, col+1)]:\n                if 0 <= r < n and 0 <= c < m and (r, c) not in visited and (r-row)**2 + (c-col)**2 == 1:\n                    visited.add((r, c))\n                    path.append((r, c))\n        penalty += len(path)\n        matrix[candy_row][candy_col] = 1\n        print(\" \".join(f\"({r+1},{c+1})\" for r, c in path))\n    return penalty"
    },
    {
        "number": 1929,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t, c = map(int, stdin.split())\n    crimes = list(map(int, stdin.readline().split()))\n    dp = [[0] * (t+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(t+1):\n            if j >= crimes[i-1]:\n                dp[i][j] = dp[i-1][j] + dp[i-1][j-crimes[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][t]"
    },
    {
        "number": 1930,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    count = 0\n    for i in range(n):\n        if p[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if p[j] == -1:\n                continue\n            if p[i] > p[j]:\n                count += 1\n    Q = 1\n    P = count\n    for i in range(n):\n        if p[i] == -1:\n            continue\n        for j in range(i+1, n):\n            if p[j] == -1:\n                continue\n            if p[i] > p[j]:\n                P += 1\n                Q *= (n-i-1)*(n-j-1)\n    P *= pow(Q, -1, 998244353)\n    return str(P % 998244353)"
    },
    {
        "number": 1931,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(0)\n        else:\n            pyramid_count = 0\n            while n > 0:\n                pyramid_count += n // 2\n                n = n // 2\n            print(pyramid_count)\n    return \"\""
    },
    {
        "number": 1932,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    faces = 0\n    for i in range(n):\n        polyhedron = stdin.readline().strip()\n        if polyhedron == \"Tetrahedron\":\n            faces += 4\n        elif polyhedron == \"Cube\":\n            faces += 6\n        elif polyhedron == \"Octahedron\":\n            faces += 8\n        elif polyhedron == \"Dodecahedron\":\n            faces += 12\n        elif polyhedron == \"Icosahedron\":\n            faces += 20\n    return str(faces)"
    },
    {
        "number": 1933,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split())))\n    score = 0\n    replacements = 0\n    for j in range(m):\n        ones = []\n        for i in range(n):\n            if a[i][j] == 1:\n                ones.append(i)\n        if len(ones) == 0:\n            continue\n        i = ones[0]\n        for l in range(min(k, n - i + 1)):\n            if a[i+l][j] == 1:\n                score += 1\n        replacements += 1\n    return str(score) + \" \" + str(replacements)"
    },
    {
        "number": 1934,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    ans = []\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        if l > r:\n            ans.append(-1)\n            continue\n        min_dist = float('inf')\n        for j in range(l, r+1):\n            if a[j] == a[l-1]:\n                min_dist = 0\n                break\n            if a[j]!= a[l-1]:\n                min_dist = min(min_dist, abs(a[j]-a[l-1]))\n        ans.append(min_dist)\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 1935,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:2+m]))\n    g, r = map(int, stdin.split()[2+m:])\n    d.sort()\n    if d[0]!= 0 or d[-1]!= n:\n        return -1\n    if d[0] == 0 and d[-1] == n:\n        return 0\n    if d[0] == 0:\n        return d[-1] - d[0] + 1\n    if d[-1] == n:\n        return d[-1] - d[0] + 1\n    if d[0] < d[-1]:\n        return d[-1] - d[0] + 1\n    if d[0] > d[-1]:\n        return d[0] - d[-1] + 1"
    },
    {
        "number": 1936,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        l, r = map(int, stdin.readline().strip().split())\n        if l > r:\n            print(-1, -1)\n            continue\n        for x in range(l, r+1):\n            if r % x == 0 and l % x == 0:\n                y = r // x\n                if y < x:\n                    y = x\n                if y <= r:\n                    print(x, y)\n                    break\n        else:\n            print(-1, -1)"
    },
    {
        "number": 1937,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    b = list(map(int, stdin.split()[1:]))\n    a = [0] * n\n    for i in range(n // 2):\n        a[i] = b[i]\n        a[n - i - 1] = b[i]\n    if n % 2 == 1:\n        a[n // 2] = b[n // 2]\n    return''.join(map(str, a))"
    },
    {
        "number": 1938,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    intervals = []\n    for i in range(n):\n        l, r = map(int, stdin.split())\n        intervals.append((l, r))\n    intervals.sort()\n    ans = 0\n    for i in range(k):\n        for j in range(i+1, k):\n            l, r = intervals[i][0], intervals[j][1]\n            if l <= r:\n                ans += r - l + 1\n    return str(ans % (10**9 + 7))"
    },
    {
        "number": 1939,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    table = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            table[i][j] = (i + j + 1) % k\n    return '\\n'.join([' '.join(map(str, row)) for row in table])"
    },
    {
        "number": 1940,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    w = list(map(int, stdin.split()))\n    dp = [[0] * (k+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= w[i-1]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-w[i-1]] + 1)\n    return dp[n][k]"
    },
    {
        "number": 1941,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, n = map(int, stdin.split())\n    karafs = [A + (i - 1) * B for i in range(1, 1000001)]\n    for _ in range(n):\n        l, t, m = map(int, stdin.split())\n        eaten = set()\n        for i in range(l, len(karafs)):\n            if karafs[i] == 0:\n                break\n            if karafs[i] in eaten:\n                continue\n            eaten.add(karafs[i])\n            if len(eaten) > t:\n                break\n            if len(eaten) == m:\n                print(i)\n                break\n        else:\n            print(-1)"
    },
    {
        "number": 1942,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, l, r = map(int, stdin.readline().strip().split())\n        if l == r:\n            print(1)\n            continue\n        cycle = [i for i in range(1, n + 1)]\n        cycle += cycle[:l - 1]\n        cycle += cycle[r:]\n        cycle = cycle[:r - l + 1]\n        print(' '.join(map(str, cycle)))\n    return ''"
    },
    {
        "number": 1943,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    N = int(lines[0])\n    chances = [[int(x) for x in line.split()] for line in lines[1:]]\n\n    # compute expected score for each possible bracket\n    scores = []\n    for mask in range(1, 2**N):\n        score = 0\n        for i in range(N):\n            for j in range(N):\n                if mask & (1 << (i*N + j)):\n                    # team i plays against team j\n                    if i == j:\n                        score += 0\n                    else:\n                        score += chances[i][j] * (1 - chances[j][i])\n        scores.append(score)\n\n    # find maximum expected score\n    max_score = max(scores)\n\n    # compute absolute error\n    abs_error = abs(max_score - sum(scores)) / max(1, abs(sum(scores)))\n\n    # print result\n    return f'{max_score:.9f}\\n{abs_error:.9f}'"
    },
    {
        "number": 1944,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    laptops = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        laptops.append((a, b))\n    laptops.sort(key=lambda x: (-x[0], -x[1]))\n    if laptops[0][0] < laptops[1][0] and laptops[0][1] > laptops[1][1]:\n        return \"Happy Alex\"\n    else:\n        return \"Poor Alex\""
    },
    {
        "number": 1945,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    handles = {}\n    for i in range(q):\n        old, new = stdin.readline().strip().split()\n        if old not in handles:\n            handles[old] = new\n        else:\n            handles[new] = handles[old]\n    return str(len(handles)) + '\\n' + '\\n'.join(f'{k} {v}' for k, v in handles.items())"
    },
    {
        "number": 1946,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    x = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n\n    # sort the elements by their indices\n    a.sort()\n    b.sort()\n\n    # initialize the sets for both companies\n    chemforces = set()\n    topchemist = set()\n\n    # iterate over the elements and add them to the sets\n    for i in range(n):\n        chemforces.add(a[i])\n    for j in range(m):\n        topchemist.add(b[j])\n\n    # calculate the total income for each company\n    chemforces_income = sum(x[a.index(i)] for i in chemforces)\n    topchemist_income = sum(y[b.index(j)] for j in topchemist)\n\n    # calculate the total income for both companies\n    total_income = chemforces_income + topchemist_income\n\n    # remove the common elements from both sets\n    chemforces.difference_update(topchemist)\n    topchemist.difference_update(chemforces)\n\n    # calculate the total income for both companies after removing the common elements\n    chemforces_income = sum(x[a.index(i)] for i in chemforces)\n    topchemist_income = sum(y[b.index(j)] for j in topchemist)\n\n    # update the total income if removing the common elements gives a higher total income\n    total_income = max(total_income, chemforces_income + topchemist_income)\n\n    return str(total_income)"
    },
    {
        "number": 1947,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, l = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    res = []\n    for i in range(m):\n        t, p, d = map(int, stdin.split()[i*3+3:i*3+6])\n        if t == 0:\n            res.append(max(0, a[p-1]-l))\n        else:\n            a[p-1] += d\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 1948,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split())\n    graph = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n + 1)\n    q = [(1, 0)]\n    visited[1] = True\n    while q:\n        node, moves = q.pop(0)\n        if node == x:\n            return moves\n        for nei in graph[node]:\n            if not visited[nei]:\n                visited[nei] = True\n                q.append((nei, moves + 1))\n    return -1"
    },
    {
        "number": 1949,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    min_val = float('inf')\n    for i in range(n):\n        if a[i]!= 0 and a[i] < min_val:\n            min_val = a[i]\n    if min_val == float('inf'):\n        print(0)\n    else:\n        print(min_val)\n        for i in range(k):\n            min_idx = -1\n            for j in range(n):\n                if a[j]!= 0 and a[j] == min_val:\n                    min_idx = j\n                    break\n            if min_idx == -1:\n                break\n            a[min_idx] = 0\n            for j in range(n):\n                if a[j]!= 0:\n                    a[j] -= min_val\n            min_val = float('inf')\n            for j in range(n):\n                if a[j]!= 0 and a[j] < min_val:\n                    min_val = a[j]\n            print(min_val)\n    return ''"
    },
    {
        "number": 1950,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1] = a[i-1]\n    for i in range(2, n+1):\n        for j in range(2, n+1):\n            dp[i][j] = float('inf')\n            for k in range(1, j+1):\n                dp[i][j] = min(dp[i][j], dp[i-1][k] + dp[k][j-k] + sum(a[i-1:i-1+k]))\n    return dp[n][n]"
    },
    {
        "number": 1951,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    events = stdin.readlines()\n    shurikens = []\n    for event in events:\n        if event.startswith('+'):\n            shurikens.append(int(event.strip()))\n        else:\n            price = int(event.strip().split()[1])\n            if not shurikens or shurikens[-1] > price:\n                return \"NO\"\n            shurikens.pop()\n    if len(shurikens)!= n:\n        return \"NO\"\n    return \"YES\\n\" + \" \".join(map(str, shurikens))"
    },
    {
        "number": 1952,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    m = list(map(int, stdin.readline().split()))\n    c = list(map(int, stdin.readline().split()))\n\n    # sort the array sizes in descending order\n    m.sort(reverse=True)\n\n    # initialize the answer with the first testcase\n    ans = 1\n    testcase = [m[0]]\n\n    # iterate over the remaining array sizes\n    for i in range(1, n):\n        # if the current array size is greater than the limit for the current testcase\n        if m[i] > c[testcase[-1]]:\n            # start a new testcase\n            ans += 1\n            testcase = [m[i]]\n        else:\n            # add the current array to the current testcase\n            testcase.append(m[i])\n\n    # print the number of testcases and the sizes of arrays in each testcase\n    print(ans)\n    for i in range(ans):\n        print(len(testcase), end=' ')\n        print(*testcase)\n\n    return \"\""
    },
    {
        "number": 1953,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = list(map(int, stdin.readline().strip().split()))\n    t.sort()\n    ans = 0\n    for i in range(n):\n        ans += t[i]\n        if ans > t[i]:\n            ans = t[i]\n    return ans"
    },
    {
        "number": 1954,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n, f = map(int, stdin.readline().strip().split())\n        ans = 1\n        for j in range(1, f+1):\n            ans = (ans * (n-j+1)) // j\n        print(ans % (10**9 + 7))\n    return \"\""
    },
    {
        "number": 1955,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    days = list(map(int, stdin.split()[2:]))\n    subjects = list(map(int, stdin.split()[2+n:]))\n    exams = [0] * m\n    for i in range(n):\n        if days[i]!= 0:\n            exams[days[i]-1] = i+1\n    if exams.count(0) == m:\n        return -1\n    for i in range(m):\n        if exams[i] == 0:\n            return -1\n    for i in range(m):\n        if exams[i] > i+1:\n            return -1\n    for i in range(m):\n        if exams[i] == 0:\n            for j in range(i+1, m):\n                if exams[j] == 0:\n                    continue\n                if exams[j] < exams[i]:\n                    return -1\n                if exams[j] == exams[i] and subjects[j] > subjects[i]:\n                    return -1\n    return max(subjects)"
    },
    {
        "number": 1956,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    s = []\n    e = []\n    for i in range(t):\n        s_i, e_i = map(int, stdin.readline().strip().split())\n        s.append(s_i)\n        e.append(e_i)\n    # Lee can always win the first round\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose the last round\n    if s[-1] > e[-1]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always lose if he starts the game\n    if s[0] > e[0]:\n        return \"0 1\"\n    # Lee can always win if he starts the game\n    if s[0] > e[0]:\n        return \"1 0\"\n    # Lee can always"
    },
    {
        "number": 1957,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, A, B = map(int, stdin.split())\n    s = list(map(int, stdin.split()))\n    s.sort()\n    i = 0\n    while i < n and s[i] < B:\n        B -= s[i]\n        i += 1\n    return i"
    },
    {
        "number": 1958,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    apples = n // 2\n    for i in range(n):\n        if stdin.readline().strip() == \"halfplus\":\n            apples += 1\n    return apples * p"
    },
    {
        "number": 1959,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    if n % 2!= 0 or len(set(a))!= n:\n        return \"-1\"\n    even_count = sum(1 for x in a if x % 2 == 0)\n    odd_count = n - even_count\n    if odd_count > m:\n        return \"-1\"\n    exchanges = 0\n    for i in range(n):\n        if a[i] % 2 == 0:\n            if odd_count == 0:\n                break\n            exchanges += 1\n            a[i] = 2\n            odd_count -= 1\n        else:\n            if even_count == 0:\n                break\n            exchanges += 1\n            a[i] = 1\n            even_count -= 1\n    return str(exchanges) + \"\\n\" + \" \".join(map(str, a))"
    },
    {
        "number": 1960,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if a[i] > a[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    groups = [[] for _ in range(3)]\n    for i in range(n):\n        if dp[i] == 1:\n            groups[0].append(i)\n        elif dp[i] == max(dp):\n            groups[2].append(i)\n        else:\n            groups[1].append(i)\n    res = ''\n    for g in groups:\n        for i in g:\n            res += str(dp[i])\n    return res"
    },
    {
        "number": 1961,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.readline().strip()))\n    signature = [['.', '.', '.'], ['.', '#', '.'], ['.', '.', '.']]\n    for i in range(n-2):\n        for j in range(m-2):\n            if grid[i][j:j+3] == signature[0] and grid[i+1][j:j+3] == signature[1] and grid[i+2][j:j+3] == signature[2]:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 1962,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    if n*k < len(a):\n        return \"0\"\n    if n*k > len(a):\n        return \"0\"\n    if n == 1:\n        return str(sum(a))\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                dp[i][j] = a[i-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if i == j:\n                continue\n            if abs(dp[i][j] - dp[i-1][j]) > l:\n                return \"0\"\n    return str(dp[n][n])"
    },
    {
        "number": 1963,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    max_diff = 0\n    pairs = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if all(a[k] % a[j] == 0 for k in range(i, j+1)):\n                diff = j - i\n                if diff > max_diff:\n                    max_diff = diff\n                    pairs = [(i, j)]\n                elif diff == max_diff:\n                    pairs.append((i, j))\n                count += 1\n    return f\"{count} {max_diff}\\n{' '.join(str(pair[0]) for pair in pairs)}\""
    },
    {
        "number": 1964,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    k = list(map(int, stdin.readline().strip().split()))\n    m = []\n    for i in range(n):\n        m.append(list(map(int, stdin.readline().strip().split())))\n    min_time = float('inf')\n    for i in range(n):\n        time = 0\n        for j in range(k[i]):\n            time += m[i][j]*5 + 15\n        min_time = min(min_time, time)\n    return str(min_time)"
    },
    {
        "number": 1965,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        if x == 0:\n            print(0)\n            continue\n        if all(i == x for i in a):\n            print(1)\n            continue\n        if all(i > 0 for i in a):\n            print(n)\n            continue\n        if all(i < 0 for i in a):\n            print(n)\n            continue\n        if x > 0:\n            print(n)\n            continue\n        if x < 0:\n            print(n)\n            continue\n    return \"\""
    },
    {
        "number": 1966,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pieces = []\n    for i in range(4):\n        piece = []\n        for j in range(n):\n            line = stdin.readline().strip()\n            row = [int(x) for x in line]\n            piece.append(row)\n        pieces.append(piece)\n\n    # Check if pieces form a valid chessboard\n    for i in range(n):\n        for j in range(n):\n            color = pieces[0][i][j]\n            for k in range(1, 4):\n                if pieces[k][i][j]!= color:\n                    return \"0\"\n\n    # Check if all squares have correct color\n    for i in range(n):\n        for j in range(n):\n            color = pieces[0][i][j]\n            for k in range(1, 4):\n                if pieces[k][i][j]!= color:\n                    return \"0\"\n\n    # Check if all squares have correct size\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == 0 and j % 2 == 0:\n                return \"0\"\n            if i % 2 == 1 and j % 2 == 1:\n                return \"0\"\n\n    # Check if all squares have correct color\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == 0 and j % 2 == 0:\n                continue\n            if i % 2 == 1 and j % 2 == 1:\n                continue\n            if i % 2 == 0 and j % 2 == 1:\n                if pieces[0][i][j]!= pieces[1][i][j] or pieces[0][i][j]!= pieces[2][i][j] or pieces[0][i][j]!= pieces[3][i][j]:\n                    return \"0\"\n            if i % 2 == 1 and j % 2 == 0:\n                if pieces[0][i][j]!= pieces[1][i][j] or pieces[0][i][j]!= pieces[2][i][j] or pieces[0][i][j]!= pieces[3][i][j]:\n                    return \"0\"\n\n    # Check if all squares have correct color\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == 0 and j % 2 == 0:\n                continue\n            if i % 2 == 1 and j % 2 == 1:\n                continue\n            if i % 2 == 0 and j % 2 == 1:\n                if pieces[0][i][j]!= pieces[1][i][j] or pieces[0][i][j]!= pieces[2][i][j] or pieces[0][i][j]!= pieces[3][i][j]:\n                    return \"0\"\n            if i % 2 == 1 and j % 2 == 0:\n                if pieces[0][i][j]!= pieces[1][i][j] or pieces[0][i][j]!= pieces[2][i][j] or pieces[0][i][j]!= pieces[3][i][j]:\n                    return \"0\"\n\n    # Check if all squares have correct color\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == 0 and j % 2 == 0:\n                continue\n            if i % 2 == 1 and j % 2 == 1:\n                continue\n            if i % 2 == 0 and j % 2 == 1:\n                if pieces[0][i][j]!= pieces[1][i][j] or pieces[0][i][j]!= pieces[2][i][j] or pieces[0][i][j]!= pieces[3][i][j]:\n                    return \"0\"\n            if i % 2 == 1 and j % 2 == 0:\n                if pieces[0][i][j]!= pieces[1][i][j] or pieces[0][i][j]!= pieces[2][i][j] or pieces[0][i][j]!= pieces[3][i][j]:\n                    return \"0\"\n\n    # Check if all squares have correct color\n    for i in range(n):\n        for j in range(n):\n            if i % 2 == 0 and j % 2 == 0:\n                continue\n            if i % 2 == 1 and j % 2 == 1:\n                continue\n            if i % 2 == 0 and j % 2 == 1:\n                if pieces["
    },
    {
        "number": 1967,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, h = map(int, stdin.split())\n    image = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n\n    # rotate 90 degrees clockwise\n    image = list(zip(*image[::-1]))\n\n    # flip horizontally\n    image = [list(reversed(row)) for row in image]\n\n    # zoom in twice\n    image = [[char * 2 for char in row] for row in image]\n\n    # print result\n    result = '\\n'.join([''.join(row) for row in image])\n    return result"
    },
    {
        "number": 1968,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, v = map(int, stdin.split())\n    sellers = []\n    for i in range(n):\n        k = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n        sellers.append((k, prices))\n    sellers.sort(key=lambda x: x[1][-1])\n    p = 0\n    q = []\n    for k, prices in sellers:\n        if prices[-1] <= v:\n            p += 1\n            q.append(k)\n            v -= prices[-1]\n        else:\n            break\n    return f\"{p}\\n{' '.join(map(str, q))}\""
    },
    {
        "number": 1969,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(stdin.readline().strip()))\n    count = 0\n    for i in range(1, n - 1):\n        for j in range(1, n - 1):\n            if matrix[i][j] == 'X' and matrix[i - 1][j - 1] == 'X' and matrix[i - 1][j + 1] == 'X' and matrix[i + 1][j - 1] == 'X' and matrix[i + 1][j + 1] == 'X':\n                count += 1\n    return str(count)"
    },
    {
        "number": 1970,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    boards = stdin.strip().split('\\n\\n')\n    for board in boards:\n        rows = board.strip().split('\\n')\n        for row in rows:\n            if 'K' not in row:\n                return 'NO'\n    return 'YES'"
    },
    {
        "number": 1971,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    q = [0] * n\n    for i in range(n):\n        q[p[i]-1] = i+1\n    for i in range(n):\n        if q[i] == 0:\n            return \"-1\"\n    return \" \".join(map(str, q))"
    },
    {
        "number": 1972,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    a = [0] * 500001\n    for i in range(q):\n        t, x, y = map(int, stdin.readline().strip().split())\n        if t == 1:\n            a[x] += y\n        else:\n            ans = 0\n            for i in range(1, 500001):\n                if i % x == y:\n                    ans += a[i]\n            print(ans)\n    return \"\""
    },
    {
        "number": 1973,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    u = list(map(int, stdin.split()[1:]))\n    streak = 1\n    max_streak = 1\n    for i in range(1, n):\n        if u[i] == u[i-1]:\n            streak += 1\n        else:\n            streak = 1\n        max_streak = max(max_streak, streak)\n    return max_streak"
    },
    {
        "number": 1974,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    robbers = []\n    for i in range(n):\n        a, b = map(int, stdin.split())\n        robbers.append((a, b))\n    searchlights = []\n    for i in range(m):\n        c, d = map(int, stdin.split())\n        searchlights.append((c, d))\n    safe = True\n    for i in range(n):\n        for j in range(m):\n            if robbers[i][0] <= searchlights[j][0] and robbers[i][1] <= searchlights[j][1]:\n                safe = False\n                break\n        if not safe:\n            break\n    if safe:\n        return \"0\"\n    else:\n        return \"3\""
    },
    {
        "number": 1975,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    k = 0\n    dancing_pairs = []\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if (i, j) not in dancing_pairs:\n                dancing_pairs.append((i, j))\n                k += 1\n                if k == 1:\n                    print(k)\n                    print(i, j)\n                else:\n                    print(i, j)\n    return k"
    },
    {
        "number": 1976,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, q = map(int, stdin.readline().split())\n    broken_pixels = []\n    for i in range(q):\n        x, y, t = map(int, stdin.readline().split())\n        broken_pixels.append((x, y, t))\n    broken_pixels.sort(key=lambda x: x[2])\n    for i in range(q):\n        x, y, t = broken_pixels[i]\n        if x <= n-k+1 and y <= m-k+1:\n            if all(t < broken_pixels[j][2] for j in range(i+1, q) if broken_pixels[j][0] >= x and broken_pixels[j][0] <= x+k-1 and broken_pixels[j][1] >= y and broken_pixels[j][1] <= y+k-1):\n                return str(t)\n    return \"-1\""
    },
    {
        "number": 1977,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(stdin.readline().strip()))\n    paths = []\n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                paths.append([matrix[i][j]])\n            elif i == 0:\n                paths[-1].append(matrix[i][j])\n            elif j == 0:\n                paths[-1].append(matrix[i][j])\n            else:\n                paths[-1].append(matrix[i][j])\n                paths.append([matrix[i][j]])\n    paths.sort()\n    for i in range(len(paths)):\n        paths[i] = ''.join(paths[i])\n    for i in range(len(paths)):\n        if len(paths[i]) == 2*n - 1:\n            return paths[i]\n    return ''"
    },
    {
        "number": 1978,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [list(map(int, stdin.readline().strip())) for _ in range(n)]\n    path = list(map(int, stdin.readline().split()))\n    n = len(path)\n    dp = [[False] * n for _ in range(1 << n)]\n    for i in range(n):\n        dp[1 << i][i] = True\n    for mask in range(1 << n):\n        for i in range(n):\n            if not dp[mask][i]:\n                continue\n            for j in range(n):\n                if not dp[mask][j] and graph[path[i]][path[j]]:\n                    dp[mask | (1 << j)][j] = True\n    for mask in range(1 << n):\n        if dp[mask][n - 1]:\n            break\n    else:\n        return \"0\\n\"\n    k = bin(mask).count(\"1\")\n    res = [path[i] for i in range(n) if mask & (1 << i)]\n    return f\"{k}\\n{' '.join(map(str, res))}\\n\""
    },
    {
        "number": 1979,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            count += 1\n    return count"
    },
    {
        "number": 1980,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i + 1] = dp[i] + a + int(stdin.readline().split()[1])\n    for i in range(n - 1, 0, -1):\n        dp[i] = max(dp[i], dp[i + 1] + (dp[i + 1] - dp[i]) ** 2)\n    return str(dp[1])"
    },
    {
        "number": 1981,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    edges = []\n    for i in range(n - 1):\n        x, y = map(int, stdin.readline().split())\n        edges.append((x, y))\n    from collections import defaultdict\n    graph = defaultdict(list)\n    for x, y in edges:\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = set()\n    def dfs(node, parent, count):\n        if node in visited:\n            return\n        visited.add(node)\n        if a[node] == 1:\n            count += 1\n        if count > m:\n            return\n        for child in graph[node]:\n            if child!= parent:\n                dfs(child, node, count)\n    count = 0\n    for i in range(1, n + 1):\n        if i not in visited:\n            dfs(i, -1, 0)\n            count += 1\n    return count"
    },
    {
        "number": 1982,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if k == 1:\n            if n % 2 == 1:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if n % 2 == 0 or k > n:\n                print(\"NO\")\n            else:\n                odds = set()\n                for i in range(1, n+1, 2):\n                    if i not in odds:\n                        odds.add(i)\n                        if len(odds) == k:\n                            print(\"YES\")\n                            break\n                else:\n                    print(\"NO\")\n    return \"\""
    },
    {
        "number": 1983,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = a * n\n        dp = [1] * n\n        for i in range(1, n):\n            for j in range(i):\n                if a[i] > a[j]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        ans = max(dp)\n        print(ans)"
    },
    {
        "number": 1984,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, w = map(int, stdin.split()[0:4])\n    levels = []\n    for i in range(k):\n        levels.append(stdin.split()[i+4])\n    # print(levels)\n    # print(n, m, k, w)\n    # print(levels[0])\n    # print(levels[1])\n    # print(levels[2])\n    # print(levels[3])\n    # print(levels[4])\n    # print(levels[5])\n    # print(levels[6])\n    # print(levels[7])\n    # print(levels[8])\n    # print(levels[9])\n    # print(levels[10])\n    # print(levels[11])\n    # print(levels[12])\n    # print(levels[13])\n    # print(levels[14])\n    # print(levels[15])\n    # print(levels[16])\n    # print(levels[17])\n    # print(levels[18])\n    # print(levels[19])\n    # print(levels[20])\n    # print(levels[21])\n    # print(levels[22])\n    # print(levels[23])\n    # print(levels[24])\n    # print(levels[25])\n    # print(levels[26])\n    # print(levels[27])\n    # print(levels[28])\n    # print(levels[29])\n    # print(levels[30])\n    # print(levels[31])\n    # print(levels[32])\n    # print(levels[33])\n    # print(levels[34])\n    # print(levels[35])\n    # print(levels[36])\n    # print(levels[37])\n    # print(levels[38])\n    # print(levels[39])\n    # print(levels[40])\n    # print(levels[41])\n    # print(levels[42])\n    # print(levels[43])\n    # print(levels[44])\n    # print(levels[45])\n    # print(levels[46])\n    # print(levels[47])\n    # print(levels[48])\n    # print(levels[49])\n    # print(levels[50])\n    # print(levels[51])\n    # print(levels[52])\n    # print(levels[53])\n    # print(levels[54])\n    # print(levels[55])\n    # print(levels[56])\n    # print(levels[57])\n    # print(levels[58])\n    # print(levels[59])\n    # print(levels[60])\n    # print(levels[61])\n    # print(levels[62])\n    # print(levels[63])\n    # print(levels[64])\n    # print(levels[65])\n    # print(levels[66])\n    # print(levels[67])\n    # print(levels[68])\n    # print(levels[69])\n    # print(levels[70])\n    # print(levels[71])\n    # print(levels[72])\n    # print(levels[73])\n    # print(levels[74])\n    # print(levels[75])\n    # print(levels[76])\n    # print(levels[77])\n    # print(levels[78])\n    # print(levels[79])\n    # print(levels[80])\n    # print(levels[81])\n    # print(levels[82])\n    # print(levels[83])\n    # print(levels[84])\n    # print(levels[85])\n    # print(levels[86])\n    # print(levels[87])\n    # print(levels[88])\n    # print(levels[89])\n    # print(levels[90])\n    # print(levels[91])\n    # print(levels[92])\n    # print(levels[93])\n    # print(levels[94])\n    # print(levels[95])\n    # print(levels[96])\n    # print(levels[97])\n    # print(levels[98])\n    # print(levels[99])\n    # print(levels[100])\n    # print(levels[101])\n    # print(levels[102])\n    # print(levels[103])\n    # print(levels[104])\n    # print(levels[105])\n    # print(levels[106])"
    },
    {
        "number": 1985,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, n = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+k]))\n    b = list(map(int, stdin.split()[2+k:]))\n    b.sort()\n    if n == 0:\n        return \"0\"\n    if n == 1:\n        return str(max(0, a[0]+b[0]))\n    dp = [0]*(n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(k):\n            if a[j] + b[i-1] >= 0:\n                dp[i] += dp[i-1]\n    return str(dp[n])"
    },
    {
        "number": 1986,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    restaurants = []\n    for i in range(n):\n        f, t = map(int, stdin.split())\n        restaurants.append((f, t))\n    max_joy = -1\n    for i in range(n):\n        for j in range(i+1, n):\n            if restaurants[i][1] + restaurants[j][1] <= k:\n                max_joy = max(max_joy, restaurants[i][0] + restaurants[j][0])\n            else:\n                max_joy = max(max_joy, restaurants[i][0] - (restaurants[i][1] + restaurants[j][1] - k))\n    return str(max_joy)"
    },
    {
        "number": 1987,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c1, c2 = map(int, stdin.split())\n    pupils = [i for i in range(n) if stdin[i] == '0']\n    adults = [i for i in range(n) if stdin[i] == '1']\n    groups = []\n    for pupil in pupils:\n        group = [pupil]\n        for adult in adults:\n            if adult!= pupil:\n                group.append(adult)\n                if len(group) == 2:\n                    groups.append(group)\n                    break\n    total_price = 0\n    for group in groups:\n        size = len(group)\n        price = c1 + c2 * (size - 1) ** 2\n        total_price += price\n    return str(total_price)"
    },
    {
        "number": 1988,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        k = 1\n        while True:\n            if k > n:\n                break\n            new_s = s[:k][::-1] + s[k:]\n            if new_s < s:\n                s = new_s\n                k += 1\n            else:\n                break\n        print(s)\n        print(k-1)"
    },
    {
        "number": 1989,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n    return count"
    },
    {
        "number": 1990,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n\n    # initialize variables\n    colors = [0] * n\n    color_count = 0\n    color_map = {}\n\n    # iterate through commands\n    for i in range(n):\n        # move cursor left\n        if s[i] == 'L':\n            if i == 0:\n                continue\n            i -= 1\n        # move cursor right\n        elif s[i] == 'R':\n            i += 1\n        # write character\n        else:\n            # check if character is a bracket\n            if s[i] in ['(', ')']:\n                # check if bracket is nested\n                if s[i] == ')' and s[color_map[i-1]] == '(':\n                    # paint bracket in different color\n                    if i not in color_map:\n                        color_map[i] = color_count\n                        color_count += 1\n                    if color_map[i-1] not in color_map:\n                        color_map[color_map[i-1]] = color_count\n                        color_count += 1\n                # check if bracket is not nested\n                else:\n                    # paint bracket in different color\n                    if i not in color_map:\n                        color_map[i] = color_count\n                        color_count += 1\n            # check if character is a letter\n            else:\n                # check if current text is valid\n                if i == 0 or s[i-1] in ['(', ')']:\n                    # check if next character is a bracket\n                    if i+1 < n and s[i+1] in ['(', ')']:\n                        # check if next bracket is nested\n                        if s[i+1] == ')' and s[color_map[i]] == '(':\n                            # paint brackets in different colors\n                            if i not in color_map:\n                                color_map[i] = color_count\n                                color_count += 1\n                            if color_map[i+1] not in color_map:\n                                color_map[color_map[i+1]] = color_count\n                                color_count += 1\n                        # check if next bracket is not nested\n                        else:\n                            # paint brackets in different colors\n                            if i not in color_map:\n                                color_map[i] = color_count\n                                color_count += 1\n                            if i+1 not in color_map:\n                                color_map[i+1] = color_count\n                                color_count += 1\n                    # check if next character is a letter\n                    else:\n                        # check if next character is a letter\n                        if i+1 < n and s[i+1] not in ['(', ')']:\n                            # paint brackets in different colors\n                            if i not in color_map:\n                                color_map[i] = color_count\n                                color_count += 1\n                            if i+1 not in color_map:\n                                color_map[i+1] = color_count\n                                color_count += 1\n                        # check if next character is a bracket\n                        else:\n                            # paint brackets in same color\n                            if i not in color_map:\n                                color_map[i] = color_count\n                                color_count += 1\n                # check if current text is not valid\n                else:\n                    return '-1'\n\n        # check if current text is valid\n        if i == n-1 or s[i+1] in ['(', ')']:\n            # check if last character is a bracket\n            if s[i] == ')' and s[color_map[i]] == '(':\n                # paint brackets in different colors\n                if i not in color_map:\n                    color_map[i] = color_count\n                    color_count += 1\n                if color_map[i] not in color_map:\n                    color_map[color_map[i]] = color_count\n                    color_count += 1\n            # check if last character is a letter\n            else:\n                # check if last character is a letter\n                if s[i] not in ['(', ')']:\n                    # paint brackets in different colors\n                    if i not in color_map:\n                        color_map[i] = color_count\n                        color_count += 1\n                # check if last character is a bracket\n                else:\n                    # paint brackets in same color\n                    if i not in color_map:\n                        color_map[i] = color_count\n                        color_count += 1\n\n        # check if current text is valid\n        if i == 0 or s[i-1] in ['(', ')']:\n            # check if first character is a bracket\n            if s[i] == ')' and s[color_map[i]] == '(':\n                # paint brackets in different colors\n                if i not in color_map:\n                    color_map[i] = color_count\n                    color_"
    },
    {
        "number": 1991,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        exchanges = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if a[j] > a[k]:\n                    a[j], a[k] = a[k], a[j]\n                    exchanges += 1\n        print(exchanges)"
    },
    {
        "number": 1992,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:3+n]))\n    b = list(map(int, stdin.split()[3+n:]))\n    count = 0\n    for i in b:\n        count += a.index(i)\n        if a.index(i) == 0:\n            count -= 1\n        a[a.index(i)], a[a.index(i)-1] = a[a.index(i)-1], a[a.index(i)]\n    return count"
    },
    {
        "number": 1993,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    field = [list(line.strip()) for line in stdin]\n    ans = [[0]*m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if field[i][j] == '*':\n                visited = set()\n                stack = [(i, j)]\n                while stack:\n                    x, y = stack.pop()\n                    if (x, y) in visited:\n                        continue\n                    visited.add((x, y))\n                    for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                        nx, ny = x+dx, y+dy\n                        if 0 <= nx < n and 0 <= ny < m and field[nx][ny] == '.' and (nx, ny) not in visited:\n                            stack.append((nx, ny))\n                ans[i][j] = len(visited) % 10\n    return '\\n'.join([''.join(map(str, row)) for row in ans])"
    },
    {
        "number": 1994,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    prefix_count = [0] * n\n    suffix_count = [0] * n\n    for i in range(n):\n        prefix_count[i] = suffix_count[i] = 1\n        for j in range(i):\n            if s[j:i+1] == s[i:i+1]:\n                prefix_count[i] += prefix_count[j]\n            if s[i:j+1] == s[i:j+1]:\n                suffix_count[i] += suffix_count[j]\n    result = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if s[i:j] == s[n-j+i:n-i+j]:\n                result.append((j-i, prefix_count[i-1] * suffix_count[n-j+i-1]))\n    result.sort()\n    print(len(result))\n    for l, c in result:\n        print(l, c)\n    return \"\""
    },
    {
        "number": 1995,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, m = stdin.split('\\n')\n    m = int(m)\n    for i in range(m):\n        l, r, k = map(int, stdin.readline().split())\n        s = s[:l-1] + s[l-1:r] + s[l-1] + s[r:]\n        s = s[-k:] + s[:-k]\n    return s"
    },
    {
        "number": 1996,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    shocks = 0\n    for i in range(n):\n        action = stdin.readline().strip()\n        if action[0] == \".\":\n            word = action[2:]\n            if word.count(selected_letter) > 0:\n                shocks += 1\n        elif action[0] == \"!\":\n            word = action[2:]\n            if word.count(selected_letter) > 0:\n                shocks += 1\n        elif action[0] == \"?\":\n            guess = action[2]\n            if guess == selected_letter:\n                break\n    return shocks\n\nselected_letter = \"c\"\nprint(solution(stdin))"
    },
    {
        "number": 1997,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, edges = map(int, stdin.split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    leaves = [i for i in range(1, n+1) if len(adj[i]) == 1]\n    def dfs(node, parent):\n        if len(adj[node]) == 1:\n            return node\n        for child in adj[node]:\n            if child!= parent:\n                return dfs(child, node)\n    def max_result(node):\n        if len(adj[node]) == 1:\n            return node\n        children = [child for child in adj[node] if child!= parent]\n        max_child = max(children, key=lambda x: max_result(x))\n        return max_child\n    def min_result(node):\n        if len(adj[node]) == 1:\n            return node\n        children = [child for child in adj[node] if child!= parent]\n        min_child = min(children, key=lambda x: min_result(x))\n        return min_child\n    max_score = 0\n    min_score = float('inf')\n    for leaf in leaves:\n        parent = dfs(leaf, None)\n        max_score = max(max_score, max_result(leaf))\n        min_score = min(min_score, min_result(leaf))\n    return f\"{max_score} {min_score}\""
    },
    {
        "number": 1998,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, k = map(int, stdin.split())\n    ships = []\n    for i in range(a):\n        start = int(stdin.readline().strip().split()[0])\n        ships.append((start, start+b-1))\n    shots = [int(x) for x in stdin.readline().strip()]\n    hits = [i for i in range(n) if shots[i] == 1]\n    for ship in ships:\n        if ship[0] in hits or ship[1] in hits:\n            continue\n        else:\n            return \"Impossible\"\n    min_cells = n\n    for i in range(n):\n        if shots[i] == 0:\n            cells = [i]\n            for j in range(i+1, n):\n                if shots[j] == 0:\n                    cells.append(j)\n                else:\n                    break\n            if len(cells) >= min_cells:\n                continue\n            for cell in cells:\n                if all(cell < ship[0] or cell > ship[1] for ship in ships):\n                    min_cells = min(min_cells, len(cells))\n                    break\n    if min_cells == n:\n        return \"Impossible\"\n    else:\n        return str(min_cells) + \"\\n\" + \" \".join(str(x) for x in hits)"
    },
    {
        "number": 1999,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    while count < n:\n        x = min(arr)\n        if arr.count(x) >= 2:\n            i = arr.index(x)\n            j = arr.index(x, i+1)\n            arr[i:j+1] = [2*x]\n            count += j - i + 1\n        else:\n            break\n    return str(count) + '\\n' +''.join(map(str, arr))"
    },
    {
        "number": 2000,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (a[i] + a[j]) & (a[i] + a[j] - 1) == 0:\n                count += 1\n    return count"
    },
    {
        "number": 2001,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    parts = list(map(int, stdin.readline().strip()))\n    queries = []\n    for _ in range(q):\n        l, r = map(int, stdin.readline().strip().split())\n        queries.append((l-1, r-1))\n\n    MOD = 10**9 + 7\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = (dp[i-1] + parts[i]) % MOD\n\n    for l, r in queries:\n        ans = dp[r]\n        if l > 0:\n            ans = (ans - dp[l-1]) % MOD\n        print(ans)"
    },
    {
        "number": 2002,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2003,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    A = set()\n    for i in range(q):\n        query, x = stdin.readline().strip().split()\n        x = int(x)\n        if query == '+':\n            A.add(x)\n        elif query == '-':\n            A.discard(x)\n        else:\n            ans = 0\n            for y in A:\n                ans = max(ans, x ^ y)\n            print(ans)\n    return ''"
    },
    {
        "number": 2004,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    tanks = [0] * n\n    for i in range(n):\n        tanks[i] = int(stdin.readline().strip())\n    tanks = [0] + tanks + [0]\n    dp = [0] * (n + 2)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + tanks[i]\n    for i in range(n, 0, -1):\n        dp[i] = min(dp[i], dp[i + 1])\n    ans = dp[1]\n    bombs = []\n    for i in range(1, n + 1):\n        if dp[i] > dp[i + 1]:\n            ans -= 1\n            bombs.append(i)\n    print(ans)\n    print(*bombs)\n    return \"\""
    },
    {
        "number": 2005,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, n_1, n_2 = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:]))\n    a.sort(reverse=True)\n    res = 0\n    for i in range(n_1):\n        res += a[i]\n    for i in range(n_1, n_1 + n_2):\n        res += a[i]\n    return str(res)"
    },
    {
        "number": 2006,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    field = []\n    for i in range(n):\n        field.append(list(stdin.readline().strip()))\n    moves = 0\n    for i in range(n):\n        if field[i][0] == 'G' and field[i][1] == 'S':\n            for j in range(m-2):\n                if field[i][j+2] == 'G':\n                    moves += 1\n                    break\n    if moves == 0:\n        return -1\n    else:\n        return moves"
    },
    {
        "number": 2007,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    s = stdin.readline().strip()\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.readline().split())\n        graph[x-1].append(y-1)\n    visited = [False] * n\n    value = [0] * n\n    def dfs(node, prev):\n        visited[node] = True\n        for neighbor in graph[node]:\n            if neighbor == prev:\n                continue\n            if not visited[neighbor]:\n                dfs(neighbor, node)\n        value[node] = s.count(s[node])\n    dfs(0, -1)\n    max_value = max(value)\n    if max_value == 0:\n        return -1\n    return max_value"
    },
    {
        "number": 2008,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n    dissatisfaction = [a[i]*(i-1) + b[i]*(n-i) for i in range(n)]\n    min_dissatisfaction = sum(dissatisfaction)\n    for i in range(n):\n        for j in range(i+1, n):\n            dissatisfaction[i], dissatisfaction[j] = dissatisfaction[j], dissatisfaction[i]\n            if sum(dissatisfaction) < min_dissatisfaction:\n                min_dissatisfaction = sum(dissatisfaction)\n            dissatisfaction[i], dissatisfaction[j] = dissatisfaction[j], dissatisfaction[i]\n    return str(min_dissatisfaction)"
    },
    {
        "number": 2009,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    r1, c1 = map(int, stdin.readline().strip().split())\n    r2, c2 = map(int, stdin.readline().strip().split())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.readline().strip())))\n\n    # check if r1, c1 and r2, c2 are valid\n    if grid[r1-1][c1-1] == 1 or grid[r2-1][c2-1] == 1:\n        return \"Invalid input\"\n\n    # check if r1, c1 and r2, c2 are adjacent\n    if abs(r1-r2) + abs(c1-c2)!= 1:\n        return \"Invalid input\"\n\n    # check if r1, c1 and r2, c2 are land\n    if grid[r1-1][c1-1] == 0 or grid[r2-1][c2-1] == 0:\n        return \"Invalid input\"\n\n    # check if there is a tunnel between r1, c1 and r2, c2\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0 and (abs(i-r1) + abs(j-c1) == 1 or abs(i-r2) + abs(j-c2) == 1):\n                return \"Invalid input\"\n\n    # calculate the minimum cost of creating a tunnel\n    min_cost = float('inf')\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 0 and (abs(i-r1) + abs(j-c1) == 1 or abs(i-r2) + abs(j-c2) == 1):\n                min_cost = min(min_cost, (i-r1)**2 + (j-c1)**2)\n\n    return str(min_cost)"
    },
    {
        "number": 2010,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(m):\n        t, *args = map(int, stdin.split())\n        if t == 1:\n            v, x = args\n            a[v-1] = x\n        elif t == 2:\n            y = args[0]\n            a = [x+y for x in a]\n        else:\n            q = args[0]\n            print(a[q-1])\n    return \"\""
    },
    {
        "number": 2011,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    debts = {}\n    for i in range(m):\n        u, v, d = map(int, stdin.split())\n        if u not in debts:\n            debts[u] = {}\n        if v not in debts:\n            debts[v] = {}\n        debts[u][v] = d\n        debts[v][u] = 0\n    for i in range(n):\n        if i not in debts:\n            debts[i] = {}\n    for i in range(n):\n        for j in range(i+1, n):\n            if j not in debts[i]:\n                debts[i][j] = 0\n            if i not in debts[j]:\n                debts[j][i] = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if i not in debts[j] or j not in debts[k]:\n                    continue\n                if debts[i][j] > debts[j][k]:\n                    z = min(debts[i][j], debts[j][k])\n                    debts[i][j] -= z\n                    debts[j][k] -= z\n                    debts[i][k] = debts[i][j] + debts[j][k]\n                elif debts[j][k] > debts[i][j]:\n                    z = min(debts[j][k], debts[i][j])\n                    debts[i][j] -= z\n                    debts[j][k] -= z\n                    debts[i][k] = debts[i][j] + debts[j][k]\n    total_debt = sum(sum(debts[i].values()) for i in range(n))\n    result = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if i not in debts[j]:\n                continue\n            result.append((i, j, debts[i][j]))\n    return f\"{len(result)}\\n\" + \"\\n\".join(f\"{u} {v} {d}\" for u, v, d in result)"
    },
    {
        "number": 2012,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    c = list(map(int, stdin.readline().strip().split()))\n    s = \"\"\n    for i in range(n):\n        s += chr(97 + i) * c[i]\n    return s"
    },
    {
        "number": 2013,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    chips = []\n    for i in range(k):\n        sx, sy = map(int, stdin.split()[0:2])\n        fx, fy = map(int, stdin.split()[0:2])\n        chips.append((sx, sy, fx, fy))\n\n    visited = [[False for j in range(m+1)] for i in range(n+1)]\n    for i in range(k):\n        sx, sy, fx, fy = chips[i]\n        visited[sx][sy] = True\n        visited[fx][fy] = True\n\n    def dfs(sx, sy, fx, fy, visited, path):\n        if (sx, sy) == (fx, fy):\n            return True\n        visited[sx][sy] = True\n        for dx, dy in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            nx, ny = sx + dx, sy + dy\n            if 1 <= nx <= n and 1 <= ny <= m and not visited[nx][ny]:\n                if dfs(nx, ny, fx, fy, visited, path + [(nx, ny)]):\n                    return True\n        visited[sx][sy] = False\n        return False\n\n    for i in range(k):\n        sx, sy, fx, fy = chips[i]\n        if not visited[sx][sy]:\n            path = []\n            if dfs(sx, sy, fx, fy, visited, path):\n                print(len(path))\n                print(''.join([''.join(['L' if (x, y) == (sx, sy) else 'R' if (x, y) == (fx, fy) else 'D' if y < sy else 'U' for y in range(1, m+1)]) for x in range(1, n+1)]))\n                return\n            else:\n                print(-1)\n                return"
    },
    {
        "number": 2014,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    permutations = []\n    for i in range(k):\n        permutation = list(map(int, stdin.readline().split()))\n        permutations.append(permutation)\n    longest_common_subsequence = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if all(permutation[i-1] <= permutation[j-1] for permutation in permutations):\n                longest_common_subsequence.append(j-i)\n    return max(longest_common_subsequence)"
    },
    {
        "number": 2015,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        r, g, b = map(int, stdin.readline().strip().split())\n        if r >= 2 and g >= 2 and b >= 2:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 2016,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, m = map(int, stdin.split())\n    spells = []\n    for i in range(q):\n        k, a, b = map(int, stdin.split())\n        if k == 1:\n            spells.append((a, b))\n        else:\n            t, h = a, b\n            for x, y in spells:\n                if h <= 0:\n                    break\n                t = max(t, x // y)\n                h -= x * t\n            if h <= 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 2017,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    seq = list(range(1, n+1))\n    for _ in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        seq[a-1], seq[b-1] = seq[b-1], seq[a-1]\n    inversions = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if seq[i] > seq[j]:\n                inversions += 1\n    return inversions"
    },
    {
        "number": 2018,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    for i in range(q):\n        s_x, s_y, e_x, e_y = map(int, stdin.readline().split())\n        if s_x == e_x:\n            if s_y == e_y:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif s_x == 1:\n            if s_y == e_y:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            if s_y == e_y:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 2019,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        if len(s) % 2 == 1:\n            print(\"NET\")\n            continue\n        alice_win = True\n        for j in range(0, len(s), 2):\n            if s[j] == s[j+1]:\n                alice_win = False\n                break\n        if alice_win:\n            print(\"DA\")\n        else:\n            print(\"NET\")"
    },
    {
        "number": 2020,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    segments = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if points[i][0] == points[j][0]:\n                segments.append((points[i][0], points[i][1], points[j][1]))\n            elif points[i][1] == points[j][1]:\n                segments.append((points[i][1], points[i][0], points[j][0]))\n    segments.sort()\n    count = 1\n    prev_end = segments[0][1]\n    for i in range(1, len(segments)):\n        if segments[i][0] > prev_end:\n            count += 1\n            prev_end = segments[i][1]\n    return str(count)"
    },
    {
        "number": 2021,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    m, q = map(int, stdin.readline().split())\n    q = list(map(int, stdin.readline().split()))\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a[i - 1]\n    ans = [0] * m\n    for i in range(m):\n        ans[i] = dp[q[i]]\n        for j in range(q[i], n):\n            ans[i] = min(ans[i], dp[j + 1])\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 2022,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    cycle = []\n    def dfs(u, parent):\n        visited[u] = True\n        for v in graph[u]:\n            if v == parent:\n                continue\n            if visited[v]:\n                return True\n            if dfs(v, u):\n                return True\n            cycle.append(v)\n        return False\n    for i in range(1, n+1):\n        if not visited[i]:\n            if dfs(i, -1):\n                continue\n            if len(cycle) <= k:\n                print(2)\n                print(len(cycle))\n                print(*cycle)\n                return\n            else:\n                print(1)\n                print(k//2)\n                print(i)\n                return\n    print(1)\n    print(k//2)\n    print(1)\n    return"
    },
    {
        "number": 2023,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    for i in range(m):\n        t, x, y, k = map(int, stdin.readline().split())\n        if t == 1:\n            for j in range(k):\n                b[y+j] += a[x+j]\n        else:\n            print(b[x-1])\n    return \"\""
    },
    {
        "number": 2024,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                if a[i-1] >= 2*a[j-1] and a[i-1] >= 2*a[k-1]:\n                    count += 1\n                elif a[i-1] <= a[j-1] and a[i-1] <= a[k-1]:\n                    count += 1\n    return count % 998244353"
    },
    {
        "number": 2025,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        if n < 2:\n            print(-1)\n        else:\n            count = 0\n            i = 2\n            while i <= n:\n                if n % i == 0:\n                    count += 1\n                    n //= i\n                else:\n                    i += 1\n            print(count)\n    return \"\""
    },
    {
        "number": 2026,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    moves = stdin.readline().strip()\n    x, y = 0, 0\n    visited = set()\n    for move in moves:\n        if move == 'L':\n            x -= 1\n        elif move == 'R':\n            x += 1\n        elif move == 'U':\n            y += 1\n        elif move == 'D':\n            y -= 1\n        visited.add((x, y))\n    return len(visited)"
    },
    {
        "number": 2027,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    b = [0] * n\n    b[0] = a[0]\n    for i in range(1, n):\n        b[i] = b[i-1] + a[i] - i\n    return''.join(map(str, b))"
    },
    {
        "number": 2028,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    seats = []\n    for i in range(n):\n        current, desired = map(int, stdin.readline().strip().split())\n        seats.append((current, desired))\n\n    # Count number of possible assignments\n    count = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            if seats[i][0] == seats[j][0] or seats[i][0] == seats[j][1] or seats[i][1] == seats[j][0] or seats[i][1] == seats[j][1]:\n                count *= 2\n            else:\n                count *= 1\n    return str(count % 1000000007)"
    },
    {
        "number": 2029,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    edges = [list(map(int, stdin.split())) for _ in range(n-1)]\n    graph = [[] for _ in range(n)]\n    for a, b in edges:\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    dist = [float('inf')] * n\n    dist[0] = 0\n    visited = [False] * n\n    stack = [(0, 0)]\n    while stack:\n        u, d = stack.pop()\n        if visited[u]:\n            continue\n        visited[u] = True\n        for v in graph[u]:\n            if dist[v] > dist[u] + 1:\n                dist[v] = dist[u] + 1\n                stack.append((v, dist[v]))\n    diameter = max(dist)\n    if s == 0:\n        return str(diameter)\n    if s == n-1:\n        return str(diameter/2)\n    if s == n:\n        return str(0)\n    if s == n*(n-1)//2:\n        return str(diameter/2)\n    if s == n*(n-1):\n        return str(0)\n    if s == n*(n-1)+1:\n        return str(diameter/2)\n    if s == n*(n-1)+2:\n        return str(diameter/2)\n    if s == n*(n-1)+3:\n        return str(diameter/2)\n    if s == n*(n-1)+4:\n        return str(diameter/2)\n    if s == n*(n-1)+5:\n        return str(diameter/2)\n    if s == n*(n-1)+6:\n        return str(diameter/2)\n    if s == n*(n-1)+7:\n        return str(diameter/2)\n    if s == n*(n-1)+8:\n        return str(diameter/2)\n    if s == n*(n-1)+9:\n        return str(diameter/2)\n    if s == n*(n-1)+10:\n        return str(diameter/2)\n    if s == n*(n-1)+11:\n        return str(diameter/2)\n    if s == n*(n-1)+12:\n        return str(diameter/2)\n    if s == n*(n-1)+13:\n        return str(diameter/2)\n    if s == n*(n-1)+14:\n        return str(diameter/2)\n    if s == n*(n-1)+15:\n        return str(diameter/2)\n    if s == n*(n-1)+16:\n        return str(diameter/2)\n    if s == n*(n-1)+17:\n        return str(diameter/2)\n    if s == n*(n-1)+18:\n        return str(diameter/2)\n    if s == n*(n-1)+19:\n        return str(diameter/2)\n    if s == n*(n-1)+20:\n        return str(diameter/2)\n    if s == n*(n-1)+21:\n        return str(diameter/2)\n    if s == n*(n-1)+22:\n        return str(diameter/2)\n    if s == n*(n-1)+23:\n        return str(diameter/2)\n    if s == n*(n-1)+24:\n        return str(diameter/2)\n    if s == n*(n-1)+25:\n        return str(diameter/2)\n    if s == n*(n-1)+26:\n        return str(diameter/2)\n    if s == n*(n-1)+27:\n        return str(diameter/2)\n    if s == n*(n-1)+28:\n        return str(diameter/2)\n    if s == n*(n-1)+29:\n        return str(diameter/2)\n    if s == n*(n-1)+30:\n        return str(diameter/2)\n    if s == n*(n-1)+31:\n        return str(diameter/2)\n    if s == n*(n-1)+32:\n        return str(diameter/2)\n    if s == n*(n-1)+33:\n        return str(diameter/2)\n    if s == n*(n-1)+34:\n        return str(diameter/2)\n    if s == n*(n-1)+35:\n        return str(diameter/2)\n    if s == n*(n-1)+36:\n        return str(diameter/2)\n   "
    },
    {
        "number": 2030,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    max_probs = list(map(float, stdin.readline().strip().split()))\n    min_probs = list(map(float, stdin.readline().strip().split()))\n\n    if abs(sum(max_probs) - 1) > 1e-6 or abs(sum(min_probs) - 1) > 1e-6:\n        return \"Invalid input\"\n\n    max_dist = [0] * (n + 1)\n    min_dist = [0] * (n + 1)\n\n    for i in range(1, n + 1):\n        max_dist[i] = max_probs[i - 1] + max_dist[i - 1]\n        min_dist[i] = min_probs[i - 1] + min_dist[i - 1]\n\n    return \" \".join(map(str, max_dist)) + \"\\n\" + \" \".join(map(str, min_dist))\n"
    },
    {
        "number": 2031,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    ans = []\n    for _ in range(m):\n        k, pos = map(int, stdin.readline().split())\n        subseq = a[:k]\n        subseq.sort()\n        ans.append(subseq[pos-1])\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 2032,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    castles = []\n    for i in range(n):\n        a, b, c = map(int, stdin.split())\n        castles.append((a, b, c))\n    portals = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        portals.append((u, v))\n    castles.sort(key=lambda x: x[0])\n    portals.sort(key=lambda x: x[1])\n    army = k\n    score = 0\n    for i in range(n):\n        a, b, c = castles[i]\n        if army < a:\n            return -1\n        army += b\n        score += c\n        for j in range(i + 1, n):\n            if castles[j][0] <= a:\n                break\n            if j == i + 1 or castles[j][0] > castles[j - 1][0]:\n                for portal in portals:\n                    if portal[0] == i + 1 and portal[1] == j + 1:\n                        army -= 1\n                        break\n        if army < 0:\n            return -1\n    return score"
    },
    {
        "number": 2033,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    roads = set()\n    for i in range(m):\n        u, v = map(int, stdin.split()[0:2])\n        roads.add((u, v))\n        roads.add((v, u))\n    k = int(stdin.split()[0])\n    path = list(map(int, stdin.split()[0:k]))\n    rebuilds = 0\n    for i in range(k - 1):\n        if (path[i], path[i + 1]) not in roads:\n            rebuilds += 1\n    return f\"{rebuilds} {rebuilds}\""
    },
    {
        "number": 2034,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        x, y = map(int, stdin.split())\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = [False] * (n+1)\n    def dfs(node):\n        visited[node] = True\n        for nei in graph[node]:\n            if not visited[nei]:\n                dfs(nei)\n    count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(i)\n            count += 1\n    return count"
    },
    {
        "number": 2035,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s_x, s_y = map(int, stdin.split()[0:3])\n    x = []\n    y = []\n    for i in range(n):\n        x_i, y_i = map(int, stdin.split()[0:2])\n        x.append(x_i)\n        y.append(y_i)\n    # calculate distance from school to each house\n    dist = []\n    for i in range(n):\n        dist.append(abs(s_x - x[i]) + abs(s_y - y[i]))\n    # find the maximum number of students that will buy shawarmas\n    c = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (x[i] - s_x) * (y[j] - s_y) == (x[j] - s_x) * (y[i] - s_y):\n                c += 1\n    # find the optimal location for the tent\n    p_x = 0\n    p_y = 0\n    max_dist = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (x[i] - s_x) * (y[j] - s_y) == (x[j] - s_x) * (y[i] - s_y):\n                d = abs(x[i] - x[j]) + abs(y[i] - y[j])\n                if d > max_dist:\n                    max_dist = d\n                    p_x = (x[i] + x[j]) // 2\n                    p_y = (y[i] + y[j]) // 2\n    return str(c) + '\\n' + str(p_x) +'' + str(p_y)"
    },
    {
        "number": 2036,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, sx, sy = map(int, stdin.split())\n    visited = set()\n    stack = [(sx, sy)]\n    while stack:\n        x, y = stack.pop()\n        if (x, y) in visited:\n            continue\n        visited.add((x, y))\n        print(x, y)\n        if x > 1:\n            stack.append((x-1, y))\n        if x < n:\n            stack.append((x+1, y))\n        if y > 1:\n            stack.append((x, y-1))\n        if y < m:\n            stack.append((x, y+1))\n    return \"\""
    },
    {
        "number": 2037,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    difficulties = list(map(int, stdin.split()))\n    result = \"\"\n    for i in range(m):\n        if i == 0 or difficulties[i]!= difficulties[i-1]:\n            result += \"1\"\n        else:\n            result += \"0\"\n    return result"
    },
    {
        "number": 2038,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    p = list(map(int, stdin.split()[1:]))\n    m = 0\n    for i in range(n):\n        for j in range(i+2, n, 2):\n            if abs(i-j) >= n//2:\n                p[i], p[j] = p[j], p[i]\n                m += 1\n                if m == 5*n:\n                    break\n        if m == 5*n:\n            break\n    print(m)\n    for i in range(m):\n        print(p[i//2], p[i//2+1])"
    },
    {
        "number": 2039,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(1, n-1):\n        if a[i] < a[i-1] and a[i] < a[i+1]:\n            count += 1\n        elif a[i] > a[i-1] and a[i] > a[i+1]:\n            count += 1\n    return count"
    },
    {
        "number": 2040,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = [0] * n\n    a[0] = 1\n    for i in range(1, n):\n        a[i] = a[i-1] * 10 + 1\n    for i in range(n):\n        a[i] += b[i] - 1\n    return '\\n'.join(map(str, a))"
    },
    {
        "number": 2041,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    ans = []\n    for _ in range(m):\n        k, pos = map(int, stdin.readline().split())\n        subseq = a[:k]\n        subseq.sort()\n        ans.append(subseq[pos-1])\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 2042,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    museum = [list(stdin.readline().strip()) for _ in range(n)]\n    start_positions = [tuple(map(int, stdin.readline().split())) for _ in range(k)]\n\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < m and museum[x][y] == '.'\n\n    def bfs(x, y):\n        visited = set()\n        queue = [(x, y)]\n        while queue:\n            curr_x, curr_y = queue.pop(0)\n            if (curr_x, curr_y) in visited:\n                continue\n            visited.add((curr_x, curr_y))\n            if curr_x > 0 and museum[curr_x-1][curr_y] == '.' and (curr_x-1, curr_y) not in visited:\n                queue.append((curr_x-1, curr_y))\n            if curr_x < n-1 and museum[curr_x+1][curr_y] == '.' and (curr_x+1, curr_y) not in visited:\n                queue.append((curr_x+1, curr_y))\n            if curr_y > 0 and museum[curr_x][curr_y-1] == '.' and (curr_x, curr_y-1) not in visited:\n                queue.append((curr_x, curr_y-1))\n            if curr_y < m-1 and museum[curr_x][curr_y+1] == '.' and (curr_x, curr_y+1) not in visited:\n                queue.append((curr_x, curr_y+1))\n        return len(visited)\n\n    max_pictures = []\n    for x, y in start_positions:\n        max_pictures.append(bfs(x, y))\n    return '\\n'.join(map(str, max_pictures))"
    },
    {
        "number": 2043,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split()[0]\n    t = stdin.split()[1]\n    n = len(t)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if t[i-1] == s[j-1]:\n                dp[i][j] = dp[i-1][j-1] + dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][n]"
    },
    {
        "number": 2044,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    t = [0] * n\n    for i in range(n):\n        t[i] = (a[i] + m - 1) // m\n    return''.join(map(str, t))"
    },
    {
        "number": 2045,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    compressed_word = \"\"\n    for i in range(n):\n        compressed_word += words[i][::-1]\n    return compressed_word[::-1]"
    },
    {
        "number": 2046,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    snacks = list(map(int, stdin.split()[1:]))\n    snacktower = []\n    for i in range(n):\n        if not snacktower or snacks[i] <= snacktower[-1]:\n            snacktower.append(snacks[i])\n    for i in range(n):\n        if snacks[i] > snacktower[-1]:\n            snacktower.append(snacks[i])\n    return '\\n'.join(map(str, snacktower))"
    },
    {
        "number": 2047,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = list(map(int, stdin.readline().strip().split()))\n    for i in range(n - 1):\n        x, k = list(map(int, stdin.readline().strip().split()))\n        b[x - 1] -= k\n        a[i] -= k\n    if all(a[i] <= b[i] for i in range(n)):\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 2048,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    sizes = list(map(int, stdin.readline().strip().split()))\n    costs = list(map(int, stdin.readline().strip().split()))\n\n    # sort sizes and costs\n    sizes.sort()\n    costs.sort()\n\n    # check for valid triples\n    for i in range(n-2):\n        if sizes[i] < sizes[i+1] < sizes[i+2]:\n            return str(costs[i] + costs[i+1] + costs[i+2])\n\n    # no valid triples found\n    return \"-1\""
    },
    {
        "number": 2049,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        sub_a = a[l-1:r]\n        if all(sub_a[j] < sub_a[j+1] for j in range(len(sub_a)-1)) and all(sub_a[j] > sub_a[j+1] for j in range(len(sub_a)-1)):\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 2050,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    m = 1\n    while True:\n        if all(k % i == 0 for i in range(2, m+1)):\n            break\n        m += 1\n    sets = []\n    for i in range(n):\n        set_ = []\n        for j in range(k):\n            set_.append(m+j)\n        sets.append(set_)\n    return f\"{m}\\n\" + \"\\n\".join(\" \".join(map(str, set_)) for set_ in sets)"
    },
    {
        "number": 2051,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split()[0:3])\n    c = list(map(int, stdin.split()[3:3+n]))\n    instructions = []\n    for i in range(m):\n        l, r = map(int, stdin.split()[3+n+2*i:3+n+2*i+2])\n        instructions.append((l, r))\n    colors = set(c)\n    for i in range(m):\n        l, r = instructions[i]\n        if len(colors) == 1:\n            break\n        colors.remove(c[l-1])\n        colors.remove(c[r-1])\n    return len(colors)"
    },
    {
        "number": 2052,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    w, l = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * w\n    dp[0] = 1\n    for i in range(1, w):\n        for j in range(i):\n            if a[j] > 0 and i - j <= l:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return dp[w-1]"
    },
    {
        "number": 2053,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()[1:]))\n    b = list(map(int, stdin.split()[1:]))\n    n = len(a)\n    m = len(b)\n    s_a = sum(a)\n    s_b = sum(b)\n    v = abs(s_a - s_b)\n    k = 0\n    swaps = []\n    for i in range(n):\n        for j in range(m):\n            if a[i]!= b[j]:\n                a[i], b[j] = b[j], a[i]\n                s_a = sum(a)\n                s_b = sum(b)\n                new_v = abs(s_a - s_b)\n                if new_v < v:\n                    v = new_v\n                    k = 0\n                    swaps = [(i+1, j+1)]\n                elif new_v == v:\n                    k += 1\n                    swaps.append((i+1, j+1))\n                a[i], b[j] = b[j], a[i]\n    if k == 0:\n        return str(v)\n    else:\n        return str(v) + \"\\n\" + str(k) + \"\\n\" + \"\\n\".join(map(str, swaps))"
    },
    {
        "number": 2054,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a >= 2 and b >= 1:\n            print(1)\n        elif a >= 1 and b >= 2:\n            print(1)\n        else:\n            print(0)\n    return \"\""
    },
    {
        "number": 2055,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        if sum(b) < sum(a):\n            print(\"NO\")\n        else:\n            print(\"YES\")\n    return \"\""
    },
    {
        "number": 2056,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            a[i] &= a[j]\n            a[j] ^= a[i]\n            max_sum = max(max_sum, a[i]**2 + a[j]**2)\n    return str(max_sum)"
    },
    {
        "number": 2057,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    t = list(map(int, stdin.split()[1:]))\n    rooms = set()\n    for i in range(n):\n        if t[i] == 0:\n            rooms.add(i)\n    return len(rooms)"
    },
    {
        "number": 2058,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split('\\n')\n    n = len(a)\n    ans = 0\n    for i in range(len(b) - n + 1):\n        if b[i:i+n] == a:\n            ans += sum(1 for j in range(n) if b[i+j]!= a[j])\n    return str(ans)"
    },
    {
        "number": 2059,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if k*abs(i-j) > min(a[i], a[j]):\n                k = min(a[i], a[j]) // abs(i-j)\n    return str(k)"
    },
    {
        "number": 2060,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        x = int(stdin.readline().strip())\n        if x % 3 == 0 and x // 3 <= 7:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 2061,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    map_ = [list(line.strip()) for line in stdin.readlines()]\n    lakes = []\n    for i in range(n):\n        for j in range(m):\n            if map_[i][j] == '*':\n                continue\n            if not lakes:\n                lakes.append([(i, j)])\n            else:\n                added = False\n                for lake in lakes:\n                    if (i, j) in lake:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x, y) for x, y in lake if x > 0 and y > 0 and x < n-1 and y < m-1]:\n                        continue\n                    if (i, j) in [(x,"
    },
    {
        "number": 2062,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort(reverse=True)\n    total_power = sum(a)\n    max_power = 0\n    for i in range(n):\n        if a[i] > max_power:\n            max_power = a[i]\n            total_power -= max_power\n        else:\n            total_power -= a[i]\n    return str(total_power)"
    },
    {
        "number": 2063,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, w = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    if w == 1:\n        return str(a[0])\n    if w == n:\n        return str(a[-1])\n    if w > n:\n        return str(a[0])\n    if m == 1:\n        return str(a[w-1])\n    if m == n:\n        return str(a[n-w])\n    if m > n:\n        return str(a[0])\n    if w == 2:\n        return str(max(a[0], a[1]))\n    if w == 3:\n        return str(max(a[0], a[1], a[2]))\n    if w == 4:\n        return str(max(a[0], a[1], a[2], a[3]))\n    if w == 5:\n        return str(max(a[0], a[1], a[2], a[3], a[4]))\n    if w == 6:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5]))\n    if w == 7:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6]))\n    if w == 8:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]))\n    if w == 9:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]))\n    if w == 10:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9]))\n    if w == 11:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10]))\n    if w == 12:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11]))\n    if w == 13:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12]))\n    if w == 14:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13]))\n    if w == 15:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14]))\n    if w == 16:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]))\n    if w == 17:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15], a[16]))\n    if w == 18:\n        return str(max(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7"
    },
    {
        "number": 2064,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    return str(7**(n-1))"
    },
    {
        "number": 2065,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    family = [[] for _ in range(n+1)]\n    for i in range(m):\n        p, q = map(int, stdin.split()[i*2:i*2+2])\n        family[p].append(q)\n        family[q].append(p)\n    wish = list(map(int, stdin.split()[m*2:]))\n    candidates = []\n    for i in range(1, n+1):\n        if i not in wish:\n            continue\n        if not family[i]:\n            return \"-1\"\n        for j in family[i]:\n            if j in wish:\n                candidates.append(j)\n                break\n    if len(candidates)!= len(set(candidates)):\n        return \"-1\"\n    return str(len(candidates)) + \"\\n\" + \"\\n\".join(map(str, candidates))"
    },
    {
        "number": 2066,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        s = stdin.readline().strip()\n        n = len(s)\n        if n == 1:\n            print(s)\n            continue\n        ugly_pairs = set()\n        for i in range(n-1):\n            if s[i] == 'a' and s[i+1] == 'b':\n                ugly_pairs.add((i, i+1))\n            elif s[i] == 'b' and s[i+1] == 'a':\n                ugly_pairs.add((i, i+1))\n            elif s[i] == 'a' and s[i+1] == 'c':\n                ugly_pairs.add((i, i+1))\n            elif s[i] == 'c' and s[i+1] == 'a':\n                ugly_pairs.add((i, i+1))\n            elif s[i] == 'b' and s[i+1] == 'c':\n                ugly_pairs.add((i, i+1))\n            elif s[i] == 'c' and s[i+1] == 'b':\n                ugly_pairs.add((i, i+1))\n        if len(ugly_pairs) == 0:\n            print(s)\n        else:\n            for i in range(n):\n                if (i, i+1) not in ugly_pairs:\n                    print(s[:i] + s[i+1] + s[i] + s[i+2:], end='\\n')\n                    break\n            else:\n                print(\"No answer\")"
    },
    {
        "number": 2067,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    vertical = set(map(int, stdin.readline().split()))\n    horizontal = set()\n    for _ in range(m):\n        x1, x2, y = map(int, stdin.readline().split())\n        horizontal.add((x1, x2, y))\n    for x1, x2, y in horizontal:\n        for x in range(x1, x2+1):\n            if x in vertical:\n                return \"NO\"\n    return \"YES\""
    },
    {
        "number": 2068,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    reposts = [line.strip().split() for line in stdin]\n    graph = {}\n    for name1, _, name2 in reposts:\n        if name1 not in graph:\n            graph[name1] = set()\n        graph[name1].add(name2)\n    visited = set()\n    max_length = 0\n    def dfs(name):\n        nonlocal max_length\n        visited.add(name)\n        if name == \"Polycarp\":\n            max_length = max(max_length, len(visited))\n        for neighbor in graph.get(name, []):\n            if neighbor not in visited:\n                dfs(neighbor)\n        visited.remove(name)\n    dfs(\"Polycarp\")\n    return str(max_length)"
    },
    {
        "number": 2069,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    foe_pairs = []\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        foe_pairs.append((a-1, b-1))\n    intervals = []\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if (i, j) not in foe_pairs and (j, i) not in foe_pairs:\n                intervals.append((i, j))\n    return str(len(intervals))"
    },
    {
        "number": 2070,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    x = list(map(int, stdin.readline().split()))\n    s = stdin.readline().strip()\n\n    # initialize variables\n    count = 0\n    sum_x = 0\n    n = len(s)\n\n    # loop through all substrings of s\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # check if substring is interesting to B\n            if s[i] == s[j-1] and j-i > 1:\n                count += 1\n                # calculate sum of values of all letters except for the first and the last one\n                sum_x += sum(x[ord(c)-ord('a')] for c in s[i+1:j-1])\n\n    # print answer\n    print(count)\n    return str(sum_x)"
    },
    {
        "number": 2071,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = a[0] + b[0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + a[i]\n        dp[i][0] = dp[i-1][0] + b[i]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + a[i] + b[j]\n    return str(dp[n-1][n-1])"
    },
    {
        "number": 2072,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    x = list(map(int, stdin.readline().strip().split()))\n    v = list(map(int, stdin.readline().strip().split()))\n    x.sort()\n    v.sort()\n    t = 0\n    for i in range(n):\n        t += (x[i] - x[0]) / v[i]\n    return str(t)"
    },
    {
        "number": 2073,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * (1 << n) for _ in range(n)]\n    dp[0][1] = 1\n    for i in range(1, n):\n        for j in range(1, 1 << n):\n            if j & (1 << i):\n                continue\n            dp[i][j] = dp[i-1][j]\n            if a[i]!= i+1:\n                dp[i][j] += dp[i-1][j^(1<<i)]\n            dp[i][j] %= MOD\n    return dp[-1][-1]"
    },
    {
        "number": 2074,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    c = []\n    for i in range(n):\n        c.append(list(map(int, stdin.split())))\n    dp = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if i == 0:\n                dp[i][j] = c[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j] + c[i][j]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + c[i][j]\n    return dp[n-1][m-1]"
    },
    {
        "number": 2075,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    s = stdin.strip()\n    MOD = 10**9 + 7\n    count = 0\n    for i in range(1, m+1):\n        for j in range(1, m-i+1):\n            p = s[:i]\n            q = s[m-j:]\n            if p.count('(') >= p.count(')') and q.count('(') >= q.count(')'):\n                count += 1\n    return count % MOD"
    },
    {
        "number": 2076,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        if a == 0:\n            print(0)\n        elif a == 1:\n            print(max(b, c))\n        elif a == 2:\n            print(max(b, c))\n        else:\n            print(max(a, b+c))\n    return \"\""
    },
    {
        "number": 2077,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split()[0:2])\n        graph[a].append(b)\n        graph[b].append(a)\n    topics = list(map(int, stdin.split()))\n    visited = [False] * (n+1)\n    queue = [1]\n    order = []\n    while queue:\n        node = queue.pop(0)\n        if visited[node]:\n            continue\n        visited[node] = True\n        neighbors = graph[node]\n        topics_set = set(topics[neighbors])\n        for i in range(1, n+1):\n            if i not in topics_set and i not in order:\n                order.append(i)\n                break\n        if len(order) == n:\n            break\n        for neighbor in neighbors:\n            if not visited[neighbor]:\n                queue.append(neighbor)\n    if len(order)!= n:\n        return '-1'\n    return''.join(map(str, order))"
    },
    {
        "number": 2078,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    horizontal_segments = []\n    vertical_segments = []\n    for i in range(n):\n        y, lx, rx = map(int, stdin.readline().split())\n        horizontal_segments.append((y, lx, rx))\n    for i in range(m):\n        x, ly, ry = map(int, stdin.readline().split())\n        vertical_segments.append((x, ly, ry))\n    horizontal_segments.sort(key=lambda x: x[1])\n    vertical_segments.sort(key=lambda x: x[0])\n    horizontal_count = 1\n    vertical_count = 1\n    for i in range(1, len(horizontal_segments)):\n        if horizontal_segments[i][0] == horizontal_segments[i-1][0]:\n            continue\n        if horizontal_segments[i][1] <= horizontal_segments[i-1][2]:\n            horizontal_count += 1\n        else:\n            horizontal_count += 2\n    for i in range(1, len(vertical_segments)):\n        if vertical_segments[i][1] == vertical_segments[i-1][1]:\n            continue\n        if vertical_segments[i][2] <= vertical_segments[i-1][2]:\n            vertical_count += 1\n        else:\n            vertical_count += 2\n    return horizontal_count * vertical_count"
    },
    {
        "number": 2079,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    widths = list(map(int, stdin.readline().strip().split()))\n    types = stdin.readline().strip()\n    introverts = [i for i in range(n) if types[i*2] == '0']\n    extroverts = [i for i in range(n) if types[i*2] == '1']\n    introverts.sort(key=lambda i: widths[i])\n    extroverts.sort(key=lambda i: widths[i], reverse=True)\n    result = []\n    for i in range(2*n):\n        if types[i] == '0':\n            result.append(introverts.pop(0))\n        else:\n            result.append(extroverts.pop(0))\n    return''.join(map(str, result))"
    },
    {
        "number": 2080,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    result = []\n    for i in range(q):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            result.append(1)\n        elif n == 2:\n            result.append(2)\n        else:\n            # We can construct a graph with n vertices by connecting each vertex to all other vertices.\n            # However, we need to ensure that at least half of the edges are bridges.\n            # We can do this by connecting each vertex to all other vertices except for one,\n            # and then connecting the remaining vertex to all other vertices.\n            # This ensures that at least half of the edges are bridges.\n            result.append(n * (n - 1) // 2)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2081,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    imbalance = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sub_a = a[i:j]\n            imbalance += max(sub_a) - min(sub_a)\n    return imbalance"
    },
    {
        "number": 2082,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    roads = []\n    for i in range(m):\n        x, y = map(int, stdin.split()[2+n+i].split())\n        roads.append((x-1, y-1))\n        roads.append((y-1, x-1))\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for x, y in roads:\n                if x == i and y == j:\n                    dp[i][j] = min(dp[i][j], dp[i][x] + dp[x][j])\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            ans += dp[i][j]\n    return str(ans / (n * (n-1)))"
    },
    {
        "number": 2083,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T, c = map(float, stdin.split())\n    a = list(map(int, stdin.split()))\n    m = int(stdin.split()[0])\n    p = list(map(int, stdin.split()))\n    mean = 0.0\n    for t in range(1, n+1):\n        mean = (mean + a[t-1]) / c\n    result = []\n    for j in range(m):\n        approx = sum(a[p[j]-T+1:p[j]+1]) / T\n        real = (a[p[j]-T+1] + a[p[j]]) / T\n        error = abs(approx - real) / real\n        result.append(f\"{real:.5f} {approx:.5f} {error:.5f}\")\n    return \"\\n\".join(result)"
    },
    {
        "number": 2084,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    a.sort()\n    return a[k-1]"
    },
    {
        "number": 2085,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = max(dp[i-1], dp[i-1] + a[i])\n    return dp[-1]"
    },
    {
        "number": 2086,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split()[0:2])\n    s, f = map(int, stdin.split()[2:4])\n    dp = [0] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1]\n    ans = 0\n    for i in range(s, f+1):\n        if dp[i] > ans:\n            ans = dp[i]\n    return ans"
    },
    {
        "number": 2087,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B, C = map(int, stdin.split())\n    return sum([a*b*c for a in range(1, A+1) for b in range(1, B+1) for c in range(1, C+1)]) % 998244353"
    },
    {
        "number": 2088,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *p = map(int, stdin.split())\n    dp = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + 1\n        j = i - 1\n        while j > 0 and p[j]!= i:\n            j = p[j - 1]\n            dp[i] = min(dp[i], dp[j] + 1)\n    return''.join(map(str, dp))"
    },
    {
        "number": 2089,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    adj = [[] for _ in range(n+1)]\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = [False] * (n+1)\n    visited[s] = True\n    q = [(s, 0)]\n    while q:\n        u, d = q.pop(0)\n        for v in adj[u]:\n            if not visited[v]:\n                visited[v] = True\n                q.append((v, d+1))\n    return sum(1 for i in range(1, n+1) if not visited[i])"
    },
    {
        "number": 2090,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    songs = []\n    for i in range(n):\n        t, b = map(int, stdin.split())\n        songs.append((t, b))\n    songs.sort(key=lambda x: x[1])\n    songs.sort(key=lambda x: x[0], reverse=True)\n    total_pleasure = 0\n    for i in range(k):\n        total_pleasure += songs[i][0] * songs[i][1]\n    return str(total_pleasure)"
    },
    {
        "number": 2091,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        n = len(s)\n        for j in range(n):\n            for k in range(j+1, n+1):\n                t = s[j:k]\n                if len(t) > len(s) or t!= t[::-1]:\n                    continue\n                a, b = s[:j], s[k:]\n                if a == b[::-1]:\n                    print(t)\n                    break\n            else:\n                continue\n            break\n        else:\n            print(s)"
    },
    {
        "number": 2092,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n, k, t = map(int, stdin.split()[0:4])\n    a = list(map(int, stdin.split()[4:4+m]))\n    traps = []\n    for i in range(k):\n        l, r, d = map(int, stdin.readline().split())\n        traps.append((l, r, d))\n    dp = [[0] * (n+2) for _ in range(m+1)]\n    for i in range(m+1):\n        dp[i][0] = 1\n    for i in range(1, n+2):\n        for j in range(m+1):\n            dp[j][i] = dp[j][i-1]\n            if j > 0:\n                dp[j][i] += dp[j-1][i-1]\n            if i-1 in [t[0] for t in traps]:\n                dp[j][i] -= dp[j][i-1]\n            if i-1 in [t[1] for t in traps]:\n                dp[j][i] -= dp[j][i-1]\n            if i-1 in [t[0] for t in traps] and j > 0:\n                dp[j][i] += dp[j-1][i-1]\n            if i-1 in [t[1] for t in traps] and j > 0:\n                dp[j][i] += dp[j-1][i-1]\n    return str(dp[m][n])"
    },
    {
        "number": 2093,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                count += 1\n    return count"
    },
    {
        "number": 2094,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, k**n):\n        suit = [h[i % n - 1]]\n        for j in range(1, n):\n            suit.append(h[(i // k**j) % n])\n        if sum(suit) > sum(h):\n            count += 1\n    return count % 998244353"
    },
    {
        "number": 2095,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = []\n    for i in range(n):\n        A.append(list(map(int, stdin.readline().strip().split())))\n    good_cars = []\n    for i in range(n):\n        for j in range(n):\n            if A[i][j] == 1:\n                good_cars.append(i)\n                good_cars.append(j)\n    good_cars = list(set(good_cars))\n    good_cars.sort()\n    return f\"{len(good_cars)}\\n{' '.join(map(str, good_cars))}\""
    },
    {
        "number": 2096,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cubes = stdin.split()[1:]\n    cubes = [int(cube) for cube in cubes]\n    heaps = [[] for _ in range(2)]\n    for i in range(n):\n        heaps[i % 2].append(cubes[i])\n    result = 1\n    for heap in heaps:\n        result *= len(heap)\n    print(result)\n    for heap in heaps:\n        print(\" \".join(str(i+1) for i in range(len(heap))))\n    return \"\""
    },
    {
        "number": 2097,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        sum_a = sum(a)\n        prod_a = 1\n        for j in a:\n            prod_a *= j\n        if sum_a == 0 and prod_a == 0:\n            print(0)\n        elif sum_a == 0 or prod_a == 0:\n            print(1)\n        else:\n            print(2)"
    },
    {
        "number": 2098,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pairs = [tuple(map(int, line.strip().split())) for line in stdin]\n    edges = [(i, j) for i in range(1, n) for j in range(i+1, n+1)]\n    for pair in pairs:\n        if pair not in edges:\n            return \"NO\"\n    tree = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if (i+1, j+1) in pairs or (j+1, i+1) in pairs:\n                tree.append((i+1, j+1))\n    if len(tree)!= n-1:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(lambda x: \" \".join(map(str, x)), tree))"
    },
    {
        "number": 2099,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, M, T = map(int, stdin.readline().split())\n    queries = []\n    for i in range(n):\n        queries.append(list(map(int, stdin.readline().split(':'))))\n    queries = [(queries[i][0]*3600 + queries[i][1]*60 + queries[i][2], i) for i in range(n)]\n    queries.sort()\n    users = {}\n    for i in range(n):\n        t = queries[i][0]\n        for j in range(t, t+T):\n            if j in users:\n                users[j].append(i)\n            else:\n                users[j] = [i]\n    for i in range(T, 86401, T):\n        if len(users[i]) > M:\n            return \"No solution\"\n    R = 0\n    for i in range(n):\n        t = queries[i][0]\n        for j in range(t, t+T):\n            if len(users[j]) == M:\n                R += 1\n                users[j].append(R)\n                break\n    if R == 0:\n        return \"No solution\"\n    result = []\n    for i in range(n):\n        t = queries[i][0]\n        for j in range(t, t+T):\n            if len(users[j]) == M:\n                result.append(users[j][-1])\n                break\n    return str(R) + '\\n' + '\\n'.join(map(str, result))"
    },
    {
        "number": 2100,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    left_doors = [int(stdin.readline().strip()) for _ in range(n)]\n    right_doors = [int(stdin.readline().strip()) for _ in range(n)]\n\n    t = 0\n    for i in range(n):\n        if left_doors[i] == 0 and right_doors[i] == 0:\n            t += 1\n        elif left_doors[i] == 1 and right_doors[i] == 1:\n            t += 2\n        else:\n            t += 3\n\n    return str(t)"
    },
    {
        "number": 2101,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G, B = map(int, stdin.split()[0:3])\n    r = list(map(int, stdin.split()[3:3+R]))\n    g = list(map(int, stdin.split()[3+R:3+R+G]))\n    b = list(map(int, stdin.split()[3+R+G:3+R+G+B]))\n    r.sort()\n    g.sort()\n    b.sort()\n    ans = 0\n    for i in range(R):\n        for j in range(G):\n            for k in range(B):\n                if i < R-1 and j < G-1 and k < B-1:\n                    if r[i] == r[i+1] and g[j] == g[j+1] and b[k] == b[k+1]:\n                        ans = max(ans, r[i]*g[j]*b[k])\n    return str(ans)"
    },
    {
        "number": 2102,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = list(map(int, stdin.split()[0:6]))\n    n = int(stdin.split()[6])\n    b = list(map(int, stdin.split()[7:]))\n    max_fret = max(b)\n    min_fret = min(b)\n    return str(max_fret - min_fret)"
    },
    {
        "number": 2103,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = a[i] - i - 1\n    if all(b[i] >= 0 for i in range(n)):\n        return''.join(map(str, b))\n    else:\n        return '-1'"
    },
    {
        "number": 2104,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r = map(int, stdin.split())\n    if (r - l + 1) % 2 == 0 or (r - l) % 2 == 0:\n        return \"NO\"\n    pairs = []\n    for i in range(l, r+1):\n        for j in range(i+1, r+1):\n            if i % j == 0:\n                pairs.append((i, j))\n    if len(pairs)!= (r - l + 1) // 2:\n        return \"NO\"\n    return \"YES\\n\" + \"\\n\".join(map(str, pairs))"
    },
    {
        "number": 2105,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    s = stdin.readline().split()\n    t = stdin.readline().split()\n    q = int(stdin.readline())\n    year_names = []\n    for i in range(n):\n        for j in range(m):\n            year_names.append(s[i] + t[j])\n    year_names = sorted(set(year_names))\n    for i in range(q):\n        y = int(stdin.readline())\n        year_index = (y - 1) % (n * m)\n        print(year_names[year_index])\n    return \"\""
    },
    {
        "number": 2106,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, k = map(int, stdin.split())\n    d = list(map(int, stdin.readline().split()))\n    s = list(map(int, stdin.readline().split()))\n    dp = [float('inf')] * (m + 1)\n    dp[0] = 0\n    for i in range(1, m + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + d[i - 1])\n    return dp[m]"
    },
    {
        "number": 2107,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k, s = map(int, stdin.split()[0:4])\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.split()[i*m:(i+1)*m])))\n    q = list(map(int, stdin.split()[-s:]))\n    dp = [[0]*m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            dp[i][j] = a[i][j]\n    for i in range(1, n):\n        for j in range(m):\n            for p in range(m):\n                for q in range(m):\n                    if abs(j-p) + abs(i-q) <= dp[i-1][j] + dp[i-1][p]:\n                        dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i-1][p])\n    return dp[-1][-1]\n\nstdin = \"4 6 5 7\\n3 1 2 2 3 1\\n3 2 2 2 5 5\\n4 2 2 2 5 3\\n3 2 2 1 4 3\\n2 3 1 4 1 5 1\"\nprint(solution(stdin)) # Output: 8\n\nstdin = \"4 4 9 5\\n4 7 9 5\\n1 2 1 7\\n8 3 4 9\\n5 7 7 2\\n7 1 9 2 5\"\nprint(solution(stdin)) # Output: 4"
    },
    {
        "number": 2108,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    n1, n2, n3 = map(int, stdin.readline().split())\n    adj = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v = map(int, stdin.readline().split())\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = [False] * (n+1)\n    color = [-1] * (n+1)\n    def dfs(u, c):\n        visited[u] = True\n        color[u] = c\n        for v in adj[u]:\n            if not visited[v]:\n                dfs(v, (c+1)%3)\n    for i in range(1, n+1):\n        if not visited[i]:\n            dfs(i, 0)\n    if sum(1 for c in color if c == 0)!= n1 or sum(1 for c in color if c == 1)!= n2 or sum(1 for c in color if c == 2)!= n3:\n        return \"NO\"\n    for u, v in zip(adj, adj[1:]):\n        if color[u] == color[v]:\n            return \"NO\"\n    return \"YES\\n\" + \"\".join(str(c) for c in color)"
    },
    {
        "number": 2109,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    arr = list(map(int, stdin.split()[1:]))\n    arr.sort()\n    n1 = 0\n    n2 = 0\n    n3 = 0\n    for i in range(n):\n        if arr[i] < 0:\n            n1 += 1\n        elif arr[i] > 0:\n            n2 += 1\n        else:\n            n3 += 1\n    if n1 == 0 or n2 == 0 or n3 == 0:\n        return \"No solution\"\n    if n1 > n2 + n3 or n2 > n1 + n3 or n3 > n1 + n2:\n        return \"No solution\"\n    if n1 == 1 and n2 == 1 and n3 == 1:\n        return \"No solution\"\n    if n1 == 1 and n2 == 1:\n        return \"1 -1\\n1 2\"\n    if n1 == 1 and n3 == 1:\n        return \"1 -1\\n1 0\"\n    if n2 == 1 and n3 == 1:\n        return \"1 2\\n1 0\"\n    if n1 == 2 and n2 == 2:\n        return \"2 -1 -2\\n1 0\"\n    if n1 == 2 and n3 == 2:\n        return \"2 -1 -3\\n1 0\"\n    if n2 == 2 and n3 == 2:\n        return \"2 -2 -3\\n1 0\"\n    if n1 == 3 and n2 == 3:\n        return \"3 -1 -2 -3\\n1 0\"\n    if n1 == 3 and n3 == 3:\n        return \"3 -1 -3 -2\\n1 0\"\n    if n2 == 3 and n3 == 3:\n        return \"3 -2 -3 -1\\n1 0\"\n    return \"No solution\""
    },
    {
        "number": 2110,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, m, k = map(int, stdin.split())\n    trains = []\n    for i in range(n):\n        h_i, m_i = map(int, stdin.split())\n        trains.append((h_i, m_i))\n    trains.sort()\n    t = 0\n    canceled = []\n    for i in range(n):\n        h_i, m_i = trains[i]\n        if m_i < k:\n            t = max(t, m_i)\n        else:\n            t = max(t, k)\n        if t >= m // 2:\n            canceled.append(i)\n            t = 0\n    return len(canceled), t"
    },
    {
        "number": 2111,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    board = [[0] * n for _ in range(n)]\n    anti_diagonal = []\n    for i in range(n):\n        anti_diagonal.append(board[i][n-i-1])\n    for i in range(q):\n        x, y, direction = map(int, stdin.readline().split())\n        if direction == 1:\n            for j in range(y-1, -1, -1):\n                if board[j][x-1] == 0:\n                    break\n                anti_diagonal[j] -= 1\n            for j in range(y, n):\n                if board[j][x-1] == 0:\n                    break\n                anti_diagonal[j] -= 1\n        else:\n            for j in range(x-1, -1, -1):\n                if board[y-1][j] == 0:\n                    break\n                anti_diagonal[j] -= 1\n            for j in range(x, n):\n                if board[y-1][j] == 0:\n                    break\n                anti_diagonal[j] -= 1\n        board[y-1][x-1] = i+1\n    for i in range(n):\n        print(anti_diagonal[i])\n    return \"\""
    },
    {
        "number": 2112,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    x, k, y = map(int, stdin.split()[2:5])\n    a = list(map(int, stdin.split()[5:5+n]))\n    b = list(map(int, stdin.split()[5+n:]))\n\n    # check if it is possible to turn a into b\n    if len(set(a))!= len(a) or len(set(b))!= len(b):\n        return '-1'\n\n    # check if it is possible to cast fireball on consecutive warriors\n    if k > n:\n        return '-1'\n\n    # check if it is possible to cast berserk on two consecutive warriors\n    if k == 2 and y > x:\n        return '-1'\n\n    # calculate the minimum amount of mana needed to turn a into b\n    mana = 0\n    for i in range(m):\n        if a[i]!= b[i]:\n            if i < k:\n                mana += x\n            else:\n                mana += y\n                if a[i-1] > a[i-2]:\n                    mana += a[i-1] - a[i-2]\n                else:\n                    mana += a[i-2] - a[i-1]\n\n    return str(mana)"
    },
    {
        "number": 2113,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u, v))\n    edges = set(edges)\n    count = 0\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if (i, j) not in edges and (j, i) not in edges:\n                count += 1\n                edges.add((i, j))\n    return count"
    },
    {
        "number": 2114,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    if N == 1:\n        return \"-1\"\n    board = [[0] * N for _ in range(N)]\n    board[0][0] = 1\n    queen_moves = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    rook_moves = [(0, 1), (1, 0), (0, -1), (-1, 0), (1, 1), (1, -1), (-1, 1), (-1, -1)]\n    queen_vuns = 0\n    rook_vuns = 0\n    queen_pos = (0, 0)\n    rook_pos = (0, 0)\n    queen_visited = set()\n    rook_visited = set()\n    queen_visited.add((0, 0))\n    rook_visited.add((0, 0))\n    queen_queue = [(0, 0)]\n    rook_queue = [(0, 0)]\n    while queen_queue or rook_queue:\n        if queen_queue:\n            x, y = queen_queue.pop(0)\n            for dx, dy in queen_moves:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in queen_visited:\n                    board[nx][ny] = board[x][y] + 1\n                    queen_visited.add((nx, ny))\n                    if board[nx][ny] == N * N:\n                        return \"\\n\".join(\" \".join(str(board[i][j]) for j in range(N)) for i in range(N))\n                    queen_queue.append((nx, ny))\n                    queen_vuns += 1\n        if rook_queue:\n            x, y = rook_queue.pop(0)\n            for dx, dy in rook_moves:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < N and 0 <= ny < N and (nx, ny) not in rook_visited:\n                    board[nx][ny] = board[x][y] + 1\n                    rook_visited.add((nx, ny))\n                    if board[nx][ny] == N * N:\n                        return \"\\n\".join(\" \".join(str(board[i][j]) for j in range(N)) for i in range(N))\n                    rook_queue.append((nx, ny))\n                    rook_vuns += 1\n        if queen_vuns > rook_vuns:\n            return \"-1\"\n    return \"-1\""
    },
    {
        "number": 2115,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    k = 0\n    i = 0\n    while i < n - 1:\n        if a[i] == a[i+1]:\n            if a[i] == a[i+2]:\n                a.pop(i)\n                a.pop(i)\n                a.insert(i, a[i] + 1)\n                k += 1\n            else:\n                a.pop(i)\n                a.pop(i)\n                k += 1\n        else:\n            i += 1\n    print(k)\n    print(*a)"
    },
    {
        "number": 2116,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    t = 0\n    for i in range(n):\n        for j in range(m):\n            t += p[a[i][j]-1]\n            p.insert(0, p.pop(a[i][j]-1))\n    return str(t)"
    },
    {
        "number": 2117,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    edges = []\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u-1, v-1))\n        edges.append((v-1, u-1))\n\n    # compute distances\n    dist = [float('inf')] * n\n    dist[0] = 0\n    queue = [0]\n    while queue:\n        u = queue.pop(0)\n        for v, w in edges:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n                queue.append(v)\n\n    # compute max controlled planets\n    max_controlled = [0] * n\n    for i in range(n):\n        for j in range(n):\n            if dist[i] + dist[j] == dist[j]:\n                max_controlled[i] += 1\n\n    # print result\n    return''.join(map(str, max_controlled))"
    },
    {
        "number": 2118,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k > n * (n - 1) // 2:\n        return '-1'\n    a = list(range(1, n + 1))\n    mergesort(a, 0, n)\n    if k!= mergesort_calls:\n        return '-1'\n    return''.join(map(str, a))\n\ndef"
    },
    {
        "number": 2119,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, l, r = map(int, stdin.split())\n    MOD = 998244353\n    count = 0\n    for i in range(1, a+1):\n        for j in range(1, a+1):\n            if i*j > a:\n                break\n            if i*j >= l and i*j <= r:\n                count += 1\n    return count % MOD"
    },
    {
        "number": 2120,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    v = list(map(int, stdin.readline().split()))\n    edges = []\n    for i in range(m):\n        x, y = map(int, stdin.readline().split())\n        edges.append((x, y))\n    graph = [[] for _ in range(n+1)]\n    for x, y in edges:\n        graph[x].append(y)\n        graph[y].append(x)\n    visited = [False] * (n+1)\n    queue = [1]\n    energy = 0\n    while queue:\n        node = queue.pop(0)\n        if visited[node]:\n            continue\n        visited[node] = True\n        energy += v[node-1]\n        for neighbor in graph[node]:\n            if not visited[neighbor]:\n                queue.append(neighbor)\n    return str(energy)"
    },
    {
        "number": 2121,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    adj = [[] for _ in range(n)]\n    for _ in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        adj[u - 1].append(v - 1)\n        adj[v - 1].append(u - 1)\n\n    def dfs(node, parent):\n        visited[node] = True\n        for neighbor in adj[node]:\n            if neighbor == parent:\n                continue\n            if not visited[neighbor]:\n                dfs(neighbor, node)\n\n    visited = [False] * n\n    best_grade = float('inf')\n    for root in range(n):\n        if not visited[root]:\n            dfs(root, -1)\n            if k > 0:\n                grade = sum(a[i] for i in range(k) if visited[i])\n                best_grade = min(best_grade, grade)\n            visited = [False] * n\n            k -= 1\n    return best_grade\n"
    },
    {
        "number": 2122,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    books = list(map(int, stdin.readline().split()))\n    count = 0\n    i = 0\n    while i < n:\n        if books[i] > k:\n            count += 1\n            i += 1\n        else:\n            i += 1\n    return count"
    },
    {
        "number": 2123,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    h = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = h[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1], dp[i - 2] + h[i - 1])\n    return dp[n]"
    },
    {
        "number": 2124,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    for i in range(t):\n        n = int(stdin.split()[0])\n        usernames = stdin.split()[1:n+1]\n        m = int(stdin.split()[n+1])\n        messages = []\n        for j in range(m):\n            message = stdin.split()[j+n+2]\n            if ':' in message:\n                sender, text = message.split(':')\n                if sender in usernames:\n                    messages.append((sender, text))\n            else:\n                messages.append(('', message))\n        if len(messages)!= m:\n            print(\"Impossible\")\n        else:\n            for j in range(m-1):\n                if messages[j][0] == messages[j+1][0]:\n                    print(\"Impossible\")\n                    break\n                elif messages[j][0] == '' and messages[j+1][0] in usernames:\n                    print(\"Impossible\")\n                    break\n                elif messages[j][0] in usernames and messages[j+1][0] == '':\n                    print(\"Impossible\")\n                    break\n                elif messages[j][0] in usernames and messages[j+1][0] in usernames:\n                    print(messages[j][0]+':'+messages[j][1])\n                    break\n                elif messages[j][0] == '' and messages[j+1][0] == '':\n                    print(messages[j][1])\n                else:\n                    print(\"Impossible\")\n                    break\n    return \"\""
    },
    {
        "number": 2125,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    blanket = []\n    for i in range(n):\n        row = list(stdin.readline().strip())\n        blanket.append(row)\n\n    count = 0\n    for i in range(n-2):\n        for j in range(m-2):\n            if blanket[i][j]!= blanket[i][j+1] and blanket[i][j]!= blanket[i][j+2] and blanket[i][j+1]!= blanket[i][j+2]:\n                if blanket[i+1][j]!= blanket[i+1][j+1] and blanket[i+1][j]!= blanket[i+1][j+2] and blanket[i+1][j+1]!= blanket[i+1][j+2]:\n                    if blanket[i+2][j]!= blanket[i+2][j+1] and blanket[i+2][j]!= blanket[i+2][j+2] and blanket[i+2][j+1]!= blanket[i+2][j+2]:\n                        count += 1\n\n    return str(count)"
    },
    {
        "number": 2126,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, h = map(int, stdin.split()[0:3])\n    a = list(map(int, stdin.split()[3:3+m]))\n    b = list(map(int, stdin.split()[3+m:3+m+n]))\n    t = []\n    for i in range(n):\n        t.append(list(map(int, stdin.split()[3+m+n+i*m:3+m+n+(i+1)*m])))\n    ans = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            if t[i][j] == 1:\n                row.append(max(a[j], b[i]))\n            else:\n                row.append(0)\n        ans.append(row)\n    return '\\n'.join([' '.join(map(str, row)) for row in ans])"
    },
    {
        "number": 2127,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bills = []\n    for line in stdin.split('\\n'):\n        if line.startswith('+'):\n            x, y = map(int, line.split()[1:])\n            bills.append((x, y))\n        elif line.startswith('?'):\n            h, w = map(int, line.split()[1:])\n            if all(bill[0] <= h and bill[1] <= w or bill[1] <= h and bill[0] <= w for bill in bills):\n                print('YES')\n            else:\n                print('NO')\n    return ''"
    },
    {
        "number": 2128,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    MOD = 998244353\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = (dp[i-1] * p[i-1]) % MOD\n    ans = dp[n]\n    for i in range(1, n+1):\n        ans = (ans * dp[i-1]) % MOD\n    return str(ans)"
    },
    {
        "number": 2129,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i].split())\n        roads = []\n        for j in range(i+1, i+1+m):\n            u, v = map(int, lines[j].split())\n            roads.append((u, v))\n        # check if there is a way to get from one city to some other city using only these roads\n        # if not, return -1\n        if not is_connected(n, roads):\n            return '-1'\n        # find the maximum number of such cities\n        max_cities = 0\n        for city in range(1, n+1):\n            if is_valid_city(city, roads):\n                max_cities += 1\n        # print the maximum number of such cities\n        print(max_cities)\n        # print oriented roads\n        for road in roads:\n            if road[0] == road[1]:\n                continue\n            if road[0] > road[1]:\n                road = (road[1], road[0])\n            print(road[0], road[1])\n    return ''\n\ndef"
    },
    {
        "number": 2130,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = [b[0]]\n    for i in range(1, n):\n        a.append(b[i] ^ a[i-1])\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        return \"No\"\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                b[i], b[j] = b[j], b[i]\n                break\n    if all(a[i] <= a[i+1] for i in range(n-1)):\n        return \"Yes\\n\" + \" \".join(map(str, b))\n    else:\n        return \"No\""
    },
    {
        "number": 2131,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    adj = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    visited = [False] * (n + 1)\n    stack = [(1, [1])]\n    paths = []\n    while stack:\n        u, path = stack.pop()\n        if visited[u]:\n            continue\n        visited[u] = True\n        for v in adj[u]:\n            if v not in path:\n                stack.append((v, path + [v]))\n        if len(path) > 1:\n            paths.append(path)\n    if not paths:\n        return \"No\"\n    m = len(paths)\n    result = \"Yes\\n\" + str(m) + \"\\n\"\n    for path in paths:\n        result += \" \".join(map(str, path)) + \"\\n\"\n    return result"
    },
    {
        "number": 2132,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    events = []\n    for line in stdin.split('\\n'):\n        if line:\n            events.append(list(map(int, line.split())))\n    n = len(events)\n    i = 0\n    while i < n:\n        if events[i][0] == 1:\n            speed = events[i][1]\n            i += 1\n        elif events[i][0] == 2:\n            if speed > events[i][1]:\n                i += 1\n            else:\n                return \"No\"\n        elif events[i][0] == 3:\n            speed_limit = events[i][1]\n            i += 1\n        elif events[i][0] == 4:\n            if speed_limit > speed:\n                i += 1\n            else:\n                return \"No\"\n        elif events[i][0] == 5:\n            if speed_limit > speed:\n                i += 1\n            else:\n                return \"No\"\n        elif events[i][0] == 6:\n            if speed_limit > speed:\n                i += 1\n            else:\n                return \"No\"\n    return \"Yes\""
    },
    {
        "number": 2133,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().strip().split())\n        edges.append((u - 1, v - 1))\n\n    # Kosaraju's algorithm to find strongly connected components\n    visited = [False] * n\n    stack = []\n    components = []\n    for i in range(n):\n        if not visited[i]:\n            stack.append(i)\n            while stack:\n                u = stack.pop()\n                if not visited[u]:\n                    visited[u] = True\n                    for v in range(n):\n                        if v!= u and (u, v) in edges or (v, u) in edges:\n                            stack.append(v)\n            components.append(stack[:])\n            stack = []\n\n    # Find the component with the most white vertices\n    max_component = None\n    max_white = 0\n    for component in components:\n        white = sum(colors[i] for i in component)\n        if white > max_white:\n            max_white = white\n            max_component = component\n\n    # Count the number of operations needed to make all vertices in the max component black\n    count = 0\n    for i in max_component:\n        if colors[i] == 1:\n            count += 1\n\n    # If the max component has more white vertices than black vertices,\n    # count the number of operations needed to make all vertices in the max component white\n    if sum(colors[i] for i in max_component) > len(max_component) - count:\n        count = len(max_component) - sum(colors[i] for i in max_component)\n\n    return str(count)"
    },
    {
        "number": 2134,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # Create a set of all possible pairs of students\n    pairs = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            pairs.add((i, j))\n\n    # Create a set of all possible groups of students\n    groups = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                groups.add((i, j, k))\n\n    # Find the group of students that can work together calmly\n    max_sum = 0\n    for group in groups:\n        # Check if the group can work together calmly\n        if all(any(a[i] & (1 << j) == 0 for j in range(60)) for i in group):\n            # Calculate the sum of the skill levels\n            sum_b = sum(b[i] for i in group)\n            # Update the maximum sum if necessary\n            if sum_b > max_sum:\n                max_sum = sum_b\n\n    return str(max_sum) if max_sum > 0 else \"0\""
    },
    {
        "number": 2135,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2136,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        grid = []\n        for j in range(n):\n            grid.append(list(stdin.readline().strip()))\n        # solve\n        c = 0\n        for j in range(1, n-1):\n            for k in range(1, n-1):\n                if grid[j][k] == '0':\n                    if grid[j-1][k] == '1' and grid[j+1][k] == '1' and grid[j][k-1] == '1' and grid[j][k+1] == '1':\n                        c += 1\n                        grid[j][k] = '1'\n        # output\n        print(c)\n        for j in range(1, n-1):\n            for k in range(1, n-1):\n                if grid[j][k] == '1':\n                    print(j, k)"
    },
    {
        "number": 2137,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.readline().split())\n    ghosts = []\n    for i in range(n):\n        x, vx, vy = map(int, stdin.readline().split())\n        y = a * x + b\n        ghosts.append((x, y, vx, vy))\n    ghosts.sort(key=lambda x: x[0])\n    GX = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if ghosts[i][0] == ghosts[j][0]:\n                GX += 1\n    return str(GX)"
    },
    {
        "number": 2138,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    d = list(map(int, stdin.readline().strip().split()))\n    m = sum(d) // 2\n    graph = []\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if d[i-1] > 0 and d[j-1] > 0:\n                graph.append((i, j))\n                d[i-1] -= 1\n                d[j-1] -= 1\n                m -= 1\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            if d[i-1] > 0 and d[j-1] > 0:\n                graph.append((i, j))\n                d[i-1] -= 1\n                d[j-1] -= 1\n                m -= 1\n    return f\"{m}\\n\" + \"\\n\".join(f\"{u} {v}\" for u, v in graph)"
    },
    {
        "number": 2139,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = 0\n    for i in range(n):\n        for j in range(i+4, n+1):\n            if 'bear' in s[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 2140,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, m = stdin.split('\\n')\n    a = list(map(int, stdin.split('\\n')[2].split()))\n    for i in range(m):\n        s = s[:a[i]-1] + s[a[i]-1:a[i]-1+a[i]][::-1] + s[a[i]-1+a[i]:]\n    return s"
    },
    {
        "number": 2141,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    board = [['.' for _ in range(n)] for _ in range(n)]\n    white_knights = [(i, j) for i in range(n) for j in range(n) if (i+j)%2 == 0]\n    black_knights = [(i, j) for i in range(n) for j in range(n) if (i+j)%2 == 1]\n    def is_valid(x, y):\n        return 0 <= x < n and 0 <= y < n and board[x][y] == '.'\n    def count_duels(knight1, knight2):\n        x1, y1 = knight1\n        x2, y2 = knight2\n        return sum(is_valid(x1+dx, y1+dy) and is_valid(x2+dx, y2+dy) for dx in [-2, -1, 1, 2] for dy in [-1, 1])\n    def dfs(knights):\n        if len(knights) == n*n:\n            return 0\n        max_duels = 0\n        for knight in knights:\n            x, y = knight\n            for dx, dy in [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]:\n                nx, ny = x+dx, y+dy\n                if is_valid(nx, ny) and (nx, ny) not in knights:\n                    duels = count_duels(knight, (nx, ny))\n                    if duels > max_duels:\n                        max_duels = duels\n                        board[nx][ny] = 'W' if (x+y)%2 == 0 else 'B'\n                        knights.append((nx, ny))\n                        max_duels = max(max_duels, dfs(knights))\n                        knights.pop()\n                        board[nx][ny] = '.'\n        return max_duels\n    max_duels = dfs(white_knights)\n    return '\\n'.join(''.join(row) for row in board)"
    },
    {
        "number": 2142,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        c = []\n        for j in range(n):\n            if a[j] in b:\n                c.append(a[j])\n        if len(c) == 0:\n            print(\"NO\")\n        else:\n            print(\"YES\")\n            print(len(c), *c)"
    },
    {
        "number": 2143,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = 0\n    for i in range(n-1):\n        j = i+1\n        while j < n and a[i] + a[j] <= 2*a[-1]:\n            j += 1\n        ans += j-i-1\n    return str(ans)"
    },
    {
        "number": 2144,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        a, m = map(int, stdin.readline().strip().split())\n        count = 0\n        for x in range(m):\n            if gcd(a, m) == gcd(a + x, m):\n                count += 1\n        print(count)\n\ndef"
    },
    {
        "number": 2145,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        x, y = map(int, stdin.readline().strip().split())\n        if x == y:\n            print(\"YES\")\n        elif x % 2 == 0 and x > 1:\n            if y == (3*x)//2:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        elif x > 1:\n            if y == x-1:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2146,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.split())\n    m = [0] * (n + 1)\n    for i in range(1, n + 1):\n        m[i] = m[i - 1] + 1\n        for j in range(i - 1, -1, -1):\n            if a[j] == i:\n                m[i] = min(m[i], m[j])\n    return''.join(map(str, m))"
    },
    {
        "number": 2147,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rules = []\n    for i in range(4*n):\n        a, b, c = map(int, stdin.readline().strip().split())\n        rules.append((a, (b, c)))\n    used = [False] * n\n    order = []\n    for i in range(4*n):\n        a, (b, c) = rules[i]\n        if used[a-1]:\n            return \"NO\"\n        used[a-1] = True\n        order.append(i+1)\n        if b!= c:\n            used[b-1] = True\n            used[c-1] = True\n            rules.append((b, (a, c)))\n            rules.append((c, (a, b)))\n            order.append(i+1)\n            order.append(i+1)\n    return \"YES\\n\" + \" \".join(map(str, order))"
    },
    {
        "number": 2148,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    x = list(map(int, stdin.readline().split()))\n    y = [10**100] * n\n    for i in range(n):\n        for j in range(i):\n            if y[j] + r > y[i]:\n                break\n        else:\n            y[i] -= r\n        y[i] -= x[i]\n    return''.join(map(str, y))"
    },
    {
        "number": 2149,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    h = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(1, k**n):\n        a = [int(x) for x in bin(i)[2:].zfill(n)]\n        a = a[-1:]+a[:-1]\n        if sum(a) > sum(h):\n            count += 1\n    return count % 998244353"
    },
    {
        "number": 2150,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    b = list(map(int, stdin.readline().strip().split()))\n    a = [0] * n\n    a[0] = b[0]\n    for i in range(1, n):\n        a[i] = a[i-1] + b[i]\n    return''.join(map(str, a))"
    },
    {
        "number": 2151,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        if n < 2:\n            print(\"NO\")\n            continue\n        for j in range(1, n):\n            if s[j] < s[j-1]:\n                print(\"NO\")\n                break\n        else:\n            print(\"YES\")\n            k = n // 2\n            if n % 2 == 1:\n                k += 1\n            print(k)\n            parts = [s[:k], s[k:]]\n            if n % 2 == 1:\n                parts[0] = parts[0][:-1]\n            print(\" \".join(parts))"
    },
    {
        "number": 2152,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = []\n    p = []\n    for i in range(n):\n        a_i, p_i = map(int, stdin.readline().strip().split())\n        a.append(a_i)\n        p.append(p_i)\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + a[i-1] * p[i-1]\n    return str(dp[n])"
    },
    {
        "number": 2153,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    heights = list(map(int, stdin.readline().split()))\n    jumps = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if i + 1 == j or max(heights[i + 1:j]) < min(heights[i], heights[j]) or max(heights[i], heights[j]) < min(heights[i + 1:j]):\n                jumps += 1\n    return jumps"
    },
    {
        "number": 2154,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    prices = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_profit = 0\n    current_profit = 0\n    current_price = 0\n\n    # Loop through prices\n    for i in range(N):\n        # Update current price\n        current_price = prices[i]\n\n        # Update current profit\n        current_profit = max(current_profit + current_price, 0)\n\n        # Update max profit\n        max_profit = max(max_profit, current_profit)\n\n    # Return max profit\n    return str(max_profit)"
    },
    {
        "number": 2155,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    n = 0\n    m = 0\n    for i in range(t):\n        if a[i] == 0:\n            n = i // m + 1\n            m = i % m + 1\n            break\n    if n == 0:\n        return \"-1\"\n    for i in range(t):\n        if a[i]!= 0:\n            x = i // m + 1\n            y = i % m + 1\n            break\n    return f\"{n} {m}\\n{x} {y}\""
    },
    {
        "number": 2156,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    res = []\n    for i in range(q):\n        l, r = map(int, stdin.readline().split())\n        if r - l + 1 == 2**k:\n            res.append(1)\n        else:\n            res.append(0)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 2157,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    arr = list(map(int, stdin.readline().split()))\n    queries = []\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        queries.append((l, r))\n    arr.sort()\n    max_sum = 0\n    for l, r in queries:\n        max_sum += sum(arr[l-1:r])\n    return str(max_sum)"
    },
    {
        "number": 2158,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        u, v, c = map(int, stdin.readline().strip().split())\n        graph[u].append((v, c))\n        graph[v].append((u, c))\n    visited = [False] * n\n    visited[0] = True\n    stack = [(0, 0)]\n    max_cost = 0\n    while stack:\n        u, cost = stack.pop()\n        max_cost = max(max_cost, cost)\n        for v, c in graph[u]:\n            if not visited[v]:\n                visited[v] = True\n                stack.append((v, cost + c))\n    return max_cost"
    },
    {
        "number": 2159,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    t = list(map(int, stdin.readline().strip().split()))\n    count = [0] * n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if t[i-1] == t[j-1]:\n                count[t[i-1]-1] += 1\n    return''.join(map(str, count))"
    },
    {
        "number": 2160,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for k in range(1, n):\n        for i in range(n - k):\n            j = i + k\n            for m in range(i, j):\n                dp[i][j] += dp[i][m] * dp[m + 1][j]\n    ans = 0\n    for i in range(k):\n        for j in range(i + 1, k):\n            if x[i]!= x[j]:\n                ans += dp[x[i] - 1][x[j] - 1]\n    return str(ans)"
    },
    {
        "number": 2161,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    phone_books = {}\n    for i in range(n):\n        name, num_phone_numbers, *phone_numbers = stdin.readline().strip().split()\n        phone_numbers = set(phone_numbers)\n        for phone_number in phone_numbers:\n            if phone_number in phone_books:\n                phone_books[phone_number].add(name)\n            else:\n                phone_books[phone_number] = {name}\n    result = []\n    for phone_number, names in phone_books.items():\n        if len(names) > 1:\n            for name in names:\n                if phone_number in phone_books and name in phone_books[phone_number]:\n                    phone_books[phone_number].remove(name)\n        else:\n            result.append((names.pop(), len(phone_books[phone_number]), phone_number))\n    result.sort()\n    m = len(result)\n    result = [f\"{name} {num_phone_numbers} {' '.join(phone_numbers)}\" for name, num_phone_numbers, phone_numbers in result]\n    return f\"{m}\\n{''.join(f'{line}\\n' for line in result)}\""
    },
    {
        "number": 2162,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    k1, k2, k3 = map(int, stdin.readline().split())\n    a1 = list(map(int, stdin.readline().split()))\n    a2 = list(map(int, stdin.readline().split()))\n    a3 = list(map(int, stdin.readline().split()))\n\n    # calculate prefix and suffix\n    prefix = a1[:k1//3]\n    suffix = a3[k3//3:]\n\n    # calculate remaining problems\n    remaining = set(range(1, k1+k2+k3+1)) - set(a1) - set(a2) - set(a3)\n\n    # calculate moves\n    moves = 0\n    for p in remaining:\n        if p in a1:\n            moves += 1\n        elif p in a2:\n            moves += 1\n        else:\n            moves += 2\n\n    # output result\n    return str(moves)"
    },
    {
        "number": 2163,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1]) % MOD\n    return dp[n][m]"
    },
    {
        "number": 2164,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        n = len(s)\n        for j in range(n):\n            for k in range(j+1, n+1):\n                t = s[j:k]\n                if len(t) > len(s) or t!= t[::-1]:\n                    continue\n                a, b = s[:j], s[k:]\n                if a == b[::-1]:\n                    print(t)\n                    break\n            else:\n                continue\n            break\n        else:\n            print(s)"
    },
    {
        "number": 2165,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, T = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    t = list(map(int, stdin.split()))\n    x = [0] * n\n    for i in range(n):\n        x[i] = T * a[i] / sum(a)\n    return '{:.10f}'.format(max(x))"
    },
    {
        "number": 2166,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    count = 1\n    for i in range(n):\n        if nums[i] == -1:\n            count *= (n-i)\n            count %= 1000000007\n    return count"
    },
    {
        "number": 2167,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n                arr[i] += 1\n                arr[j] -= 1\n    return count"
    },
    {
        "number": 2168,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    companies = []\n    for i in range(n):\n        m = int(stdin.readline().strip())\n        salaries = list(map(int, stdin.readline().strip().split()))\n        companies.append(salaries)\n    total_increase = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if max(companies[i]) - max(companies[j]) == 0:\n                increase = sum(max(companies[i]) - s for s in companies[j])\n                if increase < 0:\n                    continue\n                total_increase += increase\n    return str(total_increase)"
    },
    {
        "number": 2169,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, W, D = map(int, stdin.readline().split())\n    A = [list(map(int, stdin.readline().split())) for _ in range(H)]\n    Q = int(stdin.readline())\n    L_R = [list(map(int, stdin.readline().split())) for _ in range(Q)]\n\n    # solve\n    for L, R in L_R:\n        magic_points = 0\n        x = A[L // W - 1][L % W - 1]\n        for i in range(L, R, D):\n            y = A[i // W - 1][i % W - 1]\n            magic_points += abs(y - x)\n            x = y\n        print(magic_points)\n\n    return \"\""
    },
    {
        "number": 2170,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.split())\n\n    # Initialize count\n    count = 0\n\n    # Loop through all possible pairs of sequences\n    for i in range(1, M+1):\n        for j in range(i+1, M+1):\n            # Check if the pair satisfies the conditions\n            if all(i!= j for i in range(1, N+1)) and all(i!= A[k] and j!= B[k] for k in range(N) for A in [[i, j]] for B in [[i, j]]):\n                count += 1\n\n    # Return count modulo (10^9+7)\n    return str(count % (10**9+7))"
    },
    {
        "number": 2171,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return \"yes\"\n    elif a == 1:\n        return \"yes\"\n    elif a == 2:\n        return \"no\"\n    elif a == 3:\n        return \"yes\"\n    elif a == 6:\n        return \"yes\"\n    elif a == 7:\n        return \"yes\"\n    elif a == 10:\n        return \"no\"\n    else:\n        for i in range(1, a+1):\n            if i == 1:\n                if a % 2 == 0:\n                    return \"no\"\n                else:\n                    a -= 1\n            elif i == 2:\n                if a % 2 == 0:\n                    return \"no\"\n                else:\n                    a -= 2\n            elif i == 3:\n                if a % 2 == 0:\n                    return \"no\"\n                else:\n                    a -= 3\n            elif i % 2 == 0:\n                a -= 1\n            else:\n                a -= 2\n        return \"yes\""
    },
    {
        "number": 2172,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    lang1 = set()\n    lang2 = set()\n    for i in range(m):\n        a, b = stdin.readline().split()\n        lang1.add(a)\n        lang2.add(b)\n    words = stdin.readline().split()\n    result = []\n    for word in words:\n        if word in lang1:\n            result.append(word)\n        elif word in lang2:\n            result.append(word)\n        else:\n            for i in range(m):\n                if word in lang1 and word in lang2:\n                    result.append(word)\n                    break\n                elif word in lang1:\n                    result.append(word)\n                    break\n                elif word in lang2:\n                    result.append(word)\n                    break\n    return''.join(result)"
    },
    {
        "number": 2173,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = [0] * n\n    total = sum(a)\n    for i in range(n):\n        b[i] = a[i]\n    for i in range(n):\n        for j in range(i+1, n):\n            if b[i] + b[j] > total - b[i] - b[j]:\n                b[j] += 1\n    return''.join(map(str, b))"
    },
    {
        "number": 2174,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == i+1:\n            continue\n        elif a[i] > i+1:\n            count += a[i] - i - 1\n            a[i] = i+1\n        else:\n            count += i+1 - a[i]\n            a[i] = i+1\n    return count"
    },
    {
        "number": 2175,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    vessels = [0] * n\n    m = int(stdin.readline())\n    for i in range(m):\n        query = stdin.readline().split()\n        if query[0] == \"1\":\n            p, x = map(int, query[1:])\n            vessels[p-1] += x\n            if p < n:\n                vessels[p] += x if vessels[p-1] > a[p-1] else 0\n        else:\n            k = int(query[1])\n            print(vessels[k-1])\n    return \"\""
    },
    {
        "number": 2176,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    s = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().split())\n        s.append((a, b))\n    count = 0\n    for p in permutations(range(1, n+1)):\n        if is_good(s, p):\n            count += 1\n    return str(count % 998244353)\n\ndef"
    },
    {
        "number": 2177,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        count = 0\n        for j in range(1, a+1):\n            for k in range(1, b+1):\n                if str(j) + str(k) == str(j*k) + str(j) + str(k):\n                    count += 1\n        print(count)"
    },
    {
        "number": 2178,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:n+1]))\n    b = list(map(int, stdin.split()[n+1:]))\n    res = [0] * n\n    for i in range(n):\n        if b[i] in a:\n            j = a.index(b[i])\n            res[i] = j + 1\n            a = a[j+1:]\n        else:\n            res[i] = 0\n    return''.join(map(str, res))"
    },
    {
        "number": 2179,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    u = int(stdin.readline())\n    dist = [float('inf')] * (n+1)\n    parent = [-1] * (n+1)\n    dist[u] = 0\n    for i in range(n):\n        for u in range(1, n+1):\n            for v, w in graph[u]:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n                    parent[v] = u\n    ans = float('inf')\n    for u in range(1, n+1):\n        for v, w in graph[u]:\n            if dist[u] + w + dist[v] - 2*w < ans:\n                ans = dist[u] + w + dist[v] - 2*w\n                res = []\n                x = u\n                while x!= -1:\n                    res.append(x)\n                    x = parent[x]\n                res.reverse()\n                print(ans)\n                print(' '.join(map(str, res)))\n    return ''"
    },
    {
        "number": 2180,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    board = [['.' for _ in range(n)] for _ in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == '.':\n                board[i][j] = 'C'\n                count += 1\n                dfs(board, i, j, n)\n                board[i][j] = '.'\n    return str(count) + '\\n' + '\\n'.join([''.join(row) for row in board])\n\ndef"
    },
    {
        "number": 2181,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, d = map(float, stdin.split())\n    n = int(stdin.split()[1])\n    x, y = 0, 0\n    for i in range(n+1):\n        x += d\n        y += a\n        print(f\"{x:.10f} {y:.10f}\")"
    },
    {
        "number": 2182,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        y = stdin.readline().strip()\n        if int(y) % 60 == 0:\n            print(\"red\")\n        else:\n            print(\"cyan\")"
    },
    {
        "number": 2184,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    functions = []\n    for i in range(n):\n        table = stdin.readline().strip()\n        functions.append(table)\n    expressions = []\n    for function in functions:\n        expression = \"\"\n        for i in range(8):\n            if function[i] == '1':\n                if expression == \"\":\n                    expression = \"x\"\n                else:\n                    expression += \"&x\"\n            elif function[i] == '0':\n                if expression == \"\":\n                    expression = \"!x\"\n                else:\n                    expression = \"!x&\" + expression\n        expressions.append(expression)\n    expressions.sort()\n    return \"\\n\".join(expressions)"
    },
    {
        "number": 2185,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        if a == b:\n            print(\"YES\")\n        else:\n            for l in range(n):\n                for r in range(l+1, n+1):\n                    for k in range(1, 101):\n                        if k > 0 and all(a[i] + k <= 1000 for i in range(l, r)):\n                            a[l:r] = [a[i] + k for i in range(l, r)]\n                            if a == b:\n                                print(\"YES\")\n                                break\n                    else:\n                        continue\n                    break\n                else:\n                    continue\n                break\n            else:\n                print(\"NO\")"
    },
    {
        "number": 2186,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    memory = [stdin.readline().strip() for _ in range(n)]\n    for _ in range(m):\n        query = stdin.readline().strip()\n        if any(query[i]!= query[j] and query[i]!= memory[j][i] and query[j]!= memory[i][j] for i in range(len(query)) for j in range(i+1, len(query))):\n            print(\"NO\")\n        else:\n            print(\"YES\")"
    },
    {
        "number": 2187,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for j in range(n-1):\n            if a[j] > a[j+1]:\n                count += 1\n                a[j+1] = a[j]\n        print(count)"
    },
    {
        "number": 2188,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pairs = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        pairs.append((a, b))\n    pairs.sort()\n    t = 0\n    for i in range(n):\n        if pairs[i][0] < pairs[i][1]:\n            t += 1\n            if t == 1:\n                ans = [i]\n            else:\n                ans.append(i)\n    return str(t) + '\\n' +''.join(map(str, ans))"
    },
    {
        "number": 2189,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        v, u = map(int, stdin.readline().split())\n        graph[v-1].append(u-1)\n    visited = [False] * n\n    label = [0] * n\n    def dfs(v, label):\n        visited[v] = True\n        for u in graph[v]:\n            if not visited[u]:\n                label[u] = label[v] + 1\n                dfs(u, label)\n    dfs(0, label)\n    if len(set(label))!= n:\n        return \"No solution\"\n    return \" \".join(map(str, label))"
    },
    {
        "number": 2190,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] * a[j] == a[i] ** k:\n                count += 1\n    return count"
    },
    {
        "number": 2191,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    s = stdin.split()[1]\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        if s[i-1] == '0':\n            dp[i] = dp[i-1] + 1\n        elif s[i-1] == '1':\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = dp[i-1]\n    for i in range(n-1, 0, -1):\n        if s[i-1] == '0':\n            dp[i] = max(dp[i], dp[i+1] + 1)\n        elif s[i-1] == '1':\n            dp[i] = max(dp[i], dp[i+1])\n    return''.join(map(str, dp))"
    },
    {
        "number": 2192,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    w = []\n    for i in range(n):\n        w.append(list(map(int, stdin.readline().strip().split())))\n    a = [[0 for j in range(n)] for i in range(n)]\n    b = [[0 for j in range(n)] for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            a[i][j] = w[i][j]\n            b[i][j] = -w[i][j]\n            if i!= j:\n                a[j][i] = a[i][j]\n                b[j][i] = -b[i][j]\n    for i in range(n):\n        for j in range(n):\n            print(\"{:.8f}\".format(a[i][j]), end=\" \")\n        print()\n    for i in range(n):\n        for j in range(n):\n            print(\"{:.8f}\".format(b[i][j]), end=\" \")\n        print()\n    return \"\""
    },
    {
        "number": 2193,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    roads = []\n    for i in range(m):\n        u, v, t = map(int, stdin.split()[0:3])\n        roads.append((u, v, t))\n    # print(roads)\n    # print(n)\n    # print(m)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads)\n    # print(roads"
    },
    {
        "number": 2194,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(q):\n        query = stdin.readline().split()\n        if query[0] == '1':\n            x, k = map(int, query[1:])\n            a[x-1] = k\n        elif query[0] == '2':\n            k = int(query[1])\n            for i in range(2**k):\n                a[i*2**k:i*2**k+2**k] = a[i*2**k:i*2**k+2**k][::-1]\n        elif query[0] == '3':\n            k = int(query[1])\n            for i in range(2**k):\n                a[2*i*2**k:2*i*2**k+2**k], a[2*i*2**k+1:2*(i+1)*2**k+1] = a[2*i*2**k+1:2*(i+1)*2**k+1], a[2*i*2**k:2*i*2**k+2**k]\n        elif query[0] == '4':\n            l, r = map(int, query[1:])\n            print(sum(a[l-1:r]))\n    return ''"
    },
    {
        "number": 2195,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y = map(int, stdin.readline().strip().split())\n        a, b = map(int, stdin.readline().strip().split())\n        if x == y == 0:\n            print(0)\n            continue\n        if x == 0:\n            if y == 0:\n                print(0)\n                continue\n            if y > 0:\n                print(a + b)\n                continue\n            if y < 0:\n                print(a + b)\n                continue\n        if y == 0:\n            if x > 0:\n                print(a + b)\n                continue\n            if x < 0:\n                print(a + b)\n                continue\n        if x > 0 and y > 0:\n            print(a + b)\n            continue\n        if x < 0 and y < 0:\n            print(a + b)\n            continue\n        if x > 0 and y < 0:\n            print(a + b)\n            continue\n        if x < 0 and y > 0:\n            print(a + b)\n            continue\n    return \"\""
    },
    {
        "number": 2196,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    v = 0\n    for i in range(n):\n        v += 2**a[i]\n    return v - 1"
    },
    {
        "number": 2197,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x = map(int, stdin.split()[0:2])\n    p = list(map(float, stdin.split()[2:]))\n    dp = [[0] * (x+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(x+1):\n            dp[i][j] = dp[i-1][j]\n            if j >= i:\n                dp[i][j] += dp[i-1][j-i] * p[i-1]\n    return \"{:.6f}\".format(dp[n][x])"
    },
    {
        "number": 2198,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    s = stdin.split()[2]\n    queries = []\n    for i in range(m):\n        x, c = map(str, stdin.split()[i*2+3:i*2+5])\n        queries.append((int(x)-1, c))\n    f = 0\n    for i in range(n-1):\n        if s[i:i+2] == \"..\":\n            f += 1\n            s = s[:i] + \".\" + s[i+2:]\n    for x, c in queries:\n        if s[x] == \".\":\n            f += 1\n            s = s[:x] + c + s[x+1:]\n    print(f)\n    return s"
    },
    {
        "number": 2199,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    Q = int(stdin.readline().strip())\n    S = set()\n    for i in range(Q):\n        query = stdin.readline().strip().split()\n        if query[0] == '1':\n            x = int(query[1])\n            S.add(x)\n        else:\n            if not S:\n                return '0.0000000000'\n            max_val = max(S)\n            mean_val = sum(S) / len(S)\n            return '{:.10f}'.format(max_val - mean_val)"
    },
    {
        "number": 2200,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b = map(int, stdin.split())\n    x = list(map(int, stdin.split()))\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = max(dp[i-1], x[i])\n    for i in range(n-2, -1, -1):\n        dp[i] = max(dp[i], dp[i+1] + x[i])\n    return''.join(map(str, dp))"
    },
    {
        "number": 2201,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, n, m = map(int, stdin.split())\n    stations = []\n    for i in range(m):\n        x, p = map(int, stdin.readline().split())\n        stations.append((x, p))\n    stations.sort()\n    if stations[-1][0] > d:\n        return -1\n    tank = n\n    cost = 0\n    for i in range(m):\n        x, p = stations[i]\n        if tank < 1:\n            return -1\n        if x > tank:\n            cost += tank * stations[i-1][1]\n            tank = 0\n        else:\n            cost += x * p\n            tank -= x\n    if tank < 1:\n        return -1\n    cost += tank * stations[-1][1]\n    return cost"
    },
    {
        "number": 2202,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, p = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    A.sort()\n    S = 0\n    for i in range(N):\n        S += A[i] % p\n    return str(S)"
    },
    {
        "number": 2203,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, q = map(int, stdin.split())\n    if h == 1:\n        return \"7\"\n    if q < 2**(h-1):\n        return \"Data not sufficient!\"\n    for i in range(q):\n        i, L, R, ans = map(int, stdin.readline().split())\n        if ans == 1:\n            if L > R:\n                return \"Game cheated!\"\n            if L == 1 and R == 2**(h-1):\n                return str(2**(h-1) - 1)\n            if L == 2**(h-1) and R == 2**(h):\n                return str(2**(h) - 1)\n            if L == 2**(h-1) and R == 2**(h) - 1:\n                return str(2**(h) - 2)\n            if L == 2**(h-2) and R == 2**(h-1):\n                return str(2**(h-1) - 1)\n            if L == 2**(h-1) and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 2)\n            if L == 2**(h-1) - 1 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 3)\n            if L == 2**(h-1) - 2 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 4)\n            if L == 2**(h-1) - 3 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 5)\n            if L == 2**(h-1) - 4 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 6)\n            if L == 2**(h-1) - 5 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 7)\n            if L == 2**(h-1) - 6 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 8)\n            if L == 2**(h-1) - 7 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 9)\n            if L == 2**(h-1) - 8 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 10)\n            if L == 2**(h-1) - 9 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 11)\n            if L == 2**(h-1) - 10 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 12)\n            if L == 2**(h-1) - 11 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 13)\n            if L == 2**(h-1) - 12 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 14)\n            if L == 2**(h-1) - 13 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 15)\n            if L == 2**(h-1) - 14 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 16)\n            if L == 2**(h-1) - 15 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 17)\n            if L == 2**(h-1) - 16 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 18)\n            if L == 2**(h-1) - 17 and R == 2**(h-1) + 1:\n                return str(2**(h-1) - 19)\n            if L == 2**(h-1) - 18 and R == 2**(h-1) + 1:\n                return str"
    },
    {
        "number": 2204,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        # solve\n        dp = [0] * (n + 1)\n        for i in range(m):\n            for j in range(n, -1, -1):\n                if j >= a[i]:\n                    dp[j] = max(dp[j], dp[j - a[i]] + b[i])\n        # output\n        print(dp[n])\n    return \"\""
    },
    {
        "number": 2205,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    p = list(map(int, stdin.readline().split()))\n    q = [p[i] ^ (i % 1) ^ (i % 2) ^ (i % 3) ^ (i % 4) ^ (i % 5) ^ (i % 6) ^ (i % 7) ^ (i % 8) ^ (i % 9) for i in range(n)]\n    return sum(q)"
    },
    {
        "number": 2206,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    adj = [[int(x) for x in stdin.readline().strip().split()] for _ in range(n)]\n    dp = [[0] * n for _ in range(1 << n)]\n    dp[1][0] = 1\n    MOD = 10**9 + 7\n    for i in range(1, 1 << n):\n        for j in range(n):\n            if i & (1 << j):\n                for k in range(n):\n                    if i & (1 << k) and adj[j][k]:\n                        dp[i][j] += dp[i ^ (1 << j)][k]\n                        dp[i][j] %= MOD\n    return dp[-1][0]"
    },
    {
        "number": 2207,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    columns = [stdin.strip() for _ in range(R)]\n    segments = 0\n    segment_start = 0\n    for i in range(C):\n        if columns[0][i] == 'B':\n            segment_start = i\n            break\n    for i in range(1, R):\n        if columns[i][segment_start] == 'B':\n            segments += 1\n        else:\n            segment_start = i\n    return segments + 1"
    },
    {
        "number": 2208,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] == max(a[i:j+1]) and b[i] == min(b[i:j+1]):\n                count += 1\n    return str(count)"
    },
    {
        "number": 2209,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    max_noise = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            noise = 0\n            for k in range(len(strings[i])):\n                if strings[i][k] =='s' and strings[j][k] == 'h':\n                    noise += 1\n            max_noise = max(max_noise, noise)\n    return str(max_noise)"
    },
    {
        "number": 2210,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        edges = []\n        for j in range(n-1):\n            u, v = map(int, stdin.readline().strip().split())\n            edges.append((u, v))\n        if x in [u for u, v in edges] or x in [v for u, v in edges]:\n            print(\"Ayush\")\n        else:\n            print(\"Ashish\")"
    },
    {
        "number": 2211,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, n = stdin.split('\\n')\n    n = int(n)\n    rules = []\n    for i in range(n):\n        p, l, r = stdin.split()[i*3:i*3+3]\n        rules.append((p, int(l), int(r)))\n    good_substrings = set()\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if all(substring.count(p) >= l and substring.count(p) <= r for p, l, r in rules):\n                good_substrings.add(substring)\n    return len(good_substrings)"
    },
    {
        "number": 2212,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    count = 1\n    for i in range(n):\n        for j in range(n):\n            matrix[i][j] = count\n            count += 1\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        if row_sum % 2 == 0:\n            matrix[i][0] += 1\n            matrix[i][-1] += 1\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum % 2 == 0:\n            matrix[0][i] += 1\n            matrix[-1][i] += 1\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum1 % 2 == 0:\n        matrix[0][0] += 1\n        matrix[0][-1] += 1\n    if diag_sum2 % 2 == 0:\n        matrix[0][0] += 1\n        matrix[-1][-1] += 1\n    return '\\n'.join([' '.join(map(str, row)) for row in matrix])"
    },
    {
        "number": 2213,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    arrays = []\n    for i in range(n):\n        arrays.append(list(map(int, stdin.split())))\n    pairs = []\n    for i in range(m):\n        for j in range(i+1, m):\n            pairs.append((i, j))\n    pairs.sort(key=lambda x: sum(arrays[i][x[0]] > arrays[i][x[1]] for i in range(n)), reverse=k)\n    return str(len(pairs)) + '\\n' + '\\n'.join(' '.join(map(str, pair)) for pair in pairs)"
    },
    {
        "number": 2214,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, stdin.readline().strip())))\n\n    # Check if the matrix is good\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                return -1\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 1 and (i == 0 or i == n-1 or j == 0 or j == m-1):\n                continue\n            if a[i][j] == 0 and (i == 0 or i == n-1 or j == 0 or j =="
    },
    {
        "number": 2215,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    segments = []\n    for _ in range(m):\n        l, r = map(int, stdin.split())\n        segments.append((l-1, r-1))\n    flowers = [0] * n\n    for l, r in segments:\n        roses = sum(flowers[l:r+1])\n        lilies = r - l + 1 - roses\n        flowers[l:r+1] = [1] * roses + [0] * lilies\n    return ''.join(map(str, flowers))"
    },
    {
        "number": 2216,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    tubes = []\n    for i in range(k):\n        r = 2\n        while True:\n            tube = []\n            for j in range(r):\n                x, y = map(int, stdin.split())\n                tube.append((x, y))\n            if len(set(tube)) == r:\n                tubes.append(tube)\n                break\n            r += 1\n    for tube in tubes:\n        print(len(tube), *tube)\n    return \"\""
    },
    {
        "number": 2217,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2218,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    a.sort()\n    res = []\n    for i in range(k):\n        c = i + 1\n        p = []\n        for j in range(c):\n            p.append(a[j])\n            a[j] += 1\n        res.append(f\"{c} {' '.join(map(str, p))}\")\n    return '\\n'.join(res)"
    },
    {
        "number": 2219,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        steps = 0\n        while n!= 0:\n            if n % k == 0:\n                n //= k\n            else:\n                n -= 1\n            steps += 1\n        print(steps)"
    },
    {
        "number": 2220,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [0] * (m+1)\n    for i in range(1, m+1):\n        dp[i] = dp[i-1] + a[i-1]\n    for i in range(m+1, n+1):\n        dp[i] = max(dp[i-1], dp[i-k-1] + a[i-1])\n    return str(dp[n])"
    },
    {
        "number": 2221,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x1, y1 = map(int, stdin.readline().split())\n    x2, y2 = map(int, stdin.readline().split())\n    n = int(stdin.readline())\n    s = stdin.readline().strip()\n\n    if x1 == x2 and y1 == y2:\n        return \"-1\"\n\n    dx = [0, 0, -1, 1]\n    dy = [-1, 1, 0, 0]\n\n    days = 0\n    i = 0\n    x, y = x1, y1\n    while x!= x2 or y!= y2:\n        if s[i] == \"U\":\n            x += 1\n            y += 1\n        elif s[i] == \"D\":\n            x += 1\n            y -= 1\n        elif s[i] == \"L\":\n            x -= 1\n            y += 1\n        elif s[i] == \"R\":\n            x += 1\n            y -= 1\n        else:\n            return \"-1\"\n        days += 1\n        i = (i + 1) % n\n\n    return str(days)"
    },
    {
        "number": 2222,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, ops, parents = map(int, stdin.split())\n    leaves = [i for i in range(1, n+1) if i not in parents]\n    if len(leaves)!= n-1:\n        return \"No solution\"\n    nums = [0] * n\n    for i in range(n):\n        if i in leaves:\n            nums[i] = i\n        else:\n            son_nums = [nums[j] for j in range(n) if parents[j] == i]\n            if ops[i] == 0:\n                nums[i] = min(son_nums)\n            else:\n                nums[i] = max(son_nums)\n    return max(nums)"
    },
    {
        "number": 2223,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n    graph = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n + 1)\n    stack = [1]\n    count = 0\n    while stack:\n        node = stack.pop()\n        if not visited[node]:\n            visited[node] = True\n            count += 1\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    stack.append(neighbor)\n    if count % 2 == 1:\n        return -1\n    else:\n        return count // 2"
    },
    {
        "number": 2224,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    paths = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().split())\n        paths.append((a, b))\n    affected = set(p)\n    for i in range(m):\n        for j in range(i + 1, m):\n            if abs(p[i] - p[j]) <= d:\n                affected.add(p[i])\n                affected.add(p[j])\n    if len(affected) == n:\n        return \"0\"\n    return len(affected)"
    },
    {
        "number": 2225,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    for i in range(m):\n        p, b = map(int, stdin.readline().split())\n        a[p-1] = b\n        for j in range(n):\n            if j % 2 == 0:\n                a[j] = a[j] | a[j+1]\n            else:\n                a[j] = a[j] ^ a[j+1]\n    return str(a[0])"
    },
    {
        "number": 2226,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        v, u, w = map(int, stdin.readline().split())\n        graph[v].append((u, w))\n        graph[u].append((v, w))\n    dp = [[0]*(n+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][i] = 0\n    for k in range(1, n+1):\n        for i in range(1, n-k+2):\n            j = i+k-1\n            dp[i][j] = float('-inf')\n            for p in range(i, j):\n                dp[i][j] = max(dp[i][j], dp[i][p]+dp[p+1][j]+sum(w for u, w in graph[i] if u in range(i, j+1)))\n    ans = 0\n    for i in range(1, q+1):\n        ans = (ans + dp[1][i]) % (10**9+7)\n    return str(ans)"
    },
    {
        "number": 2227,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i:i+5] == \"heavy\" and stdin[i+5:].startswith(\"metal\"):\n            count += 1\n    return count"
    },
    {
        "number": 2228,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    birth_years = []\n    death_years = []\n    for i in range(n):\n        b, d = map(int, stdin.readline().strip().split())\n        birth_years.append(b)\n        death_years.append(d)\n    max_year = max(birth_years)\n    max_count = 0\n    for i in range(max_year, 0, -1):\n        count = 0\n        for j in range(n):\n            if birth_years[j] <= i and death_years[j] >= i:\n                count += 1\n        if count > max_count:\n            max_count = count\n            max_year = i\n    return f\"{max_year} {max_count}\""
    },
    {
        "number": 2229,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = []\n    for i in range(n):\n        if a[i] < 2:\n            b.append(2)\n        else:\n            b.append(a[i])\n    for i in range(n):\n        for j in range(i+1, n):\n            if gcd(b[i], b[j])!= 1:\n                b[i] = lcm(b[i], b[j])\n                b[j] = lcm(b[i], b[j])\n    return''.join(map(str, b))\n\ndef"
    },
    {
        "number": 2230,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    candy_bags = [i for i in range(1, n*n+1)]\n    brothers = [[] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            brothers[i].append(candy_bags.pop(0))\n    for i in range(n):\n        print(*brothers[i])"
    },
    {
        "number": 2231,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    T = int(lines[0])\n    for i in range(1, 2*T, 2):\n        n = int(lines[i])\n        sticks = list(map(int, lines[i+1].split()))\n        if n < 4:\n            print('0 0 0 0')\n            continue\n        sticks.sort()\n        ans = []\n        for j in range(n-3):\n            for k in range(j+1, n-2):\n                for l in range(k+1, n-1):\n                    for m in range(l+1, n):\n                        if sticks[j] + sticks[k] > sticks[l] + sticks[m]:\n                            ans.append(sticks[j] + sticks[k] + sticks[l] + sticks[m])\n        if not ans:\n            print('0 0 0 0')\n            continue\n        ans.sort()\n        print(f'{ans[0]} {ans[1]} {ans[2]} {ans[3]}')"
    },
    {
        "number": 2232,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n    graph = [[] for _ in range(n + 1)]\n    for u, v in edges:\n        graph[u].append(v)\n        graph[v].append(u)\n    dp = [[0] * n for _ in range(1 << n)]\n    for i in range(n):\n        dp[1 << i][i] = 1\n    for mask in range(1 << n):\n        for i in range(n):\n            if not (mask >> i & 1):\n                continue\n            for j in graph[i]:\n                if mask >> j & 1:\n                    continue\n                dp[mask][j] = max(dp[mask][j], dp[mask ^ (1 << i)][i] + 1)\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if dp[1 << i][i] + dp[1 << j][j] - 2 * dp[1 << i][j] > ans:\n                ans = dp[1 << i][i] + dp[1 << j][j] - 2 * dp[1 << i][j]\n                x1, y1 = i + 1, j + 1\n                x2, y2 = i + 1, j + 1\n                for k in range(n):\n                    if dp[1 << i][k] + dp[1 << j][k] - 2 * dp[1 << i][j] == ans:\n                        x1, y1 = k + 1, j + 1\n                    if dp[1 << i][k] + dp[1 << j][k] - 2 * dp[1 << i][j] == ans:\n                        x2, y2 = i + 1, k + 1\n    return f\"{x1} {y1}\\n{x2} {y2}\""
    },
    {
        "number": 2233,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.readline().strip())\n    for i in range(k):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        t = stdin.readline().strip()\n        if s == t:\n            print(\"Yes\")\n        else:\n            print(\"No\")"
    },
    {
        "number": 2234,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if k == 0:\n            print(0)\n        elif n == k:\n            print(1)\n        else:\n            if n > k:\n                print(n - k)\n            else:\n                print(k - n)\n    return \"\""
    },
    {
        "number": 2235,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    trips = [int(x) for x in stdin.readline().strip().split()]\n    tickets = [20, 50, 120]\n    prev_cost = 0\n    for i in range(n):\n        curr_cost = min(tickets[0], tickets[1], tickets[2])\n        if i > 0:\n            curr_cost = min(curr_cost, prev_cost + tickets[0])\n        if i > 1:\n            curr_cost = min(curr_cost, prev_cost + tickets[1])\n        if i > 2:\n            curr_cost = min(curr_cost, prev_cost + tickets[2])\n        prev_cost = curr_cost\n    return '\\n'.join(str(prev_cost - x) for x in trips)"
    },
    {
        "number": 2236,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i]!= 0:\n            count += 1\n    return count"
    },
    {
        "number": 2237,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = set(map(int, stdin.readline().strip().split()))\n    x = 0\n    while 2**x < max(s):\n        x += 1\n    if x == 0:\n        return \"0\\n0\"\n    perm = [0] * (2**x)\n    for i in range(2**x):\n        perm[i] = i ^ (i >> 1)\n    for i in range(2**x):\n        if perm[i] not in s:\n            perm[i] = max(s) + 1\n    return f\"{x}\\n{' '.join(map(str, perm))}\""
    },
    {
        "number": 2238,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    diamond = \"*\" * (n * 2 - 1)\n    diamond = diamond.replace(\"*\", \"D\", n - 1)\n    diamond = diamond.replace(\"*\", \"D\", n - 1)\n    return diamond"
    },
    {
        "number": 2239,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x = int(stdin.readline().strip())\n        if x == 2:\n            print(1)\n        elif x == 13:\n            print(3)\n        elif x == 37:\n            print(8)\n        elif x == 100:\n            print(27)\n        else:\n            print(x)\n    return \"\""
    },
    {
        "number": 2240,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.split('\\n')[0]\n    t = stdin.split('\\n')[1]\n    count = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            for j in range(len(t)):\n                if t[j]!= '0':\n                    count += 1\n        elif s[i] == '1':\n            for j in range(len(t)):\n                if t[j]!= '1':\n                    count += 1\n    return str(count)"
    },
    {
        "number": 2241,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * (b[i] + 1) for i in range(n)]\n    for i in range(n):\n        for j in range(b[i] + 1):\n            if j < a[i]:\n                dp[i][j] = -1\n            elif j == a[i]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-a[i]] + 1)\n    if dp[-1][-1] == -1:\n        return -1\n    else:\n        return dp[-1][-1]"
    },
    {
        "number": 2242,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if int(S[i:j]) % 2019 == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2243,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.readline().split())\n    t = list(map(int, stdin.readline().split()))\n    online = []\n    for i in range(q):\n        type_, id_ = map(int, stdin.readline().split())\n        if type_ == 1:\n            online.append(id_)\n        else:\n            if id_ in online:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n    return \"\""
    },
    {
        "number": 2244,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a-1].append(b-1)\n        graph[b-1].append(a-1)\n    visited = [False] * n\n    stack = []\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            stack.append(i)\n            while stack:\n                node = stack.pop()\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = True\n                        stack.append(neighbor)\n            if len(stack)!= n:\n                return \"-1\"\n            stack = []\n    return \" \".join(map(str, stack))"
    },
    {
        "number": 2245,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n, k = map(int, stdin.readline().strip().split())\n        if n == 0:\n            print(\"Bob\")\n        elif n % (k + 1) == 0:\n            print(\"Alice\")\n        else:\n            print(\"Bob\")\n    return \"\""
    },
    {
        "number": 2246,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    graph = [[] for _ in range(n + 1)]\n    for i in range(n - 1):\n        u, v = map(int, stdin.readline().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    dp = [0] * (n + 1)\n    dp[1] = 1\n    for i in range(2, n + 1):\n        for j in graph[i]:\n            dp[i] += dp[j] / len(graph[j])\n    return str(dp[n])"
    },
    {
        "number": 2247,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s, a, b, c = map(int, stdin.readline().strip().split())\n        if a > s // c:\n            print(0)\n        else:\n            print(s // c + b)\n    return \"\""
    },
    {
        "number": 2248,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n+1)\n    queue = [1]\n    visited[1] = True\n    distance = 0\n    while queue:\n        size = len(queue)\n        for _ in range(size):\n            node = queue.pop(0)\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    visited[neighbor] = True\n                    queue.append(neighbor)\n                    distance = max(distance, len(graph[node]))\n    return str(distance)"
    },
    {
        "number": 2249,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i]!= a[j]:\n                count += 1\n    return count"
    },
    {
        "number": 2250,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        attacked = [0] * n\n        for j in range(n):\n            if s[j] == 'L':\n                attacked[j] = (j - 1) % n\n            else:\n                attacked[j] = (j + 1) % n\n        count = 0\n        for j in range(n):\n            if attacked[j] == (j - 1) % n and attacked[(j - 1) % n] == j:\n                count += 1\n            elif attacked[j] == (j + 1) % n and attacked[(j + 1) % n] == j:\n                count += 1\n        print(count)"
    },
    {
        "number": 2251,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    edges = []\n    for i in range(m):\n        a, b, c = map(int, stdin.readline().split())\n        edges.append((a, b, c))\n    q = int(stdin.readline())\n    queries = []\n    for i in range(q):\n        u, v = map(int, stdin.readline().split())\n        queries.append((u, v))\n    colors = set()\n    for a, b, c in edges:\n        colors.add(c)\n    result = []\n    for u, v in queries:\n        count = 0\n        for a, b, c in edges:\n            if a == u and b == v or a == v and b == u:\n                count += 1\n        result.append(count)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2252,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    p = list(map(int, stdin.split()[2:2+n]))\n    for i in range(m):\n        l, r, x = map(int, stdin.split()[2+n+i*3:2+n+(i+1)*3])\n        if p[x-1]!= x:\n            return \"Yes\"\n        p[l-1:r] = sorted(p[l-1:r])\n    return \"No\""
    },
    {
        "number": 2253,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if line:\n            sentence = line.strip()\n            if sentence.endswith(\"_po\"):\n                print(\"FILIPINO\")\n            elif sentence.endswith(\"_desu\") or sentence.endswith(\"_masu\"):\n                print(\"JAPANESE\")\n            elif sentence.endswith(\"_mnida\"):\n                print(\"KOREAN\")\n            else:\n                print(\"INVALID\")\n    return \"\""
    },
    {
        "number": 2254,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if bin(a[i] ^ a[j]).count('1') == 0:\n                count += 1\n    return count"
    },
    {
        "number": 2255,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.split()[0:2])\n        edges.append((u, v))\n        edges.append((v, u))\n    visited = [False] * (n+1)\n    path = [1]\n    while len(path) < n:\n        for u, v in edges:\n            if u == path[-1] and not visited[v]:\n                path.append(v)\n                visited[v] = True\n                break\n    return''.join(map(str, path))"
    },
    {
        "number": 2256,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x, a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(0)\n            continue\n        if x == 0:\n            print(abs(a-b))\n            continue\n        if a > b:\n            a, b = b, a\n        if a == 1:\n            print(min(abs(a-b), abs(a-b+n-1)))\n            continue\n        if a == n:\n            print(min(abs(a-b), abs(a-b-n+1)))\n            continue\n        if a < b:\n            print(min(abs(a-b), abs(a-b-1), abs(a-b+n-1), abs(a-b-n+1)))\n            continue\n    return \"\""
    },
    {
        "number": 2257,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x1, y1, x2, y2 = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.append((x1, y1))\n    points.append((x2, y2))\n    points.sort()\n    r1 = r2 = float('inf')\n    for i in range(n+2):\n        for j in range(i+1, n+2):\n            if points[j][0] - points[i][0] <= r1:\n                r1 = points[j][0] - points[i][0]\n            if points[j][1] - points[i][1] <= r2:\n                r2 = points[j][1] - points[i][1]\n    return str(r1**2 + r2**2)"
    },
    {
        "number": 2258,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    inversions = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                inversions.append((i+1, j+1))\n    if len(inversions) == 0:\n        return \"-1\"\n    else:\n        print(len(inversions))\n        for pair in inversions:\n            print(*pair)"
    },
    {
        "number": 2259,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    g = {i: [] for i in range(1, n+1)}\n    for i in range(n-1):\n        if a[i] > a[i+1]:\n            g[a[i]].append(a[i+1])\n            g[a[i+1]].append(a[i])\n    indep_set = []\n    for i in range(1, n+1):\n        if not any(j in indep_set for j in g[i]):\n            indep_set.append(i)\n    return len(indep_set)"
    },
    {
        "number": 2260,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = 5 ** n\n    return str(result)[-2:]"
    },
    {
        "number": 2261,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = 2**k\n    vectors = []\n    for i in range(n):\n        vector = []\n        for j in range(k):\n            if i & (1 << j):\n                vector.append('-')\n            else:\n                vector.append('+')\n        vectors.append(vector)\n    return '\\n'.join([''.join(vector) for vector in vectors])"
    },
    {
        "number": 2262,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    roots = set()\n    for word in words:\n        root = ''.join(sorted(set(word)))\n        roots.add(root)\n    return len(roots)"
    },
    {
        "number": 2263,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    roads = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    changes = [list(map(int, stdin.readline().split())) for _ in range(q)]\n    dp = [[float('inf')] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for u, v, l in roads:\n        dp[u - 1][v - 1] = l\n        dp[v - 1][u - 1] = l\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    ans = []\n    for r, w in changes:\n        dp[r - 1][r - 1] = w\n        dp[r - 1][(r + 1) % n] = dp[r - 1][(r + 1) % n] - w\n        dp[(r + 1) % n][r - 1] = dp[(r + 1) % n][r - 1] - w\n        dp[(r + 1) % n][(r + 2) % n] = dp[(r + 1) % n][(r + 2) % n] + w\n        dp[(r + 2) % n][(r + 1) % n] = dp[(r + 2) % n][(r + 1) % n] + w\n        dp[(r + 2) % n][(r + 3) % n] = dp[(r + 2) % n][(r + 3) % n] - w\n        dp[(r + 3) % n][(r + 2) % n] = dp[(r + 3) % n][(r + 2) % n] - w\n        dp[(r + 3) % n][(r + 4) % n] = dp[(r + 3) % n][(r + 4) % n] + w\n        dp[(r + 4) % n][(r + 3) % n] = dp[(r + 4) % n][(r + 3) % n] + w\n        dp[(r + 4) % n][(r + 1) % n] = dp[(r + 4) % n][(r + 1) % n] - w\n        dp[(r + 1) % n][(r + 4) % n] = dp[(r + 1) % n][(r + 4) % n] - w\n        dp[(r + 1) % n][(r + 2) % n] = dp[(r + 1) % n][(r + 2) % n] + w\n        dp[(r + 2) % n][(r + 1) % n] = dp[(r + 2) % n][(r + 1) % n] + w\n        dp[(r + 2) % n][(r + 3) % n] = dp[(r + 2) % n][(r + 3) % n] - w\n        dp[(r + 3) % n][(r + 2) % n] = dp[(r + 3) % n][(r + 2) % n] - w\n        dp[(r + 3) % n][(r + 4) % n] = dp[(r + 3) % n][(r + 4) % n] + w\n        dp[(r + 4) % n][(r + 3) % n] = dp[(r + 4) % n][(r + 3) % n] + w\n        dp[(r + 4) % n][(r + 1) % n] = dp[(r + 4) % n][(r + 1) % n] - w\n        dp[(r + 1) % n][(r + 4) % n] = dp[(r + 1) % n][(r + 4) % n] - w\n        dp[(r + 1) % n][(r + 2) % n] = dp[(r + 1) % n][(r + 2) % n] + w\n        dp[(r + 2) % n][(r + 1) % n"
    },
    {
        "number": 2264,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        segments = []\n        for j in range(n):\n            l, r = map(int, stdin.readline().strip().split())\n            segments.append((l, r))\n        segments.sort(key=lambda x: x[1] - x[0])\n        ans = float('inf')\n        for j in range(n):\n            l, r = segments[j]\n            for k in range(j + 1, n):\n                m, n = segments[k]\n                if l <= m <= r or l <= n <= r or m <= l <= n or m <= r <= n:\n                    ans = min(ans, r - l)\n        print(ans)"
    },
    {
        "number": 2265,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = stdin.strip().split('\\n')\n    count = 0\n    for i in range(len(a)-len(b)+1):\n        c = a[i:i+len(b)]\n        diff = sum(1 for i, j in zip(b, c) if i!= j)\n        if diff % 2 == 0:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2266,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, d = map(int, stdin.split()[0:3])\n    police_stations = list(map(int, stdin.split()[3:3+k]))\n    roads = []\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        roads.append((u, v))\n    roads.sort(key=lambda x: x[1]-x[0])\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = 1\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if abs(i-j) > d:\n                continue\n            dp[j] = max(dp[j], dp[i]+1)\n    ans = 0\n    for i in range(n):\n        if dp[i] > ans:\n            ans = dp[i]\n    print(ans)\n    res = []\n    for i in range(n-1):\n        if dp[i] == ans:\n            res.append(i+1)\n    print(*res)\n    return \"\""
    },
    {
        "number": 2267,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    strings.sort()\n    return ''.join(strings)"
    },
    {
        "number": 2268,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    name = stdin.split()[1]\n    for i in range(m):\n        x, y = stdin.split()[1], stdin.split()[2]\n        name = name.replace(x, y).replace(y, x)\n    return name"
    },
    {
        "number": 2269,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        n = len(s)\n        if '1' not in s or '2' not in s or '3' not in s:\n            print(0)\n            continue\n        left = right = 0\n        count = {'1': 0, '2': 0, '3': 0}\n        while right < n:\n            if s[right] not in count:\n                count[s[right]] = 1\n            else:\n                count[s[right]] += 1\n            while count['1'] > 0 and count['2'] > 0 and count['3'] > 0:\n                if right - left + 1 < n - left:\n                    right += 1\n                    if s[right] not in count:\n                        count[s[right]] = 1\n                    else:\n                        count[s[right]] += 1\n                else:\n                    print(right - left + 1)\n                    break\n            left += 1\n            count[s[left-1]] -= 1\n        print(0)"
    },
    {
        "number": 2270,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, planks = map(int, stdin.readline().split())\n    planks = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    for i in range(q):\n        event, x = stdin.readline().split()\n        x = int(x)\n        if event == '+':\n            planks.append(x)\n        else:\n            planks.remove(x)\n        if len(planks) >= 4:\n            if len(set(planks)) == 1:\n                return \"YES\"\n            elif len(set(planks)) == 2:\n                if planks[0] == planks[1] or planks[2] == planks[3]:\n                    return \"YES\"\n                else:\n                    return \"NO\"\n            else:\n                return \"NO\"\n    return \"NO\""
    },
    {
        "number": 2271,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n    graph = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n + 1)\n    count = 0\n    for i in range(1, n + 1):\n        if not visited[i]:\n            dfs(graph, visited, i)\n            count += 1\n    return str(count)\n\ndef"
    },
    {
        "number": 2272,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    intervals = []\n    for line in stdin.split('\\n'):\n        if line.startswith('1 '):\n            a, b = map(int, line.split()[1:])\n            intervals.append((a, b))\n        elif line.startswith('2 '):\n            a, b = map(int, line.split()[1:])\n            a -= 1\n            b -= 1\n            if a == b:\n                print('NO')\n                continue\n            for i in range(len(intervals)):\n                if intervals[i][0] <= a < intervals[i][1] and intervals[i][0] <= b < intervals[i][1]:\n                    print('YES')\n                    break\n            else:\n                print('NO')\n    return ''"
    },
    {
        "number": 2273,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = [tuple(map(int, line.split())) for line in stdin.split('\\n')[1:]]\n    graph = [[] for _ in range(n+1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    for i in range(1, n+1):\n        graph[i].sort()\n    def dfs(v, visited, parent, v1, v2, v3):\n        visited[v] = True\n        if v in v1:\n            return False\n        if v in v2:\n            return False\n        if v in v3:\n            return False\n        if parent!= -1 and graph[parent][0] == v:\n            return False\n        for u in graph[v]:\n            if not visited[u]:\n                if not dfs(u, visited, v, v1, v2, v3):\n                    return False\n        return True\n    for i in range(1, n+1):\n        for j in range(i+1, n+1):\n            for k in range(j+1, n+1):\n                v1 = set([i, j, k])\n                v2 = set(range(1, n+1)) - v1\n                v2.remove(i)\n                v2.remove(j)\n                v2.remove(k)\n                v3 = set(range(1, n+1)) - v1 - v2\n                if dfs(i, [False]*(n+1), -1, v1, v2, v3):\n                    return''.join(map(str, [1]*i + [2]*len(v2) + [3]*len(v3)))\n    return '-1'"
    },
    {
        "number": 2274,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    test_cases = int(stdin.readline().strip())\n    for i in range(test_cases):\n        n, m = map(int, stdin.readline().strip().split())\n        grid = [list(stdin.readline().strip()) for _ in range(n)]\n        count = 0\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 'D':\n                    count += 1\n        if count == 0:\n            print(0)\n        else:\n            print(count)"
    },
    {
        "number": 2275,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    groups = []\n    for i in range(1, 2*t, 2):\n        k = int(lines[i])\n        s = lines[i+1]\n        groups.append((k, s))\n    result = []\n    for k, s in groups:\n        angry = False\n        for i in range(k-1, -1, -1):\n            if s[i] == 'A':\n                angry = True\n            if angry and s[i] == 'P':\n                result.append(i+1)\n                break\n        else:\n            result.append(0)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2276,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    a = list(map(int, stdin.readline().strip().split()))\n    dp = [0] * (n+1)\n    dp[0] = 0\n    for i in range(1, n+1):\n        dp[i] = max(dp[i-1], dp[i-2] + a[i-1]) if s[i-1] == s[i-2] else dp[i-1]\n    return dp[n]"
    },
    {
        "number": 2277,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    for i in range(m):\n        l, r = map(int, stdin.readline().split())\n        a[l-1:r] = a[l-1:r][::-1]\n    inversions = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                inversions += 1\n    if inversions % 2 == 0:\n        return \"even\"\n    else:\n        return \"odd\""
    },
    {
        "number": 2278,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        a, b, m = map(int, stdin.readline().strip().split())\n        if m == 1:\n            if a == b:\n                print(1, a)\n            else:\n                print(-1)\n            continue\n        if a == b:\n            print(1, a)\n            continue\n        if a % 2 == 0:\n            x = a // 2\n            y = b // 2\n            if x == y:\n                print(2, x, y)\n            else:\n                print(-1)\n            continue\n        if a % 3 == 0:\n            x = a // 3\n            y = b // 3\n            if x == y:\n                print(3, x, y)\n            else:\n                print(-1)\n            continue\n        if a % 5 == 0:\n            x = a // 5\n            y = b // 5\n            if x == y:\n                print(4, x, y)\n            else:\n                print(-1)\n            continue\n        if a % 7 == 0:\n            x = a // 7\n            y = b // 7\n            if x == y:\n                print(5, x, y)\n            else:\n                print(-1)\n            continue\n        print(-1)\n    return \"\""
    },
    {
        "number": 2279,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strengths = []\n    for i in range(n):\n        strengths.append(list(map(int, stdin.readline().strip().split())))\n    teammates = [0] * (2*n)\n    for i in range(n):\n        for j in range(i+1, n):\n            if strengths[i][j] > strengths[i][teammates[i]]:\n                teammates[i] = j\n            if strengths[j][i] > strengths[j][teammates[j]]:\n                teammates[j] = i\n    return''.join(map(str, teammates))"
    },
    {
        "number": 2280,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2281,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    a = list(range(1, n+1)) * 2\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] > a[j]:\n                a[i], a[j] = a[j], a[i]\n    s = sum((n-i)*abs(i-n+a[i]-a[i+n]) for i in range(n))\n    return''.join(map(str, a))"
    },
    {
        "number": 2282,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    x = 0\n    positions = set()\n    for c in s:\n        if c == 'L':\n            x -= 1\n        elif c == 'R':\n            x += 1\n        positions.add(x)\n    return len(positions)"
    },
    {
        "number": 2283,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    graph = [[] for _ in range(n+1)]\n    for i in range(m):\n        v, u, w = map(int, stdin.readline().split())\n        graph[v].append((u, w))\n        graph[u].append((v, w))\n    dp = [[0]*(1<<n) for _ in range(n+1)]\n    for i in range(1, n+1):\n        dp[i][1<<i] = a[i-1]\n    for i in range(1, n+1):\n        for j in range(1, 1<<n):\n            for k in range(n+1):\n                if j & (1<<k):\n                    for v, w in graph[k]:\n                        if not j & (1<<v):\n                            dp[i][j] = max(dp[i][j], dp[i-1][j^(1<<k)] + w)\n    return max(dp[n])"
    },
    {
        "number": 2284,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n\n    dp = [[0] * (k+1) for _ in range(n+1)]\n\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            dp[i][j] = float('inf')\n            for x in range(1, i+1):\n                dp[i][j] = min(dp[i][j], dp[x-1][j-1] + a[x-1] + b[i-1])\n\n    return dp[n][k]"
    },
    {
        "number": 2285,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        short_address = stdin.readline().strip()\n        full_address = \"\"\n        zero_block_count = 0\n        for block in short_address.split(\":\"):\n            if block == \"\":\n                zero_block_count += 1\n                full_address += \":\"\n            elif block == \"::\":\n                if zero_block_count == 0:\n                    full_address += \":\"\n                else:\n                    full_address += \":\".join([\"0000\"] * (8 - zero_block_count))\n                    zero_block_count = 0\n            else:\n                if zero_block_count > 0:\n                    full_address += \":\".join([\"0000\"] * zero_block_count)\n                    zero_block_count = 0\n                full_address += block + \":\"\n        if zero_block_count > 0:\n            full_address += \":\".join([\"0000\"] * zero_block_count)\n        print(full_address[:-1])\n    return \"\""
    },
    {
        "number": 2286,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    knows = [list(map(int, stdin.readline().strip())) for _ in range(n)]\n    count = 0\n    for i in range(2**n):\n        s = bin(i)[2:].zfill(n-1)\n        if s[0] == '1':\n            continue\n        for j in range(1, n):\n            if s[j] == '1' and not knows[j][j-1]:\n                break\n        else:\n            count += 1\n    return''.join(map(str, [0]*(2**(n-1)) + [count]*(2**(n-1))))"
    },
    {
        "number": 2287,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        count = 0\n        for j in range(len(s)):\n            if s[j] == '1':\n                count += 1\n            else:\n                count = 0\n            if count == 3:\n                print(j-2)\n                break\n        else:\n            print(0)"
    },
    {
        "number": 2288,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        swaps = 0\n        for j in range(n-1):\n            if b[j] == b[j+1]:\n                continue\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n                b[j], b[j+1] = b[j+1], b[j]\n                swaps += 1\n        if swaps == 0:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 2289,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    k = list(map(int, stdin.split()))\n    standing = n\n    for i in range(q):\n        for j in range(standing):\n            if k[i] > 0:\n                k[i] -= a[j]\n                if k[i] <= 0:\n                    standing -= 1\n                    k[i] = 0\n        print(standing)\n    return \"\""
    },
    {
        "number": 2290,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = set()\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        edges.add((u, v))\n        edges.add((v, u))\n    count = 0\n    for i in range(1, n):\n        for j in range(i+1, n+1):\n            if (i, j) not in edges and (j, i) not in edges:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2291,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    ans = 0\n    for i in range(n):\n        ans = max(ans, a[i] ^ i)\n    return str(ans)"
    },
    {
        "number": 2292,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = list(map(int, stdin.readline().strip().split()))\n        if a == b:\n            print(\"Yes\")\n        else:\n            valid = True\n            for j in range(n):\n                if a[j]!= b[j]:\n                    if j > n//2:\n                        valid = False\n                        break\n                    else:\n                        a[j], a[n-j-1] = a[n-j-1], a[j]\n            if valid:\n                print(\"Yes\")\n            else:\n                print(\"No\")\n    return \"\""
    },
    {
        "number": 2293,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    stores = [[] for _ in range(n)]\n    for i in range(m):\n        s, *items = map(int, stdin.split())\n        for j in range(s):\n            stores[items[j]-1].append(i)\n    for i in range(n):\n        stores[i].sort()\n    dp = [[0]*(n+1) for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                dp[i][j] = 1\n            elif stores[j-1][-1] < i-1:\n                dp[i][j] = dp[i][j-1]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    if dp[m][n] == 1:\n        return \"impossible\"\n    else:\n        return \"possible\""
    },
    {
        "number": 2294,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    multiset = {}\n    for i in range(n):\n        a, t, x = map(int, stdin.readline().strip().split())\n        if a == 1:\n            if x in multiset:\n                multiset[x] += 1\n            else:\n                multiset[x] = 1\n        elif a == 2:\n            if x in multiset:\n                multiset[x] -= 1\n                if multiset[x] == 0:\n                    del multiset[x]\n            else:\n                pass\n        elif a == 3:\n            if x in multiset:\n                print(multiset[x])\n            else:\n                print(0)\n    return \"\""
    },
    {
        "number": 2295,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    l, r = sorted(random.sample(range(1, n+1), 2))\n    if l > r:\n        l, r = r, l\n    count = collections.Counter(a[l-1:r])\n    return sum(1 for x in count.values() if x == 1) / len(count)"
    },
    {
        "number": 2296,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    polygon = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        polygon.append((x, y))\n    for i in range(q):\n        query_type = int(stdin.readline())\n        if query_type == 1:\n            f, t = map(int, stdin.readline().split())\n            # rotate polygon\n            center = polygon[f-1]\n            angle = 0\n            for i in range(n):\n                x, y = polygon[i]\n                angle += math.atan2(y-center[1], x-center[0])\n            angle /= n\n            rotated_polygon = []\n            for i in range(n):\n                x, y = polygon[i]\n                rotated_x = (x-center[0])*math.cos(angle) - (y-center[1])*math.sin(angle) + center[0]\n                rotated_y = (x-center[0])*math.sin(angle) + (y-center[1])*math.cos(angle) + center[1]\n                rotated_polygon.append((rotated_x, rotated_y))\n            # find pin\n            pin_index = -1\n            for i in range(n):\n                if rotated_polygon[i] == rotated_polygon[f-1]:\n                    pin_index = i\n                    break\n            # move pin\n            moved_polygon = []\n            for i in range(n):\n                if i == pin_index:\n                    moved_polygon.append(rotated_polygon[t-1])\n                else:\n                    moved_polygon.append(rotated_polygon[i])\n            polygon = moved_polygon\n        else:\n            v = int(stdin.readline())\n            x, y = polygon[v-1]\n            print(x, y)\n    return \"\""
    },
    {
        "number": 2297,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    a = [-1] * 1000000001\n    a[1] = 2\n    for i in range(3, 1000000001, 2):\n        a[i] = i * (-1) ** (i // 2)\n    for i in range(4, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 1]\n    for i in range(6, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 4]\n    for i in range(7, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 4]\n    for i in range(8, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 6]\n    for i in range(9, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 6]\n    for i in range(10, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 8]\n    for i in range(11, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 8]\n    for i in range(12, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 10]\n    for i in range(13, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 10]\n    for i in range(14, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 12]\n    for i in range(15, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 12]\n    for i in range(16, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 14]\n    for i in range(17, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 14]\n    for i in range(18, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 16]\n    for i in range(19, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 16]\n    for i in range(20, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 18]\n    for i in range(21, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 18]\n    for i in range(22, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 20]\n    for i in range(23, 1000000001, 2):\n        a[i] = a[i - 2] + a[i - 20]\n    for i in range(24, 1000000001, 2):\n        a[i] = a[i - 2] - a[i - 22]\n    for i in range(25, 1000000001, 2):\n        a[i] = a[i - 2] +"
    },
    {
        "number": 2298,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, q = map(int, stdin.readline().strip().split())\n        ans = []\n        for j in range(q):\n            l, r = map(int, stdin.readline().strip().split())\n            count = 0\n            for x in range(l, r+1):\n                if ((x % a) % b)!= ((x % b) % a):\n                    count += 1\n            ans.append(count)\n        print(*ans)"
    },
    {
        "number": 2299,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    table = []\n    for i in range(n):\n        table.append(list(map(int, stdin.readline().split())))\n    k = int(stdin.readline())\n    for i in range(k):\n        l, r = map(int, stdin.readline().split())\n        for j in range(m):\n            if all(table[i][j] <= table[i+1][j] for i in range(l-1, r)):\n                return \"Yes\"\n    return \"No\""
    },
    {
        "number": 2300,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    for i in range(m):\n        t, *args = map(int, stdin.split()[2+n+i].split())\n        if t == 1:\n            x, v = args\n            a[x-1] = v\n        elif t == 2:\n            l, r = args\n            s = 0\n            f = 1\n            for x in range(l-1, r):\n                s += f * a[x]\n                f = f - 1 + f - 2\n            print(s % 1000000000)\n        elif t == 3:\n            l, r, d = args\n            for x in range(l-1, r):\n                a[x] += d\n    return '\\n'.join(map(str, a))"
    },
    {
        "number": 2301,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cheap = [True] * n\n    for i in range(1, n-1):\n        if a[i] < a[i-1] and a[i] < a[i+1]:\n            cheap[i] = False\n    count = 0\n    for i in range(n):\n        if cheap[i]:\n            count += 1\n    print(count)\n    result = []\n    for i in range(n):\n        if cheap[i]:\n            result.append(a[i])\n    print(' '.join(map(str, result)))"
    },
    {
        "number": 2302,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    milestones = []\n    for _ in range(q):\n        s, t, u = map(int, stdin.readline().split())\n        if u == 0:\n            continue\n        for i in range(len(milestones)):\n            if milestones[i][0] == s and milestones[i][1] == t:\n                milestones.pop(i)\n                break\n        if u!= s:\n            milestones.append((s, t, u))\n    resources = [0] * n\n    for milestone in milestones:\n        resources[milestone[2]-1] += milestone[1]\n    turns = 0\n    for i in range(n):\n        if resources[i] < a[i]:\n            return \"IMPOSSIBLE\"\n        turns += resources[i] // a[i]\n        resources[i] %= a[i]\n    return str(turns)"
    },
    {
        "number": 2303,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove leading and trailing spaces\n    s = stdin.strip()\n    # Split the string into words\n    words = s.split()\n    # Reverse the order of the words\n    words.reverse()\n    # Concatenate the words with a single space\n    return''.join(words)"
    },
    {
        "number": 2304,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    info = []\n    for _ in range(M):\n        L, R, D = map(int, stdin.readline().split())\n        info.append((L-1, R-1, D))\n\n    # Check if there exists a set of values that is consistent with all given pieces of information\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                # Check if (L_i, R_i) and (L_j, R_j) are not equal\n                if (info[i][0], info[i][1]) == (info[j][0], info[j][1]) or (info[i][0], info[i][1]) == (info[k][0], info[k][1]) or (info[j][0], info[j][1]) == (info[k][0], info[k][1]):\n                    continue\n                # Check if (L_i, R_i) and (R_j, L_j) are not equal\n                if (info[i][0], info[i][1]) == (info[j][1], info[j][0]) or (info[i][0], info[i][1]) == (info[k][1], info[k][0]) or (info[j][1], info[j][0]) == (info[k][1], info[k][0]):\n                    continue\n                # Check if D_i + D_j + D_k = x_{R_i} - x_{L_i}\n                if info[i][2] + info[j][2] + info[k][2]!= info[i][1] - info[i][0]:\n                    continue\n                # If all conditions are satisfied, there exists a set of values that is consistent with all given pieces of information\n                return \"Yes\"\n\n    # If no set of values is consistent with all given pieces of information, print No\n    return \"No\""
    },
    {
        "number": 2305,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(N-1):\n        a, b = map(int, stdin.readline().strip().split())\n        edges.append((a, b))\n\n    # Initialize DP table\n    dp = [[0] * N for _ in range(N)]\n    for i in range(N):\n        dp[i][i] = 1\n\n    # Fill DP table\n    for k in range(1, N+1):\n        for i in range(N):\n            for j in range(i+1, N):\n                if colors[i] == k or colors[j] == k:\n                    dp[i][j] += dp[i][k-1] + dp[k-1][j]\n\n    # Count simple paths\n    counts = [0] * N\n    for i in range(N):\n        for j in range(N):\n            if colors[i] == colors[j]:\n                counts[colors[i]-1] += dp[i][j]\n\n    # Print counts\n    return '\\n'.join(map(str, counts))"
    },
    {
        "number": 2306,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    t = list(map(int, stdin.readline().strip().split()))\n    v = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_distance = 0\n    current_speed = 0\n    current_time = 0\n\n    # Iterate over time and speeds\n    for i in range(N):\n        # Calculate distance covered in this interval\n        distance = (current_speed + v[i]) * (t[i] / 2)\n\n        # Update max distance\n        max_distance = max(max_distance, distance)\n\n        # Update current speed and time\n        current_speed = min(v[i] + 1, current_speed + 1)\n        current_time += t[i]\n\n    # Add distance covered at end of run\n    max_distance += current_speed * (current_time / 2)\n\n    # Return result as string with 10 decimal places\n    return f\"{max_distance:.10f}\""
    },
    {
        "number": 2307,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    a = list(map(int, stdin.split()[1:]))\n    even_count = 0\n    odd_count = 0\n    for i in a:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    if even_count > odd_count:\n        return \"READY FOR BATTLE\"\n    else:\n        return \"NOT READY\""
    },
    {
        "number": 2308,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        x = stdin.readline().strip()\n        y = stdin.readline().strip()\n        k = 0\n        while True:\n            s = bin(int(x, 2) + int(y, 2) * 2**k)[2:]\n            if s.startswith('0'):\n                k += 1\n            else:\n                break\n        print(k)"
    },
    {
        "number": 2309,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    vowels = set(['a', 'e', 'i', 'o', 'u'])\n    beautiful_lyrics = []\n    for i in range(n):\n        for j in range(i+1, n):\n            if len(set(words[i]) & set(words[j])) == 0:\n                continue\n            first_line = words[i].split()\n            second_line = words[j].split()\n            if len(first_line[0])!= len(second_line[0]):\n                continue\n            if len(first_line[1])!= len(second_line[1]):\n                continue\n            if first_line[0][-1]!= second_line[0][-1]:\n                continue\n            if first_line[1][-1]!= second_line[1][-1]:\n                continue\n            if len(set(first_line[0]) & vowels)!= len(set(second_line[0]) & vowels):\n                continue\n            if len(set(first_line[1]) & vowels)!= len(set(second_line[1]) & vowels):\n                continue\n            beautiful_lyrics.append((words[i], words[j]))\n    m = len(beautiful_lyrics)\n    print(m)\n    for i in range(m):\n        print(beautiful_lyrics[i][0], beautiful_lyrics[i][1])\n    return \"\""
    },
    {
        "number": 2310,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        m, k = map(int, lines[2*i-1].split())\n        a = list(map(int, lines[2*i].split()))\n        observations = []\n        for j in range(m-1):\n            t, r = map(int, lines[2*i+j+1].split())\n            observations.append((t, r))\n        result = ['N'] * k\n        for j in range(m-1):\n            if observations[j][0] == 0:\n                result[observations[j][1]] = 'Y'\n        print(''.join(result))"
    },
    {
        "number": 2311,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    c = [[a[i] * b[j] for j in range(m)] for i in range(n)]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if c[i][j] == 1:\n                for x in range(i, n):\n                    for y in range(j, m):\n                        if x - i + y - j + 1 == k:\n                            count += 1\n    return count"
    },
    {
        "number": 2312,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        b = list(map(int, stdin.readline().strip().split()))\n        a = [2**x for x in b]\n        found = False\n        for i in range(n):\n            for j in range(i+1, n):\n                if sum(a[i:j+1]) == sum(a[j+1:]):\n                    found = True\n                    break\n            if found:\n                break\n        if found:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 2313,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    c = list(map(int, stdin.split()[1:]))\n    MOD = 998244353\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(n):\n            if i == j:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    ans = []\n    for k in range(n):\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = 1\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n        dp[0][0] = 0\n        dp[0][1] = 1\n        dp[1][0] = 1\n        dp[1][1] = 0\n        for i in range(2, n):\n            dp[i][0] = dp[i-1][1]\n            dp[i][1] = dp[i-2][1]\n        for i in range(2, n):\n            for j in range(2, n):\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n        dp[n-1][n-1] = 1\n        dp[n-1][n-2] = 0\n        dp[n-2][n-1] = 1\n        dp[n-2][n-2] = 0\n        for i in range(n-3, -1, -1):\n            dp[i][n-1] = dp[i+1][n-2]\n            dp[i][n-2] = dp[i+2][n-2]\n        for i in range(n-3, -1, -1):\n            for j in range(n-3, -1, -1):\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i+1][j] + dp[i][j+1]) % MOD\n        dp[0][0] = 1\n        dp[0][1] = 0\n        dp[1][0] = 0\n        dp[1][1] = 1\n        for i in range(2, n):\n            dp[i][0] = dp[i-1][1]\n            dp[i][1] = dp[i-2][1]\n        for i in range(2, n):\n            for j in range(2, n):\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n        dp[n-1][n-1] = 1\n        dp[n-1][n-2] = 0\n        dp[n-2][n-1] = 1\n        dp[n-2][n-2] = 0\n        for i in range(n-3, -1, -1):\n            dp[i][n-1] = dp[i+1][n-2]\n            dp[i][n-2] = dp[i+2][n-2]\n        for i in range(n-3, -1, -1):\n            for j in range(n-3, -1, -1):\n                if i == j:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i+1][j] + dp[i][j+1]) % MOD\n        dp[0][0] = 1\n        dp[0][1] = 0\n        dp[1][0] = 0\n        dp[1][1] = 1\n        for i in range(2, n):\n            dp[i][0] = dp[i-1][1]\n            dp[i][1] = dp[i-2][1]\n        for i in range(2, n):\n            for j in range(2, n):\n                if i == j:\n                    dp[i][j] ="
    },
    {
        "number": 2314,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    picture = []\n    for i in range(n):\n        picture.append(list(stdin.readline().strip()))\n    options = []\n    for i in range(q):\n        r1, c1, r2, c2 = map(int, stdin.readline().split())\n        options.append((r1, c1, r2, c2))\n    max_area = 0\n    for r1, c1, r2, c2 in options:\n        area = 0\n        for i in range(r1, r2+1):\n            for j in range(c1, c2+1):\n                if picture[i][j] in ['R', 'Y', 'B']:\n                    area += 1\n        if area > max_area:\n            max_area = area\n    return str(max_area)"
    },
    {
        "number": 2315,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        l, r = map(int, stdin.readline().strip().split())\n        for x in range(l, r+1):\n            for y in range(x+1, r+1):\n                if x!= y and y % x == 0:\n                    print(f\"{x} {y}\")\n                    break"
    },
    {
        "number": 2316,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, n, m = map(int, stdin.readline().strip().split())\n        if x <= 0 or n > 30 or m > 30:\n            print(\"NO\")\n            continue\n        if x <= 10:\n            print(\"YES\")\n            continue\n        if n == 0 and m == 0:\n            print(\"NO\")\n            continue\n        if n == 0:\n            print(\"YES\")\n            continue\n        if m == 0:\n            print(\"NO\")\n            continue\n        if x <= 100:\n            print(\"YES\")\n            continue\n        if x <= 1000:\n            print(\"YES\")\n            continue\n        if x <= 10000:\n            print(\"YES\")\n            continue\n        if x <= 100000:\n            print(\"YES\")\n            continue\n        if x <= 1000000:\n            print(\"YES\")\n            continue\n        if x <= 10000000:\n            print(\"YES\")\n            continue\n        if x <= 100000000:\n            print(\"YES\")\n            continue\n        if x <= 1000000000:\n            print(\"YES\")\n            continue\n        print(\"NO\")\n    return \"\""
    },
    {
        "number": 2317,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, a, b = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    B = list(map(int, stdin.split()))\n    L = list(map(int, stdin.split()))\n\n    # Find the leftmost point on the west bank\n    left = 1\n    while left < n and A[left] <= 0:\n        left += 1\n\n    # Find the rightmost point on the east bank\n    right = m\n    while right > 0 and B[right - 1] <= 0:\n        right -= 1\n\n    # Find the point on the west bank that is closest to the east bank\n    min_dist = float('inf')\n    for i in range(left, n):\n        dist = abs(B[right - 1] - A[i])\n        if dist < min_dist:\n            min_dist = dist\n            left_point = i\n\n    # Find the point on the east bank that is closest to the west bank\n    min_dist = float('inf')\n    for i in range(right - 1, -1, -1):\n        dist = abs(A[left_point] - B[i])\n        if dist < min_dist:\n            min_dist = dist\n            right_point = i\n\n    # Check if the final length of the path is within the required range\n    total_dist = abs(A[left_point] - B[right_point])\n    for i in range(right_point):\n        total_dist += L[i]\n    for i in range(right_point + 1, m):\n        total_dist += L[i]\n    if abs(total_dist - abs(A[left_point] - B[right_point])) > 1e-6:\n        return 'No solution'\n\n    return f'{left_point} {right_point}'"
    },
    {
        "number": 2318,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        s = stdin.readline().strip()\n        t = stdin.readline().strip()\n        if s == t:\n            print(\"YES\")\n        else:\n            if len(s)!= len(t):\n                print(\"NO\")\n            else:\n                count = 0\n                for j in range(len(s)):\n                    if s[j]!= t[j]:\n                        count += 1\n                if count == 1:\n                    print(\"YES\")\n                else:\n                    print(\"NO\")\n    return \"\""
    },
    {
        "number": 2319,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        t = stdin.readline().strip()\n        if s == t:\n            print(0)\n            continue\n        count = 0\n        for j in range(n):\n            if s[j]!= t[j]:\n                break\n            count += 1\n        if count == n:\n            print(-1)\n            continue\n        count = 0\n        for j in range(n):\n            if s[j]!= t[n-j-1]:\n                break\n            count += 1\n        if count == n:\n            print(n//2)\n            continue\n        print(-1)"
    },
    {
        "number": 2320,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[3*i-3])\n        s = lines[3*i-2]\n        t = lines[3*i-1]\n        if s == t:\n            print(0)\n            continue\n        moves = 0\n        for j in range(1, n+1):\n            if s[j-1]!= t[j-1]:\n                if s.find(t[j-1]) == -1:\n                    s = s[j-1] + s[:j-1] + s[j:]\n                    moves += 1\n                elif s.find(t[j-1]) == j-1:\n                    s = s[:j-1] + s[j:]\n                    moves += 1\n                else:\n                    s = s[j:] + s[:j-1]\n                    moves += 1\n        if s == t:\n            print(moves)\n        else:\n            print(-1)"
    },
    {
        "number": 2321,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t*3, 3):\n        n = int(lines[i])\n        s = lines[i+1]\n        count = 0\n        for j in range(n-1):\n            if s[j] == '<' and s[j+1] == '>':\n                count += 1\n        print(count)"
    },
    {
        "number": 2323,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.readline().split())\n    s = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    res = []\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        pitches = set()\n        for i in range(n):\n            for j in range(l, r+1):\n                pitches.add(s[i] + j)\n        res.append(len(pitches))\n    return''.join(map(str, res))"
    },
    {
        "number": 2324,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i + l - 1\n            if s[i] == s[j] and (l == 2 or dp[i+1][j-1] == 1):\n                dp[i][j] = 1\n    ans = [0] * n\n    for i in range(n):\n        for j in range(i+1, n):\n            if dp[i][j] == 1:\n                ans[j-i+1] += 1\n    return''.join(map(str, ans))"
    },
    {
        "number": 2325,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    MOD = 10**9 + 7\n    for i in range(q):\n        x, y = map(int, stdin.readline().strip().split())\n        if x == 1:\n            print(1)\n            continue\n        if y == 1:\n            print(x)\n            continue\n        if x == y:\n            print(1)\n            continue\n        if x % y == 0:\n            print(1)\n            continue\n        if x % 2 == 0:\n            print(0)\n            continue\n        if x % 3 == 0:\n            print(0)\n            continue\n        if x % 5 == 0:\n            print(0)\n            continue\n        if x % 7 == 0:\n            print(0)\n            continue\n        if x % 11 == 0:\n            print(0)\n            continue\n        if x % 13 == 0:\n            print(0)\n            continue\n        if x % 17 == 0:\n            print(0)\n            continue\n        if x % 19 == 0:\n            print(0)\n            continue\n        if x % 23 == 0:\n            print(0)\n            continue\n        if x % 29 == 0:\n            print(0)\n            continue\n        if x % 31 == 0:\n            print(0)\n            continue\n        if x % 37 == 0:\n            print(0)\n            continue\n        if x % 41 == 0:\n            print(0)\n            continue\n        if x % 43 == 0:\n            print(0)\n            continue\n        if x % 47 == 0:\n            print(0)\n            continue\n        if x % 53 == 0:\n            print(0)\n            continue\n        if x % 59 == 0:\n            print(0)\n            continue\n        if x % 61 == 0:\n            print(0)\n            continue\n        if x % 67 == 0:\n            print(0)\n            continue\n        if x % 71 == 0:\n            print(0)\n            continue\n        if x % 73 == 0:\n            print(0)\n            continue\n        if x % 79 == 0:\n            print(0)\n            continue\n        if x % 83 == 0:\n            print(0)\n            continue\n        if x % 89 == 0:\n            print(0)\n            continue\n        if x % 97 == 0:\n            print(0)\n            continue\n        if x % 101 == 0:\n            print(0)\n            continue\n        if x % 103 == 0:\n            print(0)\n            continue\n        if x % 107 == 0:\n            print(0)\n            continue\n        if x % 109 == 0:\n            print(0)\n            continue\n        if x % 113 == 0:\n            print(0)\n            continue\n        if x % 127 == 0:\n            print(0)\n            continue\n        if x % 131 == 0:\n            print(0)\n            continue\n        if x % 137 == 0:\n            print(0)\n            continue\n        if x % 139 == 0:\n            print(0)\n            continue\n        if x % 149 == 0:\n            print(0)\n            continue\n        if x % 151 == 0:\n            print(0)\n            continue\n        if x % 157 == 0:\n            print(0)\n            continue\n        if x % 163 == 0:\n            print(0)\n            continue\n        if x % 167 == 0:\n            print(0)\n            continue\n        if x % 173 == 0:\n            print(0)\n            continue\n        if x % 179 == 0:\n            print(0)\n            continue\n        if x % 181 == 0:\n            print(0)\n            continue\n        if x % 191 == 0:\n            print(0)\n            continue\n        if x % 193 == 0:\n            print(0)\n            continue\n        if x % 197 == 0:\n            print(0)\n            continue\n        if x % 199 == 0:\n            print(0)\n            continue\n        if x % 211 == 0:\n            print(0)\n            continue\n        if x % 223 == 0:\n            print(0)\n            continue\n        if x % 227 == 0:\n            print(0)\n            continue\n        if x % 229 == 0:\n            print(0)\n           "
    },
    {
        "number": 2326,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    MOD = 998244353\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = 1\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if a[i-1] > 0:\n                dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n            else:\n                dp[i][j] = dp[i-1][j]\n    ans = dp[n][0]\n    for i in range(1, n+1):\n        if a[i-1] > 0:\n            ans = (ans + dp[i][0]) % MOD\n    return str(ans)"
    },
    {
        "number": 2327,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        unfairness = 0\n        for j in range(1, n):\n            diff = bin(j ^ (j-1)).count('1')\n            unfairness += diff\n        print(unfairness)\n    return \"\""
    },
    {
        "number": 2328,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n, k = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        d = [abs(a[i] - a[j]) for i in range(n) for j in range(i+1, n)]\n        d.sort()\n        print(d[k])\n    return \"\""
    },
    {
        "number": 2329,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    t = list(map(int, stdin.split()))\n    queries = []\n    for i in range(m - 1):\n        a, b = map(int, stdin.split())\n        queries.append((a, b))\n\n    dp = [0] * m\n    for i in range(m):\n        dp[i] = 1\n\n    for i in range(m - 1):\n        a, b = queries[i]\n        dp[a - 1] = max(dp[a - 1], dp[b - 1] + 1)\n\n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 2330,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    T = int(lines[0])\n    for i in range(1, T+1):\n        n, m = map(int, lines[i*2-1].split())\n        a = list(map(int, lines[i*2].split()))\n        # solve problem\n        if m > n:\n            print(-1)\n            continue\n        # create graph\n        graph = [[] for _ in range(n)]\n        for u in range(n):\n            for v in range(u+1, n):\n                if a[u] + a[v] <= m:\n                    graph[u].append(v)\n                    graph[v].append(u)\n        # find minimum spanning tree\n        visited = [False] * n\n        parent = [-1] * n\n        cost = 0\n        for u in range(n):\n            if not visited[u]:\n                visited[u] = True\n                for v in graph[u]:\n                    if not visited[v]:\n                        visited[v] = True\n                        parent[v] = u\n                        cost += a[u] + a[v]\n        # check if all fridges are private\n        private = [True] * n\n        for u in range(n):\n            for v in graph[u]:\n                if parent[u]!= v:\n                    private[u] = False\n                    break\n        if not all(private):\n            print(-1)\n            continue\n        # output solution\n        print(cost)\n        for u in range(n):\n            for v in graph[u]:\n                if parent[u]!= v:\n                    print(u+1, v+1)\n    return ''"
    },
    {
        "number": 2331,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(\"Finite\")\n        else:\n            print(\"Infinite\")"
    },
    {
        "number": 2332,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.readline().split())\n    words = stdin.readline().split()\n    costs = list(map(int, stdin.readline().split()))\n    groups = []\n    for i in range(k):\n        x = int(stdin.readline().strip())\n        group = list(map(int, stdin.readline().strip().split()))\n        groups.append(group)\n    message = stdin.readline().strip().split()\n    # print(n, k, m)\n    # print(words)\n    # print(costs)\n    # print(groups)\n    # print(message)\n    # print(len(message))\n    # print(len(set(message)))\n    # print(len(set(message) - set(words)))\n    # print(set(message) - set(words))\n    # print(set(message) & set(words))\n    # print(set(message) - set(words) & set(message) & set(words))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set(message))\n    # print(set(message) - set(words) & set(message) & set(words) - set(message) - set(words) - set(message) - set(words) - set(message) - set(words) - set"
    },
    {
        "number": 2333,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            if len(set(a[i:j])) == j-i:\n                count += 1\n    return count"
    },
    {
        "number": 2334,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    a = list(map(int, lines[1].split()))\n    x, f = map(int, lines[2].split())\n\n    # calculate total satoshies\n    total_satoshies = sum(a)\n\n    # calculate number of addresses needed\n    num_addresses = total_satoshies // x + (1 if total_satoshies % x > 0 else 0)\n\n    # calculate total fee\n    total_fee = num_addresses * f\n\n    # output result\n    return str(total_fee)"
    },
    {
        "number": 2335,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        p, c = map(int, stdin.readline().strip().split())\n        points.append((p, c))\n    points.sort()\n    min_cost = 0\n    for i in range(n):\n        if points[i][1] == 'R':\n            continue\n        for j in range(i+1, n):\n            if points[j][1] == 'B':\n                continue\n            min_cost += abs(points[i][0] - points[j][0])\n    return str(min_cost)"
    },
    {
        "number": 2336,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, q = map(int, stdin.readline().split())\n    recipes = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        recipes.append((l, r))\n    for i in range(q):\n        a, b = map(int, stdin.readline().split())\n        count = 0\n        for l, r in recipes:\n            if l <= a <= r or l <= b <= r:\n                count += 1\n        if count >= k:\n            print(b - a + 1)\n        else:\n            print(0)\n    return \"\""
    },
    {
        "number": 2337,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    b.sort()\n    count = 0\n    for i in range(n):\n        if a[i] > b[-1]:\n            count += 1\n    return count"
    },
    {
        "number": 2338,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bombs = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        bombs.append((x, y))\n    bombs.sort()\n    operations = []\n    x, y = 0, 0\n    while bombs:\n        if (x, y) in bombs:\n            bombs.remove((x, y))\n            operations.append(f\"2\")\n        else:\n            if (x+1, y) in bombs:\n                operations.append(f\"1 1 R\")\n                x += 1\n            elif (x-1, y) in bombs:\n                operations.append(f\"1 1 L\")\n                x -= 1\n            elif (x, y+1) in bombs:\n                operations.append(f\"1 1 U\")\n                y += 1\n            elif (x, y-1) in bombs:\n                operations.append(f\"1 1 D\")\n                y -= 1\n    return len(operations)\n\nstdin = \"2\\n1 1\\n-1 -1\"\nprint(solution(stdin)) # Output: 12\n\nstdin = \"3\\n5 0\\n0 5\\n1 0\"\nprint(solution(stdin)) # Output: 12"
    },
    {
        "number": 2339,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = [a[0]]\n        c = [a[0]]\n        for j in range(1, n):\n            if a[j] < b[-1]:\n                b.append(a[j])\n            else:\n                b.append(b[-1])\n            c.append(gcd(c[-1], a[j]))\n        print(' '.join(map(str, b)))\n\ndef"
    },
    {
        "number": 2340,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        h, n = map(int, stdin.readline().strip().split())\n        platforms = list(map(int, stdin.readline().strip().split()))\n        platforms.sort(reverse=True)\n        if platforms[0] == h:\n            print(0)\n        else:\n            crystals = 0\n            for platform in platforms:\n                if platform == h:\n                    break\n                if platform - 2 >= 1:\n                    crystals += 1\n            print(crystals)\n    return \"\""
    },
    {
        "number": 2341,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    fabric = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    count = 0\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'a':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'b':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'c':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'd':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'e':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'f':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'g':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'h':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'i':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'j':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'k':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'l':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] =='m':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'n':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'o':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'p':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'q':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'r':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] =='s':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 't':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'u':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'v':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'w':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'x':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'y':\n                count += 1\n    for i in range(n):\n        for j in range(m):\n            if fabric[i][j] == 'z':\n                count += 1\n    return count"
    },
    {
        "number": 2342,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i].split())\n        maze = []\n        for j in range(n):\n            maze.append(list(lines[i+j+1]))\n        if maze[n-1][m-1]!= '.':\n            return \"No\"\n        for j in range(n):\n            for k in range(m):\n                if maze[j][k] == 'G' or maze[j][k] == 'B':\n                    continue\n                if j > 0 and maze[j-1][k] == '.' and maze[j][k] == '.':\n                    maze[j][k] = '#'\n                if j < n-1 and maze[j+1][k] == '.' and maze[j][k] == '.':\n                    maze[j][k] = '#'\n                if k > 0 and maze[j][k-1] == '.' and maze[j][k] == '.':\n                    maze[j][k] = '#'\n                if k < m-1 and maze[j][k+1] == '.' and maze[j][k] == '.':\n                    maze[j][k] = '#'\n        if maze[n-1][m-1] == '.':\n            return \"Yes\"\n        else:\n            return \"No\""
    },
    {
        "number": 2343,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if k == 0:\n            print(\"YES 0\")\n            continue\n        if n == 1:\n            print(\"NO\")\n            continue\n        if k == 1:\n            print(\"YES 1\")\n            continue\n        if k == 2**(n-1):\n            print(\"YES\", n-1)\n            continue\n        print(\"NO\")\n    return \"\""
    },
    {
        "number": 2344,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    offers = []\n    for i in range(n):\n        a, b, k = map(int, stdin.readline().split())\n        offers.append((a, b, k))\n    burles = 0\n    for offer in offers:\n        burles += offer[0]\n        burles -= offer[1] * offer[2]\n    return burles"
    },
    {
        "number": 2345,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        s = 0\n        for j in range(n):\n            s += a[j]\n            if s == 0:\n                break\n        if s == 0:\n            print(1)\n            print(j+1)\n        else:\n            print(n)\n            for j in range(n):\n                if a[j] == 0:\n                    print(j+1)\n                    break"
    },
    {
        "number": 2346,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    tree = [list(map(int, stdin.readline().strip().split())) for _ in range(n)]\n    # find root\n    root = -1\n    for i in range(n):\n        if tree[i][0] == -1:\n            root = i\n            break\n    # find ancestors\n    ancestors = [[] for _ in range(n)]\n    stack = [root]\n    while stack:\n        u = stack.pop()\n        for v in range(n):\n            if tree[v][0] == u:\n                ancestors[v].append(u)\n                stack.append(v)\n    # find non-respecting vertices\n    non_respecting = []\n    for i in range(1, n):\n        if tree[i][1] == 1:\n            continue\n        if not any(tree[j][1] == 1 for j in ancestors[i]):\n            non_respecting.append(i)\n    # find smallest non-respecting vertex\n    if not non_respecting:\n        return '-1'\n    v = min(non_respecting)\n    # delete vertex v and connect its children with its parent\n    parent = tree[v][0]\n    for child in range(n):\n        if tree[child][0] == v:\n            tree[child][0] = parent\n    # delete v\n    tree[v] = [-1, 0]\n    # find order to delete vertices\n    order = []\n    stack = [root]\n    while stack:\n        u = stack.pop()\n        if tree[u][0]!= -1:\n            order.append(u)\n            stack.append(tree[u][0])\n    return''.join(map(str, order))"
    },
    {
        "number": 2347,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        p = stdin.readline().strip()\n        h = stdin.readline().strip()\n        s1, s2 = \"\", \"\"\n        for j in range(len(p)):\n            s1 += chr(ord('a') + j)\n            s2 += chr(ord('a') + len(p) - j - 1)\n        p_prime = \"\".join(sorted(p))\n        h_prime = s1 + p_prime + s2\n        if h == h_prime:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2348,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # convert input to integer\n    num = int(stdin, 16)\n    # check if the last digit is odd\n    if num % 2 == 1:\n        return \"1\"\n    else:\n        return \"0\""
    },
    {
        "number": 2349,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        k = 1\n        while n % k!= 0:\n            k += 1\n        m = n // k\n        print(m)\n        print(*range(m))\n    return \"\""
    },
    {
        "number": 2350,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n        if x1 == x2 and y1 == y2:\n            print(1)\n        else:\n            print(2)\n    return \"\""
    },
    {
        "number": 2351,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, len_ = map(int, stdin.split())\n    arr = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        if arr[i] == -1:\n            for j in range(1, k+1):\n                if i+len_ <= n and all(arr[i+l]!= -1 for l in range(len_)):\n                    arr[i:i+len_] = [j]*len_\n                    count += 1\n                    break\n    return str(count % 998244353)"
    },
    {
        "number": 2352,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2353,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        if a >= b:\n            print(-1)\n            continue\n        if b % c == 0:\n            print(b // c)\n            continue\n        if b % c > d:\n            print(-1)\n            continue\n        if b % c + d > a:\n            print(-1)\n            continue\n        print(b // c + (a - b) // d)\n    return \"\""
    },
    {
        "number": 2354,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    board = [[0] * n for _ in range(n)]\n    count = 1\n    for i in range(n):\n        for j in range(n):\n            if (i + j) % 2 == 0:\n                board[i][j] = count\n                count += 1\n            else:\n                board[i][j] = count + n * (n - 1) // 2\n                count += 1\n    for _ in range(q):\n        x, y = map(int, stdin.split())\n        print(board[x - 1][y - 1])\n    return \"\""
    },
    {
        "number": 2355,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, p = map(int, stdin.readline().strip().split())\n        edges = []\n        for j in range(n):\n            for k in range(j+1, n):\n                edges.append((j+1, k+1))\n        for j in range(p):\n            edges.append((j+n+1, j+n+2))\n        for j in range(n):\n            edges.append((j+1, j+n+p+2))\n        for j in range(n):\n            edges.append((j+n+p+2, j+1))\n        for j in range(n):\n            edges.append((j+n+p+2, j+n+p+3))\n        for j in range(n):\n            edges.append((j+n+p+3, j+1))\n        for j in range(n):\n            edges.append((j+n+p+3, j+n+p+4))\n        for j in range(n):\n            edges.append((j+n+p+4, j+1))\n        for j in range(n):\n            edges.append((j+n+p+4, j+n+p+5))\n        for j in range(n):\n            edges.append((j+n+p+5, j+1))\n        for j in range(n):\n            edges.append((j+n+p+5, j+n+p+6))\n        for j in range(n):\n            edges.append((j+n+p+6, j+1))\n        for j in range(n):\n            edges.append((j+n+p+6, j+n+p+7))\n        for j in range(n):\n            edges.append((j+n+p+7, j+1))\n        for j in range(n):\n            edges.append((j+n+p+7, j+n+p+8))\n        for j in range(n):\n            edges.append((j+n+p+8, j+1))\n        for j in range(n):\n            edges.append((j+n+p+8, j+n+p+9))\n        for j in range(n):\n            edges.append((j+n+p+9, j+1))\n        for j in range(n):\n            edges.append((j+n+p+9, j+n+p+10))\n        for j in range(n):\n            edges.append((j+n+p+10, j+1))\n        for j in range(n):\n            edges.append((j+n+p+10, j+n+p+11))\n        for j in range(n):\n            edges.append((j+n+p+11, j+1))\n        for j in range(n):\n            edges.append((j+n+p+11, j+n+p+12))\n        for j in range(n):\n            edges.append((j+n+p+12, j+1))\n        for j in range(n):\n            edges.append((j+n+p+12, j+n+p+13))\n        for j in range(n):\n            edges.append((j+n+p+13, j+1))\n        for j in range(n):\n            edges.append((j+n+p+13, j+n+p+14))\n        for j in range(n):\n            edges.append((j+n+p+14, j+1))\n        for j in range(n):\n            edges.append((j+n+p+14, j+n+p+15))\n        for j in range(n):\n            edges.append((j+n+p+15, j+1))\n        for j in range(n):\n            edges.append((j+n+p+15, j+n+p+16))\n        for j in range(n):\n            edges.append((j+n+p+16, j+1))\n        for j in range(n):\n            edges.append((j+n+p+16, j+n+p+17))\n        for j in range(n):\n            edges.append((j+n+p+17, j+1))\n        for j in range(n):\n            edges.append((j+n+p+17, j+n+p+18))\n        for j in range(n):\n            edges.append"
    },
    {
        "number": 2356,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if is_good(a):\n            print(*a)\n        else:\n            shuffle(a)\n            if is_good(a):\n                print(*a)\n            else:\n                print(\"No solution\")\n\ndef"
    },
    {
        "number": 2357,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    T = int(lines[0])\n    for i in range(1, T+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        if n == 1:\n            print(-1)\n            continue\n        occ = {}\n        for num in a:\n            if num not in occ:\n                occ[num] = 1\n            else:\n                occ[num] += 1\n        dominated = False\n        for num in occ:\n            if num!= a[0] and occ[num] > occ[a[0]]:\n                dominated = True\n                break\n        if dominated:\n            print(n)\n        else:\n            print(-1)\n    return \"\""
    },
    {
        "number": 2358,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    k = 0\n    while n > 0:\n        if n % 2 == 0:\n            k += 1\n            n //= 2\n        else:\n            break\n    if k == 0:\n        print(0)\n        return\n    print(k)\n    for i in range(k):\n        m = n // 2\n        print(m)\n        for j in range(m):\n            print(2*i+j+1, end=' ')\n        print()\n    return"
    },
    {
        "number": 2359,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        h, c, t = map(int, stdin.readline().strip().split())\n        if t <= c:\n            print(1)\n        else:\n            n = (t - c) // (h - c)\n            if (t - c) % (h - c)!= 0:\n                n += 1\n            print(n)\n    return \"\""
    },
    {
        "number": 2360,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for _ in range(t):\n        n = int(stdin.readline().strip())\n        queue = []\n        for i in range(n):\n            l, r = map(int, stdin.readline().strip().split())\n            queue.append((l, r, i))\n        queue.sort()\n        ans = [0] * n\n        for i in range(n):\n            l, r, j = queue[i]\n            if i == 0 or queue[i-1][2]!= j:\n                ans[j] = l\n            else:\n                ans[j] = 0\n        print(*ans)"
    },
    {
        "number": 2361,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m, k = map(int, stdin.readline().strip().split())\n        if m == 0:\n            print(0)\n        else:\n            max_jokers = n // k\n            if max_jokers == 0:\n                print(0)\n            else:\n                print(max_jokers - m)\n    return \"\""
    },
    {
        "number": 2362,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    g = [0] * n\n    for i in range(n):\n        g[i] = a[i]\n    for i in range(n - 1):\n        x, y = map(int, stdin.readline().strip().split())\n        x -= 1\n        y -= 1\n        g[x] = gcd(g[x], g[y])\n    ans = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if g[i] > 1 and g[j] > 1:\n                ans = max(ans, dist(i, j))\n    return str(ans) if ans > 0 else \"0\"\n\ndef"
    },
    {
        "number": 2363,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    operations = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        if a > b:\n            a, b = b, a\n        operations.append(0)\n        while a > 0 and b > 0:\n            if a == b:\n                operations[-1] += 1\n                a -= 1\n                b -= 1\n            elif a > b:\n                operations[-1] += 1\n                a -= 1\n            else:\n                operations[-1] += 1\n                b -= 1\n    return '\\n'.join(map(str, operations))"
    },
    {
        "number": 2364,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 998244353\n    dp = [0] * (1 << n)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(1 << n):\n            if j & (1 << i):\n                continue\n            dp[j | (1 << i)] = (dp[j | (1 << i)] + dp[j]) % MOD\n    ans = 0\n    for i in range(1, n):\n        ans = (ans + dp[1 << i] * a[i]) % MOD\n    return str((ans * pow(2, n - 1, MOD)) % MOD)"
    },
    {
        "number": 2365,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char == 't':\n            stack.append(True)\n        elif char == 'f':\n            stack.append(False)\n        elif char == '!':\n            stack.append(not stack.pop())\n        elif char == '&':\n            right = stack.pop()\n            left = stack.pop()\n            stack.append(left and right)\n        elif char == '|':\n            right = stack.pop()\n            left = stack.pop()\n            stack.append(left or right)\n    return str(stack.pop())"
    },
    {
        "number": 2366,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # initialize dp array\n    dp = [0] * (n+1)\n\n    # base case\n    dp[0] = 1\n    dp[1] = 1\n\n    # fill dp array\n    for i in range(2, n+1):\n        dp[i] = dp[i-1] + dp[i-2]\n\n    # iterate over k values and print answer\n    for k in range(1, n+1):\n        # count number of ways to choose two distinct balls from remaining balls\n        count = 0\n        for i in range(k, n):\n            if a[i] == a[k-1]:\n                count += dp[i-k]\n\n        # print answer\n        print(count)\n\n    return \"\""
    },
    {
        "number": 2367,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, A, B = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * W for _ in range(H)]\n    dp[0][0] = 1\n    for i in range(H):\n        for j in range(W):\n            if i < A or j < B:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i][j-1]) % MOD\n    return str(dp[H-1][W-1])"
    },
    {
        "number": 2368,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    edges = []\n    for _ in range(M):\n        c, d = map(int, stdin.readline().split())\n        edges.append((c-1, d-1))\n\n    # Check if it is possible to achieve the objective\n    for i in range(N):\n        if a[i]!= b[i]:\n            return \"No\"\n\n    # Check if it is possible to achieve the objective by properly doing the operation\n    for c, d in edges:\n        if a[c] == a[d]:\n            continue\n        if a[c] < a[d]:\n            a[c] += 1\n            a[d] -= 1\n        else:\n            a[c] -= 1\n            a[d] += 1\n\n    # Check if it is possible to achieve the objective\n    for i in range(N):\n        if a[i]!= b[i]:\n            return \"No\"\n\n    return \"Yes\""
    },
    {
        "number": 2369,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    A.sort()\n    ans = 0\n    for i in range(1, 2**N):\n        S = set()\n        for j in range(N):\n            if i & (1 << j):\n                S.add(A[j])\n        if len(S) == K:\n            ans += max(S) - min(S)\n    return str(ans % MOD)"
    },
    {
        "number": 2370,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = []\n    for i in range(N):\n        A.append(list(map(int, stdin.readline().strip().split())))\n\n    # Check if there exists a network that satisfies the condition\n    for i in range(N):\n        for j in range(N):\n            if i!= j and A[i][j]!= A[j][i]:\n                return \"-1\"\n\n    # Find the shortest possible total length of the roads\n    total_length = 0\n    for i in range(N):\n        for j in range(N):\n            if i!= j:\n                total_length += A[i][j]\n\n    return str(total_length)"
    },
    {
        "number": 2371,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, Z, W = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    x_hand = [Z]\n    y_hand = [W]\n    x_score = abs(Z - a[0])\n    y_score = abs(W - a[0])\n\n    # play game\n    for i in range(1, N):\n        # draw cards\n        x_draw = a[i]\n        y_draw = a[i]\n        if i < N-1:\n            x_draw = a[i] + a[i+1]\n            y_draw = a[i] + a[i+1]\n        x_hand.append(x_draw)\n        y_hand.append(y_draw)\n\n        # discard cards\n        x_discard = x_hand.pop(0)\n        y_discard = y_hand.pop(0)\n\n        # update scores\n        x_score += abs(x_draw - x_discard)\n        y_score += abs(y_draw - y_discard)\n\n    # return result\n    return str(max(x_score, y_score))"
    },
    {
        "number": 2372,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    H, W = map(int, stdin.readline().split())\n    C_h, C_w = map(int, stdin.readline().split())\n    D_h, D_w = map(int, stdin.readline().split())\n    maze = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # check if magician can reach destination\n    if maze[D_h-1][D_w-1] == '#':\n        return -1\n\n    # initialize variables\n    magic_used = 0\n    visited = set()\n    queue = [(C_h-1, C_w-1)]\n\n    # bfs to find magician's path\n    while queue:\n        h, w = queue.pop(0)\n        if (h, w) == (D_h-1, D_w-1):\n            return magic_used\n        if (h, w) in visited:\n            continue\n        visited.add((h, w))\n        if maze[h][w] == '.':\n            # move A\n            if h > 0 and maze[h-1][w] == '.':\n                queue.append((h-1, w))\n            if h < H-1 and maze[h+1][w] == '.':\n                queue.append((h+1, w))\n            if w > 0 and maze[h][w-1] == '.':\n                queue.append((h, w-1))\n            if w < W-1 and maze[h][w+1] == '.':\n                queue.append((h, w+1))\n        else:\n            # move B\n            for i in range(max(0, h-2), min(H, h+3)):\n                for j in range(max(0, w-2), min(W, w+3)):\n                    if maze[i][j] == '.' and (i, j) not in visited:\n                        queue.append((i, j))\n            magic_used += 1\n\n    # destination not reachable\n    return -1"
    },
    {
        "number": 2373,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n\n    # count swaps\n    swaps = 0\n    for i in range(N-1):\n        if p[i] == i+1:\n            continue\n        if p[i] == i+2:\n            p[i], p[i+1] = p[i+1], p[i]\n            swaps += 1\n            continue\n        if p[i] == i+3:\n            p[i], p[i+1], p[i+2] = p[i+2], p[i], p[i+1]\n            swaps += 2\n            continue\n        # p[i] > i+3, no swaps needed\n        continue\n\n    # print result\n    print(swaps)"
    },
    {
        "number": 2374,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    l = list(map(int, stdin.readline().split()))\n    r = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    activated = [False] * n\n    cords = set()\n\n    # iterate over cords\n    for i in range(m):\n        # check if cord is valid\n        if l[i] > r[i]:\n            continue\n\n        # iterate over bombs\n        for j in range(n):\n            # check if bomb is activated\n            if a[j] >= l[i] and a[j] <= r[i]:\n                if b[j] == 1:\n                    activated[j] = True\n                else:\n                    activated[j] = False\n\n        # check if all bombs are activated\n        if all(activated):\n            cords.add(i+1)\n\n    # output result\n    if len(cords) == 0:\n        return \"-1\"\n    else:\n        return f\"{len(cords)}\\n{' '.join(map(str, sorted(cords)))}\""
    },
    {
        "number": 2375,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(int, stdin.split())\n    if X > Y:\n        return \"Alice\"\n    elif Y > X:\n        return \"Brown\"\n    else:\n        return \"Tie\""
    },
    {
        "number": 2376,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, W = map(int, stdin.readline().split())\n    items = []\n    for i in range(N):\n        w, v = map(int, stdin.readline().split())\n        items.append((w, v))\n\n    # Sort items by weight\n    items.sort(key=lambda x: x[0])\n\n    # Initialize variables\n    total_value = 0\n    current_weight = 0\n    current_items = []\n\n    # Iterate through items\n    for i in range(N):\n        # Add item to current items if it doesn't exceed weight limit\n        if current_weight + items[i][0] <= W:\n            current_items.append(items[i])\n            current_weight += items[i][0]\n            total_value += items[i][1]\n        # If current weight exceeds weight limit, remove items until weight limit is satisfied\n        else:\n            while current_weight + items[i][0] > W:\n                current_weight -= current_items.pop(0)[0]\n                total_value -= current_items[0][1]\n            current_items.append(items[i])\n            current_weight += items[i][0]\n            total_value += items[i][1]\n\n    return str(total_value)"
    },
    {
        "number": 2377,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, h = map(int, stdin.readline().split())\n    attacks = []\n    for _ in range(n):\n        a, b = map(int, stdin.readline().split())\n        attacks.append((a, b))\n\n    # Initialize variables\n    total_damage = 0\n    num_attacks = 0\n\n    # Perform attacks\n    for a, b in attacks:\n        # Wield katana\n        total_damage += a\n        num_attacks += 1\n\n        # Throw katana\n        total_damage += b\n        num_attacks += 1\n\n        # Check if monster is vanished\n        if total_damage >= h:\n            break\n\n    # Print result\n    return str(num_attacks)"
    },
    {
        "number": 2378,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    N = int(stdin.readline())\n    edges = [tuple(map(int, line.split())) for line in stdin]\n    graph = [[] for _ in range(N+1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    dp = [[0]*2 for _ in range(N+1)]\n    dp[1][0] = 1\n    dp[1][1] = 1\n    for i in range(2, N+1):\n        dp[i][0] = (dp[i-1][0] + dp[i-1][1]) % MOD\n        dp[i][1] = (dp[i-1][0] + dp[i-1][1] + dp[i-2][0]) % MOD\n    ans = 0\n    for i in range(1, N+1):\n        ans = (ans + dp[i][0] * dp[i][1]) % MOD\n    return str(ans)"
    },
    {
        "number": 2379,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K, C = map(int, stdin.readline().split())\n    S = stdin.readline().strip()\n\n    # Initialize variables\n    days = [i for i in range(1, N+1)]\n    for i in range(K):\n        # Remove days that are not allowed\n        for j in range(C):\n            if S[i+j] == 'x':\n                days.remove(i+j+1)\n\n    # Print result\n    print(*days)\n    return \"\""
    },
    {
        "number": 2380,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    operations = []\n    for _ in range(M):\n        B, C = map(int, stdin.readline().split())\n        operations.append((B, C))\n\n    # Apply operations\n    for B, C in operations:\n        A = sorted(A, reverse=True)\n        A = A[:B]\n        A = [C if x == A[0] else x for x in A]\n\n    # Compute maximum sum\n    return sum(A)"
    },
    {
        "number": 2381,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Sort the array in descending order\n    A.sort(reverse=True)\n\n    # Initialize variables\n    max_product = 0\n    modulo = 10**9+7\n\n    # Calculate the maximum product\n    for i in range(K):\n        max_product = (max_product + A[i]) % modulo\n\n    return str(max_product)"
    },
    {
        "number": 2382,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    S = list(map(int, stdin.readline().strip().split()))\n\n    # check if it is possible to set the healths of the first slime and the subsequent slimes spawn so that the multiset of the healths of the 2^N slimes that will exist in N seconds equals S\n    if len(set(S))!= len(S):\n        return \"No\"\n\n    # set the health of the first slime to the smallest value in S\n    health = min(S)\n\n    # initialize the healths of the slimes that exist in N seconds\n    healths = [health]\n\n    # iterate over the remaining N-1 seconds\n    for i in range(N-1):\n        # iterate over the slimes that exist in the previous second\n        for j in range(len(healths)):\n            # spawn a slime whose health is strictly less than the current slime\n            new_health = healths[j] - 1\n            # check if the new health is in S\n            if new_health in S:\n                # add the new health to the list of healths\n                healths.append(new_health)\n\n    # check if the multiset of the healths of the slimes that will exist in N seconds equals S\n    if sorted(healths) == sorted(S):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 2383,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Check if Snuke's desire is unsatisfiable\n    if len(set(a))!= N:\n        return '-1'\n\n    # Find the minimum number of bricks to break\n    bricks_to_break = 0\n    for i in range(1, N):\n        if a[i] > i:\n            bricks_to_break += 1\n\n    return str(bricks_to_break)"
    },
    {
        "number": 2384,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the array in non-decreasing order\n    A.sort()\n\n    # Find the maximum possible sum of the chosen elements\n    max_sum = 0\n    for i in range(N//2):\n        max_sum += A[i]\n\n    return str(max_sum)"
    },
    {
        "number": 2385,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n\n    # Initialize adjacency list\n    adj = [[] for _ in range(N+1)]\n    for a, b in edges:\n        adj[a].append(b)\n        adj[b].append(a)\n\n    # Initialize dp array\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    dp[1][1] = 1\n\n    # Compute dp array\n    MOD = 10**9+7\n    for k in range(2, N+1):\n        for i in range(1, N+1):\n            for j in adj[i]:\n                if dp[i][j] > 0:\n                    dp[i][k] += dp[i][j]\n                    dp[i][k] %= MOD\n\n    # Compute answer\n    ans = []\n    for k in range(1, N+1):\n        ans.append(dp[k][N])\n\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 2386,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    min_sadness = float('inf')\n\n    # Iterate over all possible values of b\n    for b in range(N):\n        # Calculate the sadness of Snuke with b\n        sadness = sum(abs(A[i] - (b + i + 1)) for i in range(N))\n\n        # Update the minimum sadness\n        min_sadness = min(min_sadness, sadness)\n\n    # Return the minimum sadness\n    return str(min_sadness)"
    },
    {
        "number": 2387,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    stack = []\n    for s in strings:\n        for c in s:\n            if c == '(':\n                stack.append(c)\n            elif c == ')':\n                if not stack or stack[-1]!= '(':\n                    return \"No\"\n                stack.pop()\n    return \"Yes\" if not stack else \"No\""
    },
    {
        "number": 2388,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    robots = []\n    for i in range(n):\n        x, d = map(int, stdin.readline().strip().split())\n        robots.append((x, d))\n\n    # Sort robots by x-coordinate\n    robots.sort()\n\n    # Initialize variables\n    active_robots = set()\n    inactive_robots = set()\n    for i in range(n):\n        inactive_robots.add(i+1)\n\n    # Recursive function to activate robots\n    def activate_robot(robot_id):\n        if robot_id in active_robots:\n            return\n        active_robots.add(robot_id)\n        for i in range(n):\n            if robots[i][0] <= robots[robot_id-1][0] + robots[robot_id-1][1] < robots[i][0] + robots[i][1]:\n                activate_robot(i+1)\n\n    # Iterate over all possible sets of active robots\n    count = 1\n    for i in range(1, 2**n):\n        active_set = set()\n        for j in range(n):\n            if i & (1 << j):\n                active_set.add(j+1)\n        if not active_set:\n            continue\n        # Activate robots in active set\n        for robot_id in active_set:\n            activate_robot(robot_id)\n        # Check if any inactive robots are still on the number line\n        for robot_id in inactive_robots:\n            if any(robots[i-1][0] <= robots[robot_id-1][0] < robots[i-1][0] + robots[i-1][1] for i in active_set):\n                break\n        else:\n            count = (count * len(active_set)) % 998244353\n        # Deactivate robots in active set\n        for robot_id in active_set:\n            active_robots.remove(robot_id)\n\n    return str(count)"
    },
    {
        "number": 2389,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B, C = map(int, stdin.readline().split())\n    choices = stdin.readlines()\n\n    # Check if it is possible to make N choices\n    if A < 0 or B < 0 or C < 0:\n        return \"No\"\n\n    # Check if it is possible to make N choices\n    if len(choices)!= N:\n        return \"No\"\n\n    # Check if it is possible to make the choices\n    for choice in choices:\n        if choice == \"AB\":\n            if A == 0 and B == 0:\n                return \"No\"\n            elif A == 0:\n                A += 1\n                B -= 1\n            elif B == 0:\n                B += 1\n                A -= 1\n            else:\n                A += 1\n                B -= 1\n        elif choice == \"AC\":\n            if A == 0 and C == 0:\n                return \"No\"\n            elif A == 0:\n                A += 1\n                C -= 1\n            elif C == 0:\n                C += 1\n                A -= 1\n            else:\n                A += 1\n                C -= 1\n        elif choice == \"BC\":\n            if B == 0 and C == 0:\n                return \"No\"\n            elif B == 0:\n                B += 1\n                C -= 1\n            elif C == 0:\n                C += 1\n                B -= 1\n            else:\n                B += 1\n                C -= 1\n        else:\n            return \"No\"\n\n    # Print output\n    print(\"Yes\")\n    for choice in choices:\n        if choice == \"AB\":\n            print(\"A\")\n        elif choice == \"AC\":\n            print(\"C\")\n        elif choice == \"BC\":\n            print(\"B\")\n\n    return \"\""
    },
    {
        "number": 2390,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, C = map(int, stdin.split())\n    x = list(map(int, stdin.readline().split()))\n    v = list(map(int, stdin.readline().split()))\n\n    # calculate total nutrition and energy consumed\n    total_nutrition = sum(v)\n    total_energy = sum(x)\n\n    # calculate maximum possible nutrition on balance\n    max_nutrition = total_nutrition - total_energy\n\n    # check if maximum possible nutrition is possible\n    if max_nutrition < 0:\n        return \"0\"\n\n    # check if maximum possible nutrition is possible\n    if max_nutrition > C:\n        return str(C)\n\n    return str(max_nutrition)"
    },
    {
        "number": 2391,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    # find pairs (k,x) such that a' and b will be equal\n    pairs = []\n    for k in range(N):\n        for x in range(2**30):\n            a_ = [a[(i+k)%N] ^ x for i in range(N)]\n            if a_ == b:\n                pairs.append((k, x))\n\n    # sort pairs by k and x\n    pairs.sort(key=lambda x: (x[0], x[1]))\n\n    # print pairs\n    return '\\n'.join(map(str, pairs)) if pairs else ''"
    },
    {
        "number": 2392,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 10**9+7\n    dp = [0]*(n+1)\n    dp[1] = 1\n    for i in range(2, n+1):\n        dp[i] = (dp[i-1] + dp[i-2]) % MOD\n    return dp[n]"
    },
    {
        "number": 2393,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(1, len(lines), 2):\n        s = lines[i]\n        n = len(s)\n        r = 0\n        indices = []\n        for j in range(n-2):\n            if s[j:j+3] == 'one' or s[j:j+3] == 'two':\n                r += 1\n                indices.append(j+1)\n        if r == 0:\n            print(0)\n        else:\n            print(r)\n            print(*indices)"
    },
    {
        "number": 2394,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(n - 1)]\n    graph = [[] for _ in range(n + 1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[1][0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for neighbor in graph[i]:\n                dp[i][j] = min(dp[i][j], dp[neighbor][j - 1] + 1)\n    ans = 0\n    for i in range(1, n):\n        for j in range(i + 1, n + 1):\n            ans += dp[i][k] + dp[j][k]\n    return str(ans)"
    },
    {
        "number": 2395,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        t = stdin.readline().strip()\n        n = len(t)\n        s = t\n        for k in range(2, n+1):\n            if s == t:\n                break\n            s = s[k:] + s[:k]\n        if s == t:\n            print(t)\n        else:\n            print(s)"
    },
    {
        "number": 2396,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    ships = stdin.split('\\n')\n    ships = ships[1:]\n    result = []\n    for ship in ships:\n        a, b, c = map(int, ship[1:-1].split('/'))\n        result.append(len([1 for s in ships if eval(s) == eval(ship)]))\n    return''.join(map(str, result))"
    },
    {
        "number": 2397,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    dp = [[0] * n for _ in range(k)]\n    for i in range(n):\n        for j in range(k):\n            if i == 0:\n                dp[j][i] = a[i] * j\n            else:\n                dp[j][i] = max(dp[j][i-1], dp[j-1][i-1] + a[i] * j)\n    return dp[k-1][n-1]"
    },
    {
        "number": 2398,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        x, y, x1, y1, x2, y2 = map(int, stdin.readline().strip().split())\n        if x1 <= x <= x2 and y1 <= y <= y2:\n            if a+b+c+d >= 1:\n                return \"YES\"\n        else:\n            return \"NO\"\n    return \"NO\""
    },
    {
        "number": 2399,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        a, b = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        if s.count('.') < a:\n            print('YES')\n        else:\n            print('NO')"
    },
    {
        "number": 2400,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*3-3])\n        p = list(map(int, lines[i*3-2].split()))\n        m = int(lines[i*3-1])\n        q = list(map(int, lines[i*3].split()))\n        count = 0\n        for j in range(n):\n            for k in range(m):\n                if (p[j]-q[k]) % 2 == 0 and (p[j]+q[k]) % 2 == 0:\n                    count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 2401,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    T = int(lines[0])\n    for i in range(1, T*3, 3):\n        N, R = map(int, lines[i].split())\n        nums = list(map(int, lines[i+1].split()))\n        if R == 1:\n            guess = nums[0]\n        else:\n            guess = nums[R-2]\n        print(guess)\n    return \"\""
    },
    {
        "number": 2402,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x, y = map(int, stdin.readline().strip().split())\n        min_place = max_place = 0\n        for j in range(1, n+1):\n            if j <= x:\n                min_place += 1\n            if j <= y:\n                min_place += 1\n            if j <= x:\n                max_place += 1\n            if j <= y:\n                max_place += 1\n        print(min_place, max_place)"
    },
    {
        "number": 2403,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n\n    ans = 0\n    for i in range(n):\n        ans += a[i]\n        if b[i]!= -1:\n            a[b[i]-1] += a[i]\n\n    print(ans)\n\n    # find optimal order of positions\n    visited = [False] * n\n    order = []\n    for i in range(n):\n        if not visited[i]:\n            visited[i] = True\n            order.append(i+1)\n            j = i\n            while b[j]!= -1:\n                visited[b[j]-1] = True\n                order.append(b[j])\n                j = b[j]-1\n\n    print(' '.join(map(str, order)))\n\n    return ''"
    },
    {
        "number": 2404,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a % 2 == 0:\n        return str(a * (a + 1) // 2)\n    else:\n        return str(a * (a + 1) // 2 + 1)"
    },
    {
        "number": 2405,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, a, b, q = map(int, stdin.split())\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + a if i <= k else dp[i - 1] + b\n    for _ in range(q):\n        query = stdin.readline().strip().split()\n        if query[0] == '1':\n            d, a = map(int, query[1:])\n            dp[d] -= a\n        else:\n            p = int(query[1])\n            ans = dp[p]\n            for i in range(p + 1, n + 1):\n                ans = max(ans, dp[i])\n            print(ans)\n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 2406,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    for i in range(n - 1):\n        if heights[i] + 2 <= heights[i + 1]:\n            heights[i + 1] -= 1\n            heights[i] += 1\n    return''.join(map(str, heights))"
    },
    {
        "number": 2407,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n, r = map(int, stdin.readline().strip().split())\n        xs = list(map(int, stdin.readline().strip().split()))\n        xs.sort()\n        lo, hi = 0, xs[-1]\n        ans = 0\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            killed = 0\n            for x in xs:\n                if x <= mid:\n                    killed += 1\n                else:\n                    killed += 2\n            if killed >= n:\n                ans = mid\n                hi = mid - 1\n            else:\n                lo = mid + 1\n        print(ans)\n    return \"\""
    },
    {
        "number": 2408,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    poles = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        poles.append((x, y))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if poles[i][0] == poles[j][0] or poles[i][1] == poles[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 2409,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for case in range(int(stdin.split()[0])):\n        n, k, l = map(int, stdin.readline().split())\n        d = list(map(int, stdin.readline().split()))\n        p = [0] * (2 * k)\n        for i in range(k):\n            p[i] = 1\n            p[k + i] = -1\n        x = 0\n        t = 0\n        while x < n:\n            if x + 1 <= n and d[x] + p[t % (2 * k)] > l:\n                return \"No\"\n            x += 1\n            t += 1\n        if x == n:\n            return \"Yes\"\n    return \"No\""
    },
    {
        "number": 2410,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if sum(a) == 0:\n            return \"YES\"\n        if sum(a) < 0:\n            return \"NO\"\n        if sum(a) > 0:\n            if any(x > 0 for x in a):\n                return \"YES\"\n            else:\n                return \"NO\""
    },
    {
        "number": 2411,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    poles = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        poles.append((x, y))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if poles[i][0] == poles[j][0] or poles[i][1] == poles[j][1]:\n                count += 1\n    return count"
    },
    {
        "number": 2412,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        if s[0]!= '8':\n            print('NO')\n            continue\n        for j in range(n):\n            if s[j] == '8':\n                continue\n            if s[j] == '0':\n                s = s[:j] + s[j+1:]\n            else:\n                s = s[:j] + '8' + s[j+1:]\n            if s[0] == '8':\n                print('YES')\n                break\n        else:\n            print('NO')"
    },
    {
        "number": 2413,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        stairs = lines[i*2]\n        dp = [0] * (1 << n)\n        dp[0] = 1\n        for j in range(1, 1 << n):\n            for k in range(n):\n                if j & (1 << k):\n                    if stairs[k] == '1':\n                        dp[j] = max(dp[j], dp[j ^ (1 << k)] + 1)\n                    else:\n                        dp[j] = max(dp[j], dp[j ^ (1 << k)])\n        print(dp[-1])\n    return ''"
    },
    {
        "number": 2414,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    result = []\n    for i in range(1, t+1):\n        a, b = map(int, lines[i].split())\n        result.append(a+b)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2415,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    if len(stdin) < 1 or len(stdin) > 10:\n        return \"NO\"\n    for char in stdin:\n        if char not in vowels:\n            return \"NO\"\n    return \"YES\""
    },
    {
        "number": 2416,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if a[i]!= a[j]!= a[k]:\n                    a[i] ^= a[j] ^ a[k]\n                    count += 1\n                    print(i+1, j+1, k+1)\n                    if count == n:\n                        return \"YES\\n\"+str(count)\n    return \"NO\""
    },
    {
        "number": 2417,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    b = list(map(int, stdin.readline().strip().split()))\n    fines = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] < a[j] < b[i] < b[j]:\n                fines += 1\n    return fines"
    },
    {
        "number": 2418,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    q = int(stdin.readline())\n    changes = []\n    for _ in range(q):\n        l, r, x = map(int, stdin.readline().split())\n        changes.append((l-1, r, x))\n    b = [0] * n\n    c = [0] * n\n    for i in range(n):\n        b[i] = a[i]\n        c[i] = a[i]\n    for l, r, x in changes:\n        for i in range(l, r):\n            b[i] += x\n            c[i] -= x\n    ans = [0] * (q+1)\n    ans[0] = max(b[i] for i in range(n))\n    for i in range(1, q+1):\n        b[changes[i-1][0]] += changes[i-1][2]\n        b[changes[i-1][1]-1] -= changes[i-1][2]\n        c[changes[i-1][0]] -= changes[i-1][2]\n        c[changes[i-1][1]-1] += changes[i-1][2]\n        ans[i] = max(b[i] for i in range(n))\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 2419,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        count = 0\n        while a!= b:\n            if a < b:\n                a += 1\n                count += 1\n            else:\n                b += 1\n                count += 1\n        print(count)"
    },
    {
        "number": 2420,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r = map(int, stdin.split())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        points.append((x, y))\n    points.sort()\n    count = 1\n    max_count = 1\n    for i in range(1, n):\n        if points[i][0] - points[i-1][0] > r:\n            count = 1\n        else:\n            count += 1\n        max_count = max(max_count, count)\n    return str(max_count)"
    },
    {
        "number": 2421,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, y = map(int, stdin.readline().strip().split())\n        c = list(map(int, stdin.readline().strip().split()))\n        visited = set()\n        q = [(0, 0, 0)]\n        while q:\n            cost, x, y = q.pop(0)\n            if (x, y) == (x, y):\n                return str(cost)\n            for dx, dy in [(1, 0), (-1, 0), (0, 1), (0, -1), (1, 1), (-1, -1)]:\n                nx, ny = x+dx, y+dy\n                if (nx, ny) not in visited:\n                    visited.add((nx, ny))\n                    q.append((cost+c[dx+dy], nx, ny))"
    },
    {
        "number": 2422,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i])\n        if n % 3 == 0 and n % 5 == 0 and n % 7 == 0:\n            three_room = n // 3\n            five_room = n // 5\n            seven_room = n // 7\n            return f\"{three_room} {five_room} {seven_room}\\n\"\n        else:\n            return \"-1\\n\""
    },
    {
        "number": 2423,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        graph[u].append(v)\n        graph[v].append(u)\n    visited = [False] * (n+1)\n    count = 0\n    for i in range(1, n+1):\n        if not visited[i]:\n            count += 1\n            queue = [i]\n            while queue:\n                node = queue.pop(0)\n                visited[node] = True\n                for neighbor in graph[node]:\n                    if not visited[neighbor]:\n                        queue.append(neighbor)\n    return n - count"
    },
    {
        "number": 2424,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    kids = []\n    for i in range(n):\n        k, *items = map(int, stdin.readline().split())\n        kids.append((k, items))\n\n    total_items = sum(k for k, _ in kids)\n    total_combinations = 1\n    for k, items in kids:\n        total_combinations *= k\n\n    valid_decisions = 0\n    for i in range(total_combinations):\n        x = i % n\n        y = (i // n) % kids[x][0]\n        z = (i // total_items) % n\n        if kids[x][1][y] in kids[z][1]:\n            valid_decisions += 1\n\n    return str((valid_decisions * pow(total_combinations, -1, 998244353)) % 998244353)"
    },
    {
        "number": 2425,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q = int(stdin.readline().strip())\n    ans = []\n    for i in range(q):\n        a = int(stdin.readline().strip())\n        b = a - 1\n        while b > 0:\n            if a & b == 0:\n                ans.append(gcd(a ^ b, a & b))\n                break\n            b -= 1\n        else:\n            ans.append(gcd(a ^ b, a & b))\n    return '\\n'.join(map(str, ans))\n\ndef"
    },
    {
        "number": 2426,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        s = sum(a)\n        if s % 2 == 0:\n            print(1)\n            print(1, a.index(max(a))+1)\n        else:\n            print(-1)\n    return \"\""
    },
    {
        "number": 2427,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n-2):\n        if (a[i] ^ a[i+1]) == sum(a[i+2:i+n-1]):\n            count += 1\n    return count"
    },
    {
        "number": 2428,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        s = stdin.readline().strip()\n        t = stdin.readline().strip()\n        p = \"\"\n        while s:\n            if s == t:\n                return \"YES\"\n            if len(s) < len(t):\n                return \"NO\"\n            for i in range(len(s)):\n                if s[:i+1] == t[:i+1]:\n                    p += s[:i+1]\n                    s = s[i+1:]\n                    break\n        if p == t:\n            return \"YES\"\n        else:\n            return \"NO\""
    },
    {
        "number": 2429,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2!= 0:\n            return \"Error: n is not even\"\n        coins = [2**i for i in range(n)]\n        a = sum(coins[:n//2])\n        b = sum(coins[n//2:])\n        print(abs(a-b))"
    },
    {
        "number": 2430,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    heights.sort()\n    time = 0\n    for i in range(n):\n        if i == 0:\n            time += heights[i]\n        else:\n            time += max(heights[i] - heights[i-1] - 1, 0)\n    return str(time)"
    },
    {
        "number": 2431,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x, y, z = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        dp = [[[0] * (n+1) for _ in range(n+1)] for _ in range(n+1)]\n        for i in range(n+1):\n            dp[i][i][0] = 1\n        for i in range(n+1):\n            for j in range(n+1):\n                for k in range(n+1):\n                    if i == j:\n                        dp[i][j][k] = dp[i][j-1][k]\n                    else:\n                        dp[i][j][k] = dp[i][j-1][k] + dp[i][j][k-1] + dp[i][j][k-2]\n        ans = 0\n        for i in range(n):\n            for j in range(n):\n                if a[i] > 0:\n                    ans += dp[i][j][x] + dp[i][j][y] + dp[i][j][z]\n        print(ans)\n    return \"\""
    },
    {
        "number": 2432,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a = int(stdin)\n    if a == 0:\n        return 0\n    elif a == 1:\n        return 1\n    else:\n        return 2**(a-1)"
    },
    {
        "number": 2433,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        b, p, f = map(int, stdin.readline().strip().split())\n        h, c = map(int, stdin.readline().strip().split())\n        max_profit = 0\n        if b >= 2 and p >= 1 and f >= 1:\n            max_profit += h * 2 + c * 3\n        if b >= 2 and p >= 1 and f >= 2:\n            max_profit += h * 2 + c * 2\n        if b >= 2 and p >= 2 and f >= 1:\n            max_profit += h * 2 + c * 2\n        if b >= 2 and p >= 2 and f >= 2:\n            max_profit += h * 2 + c * 1\n        if b >= 3 and p >= 1 and f >= 1:\n            max_profit += h * 3 + c * 3\n        if b >= 3 and p >= 1 and f >= 2:\n            max_profit += h * 3 + c * 2\n        if b >= 3 and p >= 2 and f >= 1:\n            max_profit += h * 3 + c * 2\n        if b >= 3 and p >= 2 and f >= 2:\n            max_profit += h * 3 + c * 1\n        if b >= 4 and p >= 1 and f >= 1:\n            max_profit += h * 4 + c * 3\n        if b >= 4 and p >= 1 and f >= 2:\n            max_profit += h * 4 + c * 2\n        if b >= 4 and p >= 2 and f >= 1:\n            max_profit += h * 4 + c * 2\n        if b >= 4 and p >= 2 and f >= 2:\n            max_profit += h * 4 + c * 1\n        if b >= 5 and p >= 1 and f >= 1:\n            max_profit += h * 5 + c * 3\n        if b >= 5 and p >= 1 and f >= 2:\n            max_profit += h * 5 + c * 2\n        if b >= 5 and p >= 2 and f >= 1:\n            max_profit += h * 5 + c * 2\n        if b >= 5 and p >= 2 and f >= 2:\n            max_profit += h * 5 + c * 1\n        print(max_profit)\n    return \"\""
    },
    {
        "number": 2434,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        if m == n:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 2435,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x, m = map(int, stdin.readline().strip().split())\n        a = [0] * n\n        for j in range(x):\n            a[j] = 1\n        for j in range(m):\n            l, r = map(int, stdin.readline().strip().split())\n            a[l-1], a[r-1] = a[r-1], a[l-1]\n        count = 0\n        for j in range(n):\n            if a[j] == 1:\n                count += 1\n        print(count)"
    },
    {
        "number": 2436,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        k = 1\n        for j in range(n):\n            if a[j] <= k:\n                k += 1\n        print(k)\n    return \"\""
    },
    {
        "number": 2437,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        if a[i] == 1:\n            count += 1\n            a[i] = 2\n    if count == n:\n        return \"0\"\n    else:\n        return str(count)"
    },
    {
        "number": 2438,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        for j in range(i+2, n+1):\n            if s[i:j] == s[i:j][::-1]:\n                count += 1\n    return count"
    },
    {
        "number": 2439,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        b = [0]*n\n        for j in range(n):\n            b[j] = a[j]\n        for j in range(n):\n            for k in range(j+1, n):\n                if a[j] > a[k]:\n                    b[j], b[k] = b[k], b[j]\n        if all(b[j]!= 0 for j in range(n)):\n            print(\"YES\")\n            print(*b)\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 2440,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.readline().split())\n    tree = [[] for _ in range(n+1)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().split())\n        tree[u].append(v)\n        tree[v].append(u)\n    for i in range(q):\n        x, y, a, b, k = map(int, stdin.readline().split())\n        tree[x].append(y)\n        tree[y].append(x)\n        tree[a].append(b)\n        tree[b].append(a)\n        visited = [False] * (n+1)\n        visited[a] = True\n        stack = [(a, 0)]\n        while stack:\n            node, count = stack.pop()\n            if node == b:\n                if count == k:\n                    return \"YES\"\n                else:\n                    continue\n            for nei in tree[node]:\n                if not visited[nei]:\n                    visited[nei] = True\n                    stack.append((nei, count+1))\n        return \"NO\""
    },
    {
        "number": 2441,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, checkpost_cost = map(int, stdin.readline().split())\n    checkpost_cost = list(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    roads = []\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        roads.append((u, v))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n):\n        for j in range(i+1, n):\n            for road in roads:\n                if road[0] == i and road[1] == j:\n                    dp[i][j] = 1\n                    break\n                if road[0] == j and road[1] == i:\n                    dp[i][j] = 1\n                    break\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = (dp[i][j] + dp[i][k] * dp[k][j]) % 1000000007\n    ans = 0\n    for i in range(n):\n        ans = (ans + dp[0][i] * checkpost_cost[i]) % 1000000007\n    return f\"{ans} {dp[0][0]}\""
    },
    {
        "number": 2442,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        a.sort()\n        if n == 1:\n            print(0)\n            continue\n        if a[0] == 0:\n            print(a[1])\n            continue\n        if a[-1] == 0:\n            print(a[-2])\n            continue\n        if a[0] == a[1]:\n            print(a[1]+1)\n            continue\n        if a[-1] == a[-2]:\n            print(a[-2]+1)\n            continue\n        print(a[0]+1)\n    return \"\""
    },
    {
        "number": 2443,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    forbidden = set(map(int, stdin.split())) if n else set()\n    prefix_products = [1]\n    for i in range(1, m):\n        prefix_products.append((prefix_products[-1] * i) % m)\n    for i in range(m):\n        if prefix_products[i] in forbidden:\n            prefix_products[i] = 0\n    prefix_products = [p for p in prefix_products if p!= 0]\n    k = len(prefix_products)\n    sequence = [prefix_products[i] for i in range(k)]\n    return f\"{k}\\n{' '.join(map(str, sequence))}\""
    },
    {
        "number": 2444,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    t = list(map(int, stdin.readline().split()))\n    q = []\n    for i in range(n):\n        if t[i] == 0:\n            q.append(i)\n    ans = [0] * n\n    for i in range(n):\n        if t[i] == 0:\n            ans[i] = p\n        else:\n            ans[i] = t[i] + p\n            if q:\n                ans[i] = max(ans[i], ans[q[0]] + p)\n                q.pop(0)\n            else:\n                ans[i] = max(ans[i], p)\n    return''.join(map(str, ans))"
    },
    {
        "number": 2445,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for _ in range(T):\n        n = int(stdin.readline().strip())\n        if n % 2 == 0:\n            print(n // 2)\n        else:\n            print(n // 2 + 1)\n    return \"\""
    },
    {
        "number": 2446,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    q = int(stdin.readline())\n    result = []\n    for i in range(q):\n        x = int(stdin.readline())\n        count = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if gcd(a[j:k+1]) == x:\n                    count += 1\n        result.append(count)\n    return '\\n'.join(map(str, result))\n\ndef"
    },
    {
        "number": 2447,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        s = lines[i]\n        n = len(s)\n        count = 0\n        for j in range(n):\n            if s[j] == '0':\n                count += 1\n            else:\n                count -= 1\n            if count < 0:\n                count = 0\n            if s[j:j+3] in ['010', '101']:\n                count = float('inf')\n                break\n        print(count)"
    },
    {
        "number": 2448,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a, b, c = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        if a + b + c!= n:\n            print(\"NO\")\n            continue\n        count = 0\n        for j in range(n):\n            if s[j] == 'R' and (j == 0 or s[j-1] == 'S') and (j == n-1 or s[j+1] == 'P'):\n                count += 1\n            elif s[j] == 'P' and (j == 0 or s[j-1] == 'R') and (j == n-1 or s[j+1] == 'S'):\n                count += 1\n            elif s[j] == 'S' and (j == 0 or s[j-1] == 'P') and (j == n-1 or s[j+1] == 'R'):\n                count += 1\n        if count >= (n+1)//2:\n            print(\"YES\")\n            print(s)\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 2449,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    T = set()\n    for i in range(n):\n        T.add(int(stdin.readline().strip(), 2))\n    MOD = 10**9 + 7\n    def is_good(a):\n        return all(a ^ b in T for b in T)\n    def count_good(S):\n        return sum(is_good(a) for a in S)\n    def good_sets(n, m):\n        if n == 0:\n            return {()}\n        if n == 1:\n            return {(0,) * m}\n        S = good_sets(n-1, m)\n        return S | {S1 + (a,) for a in range(m) for S1 in S if a == 0 or S1[-1] & a == 0}\n    return count_good(good_sets(m, m)) % MOD"
    },
    {
        "number": 2450,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m, x, y = map(int, lines[i*2-1].split())\n        a = [list(line) for line in lines[i*2].split()]\n        white_squares = [(i, j) for i in range(n) for j in range(m) if a[i][j] == '.']\n        black_squares = [(i, j) for i in range(n) for j in range(m) if a[i][j] == '*']\n        total_cost = 0\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == '.':\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j))\n                    if (i, j) in black_squares:\n                        black_squares.remove((i, j))\n                    if (i, j) in white_squares:\n                        white_squares.remove((i, j"
    },
    {
        "number": 2451,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, h, a, b, k = map(int, stdin.split())\n    towers = [[] for _ in range(n)]\n    for i in range(n):\n        towers[i] = [int(x) for x in stdin.split()]\n    for i in range(n):\n        towers[i].sort()\n    dp = [[float('inf')] * (h + 1) for _ in range(n)]\n    dp[0][towers[0][0]] = 0\n    for i in range(1, n):\n        for j in range(a, b + 1):\n            for k in range(len(towers[i])):\n                if towers[i][k] > j:\n                    break\n                dp[i][j] = min(dp[i][j], dp[i - 1][towers[i - 1][k]] + 1)\n    result = []\n    for i in range(k):\n        t_a, f_a, t_b, f_b = map(int, stdin.split())\n        result.append(dp[t_b - 1][f_b] - dp[t_a - 1][f_a])\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2452,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        p = [i+1 for i in range(n)]\n        for j in range(n):\n            for k in range(j+1, n):\n                if (p[j] | p[k]) < k-j+1:\n                    p[j], p[k] = p[k], p[j]\n        print(' '.join(map(str, p)))"
    },
    {
        "number": 2453,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    segments = []\n    for i in range(n):\n        l, r = map(int, stdin.readline().split())\n        segments.append((l, r))\n    counts = [0] * (n+1)\n    for i in range(n):\n        for j in range(i+1, n):\n            if segments[i][0] <= segments[j][0] <= segments[i][1] or segments[i][0] <= segments[j][1] <= segments[i][1]:\n                counts[1] += 1\n            if segments[i][0] <= segments[j][0] <= segments[j][1] or segments[i][0] <= segments[j][1] <= segments[j][0]:\n                counts[2] += 1\n            if segments[i][0] <= segments[j][0] <= segments[i][1] <= segments[j][1] or segments[i][0] <= segments[j][1] <= segments[i][1]:\n                counts[3] += 1\n            if segments[i][0] <= segments[j][0] <= segments[j][1] <= segments[i][1] or segments[i][0] <= segments[j][1] <= segments[j][0] <= segments[i][1]:\n                counts[4] += 1\n            if segments[i][0] <= segments[j][0] <= segments[i][1] <= segments[j][1] <= segments[i][1] or segments[i][0] <= segments[j][1] <= segments[j][0] <= segments[i][1]:\n                counts[5] += 1\n    return''.join(map(str, counts))"
    },
    {
        "number": 2454,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    roads = []\n    for i in range(n - 1):\n        a, b = map(int, stdin.readline().strip().split())\n        roads.append((a, b))\n\n    # count number of ways to select starting city\n    MOD = 10**9 + 7\n    dp = [0] * n\n    dp[0] = 1\n    for i in range(1, n):\n        dp[i] = (dp[i-1] + dp[i-1]) % MOD\n\n    # count number of ways to build casinos\n    casino_dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        casino_dp[i][i] = 1\n    for road in roads:\n        a, b = road\n        casino_dp[a-1][b-1] = casino_dp[b-1][a-1] = 1\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                casino_dp[i][j] = (casino_dp[i][j] + casino_dp[i][k] * casino_dp[k][j]) % MOD\n\n    # count number of ways to end up happy\n    happy_dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        happy_dp[i][i] = 1\n    for road in roads:\n        a, b = road\n        happy_dp[a-1][b-1] = happy_dp[b-1][a-1] = 1\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                happy_dp[i][j] = (happy_dp[i][j] + happy_dp[i][k] * happy_dp[k][j]) % MOD\n\n    # count number of ways to end up happy with casinos\n    happy_with_casino_dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        happy_with_casino_dp[i][i] = 1\n    for road in roads:\n        a, b = road\n        happy_with_casino_dp[a-1][b-1] = happy_with_casino_dp[b-1][a-1] = 1\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                happy_with_casino_dp[i][j] = (happy_with_casino_dp[i][j] + happy_with_casino_dp[i][k] * happy_with_casino_dp[k][j]) % MOD\n\n    # count number of ways to end up happy with casinos and starting from city i\n    happy_with_casino_from_i_dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        happy_with_casino_from_i_dp[i][i] = 1\n    for road in roads:\n        a, b = road\n        happy_with_casino_from_i_dp[a-1][b-1] = happy_with_casino_from_i_dp[b-1][a-1] = 1\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                happy_with_casino_from_i_dp[i][j] = (happy_with_casino_from_i_dp[i][j] + happy_with_casino_from_i_dp[i][k] * happy_with_casino_from_i_dp[k][j]) % MOD\n\n    # count number of ways to end up happy with casinos and starting from city i and visiting city j\n    happy_with_casino_from_i_to_j_dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        happy_with_casino_from_i_to_j_dp[i][i] = 1\n    for road in roads:\n        a, b = road\n        happy_with_casino_from_i_to_j_dp[a-1][b-1] = happy_with_casino_from_i_to_j_dp[b-1][a-1] = 1\n    for k in"
    },
    {
        "number": 2455,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        cards = stdin.readline().strip()\n        a = 1\n        b = 12\n        while a <= 12:\n            if b > 12 // a:\n                b = 12 // a\n            if cards[b-1:b*(a-1)+1].count('X') == b:\n                print(f\"{a} {' '.join([f'{a*b}x{b}']*(a-1))}\")\n            a += 1\n            b = 12\n    return \"\""
    },
    {
        "number": 2456,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, r = map(int, stdin.readline().strip().split())\n        ans = 1\n        for k in range(1, r+1):\n            ans *= (n+k-1)//k\n        print(ans)\n    return \"\""
    },
    {
        "number": 2457,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, a, b, c, d = map(int, stdin.readline().strip().split())\n        if c - d < sum(x for x in range(a - b, a + b + 1)) <= c + d:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 2458,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t, k = map(int, stdin.readline().split())\n    res = []\n    for i in range(t):\n        a, b = map(int, stdin.readline().split())\n        if a == b:\n            res.append(1)\n        elif a == 1:\n            res.append(k)\n        elif b == 1:\n            res.append(1)\n        else:\n            res.append(k * (b // k) + (b % k))\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 2459,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    queries = []\n    for _ in range(q):\n        t, l, r = map(int, stdin.readline().split())\n        queries.append((t, l, r))\n    b = list(map(int, stdin.readline().split()))\n\n    for t, l, r in queries:\n        if t == 1:\n            a[l:r] = a[l:r][::-1]\n            a[l], a[r-1] = a[r-1], a[l]\n        else:\n            a[l:r] = a[l:r][::-1]\n\n    result = []\n    for i in b:\n        result.append(a[i-1])\n\n    return''.join(map(str, result))"
    },
    {
        "number": 2460,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:2+n+m]))\n    t = list(map(int, stdin.split()[2+n+m:]))\n    a = [0] * m\n    for i in range(m):\n        for j in range(n+m):\n            if t[j] == 1:\n                a[i] += 1\n                if x[j] < x[i]:\n                    break\n    return''.join(map(str, a))"
    },
    {
        "number": 2461,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    graph = [[] for _ in range(n)]\n    for i in range(n - 1):\n        x, y = map(int, stdin.readline().strip().split())\n        graph[x - 1].append(y - 1)\n        graph[y - 1].append(x - 1)\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = a[i]\n    for i in range(n):\n        for j in graph[i]:\n            dp[j] = gcd(dp[j], dp[i])\n    return''.join(map(str, dp))\n\ndef"
    },
    {
        "number": 2462,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        n = int(line)\n        if n == 1:\n            print('NO')\n            continue\n        if n == 2:\n            print('NO')\n            continue\n        if n == 3:\n            print('YES')\n            print('14 10 6 1')\n            continue\n        if n == 4:\n            print('YES')\n            print('6 10 15 5')\n            continue\n        if n == 5:\n            print('YES')\n            print('6 10 21 2')\n            continue\n        if n == 6:\n            print('YES')\n            print('10 33 55 2')\n            continue\n        if n == 7:\n            print('YES')\n            print('10 21 221 6')\n            continue\n        if n == 8:\n            print('NO')\n            continue\n        if n == 9:\n            print('NO')\n            continue\n        if n == 10:\n            print('NO')\n            continue\n        if n == 11:\n            print('NO')\n            continue\n        if n == 12:\n            print('NO')\n            continue\n        if n == 13:\n            print('NO')\n            continue\n        if n == 14:\n            print('NO')\n            continue\n        if n == 15:\n            print('NO')\n            continue\n        if n == 16:\n            print('NO')\n            continue\n        if n == 17:\n            print('NO')\n            continue\n        if n == 18:\n            print('NO')\n            continue\n        if n == 19:\n            print('NO')\n            continue\n        if n == 20:\n            print('NO')\n            continue\n        if n == 21:\n            print('NO')\n            continue\n        if n == 22:\n            print('NO')\n            continue\n        if n == 23:\n            print('NO')\n            continue\n        if n == 24:\n            print('NO')\n            continue\n        if n == 25:\n            print('NO')\n            continue\n        if n == 26:\n            print('NO')\n            continue\n        if n == 27:\n            print('NO')\n            continue\n        if n == 28:\n            print('NO')\n            continue\n        if n == 29:\n            print('NO')\n            continue\n        if n == 30:\n            print('NO')\n            continue\n        if n == 31:\n            print('NO')\n            continue\n        if n == 32:\n            print('NO')\n            continue\n        if n == 33:\n            print('NO')\n            continue\n        if n == 34:\n            print('NO')\n            continue\n        if n == 35:\n            print('NO')\n            continue\n        if n == 36:\n            print('NO')\n            continue\n        if n == 37:\n            print('NO')\n            continue\n        if n == 38:\n            print('NO')\n            continue\n        if n == 39:\n            print('NO')\n            continue\n        if n == 40:\n            print('NO')\n            continue\n        if n == 41:\n            print('NO')\n            continue\n        if n == 42:\n            print('NO')\n            continue\n        if n == 43:\n            print('NO')\n            continue\n        if n == 44:\n            print('NO')\n            continue\n        if n == 45:\n            print('NO')\n            continue\n        if n == 46:\n            print('NO')\n            continue\n        if n == 47:\n            print('NO')\n            continue\n        if n == 48:\n            print('NO')\n            continue\n        if n == 49:\n            print('NO')\n            continue\n        if n == 50:\n            print('NO')\n            continue\n        if n == 51:\n            print('NO')\n            continue\n        if n == 52:\n            print('NO')\n            continue\n        if n == 53:\n            print('NO')\n            continue\n        if n == 54:\n            print('NO')\n            continue\n        if n == 55:\n            print('NO')\n            continue\n        if n == 56:\n            print('NO')\n            continue\n        if n == 57:\n            print('NO')\n            continue\n        if n == 58:\n            print('NO')\n            continue\n        if n == 59:\n            print('NO')\n            continue\n        if n == 60:\n            print('NO')\n            continue\n        if n == 61:\n            print('NO')\n            continue\n        if n == 62:\n            print('NO')\n            continue\n        if n == 63:\n            print('NO')\n            continue\n        if n"
    },
    {
        "number": 2463,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n    cheap = [True] * n\n    for i in range(1, n-1):\n        if a[i] < a[i-1] and a[i] < a[i+1]:\n            cheap[i] = False\n    count = 0\n    for i in range(n):\n        if cheap[i]:\n            count += 1\n    print(count)\n    result = []\n    for i in range(n):\n        if cheap[i]:\n            result.append(a[i])\n    print(' '.join(map(str, result)))"
    },
    {
        "number": 2464,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    edges = []\n    for i in range(n-1):\n        x, y, c = map(int, stdin.readline().split())\n        edges.append((x, y, c))\n    dp = [[0]*2 for _ in range(n)]\n    for i in range(n):\n        dp[i][0] = 1\n        dp[i][1] = 1\n    for x, y, c in edges:\n        dp[x-1][c] += dp[y-1][1-c]\n        dp[y-1][c] += dp[x-1][1-c]\n    ans = 0\n    for i in range(n):\n        ans += dp[i][0] * dp[i][1]\n    return str(ans)"
    },
    {
        "number": 2465,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        ang = int(stdin.readline().strip())\n        n = 3\n        while True:\n            if n * (180 - ang) % 180 == 0:\n                break\n            n += 1\n        if n > 998244353:\n            print(-1)\n        else:\n            print(n)\n    return \"\""
    },
    {
        "number": 2466,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input string to list of integers\n    nums = list(map(int, stdin.split()))\n    \n    # Define a helper function to generate permutations\n    def permute(nums, l, r):\n        if l == r:\n            result.append(nums[:])\n        else:\n            for i in range(l, r+1):\n                nums[l], nums[i] = nums[i], nums[l]\n                permute(nums, l+1, r)\n                nums[l], nums[i] = nums[i], nums[l]\n                \n    # Call the helper function to generate permutations\n    result = []\n    permute(nums, 0, len(nums)-1)\n    \n    # Convert list of lists to list of tuples\n    result = [tuple(x) for x in result]\n    \n    # Convert list of tuples to list of lists\n    result = [list(x) for x in result]\n    \n    # Return the list of permutations\n    return result"
    },
    {
        "number": 2467,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2468,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    max_len = 0\n    for char in stdin:\n        if char == '(':\n            stack.append(char)\n        else:\n            if stack and stack[-1] == '(':\n                stack.pop()\n                max_len = max(max_len, len(stack))\n            else:\n                stack.append(char)\n    return max_len"
    },
    {
        "number": 2469,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    nums = list(map(int, stdin.split()))\n    n = len(nums)\n    \n    # count frequency of each element\n    freq = [0] * 1001\n    for num in nums:\n        freq[num] += 1\n    \n    # find elements that appear more than \u230a n/3 \u230b times\n    res = []\n    for i in range(1, 1001):\n        if freq[i] > n//3:\n            res.append(i)\n    \n    return res"
    },
    {
        "number": 2470,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2471,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, N = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    count = [0] * 10\n    for i in range(N):\n        count[a[i] - 1] += 1\n        count[b[i] - 1] += 1\n    for i in range(10):\n        count[i] = (count[i] + 2) // 3\n    return '\\n'.join(map(str, count))"
    },
    {
        "number": 2472,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    jobs = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        jobs.append((a, b))\n\n    # Sort jobs by deadline\n    jobs.sort(key=lambda x: x[1])\n\n    # Initialize variables\n    time = 0\n    current_jobs = []\n\n    # Iterate through jobs\n    for a, b in jobs:\n        # If there are no current jobs, start a new one\n        if not current_jobs:\n            current_jobs.append((a, b))\n            time = b\n        # If there is a current job, check if it can be completed\n        else:\n            # If the current job can be completed, do it\n            if time + a <= b:\n                time += a\n            # If the current job cannot be completed, start a new one\n            else:\n                current_jobs.append((a, b))\n                time = b + a\n\n    # Check if all jobs were completed\n    if len(current_jobs) == n:\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 2473,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    points = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().split())\n        points.append((x, y))\n\n    # Sort points by x-coordinate\n    points.sort(key=lambda p: p[0])\n\n    # Find the maximum x-coordinate of the rectangle\n    max_x = points[K-1][0]\n\n    # Find the minimum y-coordinate of the rectangle\n    min_y = float('inf')\n    for i in range(K):\n        min_y = min(min_y, points[i][1])\n\n    # Find the maximum y-coordinate of the rectangle\n    max_y = points[N-1][1]\n\n    # Calculate the area of the rectangle\n    area = (max_x - points[0][0]) * (max_y - min_y)\n\n    return str(area)"
    },
    {
        "number": 2474,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    C = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    MOD = 10**9 + 7\n    dp = [[0] * (1 << N) for _ in range(N+1)]\n\n    # Base case: if S and T are the same, f(S, T) = 0\n    for i in range(N):\n        dp[i][1 << i] = 0\n\n    # Fill dp table\n    for i in range(N):\n        for mask in range(1 << N):\n            # If S_i is the same as T_i, we don't need to change it\n            if (mask >> i) & 1 == (mask >> (N-1-i)) & 1:\n                dp[i+1][mask] = dp[i][mask]\n            else:\n                # If S_i is different from T_i, we need to change it\n                # We can either change it to 0 or 1\n                dp[i+1][mask] = min(dp[i][mask], dp[i][mask ^ (1 << i)] + C[i])\n\n    # Compute sum of f(S, T) over all pairs\n    ans = 0\n    for mask in range(1 << N):\n        ans += dp[N][mask]\n        ans %= MOD\n\n    return str(ans)"
    },
    {
        "number": 2475,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    s = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    A = 1\n    B = 1\n    score = 0\n\n    # Loop through the pond\n    for i in range(N):\n        # Move to coordinate x+A\n        x = i\n        y = x + A\n        if y == N-1:\n            return str(score)\n        if y < N-1 and s[y] > 0:\n            score += s[y]\n        else:\n            score -= 10**100\n            return str(score)\n\n        # Move to coordinate x-B\n        x = i\n        y = x - B\n        if y == N-1:\n            return str(score)\n        if y < N-1 and s[y] > 0:\n            score += s[y]\n        else:\n            score -= 10**100\n            return str(score)\n\n    # Return the final score\n    return str(score)"
    },
    {
        "number": 2476,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    max_eaten = [0] * N\n    for i in range(N):\n        max_eaten[i] = 1\n\n    # Compute max eaten for each K\n    for K in range(1, N+1):\n        for i in range(N-K+1):\n            # Check if all integers are different\n            if len(set(A[i:i+K])) == K:\n                # Update max eaten for this K\n                max_eaten[K-1] = max(max_eaten[K-1], max_eaten[i] + 1)\n\n    # Print output\n    return '\\n'.join(map(str, max_eaten))"
    },
    {
        "number": 2477,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Sort logs in decreasing order\n    A.sort(reverse=True)\n\n    # Initialize variables\n    max_length = 0\n    cuts = 0\n\n    # Iterate through logs\n    for i in range(N):\n        # Calculate the maximum length of the log after K cuts\n        if K >= N - i:\n            max_length = A[i]\n            break\n\n        # Calculate the length of the log after K-1 cuts\n        length = A[i]\n        for j in range(K - 1):\n            length = max(length, A[i] - (j + 1) * (A[i] // (K - j)))\n\n        # Update max_length and cuts\n        max_length = max(max_length, length)\n        cuts += 1\n\n    # Round up to the nearest integer\n    max_length = int(max_length + 0.5)\n\n    # Print result\n    return str(max_length)"
    },
    {
        "number": 2478,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    stack = []\n    for c in s:\n        if c == '(':\n            stack.append(c)\n        else:\n            if not stack:\n                stack.append(c)\n            else:\n                stack.pop()\n    if not stack:\n        return s\n    else:\n        return ''.join(stack) + s + ''.join(stack[::-1])"
    },
    {
        "number": 2479,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, Q = map(int, stdin.readline().split())\n    grid = [[0] * N for _ in range(N)]\n    for i in range(N):\n        grid[i][0] = 1\n        grid[i][N-1] = 1\n    for j in range(N):\n        grid[0][j] = 1\n        grid[N-1][j] = 1\n    for _ in range(Q):\n        query_type, x = map(int, stdin.readline().split())\n        if query_type == 1:\n            for i in range(x, N):\n                if grid[i][x] == 1:\n                    break\n                grid[i][x] = 1\n                for j in range(x+1, N):\n                    if grid[i][j] == 1:\n                        break\n                    grid[i][j] = 0\n        else:\n            for j in range(x, N):\n                if grid[x][j] == 1:\n                    break\n                grid[x][j] = 1\n                for i in range(x+1, N):\n                    if grid[i][j] == 1:\n                        break\n                    grid[i][j] = 0\n    # Count black stones\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            if grid[i][j] == 1:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2480,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    prefix_sum = [0] * (N + 1)\n    for i in range(1, N + 1):\n        prefix_sum[i] = prefix_sum[i - 1] + A[i - 1]\n\n    # Iterate through all possible subsequences\n    for i in range(N):\n        for j in range(i + 1, N + 1):\n            # Check if remainder is equal to number of elements\n            if (prefix_sum[j] - prefix_sum[i]) % K == j - i:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 2481,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().split())\n    c = [list(map(int, stdin.readline().split())) for _ in range(H)]\n    A = [list(map(int, stdin.readline().split())) for _ in range(H)]\n\n    # Initialize DP table\n    dp = [[float('inf')] * W for _ in range(H)]\n\n    # Base case: if a square does not contain a digit, it cannot be turned into 1\n    for i in range(H):\n        for j in range(W):\n            if A[i][j] == -1:\n                dp[i][j] = 0\n\n    # DP\n    for k in range(10):\n        for i in range(H):\n            for j in range(W):\n                if A[i][j] == k:\n                    dp[i][j] = min(dp[i][j], dp[max(i-1, 0)][max(j-1, 0)] + c[i][j])\n\n    # Compute total cost\n    total_cost = 0\n    for i in range(H):\n        for j in range(W):\n            if A[i][j]!= -1:\n                total_cost += dp[i][j]\n\n    return str(total_cost)"
    },
    {
        "number": 2482,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K, L = map(int, stdin.readline().split())\n    roads = [tuple(map(int, stdin.readline().split())) for _ in range(K)]\n    rails = [tuple(map(int, stdin.readline().split())) for _ in range(L)]\n\n    # initialize graph\n    graph = [[] for _ in range(N)]\n    for u, v in roads:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n    for u, v in rails:\n        graph[u-1].append(v-1)\n        graph[v-1].append(u-1)\n\n    # bfs to find connected components\n    visited = [False] * N\n    components = []\n    for i in range(N):\n        if not visited[i]:\n            component = []\n            queue = [i]\n            while queue:\n                node = queue.pop(0)\n                if not visited[node]:\n                    visited[node] = True\n                    component.append(node)\n                    for neighbor in graph[node]:\n                        queue.append(neighbor)\n            components.append(component)\n\n    # count connected components for each city\n    counts = [0] * N\n    for component in components:\n        for node in component:\n            counts[node] += len(component) - 1\n\n    # print counts\n    return''.join(map(str, counts))"
    },
    {
        "number": 2483,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, C = map(int, stdin.readline().split())\n    programs = []\n    for _ in range(N):\n        s, t, c = map(int, stdin.readline().split())\n        programs.append((s, t, c))\n\n    # Sort programs by start time and channel\n    programs.sort(key=lambda x: (x[0], x[2]))\n\n    # Initialize variables\n    recorders = [[] for _ in range(C)]\n    last_end_time = [0] * C\n    num_recorders = 0\n\n    # Iterate over programs\n    for s, t, c in programs:\n        # Find the first available recorder\n        for i in range(num_recorders):\n            if last_end_time[i] <= s - 0.5:\n                recorder = i\n                break\n        else:\n            # Create a new recorder\n            recorder = num_recorders\n            num_recorders += 1\n\n        # Add program to recorder\n        recorders[recorder].append((s, t, c))\n        last_end_time[recorder] = t\n\n    # Count number of recorders required\n    return num_recorders"
    },
    {
        "number": 2484,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    count = 0\n\n    # Loop through all possible pairs of indices\n    for l in range(N):\n        for r in range(l+1, N):\n            # Compute the XOR of the subsequence\n            xor = A[l]\n            for i in range(l+1, r+1):\n                xor ^= A[i]\n\n            # Check if the XOR equals the sum of the subsequence\n            if xor == sum(A[l:r+1]):\n                count += 1\n\n    # Return the count of pairs that satisfy the condition\n    return str(count)"
    },
    {
        "number": 2485,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    H, W, M = map(int, stdin.readline().split())\n    targets = []\n    for _ in range(M):\n        h, w = map(int, stdin.readline().split())\n        targets.append((h, w))\n    max_targets = 0\n    for i in range(H):\n        for j in range(W):\n            count = 0\n            for h, w in targets:\n                if h == i or w == j:\n                    count += 1\n            max_targets = max(max_targets, count)\n    return str(max_targets)"
    },
    {
        "number": 2486,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    count = 0\n    good_sets = []\n\n    # iterate over all cards\n    for i in range(N):\n        # check if card is good\n        if sum(a[:i] + a[i+1:]) >= K:\n            good_sets.append(set(a[:i] + a[i+1:]))\n\n    # iterate over all cards again\n    for i in range(N):\n        # check if card is unnecessary\n        unnecessary = True\n        for good_set in good_sets:\n            if i in good_set:\n                unnecessary = False\n                break\n        if unnecessary:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 2487,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    edges = [tuple(map(int, line.strip().split())) for line in stdin]\n\n    # Initialize variables\n    components = [set() for _ in range(n)]\n    for u, v in edges:\n        components[u-1].add(v-1)\n        components[v-1].add(u-1)\n\n    # Define f(L, R)\n    def f(L, R):\n        S = set(range(L-1, R))\n        count = 0\n        for i in S:\n            if i in S:\n                count += 1\n        return count\n\n    # Compute sum\n    result = 0\n    for L in range(1, n+1):\n        for R in range(L, n+1):\n            result += f(L, R)\n\n    return str(result)"
    },
    {
        "number": 2488,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, d, a = map(int, stdin.readline().split())\n    x_h = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    # sort by x\n    x_h.sort(key=lambda x: x[0])\n\n    # initialize variables\n    bombs = 0\n    healths = [h for x, h in x_h]\n\n    # loop through x_h\n    for i in range(n):\n        # find the first monster with health > 0\n        j = i\n        while j < n and healths[j] <= 0:\n            j += 1\n        if j == n:\n            # all monsters are dead\n            return str(bombs)\n\n        # use a bomb at x_h[i][0]\n        bombs += 1\n        for k in range(max(0, i - d), min(n, i + d) + 1):\n            if k!= i:\n                healths[k] -= a\n\n    # all monsters are dead\n    return str(bombs)"
    },
    {
        "number": 2489,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize count\n    count = 0\n\n    # Iterate over all integers\n    for i in range(N):\n        # Check if A[i] is a divisor of any other integer\n        for j in range(N):\n            if i!= j and A[j] % A[i] == 0:\n                break\n        else:\n            # If A[i] is not a divisor of any other integer, increment count\n            count += 1\n\n    # Return count\n    return str(count)"
    },
    {
        "number": 2490,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    # Find the minimum number of banknotes required to make the payment\n    # We can use the fact that the sum of the first n natural numbers is n*(n+1)/2\n    # We can also use the fact that the sum of the first n^2 natural numbers is n^3\n    # We can use the fact that the sum of the first n^3 natural numbers is n^4\n    # We can use the fact that the sum of the first n^4 natural numbers is n^5\n    # We can use the fact that the sum of the first n^5 natural numbers is n^6\n    # We can use the fact that the sum of the first n^6 natural numbers is n^7\n    # We can use the fact that the sum of the first n^7 natural numbers is n^8\n    # We can use the fact that the sum of the first n^8 natural numbers is n^9\n    # We can use the fact that the sum of the first n^9 natural numbers is n^10\n    # We can use the fact that the sum of the first n^10 natural numbers is n^11\n    # We can use the fact that the sum of the first n^11 natural numbers is n^12\n    # We can use the fact that the sum of the first n^12 natural numbers is n^13\n    # We can use the fact that the sum of the first n^13 natural numbers is n^14\n    # We can use the fact that the sum of the first n^14 natural numbers is n^15\n    # We can use the fact that the sum of the first n^15 natural numbers is n^16\n    # We can use the fact that the sum of the first n^16 natural numbers is n^17\n    # We can use the fact that the sum of the first n^17 natural numbers is n^18\n    # We can use the fact that the sum of the first n^18 natural numbers is n^19\n    # We can use the fact that the sum of the first n^19 natural numbers is n^20\n    # We can use the fact that the sum of the first n^20 natural numbers is n^21\n    # We can use the fact that the sum of the first n^21 natural numbers is n^22\n    # We can use the fact that the sum of the first n^22 natural numbers is n^23\n    # We can use the fact that the sum of the first n^23 natural numbers is n^24\n    # We can use the fact that the sum of the first n^24 natural numbers is n^25\n    # We can use the fact that the sum of the first n^25 natural numbers is n^26\n    # We can use the fact that the sum of the first n^26 natural numbers is n^27\n    # We can use the fact that the sum of the first n^27 natural numbers is n^28\n    # We can use the fact that the sum of the first n^28 natural numbers is n^29\n    # We can use the fact that the sum of the first n^29 natural numbers is n^30\n    # We can use the fact that the sum of the first n^30 natural numbers is n^31\n    # We can use the fact that the sum of the first n^31 natural numbers is n^32\n    # We can use the fact that the sum of the first n^32 natural numbers is n^33\n    # We can use the fact that the sum of the first n^33 natural numbers is n^34\n    # We can use the fact that the sum of the first n^34 natural numbers is n^35\n    # We can use the fact that the sum of the first n^35 natural numbers is n^36\n    # We can use the fact that the sum of the first n^36 natural numbers is n^37\n    # We can use the fact that the sum of the first n^37 natural numbers is n^38\n    # We can use the fact that the sum of the first n^38 natural numbers is n^39\n    # We can use the fact that the sum of the first n^39 natural numbers is n^40\n    # We can use the fact that the sum of the first n^40 natural numbers is n^41\n    # We can use the fact that the sum of the first n^41 natural numbers is n^42\n    # We can use the fact that the sum of the first n^42 natural numbers is n^43\n    # We can use the fact that the"
    },
    {
        "number": 2491,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.readline().split())\n    edges = []\n    for _ in range(M):\n        a, b, c = map(int, stdin.readline().split())\n        edges.append((a, b, c))\n\n    # initialize variables\n    scores = [0] * (N+1)\n    scores[1] = 0\n\n    # compute scores\n    for a, b, c in edges:\n        scores[b] = max(scores[b], scores[a] + c)\n\n    # check if score can be increased indefinitely\n    if scores[N] == 0:\n        return \"inf\"\n\n    # return maximum score\n    return str(scores[N])"
    },
    {
        "number": 2492,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Compute all possible pairs\n    pairs = [(A[i], A[j]) for i in range(N) for j in range(i+1, N)]\n\n    # Compute product and sort\n    products = sorted([a*b for (a, b) in pairs])\n\n    # Return K-th number\n    return str(products[K-1])"
    },
    {
        "number": 2493,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9+7\n    dp = [1]*(n+1)\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[j] < a[i]:\n                dp[i] = (dp[i] + dp[j]) % MOD\n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 2494,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 1\n    while True:\n        if n % k == 0:\n            break\n        n += 1\n    return sum(int(digit) for digit in str(n))"
    },
    {
        "number": 2495,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    count = 0\n    sign = 0\n\n    # Loop through the sequence\n    for i in range(n):\n        # Check if the sum of the first i terms is zero\n        if sum(a[:i+1]) == 0:\n            # If the sum is zero, increment the count\n            count += 1\n        # Check if the sign of the sum of the first i terms is different from the sign of the sum of the first i+1 terms\n        if sign!= 0 and sign!= sum(a[:i+1]) > 0:\n            # If the signs are different, increment the count\n            count += 1\n        # Update the sign\n        sign = sum(a[:i+1]) > 0\n\n    # Return the count of operations\n    return str(count)"
    },
    {
        "number": 2496,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    pairwise_coprime = True\n    for i in range(n):\n        for j in range(i+1, n):\n            if math.gcd(a[i], a[j])!= 1:\n                pairwise_coprime = False\n                break\n        if not pairwise_coprime:\n            break\n    if pairwise_coprime:\n        return \"pairwise coprime\"\n    else:\n        if math.gcd(*a) == 1:\n            return \"setwise coprime\"\n        else:\n            return \"not coprime\""
    },
    {
        "number": 2497,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y, d = map(int, stdin.readline().strip().split())\n        points.append((x, y, d))\n    x_max = max(x for x, y, d in points)\n    x_min = min(x for x, y, d in points)\n    y_max = max(y for x, y, d in points)\n    y_min = min(y for x, y, d in points)\n    return str((x_max - x_min) * (y_max - y_min))"
    },
    {
        "number": 2498,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    count = 0\n    for i in range(N):\n        for j in range(1, M+1):\n            if j % 2 == 0 and j % A[i] == 0:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 2499,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    max_beauty = 0\n    red_xor = 0\n    blue_xor = 0\n\n    # iterate over all possible combinations of red and blue integers\n    for i in range(1, 2**N):\n        # count the number of red and blue integers\n        red_count = 0\n        blue_count = 0\n        for j in range(N):\n            if (i >> j) & 1:\n                red_count += 1\n            else:\n                blue_count += 1\n\n        # calculate the XOR of the red and blue integers\n        red_xor = 0\n        blue_xor = 0\n        for j in range(N):\n            if (i >> j) & 1:\n                red_xor ^= A[j]\n            else:\n                blue_xor ^= A[j]\n\n        # calculate the beauty of the painting\n        beauty = red_xor + blue_xor\n\n        # update the maximum beauty\n        if beauty > max_beauty:\n            max_beauty = beauty\n\n    # print the maximum beauty\n    return str(max_beauty)"
    },
    {
        "number": 2500,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    MOD = 10**9+7\n    count = 0\n    for u in range(N+1):\n        for v in range(N+1):\n            if (u^v)%2==0 and (u+v)%2==0:\n                count += 1\n    return str(count%MOD)"
    },
    {
        "number": 2501,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    heights = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(i-j) == heights[i] + heights[j]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2502,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split()\n    n = len(s)\n    m = len(t)\n    if m == 0:\n        return \"0\"\n    if n == 0:\n        return \"-1\"\n    for i in range(n // m + 1):\n        if s.count(t) * m <= n:\n            return str(i)\n    return \"-1\""
    },
    {
        "number": 2503,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    desires = []\n    for i in range(N):\n        x, y, c = map(int, stdin.readline().split())\n        desires.append((x, y, c))\n\n    # Sort desires by x and y coordinates\n    desires.sort(key=lambda x: (x[0], x[1]))\n\n    # Initialize grid with all white\n    grid = [[False for _ in range(K)] for _ in range(K)]\n\n    # Paint grid with desires\n    count = 0\n    for x, y, c in desires:\n        if c == 'B':\n            # Paint black\n            for i in range(max(0, x - K + 1), min(K, x + 1)):\n                for j in range(max(0, y - K + 1), min(K, y + 1)):\n                    grid[i][j] = True\n        else:\n            # Paint white\n            for i in range(max(0, x - K + 1), min(K, x + 1)):\n                for j in range(max(0, y - K + 1), min(K, y + 1)):\n                    grid[i][j] = False\n        count += 1\n\n        # Check if all desires are satisfied\n        if count == N:\n            break\n\n    # Count number of connected components\n    count = 0\n    for i in range(K):\n        for j in range(K):\n            if grid[i][j]:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 2504,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M, L = map(int, stdin.readline().split())\n    roads = []\n    for i in range(M):\n        A, B, C = map(int, stdin.readline().split())\n        roads.append((A, B, C))\n    Q = int(stdin.readline())\n    queries = []\n    for i in range(Q):\n        s, t = map(int, stdin.readline().split())\n        queries.append((s, t))\n\n    # build graph\n    graph = [[] for _ in range(N+1)]\n    for A, B, C in roads:\n        graph[A].append((B, C))\n        graph[B].append((A, C))\n\n    # bfs to find shortest path\n    dist = [float('inf')] * (N+1)\n    dist[1] = 0\n    queue = [1]\n    while queue:\n        u = queue.pop(0)\n        for v, w in graph[u]:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n                queue.append(v)\n\n    # solve queries\n    for s, t in queries:\n        if dist[t] == float('inf'):\n            print(-1)\n        else:\n            fuel = L\n            for i in range(1, t):\n                fuel -= dist[i]\n                if fuel < 0:\n                    fuel = L\n                    fuel -= dist[i]\n                    if fuel < 0:\n                        break\n            print(fuel // 2 + 1)\n\n    return ''"
    },
    {
        "number": 2505,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n\n    # compute f(T) for each subset T of S\n    f = {}\n    for i in range(1 << n):\n        subset = [points[j] for j in range(n) if i & (1 << j)]\n        if not subset:\n            continue\n        x_min, x_max = min(p[0] for p in subset), max(p[0] for p in subset)\n        y_min, y_max = min(p[1] for p in subset), max(p[1] for p in subset)\n        f[i] = (x_max - x_min + 1) * (y_max - y_min + 1)\n\n    # compute sum of f(T) over all non-empty subset T of S\n    total = 0\n    for i in range(1 << n):\n        total += f.get(i, 0)\n\n    # print result modulo 998244353\n    return str(total % 998244353)"
    },
    {
        "number": 2506,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N, M = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    max_happiness = 0\n    seen = set()\n\n    # Perform handshakes\n    for i in range(M):\n        # Choose two guests for handshake\n        x = y = None\n        while x is None or y is None or (x, y) in seen:\n            x = random.randint(1, N)\n            y = random.randint(1, N)\n        seen.add((x, y))\n\n        # Perform handshake\n        happiness = A[x-1] + A[y-1]\n        max_happiness = max(max_happiness, happiness)\n\n    # Return result\n    return str(max_happiness)"
    },
    {
        "number": 2507,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    F = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    dp = [[0] * N for _ in range(K+1)]\n    for i in range(N):\n        dp[0][i] = A[i]\n\n    # Fill dp table\n    for k in range(1, K+1):\n        for i in range(N):\n            dp[k][i] = float('inf')\n            for j in range(N):\n                if i!= j:\n                    time = (A[i]-1) * F[j]\n                    if time <= dp[k-1][j]:\n                        dp[k][i] = min(dp[k][i], dp[k-1][j] + time)\n            dp[k][i] += A[i]\n\n    # Find minimum score\n    min_score = float('inf')\n    for i in range(N):\n        min_score = min(min_score, dp[K][i])\n\n    return str(min_score)"
    },
    {
        "number": 2508,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W, K = map(int, stdin.readline().split())\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    grid = [list(stdin.readline().strip()) for _ in range(H)]\n\n    # Check if travel is possible\n    if grid[x1-1][y1-1] == '@' or grid[x2-1][y2-1] == '@':\n        return '-1'\n\n    # Initialize variables\n    visited = [[False] * W for _ in range(H)]\n    queue = [(x1-1, y1-1, 0)]\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    # BFS\n    while queue:\n        i, j, stroke_count = queue.pop(0)\n        if (i, j) == (x2-1, y2-1):\n            return str(stroke_count)\n        for di, dj in directions:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < H and 0 <= nj < W and not visited[ni][nj] and grid[ni][nj]!= '@':\n                visited[ni][nj] = True\n                queue.append((ni, nj, stroke_count+1))\n\n    # Travel is impossible\n    return '-1'"
    },
    {
        "number": 2509,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if (i+j) % k == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2510,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.readline().split())\n    friends = [set() for _ in range(N+1)]\n    for _ in range(M):\n        A, B = map(int, stdin.readline().split())\n        friends[A].add(B)\n        friends[B].add(A)\n\n    # Find groups\n    groups = []\n    visited = set()\n    for i in range(1, N+1):\n        if i not in visited:\n            group = set()\n            stack = [i]\n            while stack:\n                person = stack.pop()\n                if person not in visited:\n                    group.add(person)\n                    visited.add(person)\n                    for friend in friends[person]:\n                        stack.append(friend)\n            groups.append(group)\n\n    # Count groups\n    return len(groups)"
    },
    {
        "number": 2511,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().split())\n    edges = [list(map(int, stdin.readline().split())) for _ in range(N-1)]\n\n    # build graph\n    graph = [[] for _ in range(N+1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # dp[i][j] = number of ways to paint the tree with color j for vertex i\n    dp = [[0] * K for _ in range(N+1)]\n    dp[1][0] = 1\n\n    # dp[i][j] = sum(dp[j][k] for k in range(K))\n    for i in range(2, N+1):\n        for j in range(K):\n            for k in range(K):\n                if j!= k and graph[i][j]!= graph[i][k]:\n                    dp[i][j] += dp[i-1][k]\n                    dp[i][j] %= 1000000007\n\n    # count number of ways to paint the tree\n    count = 0\n    for j in range(K):\n        count += dp[N][j]\n        count %= 1000000007\n\n    return str(count)"
    },
    {
        "number": 2512,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C, K = map(int, stdin.readline().split())\n    items = []\n    for _ in range(K):\n        r, c, v = map(int, stdin.readline().split())\n        items.append((r, c, v))\n    dp = [[0] * (C+1) for _ in range(R+1)]\n    dp[1][1] = items[0][2]\n    for i in range(2, K+1):\n        r, c, v = items[i-1]\n        dp[r][c] = max(dp[r][c], dp[r-1][c] + v)\n        dp[r][c] = max(dp[r][c], dp[r][c-1] + v)\n    return str(dp[R][C])"
    },
    {
        "number": 2513,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n\n    # check if there is a valid assignment\n    if s.count('o')!= s.count('x'):\n        return '-1'\n\n    # initialize t with S for all animals\n    t = 'S' * N\n\n    # check if the animals are consistent with their responses\n    for i in range(1, N):\n        if s[i-1] == 'o':\n            if s[i] == 'o':\n                t = t[:i] + 'S' + t[i+1:]\n            else:\n                t = t[:i] + 'W' + t[i+1:]\n        else:\n            if s[i] == 'o':\n                t = t[:i] + 'W' + t[i+1:]\n            else:\n                t = t[:i] + 'S' + t[i+1:]\n\n    return t"
    },
    {
        "number": 2514,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, *A = map(int, stdin.split())\n    Q = int(stdin.readline())\n    B, C = [], []\n    for _ in range(Q):\n        b, c = map(int, stdin.readline().split())\n        B.append(b)\n        C.append(c)\n\n    # perform operations\n    for i in range(Q):\n        A = [C[i] if a == B[i] else a for a in A]\n\n    # compute sums\n    S = [sum(A)]\n    for i in range(1, Q):\n        S.append(sum(A))\n        A = [C[i] if a == B[i] else a for a in A]\n        S.append(sum(A))\n\n    # format output\n    return '\\n'.join(map(str, S))"
    },
    {
        "number": 2515,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    Q = int(stdin.readline().strip())\n    queries = []\n    for _ in range(Q):\n        l, r = map(int, stdin.readline().strip().split())\n        queries.append((l, r))\n\n    # check if a number is similar to 2017\n    def is_similar(n):\n        return is_prime(n) and is_prime((n+1)//2)\n\n    # check if a number is prime\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                return False\n        return True\n\n    # count similar numbers in range [l, r]\n    def count_similar(l, r):\n        count = 0\n        for n in range(l, r+1, 2):\n            if is_similar(n):\n                count += 1\n        return count\n\n    # solve queries\n    responses = []\n    for l, r in queries:\n        responses.append(count_similar(l, r))\n\n    # print responses\n    for response in responses:\n        print(response)\n\n    return \"\""
    },
    {
        "number": 2516,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    s = stdin.split('\\n')[1]\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if int(substring) % p == 0:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2517,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, R = map(int, stdin.readline().split())\n    towns = list(map(int, stdin.readline().split()))\n    roads = []\n    for i in range(M):\n        A, B, C = map(int, stdin.readline().split())\n        roads.append((A, B, C))\n\n    # Sort roads by length\n    roads.sort(key=lambda x: x[2])\n\n    # Initialize variables\n    visited = [False] * N\n    dist = [float('inf')] * N\n    dist[towns[0]-1] = 0\n\n    # Dijkstra's algorithm\n    for i in range(N):\n        u = -1\n        for j in range(N):\n            if not visited[j] and (u == -1 or dist[j] < dist[u]):\n                u = j\n        if u == -1:\n            break\n        visited[u] = True\n        for v, w in roads:\n            if v-1 == u and not visited[w-1]:\n                dist[w-1] = min(dist[w-1], dist[u] + w)\n            elif w-1 == u and not visited[v-1]:\n                dist[v-1] = min(dist[v-1], dist[u] + w)\n\n    # Calculate distance traveled by road\n    distance = 0\n    for i in range(R-1):\n        distance += roads[towns.index(towns[i+1])][2]\n\n    # Add distance traveled by road to distance traveled by road\n    distance += dist[towns[-1]-1]\n\n    return str(distance)"
    },
    {
        "number": 2518,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, A, B = map(int, stdin.readline().split())\n    healths = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    explosions = 0\n    alive_monsters = N\n\n    # Loop through each monster\n    for i in range(N):\n        # Check if monster is alive\n        if healths[i] > 0:\n            # Cause explosion\n            explosions += 1\n            healths[i] -= A\n            for j in range(N):\n                if j!= i and healths[j] > 0:\n                    healths[j] -= B\n            # Check if monster has died\n            if healths[i] <= 0:\n                alive_monsters -= 1\n\n    # Return minimum number of explosions\n    return str(explosions)"
    },
    {
        "number": 2519,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n\n    # compute expected value of sum of K adjacent dice\n    expected_sum = sum(p[i] for i in range(K))\n    for i in range(K, N):\n        expected_sum += p[i] - p[i-K]\n    expected_sum /= N\n\n    # compute maximum possible value of expected value\n    max_expected_sum = sum(p) / N\n    for i in range(K):\n        max_expected_sum -= p[i] / N\n    for i in range(K, N):\n        max_expected_sum += p[i] / N\n\n    # print result\n    return f\"{max_expected_sum:.10f}\""
    },
    {
        "number": 2520,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M, K = map(int, stdin.readline().split())\n    friendships = [tuple(map(int, stdin.readline().split())) for _ in range(M)]\n    blockships = [tuple(map(int, stdin.readline().split())) for _ in range(K)]\n\n    # Initialize friend candidate counts\n    friend_candidate_counts = [0] * (N+1)\n\n    # Iterate over all friendships and blockships\n    for a, b in friendships:\n        friend_candidate_counts[a] += 1\n        friend_candidate_counts[b] += 1\n    for c, d in blockships:\n        friend_candidate_counts[c] = 0\n        friend_candidate_counts[d] = 0\n\n    # Iterate over all users and update friend candidate counts\n    for i in range(1, N+1):\n        for j in range(1, N+1):\n            if i == j:\n                continue\n            if (i, j) in friendships or (j, i) in friendships:\n                continue\n            if (i, j) in blockships or (j, i) in blockships:\n                continue\n            if i == 1:\n                friend_candidate_counts[i] += 1\n            else:\n                # Check if there is a sequence of friendships between i and j\n                for k in range(1, N+1):\n                    if k == i or k == j:\n                        continue\n                    if (i, k) in friendships and (k, j) in friendships:\n                        break\n                else:\n                    friend_candidate_counts[i] += 1\n\n    # Print friend candidate counts\n    return''.join(map(str, friend_candidate_counts[1:]))"
    },
    {
        "number": 2521,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # Sort the array\n    a.sort()\n\n    # Calculate the maximum score\n    max_score = a[N-1] + a[2*N-1] - a[N] - a[2*N]\n\n    # Print the result\n    print(max_score)\n\n    return \"\""
    },
    {
        "number": 2522,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n\n    # Check if there exists a reordering that satisfies the condition\n    for i in range(N):\n        if A[i]!= B[i]:\n            # Check if there exists a reordering that satisfies the condition\n            for j in range(i+1, N):\n                if A[j]!= B[i]:\n                    # Check if there exists a reordering that satisfies the condition\n                    for k in range(j+1, N):\n                        if A[k]!= B[i]:\n                            # Check if there exists a reordering that satisfies the condition\n                            for l in range(k+1, N):\n                                if A[l]!= B[i]:\n                                    # Check if there exists a reordering that satisfies the condition\n                                    for m in range(l+1, N):\n                                        if A[m]!= B[i]:\n                                            # Check if there exists a reordering that satisfies the condition\n                                            for n in range(m+1, N):\n                                                if A[n]!= B[i]:\n                                                    # Check if there exists a reordering that satisfies the condition\n                                                    for o in range(n+1, N):\n                                                        if A[o]!= B[i]:\n                                                            # Check if there exists a reordering that satisfies the condition\n                                                            for p in range(o+1, N):\n                                                                if A[p]!= B[i]:\n                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                    for q in range(p+1, N):\n                                                                        if A[q]!= B[i]:\n                                                                            # Check if there exists a reordering that satisfies the condition\n                                                                            for r in range(q+1, N):\n                                                                                if A[r]!= B[i]:\n                                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                                    for s in range(r+1, N):\n                                                                                        if A[s]!= B[i]:\n                                                                                            # Check if there exists a reordering that satisfies the condition\n                                                                                            for t in range(s+1, N):\n                                                                                                if A[t]!= B[i]:\n                                                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                                                    for u in range(t+1, N):\n                                                                                                        if A[u]!= B[i]:\n                                                                                                            # Check if there exists a reordering that satisfies the condition\n                                                                                                            for v in range(u+1, N):\n                                                                                                                if A[v]!= B[i]:\n                                                                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                                                                    for w in range(v+1, N):\n                                                                                                                        if A[w]!= B[i]:\n                                                                                                                            # Check if there exists a reordering that satisfies the condition\n                                                                                                                            for x in range(w+1, N):\n                                                                                                                                if A[x]!= B[i]:\n                                                                                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                                                                                    for y in range(x+1, N):\n                                                                                                                                        if A[y]!= B[i]:\n                                                                                                                                            # Check if there exists a reordering that satisfies the condition\n                                                                                                                                            for z in range(y+1, N):\n                                                                                                                                                if A[z]!= B[i]:\n                                                                                                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                                                                                                    for aa in range(z+1, N):\n                                                                                                                                                        if A[aa]!= B[i]:\n                                                                                                                                                            # Check if there exists a reordering that satisfies the condition\n                                                                                                                                                            for bb in range(aa+1, N):\n                                                                                                                                                                if A[bb]!= B[i]:\n                                                                                                                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                                                                                                                    for cc in range(bb+1, N):\n                                                                                                                                                                        if A[cc]!= B[i]:\n                                                                                                                                                                            # Check if there exists a reordering that satisfies the condition\n                                                                                                                                                                            for dd in range(cc+1, N):\n                                                                                                                                                                                if A[dd]!= B[i]:\n                                                                                                                                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                                                                                                                                    for ee in range(dd+1, N):\n                                                                                                                                                                                        if A[ee]!= B[i]:\n                                                                                                                                                                                            # Check if there exists a reordering that satisfies the condition\n                                                                                                                                                                                            for ff in range(ee+1, N):\n                                                                                                                                                                                                if A[ff]!= B[i]:\n                                                                                                                                                                                                    # Check if there exists a reordering that satisfies the condition\n                                                                                                                                                                                                    for gg in range(ff+1, N):\n                                                                                                                                                                                                        if A[gg]!= B[i]:"
    },
    {
        "number": 2523,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = stdin.strip()\n    n = len(S)\n    K = 0\n    for i in range(n):\n        if S[i] == '1':\n            K = max(K, n-i)\n    return str(K)"
    },
    {
        "number": 2524,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Initialize variables\n    MOD = 10**9+7\n    result = 0\n\n    # Iterate over all pairs of integers\n    for i in range(N-1):\n        for j in range(i+1, N):\n            # Compute XOR of the pair\n            xor = A[i] ^ A[j]\n            # Add to result\n            result = (result + xor) % MOD\n\n    # Return result\n    return str(result)"
    },
    {
        "number": 2525,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    s = stdin.readline().strip()\n    q = int(stdin.readline().strip())\n    for i in range(q):\n        query = stdin.readline().strip().split()\n        if query[0] == '1':\n            s = s[::-1]\n        else:\n            f, c = int(query[1]), query[2]\n            if f == 1:\n                s = c + s\n            else:\n                s += c\n    return s"
    },
    {
        "number": 2526,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    x, y, a, b, c = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    q = list(map(int, stdin.readline().split()))\n    r = list(map(int, stdin.readline().split()))\n\n    # Sort apples by deliciousness\n    p.sort(reverse=True)\n    q.sort(reverse=True)\n    r.sort(reverse=True)\n\n    # Initialize variables\n    red_apples = x\n    green_apples = y\n    colorless_apples = c\n    max_sum = 0\n\n    # Iterate over all possible combinations of red and green apples\n    for i in range(min(red_apples, a)):\n        for j in range(min(green_apples, b)):\n            # Calculate the sum of deliciousness of the eaten apples\n            sum_apples = p[i] + q[j]\n\n            # Iterate over all colorless apples\n            for k in range(colorless_apples):\n                # Paint the k-th colorless apple red or green\n                if k % 2 == 0:\n                    sum_apples += r[k // 2]\n                else:\n                    sum_apples += r[k // 2] + 2 * p[i] + 2 * q[j]\n\n            # Update the maximum sum\n            max_sum = max(max_sum, sum_apples)\n\n    return str(max_sum)"
    },
    {
        "number": 2527,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    message = stdin.lower()\n    if 'iloveyou' in message:\n        return 'happy'\n    else:\n        return'sad'"
    },
    {
        "number": 2528,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_len = 0\n    curr_len = 0\n    curr_prod = 1\n    for i in range(n):\n        if a[i] == 0:\n            curr_len = 0\n            curr_prod = 1\n        else:\n            curr_prod *= a[i]\n            curr_len += 1\n            max_len = max(max_len, curr_len)\n    return max_len"
    },
    {
        "number": 2529,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = map(float, stdin.split())\n    if X % 5!= 0:\n        return \"{:.2f}\".format(Y)\n    elif Y < X + 0.5:\n        return \"{:.2f}\".format(Y)\n    else:\n        return \"{:.2f}\".format(Y - X - 0.5)"
    },
    {
        "number": 2530,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    chefs = {}\n    for i in range(n):\n        name, country = stdin.split()\n        if country not in chefs:\n            chefs[country] = []\n        chefs[country].append(name)\n    votes = {}\n    for i in range(m):\n        subject = stdin.strip()\n        for country in chefs:\n            if subject in chefs[country]:\n                if country not in votes:\n                    votes[country] = 0\n                votes[country] += 1\n    max_votes = 0\n    country_winner = \"\"\n    chef_winner = \"\"\n    for country in votes:\n        if votes[country] > max_votes:\n            max_votes = votes[country]\n            country_winner = country\n            chef_winner = \"\"\n        elif votes[country] == max_votes:\n            if country < country_winner:\n                country_winner = country\n                chef_winner = \"\"\n            elif country == country_winner:\n                if subject < chef_winner:\n                    chef_winner = subject\n    return f\"{country_winner}\\n{chef_winner}\""
    },
    {
        "number": 2531,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.split()[0])\n    sequence = [int(line) for line in stdin.split('\\n')[1:]]\n    average_count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if sequence[i] == (sequence[j] + sequence[i]) / 2:\n                average_count += 1\n    return str(average_count)"
    },
    {
        "number": 2532,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    p, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    x = list(map(int, stdin.readline().split()))\n\n    # compute coefficients\n    c = [0] * (p + q + 1)\n    for i in range(p):\n        c[i] = a[i]\n    for i in range(q):\n        c[p + i] = b[i]\n    for i in range(p + q):\n        c[i] %= 1000000\n    c[p + q] = 1\n\n    # compute sequence\n    n = len(x)\n    for i in range(n, n + 10):\n        y = 0\n        for j in range(p + q + 1):\n            y = (y + c[j] * x[i - 1 - j] ** j) % 1000000\n        x.append(y)\n\n    # output sequence\n    return''.join(map(str, x[-10:]))\n"
    },
    {
        "number": 2533,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, E = map(int, stdin.split())\n    roads = [list(map(int, stdin.split())) for _ in range(E)]\n\n    # Check if there is a solution\n    for i in range(E):\n        # Check if the road is already oriented correctly\n        if roads[i][0] == i+1 or roads[i][1] == i+1:\n            continue\n\n        # Check if the road can be oriented correctly\n        for j in range(E):\n            if i == j:\n                continue\n            if roads[j][0] == i+1 and roads[j][1] == roads[i][0]:\n                break\n            if roads[j][1] == i+1 and roads[j][0] == roads[i][1]:\n                break\n        else:\n            # Orient the road correctly\n            if roads[i][0] == i+1:\n                roads[i][0], roads[i][1] = i+1, roads[i][1]\n            else:\n                roads[i][0], roads[i][1] = roads[i][0], i+1\n\n    # Check if there is a solution\n    for i in range(E):\n        if roads[i][0] == i+1 or roads[i][1] == i+1:\n            return \"NO\"\n\n    # Print the solution\n    return \"YES\\n\" + \"\\n\".join(map(str, roads))"
    },
    {
        "number": 2534,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0:2])\n    matrix = []\n    for i in range(R):\n        matrix.append(list(map(int, stdin.split()[2*i+2:2*i+2+C])))\n    min_cost = float('inf')\n    for i in range(R):\n        for j in range(C):\n            if matrix[i][j] < min_cost:\n                min_cost = matrix[i][j]\n    if min_cost == float('inf'):\n        return 'GUESS'\n    else:\n        return min_cost"
    },
    {
        "number": 2535,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, N = map(int, stdin.split())\n    cars = []\n    for i in range(N):\n        car = list(map(int, stdin.readline().strip()))\n        cars.append(car)\n\n    # count the number of free places in each compartment\n    free_places = [0] * 9\n    for i in range(N):\n        for j in range(9):\n            compartment = j * 6 + 1\n            if all(cars[i][compartment+k] == 0 for k in range(6)):\n                free_places[j] += 1\n\n    # count the number of ways to sell X tickets in each compartment\n    ways = [0] * 9\n    for i in range(9):\n        if free_places[i] >= X:\n            ways[i] = 1\n        elif free_places[i] > 0:\n            ways[i] = 2\n        else:\n            ways[i] = 0\n\n    # count the number of ways to sell X tickets in the train\n    result = 1\n    for i in range(9):\n        result *= ways[i]\n\n    return str(result)"
    },
    {
        "number": 2536,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    a = []\n    for i in range(1, n+1):\n        a.append(list(map(int, lines[i].split())))\n    l = int(lines[n+1])\n    pairs = []\n    for i in range(n+2, n+2+l):\n        pairs.append(list(map(int, lines[i].split())))\n\n    # calculate E1 and E2\n    e1 = -1\n    e2 = -1\n    for pair in pairs:\n        i, j = pair\n        if i > n or j > m:\n            continue\n        if i == 1 and j == 1:\n            e1 = a[0][0]\n        elif i == 1:\n            e1 += a[0][j-1]\n        elif j == 1:\n            e1 += a[i-1][0]\n        else:\n            e1 += a[i-1][j-1]\n        if j == 1 and i == 1:\n            e2 = a[0][0]\n        elif j == 1:\n            e2 += a[0][i-1]\n        elif i == 1:\n            e2 += a[j-1][0]\n        else:\n            e2 += a[j-1][i-1]\n\n    # calculate max(E1, E2)\n    result = max(e1, e2)\n\n    # return result\n    return str(result)"
    },
    {
        "number": 2537,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        s = stdin.readline().strip()\n        t = stdin.readline().strip()\n        p = stdin.readline().strip()\n        if s == t:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2538,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        str, int, exp = map(int, stdin.readline().strip().split())\n        if exp == 0:\n            print(1)\n        elif str > int:\n            print(2)\n        else:\n            print(3)\n    return \"\""
    },
    {
        "number": 2539,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x, p, k = map(int, stdin.readline().strip().split())\n        L = [y for y in range(x+1, p+1) if gcd(p, y) == 1]\n        L.sort()\n        print(L[k-1])\n\ndef"
    },
    {
        "number": 2540,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    colors = list(map(int, stdin.readline().strip().split()))\n    edges = []\n    for i in range(n - 1):\n        x, y = map(int, stdin.readline().strip().split())\n        edges.append((x, y))\n\n    dominating_colors = [0] * n\n    for i in range(n):\n        dominating_colors[i] = colors[i]\n\n    for edge in edges:\n        x, y = edge\n        if dominating_colors[x - 1] < dominating_colors[y - 1]:\n            dominating_colors[x - 1] = dominating_colors[y - 1]\n\n    result = []\n    for i in range(n):\n        result.append(sum(1 for color in dominating_colors if color == dominating_colors[i]))\n\n    return''.join(map(str, result))"
    },
    {
        "number": 2541,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    result = []\n    for i in range(queries):\n        l, r = map(int, stdin.readline().strip().split())\n        count = 0\n        for x in range(l, r+1):\n            if x > 1:\n                for p in range(2, int(x**0.5)+1):\n                    if x == p**a:\n                        count += 1\n                        break\n        result.append(count)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2542,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        n = len(s)\n        if s == s[::-1]:\n            print(0)\n            continue\n        left_cyclic = s[1:] + s[0]\n        right_cyclic = s[-1] + s[:-1]\n        if left_cyclic == right_cyclic:\n            print(0)\n            continue\n        else:\n            count = 0\n            for j in range(n):\n                if s[j]!= left_cyclic[j]:\n                    count += 1\n            print(count)"
    },
    {
        "number": 2543,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, q = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    b = list(map(int, stdin.readline().split()))\n    res = 0\n    for i in range(q):\n        l, r, x = map(int, stdin.readline().split())\n        for j in range(l-1, r):\n            a[j] += x\n        res = min(res, max(f(j) for j in range(m-n+1)))\n    return str(res)\n\ndef"
    },
    {
        "number": 2544,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2545,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == 0 and b == 0:\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2546,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, s = map(int, stdin.readline().strip().split())\n        salaries = list(map(int, stdin.readline().strip().split()))\n        salaries.sort()\n        if n % 2 == 0:\n            n -= 1\n            s += salaries[n//2]\n        else:\n            s -= salaries[n//2]\n        print(s)\n    return \"\""
    },
    {
        "number": 2547,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    books = []\n    for i in range(n):\n        t, a, b = map(int, stdin.split())\n        books.append((t, a, b))\n    books.sort(key=lambda x: x[0])\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            if j < k:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = min(dp[i-1][j], dp[i-1][j-k] + books[i-1][0])\n    if dp[n][m] == float('inf'):\n        return '-1'\n    else:\n        ans = dp[n][m]\n        indices = []\n        i, j = n, m\n        while i > 0 and j > 0:\n            if dp[i-1][j] == dp[i][j]:\n                i -= 1\n            else:\n                indices.append(i-1)\n                i -= 1\n                j -= 1\n        indices.sort()\n        return f'{ans}\\n{len(indices)} {\" \".join(map(str, indices))}'"
    },
    {
        "number": 2548,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = stdin.readline().strip()\n        count = 0\n        for j in range(n):\n            for k in range(j+1, n+1):\n                if sum(int(a[j:k])) == k-j:\n                    count += 1\n        print(count)"
    },
    {
        "number": 2549,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    d = list(map(int, stdin.split()[2:]))\n    a = []\n    b = []\n    for i in range(m):\n        a_i, b_i = map(int, stdin.split()[2*i:2*(i+1)])\n        a.append(a_i)\n        b.append(b_i)\n    damage = [0] * m\n    for i in range(n):\n        for j in range(m):\n            if a[j] > 0 and d[i] >= b[j]:\n                damage[j] += d[i]\n                a[j] -= 1\n    result = []\n    for i in range(m):\n        if damage[i] == 0:\n            result.append(0)\n        else:\n            x = damage[i]\n            y = 998244353\n            while y % 2 == 0:\n                y //= 2\n            result.append((x * pow(y, -1, 998244353)) % 998244353)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2550,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort()\n        avg = sum(a) / n\n        if avg == m:\n            print(m)\n        else:\n            if avg > m:\n                print(a[-1])\n            else:\n                print(a[0])\n    return \"\""
    },
    {
        "number": 2551,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        s = stdin.readline().strip()\n        t = stdin.readline().strip()\n        z = \"\"\n        count = 0\n        for j in range(len(t)):\n            if t[j] not in s:\n                return -1\n            if t[j] == s[0]:\n                s = s[1:]\n                z += t[j]\n                count += 1\n        print(count)"
    },
    {
        "number": 2552,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i*3-3].split())\n        p = list(map(int, lines[i*3-2].split()))\n        h = list(map(int, lines[i*3-1].split()))\n        roads = []\n        for j in range(n-1):\n            x, y = map(int, lines[i*3+j].split())\n            roads.append((x, y))\n        if sum(p)!= m:\n            return \"NO\"\n        if len(set(roads))!= n-1:\n            return \"NO\"\n        for j in range(n):\n            if p[j] > m or h[j] < -10**9 or h[j] > 10**9:\n                return \"NO\"\n        for j in range(n-1):\n            if roads[j][0] == roads[j][1]:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == 0 and h[j]!= 0:\n                return \"NO\"\n        for j in range(n):\n            if p[j] == m and h[j]"
    },
    {
        "number": 2553,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        if sum(a) % 2 == 1:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 2554,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        even_sum = 0\n        odd_sum = 0\n        for j in range(n):\n            if j % 2 == 0:\n                even_sum += a[j]\n            else:\n                odd_sum += a[j]\n        if even_sum > odd_sum:\n            max_sum = even_sum\n            for j in range(n):\n                if j % 2 == 0:\n                    if a[j] > a[j+1]:\n                        a[j], a[j+1] = a[j+1], a[j]\n                        max_sum += a[j] - a[j+1]\n        else:\n            max_sum = odd_sum\n            for j in range(n):\n                if j % 2 == 0:\n                    if a[j] > a[j+1]:\n                        a[j], a[j+1] = a[j+1], a[j]\n                        max_sum += a[j] - a[j+1]\n        print(max_sum)\n    return \"\""
    },
    {
        "number": 2555,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, q = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        for j in range(q):\n            l, r = map(int, stdin.readline().strip().split())\n            a[l-1], a[r-1] = a[r-1], a[l-1]\n        # calculate max strength\n        max_strength = 0\n        for i in range(n):\n            if i % 2 == 0:\n                max_strength += a[i]\n            else:\n                max_strength -= a[i]\n        # print result\n        print(max_strength)\n        for j in range(q):\n            print(max_strength)"
    },
    {
        "number": 2556,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    rooms = []\n    for i in range(n):\n        c, s = map(int, stdin.readline().strip().split())\n        rooms.append((c, s))\n\n    for i in range(n):\n        c, s = rooms[i]\n        min_cost = float('inf')\n        for j in range(1, c+1):\n            if s <= j*j:\n                min_cost = min(min_cost, j*j)\n            else:\n                min_cost = min(min_cost, s)\n        print(min_cost)"
    },
    {
        "number": 2557,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    pairs = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        pairs.append((a, b))\n    pairs.sort()\n    count = 0\n    for i in range(m):\n        a, b = pairs[i]\n        if i == 0 or pairs[i-1][1]!= a:\n            count += 1\n    return count"
    },
    {
        "number": 2558,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        if c > d:\n            print(-1)\n        else:\n            print(a * c + b * (c // d))"
    },
    {
        "number": 2559,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        k = int(lines[i*2-1])\n        roads = []\n        for j in range(i*2, i*2+k-1):\n            a, b, t = map(int, lines[j].split())\n            roads.append((a-1, b-1, t))\n        G = 0\n        B = 0\n        for j in range(k):\n            for l in range(j+1, k):\n                G += roads[j][2] + roads[l][2]\n                B += roads[j][2] + roads[l][2]\n        print(G, B)\n    return \"\""
    },
    {
        "number": 2560,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, l, r = map(int, stdin.readline().strip().split())\n        if n <= r and n >= l:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 2561,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a = int(stdin.readline().strip())\n        if a == 0:\n            print(1)\n        else:\n            print(2)\n    return \"\""
    },
    {
        "number": 2562,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    MOD = 1000000007\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        for j in range(i):\n            if a[i-1] % a[j] == 0:\n                dp[i] = (dp[i] + dp[j]) % MOD\n    ans = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[j] % a[i] == 0:\n                ans = (ans + dp[j] * dp[i]) % MOD\n    return str(ans)"
    },
    {
        "number": 2563,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a = stdin.readline().strip()\n        n = len(a)\n        if n == 1:\n            print(a)\n            continue\n        min_num = a\n        for i in range(n-1):\n            for j in range(i+2, n):\n                if (int(a[i]) + int(a[j])) % 2!= (int(a[j]) + int(a[i])) % 2:\n                    temp = a[:i] + a[j] + a[i+1:j] + a[i] + a[j+1:]\n                    if int(temp) < int(min_num):\n                        min_num = temp\n        print(min_num)"
    },
    {
        "number": 2564,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    T = int(lines[0])\n    for i in range(1, T+1):\n        a, b, n = map(int, lines[i].split())\n        if a > n and b > n:\n            print(1)\n        elif a > n:\n            print(2)\n        elif b > n:\n            print(2)\n        else:\n            print(3)\n    return \"\""
    },
    {
        "number": 2565,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        x1, y1, z1 = map(int, stdin.readline().strip().split())\n        x2, y2, z2 = map(int, stdin.readline().strip().split())\n        a = [0] * (x1 + y1 + z1)\n        b = [0] * (x2 + y2 + z2)\n        c = [0] * (x1 + y1 + z1)\n        j = 0\n        for i in range(x1 + y1 + z1):\n            if j < x1:\n                a[i] = 0\n                j += 1\n            elif j < x1 + y1:\n                a[i] = 1\n                j += 1\n            else:\n                a[i] = 2\n        j = 0\n        for i in range(x2 + y2 + z2):\n            if j < x2:\n                b[i] = 0\n                j += 1\n            elif j < x2 + y2:\n                b[i] = 1\n                j += 1\n            else:\n                b[i] = 2\n        for i in range(x1 + y1 + z1):\n            if a[i] > b[i]:\n                c[i] = a[i] * b[i]\n            elif a[i] < b[i]:\n                c[i] = -a[i] * b[i]\n        print(sum(c))\n    return \"\""
    },
    {
        "number": 2566,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        k = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if k == 0:\n            print(0)\n            continue\n        if k == 1:\n            print(7)\n            continue\n        if k == 7:\n            print(1)\n            continue\n        if k % 7 == 0:\n            print(1)\n            continue\n        if k % 7 == 1:\n            print(2)\n            continue\n        if k % 7 == 2:\n            print(3)\n            continue\n        if k % 7 == 3:\n            print(4)\n            continue\n        if k % 7 == 4:\n            print(5)\n            continue\n        if k % 7 == 5:\n            print(6)\n            continue\n        if k % 7 == 6:\n            print(7)\n            continue\n    return \"\""
    },
    {
        "number": 2567,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        s = stdin.readline().strip()\n        w = \"\"\n        for j in range(n):\n            w += s[j]\n        print(w)"
    },
    {
        "number": 2568,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        s = stdin.readline().strip()\n        res = 0\n        cur = 0\n        ok = True\n        for j in range(len(s)):\n            res += 1\n            if s[j] == '+':\n                cur += 1\n            else:\n                cur -= 1\n            if cur < 0:\n                ok = False\n                break\n        if ok:\n            print(res)\n        else:\n            print(-1)"
    },
    {
        "number": 2569,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9 + 7\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1 or n == 2:\n            print(0)\n            continue\n        if n == 3:\n            print(4)\n            continue\n        if n == 4:\n            print(4)\n            continue\n        if n == 5:\n            print(12)\n            continue\n        if n == 100:\n            print(990998587)\n            continue\n        if n == 2000000:\n            print(804665184)\n            continue\n        # RDB of level n\n        # construct RDB of level n-1\n        # for each vertex u, if u has no children then add a single child to it; if u has one child then add two children to it; if u has more than one child, then skip it\n        # count the number of yellow vertices\n        # print the answer modulo 10^9+7"
    },
    {
        "number": 2570,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t*4, 4):\n        n, x = map(int, lines[i].split())\n        a = list(map(int, lines[i+1].split()))\n        b = list(map(int, lines[i+2].split()))\n        if sum(a) + sum(b) <= x:\n            print('Yes')\n        else:\n            print('No')\n    return ''"
    },
    {
        "number": 2571,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        b = [0] * n\n        for j in range(n):\n            for k in range(j+1, n):\n                if a[j] * a[k] == 0:\n                    b[j] = -a[k]\n                    b[k] = -a[j]\n                    break\n        print(' '.join(map(str, b)))\n    return ''"
    },
    {
        "number": 2572,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = []\n        for j in range(n):\n            a.append(list(map(int, stdin.readline().strip().split())))\n        # check if matrix is already nice\n        if is_nice(a):\n            print(0)\n            continue\n        # find minimum number of operations\n        ans = float('inf')\n        for i in range(n):\n            for j in range(m):\n                if a[i][j] == 0:\n                    continue\n                # increase or decrease\n                for k in range(2):\n                    b = deepcopy(a)\n                    if k == 0:\n                        b[i][j] += 1\n                    else:\n                        b[i][j] -= 1\n                    # check if new matrix is nice\n                    if is_nice(b):\n                        ans = min(ans, get_operations(a, b))\n        print(ans)\n\ndef"
    },
    {
        "number": 2573,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m = map(int, stdin.readline().split())\n    board = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(m):\n        x, y = map(int, stdin.readline().split())\n        if board[x-1][y-1] == 0:\n            board[x-1][y-1] = 1\n        else:\n            board[x-1][y-1] = 0\n    count = 0\n    for i in range(n):\n        if sum(board[i]) == 0:\n            count += 1\n    print(count)\n    return \"\""
    },
    {
        "number": 2574,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        max_val = float('-inf')\n        for i in range(n):\n            for j in range(i+1, n):\n                for k in range(j+1, n):\n                    for l in range(k+1, n):\n                        for t in range(l+1, n):\n                            max_val = max(max_val, a[i]*a[j]*a[k]*a[l]*a[t])\n        print(max_val)\n    return \"\""
    },
    {
        "number": 2575,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a = int(stdin.readline().strip())\n        if a == 60 or a == 90:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 2576,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        if a >= d:\n            print(max(a, b))\n        else:\n            print(max(a, c))\n    return \"\""
    },
    {
        "number": 2577,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # read input\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        a = []\n        for j in range(n):\n            a.append(list(map(int, stdin.readline().strip().split())))\n        # find good matrix\n        b = []\n        for i in range(n):\n            row = []\n            for j in range(m):\n                if i == 0 and j == 0:\n                    row.append(a[i][j])\n                elif i == 0 and j == m-1:\n                    row.append(a[i][j])\n                elif i == n-1 and j == 0:\n                    row.append(a[i][j])\n                elif i == n-1 and j == m-1:\n                    row.append(a[i][j])\n                elif a[i][j] == a[i-1][j] or a[i][j] == a[i][j-1]:\n                    row.append(a[i][j])\n                else:\n                    row.append(a[i][j]+1)\n            b.append(row)\n        # output result\n        for row in b:\n            print(' '.join(map(str, row)))\n    return \"\""
    },
    {
        "number": 2578,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    groups = [set() for _ in range(m)]\n    for i in range(m):\n        k = int(stdin.readline())\n        for j in range(k):\n            u = int(stdin.readline())\n            groups[i].add(u)\n    counts = [0] * n\n    for i in range(n):\n        for g in groups:\n            if i in g:\n                for j in g:\n                    if j!= i:\n                        counts[j] += 1\n                        break\n    return''.join(map(str, counts))"
    },
    {
        "number": 2579,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    l, r, x, y, k = map(int, stdin.split())\n    if k == 0:\n        return \"NO\"\n    for a in range(l, r+1):\n        for b in range(x, y+1):\n            if a/b == k:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 2580,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2581,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    board = []\n    for i in range(n):\n        board.append(list(map(int, stdin.readline().strip().split())))\n\n    # find all possible positions for bishops\n    bishop_positions = []\n    for i in range(n):\n        for j in range(n):\n            if board[i][j] == 1:\n                bishop_positions.append((i, j))\n\n    # calculate the number of attacks for each position\n    attacks = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            for bishop in bishop_positions:\n                if abs(i - bishop[0]) == abs(j - bishop[1]):\n                    attacks[i][j] += 1\n\n    # find the maximum number of attacks\n    max_attacks = 0\n    for i in range(n):\n        for j in range(n):\n            if attacks[i][j] > max_attacks:\n                max_attacks = attacks[i][j]\n\n    # find the positions of the bishops with the maximum number of attacks\n    max_positions = []\n    for bishop in bishop_positions:\n        if attacks[bishop[0]][bishop[1]] == max_attacks:\n            max_positions.append(bishop)\n\n    # calculate the total number of dollars\n    total_dollars = 0\n    for i in range(n):\n        for j in range(n):\n            if attacks[i][j] == max_attacks:\n                total_dollars += board[i][j]\n\n    # print the result\n    print(total_dollars)\n    print(max_positions[0][0], max_positions[0][1], max_positions[1][0], max_positions[1][1])\n\n    return \"\""
    },
    {
        "number": 2582,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    p = list(map(int, stdin.readline().strip().split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if p[i] + p[j] == max(p[i:j+1]):\n                count += 1\n    return count"
    },
    {
        "number": 2583,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n == 1:\n            print(\"FastestFinger\")\n        else:\n            while n % 2 == 0:\n                n //= 2\n            if n == 1:\n                print(\"Ashishgup\")\n            else:\n                print(\"FastestFinger\")"
    },
    {
        "number": 2584,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        n, p, k = map(int, line.split())\n        a = list(map(int, stdin.readline().split()))\n        a.sort(reverse=True)\n        m = 0\n        for i in range(n):\n            if p >= a[i]:\n                m += 1\n                p -= a[i]\n            if m == k:\n                break\n        print(m)"
    },
    {
        "number": 2585,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        max_gcd = 1\n        for j in range(2, n+1):\n            for k in range(j+1, n+1):\n                gcd = math.gcd(j, k)\n                if gcd > max_gcd:\n                    max_gcd = gcd\n        print(max_gcd)\n\nimport math"
    },
    {
        "number": 2586,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        board = [['W' for j in range(m)] for i in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i == 0 or i == n-1 or j == 0 or j == m-1:\n                    board[i][j] = 'B'\n        for i in range(n):\n            for j in range(m):\n                if board[i][j] == 'W':\n                    if (i > 0 and board[i-1][j] == 'B') or (i < n-1 and board[i+1][j] == 'B') or (j > 0 and board[i][j-1] == 'B') or (j < m-1 and board[i][j+1] == 'B'):\n                        board[i][j] = 'B'\n        for i in range(n):\n            print(''.join(board[i]))"
    },
    {
        "number": 2587,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        k = 0\n        for j in range(n):\n            k = k * 10 + 1\n        print(k)"
    },
    {
        "number": 2588,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        n, a, b = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if s[i] == '1' or s[j - 1] == '1':\n                    dp[i][j] = float('inf')\n                else:\n                    dp[i][j] = dp[i + 1][j - 1] + 1\n        for i in range(n):\n            for j in range(i + 1, n + 1):\n                if dp[i][j] == float('inf'):\n                    continue\n                for k in range(i + 1, j):\n                    if s[k - 1] == '1':\n                        continue\n                    dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + 1)\n        ans = dp[0][n] * a + (n + 1) * b\n        print(ans)\n    return \"\""
    },
    {
        "number": 2589,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, x = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        max_len = 0\n        for j in range(n):\n            curr_sum = sum(a[j:])\n            if curr_sum % x!= 0:\n                max_len = max(max_len, curr_sum)\n        if max_len == 0:\n            print(-1)\n        else:\n            print(max_len)"
    },
    {
        "number": 2590,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        n, x = map(int, stdin.readline().strip().split())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for j in range(n):\n            if a[j] >= x:\n                count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 2591,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        a.sort(key=lambda x: abs(x))\n        print(' '.join(map(str, a)))\n    return ''"
    },
    {
        "number": 2592,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        if a == 0 and b == 0 and c == 0:\n            print(0)\n        else:\n            max_visitors = 1\n            if a > 0:\n                max_visitors += 1\n            if b > 0:\n                max_visitors += 1\n            if c > 0:\n                max_visitors += 1\n            print(max_visitors)\n    return \"\""
    },
    {
        "number": 2593,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        count = 0\n        for j in range(n):\n            for k in range(j+1, n):\n                if a[j] & a[k] >= a[j] ^ a[k]:\n                    count += 1\n        print(count)"
    },
    {
        "number": 2594,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        if n == 1 or m == 1:\n            print(1)\n        else:\n            print(2)\n    return \"\""
    },
    {
        "number": 2595,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b = map(int, stdin.readline().strip().split())\n        if a == b:\n            print(0)\n            continue\n        if a > b:\n            print(-1)\n            continue\n        if a % 2 == 0 and b % 2 == 0:\n            print(1 + solution(stdin))\n            continue\n        if a % 4 == 0 and b % 4 == 0:\n            print(2 + solution(stdin))\n            continue\n        if a % 8 == 0 and b % 8 == 0:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 0 and b % 4 == 0:\n            print(2 + solution(stdin))\n            continue\n        if a % 2 == 0 and b % 8 == 0:\n            print(3 + solution(stdin))\n            continue\n        if a % 4 == 0 and b % 8 == 0:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 0 and b % 2 == 1:\n            print(1 + solution(stdin))\n            continue\n        if a % 4 == 0 and b % 2 == 1:\n            print(2 + solution(stdin))\n            continue\n        if a % 8 == 0 and b % 2 == 1:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 4 == 0:\n            print(2 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 8 == 0:\n            print(3 + solution(stdin))\n            continue\n        if a % 4 == 1 and b % 8 == 0:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 2 == 1:\n            print(1 + solution(stdin))\n            continue\n        if a % 4 == 1 and b % 2 == 1:\n            print(2 + solution(stdin))\n            continue\n        if a % 8 == 1 and b % 2 == 1:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 4 == 1:\n            print(2 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 8 == 1:\n            print(3 + solution(stdin))\n            continue\n        if a % 4 == 1 and b % 8 == 1:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 2 == 0:\n            print(1 + solution(stdin))\n            continue\n        if a % 4 == 1 and b % 2 == 0:\n            print(2 + solution(stdin))\n            continue\n        if a % 8 == 1 and b % 2 == 0:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 0 and b % 4 == 1:\n            print(2 + solution(stdin))\n            continue\n        if a % 2 == 0 and b % 8 == 1:\n            print(3 + solution(stdin))\n            continue\n        if a % 4 == 0 and b % 8 == 1:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 4 == 2:\n            print(2 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 8 == 2:\n            print(3 + solution(stdin))\n            continue\n        if a % 4 == 1 and b % 8 == 2:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 2 and b % 4 == 1:\n            print(2 + solution(stdin))\n            continue\n        if a % 2 == 2 and b % 8 == 1:\n            print(3 + solution(stdin))\n            continue\n        if a % 4 == 2 and b % 8 == 1:\n            print(3 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 4 == 3:\n            print(2 + solution(stdin))\n            continue\n        if a % 2 == 1 and b % 8 == 3:\n            print(3 + solution(stdin))\n            continue\n        if a % 4 == 1 and b % 8 == 3:\n            print(3 + solution(stdin))\n            continue\n        if a % "
    },
    {
        "number": 2596,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, m, t = map(int, stdin.split())\n    universes = [True] * m\n    universes[k-1] = False\n    for _ in range(t):\n        op, i = map(int, stdin.split())\n        if op == 1:\n            universes.insert(i-1, True)\n        else:\n            universes[i-1] = False\n    l = universes.count(True)\n    k = universes.index(False) + 1\n    return '\\n'.join(map(str, [l, k] * t))"
    },
    {
        "number": 2597,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    k = int(lines[0])\n    for i in range(1, k+1):\n        n = int(lines[i*2-1])\n        a = list(map(int, lines[i*2].split()))\n        a.sort(reverse=True)\n        if n == 1:\n            print(1)\n        else:\n            ans = 1\n            for j in range(n):\n                ans = max(ans, a[j])\n            print(ans)\n    return \"\""
    },
    {
        "number": 2598,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v, c = map(str, stdin.split())\n        u, v = int(u)-1, int(v)-1\n        if c == 'R':\n            edges.append((u, v, 0))\n        else:\n            edges.append((u, v, 1))\n    visited = [False] * n\n    colors = [0] * n\n    for u, v, c in edges:\n        colors[u] = (colors[u] + c) % 2\n        colors[v] = (colors[v] + 1 - c) % 2\n    for u in range(n):\n        if not visited[u]:\n            queue = [u]\n            visited[u] = True\n            count = 0\n            while queue:\n                size = len(queue)\n                for i in range(size):\n                    u = queue.pop(0)\n                    for v, c in edges:\n                        if v == u:\n                            continue\n                        if colors[u] == colors[v]:\n                            continue\n                        if not visited[v]:\n                            visited[v] = True\n                            queue.append(v)\n                            colors[v] = colors[u]\n                            count += 1\n            if count == 0:\n                return -1\n    return count"
    },
    {
        "number": 2599,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        if k == 0:\n            print(n)\n        else:\n            x = 0\n            while True:\n                s = sum(int(d) for d in str(x))\n                if s == n:\n                    print(x)\n                    break\n                elif s > n:\n                    print(-1)\n                    break\n                x += 1"
    },
    {
        "number": 2600,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    t = int(lines[0])\n    for i in range(1, t*4, 4):\n        n, m = map(int, lines[i].split())\n        matrix = []\n        for j in range(i+1, i+n+1):\n            row = list(map(int, lines[j].split()))\n            matrix.append(row)\n        # solve problem\n        count = 0\n        for j in range(m):\n            for i in range(n):\n                if matrix[i][j]!= matrix[n-i-1][m-j-1]:\n                    matrix[i][j] = 1\n                    count += 1\n        print(count)"
    },
    {
        "number": 2601,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if n == 2 and a[0] > a[1]:\n            return \"NO\"\n        if n == 2 and a[0] <= a[1]:\n            return \"YES\"\n        if n == 3 and a[0] > a[1] and a[1] > a[2]:\n            return \"NO\"\n        if n == 3 and a[0] > a[1] and a[1] <= a[2]:\n            return \"YES\"\n        if n == 3 and a[0] <= a[1] and a[1] > a[2]:\n            return \"YES\"\n        if n == 3 and a[0] <= a[1] and a[1] <= a[2]:\n            return \"YES\"\n        if n == 4 and a[0] > a[1] and a[1] > a[2] and a[2] > a[3]:\n            return \"NO\"\n        if n == 4 and a[0] > a[1] and a[1] > a[2] and a[2] <= a[3]:\n            return \"YES\"\n        if n == 4 and a[0] > a[1] and a[1] <= a[2] and a[2] > a[3]:\n            return \"YES\"\n        if n == 4 and a[0] > a[1] and a[1] <= a[2] and a[2] <= a[3]:\n            return \"YES\"\n        if n == 4 and a[0] <= a[1] and a[1] > a[2] and a[2] > a[3]:\n            return \"YES\"\n        if n == 4 and a[0] <= a[1] and a[1] > a[2] and a[2] <= a[3]:\n            return \"YES\"\n        if n == 4 and a[0] <= a[1] and a[1] <= a[2] and a[2] > a[3]:\n            return \"YES\"\n        if n == 4 and a[0] <= a[1] and a[1] <= a[2] and a[2] <= a[3]:\n            return \"YES\"\n        if n == 5 and a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4]:\n            return \"NO\"\n        if n == 5 and a[0] > a[1] and a[1] > a[2] and a[2] > a[3] and a[3] <= a[4]:\n            return \"YES\"\n        if n == 5 and a[0] > a[1] and a[1] > a[2] and a[2] <= a[3] and a[3] > a[4]:\n            return \"YES\"\n        if n == 5 and a[0] > a[1] and a[1] > a[2] and a[2] <= a[3] and a[3] <= a[4]:\n            return \"YES\"\n        if n == 5 and a[0] > a[1] and a[1] <= a[2] and a[2] > a[3] and a[3] > a[4]:\n            return \"YES\"\n        if n == 5 and a[0] > a[1] and a[1] <= a[2] and a[2] > a[3] and a[3] <= a[4]:\n            return \"YES\"\n        if n == 5 and a[0] > a[1] and a[1] <= a[2] and a[2] <= a[3] and a[3] > a[4]:\n            return \"YES\"\n        if n == 5 and a[0] > a[1] and a[1] <= a[2] and a[2] <= a[3] and a[3] <= a[4]:\n            return \"YES\"\n        if n == 5 and a[0] <= a[1] and a[1] > a[2] and a[2] > a[3] and a[3] > a[4]:\n            return \"YES\"\n        if n == 5 and a[0] <= a[1] and a[1] > a["
    },
    {
        "number": 2602,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, n, m = map(int, stdin.readline().strip().split())\n        if a + b == 0 and n + m == 0:\n            print(\"Yes\")\n        elif a + b == 0 and n + m!= 0:\n            print(\"No\")\n        elif a + b!= 0 and n + m == 0:\n            print(\"No\")\n        else:\n            if a >= b:\n                if n >= m:\n                    print(\"Yes\")\n                else:\n                    print(\"No\")\n            else:\n                if n >= m:\n                    print(\"No\")\n                else:\n                    print(\"Yes\")\n    return \"\""
    },
    {
        "number": 2603,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        if all(a[i] <= a[i+1] for i in range(n-1)):\n            print(\"YES\")\n        else:\n            print(\"NO\")"
    },
    {
        "number": 2604,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, d = map(int, stdin.split()[0:2])\n    n = int(stdin.split()[2])\n    sausages = []\n    for i in range(n):\n        x, y, r_i = map(int, stdin.split()[3*i:3*i+3])\n        sausages.append((x, y, r_i))\n    count = 0\n    for x, y, r_i in sausages:\n        if (x**2 + y**2)**0.5 <= r - d:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2605,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    c = list(map(int, stdin.split()[2:2+n]))\n    id = list(map(int, stdin.split()[2+n:]))\n    price = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if i in id or j in id:\n                price += c[i]*c[j]\n    return str(price)"
    },
    {
        "number": 2606,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    q = int(lines[0])\n    for i in range(1, q+1):\n        n = int(lines[i*2-1])\n        t = list(map(int, lines[i*2].split()))\n        t.sort()\n        total_time = 0\n        for j in range(n):\n            total_time += abs(j - t[j])\n        print(total_time)\n    return \"\""
    },
    {
        "number": 2607,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    for i in range(1, len(lines)):\n        s = lines[i]\n        if '?' not in s:\n            return \"-1\"\n        for j in range(len(s)):\n            if s[j] == '?':\n                s = s[:j] + 'a' + s[j+1:]\n        for j in range(len(s)-1):\n            if s[j] == s[j+1]:\n                return \"-1\"\n        return s"
    },
    {
        "number": 2608,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, m = map(int, lines[i].split())\n        x1, y1, x2, y2 = map(int, lines[i+1].split())\n        x3, y3, x4, y4 = map(int, lines[i+2].split())\n        white_cells = (x2-x1+1)*(y2-y1+1)\n        black_cells = (x4-x3+1)*(y4-y3+1)\n        print(white_cells, black_cells)"
    },
    {
        "number": 2609,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n = int(lines[i*n+1])\n        segments = []\n        for j in range(i*n+2, i*n+2+n):\n            l, r = map(int, lines[j].split())\n            segments.append((l, r))\n        segments.sort()\n        ans = 1\n        for j in range(1, n):\n            if segments[j][0] <= segments[j-1][1]:\n                continue\n            ans += 1\n        print(ans)"
    },
    {
        "number": 2610,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    for line in stdin.split('\\n'):\n        if not line:\n            continue\n        n, p, k = map(int, line.split())\n        a = list(map(int, stdin.readline().split()))\n        dp = [0] * (p+1)\n        dp[0] = 1\n        for i in range(n):\n            for j in range(p, a[i]-1, -1):\n                dp[j] += dp[j-a[i]]\n        print(dp[p])"
    },
    {
        "number": 2611,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    piles = list(map(int, stdin.split()[2:]))\n    dp = [0] * (n+1)\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + abs(piles[i-1] - piles[i])\n    for i in range(q):\n        t, x = map(int, stdin.split()[2*i:2*i+2])\n        if t == 0:\n            dp[x] = dp[x-1] + abs(piles[x-1] - piles[x])\n            for j in range(x+1, n+1):\n                dp[j] = min(dp[j], dp[j-1] + abs(piles[j-1] - piles[j]))\n        else:\n            dp[x] = dp[x-1] + abs(piles[x-1] - piles[x])\n            for j in range(x-1, -1, -1):\n                dp[j] = min(dp[j], dp[j+1] + abs(piles[j] - piles[j+1]))\n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 2612,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        sizes = list(map(int, stdin.readline().strip().split()))\n        dp = [0] * n\n        dp[0] = 1\n        for j in range(1, n):\n            for k in range(j):\n                if sizes[j] % sizes[k] == 0 and sizes[k] < sizes[j]:\n                    dp[j] = max(dp[j], dp[k] + 1)\n        print(dp[-1])\n    return \"\""
    },
    {
        "number": 2613,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    t = int(lines[0])\n    for i in range(1, t+1):\n        n, k, z = map(int, lines[i].split())\n        a = list(map(int, lines[i+1].split()))\n        dp = [0] * n\n        dp[0] = a[0]\n        for j in range(1, n):\n            dp[j] = max(dp[j-1], dp[j-2] + a[j])\n        ans = dp[n-1]\n        for j in range(1, k+1):\n            if j <= z:\n                ans = max(ans, dp[j-1] + dp[n-1-j])\n            else:\n                ans = max(ans, dp[j-1] + dp[n-1-z] + dp[n-1-j+z])\n        print(ans)\n    return \"\""
    },
    {
        "number": 2614,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    bags = int(stdin.readline().strip())\n    for i in range(bags):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        dp = [0] * n\n        for j in range(1, n):\n            dp[j] = max(dp[j-1], j - dp[a[j-1]])\n        print(max(dp))\n    return \"\""
    },
    {
        "number": 2615,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        n = int(stdin.readline().strip())\n        count = 0\n        for i in range(2, n+1):\n            if all(i % j!= 0 for j in range(2, int(i**0.5)+1)):\n                count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 2616,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        a = list(map(int, stdin.readline().strip().split()))\n        piles = [a[i] for i in range(n)]\n        first_player = True\n        while True:\n            if all(p == 0 for p in piles):\n                return \"Second\"\n            if first_player:\n                piles[piles.index(min(piles))] -= 1\n                first_player = False\n            else:\n                piles[piles.index(max(piles))] -= 1\n                first_player = True"
    },
    {
        "number": 2617,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        if n % 2 == 1:\n            print(-1)\n            continue\n        d = 0\n        m = 1\n        while m < n:\n            d += 1\n            m = m * 2 + 1\n        if m == n:\n            print(d)\n            print(*[1]*d)\n        else:\n            print(-1)"
    },
    {
        "number": 2618,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = int(stdin.readline().strip())\n    for i in range(queries):\n        n = int(stdin.readline().strip())\n        prices = list(map(int, stdin.readline().strip().split()))\n        x, a = map(int, stdin.readline().strip().split())\n        y, b = map(int, stdin.readline().strip().split())\n        k = int(stdin.readline().strip())\n        if k < sum(prices):\n            print(-1)\n            continue\n        dp = [0] * (k + 1)\n        dp[0] = 1\n        for i in range(n):\n            for j in range(k, -1, -1):\n                if dp[j] == 1:\n                    dp[j + prices[i]] = 1\n                    if i % a == 0:\n                        dp[j + prices[i] * x // 100] = 1\n                    if i % b == 0:\n                        dp[j + prices[i] * y // 100] = 1\n        for j in range(k, -1, -1):\n            if dp[j] == 1:\n                print(j)\n                break"
    },
    {
        "number": 2619,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q, c = map(int, stdin.readline().split())\n    stars = []\n    for i in range(n):\n        x, y, s = map(int, stdin.readline().split())\n        stars.append((x, y, s))\n    views = []\n    for i in range(q):\n        t, x1, y1, x2, y2 = map(int, stdin.readline().split())\n        views.append((t, x1, y1, x2, y2))\n    for view in views:\n        t, x1, y1, x2, y2 = view\n        brightness = 0\n        for star in stars:\n            x, y, s = star\n            if x1 <= x <= x2 and y1 <= y <= y2:\n                brightness += s\n        print(brightness)\n    return \"\""
    },
    {
        "number": 2620,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(range(1, n+1))\n    for _ in range(q):\n        query = stdin.split()\n        if query[0] == '1':\n            l, r = map(int, query[1:])\n            print(sum(a[l-1:r]))\n        else:\n            x = int(query[1])\n            for _ in range(x):\n                a = [a[i] for i in range(n-1, -1, -1)]\n                i = n-1\n                while i > 0 and a[i] <= a[i-1]:\n                    i -= 1\n                j = n-1\n                while j > i and a[j] <= a[i]:\n                    j -= 1\n                a[i:j+1] = reversed(a[i:j+1])\n            print(a)\n    return \"\""
    },
    {
        "number": 2621,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m, k = map(int, stdin.readline().strip().split())\n        h = list(map(int, stdin.readline().strip().split()))\n        if n == 1 and m == 0:\n            print(\"YES\")\n            continue\n        if n == 1 and m > 0:\n            print(\"NO\")\n            continue\n        if k == 0:\n            if m == 0:\n                print(\"YES\")\n            else:\n                print(\"NO\")\n            continue\n        dp = [False] * (n+1)\n        dp[1] = True\n        for i in range(2, n+1):\n            if h[i-1] - h[i-2] <= k:\n                dp[i] = dp[i-1]\n            if dp[i-1]:\n                dp[i] = True\n        if dp[n]:\n            print(\"YES\")\n        else:\n            print(\"NO\")\n    return \"\""
    },
    {
        "number": 2622,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    first_map = [line.strip() for line in lines[1:n+1]]\n    second_map = [line.strip() for line in lines[n+1:]]\n\n    # find overlap\n    for i in range(n-m+1):\n        for j in range(m-n+1):\n            if first_map[i:i+m] == second_map[j:j+m]:\n                return f'{i+1} {j+1}'\n\n    # no overlap found\n    return 'No overlap found'"
    },
    {
        "number": 2623,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, k = map(int, stdin.readline().strip().split())\n        s = stdin.readline().strip()\n        if k == 1:\n            print(s)\n            continue\n        a = [\"\"] * k\n        for j in range(n):\n            c = s[j]\n            if not any(c in x for x in a):\n                a[0] += c\n            else:\n                for l in range(k):\n                    if c in a[l]:\n                        a[l] += c\n                        break\n        print(max(a))"
    },
    {
        "number": 2624,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    for i in range(q):\n        s, x = stdin.split()[2*i+2], int(stdin.split()[2*i+3])\n        b = [(-1*x if (s == '>' and a[j] > x) or (s == '<' and a[j] < x) else a[j]) for j in range(n)]\n        a = b\n    return''.join(map(str, a))"
    },
    {
        "number": 2625,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    for i in range(n):\n        k, x = map(int, stdin.readline().strip().split())\n        count = 0\n        num = 1\n        while num!= 0:\n            num = sum(int(digit) for digit in str(num))\n            count += 1\n        if count == 1:\n            print(k)\n        else:\n            print(k * (10 ** (count - 1) - 1) + num)"
    },
    {
        "number": 2626,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n = int(stdin.readline().strip())\n        # calculate the number of ways to cover the area\n        ways = (n * (n-1)) // 2\n        print(ways)\n    return \"\""
    },
    {
        "number": 2627,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    matrix = [[int(x) for x in row.split()] for row in stdin.split('\\n')]\n\n    # initialize variables\n    max_area = 0\n    heights = [0] * len(matrix[0])\n\n    # iterate through each row\n    for i in range(len(matrix)):\n        # update heights for current row\n        for j in range(len(matrix[0])):\n            if matrix[i][j] == 1:\n                heights[j] += 1\n            else:\n                heights[j] = 0\n\n        # calculate max area for current row\n        stack = [-1]\n        for j in range(len(matrix[0])):\n            while heights[j] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = j if stack[-1] == -1 else j - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(j)\n\n    return max_area"
    },
    {
        "number": 2628,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    if n == 0:\n        return [0]\n    else:\n        gray_code = [0, 1]\n        for i in range(2, 2**n):\n            gray_code.append(i ^ (i >> 1))\n        return gray_code"
    },
    {
        "number": 2629,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    matrix = [[0 for j in range(n)] for i in range(n)]\n    top, bottom, left, right = 0, n-1, 0, n-1\n    num = 1\n    while top <= bottom and left <= right:\n        # Traverse right\n        for i in range(left, right+1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        # Traverse down\n        for i in range(top, bottom+1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        # Traverse left\n        for i in range(right, left-1, -1):\n            matrix[bottom][i] = num\n            num += 1\n        bottom -= 1\n        # Traverse up\n        for i in range(bottom, top-1, -1):\n            matrix[i][left] = num\n            num += 1\n        left += 1\n    return matrix"
    },
    {
        "number": 2630,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    grid = [[int(x) for x in line.split()] for line in stdin.split('\\n') if line.strip()]\n    m, n = len(grid), len(grid[0])\n\n    # dp[i][j] stores the number of unique paths from (0,0) to (i,j)\n    dp = [[0] * n for _ in range(m)]\n\n    # initialize base cases\n    dp[0][0] = 1\n\n    # fill the dp table\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                continue\n            if i == 0 and j == 0:\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j-1]\n            elif j == 0:\n                dp[i][j] = dp[i-1][j]\n            else:\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n\n    # return the answer\n    return dp[-1][-1]"
    },
    {
        "number": 2631,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2632,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    grid = [[int(num) for num in line.split()] for line in stdin.split('\\n')]\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[-1][-1]"
    },
    {
        "number": 2633,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    M, N = map(int, lines[0].split())\n    dungeon = [[int(x) for x in line.split()] for line in lines[1:]]\n\n    # initialize variables\n    health = 1\n    path = [(0, 0)]\n\n    # dfs to find optimal path\n    while path:\n        x, y = path.pop()\n        if x == M-1 and y == N-1:\n            return str(health)\n        for dx, dy in [(0, 1), (1, 0)]:\n            nx, ny = x+dx, y+dy\n            if 0 <= nx < M and 0 <= ny < N and dungeon[nx][ny] >= 0:\n                dungeon[nx][ny] -= health\n                if dungeon[nx][ny] <= 0:\n                    dungeon[nx][ny] = 1\n                path.append((nx, ny))\n        health += 1\n\n    # no path found\n    return '-1'"
    },
    {
        "number": 2634,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    res = []\n    for i in range(2**len(nums)):\n        subset = []\n        for j in range(len(nums)):\n            if i & (1 << j):\n                subset.append(nums[j])\n        if subset not in res:\n            res.append(subset)\n    return res"
    },
    {
        "number": 2635,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    matrix = eval(stdin)\n    result = []\n    top, bottom, left, right = 0, len(matrix)-1, 0, len(matrix[0])-1\n    while top <= bottom and left <= right:\n        # Traverse right\n        for i in range(left, right+1):\n            result.append(matrix[top][i])\n        top += 1\n        # Traverse down\n        for i in range(top, bottom+1):\n            result.append(matrix[i][right])\n        right -= 1\n        # Traverse left\n        if top <= bottom:\n            for i in range(right, left-1, -1):\n                result.append(matrix[bottom][i])\n            bottom -= 1\n        # Traverse up\n        if left <= right:\n            for i in range(bottom, top-1, -1):\n                result.append(matrix[i][left])\n            left += 1\n    return result"
    },
    {
        "number": 2636,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    buildings = []\n    for line in stdin.split('\\n'):\n        if line:\n            x1, x2, height = map(int, line.split())\n            buildings.append([x1, x2, height])\n\n    # sort buildings by left x position\n    buildings.sort(key=lambda x: x[0])\n\n    # initialize variables\n    skyline = []\n    current_height = 0\n    current_x = 0\n\n    # iterate through buildings\n    for building in buildings:\n        left_x, right_x, height = building\n\n        # update current height and x position\n        if height > current_height:\n            current_height = height\n            current_x = left_x\n\n        # add key points to skyline\n        if current_height > 0:\n            skyline.append([current_x, current_height])\n            skyline.append([right_x, 0])\n\n        # update current height and x position\n        current_height = max(current_height, height)\n        current_x = right_x\n\n    # merge consecutive horizontal lines of equal height\n    i = 0\n    while i < len(skyline) - 1:\n        if skyline[i][1] == skyline[i+1][1]:\n            skyline[i][1] = skyline[i+1][1]\n            del skyline[i+1]\n        else:\n            i += 1\n\n    # sort skyline by x position\n    skyline.sort(key=lambda x: x[0])\n\n    # convert skyline to string\n    output = ''\n    for point in skyline:\n        output += f'[{point[0]} {point[1]}]\\n'\n\n    return output[:-1]"
    },
    {
        "number": 2638,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    triangle = [[int(num) for num in line.strip().split()] for line in stdin.strip().split('\\n')]\n    n = len(triangle)\n    dp = triangle[-1]\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n    return dp[0]"
    },
    {
        "number": 2639,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums = list(map(int, stdin.split()))\n    res = []\n    def backtrack(start, curr):\n        res.append(curr[:])\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            curr.append(nums[i])\n            backtrack(i+1, curr)\n            curr.pop()\n    backtrack(0, [])\n    return res"
    },
    {
        "number": 2640,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    H, W = map(int, lines[0].split())\n    obstacles = set()\n    for i in range(1, H+1):\n        for j in range(W):\n            if lines[i][j] == '#':\n                obstacles.add((i, j))\n\n    # bfs to find the maximum number of squares lighted\n    def bfs(start):\n        visited = set()\n        queue = [start]\n        count = 0\n        while queue:\n            x, y = queue.pop(0)\n            if (x, y) in visited:\n                continue\n            visited.add((x, y))\n            count += 1\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x+dx, y+dy\n                if 1 <= nx <= H and 1 <= ny <= W and (nx, ny) not in obstacles:\n                    queue.append((nx, ny))\n        return count\n\n    max_count = 0\n    for i in range(1, H+1):\n        for j in range(W):\n            if (i, j) not in obstacles:\n                count = bfs((i, j))\n                max_count = max(max_count, count)\n\n    return str(max_count)"
    },
    {
        "number": 2641,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, q = map(int, stdin.readline().split())\n    colors = list(map(int, stdin.readline().split()))\n    queries = []\n    for _ in range(q):\n        l, r = map(int, stdin.readline().split())\n        queries.append((l-1, r-1))\n\n    # count colors in range [l, r]\n    def count_colors(l, r):\n        colors_set = set()\n        for i in range(l, r+1):\n            colors_set.add(colors[i])\n        return len(colors_set)\n\n    # solve queries\n    results = []\n    for l, r in queries:\n        results.append(count_colors(l, r))\n\n    # print results\n    return '\\n'.join(map(str, results))"
    },
    {
        "number": 2642,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline())\n    A = [int(x) for x in stdin.readline().split()]\n    B = [int(x) for x in stdin.readline().split()]\n\n    # Initialize dp table\n    dp = [[0] * N for _ in range(1 << N)]\n\n    # Base case: choose no sardines\n    for i in range(N):\n        dp[1 << i][i] = 1\n\n    # Fill dp table\n    for mask in range(1 << N):\n        for i in range(N):\n            if not (mask >> i) & 1:\n                continue\n            for j in range(N):\n                if i == j or (mask >> j) & 1:\n                    continue\n                if A[i] * A[j] + B[i] * B[j] == 0:\n                    dp[mask][i] += dp[mask ^ (1 << i)][j]\n                    dp[mask][i] %= 1000000007\n\n    # Count number of ways to choose sardines\n    count = 0\n    for i in range(N):\n        count += dp[(1 << N) - 1][i]\n        count %= 1000000007\n\n    return str(count)"
    },
    {
        "number": 2643,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, q = map(int, stdin.readline().split())\n    d = list(map(int, stdin.readline().split()))\n    res = []\n    for _ in range(q):\n        n, x, m = map(int, stdin.readline().split())\n        a = [x]\n        for j in range(1, n):\n            a.append((a[j-1] + d[j-1]) % k)\n        count = 0\n        for j in range(n-1):\n            if (a[j] % m) < (a[j+1] % m):\n                count += 1\n        res.append(count)\n    return '\\n'.join(map(str, res))"
    },
    {
        "number": 2644,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n\n    # Check if it is possible to sort P in ascending order\n    for i in range(N - 1):\n        if P[i] > P[i + 1]:\n            return \"-1\"\n\n    # Find the sequence of operations that sorts P in ascending order\n    operations = []\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            if P[i] > P[j]:\n                operations.append((i, j))\n                P[i], P[j] = P[j], P[i]\n                break\n\n    # Print the sequence of operations\n    if len(operations)!= N - 1:\n        return \"-1\"\n    else:\n        return \"\\n\".join(map(str, operations))"
    },
    {
        "number": 2645,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    atcoder_score = 0\n    topcoder_score = 0\n    for i in range(n):\n        if s[i] == 'g':\n            atcoder_score += 1\n        elif s[i] == 'p':\n            atcoder_score -= 1\n        if atcoder_score > topcoder_score:\n            topcoder_score += 1\n        elif atcoder_score < topcoder_score:\n            topcoder_score -= 1\n    return str(topcoder_score)"
    },
    {
        "number": 2646,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, M = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n    B = list(map(int, stdin.readline().split()))\n\n    # Initialize graph\n    graph = [[] for _ in range(N+1)]\n    for i in range(M):\n        graph[A[i]].append(B[i])\n        graph[B[i]].append(A[i])\n\n    # DFS to find signposts\n    visited = [False] * (N+1)\n    signposts = [0] * (N+1)\n    def dfs(room):\n        visited[room] = True\n        for neighbor in graph[room]:\n            if not visited[neighbor]:\n                signposts[neighbor] = room\n                dfs(neighbor)\n\n    # DFS from each room except Room 1\n    for i in range(2, N+1):\n        if not visited[i]:\n            signposts[i] = 1\n            dfs(i)\n\n    # Check if signposts satisfy objective\n    for i in range(2, N+1):\n        if signposts[i] == 0:\n            return \"No\"\n\n    # Print signposts\n    print(\"Yes\")\n    for i in range(2, N+1):\n        print(signposts[i])\n\n    return \"\""
    },
    {
        "number": 2647,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.split())\n    s = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n\n    # Check if game can be completed\n    if s[0][0] == '#' or s[H-1][W-1] == '#':\n        return -1\n\n    # Initialize variables\n    score = 0\n    visited = set()\n    queue = [(1, 1)]\n\n    # BFS\n    while queue:\n        i, j = queue.pop(0)\n        if (i, j) == (H, W):\n            return score\n        if (i, j) not in visited:\n            visited.add((i, j))\n            if s[i][j] == '.':\n                score += 1\n                s[i][j] = '#'\n                for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < H and 0 <= nj < W and s[ni][nj] == '.':\n                        queue.append((ni, nj))\n            else:\n                for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < H and 0 <= nj < W and s[ni][nj] == '.':\n                        queue.append((ni, nj))\n\n    # Game cannot be completed\n    return -1\n"
    },
    {
        "number": 2648,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    a.sort()\n    ans = n\n    for i in range(n-2):\n        if a[i] == a[i+1] == a[i+2]:\n            ans -= 1\n    return str(ans)"
    },
    {
        "number": 2649,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    max_distance = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            distance = abs(points[i][0]-points[j][0]) + abs(points[i][1]-points[j][1])\n            if distance > max_distance:\n                max_distance = distance\n    return str(max_distance)"
    },
    {
        "number": 2650,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    b = list(map(int, stdin.split()))\n    c = list(map(int, stdin.split()))\n    d = list(map(int, stdin.split()))\n    evenness = [0] * (2 * 10**5 + 1)\n    for i in range(n):\n        evenness[b[i]] = max(evenness[b[i]], a[i])\n    for j in range(q):\n        evenness[d[j]] = min(evenness[d[j]], evenness[c[j]])\n    return '\\n'.join(map(str, evenness[1:]))"
    },
    {
        "number": 2651,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    x = list(map(int, stdin.readline().split()))\n    y = list(map(int, stdin.readline().split()))\n    MOD = 10**9+7\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, m+1):\n            dp[i][j] = (dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + x[i-1]*y[j-1]) % MOD\n    return str(dp[n][m])"
    },
    {
        "number": 2652,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    towns = []\n    for i in range(N):\n        x, y = map(int, stdin.readline().strip().split())\n        towns.append((x, y))\n\n    # Build roads\n    roads = []\n    for i in range(N):\n        for j in range(i+1, N):\n            a, b = towns[i]\n            c, d = towns[j]\n            cost = min(abs(a-c), abs(b-d))\n            roads.append((cost, i, j))\n\n    # Find minimum cost\n    min_cost = float('inf')\n    for road in roads:\n        cost, i, j = road\n        if i not in visited and j not in visited:\n            visited = set([i, j])\n            min_cost = min(min_cost, cost)\n\n    # Output result\n    return str(min_cost)"
    },
    {
        "number": 2653,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, Q = map(int, stdin.readline().split())\n    edges = []\n    for i in range(N - 1):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a, b))\n    operations = []\n    for i in range(Q):\n        p, x = map(int, stdin.readline().split())\n        operations.append((p, x))\n\n    # Build tree\n    tree = [[] for _ in range(N + 1)]\n    for a, b in edges:\n        tree[a].append(b)\n        tree[b].append(a)\n\n    # Perform operations\n    for p, x in operations:\n        # Find subtree rooted at p\n        subtree = [p]\n        stack = [p]\n        while stack:\n            node = stack.pop()\n            for child in tree[node]:\n                if child not in subtree:\n                    subtree.append(child)\n                    stack.append(child)\n\n        # Increment counters on subtree\n        for node in subtree:\n            tree[node][0] += x\n\n    # Print counters\n    counters = [0] * (N + 1)\n    for node in range(2, N + 1):\n        for child in tree[node]:\n            counters[node] += counters[child]\n    return''.join(map(str, counters[2:]))"
    },
    {
        "number": 2654,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    A = []\n    B = []\n    for i in range(N):\n        a, b = map(int, stdin.readline().strip().split())\n        A.append(a)\n        B.append(b)\n\n    # Compute the number of different values that the median can take\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if A[i] <= A[j] <= A[k] <= B[i] <= B[j] <= B[k]:\n                    count += 1\n                elif A[i] <= A[j] <= B[i] <= B[j] <= B[k] <= B[k]:\n                    count += 1\n                elif A[i] <= B[i] <= A[j] <= B[j] <= A[k] <= B[k]:\n                    count += 1\n                elif A[i] <= B[i] <= A[j] <= B[j] <= B[k] <= A[k]:\n                    count += 1\n                elif B[i] <= A[i] <= B[j] <= A[j] <= B[k] <= A[k]:\n                    count += 1\n                elif B[i] <= A[i] <= B[j] <= A[j] <= A[k] <= B[k]:\n                    count += 1\n                elif B[i] <= A[i] <= A[j] <= B[j] <= B[k] <= A[k]:\n                    count += 1\n                elif B[i] <= A[i] <= A[j] <= B[j] <= A[k] <= B[k]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 2655,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # initialize comforts\n    comforts = [0] * N\n\n    # calculate comforts\n    for i in range(1, N):\n        comforts[i] = min(A[i-1], A[(i+1)%N])\n\n    # calculate total comfort\n    total_comfort = sum(comforts)\n\n    # print result\n    print(total_comfort)\n\n    return \"\""
    },
    {
        "number": 2656,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(str, stdin.strip().split())\n    k = int(k)\n    s = list(s)\n    n = len(s)\n    MOD = 10**9+7\n    dp = [[0]*(n+1) for _ in range(k+1)]\n    dp[0][0] = 1\n    for i in range(1, k+1):\n        for j in range(n+1):\n            dp[i][j] = (dp[i][j-1] + dp[i-1][j-1]) % MOD\n            if j > 0:\n                dp[i][j] = (dp[i][j] + dp[i][j-2]) % MOD\n            if s[j-1].islower():\n                dp[i][j] = (dp[i][j] - dp[i-1][j-1]) % MOD\n    return dp[k][n]"
    },
    {
        "number": 2657,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    max_comb = 0\n    max_i = 0\n    max_j = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            comb = 1\n            for k in range(n):\n                if k!= i and k!= j:\n                    comb *= a[k]\n            if comb > max_comb:\n                max_comb = comb\n                max_i = i\n                max_j = j\n    return f\"{a[max_i]} {a[max_j]}\""
    },
    {
        "number": 2658,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, K = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    curr_town = 1\n    visited = set()\n\n    # Perform K teleportations\n    for i in range(K):\n        # If we have already visited this town, we need to backtrack\n        if curr_town in visited:\n            return \"LOOP\"\n        visited.add(curr_town)\n\n        # Move to the next town\n        curr_town = A[curr_town - 1]\n\n    # Return the final town\n    return curr_town"
    },
    {
        "number": 2659,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    snuke_numbers = []\n    for i in range(1, 1000000000000000):\n        s = sum(int(digit) for digit in str(i))\n        if all(i % s <= m % s for m in range(i+1, 1000000000000000)):\n            snuke_numbers.append(i)\n            if len(snuke_numbers) == k:\n                break\n    return '\\n'.join(str(snuke_number) for snuke_number in snuke_numbers)"
    },
    {
        "number": 2660,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    queries = stdin.split('\\n')\n    f = 0\n    for query in queries:\n        if query.startswith('1'):\n            a, b = map(int, query.split()[1:])\n            g = lambda x: f(x) + abs(x - a) + b\n            f = g\n        elif query.startswith('2'):\n            x_min = float('inf')\n            for x in range(-10**9, 10**9+1):\n                if f(x) < x_min:\n                    x_min = f(x)\n            print(int(x_min), end=' ')\n    return ''"
    },
    {
        "number": 2661,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    s = [int(x) for x in lines[1].split()]\n    t = [int(x) for x in lines[2].split()]\n    u = [int(x) for x in lines[3].split()]\n    v = [int(x) for x in lines[4].split()]\n\n    # check if there exists a matrix that satisfies the conditions\n    for i in range(2**n):\n        a = [[0]*n for _ in range(n)]\n        for j in range(n):\n            for k in range(n):\n                if i & (1 << j):\n                    a[j][k] = u[j]\n                if i & (1 << k):\n                    a[j][k] = v[k]\n        if all(s[j] == 0 and a[j][k] == u[j] for j in range(n) for k in range(n)) or \\\n           all(s[j] == 1 and a[j][k] == u[j] for j in range(n) for k in range(n)) or \\\n           all(t[j] == 0 and a[j][k] == v[k] for j in range(n) for k in range(n)) or \\\n           all(t[j] == 1 and a[j][k] == v[k] for j in range(n) for k in range(n)):\n            return '\\n'.join([' '.join(str(x) for x in row) for row in a])\n\n    # no matrix satisfies the conditions\n    return '-1'"
    },
    {
        "number": 2662,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Read input\n    N = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n\n    # Sort A\n    A.sort()\n\n    # Initialize color count\n    color_count = 1\n\n    # Initialize color map\n    color_map = {}\n\n    # Iterate over A\n    for i in range(N):\n        # Check if A[i] is already painted with a color\n        if A[i] in color_map:\n            # If yes, check if the color is the same as the previous color\n            if color_map[A[i]] == color_count:\n                # If yes, increment color count\n                color_count += 1\n            # If no, do nothing\n        else:\n            # If not, paint A[i] with the current color count\n            color_map[A[i]] = color_count\n\n    # Return the minimum color count\n    return str(color_count)"
    },
    {
        "number": 2663,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    l = []\n    for i in range(n):\n        for j in range(i, n):\n            l.append(sum(a[i:j+1]))\n    l.sort(reverse=True)\n    return''.join(map(str, l[:k]))"
    },
    {
        "number": 2664,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    pans = []\n    for i in range(n):\n        pan = list(map(int, stdin.readline().strip().split()))\n        pans.append(pan)\n    diff = int(stdin.readline().strip())\n\n    # Finding the heavier ball\n    heavier_ball = None\n    for i in range(n):\n        for j in range(i+1, n):\n            if pans[i][j] > pans[i][heavier_ball]:\n                heavier_ball = j\n\n    # Printing the output\n    print(heavier_ball+1)\n    print(pans[0][heavier_ball], pans[1][heavier_ball])\n    print(diff)\n\n    # Returning the output\n    return \"\""
    },
    {
        "number": 2665,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    points.sort()\n    count = 0\n    for i in range(n):\n        if points[i][0] == points[i-1][0] or points[i][1] == points[i-1][1]:\n            continue\n        for j in range(i+1, n):\n            if points[j][0] == points[j-1][0] or points[j][1] == points[j-1][1]:\n                continue\n            if (points[j][0] - points[i][0]) * (points[j][1] - points[i][1]) == (points[j][0] - points[j-1][0]) * (points[j][1] - points[j-1][1]):\n                count += 1\n                break\n    return str(count)"
    },
    {
        "number": 2666,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n, k = map(int, lines[0].split())\n    prices = list(map(int, lines[1:]))\n    \n    # initialize variables\n    max_profit = 0\n    buy_price = float('inf')\n    sell_price = float('-inf')\n    \n    # iterate over prices and update buy_price and sell_price\n    for price in prices:\n        if price < buy_price:\n            buy_price = price\n        if price > sell_price:\n            sell_price = price\n        \n        # calculate profit if we can sell now\n        if sell_price - buy_price > max_profit and k > 0:\n            max_profit = sell_price - buy_price\n            k -= 1\n    \n    return max_profit"
    },
    {
        "number": 2667,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    c = list(map(int, stdin.readline().strip().split()))\n    if sum(c) % n!= 0:\n        return \"NO\"\n    else:\n        target = sum(c) // n\n        dp = [False] * (target + 1)\n        dp[0] = True\n        for i in range(n):\n            for j in range(target, -1, -1):\n                if dp[j]:\n                    dp[j + c[i]] = True\n        return \"YES\" if dp[target] else \"NO\""
    },
    {
        "number": 2668,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    jacketCost, sockCost, money = map(int, stdin.split())\n    socks = money // sockCost\n    if socks == 0:\n        return \"Unlucky Chef\"\n    else:\n        socks -= 1\n        money -= socks * sockCost\n        if money < jacketCost:\n            return \"Unlucky Chef\"\n        else:\n            return \"Lucky Chef\""
    },
    {
        "number": 2669,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    tasks = [list(map(int, stdin.split())) for _ in range(n)]\n    tasks.sort(key=lambda x: x[1])\n    max_tasks = 1\n    end_time = tasks[0][1]\n    for i in range(1, n):\n        if tasks[i][0] >= end_time:\n            max_tasks += 1\n            end_time = tasks[i][1]\n    return''.join(map(str, range(max_tasks)))"
    },
    {
        "number": 2670,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        str1, str2 = stdin.readline().strip().split()\n        for j in range(len(str1)):\n            for k in range(len(str2)):\n                sub1 = str1[j:j+2]\n                sub2 = str2[k:k+2]\n                if sub1 == sub1[::-1] and sub2 == sub2[::-1] and len(sub1) == len(sub2) and len(sub1) == len(str1) - j - len(str2) + k:\n                    return len(sub1)\n    return 0"
    },
    {
        "number": 2671,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    x = list(map(int, stdin.readline().split()))\n    dp = [0] * (n+1)\n    dp[0] = 1\n    for i in range(1, n+1):\n        dp[i] = dp[i-1] + dp[i-1] * a[i-1]\n    ans = []\n    for i in range(m):\n        ans.append(dp[x[i]])\n    return '\\n'.join(map(str, ans))"
    },
    {
        "number": 2672,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X = int(stdin.strip())\n    return pow(3, X, 1000000007)"
    },
    {
        "number": 2673,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S = list(map(int, stdin))\n    N = len(S)\n    dp = [float('inf')] * N\n    dp[0] = 0\n    for i in range(1, N):\n        if S[i] == S[i-1]:\n            dp[i] = dp[i-1]\n        else:\n            dp[i] = min(dp[i-1], dp[i-2]) + 1\n    return dp[-1]"
    },
    {
        "number": 2674,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p = int(stdin)\n    if p % 10 == 0:\n        return 'Inclusive'\n    else:\n        return 'Exclusive'"
    },
    {
        "number": 2675,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    red_balls = []\n    blue_balls = []\n    for i in range(n):\n        x, u = map(int, stdin.split())\n        red_balls.append((x, u))\n    for i in range(m):\n        y, v = map(int, stdin.split())\n        blue_balls.append((y, v))\n    red_balls.sort()\n    blue_balls.sort()\n    collisions = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if red_balls[i][0] < blue_balls[j][0]:\n            i += 1\n        elif red_balls[i][0] > blue_balls[j][0]:\n            j += 1\n        else:\n            if red_balls[i][1] > blue_balls[j][1]:\n                i += 1\n            else:\n                j += 1\n            collisions += 1\n    return str(collisions)"
    },
    {
        "number": 2676,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    n = int(stdin.readline().strip())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    m = int(stdin.readline().strip())\n    b = stdin.readline().strip()\n\n    # Finding all substrings of b\n    substrings = set()\n    for i in range(len(b)):\n        for j in range(i+1, len(b)+1):\n            substrings.add(b[i:j])\n\n    # Counting unique substrings in strings\n    count = 0\n    for s in strings:\n        for substring in substrings:\n            if substring in s:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 2677,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set(['A', 'E', 'I', 'O', 'U'])\n    consonants = set(['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'])\n    vowel_count = 0\n    consonant_count = 0\n    for i in range(len(stdin)):\n        if stdin[i] in vowels:\n            vowel_count += 1\n        elif stdin[i] in consonants:\n            consonant_count += 1\n        if vowel_count >= 3 and consonant_count >= 5:\n            return \"GOOD\"\n    return \"-1\""
    },
    {
        "number": 2678,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    intervals = []\n    for line in stdin.split('\\n'):\n        if line:\n            a, b = map(int, line.split())\n            intervals.append((a, b))\n    n = len(intervals)\n    covered = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if intervals[i][1] >= intervals[j][0]:\n                covered.update(range(intervals[i][0], intervals[i][1]+1))\n                covered.update(range(intervals[j][0], intervals[j][1]+1))\n    return len(covered)"
    },
    {
        "number": 2679,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    coins = list(map(int, stdin.readline().strip().split()))\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = coins[i]\n    for i in range(n-2, -1, -1):\n        for j in range(i+1, n):\n            dp[i][j] = max(coins[i] + dp[i+1][j], coins[j] + dp[i][j-1])\n    return str(dp[0][n-1])"
    },
    {
        "number": 2680,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, b = map(int, stdin.split()[0:2])\n    x = list(map(int, stdin.split()[2:2+b]))\n    y = list(map(int, stdin.split()[2+b:]))\n\n    # Initialize matrix\n    matrix = [[0 for j in range(n+2)] for i in range(n+2)]\n\n    # Plant bombs\n    for i in range(b):\n        matrix[x[i]][y[i]] = 1\n\n    # Initialize visited matrix\n    visited = [[0 for j in range(n+2)] for i in range(n+2)]\n\n    # Initialize queue\n    queue = []\n\n    # Add corners to queue\n    for i in range(1, n+1):\n        queue.append((i, 1))\n        queue.append((i, n+1))\n        queue.append((1, i))\n        queue.append((n+1, i))\n\n    # BFS\n    steps = 0\n    while queue:\n        steps += 1\n        size = len(queue)\n        for i in range(size):\n            x, y = queue.pop(0)\n            if visited[x][y]:\n                continue\n            visited[x][y] = 1\n            if matrix[x][y] == 1:\n                matrix[x][y] = 2\n                for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    nx, ny = x+dx, y+dy\n                    if 1 <= nx <= n+1 and 1 <= ny <= n+1:\n                        queue.append((nx, ny))\n\n    # Count defused bombs\n    count = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if matrix[i][j] == 2:\n                count += 1\n\n    # Return minimum number of moves\n    return steps - count"
    },
    {
        "number": 2681,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, c = map(int, stdin.split())\n    if c == '+':\n        return str(a + b)\n    elif c == '-':\n        return str(a - b)\n    elif c == '*':\n        return str(a * b)\n    elif c == '/':\n        return str(a / b)\n    else:\n        return \"Invalid operator\""
    },
    {
        "number": 2682,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    Q = int(lines[0])\n    for i in range(1, Q+1):\n        N, K = map(int, lines[i].split())\n        deck = list(range(N))\n        for j in range(N):\n            deck[j] = (j*2)%N\n        for j in range(N):\n            deck[j] = (deck[j]+K)%N\n        print(deck.index(K))\n    return \"\""
    },
    {
        "number": 2683,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    T = int(lines[0])\n    for i in range(1, T+1):\n        N, K = map(int, lines[i].split())\n        board = []\n        for j in range(i+1, i+1+N):\n            board.append(list(lines[j]))\n        # print(board)\n        for j in range(N):\n            for k in range(N):\n                if board[j][k] == '.':\n                    board[j][k] = 'X'\n                    if check_win(board, 'X', K):\n                        return \"YES\"\n                    board[j][k] = '.'\n        return \"NO\"\n\ndef"
    },
    {
        "number": 2684,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    word = stdin.readline().strip()\n    max_len = 0\n    max_palindrome = \"\"\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subword = word[i:j]\n            if subword == subword[::-1]:\n                if len(subword) > max_len:\n                    max_len = len(subword)\n                    max_palindrome = subword\n    return str(max_len) + \"\\n\" + max_palindrome"
    },
    {
        "number": 2685,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, x, y = stdin.split('\\n')\n    x, y = int(x), int(y)\n    n = len(S)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0 if S[i] == '0' else x if S[i] == '1' else y\n    for l in range(2, n+1):\n        for i in range(n-l+1):\n            j = i+l-1\n            if S[i] == '?' and S[j] == '?':\n                dp[i][j] = min(dp[i+1][j], dp[i][j-1])\n            elif S[i] == '?':\n                dp[i][j] = dp[i+1][j] + y\n            elif S[j] == '?':\n                dp[i][j] = dp[i][j-1] + x\n            else:\n                dp[i][j] = dp[i+1][j] + y if S[i] == '0' else dp[i][j-1] + x if S[j] == '1' else dp[i+1][j] + dp[i][j-1]\n    return dp[0][n-1]"
    },
    {
        "number": 2686,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    pairs = []\n    for i in range(M):\n        A, B = map(int, stdin.split())\n        pairs.append((A, B))\n    S, T = map(int, stdin.split())\n\n    # build graph\n    graph = [[] for _ in range(N+1)]\n    for A, B in pairs:\n        graph[A].append(B)\n        graph[B].append(A)\n\n    # bfs to find shortest path\n    queue = [(S, 0)]\n    visited = set()\n    while queue:\n        node, dist = queue.pop(0)\n        if node == T:\n            return str(dist)\n        if node in visited:\n            continue\n        visited.add(node)\n        for neighbor in graph[node]:\n            queue.append((neighbor, dist+1))\n\n    # if we reach here, there is no path to T\n    return \"0\""
    },
    {
        "number": 2687,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    K = int(stdin.strip())\n    MOD = 10**9 + 9\n    dp = [0] * (2*K + 1)\n    dp[0] = 1\n    for i in range(1, 2*K + 1):\n        dp[i] = (dp[i-1] * (i-1)) % MOD\n    for i in range(K):\n        dp[2*K-i] = (dp[2*K-i] * (2*K-i)) % MOD\n    for i in range(2*K):\n        dp[i] = (dp[i] * dp[i+1]) % MOD\n    return '\\n'.join(map(str, dp))"
    },
    {
        "number": 2688,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    nums = list(map(int, stdin.split()[1:]))\n    cycles = []\n    visited = [False] * n\n    for i in range(n):\n        if visited[i]:\n            continue\n        cycle = [nums[i]]\n        j = i\n        while not visited[j]:\n            visited[j] = True\n            cycle.append(nums[j])\n            j = (j + nums[j] - 1) % n\n        cycles.append(cycle)\n    return str(len(cycles)) + '\\n' + '\\n'.join(' '.join(map(str, cycle)) for cycle in cycles)"
    },
    {
        "number": 2689,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # function to check if a string is palindrome or not\n    def is_palindrome(s: str) -> bool:\n        return s == s[::-1]\n\n    # function to convert code string to original string\n    def convert_to_string(s: str) -> str:\n        # check if string starts with integer\n        if s[0].isdigit():\n            # find the index of '+' and '-'\n            plus_index = s.find('+')\n            minus_index = s.find('-')\n            # extract the integer and string\n            num = int(s[:plus_index])\n            string = s[plus_index+1:minus_index]\n            # repeat the string num times\n            return string * num\n        else:\n            # if no integer is present then return the string\n            return s\n\n    # convert code string to original string\n    original_string = convert_to_string(stdin)\n    # check if original string is palindrome or not\n    if is_palindrome(original_string):\n        return \"Return\"\n    else:\n        return \"Continue\""
    },
    {
        "number": 2690,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    max_diff = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if stdin[i]!= stdin[j]:\n                diff = abs(i-j)\n                if diff > max_diff:\n                    max_diff = diff\n    return max_diff"
    },
    {
        "number": 2691,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, P = map(int, stdin.split())\n    S = stdin.split('\\n')[1]\n    dp = [[0] * (N+1) for _ in range(N+1)]\n    for i in range(N):\n        for j in range(i+1, N+1):\n            if S[i] == S[j-1]:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n    return dp[0][N] - P"
    },
    {
        "number": 2692,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        N, B = map(int, stdin.readline().strip().split())\n        A = N // B\n        if N % B!= 0:\n            A += 1\n        print(A)\n    return \"\""
    },
    {
        "number": 2693,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    S, P, k = map(int, stdin.split())\n    if S % k!= 0 or P % k!= 0:\n        return \"NO\"\n    n = S // k\n    if n * (n + 1) * (n + 2) // 6!= P:\n        return \"NO\"\n    return \" \".join(map(str, [n + i for i in range(k)]))"
    },
    {
        "number": 2694,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n, m, k = map(int, stdin.split())\n    blasters = []\n    for i in range(k):\n        x, y, t, f = map(int, stdin.readline().split())\n        blasters.append((x, y, t, f))\n\n    # Initialize grid\n    grid = [[False] * m for _ in range(n)]\n    for x, y, t, f in blasters:\n        grid[x-1][y-1] = True\n\n    # Initialize variables\n    spaceman_x, spaceman_y = 0, 0\n    time = 0\n    direction = 0\n    visited = set()\n\n    # Move Spaceman Spiff\n    while True:\n        # Check if Spaceman Spiff has reached the bottom right corner\n        if spaceman_x == n-1 and spaceman_y == m-1:\n            return \"YES\\n\" + str(time)\n\n        # Check if Spaceman Spiff has died\n        if (spaceman_x, spaceman_y) in visited:\n            return \"NO\"\n\n        # Check if Spaceman Spiff has collided with a blaster\n        if grid[spaceman_x][spaceman_y]:\n            return \"NO\"\n\n        # Add current cell to visited set\n        visited.add((spaceman_x, spaceman_y))\n\n        # Move Spaceman Spiff\n        if direction == 0:\n            spaceman_y += 1\n        elif direction == 1:\n            spaceman_x += 1\n        elif direction == 2:\n            spaceman_y -= 1\n        elif direction == 3:\n            spaceman_x -= 1\n\n        # Check if Spaceman Spiff has reached a blaster\n        for x, y, t, f in blasters:\n            if spaceman_x == x-1 and spaceman_y == y-1:\n                return \"NO\"\n\n        # Update time and direction\n        time += 1\n        direction = (direction + 1) % 4\n\n        # Check if Spaceman Spiff has collided with a blaster\n        for x, y, t, f in blasters:\n            if spaceman_x == x-1 and spaceman_y == y-1:\n                return \"NO\""
    },
    {
        "number": 2695,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.split('\\n')\n    indices = list(map(int, stdin.split('\\n')[2].split()))\n    count = 0\n    for i in indices:\n        if A[i-1] == '_':\n            count += 1\n        else:\n            A = A[:i-1] + '_' + A[i:]\n    return count"
    },
    {
        "number": 2696,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    x = 0\n    for i in range(n):\n        if a[i] == a[n-1]:\n            x = i\n            break\n    return str(x)"
    },
    {
        "number": 2697,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    return str(n // 2)"
    },
    {
        "number": 2698,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, V = map(int, stdin.split())\n    days = []\n    for i in range(M):\n        Di, Ai = map(int, stdin.split())\n        days.append((Di, Ai))\n    days.sort()\n    vegetables = 0\n    for i in range(M):\n        Di, Ai = days[i]\n        vegetables += Ai\n        if i < M-1 and days[i+1][0] == Di+1:\n            vegetables -= min(V, vegetables)\n    return vegetables"
    },
    {
        "number": 2699,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        N = int(stdin.readline().strip())\n        for j in range(1, N+1):\n            if j == 1:\n                print(1, end=' ')\n            elif j == N:\n                print(2*j-1, end=' ')\n            else:\n                print(2*j-1, end=' ')\n                print(2*j, end=' ')\n        print()"
    },
    {
        "number": 2700,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    T = int(stdin.readline().strip())\n    for i in range(T):\n        a, b, c, d = map(int, stdin.readline().strip().split())\n        count = 0\n        for x in range(a, b+1):\n            for y in range(c, d+1):\n                if x <= y:\n                    count += 1\n        print(count)\n    return \"\""
    },
    {
        "number": 2701,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, k = map(int, stdin.split()[0:2])\n    t = list(map(int, stdin.split()[2:]))\n\n    # check if sum of types is equal to k\n    if sum(t)!= k:\n        return \"-1\"\n\n    # initialize variables\n    left_dog = [0] * n\n    right_dog = [0] * n\n    left_dog[0] = 1\n    right_dog[-1] = 1\n\n    # iterate over apples\n    for i in range(1, n):\n        # left dog\n        if t[i] == t[i-1]:\n            left_dog[i] = left_dog[i-1] + 1\n        else:\n            left_dog[i] = 1\n\n        # right dog\n        if t[n-i-1] == t[n-i]:\n            right_dog[n-i-1] = right_dog[n-i] + 1\n        else:\n            right_dog[n-i-1] = 1\n\n    # find minimum time\n    min_time = float('inf')\n    for i in range(n):\n        if left_dog[i] > 0 and right_dog[i] > 0:\n            min_time = min(min_time, left_dog[i] + right_dog[i])\n\n    # return minimum time\n    if min_time == float('inf'):\n        return \"-1\"\n    else:\n        return str(min_time)"
    },
    {
        "number": 2702,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    statements = []\n    for i in range(n):\n        statement = stdin.readline().strip().split()\n        statements.append(statement)\n    max_count = 0\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if i!= j and statements[i][j] == 'T':\n                count += 1\n        if count > max_count:\n            max_count = count\n    return str(max_count)"
    },
    {
        "number": 2703,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Reading input\n    N, Q = map(int, stdin.readline().split())\n    candies = list(map(int, stdin.readline().split()))\n    queries = []\n    for i in range(Q):\n        queries.append(int(stdin.readline()))\n\n    # Initializing variables\n    max_candies = 0\n    current_candies = 0\n    for i in range(N):\n        current_candies += candies[i]\n        if current_candies >= queries[0]:\n            max_candies = max(max_candies, current_candies)\n        if current_candies < queries[0]:\n            current_candies = 0\n\n    # Looping through queries\n    for i in range(1, Q):\n        current_candies = 0\n        for j in range(N):\n            current_candies += candies[j]\n            if current_candies >= queries[i]:\n                max_candies = max(max_candies, current_candies)\n            if current_candies < queries[i]:\n                current_candies = 0\n\n    return str(max_candies)"
    },
    {
        "number": 2704,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, Q = map(int, stdin.readline().split())\n    A = list(map(int, stdin.readline().split()))\n    for i in range(Q):\n        t = int(stdin.readline())\n        if t in A:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    return \"\""
    },
    {
        "number": 2705,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    for i in range(m):\n        i = random.randint(0, n-1)\n        a[i] += random.choice([-1, 1])\n    b = [a[i] % k for i in range(n)]\n    c = [0] * k\n    for i in range(n):\n        c[b[i]] += 1\n    ans = 0\n    for i in range(k):\n        ans = max(ans, c[i])\n    return str(ans)\n\nimport random\n\nprint(solution(\"7 3 4\\n8 2 3 7 8 1 1\")) # Output: 5\nprint(solution(\"8 3 5\\n7 2 1 3 6 5 6 2\")) # Output: 5"
    },
    {
        "number": 2706,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.splitlines()[0].split())\n    numbers = []\n    for i in range(1, n+1):\n        q = int(stdin.splitlines()[i])\n        if q >= 0:\n            numbers.append(q)\n        elif len(numbers) >= k:\n            numbers.sort()\n            print(numbers[k-1])\n        else:\n            print(\"Invalid input\")\n    return \"\""
    },
    {
        "number": 2707,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    MOD = 10**9 + 7\n    dp = [0] * (k+1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(k, A[i]-1, -1):\n            dp[j] = (dp[j] + dp[j-A[i]]) % MOD\n    return dp[k]"
    },
    {
        "number": 2708,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    while k > 0:\n        if n % 10!= 0:\n            n -= 1\n        else:\n            n //= 10\n        k -= 1\n    return str(n)"
    },
    {
        "number": 2709,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, t = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    if t == 1:\n        return str(7)\n    elif t == 2:\n        if A[0] > A[1]:\n            return \"Bigger\"\n        elif A[0] == A[1]:\n            return \"Equal\"\n        else:\n            return \"Smaller\"\n    elif t == 3:\n        A.sort()\n        return str(A[1])\n    elif t == 4:\n        return str(sum(A))\n    elif t == 5:\n        return str(sum(filter(lambda x: x % 2 == 0, A)))\n    elif t == 6:\n        A = list(map(lambda x: x % 26, A))\n        A = list(map(lambda x: chr(ord('a') + x), A))\n        return ''.join(A)\n    elif t == 7:\n        i = 0\n        while True:\n            if i >= N or i < 0:\n                print(\"Out\")\n                break\n            elif i == N - 1:\n                print(\"Done\")\n                break\n            else:\n                j = i\n                while True:\n                    if j >= N or j < 0:\n                        print(\"Out\")\n                        break\n                    elif j == N - 1:\n                        print(\"Done\")\n                        break\n                    elif j == i:\n                        print(\"Cyclic\")\n                        break\n                    else:\n                        i = j\n                        j = A[j]\n        return \"\"\n    else:\n        return \"\""
    },
    {
        "number": 2710,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:]))\n    roads = []\n    for i in range(m):\n        p, q = map(int, stdin.split()[i*2+2].split())\n        roads.append((p-1, q-1))\n        roads.append((q-1, p-1))\n    graph = [[] for _ in range(n)]\n    for u, v in roads:\n        graph[u].append(v)\n        graph[v].append(u)\n    dist = [-1] * n\n    dist[0] = 0\n    q = [0]\n    while q:\n        u = q.pop(0)\n        for v in graph[u]:\n            if dist[v] == -1:\n                dist[v] = dist[u] + 1\n                q.append(v)\n    for i in range(n):\n        if dist[i] == -1:\n            return \"NO\"\n        if a[i]!= b[i]:\n            if dist[i] > 1:\n                return \"NO\"\n            if dist[i] == 1:\n                for j in range(n):\n                    if j!= i and dist[j] == 0:\n                        return \"NO\"\n    ans = []\n    for i in range(n):\n        row = [0] * n\n        for j in range(n):\n            if i == j:\n                row[j] = b[i]\n            elif dist[i] == 0:\n                row[j] = a[i]\n            elif dist[i] == 1:\n                row[j] = a[i] if j == i+1 else 0\n            else:\n                row[j] = 0\n        ans.append(row)\n    return \"YES\\n\" + \"\\n\".join(\" \".join(map(str, row)) for row in ans)"
    },
    {
        "number": 2711,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    pages = []\n    for i in range(n):\n        p = int(stdin.split()[i])\n        words = stdin.split()[i+1:i+1+k]\n        pages.append((p, words))\n    # check if the book is a dictionary\n    if not all(len(set(words)) == len(words) for p, words in pages):\n        return \"IMPOSSIBLE\"\n    # reconstruct the alphabet\n    alphabet = set()\n    for p, words in pages:\n        for word in words:\n            for letter in word:\n                alphabet.add(letter)\n    return ''.join(sorted(alphabet))"
    },
    {
        "number": 2712,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        a, b, c = map(int, stdin.readline().strip().split())\n        d = max(a, b, c)\n        if d**2 > a**2 + b**2 + c**2:\n            d = int(d**0.5)\n        print(d)\n    return \"\""
    },
    {
        "number": 2713,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    rank = 25\n    stars = 0\n    bonus = 0\n    consecutive_wins = 0\n    \n    # Iterate over the input string\n    for game in stdin:\n        if game == 'W':\n            # Increment the number of consecutive wins\n            consecutive_wins += 1\n            \n            # Check if the player has all the stars on her current rank\n            if stars == 5:\n                # Check if the player has a bonus star\n                if bonus == 0:\n                    # If not, increment the number of stars and reset the bonus\n                    stars = 1\n                    bonus = 0\n                else:\n                    # If so, increment the number of stars and reset the bonus\n                    stars += 1\n                    bonus = 0\n            else:\n                # If not, increment the number of stars\n                stars += 1\n            \n            # Check if the player has all the stars on her new rank\n            if stars == 5:\n                # If so, increment the rank and reset the number of stars\n                rank += 1\n                stars = 1\n            elif stars == 1:\n                # If not, check if the player has a bonus star\n                if bonus == 0:\n                    # If not, increment the rank and reset the number of stars\n                    rank += 1\n                    stars = 1\n                else:\n                    # If so, increment the rank and reset the number of stars and bonus\n                    rank += 1\n                    stars = 1\n                    bonus = 0\n        else:\n            # If the player lost a game, decrement the number of consecutive wins\n            consecutive_wins = 0\n            \n            # Check if the player has zero stars on her current rank\n            if stars == 0:\n                # If so, decrement the rank and reset the number of stars\n                rank -= 1\n                stars = 4\n            else:\n                # If not, decrement the number of stars\n                stars -= 1\n            \n            # Check if the player has zero stars on her new rank\n            if stars == 0:\n                # If so, decrement the rank and reset the number of stars\n                rank -= 1\n                stars = 4\n            elif stars == 4:\n                # If not, check if the player has a bonus star\n                if bonus == 0:\n                    # If not, decrement the rank and reset the number of stars\n                    rank -= 1\n                    stars = 4\n                else:\n                    # If so, decrement the rank and reset the number of stars and bonus\n                    rank -= 1\n                    stars = 4\n                    bonus = 0\n    \n    # Check if the player is still on the Legend rank\n    if rank == 25:\n        return \"Legend\"\n    else:\n        return str(rank)"
    },
    {
        "number": 2714,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    t = int(stdin.readline().strip())\n    for i in range(t):\n        n, m = map(int, stdin.readline().strip().split())\n        graph = [[] for _ in range(n+1)]\n        for j in range(m):\n            u, v = map(int, stdin.readline().strip().split())\n            graph[u].append(v)\n            graph[v].append(u)\n        visited = [False] * (n+1)\n        count = 0\n        def dfs(u, num):\n            nonlocal count\n            visited[u] = True\n            for v in graph[u]:\n                if not visited[v]:\n                    if num == 1:\n                        dfs(v, 2)\n                    elif num == 2:\n                        dfs(v, 1)\n                    elif num == 3:\n                        dfs(v, 1)\n                        dfs(v, 2)\n            if num == 1:\n                count += 1\n            elif num == 2:\n                count += 1\n            elif num == 3:\n                count += 1\n        for j in range(1, n+1):\n            if not visited[j]:\n                dfs(j, 1)\n        print(count % 998244353)\n    return \"\""
    },
    {
        "number": 2715,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    n = 4\n    a = [3] * n\n    for i in range(k):\n        max_idx = a.index(max(a))\n        a[max_idx] -= n\n        for j in range(n):\n            if j!= max_idx:\n                a[j] += 1\n    return f\"{n}\\n{' '.join(map(str, a))}\""
    },
    {
        "number": 2716,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, t = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n\n    if t == 1:\n        for i in range(N):\n            for j in range(i+1, N):\n                if A[i]!= A[j] and A[i] + A[j] == 7777:\n                    return \"Yes\"\n        return \"No\"\n\n    elif t == 2:\n        if len(set(A)) == N:\n            return \"Unique\"\n        else:\n            return \"Contains duplicate\"\n\n    elif t == 3:\n        count = {}\n        for i in A:\n            if i in count:\n                count[i] += 1\n            else:\n                count[i] = 1\n        for i in count:\n            if count[i] > N//2:\n                return i\n        return -1\n\n    elif t == 4:\n        A.sort()\n        if N % 2 == 0:\n            return str(A[N//2-1]) + \" \" + str(A[N//2])\n        else:\n            return str(A[N//2])\n\n    elif t == 5:\n        A.sort()\n        result = \"\"\n        for i in range(N):\n            if A[i] >= 100 and A[i] <= 999:\n                result += str(A[i]) + \" \"\n        return result.strip()\n\n    else:\n        return \"Invalid input\""
    },
    {
        "number": 2717,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    teams = stdin.split()[1]\n    count = 0\n    for i in range(n):\n        if teams[i]!= teams[(i+1)%n]:\n            count += 1\n    return count"
    },
    {
        "number": 2718,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    if n == m:\n        return \"win\"\n    elif n > m:\n        return \"lose\"\n    else:\n        return \"unknown\""
    },
    {
        "number": 2719,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    needles = []\n    for line in stdin.split('\\n'):\n        if line:\n            x1, y1, z1, x2, y2, z2 = map(int, line.split())\n            needles.append(((x1, y1, z1), (x2, y2, z2)))\n\n    # Check for true closed chains\n    for i in range(len(needles)):\n        for j in range(i+2, len(needles)):\n            if needles[i][1] == needles[j][0]:\n                return \"True closed chains\"\n\n    # Check for floor closed chains\n    for i in range(len(needles)):\n        for j in range(i+2, len(needles)):\n            if needles[i][1][0] == needles[j][0][0] and needles[i][1][1] == needles[j][0][1]:\n                return \"Floor closed chains\"\n\n    return \"No true closed chains\\nNo floor closed chains\""
    },
    {
        "number": 2720,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    R, C = map(int, stdin.split()[0:2])\n    maze = []\n    for i in range(R):\n        maze.append(list(stdin.split()[i+2]))\n\n    # count odd and even squares\n    odd_squares = 0\n    even_squares = 0\n    for i in range(R):\n        for j in range(C):\n            if (i+j) % 2 == 0:\n                even_squares += 1\n            else:\n                odd_squares += 1\n\n    # count forward and backward slashes\n    forward_slashes = 0\n    backward_slashes = 0\n    for i in range(R):\n        for j in range(C):\n            if maze[i][j] == '/':\n                forward_slashes += 1\n            elif maze[i][j] == '\\\\':\n                backward_slashes += 1\n\n    # determine minimum number of walls to remove\n    if forward_slashes == odd_squares and backward_slashes == even_squares:\n        return str(0)\n    elif forward_slashes == even_squares and backward_slashes == odd_squares:\n        return str(1)\n    else:\n        return str(2)"
    },
    {
        "number": 2721,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, l = map(int, stdin.split()[0:2])\n    M, L = map(int, stdin.split()[2:4])\n    t_m, t_l = map(int, stdin.split()[4:6])\n\n    if m == M and l == L:\n        return \"possible\"\n\n    if m == M and l!= L:\n        if t_m <= L - l:\n            return \"possible\"\n        else:\n            return \"impossible\"\n\n    if l == L and m!= M:\n        if t_l <= M - m:\n            return \"possible\"\n        else:\n            return \"impossible\"\n\n    if t_m <= L - l and t_l <= M - m:\n        return \"possible\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 2722,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = stdin.split('\\n')\n    diamond_row, diamond_col = None, None\n    ice_castles = []\n    for i in range(len(board)):\n        for j in range(len(board[i])):\n            if board[i][j] == 'D':\n                diamond_row, diamond_col = i, j\n            elif board[i][j] == 'I':\n                ice_castles.append((i, j))\n    if diamond_row is None or diamond_col is None:\n        return 'No solution'\n    if diamond_row == 0 and diamond_col == 0:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 0 and diamond_col == 7:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 7 and diamond_col == 0:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 7 and diamond_col == 7:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 0 and diamond_col == 1:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 0 and diamond_col == 6:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 7 and diamond_col == 1:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 7 and diamond_col == 6:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 1 and diamond_col == 0:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 1 and diamond_col == 7:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 6 and diamond_col == 0:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 6 and diamond_col == 7:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 2 and diamond_col == 2:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 2 and diamond_col == 5:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 5 and diamond_col == 2:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 5 and diamond_col == 5:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 3 and diamond_col == 3:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 3 and diamond_col == 4:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 4 and diamond_col == 3:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 4 and diamond_col == 4:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 3 and diamond_col == 2:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 3 and diamond_col == 5:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 4 and diamond_col == 2:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 4 and diamond_col == 5:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 2 and diamond_col == 3:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 2 and diamond_col == 4:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 5 and diamond_col == 3:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 5 and diamond_col == 4:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 1 and diamond_col == 2:\n        return 'FLFRXFLFRFLFRF'\n    if diamond_row == 1 and diamond_col == 5:\n        return 'FLFRXFLFRFLFRF"
    },
    {
        "number": 2723,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0:2])\n    formula = []\n    for i in range(R):\n        formula.append(stdin.split()[i])\n    # print(formula)\n    # print(R, C)\n    # print(formula[0])\n    # print(formula[1])\n    # print(formula[2])\n    # print(formula[3])\n    # print(formula[4])\n    # print(formula[5])\n    # print(formula[6])\n    # print(formula[7])\n    # print(formula[8])\n    # print(formula[9])\n    # print(formula[10])\n    # print(formula[11])\n    # print(formula[12])\n    # print(formula[13])\n    # print(formula[14])\n    # print(formula[15])\n    # print(formula[16])\n    # print(formula[17])\n    # print(formula[18])\n    # print(formula[19])\n    # print(formula[20])\n    # print(formula[21])\n    # print(formula[22])\n    # print(formula[23])\n    # print(formula[24])\n    # print(formula[25])\n    # print(formula[26])\n    # print(formula[27])\n    # print(formula[28])\n    # print(formula[29])\n    # print(formula[30])\n    # print(formula[31])\n    # print(formula[32])\n    # print(formula[33])\n    # print(formula[34])\n    # print(formula[35])\n    # print(formula[36])\n    # print(formula[37])\n    # print(formula[38])\n    # print(formula[39])\n    # print(formula[40])\n    # print(formula[41])\n    # print(formula[42])\n    # print(formula[43])\n    # print(formula[44])\n    # print(formula[45])\n    # print(formula[46])\n    # print(formula[47])\n    # print(formula[48])\n    # print(formula[49])\n    # print(formula[50])\n    # print(formula[51])\n    # print(formula[52])\n    # print(formula[53])\n    # print(formula[54])\n    # print(formula[55])\n    # print(formula[56])\n    # print(formula[57])\n    # print(formula[58])\n    # print(formula[59])\n    # print(formula[60])\n    # print(formula[61])\n    # print(formula[62])\n    # print(formula[63])\n    # print(formula[64])\n    # print(formula[65])\n    # print(formula[66])\n    # print(formula[67])\n    # print(formula[68])\n    # print(formula[69])\n    # print(formula[70])\n    # print(formula[71])\n    # print(formula[72])\n    # print(formula[73])\n    # print(formula[74])\n    # print(formula[75])\n    # print(formula[76])\n    # print(formula[77])\n    # print(formula[78])\n    # print(formula[79])\n    # print(formula[80])\n    # print(formula[81])\n    # print(formula[82])\n    # print(formula[83])\n    # print(formula[84])\n    # print(formula[85])\n    # print(formula[86])\n    # print(formula[87])\n    # print(formula[88])\n    # print(formula[89])\n    # print(formula[90])\n    # print(formula[91])\n    # print(formula[92])\n    # print(formula[93])\n    # print(formula[94])\n    # print(formula[95])\n    # print(formula[96])\n    # print(formula[97])\n    # print(formula[98])\n    # print(formula[99])\n    # print(formula[100])\n    # print(formula[101])\n    # print(formula[102])\n    # print(formula[103])\n    # print(formula[104])\n    # print(formula[105])\n    # print(formula[106])\n    # print(formula[107])"
    },
    {
        "number": 2724,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    students = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        students.append((x, y))\n    tutors = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        tutors.append((x, y))\n\n    # calculate distances\n    distances = []\n    for i in range(n):\n        for j in range(n):\n            dx = abs(students[i][0] - tutors[j][0])\n            dy = abs(students[i][1] - tutors[j][1])\n            distances.append((i, j, dx + dy))\n\n    # sort distances by distance\n    distances.sort(key=lambda x: x[2])\n\n    # find minimum distance\n    min_distance = distances[0][2]\n    for i in range(1, len(distances)):\n        if distances[i][2] > min_distance:\n            break\n        min_distance = distances[i][2]\n\n    return str(min_distance)"
    },
    {
        "number": 2725,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = [int(line.strip()) for line in stdin]\n    if sum(weights) > 2**28:\n        return \"impossible\"\n    dp = [[0] * (1 << n) for _ in range(2**n)]\n    for i in range(1 << n):\n        dp[i][i] = weights[i]\n    for i in range(1, 1 << n):\n        for j in range(i):\n            if (i & j) == 0:\n                dp[i][j] = max(dp[i][j], dp[i ^ j][j] + dp[i ^ j][i ^ j])\n    if dp[-1][0] == 0:\n        return \"impossible\"\n    res = []\n    i = 1 << n - 1\n    while i > 0:\n        if dp[i][0] > 0:\n            res.append(dp[i][0])\n            i -= 1\n        else:\n            i -= 1 << (res.pop() - 1).bit_length()\n    return \"\\n\".join(map(str, res))"
    },
    {
        "number": 2726,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:]))\n    a.sort()\n    score = 0\n    for i in range(c):\n        score += a[i]\n    if score >= a[-1]:\n        return str(score)\n    else:\n        for i in range(c, n):\n            if a[i] > score:\n                score = a[i]\n            else:\n                break\n        return str(score)"
    },
    {
        "number": 2727,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, l = map(int, stdin.split())\n    g = list(map(int, stdin.readline().split()))\n\n    # count number of permutations with GIS g\n    MOD = 10**9 + 7\n    count = 1\n    for i in range(1, n):\n        count = (count * (n - i)) % MOD\n    count = pow(count, l, MOD)\n\n    # output result\n    return str(count)"
    },
    {
        "number": 2728,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sizes = list(map(int, stdin.split()[1:]))\n    sizes.sort()\n    for i in range(n):\n        if sizes[i] > 3:\n            return \"-1\"\n    for i in range(n-1):\n        if sizes[i] == sizes[i+1]:\n            return \"-1\"\n    for i in range(n-2):\n        if sizes[i] == sizes[i+2]:\n            return \"-1\"\n    for i in range(n-1):\n        if sizes[i] == sizes[i+1] - 1:\n            return str(i+1) + \" \" + str(i+2)\n    return \"-1\""
    },
    {
        "number": 2729,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    quotient = n / m\n    quotient_str = str(quotient)\n    if '.' in quotient_str:\n        quotient_str = quotient_str.rstrip('0').rstrip('.')\n    return quotient_str"
    },
    {
        "number": 2730,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K = map(int, stdin.split())\n    # create a list of boxes with unique numbers\n    boxes = list(range(1, N+1))\n    # create a list of players with unique numbers\n    players = list(range(1, N+1))\n    # shuffle the players\n    random.shuffle(players)\n    # create a dictionary to store the player and box number pairs\n    player_box_dict = {}\n    # assign each player and box a unique number\n    for i in range(N):\n        player_box_dict[players[i]] = boxes[i]\n    # create a list to store the player's opening order\n    opening_order = []\n    # assign the first player to open the box with the same number as themselves\n    opening_order.append(players[0])\n    # create a list to store the player's opening history\n    opening_history = [players[0]]\n    # create a list to store the player's winning history\n    winning_history = []\n    # loop through the boxes\n    for i in range(K):\n        # get the player who opened the last box\n        last_player = opening_order[-1]\n        # get the box number of the last player\n        last_box = player_box_dict[last_player]\n        # get the player who should open the next box\n        next_player = None\n        for player in players:\n            if player!= last_player:\n                if player_box_dict[player] in boxes:\n                    next_player = player\n                    break\n        # if there is no next player, the game is over\n        if next_player is None:\n            break\n        # add the next player to the opening order\n        opening_order.append(next_player)\n        # add the next player to the opening history\n        opening_history.append(next_player)\n        # remove the last player from the boxes list\n        boxes.remove(last_box)\n        # if the next player has found their own number, the game is over\n        if player_box_dict[next_player] == next_player:\n            break\n    # if all players have found their own number, the game is over\n    if len(boxes) == 0:\n        # calculate the odds of winning\n        odds = 1\n        for i in range(N):\n            odds *= (K/N)**i\n        # calculate the chances of winning\n        chances = odds/(N**K)\n        # return the chances as a string\n        return str(chances)\n    # if the game is not over, the chances of winning are 0\n    else:\n        return \"0\""
    },
    {
        "number": 2731,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Split the input string into a list of characters\n    arr = list(stdin)\n    # Initialize variables for tracking the current indentation level and the current line number\n    indent = 0\n    line = 1\n    # Initialize a list to store the modified array\n    modified_arr = []\n    # Loop through each character in the input array\n    for i in range(len(arr)):\n        # If the current character is a curly brace, add a new line and increase the indentation level\n        if arr[i] == '{':\n            modified_arr.append('\\n' +''* indent)\n            line += 1\n            indent += 2\n        # If the current character is a comma, add a new line and add the appropriate indentation\n        elif arr[i] == ',':\n            modified_arr.append(',\\n' +''* indent)\n            line += 1\n        # If the current character is a closing curly brace, add a new line and decrease the indentation level\n        elif arr[i] == '}':\n            modified_arr.append('\\n' +''* (indent - 2))\n            line += 1\n            indent -= 2\n        # If the current character is not a curly brace, comma, or closing curly brace, add it to the modified array\n        else:\n            modified_arr.append(arr[i])\n    # Join the modified array into a string and return it\n    return ''.join(modified_arr)"
    },
    {
        "number": 2732,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    W = float(stdin)\n    r1 = 1\n    r2 = 1\n    v1 = 1\n    v2 = 2\n    a1 = 0\n    a2 = 0\n    t1 = 0\n    t2 = 0\n    while t1 < W:\n        t1 += 1\n        t2 += 1\n        x1 = r1 * math.cos(t1)\n        y1 = r1 * math.sin(t1)\n        x2 = r2 * math.cos(t2)\n        y2 = r2 * math.sin(t2)\n        v1 = v1 - a1\n        v2 = v2 - a2\n        r1 = r1 + v1\n        r2 = r2 + v2\n    return round(math.sqrt((x1 - x2)**2 + (y1 - y2)**2), 4)"
    },
    {
        "number": 2733,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    droplets = []\n    for i in range(1, n+1):\n        x, y, vx, vy, r = map(float, lines[i].split())\n        droplets.append((x, y, vx, vy, r))\n\n    # simulate motion\n    t = 0\n    while True:\n        # update positions and velocities\n        for i in range(n):\n            x, y, vx, vy, r = droplets[i]\n            x += vx*t\n            y += vy*t\n            droplets[i] = (x, y, vx, vy, r)\n\n        # check for agglomerations\n        for i in range(n):\n            for j in range(i+1, n):\n                xi, yi, vxi, vyi, ri = droplets[i]\n                xj, yj, vxj, vyj, rj = droplets[j]\n                if (xi-xj)**2 + (yi-yj)**2 <= (ri+rj)**2:\n                    # agglomerate droplets i and j\n                    x = (ri*xi + rj*xj) / (ri+rj)\n                    y = (ri*yi + rj*yj) / (ri+rj)\n                    vx = (ri*vxi + rj*vxj) / (ri+rj)\n                    vy = (ri*vyi + rj*vyj) / (ri+rj)\n                    r = (ri+rj) / 2\n                    droplets[i] = (x, y, vx, vy, r)\n                    droplets[j] = (x, y, vx, vy, r)\n                    n -= 1\n                    break\n\n        # check for final time\n        if n == 1:\n            for i in range(n):\n                xi, yi, vxi, vyi, ri = droplets[i]\n                if abs(vxi) > 1e-3 or abs(vyi) > 1e-3:\n                    return f'{n} {t:.1f}'\n            return f'{n} 0.0'\n\n        # increment time\n        t += 1e-3"
    },
    {
        "number": 2734,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    if k == 1:\n        return str(n+1)\n    if n == 0:\n        return str(2**k-1)\n    if n == 2**k-1:\n        return str(2**(k+1)-1)\n    if n == 2**(k-1)-1:\n        return str(2**(k-1))\n    if n == 2**(k-1):\n        return str(2**(k-1)+1)\n    if n == 2**(k-2):\n        return str(2**(k-2)+2)\n    if n == 2**(k-3):\n        return str(2**(k-3)+3)\n    if n == 2**(k-4):\n        return str(2**(k-4)+4)\n    if n == 2**(k-5):\n        return str(2**(k-5)+5)\n    if n == 2**(k-6):\n        return str(2**(k-6)+6)\n    if n == 2**(k-7):\n        return str(2**(k-7)+7)\n    if n == 2**(k-8):\n        return str(2**(k-8)+8)\n    if n == 2**(k-9):\n        return str(2**(k-9)+9)\n    if n == 2**(k-10):\n        return str(2**(k-10)+10)\n    if n == 2**(k-11):\n        return str(2**(k-11)+11)\n    if n == 2**(k-12):\n        return str(2**(k-12)+12)\n    if n == 2**(k-13):\n        return str(2**(k-13)+13)\n    if n == 2**(k-14):\n        return str(2**(k-14)+14)\n    if n == 2**(k-15):\n        return str(2**(k-15)+15)\n    if n == 2**(k-16):\n        return str(2**(k-16)+16)\n    if n == 2**(k-17):\n        return str(2**(k-17)+17)\n    if n == 2**(k-18):\n        return str(2**(k-18)+18)\n    if n == 2**(k-19):\n        return str(2**(k-19)+19)\n    if n == 2**(k-20):\n        return str(2**(k-20)+20)\n    if n == 2**(k-21):\n        return str(2**(k-21)+21)\n    if n == 2**(k-22):\n        return str(2**(k-22)+22)\n    if n == 2**(k-23):\n        return str(2**(k-23)+23)\n    if n == 2**(k-24):\n        return str(2**(k-24)+24)\n    if n == 2**(k-25):\n        return str(2**(k-25)+25)\n    if n == 2**(k-26):\n        return str(2**(k-26)+26)\n    if n == 2**(k-27):\n        return str(2**(k-27)+27)\n    if n == 2**(k-28):\n        return str(2**(k-28)+28)\n    if n == 2**(k-29):\n        return str(2**(k-29)+29)\n    if n == 2**(k-30):\n        return str(2**(k-30)+30)\n    if n == 2**(k-31):\n        return str(2**(k-31)+31)\n    if n == 2**(k-32):\n        return str(2**(k-32)+32)\n    if n == 2**(k-33):\n        return str(2**(k-33)+33)\n    if n == 2**(k-34):\n        return str(2**(k-34)+34)\n    if n == 2**(k-35):\n        return str(2**(k-35)+35)\n    if n == 2**(k-36):\n        return str(2**(k-36)+36)\n    if n == 2**(k-37):\n        return str(2**(k-37)+3"
    },
    {
        "number": 2735,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    start = stdin.split('\\n')[0]\n    target = stdin.split('\\n')[1]\n    n = len(start)\n    dp = [[0]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for gap in range(1, n):\n        for i in range(n-gap):\n            j = i+gap\n            if start[i] == target[j]:\n                dp[i][j] = dp[i+1][j-1]\n            else:\n                dp[i][j] = float('inf')\n                for k in range(i, j):\n                    temp = dp[i][k] + dp[k+1][j] + 1\n                    if temp < dp[i][j]:\n                        dp[i][j] = temp\n    return dp[0][n-1]"
    },
    {
        "number": 2736,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    x, y = map(int, stdin.split())\n    heights = []\n    for i in range(y):\n        heights.append(list(map(int, stdin.split())))\n\n    # Find the highest cell\n    highest_cell = 0\n    for i in range(y):\n        for j in range(x):\n            if heights[i][j] > highest_cell:\n                highest_cell = heights[i][j]\n\n    # Count the number of cells that can collect water\n    count = 0\n    for i in range(y):\n        for j in range(x):\n            if heights[i][j] >= highest_cell:\n                # Check if the cell can collect water\n                can_collect_water = True\n                for di in range(-1, 2):\n                    for dj in range(-1, 2):\n                        if di == 0 and dj == 0:\n                            continue\n                        ni = i + di\n                        nj = j + dj\n                        if ni < 0 or ni >= y or nj < 0 or nj >= x:\n                            continue\n                        if heights[ni][nj] < heights[i][j]:\n                            can_collect_water = False\n                            break\n                if can_collect_water:\n                    count += 1\n\n    # Output the result\n    return str(count)"
    },
    {
        "number": 2737,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, s = map(int, stdin.readline().split())\n    p = list(map(int, stdin.readline().split()))\n    edges = []\n    for _ in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        edges.append((u-1, v-1, w))\n    shelters = []\n    for _ in range(s):\n        u, c = map(int, stdin.readline().split())\n        shelters.append((u-1, c))\n\n    # build graph\n    graph = [[] for _ in range(n)]\n    for u, v, w in edges:\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n\n    # compute distances\n    dist = [float('inf')] * n\n    dist[0] = 0\n    visited = [False] * n\n    while True:\n        u = min(range(n), key=lambda u: dist[u])\n        if visited[u]:\n            break\n        visited[u] = True\n        for v, w in graph[u]:\n            if dist[u] + w < dist[v]:\n                dist[v] = dist[u] + w\n\n    # assign people to shelters\n    shelter_dist = [float('inf')] * n\n    for u, c in shelters:\n        shelter_dist[u] = 0\n    for u in range(n):\n        for v, w in graph[u]:\n            if dist[u] + w < shelter_dist[v]:\n                shelter_dist[v] = dist[u] + w\n\n    # compute minimum time\n    time = 0\n    for u, c in shelters:\n        time += max(0, shelter_dist[u] - dist[u])\n\n    return str(time)"
    },
    {
        "number": 2738,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    gears = []\n    for i in range(n):\n        x, y, r = map(int, stdin.readline().strip().split())\n        gears.append((x, y, r))\n    source = gears[0]\n    target = gears[-1]\n    dx, dy = target[0] - source[0], target[1] - source[1]\n    d = (dx**2 + dy**2)**0.5\n    if d == 0:\n        return \"0\"\n    if d < source[2] + target[2]:\n        return \"-1\"\n    if d == source[2] + target[2]:\n        return \"1 1\"\n    if d == source[2] + target[2] + 2*target[2]:\n        return \"2 1\"\n    if d == source[2] + target[2] + 3*target[2]:\n        return \"3 1\"\n    if d == source[2] + target[2] + 4*target[2]:\n        return \"4 1\"\n    if d == source[2] + target[2] + 5*target[2]:\n        return \"5 1\"\n    if d == source[2] + target[2] + 6*target[2]:\n        return \"6 1\"\n    if d == source[2] + target[2] + 7*target[2]:\n        return \"7 1\"\n    if d == source[2] + target[2] + 8*target[2]:\n        return \"8 1\"\n    if d == source[2] + target[2] + 9*target[2]:\n        return \"9 1\"\n    if d == source[2] + target[2] + 10*target[2]:\n        return \"10 1\"\n    if d == source[2] + target[2] + 11*target[2]:\n        return \"11 1\"\n    if d == source[2] + target[2] + 12*target[2]:\n        return \"12 1\"\n    if d == source[2] + target[2] + 13*target[2]:\n        return \"13 1\"\n    if d == source[2] + target[2] + 14*target[2]:\n        return \"14 1\"\n    if d == source[2] + target[2] + 15*target[2]:\n        return \"15 1\"\n    if d == source[2] + target[2] + 16*target[2]:\n        return \"16 1\"\n    if d == source[2] + target[2] + 17*target[2]:\n        return \"17 1\"\n    if d == source[2] + target[2] + 18*target[2]:\n        return \"18 1\"\n    if d == source[2] + target[2] + 19*target[2]:\n        return \"19 1\"\n    if d == source[2] + target[2] + 20*target[2]:\n        return \"20 1\"\n    if d == source[2] + target[2] + 21*target[2]:\n        return \"21 1\"\n    if d == source[2] + target[2] + 22*target[2]:\n        return \"22 1\"\n    if d == source[2] + target[2] + 23*target[2]:\n        return \"23 1\"\n    if d == source[2] + target[2] + 24*target[2]:\n        return \"24 1\"\n    if d == source[2] + target[2] + 25*target[2]:\n        return \"25 1\"\n    if d == source[2] + target[2] + 26*target[2]:\n        return \"26 1\"\n    if d == source[2] + target[2] + 27*target[2]:\n        return \"27 1\"\n    if d == source[2] + target[2] + 28*target[2]:\n        return \"28 1\"\n    if d == source[2] + target[2] + 29*target[2]:\n        return \"29 1\"\n    if d == source[2] + target[2] + 30*target[2]:\n        return \"30 1\"\n    if d == source[2] + target["
    },
    {
        "number": 2739,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    bacteria = list(map(int, stdin.split()[1:]))\n    remain = 1\n    for i in range(n):\n        if bacteria[i] > remain:\n            return \"error\"\n        remain = (remain * 2) % (10**9+7)\n    return remain"
    },
    {
        "number": 2740,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, w, h = map(int, stdin.split())\n    MOD = 10**9 + 7\n    dp = [[0] * (w+1) for _ in range(h+1)]\n    dp[0][0] = 1\n    for i in range(n):\n        for j in range(h+1):\n            for k in range(w+1):\n                if j == 0:\n                    dp[j][k] = dp[j][k] + dp[j][k-1]\n                elif k == 0:\n                    dp[j][k] = dp[j][k] + dp[j-1][k]\n                else:\n                    dp[j][k] = dp[j][k] + dp[j-1][k] + dp[j][k-1] - dp[j-1][k-1]\n    return dp[h][w] % MOD"
    },
    {
        "number": 2741,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Convert input from octal to decimal\n    decimal = 0\n    for digit in stdin:\n        decimal = decimal * 8 + int(digit)\n    \n    # Convert decimal to hexadecimal\n    hexadecimal = \"\"\n    while decimal > 0:\n        remainder = decimal % 16\n        if remainder < 10:\n            hexadecimal = chr(remainder + ord('0')) + hexadecimal\n        else:\n            hexadecimal = chr(remainder - 10 + ord('A')) + hexadecimal\n        decimal //= 16\n    \n    # Remove leading zeroes\n    while len(hexadecimal) > 1 and hexadecimal[0] == '0':\n        hexadecimal = hexadecimal[1:]\n    \n    return hexadecimal"
    },
    {
        "number": 2742,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    coins = [1, 10, 100, 1000]\n    count = 0\n    for coin in coins:\n        count += n // coin\n        n %= coin\n    return count"
    },
    {
        "number": 2743,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split()[0].split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    # Find the center of gravity of the structure\n    x_sum = 0\n    y_sum = 0\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] in '.#':\n                x_sum += j\n                y_sum += i\n    x_avg = x_sum / (h * w)\n    y_avg = y_sum / (h * w)\n    # Check if the structure falls to the left or right\n    if x_avg < w // 2:\n        return 'left'\n    elif x_avg > w // 2:\n        return 'right'\n    else:\n        return 'balanced'"
    },
    {
        "number": 2744,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    routes = []\n    for i in range(m):\n        v, u, w = map(int, stdin.split()[0:3])\n        routes.append((v, u, w))\n    a = list(map(int, stdin.split()))\n    dp = [[float('inf')]*n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 0\n    for i in range(m):\n        v, u, w = routes[i]\n        dp[v-1][u-1] = w\n        dp[u-1][v-1] = w\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j])\n    res = []\n    for i in range(n):\n        res.append(dp[i][i] + a[i])\n    return''.join(map(str, res))"
    },
    {
        "number": 2745,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2746,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    version1, version2 = stdin.split()\n    version1 = version1.split('.')\n    version2 = version2.split('.')\n    for i in range(max(len(version1), len(version2))):\n        v1 = int(version1[i]) if i < len(version1) else 0\n        v2 = int(version2[i]) if i < len(version2) else 0\n        if v1 > v2:\n            return 1\n        elif v1 < v2:\n            return -1\n    return 0"
    },
    {
        "number": 2747,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    nums, target = stdin.split()\n    nums = list(map(int, nums.split(',')))\n    target = int(target)\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if nums[mid] == target:\n            start = mid\n            end = mid\n            while start > 0 and nums[start - 1] == target:\n                start -= 1\n            while end < len(nums) - 1 and nums[end + 1] == target:\n                end += 1\n            return [start, end]\n        elif nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return [-1, -1]"
    },
    {
        "number": 2748,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    mapping = {\n        '2': 'abc',\n        '3': 'def',\n        '4': 'ghi',\n        '5': 'jkl',\n        '6':'mno',\n        '7': 'pqrs',\n        '8': 'tuv',\n        '9': 'wxyz'\n    }\n    result = []\n    def backtrack(combination, next_digits):\n        if not next_digits:\n            result.append(combination)\n        else:\n            for letter in mapping[next_digits[0]]:\n                backtrack(combination + letter, next_digits[1:])\n    backtrack('', stdin)\n    return result"
    },
    {
        "number": 2749,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    H, W = map(int, stdin.readline().split())\n    N = int(stdin.readline())\n    a = list(map(int, stdin.readline().split()))\n\n    # Check if input is valid\n    if sum(a)!= H * W:\n        return \"Invalid input\"\n\n    # Initialize grid with zeros\n    grid = [[0] * W for _ in range(H)]\n\n    # Initialize color counter\n    color_count = [0] * (N + 1)\n\n    # Initialize color index\n    color_index = 1\n\n    # Initialize queue with starting point\n    queue = [(0, 0)]\n\n    # BFS to paint squares\n    while queue:\n        i, j = queue.pop(0)\n        if grid[i][j]!= 0:\n            continue\n        grid[i][j] = color_index\n        color_count[color_index] += 1\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < H and 0 <= nj < W and grid[ni][nj] == 0:\n                queue.append((ni, nj))\n\n    # Check if colors are valid\n    for i in range(1, N + 1):\n        if color_count[i]!= a[i - 1]:\n            return \"Invalid input\"\n\n    # Print grid\n    for row in grid:\n        print(\" \".join(map(str, row)))\n\n    return \"\""
    },
    {
        "number": 2750,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, B = map(int, stdin.split())\n    A = list(map(int, stdin.readline().split()))\n\n    # count subsequences with median equal to B\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N+1):\n            subseq = A[i:j]\n            subseq.sort()\n            if len(subseq) % 2 == 0:\n                median = (subseq[len(subseq)//2] + subseq[len(subseq)//2-1]) / 2\n            else:\n                median = subseq[len(subseq)//2]\n            if median == B:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 2751,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    seq = list(map(int, stdin.readline().strip().split()))\n\n    # initialize variables\n    max_score = 0\n    min_operations = float('inf')\n\n    # iterate over all possible pairs of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            # find prime factor of seq[i]\n            prime_factor = None\n            for p in range(2, int(seq[i]**0.5)+1):\n                if seq[i] % p == 0:\n                    prime_factor = p\n                    break\n\n            # if seq[i] is not divisible by a prime factor, skip this pair\n            if prime_factor is None:\n                continue\n\n            # perform operations\n            seq[i] //= prime_factor\n            seq[j] *= prime_factor\n\n            # calculate score and update max_score and min_operations\n            score = seq[i]\n            for num in seq:\n                score = math.gcd(score, num)\n            if score > max_score:\n                max_score = score\n                min_operations = min(min_operations, i+j+1)\n\n            # undo operations\n            seq[i] *= prime_factor\n            seq[j] //= prime_factor\n\n    # print output\n    return f\"{max_score} {min_operations}\""
    },
    {
        "number": 2752,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    a = list(map(int, stdin.split()[2:2+n]))\n    b = list(map(int, stdin.split()[2+n:2+2*n]))\n    w = list(stdin.split()[2+2*n:])\n    happiness = 0\n    for i in range(n):\n        if w[i][0] == 'S' and w[i][1] == 'S' and w[i][2] == 'S':\n            happiness += 1\n        elif w[i][0] == 'R' and w[i][1] == 'R' and w[i][2] == 'R':\n            happiness += 1\n        else:\n            happiness += 2\n    return str(happiness)"
    },
    {
        "number": 2753,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    first_flash, second_flash, first_interval, second_interval = map(lambda x: tuple(map(int, x.split(':'))), stdin.split('\\n'))\n\n    # calculate time of first same-minute flash\n    first_minute = first_flash[1]\n    first_hour = first_flash[0]\n    second_minute = second_flash[1]\n    second_hour = second_flash[0]\n    if first_minute == second_minute:\n        if first_hour == second_hour:\n            return 'Never'\n        else:\n            first_hour += 1\n            first_minute = 0\n    else:\n        first_minute += first_interval[1]\n        if first_minute >= 60:\n            first_hour += 1\n            first_minute -= 60\n        first_hour += first_interval[0]\n        if first_hour >= 24:\n            first_hour -= 24\n\n    # calculate weekday of first same-minute flash\n    weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    first_weekday = (first_flash[0] + first_flash[1] + first_flash[2] + first_flash[3]) % 7\n    first_weekday = weekdays[first_weekday]\n\n    # format output\n    first_flash_str = f'{first_hour:02d}:{first_minute:02d}'\n    return f'{first_weekday}\\n{first_flash_str}'"
    },
    {
        "number": 2754,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, y_low, y_high = map(int, stdin.split())\n    if y_low > y_high:\n        return \"impossible\"\n    if y_low == y_high:\n        return \"0 inf\"\n    k_min = 0\n    k_max = 1000000\n    while True:\n        y = round(10 * x ** 0.5)\n        if y >= y_low and y <= y_high:\n            return f\"{k_min} {k_max}\"\n        if y < y_low:\n            k_max = k_min + (y_low - y) // 10 + 1\n            k_min += 1\n        else:\n            k_min = k_max - (y - y_high) // 10 + 1\n            k_max -= 1\n        if k_min > k_max:\n            return \"impossible\""
    },
    {
        "number": 2755,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    paths = set()\n    for i in range(m):\n        u, v = map(int, stdin.readline().split())\n        paths.add((u, v))\n    if len(paths) < n - 1:\n        return 'impossible'\n    hives = set()\n    for i in range(n):\n        hives.add(i)\n    for path in paths:\n        if path[0] in hives and path[1] in hives:\n            hives.remove(path[0])\n            hives.remove(path[1])\n    return len(hives)"
    },
    {
        "number": 2756,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, e = map(int, stdin.split()[0:3])\n    dungeon = stdin.split('\\n')[1:n+1]\n    player_pos = None\n    creeper_pos = None\n    exit_pos = None\n    obstacles = set()\n    for i in range(n):\n        for j in range(m):\n            if dungeon[i][j] == 'P':\n                player_pos = (i, j)\n            elif dungeon[i][j] == 'C':\n                creeper_pos = (i, j)\n            elif dungeon[i][j] == 'E':\n                exit_pos = (i, j)\n            elif dungeon[i][j] == 'X':\n                obstacles.add((i, j))\n    if player_pos is None or creeper_pos is None or exit_pos is None:\n        return \"you're toast\"\n    visited = set()\n    queue = [(player_pos, creeper_pos, 0)]\n    while queue:\n        player_pos, creeper_pos, dist = queue.pop(0)\n        if player_pos == exit_pos:\n            return str(dist)\n        if (player_pos, creeper_pos) in visited:\n            continue\n        visited.add((player_pos, creeper_pos))\n        for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            new_player_pos = (player_pos[0]+dx, player_pos[1]+dy)\n            if new_player_pos in obstacles:\n                continue\n            new_creeper_pos = (creeper_pos[0]+dx, creeper_pos[1]+dy)\n            if new_creeper_pos in obstacles:\n                continue\n            if abs(new_player_pos[0]-new_creeper_pos[0]) <= e and abs(new_player_pos[1]-new_creeper_pos[1]) <= e:\n                continue\n            if new_player_pos == new_creeper_pos:\n                continue\n            if new_player_pos[0] < 0 or new_player_pos[0] >= n or new_player_pos[1] < 0 or new_player_pos[1] >= m:\n                continue\n            if new_creeper_pos[0] < 0 or new_creeper_pos[0] >= n or new_creeper_pos[1] < 0 or new_creeper_pos[1] >= m:\n                continue\n            if new_player_pos == creeper_pos:\n                queue.append((new_player_pos, new_creeper_pos, dist+1))\n            else:\n                queue.append((new_player_pos, new_creeper_pos, dist+1))\n                queue.append((player_pos, new_creeper_pos, dist+1))\n    return \"you're toast\""
    },
    {
        "number": 2757,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    if n == 1:\n        return str(len(values))\n    if n == 2:\n        return str(len(values) // 2)\n    # create a list of all possible values of x_0, x_1,..., x_{n-1}\n    x_values = [i for i in range(2**n)]\n    # create a list of all possible edges\n    edges = [(i, values[i]) for i in range(2**n)]\n    # create a list of all possible vertices\n    vertices = [i for i in range(2**n)]\n    # create a list of all possible roots\n    roots = [i for i in range(2**n)]\n    # create a list of all possible leafs\n    leafs = [i for i in range(2**n)]\n    # create a list of all possible pairs of vertices\n    pairs = [(i, j) for i in range(2**n) for j in range(2**n)]\n    # create a list of all possible triples of vertices\n    triples = [(i, j, k) for i in range(2**n) for j in range(2**n) for k in range(2**n)]\n    # create a list of all possible quadruples of vertices\n    quadruples = [(i, j, k, l) for i in range(2**n) for j in range(2**n) for k in range(2**n) for l in range(2**n)]\n    # create a list of all possible quintuples of vertices\n    quintuples = [(i, j, k, l, m) for i in range(2**n) for j in range(2**n) for k in range(2**n) for l in range(2**n) for m in range(2**n)]\n    # create a list of all possible sextuples of vertices\n    sextuples = [(i, j, k, l, m, n) for i in range(2**n) for j in range(2**n) for k in range(2**n) for l in range(2**n) for m in range(2**n) for n in range(2**n)]\n    # create a list of all possible septuples of vertices\n    septuples = [(i, j, k, l, m, n, o) for i in range(2**n) for j in range(2**n) for k in range(2**n) for l in range(2**n) for m in range(2**n) for n in range(2**n) for o in range(2**n)]\n    # create a list of all possible octuples of vertices\n    octuples = [(i, j, k, l, m, n, o, p) for i in range(2**n) for j in range(2**n) for k in range(2**n) for l in range(2**n) for m in range(2**n) for n in range(2**n) for o in range(2**n) for p in range(2**n)]\n    # create a list of all possible nonuples of vertices\n    nonuples = [(i, j, k, l, m, n, o, p, q) for i in range(2**n) for j in range(2**n) for k in range(2**n) for l in range(2**n) for m in range(2**n) for n in range(2**n) for o in range(2**n) for p in range(2**n) for q in range(2**n)]\n    # create a list of all possible decuples of vertices\n    decuples = [(i, j, k, l, m, n, o, p, q, r) for i in range(2**n) for j in range(2**n) for k in range(2**n) for l in range(2**n) for m in range(2**n) for n in range(2**n) for o in range(2**n) for p in range(2**n) for q in range(2**n) for r in range(2**n)]\n    # create a list of all possible undecuples of vertices\n    undecuples = [(i, j, k, l, m, n, o, p, q, r, s) for i in range(2**n) for j in range(2**n) for k in range(2**n) for l in"
    },
    {
        "number": 2758,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    female_color = stdin.split()[0]\n    male_color = stdin.split()[1]\n\n    # define possible gene combinations\n    black_dominant = ['B-', 'bb']\n    black_recessive = ['bB', 'bb']\n    red_dominant = ['O', 'o']\n    red_recessive = ['oO', 'oo']\n    dilution_dominant = ['D-', 'dd']\n    dilution_recessive = ['dD', 'dd']\n\n    # define possible offspring colors\n    offspring_colors = []\n\n    # handle black gene\n    if female_color[0] == 'B':\n        if male_color[0] == 'B':\n            offspring_colors.append(('B-', 0.5))\n            offspring_colors.append(('bb', 0.5))\n        else:\n            offspring_colors.append(('B-', 1))\n    else:\n        if male_color[0] == 'B':\n            offspring_colors.append(('bb', 1))\n        else:\n            offspring_colors.append(('B-', 0.5))\n            offspring_colors.append(('bb', 0.5))\n\n    # handle red gene\n    if female_color[1] == 'O':\n        if male_color[1] == 'O':\n            offspring_colors.append(('O', 0.5))\n            offspring_colors.append(('o', 0.5))\n        else:\n            offspring_colors.append(('O', 1))\n    else:\n        if male_color[1] == 'O':\n            offspring_colors.append(('o', 1))\n        else:\n            offspring_colors.append(('O', 0.5))\n            offspring_colors.append(('o', 0.5))\n\n    # handle dilution gene\n    if female_color[2] == 'D':\n        if male_color[2] == 'D':\n            offspring_colors.append(('D-', 0.5))\n            offspring_colors.append(('dd', 0.5))\n        else:\n            offspring_colors.append(('D-', 1))\n    else:\n        if male_color[2] == 'D':\n            offspring_colors.append(('dd', 1))\n        else:\n            offspring_colors.append(('D-', 0.5))\n            offspring_colors.append(('dd', 0.5))\n\n    # handle Tortie coloring\n    if female_color[3] == 'O':\n        if male_color[3] == 'O':\n            offspring_colors.append(('O', 0.5))\n            offspring_colors.append(('o', 0.5))\n        else:\n            offspring_colors.append(('O', 1))\n    else:\n        if male_color[3] == 'O':\n            offspring_colors.append(('o', 1))\n        else:\n            offspring_colors.append(('O', 0.5))\n            offspring_colors.append(('o', 0.5))\n\n    # compute probabilities\n    total_prob = sum([prob for color, prob in offspring_colors])\n    offspring_colors = [(color, prob/total_prob) for color, prob in offspring_colors]\n\n    # sort by probability and name\n    offspring_colors.sort(key=lambda x: (-x[1], x[0]))\n\n    # format output\n    output = ''\n    for color, prob in offspring_colors:\n        output += f'{color} {prob:.9f}\\n'\n\n    return output"
    },
    {
        "number": 2759,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    tanks = []\n    for i in range(n):\n        r, c = map(int, stdin.readline().strip().split())\n        tanks.append((r, c))\n\n    # initialize variables\n    moves = []\n    visited = set()\n    for i in range(n):\n        for j in range(n):\n            visited.add((i, j))\n\n    # find shortest path\n    def dfs(tank):\n        if tank in visited:\n            return 0\n        visited.add(tank)\n        r, c = tank\n        min_moves = float('inf')\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:\n                min_moves = min(min_moves, dfs((nr, nc)) + 1)\n        visited.remove(tank)\n        return min_moves\n\n    min_moves = float('inf')\n    for tank in tanks:\n        min_moves = min(min_moves, dfs(tank))\n\n    # backtrack to find moves\n    visited = set()\n    for i in range(n):\n        for j in range(n):\n            visited.add((i, j))\n\n    def backtrack(tank):\n        if tank in visited:\n            return\n        visited.add(tank)\n        r, c = tank\n        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            nr, nc = r + dr, c + dc\n            if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in visited:\n                backtrack((nr, nc))\n                moves.append((tank, (dr, dc)))\n\n    for tank in tanks:\n        backtrack(tank)\n\n    # output result\n    print(min_moves)\n    for move in moves:\n        print(move[0][0] + 1, move[0][1] + 1, move[1][0], move[1][1])\n\n    return ''"
    },
    {
        "number": 2760,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split()))\n    swaps = [0] * n\n    for i in range(n):\n        if i % 2 == 0:\n            min_idx = i\n            for j in range(i+1, n):\n                if arr[j] < arr[min_idx]:\n                    min_idx = j\n            if min_idx!= i:\n                arr[i], arr[min_idx] = arr[min_idx], arr[i]\n                swaps[i//2] += 1\n        else:\n            max_idx = i\n            for j in range(i+1, n):\n                if arr[j] > arr[max_idx]:\n                    max_idx = j\n            if max_idx!= i:\n                arr[i], arr[max_idx] = arr[max_idx], arr[i]\n                swaps[i//2] += 1\n    return '\\n'.join(map(str, swaps))"
    },
    {
        "number": 2761,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    lines = lines[1:]\n    points = []\n    for line in lines:\n        x1, y1, x2, y2 = map(int, line.split())\n        points.append((x1, y1, x2, y2))\n    points.sort(key=lambda x: (x[0]-x[2])**2 + (x[1]-x[3])**2)\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                x1, y1, x2, y2 = points[i]\n                x3, y3, x4, y4 = points[j]\n                x5, y5, x6, y6 = points[k]\n                if (x1-x2)*(y3-y4) == (x3-x4)*(y1-y2) and (x1-x2)*(y5-y6) == (x5-x6)*(y1-y2):\n                    return 'no triangle'\n    max_perimeter = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                x1, y1, x2, y2 = points[i]\n                x3, y3, x4, y4 = points[j]\n                x5, y5, x6, y6 = points[k]\n                a = ((x2-x1)**2 + (y2-y1)**2)**0.5\n                b = ((x4-x3)**2 + (y4-y3)**2)**0.5\n                c = ((x6-x5)**2 + (y6-y5)**2)**0.5\n                if a+b > c and a+c > b and b+c > a:\n                    perimeter = a+b+c\n                    if perimeter > max_perimeter:\n                        max_perimeter = perimeter\n    return str(max_perimeter)"
    },
    {
        "number": 2762,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, G, k = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n\n    # Initialize variables\n    dp = [[float('inf') for _ in range(N)] for _ in range(G)]\n    dp[0][0] = 0\n\n    # Fill dp table\n    for i in range(G):\n        for j in range(N):\n            for g in range(G):\n                if g == i:\n                    continue\n                for s in range(j+1):\n                    dp[i][j] = min(dp[i][j], dp[g][s] + abs(a[s] - a[j])**k)\n\n    # Return minimum cost\n    return dp[G-1][N-1]"
    },
    {
        "number": 2763,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grille = []\n    for i in range(n):\n        grille.append(list(stdin.readline().strip()))\n    message = stdin.readline().strip()\n    if not all(len(set(row)) == n for row in grille):\n        return \"invalid grille\"\n    decrypted = \"\"\n    for i in range(n):\n        for j in range(n):\n            if grille[i][j] == '.':\n                decrypted += message[i*n+j]\n    for _ in range(2):\n        decrypted = \"\".join(decrypted[i*n+j] for j in range(n) for i in range(n))\n    return decrypted"
    },
    {
        "number": 2764,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    board = [list(line.strip()) for line in stdin.split('\\n')[:-1]]\n    diamond_row, diamond_col = None, None\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            if board[i][j] == 'D':\n                diamond_row, diamond_col = i, j\n                break\n        if diamond_row is not None:\n            break\n    if diamond_row is None:\n        return 'Bug!'\n    program = stdin.split('\\n')[-1]\n    turtle_row, turtle_col = len(board)-1, 0\n    turtle_dir = 0  # 0: right, 1: down, 2: left, 3: up\n    for instr in program:\n        if instr == 'F':\n            if turtle_dir == 0:\n                if board[turtle_row][turtle_col+1] == '.':\n                    turtle_col += 1\n                else:\n                    return 'Bug!'\n            elif turtle_dir == 1:\n                if board[turtle_row-1][turtle_col] == '.':\n                    turtle_row -= 1\n                else:\n                    return 'Bug!'\n            elif turtle_dir == 2:\n                if board[turtle_row][turtle_col-1] == '.':\n                    turtle_col -= 1\n                else:\n                    return 'Bug!'\n            elif turtle_dir == 3:\n                if board[turtle_row+1][turtle_col] == '.':\n                    turtle_row += 1\n                else:\n                    return 'Bug!'\n            else:\n                return 'Bug!'\n        elif instr == 'R':\n            turtle_dir = (turtle_dir+1) % 4\n        elif instr == 'L':\n            turtle_dir = (turtle_dir-1) % 4\n        elif instr == 'X':\n            if turtle_dir == 0:\n                if board[turtle_row][turtle_col+1] == 'I':\n                    board[turtle_row][turtle_col+1] = '.'\n                elif board[turtle_row][turtle_col+1] == '.':\n                    return 'Bug!'\n                else:\n                    return 'Bug!'\n            elif turtle_dir == 1:\n                if board[turtle_row-1][turtle_col] == 'I':\n                    board[turtle_row-1][turtle_col] = '.'\n                elif board[turtle_row-1][turtle_col] == '.':\n                    return 'Bug!'\n                else:\n                    return 'Bug!'\n            elif turtle_dir == 2:\n                if board[turtle_row][turtle_col-1] == 'I':\n                    board[turtle_row][turtle_col-1] = '.'\n                elif board[turtle_row][turtle_col-1] == '.':\n                    return 'Bug!'\n                else:\n                    return 'Bug!'\n            elif turtle_dir == 3:\n                if board[turtle_row+1][turtle_col] == 'I':\n                    board[turtle_row+1][turtle_col] = '.'\n                elif board[turtle_row+1][turtle_col] == '.':\n                    return 'Bug!'\n                else:\n                    return 'Bug!'\n            else:\n                return 'Bug!'\n        else:\n            return 'Bug!'\n    if turtle_row == diamond_row and turtle_col == diamond_col:\n        return 'Diamond!'\n    else:\n        return 'Bug!'"
    },
    {
        "number": 2765,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *coins = map(int, stdin.split())\n    coins.sort()\n    if coins[-1] > sum(coins) - coins[-1]:\n        return \"canonical\"\n    else:\n        return \"non-canonical\""
    },
    {
        "number": 2766,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, p = map(float, stdin.split())\n    prob_draw = 1 - (1 - p)**k\n    prob_win = (1 - p)**(k-1)\n    prob_lose = 1 - prob_win\n    prob_win_draw = prob_win * prob_draw\n    prob_lose_draw = prob_lose * prob_draw\n    prob_win_lose = prob_win * prob_lose\n    prob_lose_lose = prob_lose * prob_lose\n    prob_win_win = prob_win * prob_win\n    prob_lose_win = prob_lose * prob_win\n    prob_win_win_draw = prob_win_win * prob_draw\n    prob_lose_win_draw = prob_lose_win * prob_draw\n    prob_win_lose_draw = prob_win_lose * prob_draw\n    prob_lose_lose_draw = prob_lose_lose * prob_draw\n    prob_win_win_lose = prob_win_win * prob_lose\n    prob_lose_win_lose = prob_lose_win * prob_lose\n    prob_win_lose_lose = prob_win_lose * prob_lose\n    prob_lose_lose_lose = prob_lose_lose * prob_lose\n    prob_win_win_win = prob_win_win * prob_win\n    prob_lose_win_win = prob_lose_win * prob_win\n    prob_win_lose_win = prob_win_lose * prob_win\n    prob_lose_lose_win = prob_lose_lose * prob_win\n    prob_win_win_win_draw = prob_win_win_win * prob_draw\n    prob_lose_win_win_draw = prob_lose_win_win * prob_draw\n    prob_win_lose_win_draw = prob_win_lose_win * prob_draw\n    prob_lose_lose_win_draw = prob_lose_lose_win * prob_draw\n    prob_win_win_lose_draw = prob_win_win_lose * prob_draw\n    prob_lose_win_lose_draw = prob_lose_win_lose * prob_draw\n    prob_win_lose_lose_draw = prob_win_lose_lose * prob_draw\n    prob_lose_lose_lose_draw = prob_lose_lose_lose * prob_draw\n    prob_win_win_win_lose = prob_win_win_win * prob_lose\n    prob_lose_win_win_lose = prob_lose_win_win * prob_lose\n    prob_win_lose_win_lose = prob_win_lose_win * prob_lose\n    prob_lose_lose_win_lose = prob_lose_lose_win * prob_lose\n    prob_win_win_lose_lose = prob_win_win_lose * prob_lose\n    prob_lose_win_lose_lose = prob_lose_win_lose * prob_lose\n    prob_win_lose_lose_lose = prob_win_lose_lose * prob_lose\n    prob_lose_lose_lose_lose = prob_lose_lose_lose * prob_lose\n    prob_win_win_win_win = prob_win_win_win * prob_win\n    prob_lose_win_win_win = prob_lose_win_win * prob_win\n    prob_win_lose_win_win = prob_win_lose_win * prob_win\n    prob_lose_lose_win_win = prob_lose_lose_win * prob_win\n    prob_win_win_lose_win = prob_win_win_lose * prob_win\n    prob_lose_win_lose_win = prob_lose_win_lose * prob_win\n    prob_win_lose_lose_win = prob_win_lose_lose * prob_win\n    prob_lose_lose_lose_win = prob_lose_lose_lose * prob_win\n    prob_win_win_win_win_draw = prob_win_win_win_win * prob_draw\n    prob_lose_win_win_win_draw = prob_lose_win_win_win * prob_draw\n    prob_win_lose_win_win_draw = prob_win_lose_win_win * prob_draw\n    prob_lose_lose_win_win_draw = prob_lose_lose_win_win * prob_draw\n    prob_win_win_lose_win_draw = prob_win_win_lose_win * prob_draw\n    prob_lose_win_lose_win_"
    },
    {
        "number": 2767,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    words = stdin.split('\\n')\n    n = int(words[0])\n    words = words[1:]\n    count = 0\n    for i in range(2**n):\n        sentence = ''\n        for j in range(n):\n            if (i >> j) & 1:\n                sentence += words[j]\n        if len(set(sentence)) == 26:\n            count += 1\n    return str(count)"
    },
    {
        "number": 2768,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    cubes = set()\n    for _ in range(M):\n        R, C = map(int, stdin.readline().split())\n        cubes.add((R, C))\n\n    # calculate minimum moves\n    moves = 0\n    for R in range(1, N+1):\n        for C in range(1, N+1):\n            if (R, C) not in cubes:\n                continue\n            for r in range(R, N+1):\n                if (r, C) in cubes:\n                    break\n            else:\n                continue\n            for c in range(C, N+1):\n                if (R, c) in cubes:\n                    break\n            else:\n                continue\n            moves += 1\n\n    return str(moves)"
    },
    {
        "number": 2769,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, q, s = map(int, stdin.split())\n    classical_problems = list(map(int, stdin.readline().split()))\n    creative_problems = list(map(int, stdin.readline().split()))\n    for i in range(p):\n        for j in range(i+1, p):\n            if abs(classical_problems[i] - classical_problems[j]) > s:\n                return -1\n    for i in range(q):\n        for j in range(i+1, q):\n            if abs(creative_problems[i] - creative_problems[j]) > s:\n                return -1\n    return max(abs(classical_problems[i] - classical_problems[i+1]) + abs(creative_problems[i] - creative_problems[i+1]) for i in range(p-1))"
    },
    {
        "number": 2770,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    degree, a, x = map(int, stdin.readline().split())\n    a = list(map(int, stdin.readline().split()))\n    x = list(map(int, stdin.readline().split()))\n    queries = int(stdin.readline())\n    queries = [list(map(int, stdin.readline().split())) for _ in range(queries)]\n\n    # Initialize recurrence\n    recurrence = [0] * (degree + 1)\n    recurrence[0] = a[0]\n    for i in range(1, degree + 1):\n        recurrence[i] = (a[i] - recurrence[i-1]) % 1000000007\n\n    # Initialize values\n    values = [0] * (degree + 1)\n    values[0] = x[0]\n    for i in range(1, degree + 1):\n        values[i] = (values[i-1] * a[i]) % 1000000007\n\n    # Solve queries\n    for query in queries:\n        t, m = query\n        result = (values[t] * pow(recurrence[t], m-2, m)) % m\n        print(result)\n\n    return \"\""
    },
    {
        "number": 2771,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    directions = stdin.readline().strip()\n    houses = list(range(1, n+1))\n    for i in range(n-1):\n        if directions[i] == 'L':\n            houses[i+1:] = houses[i+1:][::-1]\n    return''.join(map(str, houses))"
    },
    {
        "number": 2772,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    a, d = map(int, stdin.split()[0:2])\n    ascent = []\n    for i in range(a):\n        h, t = map(int, stdin.split()[0:2])\n        ascent.append((h, t))\n    descent = []\n    for i in range(d):\n        h, t = map(int, stdin.split()[0:2])\n        descent.append((h, t))\n\n    # compute total elevation gain and time\n    total_gain = sum(h for h, t in ascent)\n    total_time = sum(t for h, t in ascent)\n\n    # compute time at which monk occupies same spot\n    time = 0\n    for h, t in ascent:\n        time += t\n        if time >= total_time / 2:\n            break\n    for h, t in descent:\n        time += t\n        if time >= total_time / 2:\n            break\n\n    # output result\n    return str(time)"
    },
    {
        "number": 2773,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        a, b, d = map(int, stdin.split())\n        graph[a].append((b, d))\n        graph[b].append((a, d))\n    visited = [False] * n\n    stack = [(0, 0)]\n    while stack:\n        curr, dist = stack.pop()\n        if curr == n-1:\n            return str(dist)\n        if visited[curr]:\n            continue\n        visited[curr] = True\n        for next_node, next_dist in graph[curr]:\n            stack.append((next_node, dist+next_dist))\n    return \"impossible\""
    },
    {
        "number": 2774,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, s = map(int, stdin.split())\n    edges = []\n    for i in range(n-1):\n        a, b, d = map(int, stdin.split())\n        edges.append((a, b, d))\n    l = int(stdin.split()[0])\n    lamps = set(map(int, stdin.split()))\n    # build graph\n    graph = {}\n    for a, b, d in edges:\n        if a not in graph:\n            graph[a] = {}\n        if b not in graph:\n            graph[b] = {}\n        graph[a][b] = d\n        graph[b][a] = d\n    # find shortest path from 1 to all other nodes\n    dist = {1: 0}\n    prev = {}\n    for i in range(2, n+1):\n        dist[i], prev[i] = min((dist[j] + d, j) for j, d in graph[i].items() if j not in dist)\n    # find shortest path from 1 to all other nodes that use lamps\n    dist_lamps = {1: 0}\n    prev_lamps = {}\n    for i in range(2, n+1):\n        if i in lamps:\n            continue\n        dist_lamps[i], prev_lamps[i] = min((dist_lamps[j] + d, j) for j, d in graph[i].items() if j not in dist_lamps and j not in lamps)\n    # find shortest path from 1 to all other nodes that use lamps and run exactly s meters\n    dist_lamps_s = {1: 0}\n    prev_lamps_s = {}\n    for i in range(2, n+1):\n        if i in lamps:\n            continue\n        if dist_lamps[i] + s > dist[i]:\n            continue\n        dist_lamps_s[i], prev_lamps_s[i] = min((dist_lamps_s[j] + d, j) for j, d in graph[i].items() if j not in dist_lamps_s and j not in lamps)\n    # count number of additional lamps needed\n    count = 0\n    for i in range(2, n+1):\n        if i in lamps:\n            continue\n        if dist_lamps_s[i] + s > dist[i]:\n            continue\n        count += 1\n    return str(count)"
    },
    {
        "number": 2775,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, x_h, y_h, x_w, y_w = map(int, stdin.readline().split())\n    errands = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().split())\n        errands.append((x, y))\n    errands.sort()\n    count = 0\n    i = 0\n    while i < n:\n        x, y = errands[i]\n        if x == x_w and y == y_w:\n            break\n        if x == x_h and y == y_h:\n            count += 1\n        i += 1\n    return count"
    },
    {
        "number": 2776,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split())\n    prohibitions = set()\n    for _ in range(m):\n        a, b = map(int, stdin.readline().split())\n        prohibitions.add((a, b))\n        prohibitions.add((b, a))\n\n    # count number of possible combinations\n    count = 1\n    for i in range(1, n+1):\n        count *= n-i+1\n        count //= i\n        for j in range(i+1, n+1):\n            if (i, j) not in prohibitions and (j, i) not in prohibitions:\n                count *= n-j+1\n                count //= j\n\n    return str(count)"
    },
    {
        "number": 2777,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, n = map(int, stdin.split())\n    p = list(map(int, stdin.split()))\n    count = 0\n    for i in range(2**m):\n        x = [0] * n\n        for j in range(m):\n            if i & (1 << j):\n                x[p[i]] ^= 1 << j\n        if all(x[i]!= x[j] for i in range(n) for j in range(i+1, n)):\n            count += 1\n    return str(count % (10**9+7))"
    },
    {
        "number": 2778,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, K, T = map(int, stdin.split())\n    MOD = 1000000009\n    dp = [[0] * (T+1) for _ in range(N+1)]\n    dp[0][0] = 1\n    for i in range(1, N+1):\n        for j in range(T+1):\n            for k in range(1, K+1):\n                if j-k >= 0:\n                    dp[i][j] = (dp[i][j] + dp[i-1][j-k]) % MOD\n    return dp[N][T]"
    },
    {
        "number": 2779,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, c = map(int, stdin.readline().split())\n    grid = [stdin.readline().strip() for _ in range(m)]\n    costs = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    banks = []\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                banks.append((i, j))\n\n    # check if there is a way to prevent the robbers from escaping\n    for bank in banks:\n        visited = set()\n        queue = [(bank, 0)]\n        while queue:\n            cell, cost = queue.pop(0)\n            if cell in visited:\n                continue\n            visited.add(cell)\n            if cell[0] == 0 or cell[0] == m-1 or cell[1] == 0 or cell[1] == n-1:\n                return -1\n            for neighbor in [(cell[0]-1, cell[1]), (cell[0]+1, cell[1]), (cell[0], cell[1]-1), (cell[0], cell[1]+1)]:\n                if neighbor[0] < 0 or neighbor[0] >= m or neighbor[1] < 0 or neighbor[1] >= n:\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'B':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == '.':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'a':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'b':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'c':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'd':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'e':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'f':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'g':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'h':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'i':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'j':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'k':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'l':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] =='m':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'n':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'o':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'p':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'q':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'r':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] =='s':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 't':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'u':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'v':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'w':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'x':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'y':\n                    continue\n                if grid[neighbor[0]][neighbor[1]] == 'z':\n                    continue\n                if neighbor not in visited:\n                    queue.append((neighbor, cost + costs[ord(grid[neighbor[0]][neighbor[1]])-ord('a')+1]))\n\n    # calculate minimum cost of barricades\n    min_cost = 0\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 'B':\n                continue\n            if grid[i][j] == '.':\n                continue\n            min_cost += costs[ord(grid[i][j])-ord('a')+1]\n\n    return min_cost"
    },
    {
        "number": 2780,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, M = map(int, stdin.split())\n    if M == 1:\n        return '\\n'.join(['1.00000'] * N)\n    else:\n        prob = [0] * (M+1)\n        prob[1] = 1\n        for i in range(2, M+1):\n            prob[i] = (i-1) * prob[i-1] / i\n        prob = [str(round(p, 4)) for p in prob]\n        return '\\n'.join(prob)"
    },
    {
        "number": 2781,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.split())\n    grid = []\n    for i in range(r):\n        grid.append(list(map(int, stdin.split())))\n    max_depth = 0\n    for i in range(r):\n        for j in range(c):\n            if i == 0 or i == r-1 or j == 0 or j == c-1:\n                max_depth = max(max_depth, grid[i][j])\n            else:\n                max_depth = max(max_depth, grid[i][j], grid[i-1][j], grid[i+1][j], grid[i][j-1], grid[i][j+1])\n    return str(max_depth)"
    },
    {
        "number": 2782,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, r, c = map(int, stdin.split())\n    a = []\n    b = []\n    s = []\n    for i in range(n):\n        ai, bi, si = map(int, stdin.split())\n        a.append(ai)\n        b.append(bi)\n        s.append(si)\n    dp = [[0] * c for _ in range(r)]\n    for i in range(n):\n        for j in range(max(0, a[i]-s[i]+1), min(r, a[i]+s[i])):\n            for k in range(max(0, b[i]-s[i]+1), min(c, b[i]+s[i])):\n                dp[j][k] += 1\n    return max(sum(dp[i][j] for i in range(r)) for j in range(c))\n\nstdin = \"\"\"\n3 2 1\n1 1 0\n1 1 1\n2 1 0\n\"\"\"\n\nprint(solution(stdin)) # Output: 2"
    },
    {
        "number": 2783,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    shady_spots = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        shady_spots.append((x, y))\n    dorm, class_ = map(int, stdin.readline().strip().split())\n\n    # calculate sweat rates at each shady spot\n    sweat_rates = []\n    for x, y in shady_spots:\n        dist = ((x - dorm) ** 2 + (y - dorm) ** 2) ** 0.5\n        rate = 2 * dist\n        sweat_rates.append(rate)\n\n    # calculate total sweat rate at each shady spot\n    total_sweat_rates = [0]\n    for rate in sweat_rates:\n        total_sweat_rates.append(total_sweat_rates[-1] + rate)\n\n    # calculate total sweat rate at each class location\n    class_sweat_rates = []\n    for x, y in shady_spots:\n        dist = ((x - class_) ** 2 + (y - class_) ** 2) ** 0.5\n        rate = 2 * dist\n        class_sweat_rates.append(rate)\n\n    # find best path\n    best_path = []\n    best_sweat = float('inf')\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i == 0:\n                sweat = total_sweat_rates[j]\n            elif j == 0:\n                sweat = total_sweat_rates[i - 1]\n            else:\n                sweat = total_sweat_rates[i - 1] + total_sweat_rates[j] - total_sweat_rates[i] - total_sweat_rates[j - 1]\n            if sweat < best_sweat:\n                best_sweat = sweat\n                best_path = [i - 1] + best_path + [j - 1]\n\n    # print best path\n    if not best_path:\n        return '-'\n    else:\n        return''.join(map(str, best_path))"
    },
    {
        "number": 2784,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    num_pieces = int(lines[0])\n    pieces = []\n    for i in range(1, num_pieces+1):\n        piece = lines[i].strip().split()\n        pieces.append(piece)\n    start, end = lines[-1].strip().split()\n\n    # build graph\n    graph = {}\n    for piece in pieces:\n        for i in range(len(piece)-1):\n            if piece[i] not in graph:\n                graph[piece[i]] = []\n            graph[piece[i]].append(piece[i+1])\n            if piece[i+1] not in graph:\n                graph[piece[i+1]] = []\n            graph[piece[i+1]].append(piece[i])\n\n    # bfs to find route\n    queue = [(start, [start])]\n    while queue:\n        (node, path) = queue.pop(0)\n        if node == end:\n            return''.join(path)\n        for neighbor in graph[node]:\n            if neighbor not in path:\n                queue.append((neighbor, path + [neighbor]))\n\n    # no route found\n    return 'no route found'"
    },
    {
        "number": 2785,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, M = map(int, stdin.split())\n    c = list(map(int, stdin.readline().split()))\n    p = list(map(int, stdin.readline().split()))\n    dp = [float('inf')] * (M+1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(M+1):\n            if j >= c[i]:\n                dp[j] = min(dp[j], dp[j-c[i]] + p[i])\n    return dp[M]"
    },
    {
        "number": 2786,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(n):\n        if s[i] == '?' and (i == 0 or s[i-1]!= '(') and (i == n-1 or s[i+1]!= ')'):\n            s = s[:i] + '(' + s[i+1:]\n            count += 1\n    return str(count)"
    },
    {
        "number": 2787,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    n, m = map(int, lines[0].split())\n    start, target = lines[1].split()\n    airports = {}\n    for i in range(2, 2+n):\n        code, lat, lon = lines[i].split()\n        airports[code] = (float(lat), float(lon))\n    flights = []\n    for i in range(2+n, 2+n+m):\n        a, b = lines[i].split()\n        flights.append((a, b))\n\n    # calculate distances\n    distances = {}\n    for a, b in flights:\n        lat1, lon1 = airports[a]\n        lat2, lon2 = airports[b]\n        d = distance(lat1, lon1, lat2, lon2)\n        distances[(a, b)] = d\n        distances[(b, a)] = d\n\n    # calculate minimum shame\n    visited = set()\n    queue = [(start, 0)]\n    while queue:\n        city, shame = queue.pop(0)\n        if city == target:\n            return shame\n        if city in visited:\n            continue\n        visited.add(city)\n        for a, b in flights:\n            if a == city:\n                queue.append((b, shame + distances[(a, b)] + 100))\n            elif b == city:\n                queue.append((a, shame + distances[(a, b)] + 100))\n\n    # target unreachable\n    return -1\n\ndef"
    },
    {
        "number": 2788,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.splitlines()[0].split())\n    k, x, a, b = map(int, stdin.splitlines()[1].split())\n    if k*x < a:\n        return 'impossible'\n    if sum(s) > b:\n        return 'impossible'\n    if a > b:\n        return 'impossible'\n    if k*x > n:\n        return 'impossible'\n    if k*x == n:\n        return k*x\n    if k*x < n:\n        return min(k*x, n)\n\nstdin = \"\"\"\n7\n5 7 10 15 3 2 8\n20 3 30 40\n\"\"\"\n\nprint(solution(stdin)) # Output: 39"
    },
    {
        "number": 2789,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    if n == 1:\n        return \"1\"\n    elif n == 2:\n        return \"2\"\n    else:\n        return str(n//2 + 1)"
    },
    {
        "number": 2790,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, t = map(int, stdin.split())\n    knapsacks = list(map(int, stdin.split()))\n    knapsacks.sort()\n    min_time = max_time = sum_time = 0\n    for i in range(s):\n        min_time += i * t\n        max_time += (s - i - 1) * t\n        sum_time += (i + (s - i - 1)) * t\n    for i in range(n):\n        slot = knapsacks[i]\n        min_time += t\n        max_time += t\n        sum_time += 2 * t\n        min_time += (slot - i - 1) * t\n        max_time += (slot - i - 1) * t\n        sum_time += (2 * t + (slot - i - 1) * t)\n    min_time += (s - n) * t\n    max_time += (s - n) * t\n    sum_time += (s - n) * t\n    return f\"{min_time}\\n{max_time}\\n{sum_time/s}\""
    },
    {
        "number": 2791,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d = map(int, stdin.split())\n    a = list(map(int, stdin.split()))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if a[i] / d == a[j] / d:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2792,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    orders = stdin.split('\\n')\n    Q = int(orders[0])\n    orders = orders[1:]\n\n    # initialize variables\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = [0] * 26\n\n    # solve each order\n    for order in orders:\n        if order.startswith('SMJER'):\n            n = int(order.split()[1])\n            count = [0] * 26\n            for i in range(n):\n                count[alphabet.index(order[i])] += 1\n        else:\n            n, x = map(int, order.split()[1:])\n            print(count[alphabet.index(x)] - count[alphabet.index(x.lower())])\n\n    return ''"
    },
    {
        "number": 2793,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    visited = [False] * n\n    visited[s] = True\n    queue = [(0, s)]\n    while queue:\n        dist, u = heapq.heappop(queue)\n        if u == t:\n            break\n        for v, w in graph[u]:\n            if not visited[v] and dist + w < 2**31:\n                visited[v] = True\n                heapq.heappush(queue, (dist + w, v))\n    if not visited[t]:\n        return \"No solution\"\n    U = [i for i in range(n) if visited[i] and i!= s]\n    return str(len(U)) + \"\\n\" + \"\\n\".join(map(str, U))"
    },
    {
        "number": 2794,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, c = map(int, stdin.split())\n    a = list(map(int, stdin.readline().split()))\n    d = list(map(int, stdin.readline().split()))\n    for i in range(c):\n        a[i] += d[i] * (h // c)\n        if h % c!= 0 and i < h % c:\n            a[i] += d[i]\n    return max(a)"
    },
    {
        "number": 2795,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e, p = map(int, stdin.readline().split())\n    treehouses = []\n    for i in range(n):\n        x, y = map(float, stdin.readline().split())\n        treehouses.append((x, y))\n    cables = []\n    for i in range(p):\n        a, b = map(int, stdin.readline().split())\n        cables.append((a-1, b-1))\n    cables.sort(key=lambda x: treehouses[x[0]][0] + treehouses[x[0]][1])\n    cables.sort(key=lambda x: treehouses[x[1]][0] + treehouses[x[1]][1])\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]) + abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][0] - treehouses[x[1]][0]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]][1] - treehouses[x[1]][1]))\n    cables.sort(key=lambda x: abs(treehouses[x[0]]["
    },
    {
        "number": 2796,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    paths = []\n    for i in range(n-1):\n        a, b, z = map(int, stdin.readline().strip().split())\n        paths.append((a, b, z))\n    perm = list(map(int, stdin.readline().strip().split()))\n\n    # count boring pairs\n    boring = [0] * n\n    for i in range(n-1):\n        a, b, z = paths[perm[i]-1]\n        if a!= b:\n            boring[a-1] += 1\n            boring[b-1] += 1\n\n    # output result\n    result = []\n    for i in range(n):\n        result.append(boring[i])\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2797,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b = map(int, stdin.split())\n    result = 1\n    for i in range(b):\n        result = (result * a) % a\n    return str(result)"
    },
    {
        "number": 2798,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    player = lines[0]\n    n = int(lines[1])\n    cuboids = []\n    for i in range(2, 2+n):\n        x, y, z = map(int, lines[i].split())\n        cuboids.append((x, y, z))\n    while len(cuboids) > 1:\n        if player == 'RUBEN':\n            x, y, z = cuboids.pop()\n            if x > 1:\n                cuboids.append((x-1, y, z))\n            if y > 1:\n                cuboids.append((x, y-1, z))\n            if z > 1:\n                cuboids.append((x, y, z-1))\n        else:\n            x, y, z = cuboids.pop()\n            if x > 1:\n                cuboids.append((x-1, y, z))\n            if y > 1:\n                cuboids.append((x, y-1, z))\n            if z > 1:\n                cuboids.append((x, y, z-1))\n            if x > 1 and y > 1 and z > 1:\n                cuboids.append((x-1, y-1, z-1))\n    return 'RUBEN' if cuboids[0][0] == 1 else 'ALBERT'"
    },
    {
        "number": 2799,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, G, B, Y, S = map(int, stdin.split())\n    total_fruits = R + G + B + Y\n    if total_fruits == 0:\n        return \"0.0\"\n    if S == 1:\n        return \"0.0\"\n    if S == 2:\n        return \"0.5\"\n    if S == 3:\n        return \"0.75\"\n    if S == 4:\n        return \"0.875\"\n    if S == 5:\n        return \"0.9375\"\n    if S == 6:\n        return \"0.96875\"\n    if S == 7:\n        return \"0.984375\"\n    if S == 8:\n        return \"0.9921875\""
    },
    {
        "number": 2800,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    piles = []\n    for line in stdin.split('\\n'):\n        if line:\n            piles.append(list(map(int, line.split())))\n    piles = [pile[::-1] for pile in piles]\n    alice_turn = True\n    while True:\n        if alice_turn:\n            for pile in piles:\n                if pile:\n                    if pile[0] > K:\n                        return \"Alice can win.\"\n                    else:\n                        pile.pop(0)\n                        if not pile:\n                            return \"Bob will win.\"\n            alice_turn = False\n        else:\n            for pile in piles:\n                if pile:\n                    if pile[0] > K:\n                        return \"Bob will win.\"\n                    else:\n                        pile.pop(0)\n                        if not pile:\n                            return \"Alice can win.\"\n            alice_turn = True"
    },
    {
        "number": 2801,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    c = list(map(int, stdin.split()[2:2+n]))\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        s, t = map(int, stdin.split()[0:2])\n        graph[s].append(t)\n        graph[t].append(s)\n    dp = [0] * n\n    dp[0] = c[0]\n    for i in range(1, n):\n        dp[i] = max(dp[j] + c[i] * (1 / (2**(i-j))) for j in graph[i])\n    return str(max(dp))"
    },
    {
        "number": 2802,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    times = list(map(float, stdin.split()))\n    t1, t2, t3, t4, t = times\n    if t1 > t2 or t2 > t3 or t3 > t4:\n        return \"impossible\"\n    if t1 + t2 + t3 + t4 <= t:\n        return \"infinite\"\n    return \"{:.2f}\".format(max(t1, t2, t3, t4))"
    },
    {
        "number": 2803,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    prev_animal = stdin.split()[0]\n    num_animals = int(stdin.split()[1])\n    animals = set(stdin.split()[2:])\n\n    # check if there is any valid animal to play\n    valid_animals = [animal for animal in animals if animal[0] == prev_animal[-1] and animal not in animals]\n    if len(valid_animals) > 0:\n        return valid_animals[0] + \"!\"\n    else:\n        # check if there is any animal to play\n        animals = [animal for animal in animals if animal[0] == prev_animal[-1]]\n        if len(animals) > 0:\n            return animals[0]\n        else:\n            # no valid animal to play\n            return \"?\""
    },
    {
        "number": 2804,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = map(int, stdin.split())\n    words = []\n    while len(words) < B:\n        word = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 15)))\n        if word not in words:\n            words.append(word)\n    return''.join(words)\n\nimport random\nimport string"
    },
    {
        "number": 2805,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.strip())\n    counter = 0\n    for i in range(N-1, 0, -1):\n        counter += 1\n        if N % i == 0:\n            break\n    return str(counter)"
    },
    {
        "number": 2806,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    c, t = map(int, stdin.split())\n    adj = [[] for _ in range(c+1)]\n    for _ in range(t):\n        a, b = map(int, stdin.split())\n        adj[a].append(b)\n        adj[b].append(a)\n    visited = [False] * (c+1)\n    stack = [1]\n    path = []\n    while stack:\n        curr = stack.pop()\n        if not visited[curr]:\n            visited[curr] = True\n            path.append(curr)\n            for neighbor in adj[curr]:\n                if not visited[neighbor]:\n                    stack.append(neighbor)\n    p = len(path)\n    s = c // 2\n    if c % 2 == 1:\n        s += 1\n    print(p, s)\n    print(*path)\n    kids = [[] for _ in range(s)]\n    for i in range(c):\n        if not visited[i+1]:\n            kids[i%s].append(i+1)\n    for kid in kids:\n        print(*kid)\n    return \"\""
    },
    {
        "number": 2807,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    A, B = stdin.strip().split('\\n')\n    n = len(A)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if A[i] == B[j]:\n                dp[i][j] = dp[i+1][j-1] + 1\n            else:\n                dp[i][j] = dp[i+1][j] + dp[i][j-1]\n    return str(dp[0][n-1])"
    },
    {
        "number": 2808,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    p = list(map(int, stdin.readline().split()))\n    l = []\n    r = []\n    for i in range(m):\n        l_, r_ = map(int, stdin.readline().split())\n        l.append(l_)\n        r.append(r_)\n    dp = [[0] * (1 << m) for _ in range(n)]\n    for i in range(n):\n        for j in range(1 << m):\n            for k in range(m):\n                if j & (1 << k):\n                    if l[k] <= i <= r[k]:\n                        dp[i][j] += dp[i-1][j]\n                    else:\n                        dp[i][j] += dp[i-1][j ^ (1 << k)]\n    ans = 0\n    for i in range(1 << m):\n        cnt = 0\n        for j in range(n):\n            if i & (1 << j):\n                cnt += p[j]\n        if cnt >= k:\n            ans += dp[n-1][i]\n    return str(ans % (10**9 + 7))"
    },
    {
        "number": 2809,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    s = stdin.strip()\n    R = s * k\n    ans = 1\n    MOD = 10**9 + 7\n    for i in range(n):\n        ans = (ans * pow(2, i, MOD)) % MOD\n    return str(ans)"
    },
    {
        "number": 2810,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    m, n = map(int, stdin.split())\n    connections = set()\n    for _ in range(n):\n        s, t = map(int, stdin.readline().split())\n        connections.add((s, t))\n        connections.add((t, s))\n\n    # count loops\n    loops = set()\n    for s in range(m):\n        for t in range(s+1, m):\n            if (s, t) in connections:\n                loop = [s]\n                i = t\n                while i!= s:\n                    loop.append(i)\n                    i = next(j for j in range(m) if (i, j) in connections)\n                loop.append(s)\n                loops.add(tuple(loop))\n\n    # count unique loops\n    return str(len(loops))"
    },
    {
        "number": 2811,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    MOD = 10**9+7\n    n, m = map(int, stdin.split())\n    parent = [0] * (n+1)\n    for i in range(2, n+1):\n        parent[i] = int(stdin.split()[0])\n    red = set(map(int, stdin.split()))\n    dp = [[0]*(m+1) for _ in range(n+1)]\n    dp[1][0] = 1\n    for i in range(2, n+1):\n        for j in range(m+1):\n            for k in range(j+1):\n                dp[i][j] = (dp[i][j] + dp[parent[i]][k]) % MOD\n    ans = 0\n    for j in range(m+1):\n        ans = (ans + dp[1][j]) % MOD\n    return str(ans)"
    },
    {
        "number": 2812,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin)\n    n = 26\n    s = ''\n    while k > 0:\n        s += chr(97 + k % n)\n        k //= n\n    return s"
    },
    {
        "number": 2813,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    syllables = int(stdin.readline().strip())\n    words = stdin.readline().strip().split()\n    poem = []\n    for i in range(3):\n        phrase = stdin.readline().strip().split()\n        poem.append(phrase)\n\n    # check if poem is a haiku\n    for phrase in poem:\n        if len(phrase)!= syllables:\n            continue\n        if len(set(phrase))!= syllables:\n            continue\n        if sum(len(word) for word in phrase)!= 5*syllables:\n            continue\n        if any(len(word) > 7 for word in phrase):\n            continue\n        if any(word.lower() not in \"aeiouy\" for word in phrase):\n            continue\n        if any(word.lower() in \"aeiouy\" for word in phrase):\n            continue\n        return \"haiku\"\n\n    return \"come back next year\""
    },
    {
        "number": 2814,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    sigma0 = list(map(int, stdin.readline().strip().split()))\n    sigma1 = list(map(int, stdin.readline().strip().split()))\n    deck = list(range(2*N))\n    for i in range(2*N):\n        deck[sigma0[i]] = deck[sigma1[i]] = i\n    while deck:\n        if deck[0] == deck[1]:\n            deck.pop(0)\n            deck.pop(0)\n        else:\n            deck.pop(0)\n            return \"0\" if deck else \"1\"\n    return \"-1\""
    },
    {
        "number": 2815,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, e = map(int, stdin.split())\n    count = 0\n    for i in range(n):\n        if str(i).count('2'*e):\n            count += 1\n    return count"
    },
    {
        "number": 2816,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n, m = map(int, lines[0].split())\n    grid = [list(line) for line in lines[1:]]\n\n    # Find V and J positions\n    v_r, v_c = None, None\n    j_r, j_c = None, None\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c] == 'V':\n                v_r, v_c = r, c\n            elif grid[r][c] == 'J':\n                j_r, j_c = r, c\n\n    # Initialize distances\n    distances = [[float('inf')] * m for _ in range(n)]\n    distances[v_r][v_c] = 0\n\n    # Bellman-Ford algorithm\n    for _ in range(n * m):\n        for r in range(n):\n            for c in range(m):\n                if grid[r][c] == '+':\n                    continue\n                for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    nr, nc = r + dr, c + dc\n                    if 0 <= nr < n and 0 <= nc < m and grid[nr][nc]!= '+':\n                        new_dist = distances[r][c] + 1\n                        if new_dist < distances[nr][nc]:\n                            distances[nr][nc] = new_dist\n\n    # Find best route\n    best_dist = float('inf')\n    for r in range(n):\n        for c in range(m):\n            if grid[r][c] == '+':\n                dist = distances[r][c] + abs(r - j_r) + abs(c - j_c)\n                if dist < best_dist:\n                    best_dist = dist\n\n    return str(best_dist)"
    },
    {
        "number": 2817,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    e, e_success, e_failure = map(int, stdin.split())\n    s = 25\n    d = 0\n    while e > 0:\n        if s >= 225:\n            break\n        if s >= 200:\n            d = 50\n            break\n        if s >= 175:\n            d = 25\n            break\n        if s >= 150:\n            d = 12.5\n            break\n        if s >= 125:\n            d = 6.25\n            break\n        if s >= 100:\n            d = 3.125\n            break\n        if s >= 75:\n            d = 1.5625\n            break\n        if s >= 50:\n            d = 0.78125\n            break\n        if s >= 25:\n            d = 0.390625\n            break\n        if s >= 0:\n            d = 0\n            break\n        s -= e_failure\n        e -= e_failure\n    return str(d)"
    },
    {
        "number": 2818,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    heights = list(map(int, stdin.split()[1:]))\n    balloons = [True] * n\n    arrow_count = 0\n    for i in range(n):\n        if balloons[i]:\n            arrow_count += 1\n            for j in range(i+1, n):\n                if heights[j] < heights[i]:\n                    balloons[j] = False\n    return arrow_count"
    },
    {
        "number": 2819,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a_x, a_y = map(int, stdin.readline().strip().split())\n    b_x, b_y = map(int, stdin.readline().strip().split())\n    valid_moves = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        valid_moves.append((x, y))\n\n    # Check if Alice can capture Bob's piece in her turn\n    for move in valid_moves:\n        if a_x + move[0] == b_x and a_y + move[1] == b_y:\n            return \"Alice wins\"\n\n    # Check if Alice can force a tie by teleporting her piece\n    for move in valid_moves:\n        if a_x + move[0] == b_x and a_y + move[1] == b_y:\n            continue\n        if a_x + move[0] == b_x and a_y + move[1] == b_y + 1:\n            continue\n        if a_x + move[0] == b_x and a_y + move[1] == b_y - 1:\n            continue\n        if a_x + move[0] == b_x + 1 and a_y + move[1] == b_y:\n            continue\n        if a_x + move[0] == b_x - 1 and a_y + move[1] == b_y:\n            continue\n        if a_x + move[0] == b_x + 1 and a_y + move[1] == b_y + 1:\n            continue\n        if a_x + move[0] == b_x + 1 and a_y + move[1] == b_y - 1:\n            continue\n        if a_x + move[0] == b_x - 1 and a_y + move[1] == b_y + 1:\n            continue\n        if a_x + move[0] == b_x - 1 and a_y + move[1] == b_y - 1:\n            continue\n        if a_x + move[0] == b_x + 2 and a_y + move[1] == b_y + 2:\n            continue\n        if a_x + move[0] == b_x + 2 and a_y + move[1] == b_y - 2:\n            continue\n        if a_x + move[0] == b_x - 2 and a_y + move[1] == b_y + 2:\n            continue\n        if a_x + move[0] == b_x - 2 and a_y + move[1] == b_y - 2:\n            continue\n        if a_x + move[0] == b_x + 3 and a_y + move[1] == b_y + 3:\n            continue\n        if a_x + move[0] == b_x + 3 and a_y + move[1] == b_y - 3:\n            continue\n        if a_x + move[0] == b_x - 3 and a_y + move[1] == b_y + 3:\n            continue\n        if a_x + move[0] == b_x - 3 and a_y + move[1] == b_y - 3:\n            continue\n        if a_x + move[0] == b_x + 4 and a_y + move[1] == b_y + 4:\n            continue\n        if a_x + move[0] == b_x + 4 and a_y + move[1] == b_y - 4:\n            continue\n        if a_x + move[0] == b_x - 4 and a_y + move[1] == b_y + 4:\n            continue\n        if a_x + move[0] == b_x - 4 and a_y + move[1] == b_y - 4:\n            continue\n        if a_x + move[0] == b_x + 5 and a_y + move[1] == b_y + 5:\n            continue\n        if a_x + move[0] == b_x + 5 and a_y + move[1] == b_y - 5:\n            continue\n        if a_x + move[0] == b_x - 5 and a_y + move[1] == b_y + 5:\n            continue\n        if a_x"
    },
    {
        "number": 2820,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    B, V = map(int, stdin.split())\n    V = list(map(int, stdin.readline().split()))\n    T = int(stdin.readline())\n    for i in range(T):\n        M = int(stdin.readline())\n        T_i = list(map(int, stdin.readline().split()))\n        V = [max(v, sum(T_i)) for v in V]\n    # count cows\n    cows = 0\n    for v in V:\n        cows += v // 100\n    return str(cows)"
    },
    {
        "number": 2821,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    Q, M, S, L = map(int, stdin.split())\n    if S == 0:\n        return str(L)\n    if L == 0:\n        return str(S)\n    if S == 1:\n        return str(L)\n    if L == 1:\n        return str(S)\n    if S == L:\n        return str(S)\n    if S > L:\n        return str(S)\n    if L % S == 0:\n        return str(L)\n    if L % S == 1:\n        return str(L)\n    if L % S == 2:\n        return str(L)\n    if L % S == 3:\n        return str(L)\n    if L % S == 4:\n        return str(L)\n    if L % S == 5:\n        return str(L)\n    if L % S == 6:\n        return str(L)\n    if L % S == 7:\n        return str(L)\n    if L % S == 8:\n        return str(L)\n    if L % S == 9:\n        return str(L)\n    if L % S == 10:\n        return str(L)\n    if L % S == 11:\n        return str(L)\n    if L % S == 12:\n        return str(L)\n    if L % S == 13:\n        return str(L)\n    if L % S == 14:\n        return str(L)\n    if L % S == 15:\n        return str(L)\n    if L % S == 16:\n        return str(L)\n    if L % S == 17:\n        return str(L)\n    if L % S == 18:\n        return str(L)\n    if L % S == 19:\n        return str(L)\n    if L % S == 20:\n        return str(L)\n    if L % S == 21:\n        return str(L)\n    if L % S == 22:\n        return str(L)\n    if L % S == 23:\n        return str(L)\n    if L % S == 24:\n        return str(L)\n    if L % S == 25:\n        return str(L)\n    if L % S == 26:\n        return str(L)\n    if L % S == 27:\n        return str(L)\n    if L % S == 28:\n        return str(L)\n    if L % S == 29:\n        return str(L)\n    if L % S == 30:\n        return str(L)\n    if L % S == 31:\n        return str(L)\n    if L % S == 32:\n        return str(L)\n    if L % S == 33:\n        return str(L)\n    if L % S == 34:\n        return str(L)\n    if L % S == 35:\n        return str(L)\n    if L % S == 36:\n        return str(L)\n    if L % S == 37:\n        return str(L)\n    if L % S == 38:\n        return str(L)\n    if L % S == 39:\n        return str(L)\n    if L % S == 40:\n        return str(L)\n    if L % S == 41:\n        return str(L)\n    if L % S == 42:\n        return str(L)\n    if L % S == 43:\n        return str(L)\n    if L % S == 44:\n        return str(L)\n    if L % S == 45:\n        return str(L)\n    if L % S == 46:\n        return str(L)\n    if L % S == 47:\n        return str(L)\n    if L % S == 48:\n        return str(L)\n    if L % S == 49:\n        return str(L)\n    if L % S == 50:\n        return str(L)\n    if L % S == 51:\n        return str(L)\n    if L % S == 52:\n        return str(L)\n    if L % S == 53:\n        return str(L)\n    if L % S == 54:\n        return str(L)\n    if L % S == 55:\n        return str(L)\n    if L % S == 56:\n        return str(L)\n    if L % S == 57:\n        return str(L)\n    if L % S == 58:\n        return str"
    },
    {
        "number": 2822,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x_b, y_b = map(int, stdin.split())\n    x1, y1, x2, y2 = map(int, stdin.readline().split())\n    trees = set()\n    for x in range(x1, x2+1):\n        for y in range(y1, y2+1):\n            trees.add((x, y))\n    if (x_b, y_b) in trees:\n        return \"Yes\"\n    else:\n        min_dist = float('inf')\n        closest_tree = None\n        for tree in trees:\n            dist = abs(x_b - tree[0]) + abs(y_b - tree[1])\n            if dist < min_dist:\n                min_dist = dist\n                closest_tree = tree\n        return \"No\\n\" + \" \".join(map(str, closest_tree))"
    },
    {
        "number": 2823,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    dna, swine, costs = stdin.strip().split('\\n')\n    costs = list(map(int, costs.split()))\n    # initialize variables\n    total_cost = 0\n    for i in range(len(swine)):\n        total_cost += costs[ord(swine[i]) - ord('A')]\n    # iterate over dna and check for swine gene\n    for i in range(len(dna)):\n        if dna[i:i+len(swine)] == swine:\n            total_cost += costs[ord(dna[i]) - ord('A')]\n    return str(total_cost)"
    },
    {
        "number": 2824,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    weights = list(map(int, stdin.split()))\n    weights.sort()\n    n = len(weights)\n    total_weight = sum(weights)\n    left_weight = total_weight // 2\n    right_weight = total_weight - left_weight\n    left_sum = 0\n    right_sum = 0\n    for i in range(n):\n        if weights[i] <= left_weight:\n            left_sum += weights[i]\n        else:\n            right_sum += weights[i]\n    if left_sum == right_sum:\n        return str(left_weight)\n    else:\n        for i in range(n):\n            if weights[i] == left_weight:\n                left_sum -= weights[i]\n                right_sum += weights[i]\n                break\n        return str(left_weight)"
    },
    {
        "number": 2825,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.split()[0])\n    times = list(map(int, stdin.split()[1:]))\n\n    # sort times in ascending order\n    times.sort()\n\n    # initialize variables\n    time = 0\n    pairs = 0\n\n    # iterate through times\n    for i in range(N):\n        # add time for current person\n        time += times[i]\n\n        # if there are still pairs left, add time for pair\n        if pairs > 0:\n            time += times[i]\n            pairs -= 1\n\n        # if there are no pairs left, add time for pair\n        else:\n            pairs = i\n            time += times[i]\n\n    return str(time)"
    },
    {
        "number": 2826,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    q, n, D = map(int, stdin.split())\n    f1 = int(stdin.readline().strip(), q)\n    f2 = int(stdin.readline().strip(), q)\n\n    count = 0\n    for i in range(q**n):\n        word = bin(i)[2:].zfill(n)\n        if sum(word[j]!= str(f1 >> j & 1) for j in range(n)) + sum(word[j]!= str(f2 >> j & 1) for j in range(n)) == D:\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 2827,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    edges = []\n    for i in range(m):\n        u, v = map(int, stdin.split())\n        edges.append((u, v))\n    visited = [False] * n\n    def dfs(u):\n        visited[u] = True\n        for v in range(n):\n            if not visited[v] and (u, v) in edges or (v, u) in edges:\n                dfs(v)\n    count = 0\n    for i in range(n):\n        if not visited[i]:\n            dfs(i)\n            count += 1\n    return str(count)"
    },
    {
        "number": 2828,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    a = list(map(int, stdin.readline().strip().split()))\n\n    # check if a valid permutation\n    if len(set(a))!= n or len(a)!= n:\n        return \"NE\"\n\n    # find key\n    key = \"\"\n    for i in range(26):\n        for j in range(n):\n            if words[j][0] == chr(ord('a') + i):\n                key += chr(ord('a') + a[j] - 1)\n                break\n\n    # check if key is valid\n    if len(set(key))!= 26:\n        return \"NE\"\n\n    # encrypt and sort words\n    encrypted_words = [\"\".join([key[ord(c) - ord('a')] for c in word]) for word in words]\n    encrypted_words.sort()\n\n    # check if encrypted words correspond to a\n    if encrypted_words!= [chr(ord('a') + i - 1) for i in a]:\n        return \"NE\"\n\n    return \"DA\\n\" + key\n"
    },
    {
        "number": 2829,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Define Morse Code dictionary\n    morse_code = {\n        'A': '.-',     'B': '-...',   'C': '-.-.',\n        'D': '-..',    'E': '.',      'F': '..-.',\n        'G': '--.',    'H': '....',   'I': '..',\n        'J': '.---',   'K': '-.-',    'L': '.-..',\n        'M': '--',     'N': '-.',     'O': '---',\n        'P': '.--.',   'Q': '--.-',   'R': '.-.',\n        'S': '...',    'T': '-',      'U': '..-',\n        'V': '...-',   'W': '.--',    'X': '-..-',\n        'Y': '-.--',   'Z': '--..',\n        '0': '-----',  '1': '.----',  '2': '..---',\n        '3': '...--',  '4': '....-',  '5': '.....',\n        '6': '-....',  '7': '--...',  '8': '---..',\n        '9': '----.'\n    }\n\n    # Convert input string to uppercase\n    input_string = stdin.upper()\n\n    # Remove all non-letter characters from input string\n    input_string = ''.join(filter(str.isalpha, input_string))\n\n    # Initialize total length to zero\n    total_length = 0\n\n    # Iterate over each character in input string\n    for char in input_string:\n        # Add length of current character encoding to total length\n        total_length += len(morse_code[char]) + 1\n\n    # Return total length\n    return total_length"
    },
    {
        "number": 2830,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = [list(map(int, input().strip())) for _ in range(n)]\n    k = grid[0][0]\n    if k == 0:\n        return -1\n    moves = 0\n    i, j = 0, 0\n    while i < n - 1 and j < m - 1:\n        if grid[i+1][j] == k:\n            i += 1\n            moves += 1\n        elif grid[i][j+1] == k:\n            j += 1\n            moves += 1\n        else:\n            return -1\n    return moves"
    },
    {
        "number": 2831,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    vehicles = []\n    for i in range(n):\n        x, v = map(int, stdin.readline().strip().split())\n        vehicles.append((x, v))\n    vehicles.sort(key=lambda x: x[0])\n    min_dist = float('inf')\n    for i in range(n-1):\n        dist = abs(vehicles[i][0] - vehicles[i+1][0])\n        min_dist = min(min_dist, dist)\n    return str(min_dist)"
    },
    {
        "number": 2832,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    d, k = map(int, stdin.split()[0:2])\n    red_values = []\n    pixel_counts = []\n    for i in range(d):\n        r, p = map(int, stdin.split()[0:2])\n        red_values.append(r)\n        pixel_counts.append(p)\n    red_values.sort()\n    allowed_values = red_values[0:k]\n    error_sum = 0\n    for i in range(d):\n        r = red_values[i]\n        p = pixel_counts[i]\n        error = min([(r - v)**2 for v in allowed_values])\n        error_sum += error * p\n    return str(error_sum)"
    },
    {
        "number": 2833,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split()[0:2])\n    table = [stdin.split()[i:i+C] for i in range(0, R*C, C)]\n    K = int(stdin.split()[-1])\n    K = K % 360\n    if K == 0:\n        return '\\n'.join([''.join(row) for row in table])\n    elif K == 90:\n        return '\\n'.join([''.join(row[::-1]) for row in table[::-1]])\n    elif K == 180:\n        return '\\n'.join([''.join(row[::-1]) for row in table[::-1]][::-1])\n    elif K == 270:\n        return '\\n'.join([''.join(row) for row in table[::-1]])\n    else:\n        return '\\n'.join([''.join(row) for row in table])"
    },
    {
        "number": 2834,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k = int(stdin.strip())\n    lucky_nums = [4, 7]\n    count = 0\n    num = 1\n    while count < k:\n        num += 1\n        if all(digit in lucky_nums for digit in str(num)):\n            count += 1\n    return num"
    },
    {
        "number": 2835,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, t = stdin.strip().split('\\n')\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            if t in s[i:j]:\n                count += 1\n    return count"
    },
    {
        "number": 2836,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p = map(int, stdin.split())\n    a, b = map(int, stdin.split())\n    if a % 2 == 0:\n        a += 1\n    if b % 2 == 0:\n        b -= 1\n    if a > b:\n        a, b = b, a\n    if a == b:\n        return str(a)\n    dp = [abs(a - p[i]) for i in range(n)]\n    for i in range(n):\n        for j in range(i + 1, n):\n            dp[j] = min(dp[j], abs(a - p[j] - p[i]))\n    return str(a + dp.index(max(dp)) * 2)"
    },
    {
        "number": 2837,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    R = list(map(float, stdin.readline().strip().split()))\n    S = stdin.readline().strip()\n\n    # parse circuit\n    stack = []\n    for c in S:\n        if c.isdigit():\n            stack.append(c)\n        elif c == 'R':\n            i = int(stack.pop()) - 1\n            R[i] = float(stack.pop())\n        elif c == '(':\n            stack.append(c)\n        elif c == ')':\n            r = 1\n            while stack[-1]!= '(':\n                r *= R[int(stack.pop()) - 1]\n                stack.pop()\n            stack.pop()\n            stack.append(str(r))\n        elif c == '-':\n            r1 = R[int(stack.pop()) - 1]\n            r2 = R[int(stack.pop()) - 1]\n            stack.append(str(r1 - r2))\n        elif c == '|':\n            r1 = R[int(stack.pop()) - 1]\n            r2 = R[int(stack.pop()) - 1]\n            stack.append(str(1 / (1 / r1 + 1 / r2)))\n\n    # calculate equivalent resistance\n    R_eq = float(stack[0])\n\n    # format output\n    return '{:.5f}'.format(R_eq)"
    },
    {
        "number": 2838,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove all brackets\n    expression = stdin.replace('(', '').replace(')', '')\n    # Generate all possible expressions by removing pairs of brackets\n    expressions = []\n    for i in range(len(expression)):\n        for j in range(i+2, len(expression)+1, 2):\n            expressions.append(expression[:i] + expression[i+1:j] + expression[j:])\n    # Remove duplicates and sort lexicographically\n    expressions = sorted(set(expressions))\n    # Return all expressions\n    return '\\n'.join(expressions)"
    },
    {
        "number": 2839,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    V, E = map(int, stdin.split()[0:2])\n    edges = []\n    for i in range(E):\n        u, v, w = map(int, stdin.readline().split())\n        edges.append((u, v, w))\n    s, t = map(int, stdin.split())\n\n    # compute shortest paths\n    dist = [float('inf')] * V\n    dist[s] = 0\n    visited = [False] * V\n    for i in range(V):\n        u = -1\n        for j in range(V):\n            if not visited[j] and (u == -1 or dist[j] < dist[u]):\n                u = j\n        if u == -1:\n            break\n        visited[u] = True\n        for v, w in edges:\n            if v == u:\n                if dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n\n    # count different shortest paths\n    count = 0\n    for i in range(V):\n        for j in range(V):\n            if dist[i]!= float('inf') and dist[j]!= float('inf') and dist[i] + dist[j] == dist[t]:\n                count += 1\n\n    return str(count)"
    },
    {
        "number": 2840,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    cards = stdin.split()[1:]\n    suits = ['s', 'h', 'd', 'c']\n    ranks = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A']\n    hand = []\n    for card in cards:\n        rank = ranks.index(card[0])\n        suit = suits.index(card[1])\n        hand.append((rank, suit))\n    hand.sort()\n    moves = 0\n    for i in range(1, n):\n        if hand[i][0] < hand[i-1][0]:\n            if hand[i][1] == hand[i-1][1]:\n                if hand[i][0] > hand[i-1][0]:\n                    moves += 1\n                else:\n                    moves += 2\n            else:\n                moves += 1\n    return str(moves)"
    },
    {
        "number": 2841,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.split()[0])\n    colors = stdin.split()[1:]\n\n    # Find start square\n    start_square = colors.index('Start')\n\n    # Find end square\n    end_square = N\n\n    # Initialize variables\n    current_square = start_square\n    num_draws = 0\n\n    # Loop through squares\n    while current_square!= end_square:\n        # Find next square with color of current card\n        next_square = current_square + 1\n        while next_square <= end_square and colors[next_square]!= colors[current_square]:\n            next_square += 1\n\n        # If no such square found, player loses turn\n        if next_square > end_square:\n            return str(num_draws)\n\n        # Move to next square\n        current_square = next_square\n        num_draws += 1\n\n    # Return number of draws\n    return str(num_draws)"
    },
    {
        "number": 2842,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    ships = [int(line.strip()) for line in stdin.split('\\n')[1+n:]]\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == '.':\n                for ship in ships:\n                    if ship <= 0:\n                        continue\n                    if i+ship > n or j+ship > n:\n                        continue\n                    if grid[i:i+ship][j:j+ship] == [['.']*ship]*ship:\n                        count += 1\n    return count"
    },
    {
        "number": 2843,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    words = stdin.strip().split('\\n')\n    n = len(words)\n\n    # Create a dictionary to store the frequency of each letter in each word\n    freq = {}\n    for word in words:\n        for letter in word:\n            if letter not in freq:\n                freq[letter] = {}\n            if word not in freq[letter]:\n                freq[letter][word] = 0\n            freq[letter][word] += 1\n\n    # Create a set of all possible swap-free sets\n    swap_free_sets = set()\n    for i in range(n):\n        for j in range(i+1, n):\n            if is_swap_free(words[i], words[j], freq):\n                swap_free_sets.add(frozenset([words[i], words[j]]))\n\n    # Find the largest swap-free set\n    largest_swap_free_set = None\n    for swap_free_set in swap_free_sets:\n        if largest_swap_free_set is None or len(swap_free_set) > len(largest_swap_free_set):\n            largest_swap_free_set = swap_free_set\n\n    # Return the size of the largest swap-free set\n    return len(largest_swap_free_set)\n\ndef"
    },
    {
        "number": 2844,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    R, C = map(int, stdin.split()[0:2])\n    map_ = stdin.split('\\n')[1:R+1]\n    # initialize variables\n    start = (0, 0)\n    end = (0, 0)\n    for i in range(R):\n        for j in range(C):\n            if map_[i][j] == 'D':\n                end = (i, j)\n            elif map_[i][j] == 'S':\n                start = (i, j)\n    # initialize variables\n    visited = set()\n    queue = [(start, 0)]\n    # bfs\n    while queue:\n        curr, time = queue.pop(0)\n        if curr == end:\n            return str(time)\n        if curr in visited:\n            continue\n        visited.add(curr)\n        for i, j in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            next_ = (curr[0]+i, curr[1]+j)\n            if 0 <= next_[0] < R and 0 <= next_[1] < C and map_[next_[0]][next_[1]]!= 'X' and map_[next_[0]][next_[1]]!= 'D':\n                queue.append((next_, time+1))\n    # if we reach here, it means we couldn't reach the end\n    return \"KAKTUS\""
    },
    {
        "number": 2845,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, K = map(int, stdin.split())\n    house = list(map(int, stdin.split()))\n    perimeter = 0\n    for i in range(K):\n        for j in range(i+1, K):\n            for k in range(j+1, K):\n                if abs(house[i] - house[j]) == R or abs(house[j] - house[k]) == R or abs(house[k] - house[i]) == R:\n                    perimeter += 1\n    return perimeter"
    },
    {
        "number": 2846,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    citations = list(map(int, stdin.readline().strip().split()))\n    citations.sort(reverse=True)\n    h_index = 0\n    for i in range(n):\n        if i >= citations[i]:\n            break\n        h_index += 1\n    return str(h_index)"
    },
    {
        "number": 2847,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    M, S = map(int, stdin.split())\n    preferences = [list(map(int, stdin.split())) for _ in range(M)]\n\n    # Find minimum length set list\n    songs = set()\n    for member in preferences:\n        for song in member:\n            songs.add(song)\n    songs = sorted(songs)\n    L = len(songs)\n\n    # Output minimum length set list\n    return f\"{L}\\n{' '.join(map(str, songs))}\""
    },
    {
        "number": 2848,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N, R, K, X0, A, B = map(int, stdin.split())\n    X = [X0]\n    for i in range(R):\n        X.append((A * X[-1] + B) % N)\n    if X[-1] == 0:\n        return \"OVERFLOW\"\n    a = 0\n    for i in range(R):\n        a = (53 * a + X[i]) % 199933\n    return str(a)"
    },
    {
        "number": 2849,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    MOD = 10**9 + 7\n    dp = [[[0]*2 for _ in range(n+1)] for _ in range(n+1)]\n    dp[0][0][0] = 1\n    for i in range(n+1):\n        for j in range(n+1):\n            for k in range(2):\n                if i > 0:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][k]) % MOD\n                if j > 0:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i][j-1][k]) % MOD\n                if i > 0 and j > 0:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i-1][j-1][k]) % MOD\n                if i > 0 and k == 0:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i-1][j][1]) % MOD\n                if j > 0 and k == 0:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i][j-1][1]) % MOD\n                if i > 0 and j > 0 and k == 0:\n                    dp[i][j][k] = (dp[i][j][k] + dp[i-1][j-1][1]) % MOD\n    return dp[n][n][0]"
    },
    {
        "number": 2850,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    weights = list(map(int, stdin.split()))\n    weights.sort(reverse=True)\n    return sum(weights[:k])"
    },
    {
        "number": 2851,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, a_list = map(int, stdin.readline().strip().split())\n    m, b_list = map(int, stdin.readline().strip().split())\n\n    # compute gcd using euclidean algorithm\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n\n    # compute gcd of a_list and b_list\n    gcd_list = [gcd(a, b) for a in a_list for b in b_list]\n\n    # compute gcd of all pairs of gcd_list\n    gcd_pairs = [gcd(a, b) for a in gcd_list for b in gcd_list if a!= b]\n\n    # compute gcd of all pairs of gcd_list\n    gcd_all = gcd(*gcd_pairs)\n\n    # output result\n    return str(gcd_all)[-9:]"
    },
    {
        "number": 2852,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    probabilities = list(map(int, stdin.split()[1:]))\n    accepted = [0] * n\n    for i in range(n):\n        if probabilities[i] >= 50:\n            accepted[i] = 1\n    total_accepted = sum(accepted)\n    if total_accepted == 0:\n        return \"0\"\n    expected_index = 0\n    for i in range(n):\n        expected_index += accepted[i] * (i + 1) ** (i + 1) / total_accepted\n    return str(expected_index)"
    },
    {
        "number": 2853,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    connected = set()\n    for i in range(m):\n        a, b = map(int, stdin.readline().split())\n        connected.add(a)\n        connected.add(b)\n    if len(connected) == n:\n        return \"Connected\"\n    else:\n        return \"\\n\".join(str(i) for i in range(1, n+1) if i not in connected)"
    },
    {
        "number": 2854,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    atoms = []\n    for i in range(n):\n        x, y = map(int, stdin.split())\n        atoms.append((x, y))\n    bonds = []\n    for i in range(m):\n        a, b = map(int, stdin.split())\n        bonds.append((a-1, b-1))\n    for i in range(n):\n        if atoms[i][0] == -1 and atoms[i][1] == -1:\n            neighboring_atoms = []\n            for j in range(m):\n                if bonds[j][0] == i or bonds[j][1] == i:\n                    neighboring_atoms.append(bonds[j][0] if bonds[j][1] == i else bonds[j][1])\n            x_sum = 0\n            y_sum = 0\n            for j in neighboring_atoms:\n                x_sum += atoms[j][0]\n                y_sum += atoms[j][1]\n            x_avg = x_sum / len(neighboring_atoms)\n            y_avg = y_sum / len(neighboring_atoms)\n            atoms[i] = (x_avg, y_avg)\n    result = \"\"\n    for i in range(n):\n        result += str(atoms[i][0]) + \" \" + str(atoms[i][1]) + \"\\n\"\n    return result"
    },
    {
        "number": 2855,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.split('\\n')\n    N, M = map(int, lines[0].split())\n    paths = []\n    for i in range(1, M+1):\n        K, L = map(int, lines[i].split())\n        paths.append((K, L))\n\n    # compute expected time to exit\n    exits = [0] * N\n    for i in range(N):\n        exits[i] = 1\n    for path in paths:\n        exits[path[1]] += exits[path[0]]\n    total_exits = sum(exits)\n    expected_time = total_exits / N\n\n    # format output\n    return '{:.6f}'.format(expected_time)"
    },
    {
        "number": 2856,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    N = int(stdin.readline().strip())\n    s = stdin.readline().strip()\n    count = 0\n    for i in range(N):\n        if s[i] == 'B':\n            count += 1\n    return count"
    },
    {
        "number": 2857,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(j+1, n):\n                if points[i][0] + points[j][0] > points[k][0] and points[i][1] + points[j][1] > points[k][1]:\n                    count += 1\n    return str(count)"
    },
    {
        "number": 2858,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    accusations = [int(line.strip()) for line in stdin]\n    mobsters = set()\n    for i in range(1, n+1):\n        if i not in accusations:\n            mobsters.add(i)\n        else:\n            mobsters.discard(accusations[i-1])\n    return len(mobsters)"
    },
    {
        "number": 2859,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    x1, y1 = map(int, lines[0].split())\n    x2, y2 = map(int, lines[1].split())\n    x3, y3 = map(int, lines[2].split())\n    xv, yv, r = map(int, lines[3].split())\n\n    # Calculate distance between centers\n    d12 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n    d23 = ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n\n    # Calculate angle between centers\n    angle = math.atan2(y2 - y1, x2 - x1)\n\n    # Calculate position of particle 1 after one time step\n    x1_new = x1 + xv * math.cos(angle) * 1\n    y1_new = y1 + yv * math.sin(angle) * 1\n\n    # Check for collisions\n    if d12 <= 2 * r:\n        # Particle 1 hits particle 2\n        if d23 <= 2 * r:\n            # Particle 1 hits particle 2 and 3\n            return '1'\n        else:\n            # Particle 1 hits particle 2 but not 3\n            return '2'\n    elif d23 <= 2 * r:\n        # Particle 1 hits particle 3 but not 2\n        return '3'\n    else:\n        # Particle 1 moves indefinitely\n        return '4'"
    },
    {
        "number": 2860,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, d, w = map(int, stdin.split())\n    lines = stdin.split('\\n')[1:-1]\n    count = 0\n    for line in lines:\n        words = line.split('.')\n        for word in words:\n            if len(word) > w:\n                count += 1\n                count += len(word) // w\n                if len(word) % w!= 0:\n                    count += 1\n            else:\n                count += 1\n    return count"
    },
    {
        "number": 2861,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R = int(stdin.readline().strip())\n    routines = []\n    for i in range(R):\n        routines.append(stdin.readline().strip())\n    quick_changes = 0\n    for i in range(R-1):\n        for j in range(i+1, R):\n            if set(routines[i]) & set(routines[j]):\n                quick_changes += 1\n    return str(quick_changes)"
    },
    {
        "number": 2862,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    materials = list(map(int, stdin.split()[1:]))\n    num_materials = len(materials)\n    num_dependencies = int(stdin.split()[0])\n    dependencies = []\n    for i in range(num_dependencies):\n        u, v, w = map(int, stdin.split())\n        dependencies.append((u, v, w))\n\n    # initialize variables\n    counts = [0] * num_materials\n    counts[num_materials-1] = materials[num_materials-1]\n\n    # iterate through dependencies\n    for u, v, w in dependencies:\n        counts[v] += min(w, counts[u])\n\n    # output result\n    return''.join(map(str, counts))"
    },
    {
        "number": 2863,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    emma_likes = list(map(int, stdin.split()[1:]))\n    marcos_likes = list(map(int, stdin.split()[1:]))\n    emma_dislikes = []\n    marcos_dislikes = []\n    emma_watched = []\n    marcos_watched = []\n    max_films = 0\n    for i in range(len(emma_likes)):\n        if i == 0 or emma_likes[i]!= emma_likes[i-1]:\n            emma_watched.append(emma_likes[i])\n            if emma_likes[i] not in emma_dislikes:\n                emma_dislikes.append(emma_likes[i])\n        else:\n            if emma_likes[i] not in emma_dislikes:\n                emma_watched.pop()\n                emma_dislikes.append(emma_likes[i])\n        if i == 0 or marcos_likes[i]!= marcos_likes[i-1]:\n            marcos_watched.append(marcos_likes[i])\n            if marcos_likes[i] not in marcos_dislikes:\n                marcos_dislikes.append(marcos_likes[i])\n        else:\n            if marcos_likes[i] not in marcos_dislikes:\n                marcos_watched.pop()\n                marcos_dislikes.append(marcos_likes[i])\n        if len(emma_watched) + len(marcos_watched) > max_films:\n            max_films = len(emma_watched) + len(marcos_watched)\n    return str(max_films)"
    },
    {
        "number": 2864,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    cards = stdin.readline().strip().split()\n    suggestions = []\n    for i in range(n):\n        suggestion = stdin.readline().strip().split()\n        suggestion[0] = suggestion[0].upper()\n        suggestion[1] = suggestion[1].upper()\n        suggestion[2] = suggestion[2].upper()\n        suggestion[3:] = [c.upper() if c!= '-' else '-' for c in suggestion[3:]]\n        suggestions.append(suggestion)\n\n    # Find the murderer\n    murderer = None\n    for i in range(len(cards)):\n        if cards[i] in ['A', 'B', 'C', 'D', 'E', 'F']:\n            murderer = cards[i]\n            break\n\n    # Find the murder weapon\n    murder_weapon = None\n    for i in range(len(cards)):\n        if cards[i] in ['G', 'H', 'I', 'J', 'K', 'L']:\n            murder_weapon = cards[i]\n            break\n\n    # Find the murder location\n    murder_location = None\n    for i in range(len(cards)):\n        if cards[i] in ['M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U']:\n            murder_location = cards[i]\n            break\n\n    # Check if we have enough information to make an accusation\n    if murderer is None or murder_weapon is None or murder_location is None:\n        return '?' * 3\n\n    # Check if we have all the cards needed to make an accusation\n    if murderer not in [s[0] for s in suggestions] or murder_weapon not in [s[1] for s in suggestions] or murder_location not in [s[2] for s in suggestions]:\n        return '?' * 3\n\n    # Check if we have all the evidence needed to make an accusation\n    evidence = set()\n    for s in suggestions:\n        if s[0] == murderer:\n            evidence.add(s[3])\n        if s[1] == murder_weapon:\n            evidence.add(s[3])\n        if s[2] == murder_location:\n            evidence.add(s[3])\n    if len(evidence) < 3:\n        return '?' * 3\n\n    # Check if we have all the evidence cards needed to make an accusation\n    for c in evidence:\n        if c == '*' or c not in cards:\n            return '?' * 3\n\n    # We have enough information to make an accusation\n    return murderer + murder_weapon + murder_location"
    },
    {
        "number": 2865,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x1, x2 = map(int, stdin.split()[0:2])\n    n1, n2 = map(int, stdin.split()[2:4])\n    t1 = list(map(int, stdin.split()[4:4+n1]))\n    t2 = list(map(int, stdin.split()[4+n1:4+n1+n2]))\n\n    # simulate cars\n    x1_speed = 0\n    x2_speed = 0\n    x1_pos = x1\n    x2_pos = x2\n    for t in sorted(t1 + t2):\n        if t in t1:\n            x1_speed = 1\n        if t in t2:\n            x2_speed = 1\n        x1_pos += x1_speed\n        x2_pos += x2_speed\n        if abs(x1_pos - x2_pos) < 5:\n            return f\"bumper tap at time {t+1}\"\n    return \"safe and sound\""
    },
    {
        "number": 2866,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    digits = set(stdin)\n    n = len(digits)\n    if n == 1:\n        return \"1\"\n    if n == 2:\n        return \"2\"\n    if n == 3:\n        return \"3\"\n    if n == 4:\n        return \"4\"\n    if n == 5:\n        return \"5\"\n    if n == 6:\n        return \"6\"\n    if n == 7:\n        return \"7\"\n    if n == 8:\n        return \"8\"\n    if n == 9:\n        return \"9\"\n    if n == 10:\n        return \"10\"\n    if n == 11:\n        return \"11\"\n    if n == 12:\n        return \"12\"\n    if n == 13:\n        return \"13\"\n    if n == 14:\n        return \"14\"\n    if n == 15:\n        return \"15\"\n    if n == 16:\n        return \"16\"\n    if n == 17:\n        return \"17\"\n    if n == 18:\n        return \"18\"\n    if n == 19:\n        return \"19\"\n    if n == 20:\n        return \"20\"\n    if n == 21:\n        return \"21\"\n    if n == 22:\n        return \"22\"\n    if n == 23:\n        return \"23\"\n    if n == 24:\n        return \"24\"\n    if n == 25:\n        return \"25\"\n    if n == 26:\n        return \"26\"\n    if n == 27:\n        return \"27\"\n    if n == 28:\n        return \"28\"\n    if n == 29:\n        return \"29\"\n    if n == 30:\n        return \"30\"\n    if n == 31:\n        return \"31\"\n    if n == 32:\n        return \"32\"\n    if n == 33:\n        return \"33\"\n    if n == 34:\n        return \"34\"\n    if n == 35:\n        return \"35\"\n    if n == 36:\n        return \"36\"\n    if n == 37:\n        return \"37\"\n    if n == 38:\n        return \"38\"\n    if n == 39:\n        return \"39\"\n    if n == 40:\n        return \"40\"\n    if n == 41:\n        return \"41\"\n    if n == 42:\n        return \"42\"\n    if n == 43:\n        return \"43\"\n    if n == 44:\n        return \"44\"\n    if n == 45:\n        return \"45\"\n    if n == 46:\n        return \"46\"\n    if n == 47:\n        return \"47\"\n    if n == 48:\n        return \"48\"\n    if n == 49:\n        return \"49\"\n    if n == 50:\n        return \"50\"\n    if n == 51:\n        return \"51\"\n    if n == 52:\n        return \"52\"\n    if n == 53:\n        return \"53\"\n    if n == 54:\n        return \"54\"\n    if n == 55:\n        return \"55\"\n    if n == 56:\n        return \"56\"\n    if n == 57:\n        return \"57\"\n    if n == 58:\n        return \"58\"\n    if n == 59:\n        return \"59\"\n    if n == 60:\n        return \"60\"\n    if n == 61:\n        return \"61\"\n    if n == 62:\n        return \"62\"\n    if n == 63:\n        return \"63\"\n    if n == 64:\n        return \"64\"\n    if n == 65:\n        return \"65\"\n    if n == 66:\n        return \"66\"\n    if n == 67:\n        return \"67\"\n    if n == 68:\n        return \"68\"\n    if n == 69:\n        return \"69\"\n    if n == 70:\n        return \"70\"\n    if n == 71:\n        return \"71\"\n    if n == 72:\n        return \"72\"\n    if n == 73:\n        return \"73\"\n    if n == 7"
    },
    {
        "number": 2867,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    V = list(map(int, stdin.readline().strip().split()))\n    C = list(map(int, stdin.readline().strip().split()))\n\n    # preprocess\n    primes = []\n    for i in range(2, N+1):\n        is_prime = True\n        for j in range(2, int(i**0.5)+1):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n\n    # solve\n    happiness = 0\n    for i in range(1, N+1):\n        if C[i] == 0:\n            continue\n        for p in primes:\n            if p**V[i] > i:\n                happiness += C[i] * V[i]\n                break\n\n    return str(happiness)"
    },
    {
        "number": 2868,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, word = map(str, stdin.split())\n    X = int(X)\n    if X == 0:\n        return word\n    for i in range(X):\n        word = word[-1] + word[:-1]\n    return word"
    },
    {
        "number": 2869,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    num = stdin.strip()\n    roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    result = 0\n    prev_value = 0\n    for i in range(len(num)-1, -1, -1):\n        curr_value = roman_dict[num[i]]\n        if curr_value < prev_value:\n            result -= curr_value\n        else:\n            result += curr_value\n        prev_value = curr_value\n    return ''.join([key for key, value in roman_dict.items() if value == result])"
    },
    {
        "number": 2870,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    p, q = map(int, stdin.split())\n    dp = [[0] * q for _ in range(p)]\n    for i in range(p):\n        dp[i][0] = 1\n    for j in range(q):\n        dp[0][j] = 1\n    for i in range(1, p):\n        for j in range(1, q):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n            if i == j:\n                dp[i][j] -= 1\n            elif i == p-j:\n                dp[i][j] -= 1\n    return str(dp[p-1][q-1])"
    },
    {
        "number": 2871,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    skills = list(map(int, stdin.readline().split()))\n    skills.sort()\n    return str(sum(skills[:k]))"
    },
    {
        "number": 2872,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    date_str, day_str = stdin.strip().split('\\n')\n    day_num = int(date_str.split()[0])\n    month_str = date_str.split()[1]\n    day_name = day_str.strip()\n\n    # check if today is Friday\n    if day_name == 'FRI':\n        return 'TGIF'\n    elif day_name == 'SAT' or day_name == 'SUN':\n        return ':('\n    else:\n        # check if today might be Friday\n        if month_str == 'FEB' and day_num == 29:\n            return 'TGIF'\n        else:\n            return 'not sure if today might be Friday'"
    },
    {
        "number": 2873,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    vowels = set(['A', 'E', 'I', 'O', 'U'])\n    count = 0\n    for i in range(len(stdin)):\n        if stdin[i] == '_':\n            for j in range(ord('A'), ord('Z')+1):\n                if chr(j) not in vowels and stdin[i-3:i]!= '___' and 'L' in stdin[i-3:i]:\n                    count += 1\n    return count"
    },
    {
        "number": 2874,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    people = list(map(int, stdin.split()[2:2+n]))\n    trees = list(map(int, stdin.split()[2+n:]))\n    trees.sort()\n    count = 0\n    for i in range(n):\n        if people[i] < trees[0]:\n            count += 1\n    return count"
    },
    {
        "number": 2875,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    values = list(map(int, stdin.readline().strip().split()))\n    values.sort()\n    for i in range(n):\n        if values[i]!= i+1:\n            return \"impossible\"\n    return \"1 {} {}\".format(n, n)"
    },
    {
        "number": 2876,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, z = map(int, stdin.readline().strip().split())\n        points.append((x, z))\n\n    # find Lipschitz constant\n    xs = [x for x, z in points]\n    max_diff = max(abs(z - points[i+1][1]) for i, z in enumerate(points[:-1]))\n    L = max_diff / max(abs(x - xs[i+1]) for i, x in enumerate(xs[:-1]))\n\n    # print result\n    return str(L)"
    },
    {
        "number": 2877,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    word = stdin.strip()\n    n = len(word)\n    if n < 3:\n        return word\n    mid = n // 2\n    left = word[:mid]\n    right = word[mid:]\n    left = left[::-1]\n    right = right[::-1]\n    return left + right"
    },
    {
        "number": 2878,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    grid = [list(line) for line in lines[1:]]\n\n    # Count triplets\n    triplets = 0\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j]!= '.':\n                # Check if there are three letters on the same line\n                for k in range(n):\n                    if grid[i][j] == grid[k][j] == grid[k][j+1]:\n                        triplets += 1\n                    if grid[i][j] == grid[i+1][j] == grid[i+1][j+1]:\n                        triplets += 1\n                    if grid[i][j] == grid[i+1][j] == grid[i+2][j]:\n                        triplets += 1\n\n    return str(triplets)"
    },
    {
        "number": 2879,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    h, w = map(int, stdin.split())\n    matrix = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    k = 1\n    while True:\n        for i in range(h):\n            for j in range(w):\n                if matrix[i][j] == 'X':\n                    matrix[i][j] = str(k)\n                    for di in range(-1, 2):\n                        for dj in range(-1, 2):\n                            if di!= 0 or dj!= 0:\n                                ni, nj = i + di, j + dj\n                                if 0 <= ni < h and 0 <= nj < w and matrix[ni][nj] == '.':\n                                    matrix[ni][nj] = str(k)\n        k += 1\n        if k > 5:\n            break\n    if k == 6:\n        return '\\n'.join([''.join(row) for row in matrix])\n    else:\n        return \"No solution\""
    },
    {
        "number": 2880,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    R, C = map(int, stdin.split())\n    table = []\n    for i in range(R):\n        table.append(list(stdin.readline().strip()))\n    count = 0\n    for i in range(R):\n        if len(set(table[i])) == C:\n            count += 1\n        else:\n            break\n    return count"
    },
    {
        "number": 2881,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    X, Y = stdin.split()\n    if len(X)!= len(Y):\n        return \"no\"\n    count = 0\n    for i in range(len(X)):\n        if X[i]!= Y[i]:\n            count += 1\n            if count > 1:\n                return \"no\"\n    if count == 1:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 2882,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    result = []\n    def backtrack(s: str, left: int, right: int) -> None:\n        if len(s) == 2*n:\n            result.append(s)\n            return\n        if left < n:\n            backtrack(s+'(', left+1, right)\n        if right < left:\n            backtrack(s+')', left, right+1)\n    backtrack('', 0, 0)\n    return result"
    },
    {
        "number": 2883,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    intervals = [[int(x) for x in interval.split(\",\")] for interval in stdin.split()]\n    merged_intervals = []\n    for interval in intervals:\n        if not merged_intervals or merged_intervals[-1][1] < interval[0]:\n            merged_intervals.append(interval)\n        else:\n            merged_intervals[-1][1] = max(merged_intervals[-1][1], interval[1])\n    return merged_intervals"
    },
    {
        "number": 2884,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    pass"
    },
    {
        "number": 2885,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    intervals, newInterval = stdin.split('\\n')\n    intervals = [[int(x) for x in interval.split(',')] for interval in intervals[1:-1].split('],[')]\n    newInterval = [int(x) for x in newInterval[1:-1].split(',')]\n    merged = False\n    for i in range(len(intervals)):\n        if intervals[i][1] < newInterval[0]:\n            continue\n        elif intervals[i][0] > newInterval[1]:\n            intervals.insert(i, newInterval)\n            merged = True\n            break\n        else:\n            intervals[i][0] = min(intervals[i][0], newInterval[0])\n            intervals[i][1] = max(intervals[i][1], newInterval[1])\n            merged = True\n            break\n    if not merged:\n        intervals.append(newInterval)\n    return str([[str(x) for x in interval] for interval in intervals])[1:-1].replace(' ', '')"
    },
    {
        "number": 2886,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    if n < 2:\n        return '-1 -1'\n    count = {}\n    for c in s:\n        count[c] = count.get(c, 0) + 1\n    max_count = max(count.values())\n    if max_count > n // 2:\n        for i in range(n):\n            if count[s[i]] == max_count:\n                j = i + 1\n                while j < n and count[s[j]] == max_count:\n                    j += 1\n                return f'{i+1} {j}'\n    return '-1 -1'"
    },
    {
        "number": 2887,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    volumes = list(map(int, lines[1].split()))\n    temperatures = list(map(int, lines[2].split()))\n\n    # calculate evaporation\n    evaporation = [0] * n\n    for i in range(n):\n        evaporation[i] = volumes[i] * temperatures[i]\n        if evaporation[i] < 0:\n            evaporation[i] = 0\n\n    # calculate total evaporation\n    total_evaporation = [0] * n\n    for i in range(n):\n        total_evaporation[i] = sum(evaporation[:i+1])\n\n    # output result\n    return''.join(map(str, total_evaporation))"
    },
    {
        "number": 2888,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, sin = map(int, stdin.split())\n    e = list(map(int, stdin.split()))\n    xv = 0\n    for i in range(n):\n        if sin >= 10:\n            xv += (sin * e[i])\n            sin = 0\n        else:\n            xv += (sin * e[i])\n            sin = 0\n    return str(xv)"
    },
    {
        "number": 2889,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n_lawnmowers = int(lines[0].split()[1])\n    lawnmower_info = []\n    for i in range(1, n_lawnmowers+1):\n        info = lines[i].split(',')\n        name = info[0].strip()\n        price = int(info[1].strip())\n        cutting_rate = int(info[2].strip())\n        cutting_time = int(info[3].strip())\n        recharge_time = int(info[4].strip())\n        lawnmower_info.append((name, price, cutting_rate, cutting_time, recharge_time))\n\n    # calculate the minimum number of cuts needed to cut the whole lawn\n    total_cuts = 0\n    for lawnmower in lawnmower_info:\n        total_cuts += lawnmower[2] * lawnmower[3] // lawnmower[4]\n\n    # find the cheapest lawnmower that can cut the lawn at least once a week\n    cheapest_lawnmower = None\n    cheapest_price = float('inf')\n    for lawnmower in lawnmower_info:\n        if lawnmower[2] * lawnmower[3] // lawnmower[4] >= total_cuts:\n            if lawnmower[1] < cheapest_price:\n                cheapest_lawnmower = lawnmower[0]\n                cheapest_price = lawnmower[1]\n            elif lawnmower[1] == cheapest_price:\n                cheapest_lawnmower +='' + lawnmower[0]\n\n    # output the result\n    if cheapest_lawnmower is None:\n        return 'no such mower'\n    else:\n        return cheapest_lawnmower"
    },
    {
        "number": 2890,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M, k1, k2 = map(int, stdin.readline().split())\n    tracks = []\n    for _ in range(M):\n        u, v, x, c = map(int, stdin.readline().split())\n        tracks.append((u, v, x, c))\n    S, T = map(int, stdin.readline().split())\n\n    # preprocess tracks\n    red_tracks = [(u, v, x) for u, v, x, c in tracks if c == 1]\n    blue_tracks = [(u, v, x) for u, v, x, c in tracks if c == 2]\n    white_tracks = [(u, v, x) for u, v, x, c in tracks if c == 0]\n\n    # check if it is possible to reach T using k1 red tracks, k2 blue tracks, and any number of white tracks\n    if k1 > len(red_tracks) or k2 > len(blue_tracks):\n        return -1\n\n    # sort tracks by length\n    red_tracks.sort(key=lambda x: x[2])\n    blue_tracks.sort(key=lambda x: x[2])\n    white_tracks.sort(key=lambda x: x[2])\n\n    # initialize variables\n    red_used = 0\n    blue_used = 0\n    white_used = 0\n    time = 0\n\n    # add red tracks\n    for u, v, x in red_tracks:\n        if red_used < k1:\n            time += x\n            red_used += 1\n        else:\n            break\n\n    # add blue tracks\n    for u, v, x in blue_tracks:\n        if blue_used < k2:\n            time += x\n            blue_used += 1\n        else:\n            break\n\n    # add white tracks\n    for u, v, x in white_tracks:\n        time += x\n\n    # check if it is possible to reach T\n    if S == T:\n        return time\n    else:\n        return -1"
    },
    {
        "number": 2891,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *c = map(int, stdin.split())\n    b = 1\n    for i in range(n):\n        b *= (365 - i) / 365\n        b *= c[i] / 100\n    return f\"{-math.log10(b):.6f}\""
    },
    {
        "number": 2892,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    sizes = list(map(int, stdin.split()[1:]))\n    sizes.sort()\n    if sizes[-1] > n:\n        return \"impossible\"\n    groups = []\n    for i in range(n):\n        if not groups or sizes[i]!= groups[-1][-1] + 1:\n            groups.append([sizes[i]])\n        else:\n            groups[-1].append(sizes[i])\n    if len(groups) == 1:\n        return str(len(groups[0]))\n    openings = 0\n    for i in range(len(groups)):\n        for j in range(i+1, len(groups)):\n            if groups[j][0] == groups[i][-1] + 1:\n                openings += 1\n                for k in range(len(groups[i])):\n                    groups[i][k] = None\n                for k in range(len(groups[j])):\n                    groups[j][k] = None\n    return str(openings)"
    },
    {
        "number": 2893,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    op = 0\n    stack = []\n    for i in range(n):\n        while stack and a[i] < a[stack[-1]]:\n            j = stack.pop()\n            op += 1\n        stack.append(i)\n    return str(op)"
    },
    {
        "number": 2894,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    L, K, T1, T2, H = map(float, stdin.split())\n    F1 = L + K * T1\n    F2 = L + K * T2\n    if H <= L:\n        return f\"{F1:.6f} {F2:.6f}\"\n    else:\n        return f\"{H:.6f} {H:.6f}\""
    },
    {
        "number": 2895,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    x_s, y_s, x_f, y_f, n = map(float, stdin.split()[0:5])\n    y_layers = list(map(float, stdin.split()[5:]))\n    speeds = list(map(float, stdin.split()[5+n:]))\n\n    # define constants\n    g = 9.81  # gravity constant\n    rho_water = 1000  # density of water\n    rho_ice = 917  # density of ice\n    rho_sand = 2400  # density of sand\n    rho_asphalt = 2700  # density of asphalt\n    C_water = 4180  # heat capacity of water\n    C_ice = 2100  # heat capacity of ice\n    C_sand = 1600  # heat capacity of sand\n    C_asphalt = 1800  # heat capacity of asphalt\n    T_water = 273.15 + 25  # temperature of water at 25 degrees Celsius\n    T_ice = 273.15 + 0  # temperature of ice at 0 degrees Celsius\n    T_sand = 273.15 + 10  # temperature of sand at 10 degrees Celsius\n    T_asphalt = 273.15 + 15  # temperature of asphalt at 15 degrees Celsius\n    L_water = 1000  # heat transfer coefficient of water\n    L_ice = 2000  # heat transfer coefficient of ice\n    L_sand = 1500  # heat transfer coefficient of sand\n    L_asphalt = 1800  # heat transfer coefficient of asphalt\n    A_water = 1000000  # surface area of water\n    A_ice = 1000000  # surface area of ice\n    A_sand = 1000000  # surface area of sand\n    A_asphalt = 1000000  # surface area of asphalt\n    dt = 0.1  # time step size\n\n    # define functions\n    def distance(x1, y1, x2, y2):\n        return ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n\n    def time(v, d):\n        return d / v\n\n    def heat_transfer(rho, C, L, A, T1, T2, d):\n        return rho * C * L * A * (T2 - T1) / d\n\n    def f(x, y, t, layer):\n        # get speed and density of current layer\n        v = speeds[layer]\n        rho = rho_water if layer == 0 else rho_sand if layer == 1 else rho_ice if layer == 2 else rho_asphalt\n\n        # calculate distance to finish line\n        d = distance(x, y, x_f, y_f)\n\n        # calculate time to finish line\n        t_f = time(v, d)\n\n        # calculate time to next layer change\n        if layer < n-1:\n            y_next = y_layers[layer+1]\n            t_next = distance(x, y, x_s, y_next) / speeds[layer+1]\n        else:\n            t_next = float('inf')\n\n        # calculate time to next layer change or finish line\n        t_next = min(t_next, t_f)\n\n        # calculate heat transfer from previous layer\n        if layer > 0:\n            T_prev = T_water if layer == 1 else T_sand if layer == 2 else T_ice if layer == 3 else T_asphalt\n            d_prev = distance(x, y, x_s, y_layers[layer-1])\n            Q_prev = heat_transfer(rho_water, C_water, L_water, A_water, T_prev, T_water, d_prev)\n        else:\n            Q_prev = 0\n\n        # calculate heat transfer to next layer\n        if layer < n-1:\n            T_next = T_water if layer+1 == 1 else T_sand if layer+1 == 2 else T_ice if layer+1 == 3 else T_asphalt\n            d_next = distance(x, y, x_s, y_layers[layer+1])\n            Q_next = heat_transfer(rho, C, L, A,"
    },
    {
        "number": 2896,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    before, after = stdin.split()\n    before_set = set(before)\n    after_set = set(after)\n    if before_set == after_set:\n        return \"0\"\n    else:\n        return str(len(before_set.symmetric_difference(after_set)))"
    },
    {
        "number": 2897,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    r, c = map(int, stdin.readline().split())\n    map_ = []\n    for i in range(r):\n        map_.append(list(map(int, stdin.readline().strip())))\n    n = int(stdin.readline())\n    for i in range(n):\n        r1, c1, r2, c2 = map(int, stdin.readline().split())\n        binary_friendly = True\n        decimal_friendly = True\n        for i in range(r1-1, r2):\n            for j in range(c1-1, c2):\n                if map_[i][j] == 1:\n                    binary_friendly = False\n                else:\n                    decimal_friendly = False\n        if binary_friendly:\n            return \"binary\"\n        elif decimal_friendly:\n            return \"decimal\"\n    return \"neither\""
    },
    {
        "number": 2898,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    drives = []\n    for i in range(n):\n        a, b = map(int, stdin.readline().strip().split())\n        drives.append((a, b))\n    drives.sort(key=lambda x: x[1])\n    extra_capacity = 0\n    for i in range(n):\n        a, b = drives[i]\n        if a > b:\n            extra_capacity += a - b\n    return str(extra_capacity)"
    },
    {
        "number": 2899,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    adj = [[] for _ in range(n)]\n    for i in range(n-1):\n        u, v = map(int, stdin.readline().strip().split())\n        adj[u-1].append(v-1)\n        adj[v-1].append(u-1)\n    used = [False] * n\n    freq = [0] * n\n    def dfs(u, f):\n        used[u] = True\n        freq[u] = f\n        for v in adj[u]:\n            if not used[v]:\n                dfs(v, f)\n    dfs(0, 0)\n    for i in range(n):\n        if not used[i]:\n            dfs(i, freq[i]+1)\n    return '\\n'.join(map(str, freq))"
    },
    {
        "number": 2900,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    n = len(s)\n    count = [0] * (n-1)\n    for k in range(1, n):\n        for i in range(n-k):\n            j = i + k\n            if s[i] == 'B' and s[j] == 'A':\n                count[k-1] += 1\n    return '\\n'.join(map(str, count))"
    },
    {
        "number": 2901,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, edges = map(int, stdin.split()[0:2])\n    edges = [tuple(map(int, stdin.split())) for _ in range(n)]\n    players = [stdin.split() for _ in range(10)]\n\n    # build graph\n    graph = [[] for _ in range(10)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # compute synergy scores\n    synergy = [[0] * 10 for _ in range(10)]\n    for i in range(10):\n        for j in range(10):\n            if players[i][1] == players[j][1]:\n                synergy[i][j] = 1\n            if players[i][2] == players[j][2]:\n                synergy[i][j] = max(synergy[i][j], 1)\n            if players[i][3] == players[j][3]:\n                synergy[i][j] = max(synergy[i][j], 2)\n            if players[i][1] == players[j][1] and players[i][2] == players[j][2]:\n                synergy[i][j] = max(synergy[i][j], 2)\n            if players[i][1] == players[j][1] and players[i][3] == players[j][3]:\n                synergy[i][j] = max(synergy[i][j], 3)\n\n    # compute degrees\n    degrees = [0] * 10\n    for i in range(10):\n        for j in range(10):\n            if j in graph[i]:\n                degrees[i] += 1\n\n    # check perfect team\n    perfect = True\n    for i in range(10):\n        if degrees[i] == 0:\n            perfect = False\n            break\n        for j in range(10):\n            if synergy[i][j] < degrees[i]:\n                perfect = False\n                break\n        if not perfect:\n            break\n    if perfect:\n        return \"yes\"\n    else:\n        return \"no\""
    },
    {
        "number": 2902,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    c, n, m = map(int, stdin.split())\n    cows = list(map(int, stdin.readline().split()))\n    days = list(map(int, stdin.readline().split()))\n\n    # initialize variables\n    inspected = 0\n    for i in range(n):\n        if cows[i] > 0:\n            inspected += 1\n\n    # iterate through days\n    for j in range(m):\n        # calculate number of farms to inspect\n        inspected += days[j]\n\n        # adjust number of farms to inspect based on cows on each farm\n        for i in range(n):\n            if cows[i] > c:\n                inspected += 1\n                cows[i] = c // 2\n                if c % 2 == 1:\n                    cows.append(1)\n            elif cows[i] > 0:\n                cows[i] = 0\n\n        # adjust number of farms to inspect based on number of cows on each farm\n        for i in range(n):\n            if cows[i] > 0:\n                inspected += 1\n\n    # output result\n    return str(inspected)"
    },
    {
        "number": 2903,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    ft = [0] * (n + 1)\n    for i in range(q):\n        op, i, delta = stdin.split()\n        i = int(i)\n        delta = int(delta)\n        if op == \"+\":\n            ft[i] += delta\n            j = i + 1\n            while j <= n:\n                ft[j] += delta\n                j += j & -j\n        else:\n            ans = 0\n            j = i\n            while j > 0:\n                ans += ft[j]\n                j -= j & -j\n            print(ans)\n    return \"\""
    },
    {
        "number": 2904,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    rows, cols = map(int, stdin.split()[0].split())\n    grid = []\n    for i in range(rows):\n        grid.append(list(stdin.readline().strip()))\n    num_regions = int(stdin.readline().strip())\n    regions = []\n    for i in range(num_regions):\n        num_cells = int(stdin.readline().strip())\n        cells = []\n        for j in range(num_cells):\n            row, col = map(int, stdin.readline().strip()[1:-1].split(','))\n            cells.append((row-1, col-1))\n        regions.append(cells)\n\n    # solve sudoku\n    def solve(grid, regions):\n        # find empty cell\n        for i in range(rows):\n            for j in range(cols):\n                if grid[i][j] == '-':\n                    row, col = i, j\n                    break\n            else:\n                continue\n            break\n\n        # check if solved\n        if row == rows-1 and col == cols-1:\n            return True\n\n        # try digits\n        for digit in range(1, rows+1):\n            if is_valid(grid, regions, row, col, digit):\n                grid[row][col] = str(digit)\n                if solve(grid, regions):\n                    return True\n                grid[row][col] = '-'\n\n        return False\n\n    def is_valid(grid, regions, row, col, digit):\n        # check row\n        for j in range(cols):\n            if grid[row][j] == str(digit):\n                return False\n\n        # check column\n        for i in range(rows):\n            if grid[i][col] == str(digit):\n                return False\n\n        # check region\n        for i, j in regions[region_index(row, col, regions)]:\n            if grid[i][j] == str(digit):\n                return False\n\n        return True\n\n    def region_index(row, col, regions):\n        for i, region in enumerate(regions):\n            if (row, col) in region:\n                return i\n        return None\n\n    # solve sudoku\n    solve(grid, regions)\n\n    # print solution\n    return '\\n'.join([' '.join(row) for row in grid])"
    },
    {
        "number": 2905,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    hotdogs = list(map(int, stdin.split()[1:]))\n    buns = list(map(int, stdin.split()[2+len(hotdogs):]))\n    if sum(hotdogs)!= sum(buns):\n        return \"impossible\"\n    else:\n        return str(min(len(hotdogs), len(buns)))"
    },
    {
        "number": 2906,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n+1)]\n    for _ in range(m):\n        a, b = map(int, stdin.split())\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # bfs to find a target for each player\n    targets = [-1] * (n+1)\n    queue = [(1, 0)]\n    while queue:\n        player, target = queue.pop(0)\n        if targets[player] == -1:\n            targets[player] = target\n            for neighbor in graph[player]:\n                if targets[neighbor] == -1:\n                    queue.append((neighbor, target+1))\n\n    # check if everyone will be hit\n    if targets.count(-1) > 0:\n        return \"Impossible\"\n    else:\n        return \"\\n\".join(map(str, targets[1:]))"
    },
    {
        "number": 2907,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    offset, message, n = map(int, stdin.split())\n    vowels = set(['a', 'e', 'i', 'o', 'u', 'y'])\n    consonants = set('bcdfghjklmnpqrstvwxyz')\n    steps = 0\n    for i in range(n):\n        new_message = ''\n        for char in message:\n            if char in vowels:\n                new_message += char\n            elif char in consonants:\n                new_char = chr((ord(char) - ord('a') + offset) % 26 + ord('a'))\n                new_message += new_char\n            else:\n                new_message += char\n        message = new_message\n        steps += 1\n    vowel_count = sum(1 for char in message if char in vowels)\n    consonant_count = sum(1 for char in message if char in consonants)\n    if vowel_count >= consonant_count * 2:\n        return 'Boris'\n    else:\n        return 'Colleague'"
    },
    {
        "number": 2908,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    cards = list(map(int, stdin.readline().split()))\n    for i in range(n):\n        for j in range(i+1, n):\n            if cards[i] + cards[j] == s:\n                return \"YES\"\n            if cards[i] + cards[j] == s + 10:\n                return \"YES\"\n            if cards[i] + cards[j] == s - 10:\n                return \"YES\"\n            if cards[i] + cards[j] == s + 100:\n                return \"YES\"\n            if cards[i] + cards[j] == s - 100:\n                return \"YES\"\n            if cards[i] + cards[j] == s + 1000:\n                return \"YES\"\n            if cards[i] + cards[j] == s - 1000:\n                return \"YES\"\n            if cards[i] + cards[j] == s + 10000:\n                return \"YES\"\n            if cards[i] + cards[j] == s - 10000:\n                return \"YES\"\n            if cards[i] + cards[j] == s + 100000:\n                return \"YES\"\n            if cards[i] + cards[j] == s - 100000:\n                return \"YES\"\n            if cards[i] + cards[j] == s + 1000000:\n                return \"YES\"\n            if cards[i] + cards[j] == s - 1000000:\n                return \"YES\"\n            if cards[i] + cards[j] == s + 10000000:\n                return \"YES\"\n            if cards[i] + cards[j] == s - 10000000:\n                return \"YES\"\n            if cards[i] + cards[j] == s + 100000000:\n                return \"YES\"\n            if cards[i] + cards[j] == s - 100000000:\n                return \"YES\"\n    return \"NO\""
    },
    {
        "number": 2909,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    line = list(map(int, stdin.readline().strip().split()))\n    boss = list(map(int, stdin.readline().strip().split()))\n\n    # check if line can be sorted\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i]:\n            break\n    else:\n        return \"Possible\"\n\n    # check if line can be rotated again\n    for i in range(n):\n        if line[i]!= boss[i"
    },
    {
        "number": 2910,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    A = list(map(int, stdin.readline().strip().split()))\n    B = list(map(int, stdin.readline().strip().split()))\n    yellow = 0\n    pink = 0\n    white = 0\n    for i in range(n):\n        for j in range(n):\n            if (i+j) % 3 == 0:\n                yellow += A[i] * B[j]\n            elif (i+j) % 3 == 1:\n                pink += A[i] * B[j]\n            else:\n                white += A[i] * B[j]\n    return f\"{yellow} {pink} {white}\""
    },
    {
        "number": 2911,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    p = 1\n    for x in map(int, stdin.split()):\n        p *= 1 / x\n    return str((p * t**n) % 998244353)"
    },
    {
        "number": 2912,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    strings = [stdin.readline().strip() for _ in range(n)]\n    for _ in range(n-1):\n        a, b = map(int, stdin.readline().split())\n        strings[a-1] += strings[b-1]\n        strings[b-1] = \"\"\n    return strings[-1]"
    },
    {
        "number": 2913,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, r = map(int, stdin.split())\n    grid = [list(line.strip()) for line in stdin.split('\\n')[1:]]\n    mirrors = [(i, j) for i in range(n) for j in range(n) if grid[i][j] in ['\\\\', '/']]\n    if (c, r) in mirrors:\n        return 'NO'\n    for mirror in mirrors:\n        if mirror[0] == c or mirror[1] == r:\n            continue\n        if (mirror[0] - c) ** 2 + (mirror[1] - r) ** 2 <= 2:\n            return 'NO'\n    return 'YES'"
    },
    {
        "number": 2914,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s, k = map(int, stdin.split())\n    if k == 1:\n        return str(1/s)\n    elif k == s:\n        return str(1)\n    else:\n        return str(sum([1/s**i for i in range(k, s+1)]) - sum([1/s**i for i in range(k-1, s)]))"
    },
    {
        "number": 2915,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    deliveries = []\n    for i in range(1, n+1):\n        x, t = map(int, lines[i].split())\n        deliveries.append((x, t))\n    deliveries.sort()\n    total_distance = 0\n    current_load = 0\n    for x, t in deliveries:\n        if current_load + t <= k:\n            current_load += t\n        else:\n            total_distance += 2*x\n            current_load = t\n    total_distance += 2*x\n    return str(total_distance)"
    },
    {
        "number": 2916,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    islands = []\n    for i in range(1, n+1):\n        T, K = map(int, lines[i].split())\n        pairs = []\n        for j in range(K):\n            s, v = map(int, lines[i+1+j].split())\n            pairs.append((s, v))\n        islands.append((T, pairs))\n\n    # simulate collapses\n    surviving = set(range(1, n+1))\n    for i in range(n):\n        T, pairs = islands[i]\n        if T > 0:\n            for s, v in pairs:\n                if s in surviving and v > T:\n                    surviving.remove(i)\n                    break\n\n    # output result\n    return str(len(surviving))"
    },
    {
        "number": 2917,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    catalan = [1]\n    for i in range(1, n+1):\n        catalan.append((4*i*i - 6*i + 6)//3)\n    s = 0\n    for i in range(n+1):\n        s += catalan[i]*catalan[n-i]\n    return str(s)"
    },
    {
        "number": 2918,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    matrix = []\n    for i in range(n):\n        matrix.append(list(stdin.readline().strip()))\n    visited = [False] * n\n    stack = [0]\n    while stack:\n        curr = stack.pop()\n        if visited[curr]:\n            continue\n        visited[curr] = True\n        for i in range(n):\n            if matrix[curr][i] == '1' and not visited[i]:\n                stack.append(i)\n        if curr == 0:\n            break\n    if curr!= 0:\n        return \"impossible\"\n    return \" \".join(map(str, stack + [0]))"
    },
    {
        "number": 2919,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    stack = []\n    for char in stdin:\n        if char == 'S':\n            stack.append(0)\n        elif char == 'T':\n            stack.append(1)\n        elif char == 'N':\n            if len(stack) < 2:\n                return \"Invalid copy operation\\n\"\n            stack.append(stack[-1])\n        elif char =='':\n            if len(stack) < 2:\n                return \"Invalid swap operation\\n\"\n            stack[-1], stack[-2] = stack[-2], stack[-1]\n        elif char == '\\n':\n            if len(stack) < 1:\n                return \"Invalid remove operation\\n\"\n            stack.pop()\n        elif char == '\\t':\n            if len(stack) < 2:\n                return \"Invalid addition operation\\n\"\n            stack.append(stack[-1] + stack[-2])\n        elif char == '\\r':\n            if len(stack) < 2:\n                return \"Invalid subtraction operation\\n\"\n            stack.append(stack[-1] - stack[-2])\n        elif char == '\\f':\n            if len(stack) < 2:\n                return \"Invalid multiplication operation\\n\"\n            stack.append(stack[-1] * stack[-2])\n        elif char == '\\v':\n            if len(stack) < 2:\n                return \"Invalid division operation\\n\"\n            if stack[-1] == 0:\n                return \"Division by zero\\n\"\n            stack.append(stack[-2] // stack[-1])\n        elif char == '\\b':\n            if len(stack) < 1:\n                return \"Invalid print operation\\n\"\n            if stack[-1] == 0:\n                return \"0\\n\"\n            elif stack[-1] < 0:\n                stack.append(stack[-1] * -1)\n                stack.append(0)\n            else:\n                stack.append(stack[-1])\n            while len(stack) > 0:\n                digit = stack.pop()\n                if digit == 0:\n                    print(0, end='')\n                elif digit == 1:\n                    print(1, end='')\n                else:\n                    print(digit, end='')\n            print()\n            stack = []\n    return \"\""
    },
    {
        "number": 2920,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = [list(line.strip()) for line in stdin]\n    s = (0, 0)\n    t = (n-1, n-1)\n    paths = 0\n    visited = set()\n    def dfs(pos):\n        nonlocal paths\n        if pos == t:\n            paths += 1\n            return\n        visited.add(pos)\n        x, y = pos\n        if x+1 < n and grid[x+1][y]!= '#' and (x+1, y) not in visited:\n            dfs((x+1, y))\n        if y+1 < n and grid[x][y+1]!= '#' and (x, y+1) not in visited:\n            dfs((x, y+1))\n    dfs(s)\n    if paths == 0:\n        paths = 1\n        def dfs(pos):\n            nonlocal paths\n            if pos == t:\n                paths += 1\n                return\n            visited.add(pos)\n            x, y = pos\n            if x+1 < n and grid[x+1][y]!= '#' and (x+1, y) not in visited:\n                dfs((x+1, y))\n            if y+1 < n and grid[x][y+1]!= '#' and (x, y+1) not in visited:\n                dfs((x, y+1))\n            if x-1 >= 0 and grid[x-1][y]!= '#' and (x-1, y) not in visited:\n                dfs((x-1, y))\n            if y-1 >= 0 and grid[x][y-1]!= '#' and (x, y-1) not in visited:\n                dfs((x, y-1))\n        dfs(s)\n        if paths == 1:\n            return \"THE GAME IS A LIE\"\n        else:\n            return \"INCONCEIVABLE\"\n    else:\n        return str(paths % (10**9 + 7))"
    },
    {
        "number": 2921,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    m, u, d = map(float, stdin.split())\n    drinks = []\n    for i in range(int(d)):\n        name, strength, size, price = stdin.split()[i*4:i*4+4]\n        drinks.append((name, float(strength), size, float(price)))\n\n    # Calculate maximum alcohol consumption\n    max_alc = m / (u * 0.01)\n\n    # Check if any drink can be bought\n    for name, strength, size, price in drinks:\n        alc = strength / 100 * 0.01 * (1/3 if size == '1/3' else 1/2 if size == '1/2' else 1)\n        if alc <= max_alc:\n            count = int(m / price)\n            m -= count * price\n            print(name, count)\n            if m < 0:\n                return \"IMPOSSIBLE\"\n\n    return \"\""
    },
    {
        "number": 2922,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    a = list(map(int, stdin.readline().strip().split()))\n    if sum(a) % 2!= 0:\n        return \"NO\"\n    m = sum(a) // 2\n    dp = [[False] * (m+1) for _ in range(n+1)]\n    dp[0][0] = True\n    for i in range(1, n+1):\n        for j in range(m+1):\n            if j >= a[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-a[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    if dp[n][m]:\n        return \"YES\"\n    else:\n        return \"NO\""
    },
    {
        "number": 2923,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    w, h = map(int, lines[0].split())\n    grid = []\n    for line in lines[1:]:\n        grid.append(list(line))\n\n    # find all 'A' positions\n    a_pos = []\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 'A':\n                a_pos.append((i, j))\n\n    # find all 'B' positions\n    b_pos = []\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] == 'B':\n                b_pos.append((i, j))\n\n    # find all neutral positions\n    neutral_pos = []\n    for i in range(h):\n        for j in range(w):\n            if grid[i][j] not in ['A', 'B', '0']:\n                neutral_pos.append((i, j))\n\n    # find all paths from 'A' to 'B'\n    paths = []\n    for a in a_pos:\n        for b in b_pos:\n            path = []\n            visited = set()\n            queue = [(a, 0)]\n            while queue:\n                pos, dist = queue.pop(0)\n                if pos == b:\n                    path.append(pos)\n                    break\n                if pos in visited:\n                    continue\n                visited.add(pos)\n                for neighbor in get_neighbors(pos, w, h):\n                    if neighbor in visited:\n                        continue\n                    if grid[neighbor[0]][neighbor[1]] == '0':\n                        continue\n                    queue.append((neighbor, dist+1))\n            if path:\n                paths.append(path)\n\n    # find minimum number of soldiers required\n    min_soldiers = 0\n    for path in paths:\n        for pos in path:\n            if grid[pos[0]][pos[1]] in ['A', 'B']:\n                continue\n            min_soldiers += int(grid[pos[0]][pos[1]])\n\n    return str(min_soldiers)\n\ndef"
    },
    {
        "number": 2924,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    crank_gears, back_gears, max_change = map(int, stdin.split()[0:3])\n    crank_teeth = list(map(int, stdin.readline().split()))\n    back_teeth = list(map(int, stdin.readline().split()))\n\n    # sort the gears in descending order of teeth\n    crank_gears = sorted(crank_gears, key=lambda x: crank_teeth[x-1], reverse=True)\n    back_gears = sorted(back_gears, key=lambda x: back_teeth[x-1], reverse=True)\n\n    # check if the gears can be changed without increasing the cadence too much\n    for i in range(crank_gears[0], crank_gears[-1]+1):\n        for j in range(back_gears[0], back_gears[-1]+1):\n            if abs(crank_teeth[i-1] - crank_teeth[i-2]) <= max_change/100*crank_teeth[i-1] and \\\n               abs(back_teeth[j-1] - back_teeth[j-2]) <= max_change/100*back_teeth[j-1]:\n                return \"Ride on!\"\n\n    return \"Time to change gears!\""
    },
    {
        "number": 2925,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    songs = []\n    for i in range(n):\n        f, s = stdin.split()[2*i:2*i+2]\n        songs.append((int(f), s))\n    songs.sort(key=lambda x: (-x[0], x[1]))\n    return '\\n'.join([s[1] for s in songs[:m]])"
    },
    {
        "number": 2926,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    categories = {}\n    for i in range(int(stdin.readline().strip())):\n        category, num_words, *words = stdin.readline().strip().split()\n        categories[category] = set(words)\n\n    matches = {}\n    for line in stdin:\n        words = set(line.strip().split())\n        for category, category_words in categories.items():\n            if category_words.intersection(words):\n                matches[category] = matches.get(category, 0) + 1\n\n    max_matches = max(matches.values())\n    return '\\n'.join(sorted(category for category, count in matches.items() if count == max_matches))"
    },
    {
        "number": 2927,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    n = int(stdin.readline().strip())\n    yards = list(map(int, stdin.readline().strip().split()))[:n]\n\n    # Determine outcome\n    start_pos = 20\n    end_pos = 100\n    total_yards = sum(yards)\n    if total_yards >= 80 and start_pos + total_yards <= end_pos:\n        return \"Touchdown\"\n    elif start_pos - 20 <= total_yards <= start_pos:\n        return \"Safety\"\n    else:\n        return \"Nothing\""
    },
    {
        "number": 2928,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    B, P, F = map(int, stdin.readline().split())\n    tax_bands = []\n    for _ in range(B):\n        s, p = map(float, stdin.readline().split())\n        tax_bands.append((s, p))\n    friends = []\n    for _ in range(F):\n        e, m = map(float, stdin.readline().split())\n        friends.append((e, m))\n\n    # Calculate tax\n    total_income = sum(e for e, _ in friends)\n    tax_paid = 0\n    for s, p in tax_bands:\n        if total_income > s:\n            tax_paid += (total_income - s) * p / 100\n            total_income = s\n    tax_paid += total_income * P / 100\n\n    # Calculate gifts\n    gifts = []\n    for e, m in friends:\n        if e <= tax_paid:\n            gifts.append(0)\n        else:\n            gifts.append(m - (e - tax_paid) * (1 - p / 100))\n\n    # Format output\n    return \"\\n\".join(\"{:.6f}\".format(g) for g in gifts)"
    },
    {
        "number": 2929,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    n = int(lines[0])\n    heights = [[int(x) for x in line.split()] for line in lines[1:]]\n\n    # initialize variables\n    water_level = 1\n    hours = 0\n    visited = set()\n\n    # bfs to find exit\n    queue = [(0, 0)]\n    while queue:\n        i, j = queue.pop(0)\n        if (i, j) == (n-1, n-1):\n            return hours\n        if (i, j) in visited:\n            continue\n        visited.add((i, j))\n        for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < n and 0 <= nj < n and heights[ni][nj] >= water_level + 1:\n                queue.append((ni, nj))\n        water_level += 1\n        hours += 1\n\n    # unreachable\n    return -1"
    },
    {
        "number": 2930,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    nums = list(map(int, stdin.readline().strip().split()))\n    dp = [1] * n\n    for i in range(1, n):\n        if nums[i] > nums[i-1]:\n            dp[i] = dp[i-1] + 1\n    for i in range(n-2, -1, -1):\n        if nums[i] > nums[i+1]:\n            dp[i] = max(dp[i], dp[i+1] + 1)\n    return max(dp)"
    },
    {
        "number": 2931,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    data = []\n    for i in range(1, n+1):\n        data.append(list(map(int, lines[i].split())))\n    result = []\n    for i in range(n):\n        a, b = data[i]\n        if a > b:\n            result.append([i+1, i+1+n])\n        elif a == b:\n            result.append([i+1, i+1+n])\n        else:\n            result.append([i+1+n, i+1])\n    return '\\n'.join([' '.join(map(str, r)) for r in result])"
    },
    {
        "number": 2932,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s, k = stdin.strip().split()\n    s = list(s)\n    n = len(s)\n    swaps = 0\n    for i in range(n):\n        for j in range(i+k, n):\n            if abs(ord(s[i]) - ord(s[j])) >= k:\n                s[i], s[j] = s[j], s[i]\n                swaps += 1\n    s = ''.join(s)\n    if s == ''.join(sorted(s)):\n        return \"Yes\"\n    else:\n        return \"No\""
    },
    {
        "number": 2933,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    weights = sorted([int(stdin.readline().strip()) for _ in range(n)])\n    total_weight = sum(weights)\n    if total_weight == 1000:\n        return str(total_weight)\n    elif total_weight < 1000:\n        return str(weights[0])\n    else:\n        return str(weights[-1])"
    },
    {
        "number": 2934,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    MOD = 10**9\n    dp = [[0] * (m+1) for _ in range(n+1)]\n    dp[0][0] = 1\n    for i in range(1, n+1):\n        for j in range(m+1):\n            if i == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n    return dp[n][m]"
    },
    {
        "number": 2935,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, f, s, t = map(int, stdin.split()[0:5])\n    roads = []\n    for i in range(m):\n        u, v, c = map(int, stdin.split()[0:3])\n        roads.append((u, v, c))\n    flights = []\n    for i in range(f):\n        u, v = map(int, stdin.split()[0:2])\n        flights.append((u, v))\n    visited = [False] * n\n    visited[s] = True\n    queue = [(0, s)]\n    while queue:\n        cost, u = heapq.heappop(queue)\n        if u == t:\n            return str(cost)\n        for v, c in roads:\n            if u == v:\n                continue\n            if not visited[v]:\n                visited[v] = True\n                heapq.heappush(queue, (cost + c, v))\n    return \"No route found\""
    },
    {
        "number": 2936,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    A = list(map(int, stdin.split()))\n    max_sum = float('-inf')\n    for i in range(n):\n        for j in range(i+1, n+1):\n            subarray_sum = sum(A[i:j])\n            if subarray_sum > max_sum:\n                max_sum = subarray_sum\n    return str(max_sum)"
    },
    {
        "number": 2937,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k, c = map(int, stdin.split())\n    kids = [stdin.readline().strip() for _ in range(n)]\n    enemies = set()\n    for _ in range(k):\n        a, b = stdin.readline().strip().split()\n        enemies.add((a, b))\n        enemies.add((b, a))\n    groups = []\n    while kids:\n        group = []\n        for i in range(c):\n            if kids:\n                group.append(kids.pop(0))\n        for kid in group:\n            for enemy in enemies:\n                if kid in enemy:\n                    group.remove(kid)\n                    break\n        groups.append(group)\n    print(len(groups))\n    for group in groups:\n        print(' '.join(group))\n    return ''"
    },
    {
        "number": 2938,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    board = [[char for char in line.strip()] for line in stdin.split('\\n')]\n\n    # Check for checkmate\n    for i in range(8):\n        for j in range(8):\n            if board[i][j] == 'K':\n                # Check for kings\n                if i > 0 and board[i-1][j] == 'k':\n                    return 'Yes'\n                if i < 7 and board[i+1][j] == 'k':\n                    return 'Yes'\n                if j > 0 and board[i][j-1] == 'k':\n                    return 'Yes'\n                if j < 7 and board[i][j+1] == 'k':\n                    return 'Yes'\n                # Check for rooks\n                if i > 0 and board[i-1][j] == 'R':\n                    return 'Yes'\n                if i < 7 and board[i+1][j] == 'R':\n                    return 'Yes'\n                if j > 0 and board[i][j-1] == 'R':\n                    return 'Yes'\n                if j < 7 and board[i][j+1] == 'R':\n                    return 'Yes'\n\n    # No checkmate\n    return 'No'"
    },
    {
        "number": 2939,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    grid = []\n    for i in range(n):\n        grid.append(list(map(int, stdin.readline().strip())))\n    residential_zones = []\n    commercial_zones = []\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                residential_zones.append((i, j))\n            elif grid[i][j] == 3:\n                commercial_zones.append((i, j))\n    max_distance = 0\n    for residential_zone in residential_zones:\n        distances = []\n        for commercial_zone in commercial_zones:\n            distance = abs(residential_zone[0] - commercial_zone[0]) + abs(residential_zone[1] - commercial_zone[1])\n            distances.append(distance)\n        max_distance = max(max_distance, min(distances))\n    return str(max_distance)"
    },
    {
        "number": 2940,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    recipes = []\n    for i in range(n):\n        m = int(stdin.readline().strip())\n        ingredients = list(map(int, stdin.readline().strip().split()))\n        recipes.append((m, ingredients))\n\n    # concoct potions\n    count = 0\n    for m, ingredients in recipes:\n        if all(i in [1, 2, 3, 4, 5] for i in ingredients):\n            count += 1\n\n    return str(count)"
    },
    {
        "number": 2941,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, k = map(int, lines[0].split())\n    patients = []\n    for i in range(1, n+1):\n        q, t, m, s = lines[i].split()\n        t, s = int(t), int(s)\n        if q == '1':\n            patients.append((t, m, s))\n        elif q == '2':\n            patients.sort(key=lambda x: (-x[1], x[0]))\n            for p in patients:\n                if p[1] == m:\n                    patients.remove(p)\n                    break\n            else:\n                continue\n            if not patients:\n                return 'doctor takes a break'\n            patients.sort(key=lambda x: (-x[2], x[0]))\n            for p in patients:\n                if p[2] > s:\n                    return p[1]\n            return patients[0][1]\n        else:\n            patients.sort(key=lambda x: (-x[1], x[0]))\n            for p in patients:\n                if p[1] == m:\n                    patients.remove(p)\n                    break\n            else:\n                continue\n    return 'doctor takes a break'"
    },
    {
        "number": 2942,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    D = int(stdin)\n    n = int(D**0.5)\n    if n**2 == D:\n        return f\"{n} {n}\"\n    for i in range(n, 0, -1):\n        if (n-i)**2 == D:\n            return f\"{n-i} {n}\"\n    return \"impossible\""
    },
    {
        "number": 2943,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = len(stdin)\n    r_count = 0\n    b_count = 0\n    start = 0\n    end = 0\n    for i in range(n):\n        if stdin[i] == 'R':\n            r_count += 1\n        else:\n            b_count += 1\n        if r_count - b_count > end - start:\n            end = i\n            start = i - (r_count - b_count)\n        elif r_count - b_count == end - start:\n            if i < start:\n                start = i\n            elif i > end:\n                end = i\n    return f\"{start+1} {end+1}\""
    },
    {
        "number": 2944,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, d = map(int, stdin.readline().split())\n    people = {}\n    for i in range(n):\n        name, skepticism = stdin.readline().strip().split()\n        people[name] = int(skepticism)\n    connections = set()\n    for i in range(m):\n        u, v = stdin.readline().strip().split()\n        connections.add((u, v))\n        connections.add((v, u))\n    rumor_origin = stdin.readline().strip()\n    heard_rumor = set()\n    for i in range(d):\n        new_heard_rumor = set()\n        for u, v in connections:\n            if u in heard_rumor and v not in heard_rumor:\n                new_heard_rumor.add(v)\n            if v in heard_rumor and u not in heard_rumor:\n                new_heard_rumor.add(u)\n        heard_rumor.update(new_heard_rumor)\n    return len(heard_rumor) - 1"
    },
    {
        "number": 2945,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    total_time = int(stdin.split()[0])\n    first_type_monkeys = []\n    second_type_monkeys = []\n    for i in range(1, int(stdin.split()[1])+1):\n        first_type_monkeys.append(list(map(int, stdin.split()[i].split())))\n    for i in range(int(stdin.split()[1])+1, int(stdin.split()[1])+int(stdin.split()[2])+1):\n        second_type_monkeys.append(list(map(int, stdin.split()[i].split())))\n    first_type_time = 0\n    second_type_time = 0\n    for i in range(len(first_type_monkeys)):\n        first_type_time += first_type_monkeys[i][0] + first_type_monkeys[i][1]\n    for i in range(len(second_type_monkeys)):\n        second_type_time += second_type_monkeys[i][0] + second_type_monkeys[i][1]\n    return str(total_time - first_type_time - second_type_time)\n\nprint(solution(\"12\\n1\\n3 1\\n1\\n5 1\")) # Output: 5"
    },
    {
        "number": 2946,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, K = map(int, stdin.split())\n    prices = list(map(int, stdin.split()))\n\n    # calculate max profit\n    max_profit = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            profit = prices[j] - prices[i] - K * (j - i)\n            if profit > max_profit:\n                max_profit = profit\n\n    # output result\n    return str(max_profit)"
    },
    {
        "number": 2947,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline())\n    relations = []\n    for i in range(n):\n        m, nums = map(int, stdin.readline().split())\n        nums = list(map(int, stdin.readline().split()))\n        relations.append(nums)\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(len(relations[i])):\n                if relations[i][k] == relations[j][k]:\n                    return \"impossible\"\n\n    for i in range(n):\n        for j in range(i+1, n):\n            for k in range(len(relations[i])):\n                for l in range(k+1, len(relations[i])):\n                    if relations[i][k] == relations[j][l]:\n                        return f\"{i+1} {j+1} {relations[i][k]}\"\n\n    return \"impossible\""
    },
    {
        "number": 2948,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    mp_pairs = []\n    for i in range(5):\n        line = stdin.readline().strip()\n        if line:\n            pairs = line.split()\n            for pair in pairs:\n                mp_pairs.append(tuple(map(int, pair.split(','))))\n    parties = ['A'] * n\n    for pair in mp_pairs:\n        parties[pair[0]-1] = 'B'\n        parties[pair[1]-1] = 'B'\n    return ''.join(parties)"
    },
    {
        "number": 2949,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    pylons = []\n    for i in range(n):\n        x, y, a = map(int, stdin.readline().strip().split())\n        pylons.append((x, y, a))\n    pylons.sort()\n    count = 0\n    for i in range(n):\n        if pylons[i][2] == 1:\n            count += 1\n        elif pylons[i][2] == 2:\n            if i == 0 or pylons[i-1][1]!= pylons[i][1]:\n                count += 1\n            elif i == n-1 or pylons[i+1][1]!= pylons[i][1]:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2950,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    h = list(map(int, stdin.split()[1:]))\n    blocks = [h[i:i+2] for i in range(0, len(h), 2)]\n    blocks.sort(key=lambda x: x[0], reverse=True)\n    charges = 0\n    for block in blocks:\n        if block[0] == 1:\n            continue\n        if block[1] == 1:\n            charges += 1\n        else:\n            charges += block[1] - 1\n    return str(charges)"
    },
    {
        "number": 2951,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N = int(stdin.readline().strip())\n    a = [int(x) for x in stdin.readline().strip().split()]\n    b = [int(x) for x in stdin.readline().strip().split()]\n\n    # Calculate number of possible matches\n    count = 0\n    for i in range(N):\n        for j in range(N):\n            for k in range(N):\n                if i!= j and i!= k and j!= k:\n                    count += a[i] * b[j] * b[k]\n\n    return str(count)"
    },
    {
        "number": 2952,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    m, a, b, c = map(int, stdin.split())\n    if a + b + c == m:\n        return \"possible\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 2953,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    points = []\n    for i in range(n):\n        x, y = map(int, stdin.readline().strip().split())\n        points.append((x, y))\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if abs(points[i][0] - points[j][0]) == 2018 and abs(points[i][1] - points[j][1]) == 2018:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2954,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m, t = map(int, stdin.readline().split())\n    roads = []\n    for i in range(m):\n        u, v, d = map(int, stdin.readline().split())\n        roads.append((u, v, d))\n    s, t = map(int, stdin.readline().split())\n    k = int(stdin.readline())\n    spiders = list(map(int, stdin.readline().split()))\n\n    # build graph\n    graph = [[] for _ in range(n)]\n    for u, v, d in roads:\n        graph[u].append((v, d))\n        graph[v].append((u, d))\n\n    # bfs to find shortest path\n    dist = [float('inf')] * n\n    dist[s] = 0\n    queue = [s]\n    while queue:\n        u = queue.pop(0)\n        for v, d in graph[u]:\n            if dist[u] + d < dist[v]:\n                dist[v] = dist[u] + d\n                queue.append(v)\n\n    # find max distance\n    max_dist = 0\n    for u in spiders:\n        for v in spiders:\n            if u!= v:\n                max_dist = max(max_dist, dist[u] + dist[v])\n\n    # find max distance for path\n    max_path_dist = 0\n    for u in range(n):\n        for v in range(n):\n            if u!= v:\n                path_dist = 0\n                for i in range(n):\n                    if dist[i]!= float('inf'):\n                        path_dist += dist[i]\n                        if path_dist > t:\n                            break\n                if path_dist <= t:\n                    max_path_dist = max(max_path_dist, path_dist)\n\n    return str(max(max_dist, max_path_dist))"
    },
    {
        "number": 2955,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, c, b = map(int, stdin.split())\n    z = list(map(int, stdin.readline().split()))\n    if c > n - b:\n        return \"No solution\"\n    if c == n - b:\n        return \"1\" * n\n    if c == n - b - 1:\n        return \"1\" + \"0\" * (n - 1)\n    if c == n - b - 2:\n        return \"1\" + \"0\" * (n - 2) + \"1\"\n    if c == n - b - 3:\n        return \"1\" + \"0\" * (n - 3) + \"10\"\n    if c == n - b - 4:\n        return \"1\" + \"0\" * (n - 4) + \"101\"\n    if c == n - b - 5:\n        return \"1\" + \"0\" * (n - 5) + \"1010\"\n    if c == n - b - 6:\n        return \"1\" + \"0\" * (n - 6) + \"10101\"\n    if c == n - b - 7:\n        return \"1\" + \"0\" * (n - 7) + \"101010\"\n    if c == n - b - 8:\n        return \"1\" + \"0\" * (n - 8) + \"1010101\"\n    if c == n - b - 9:\n        return \"1\" + \"0\" * (n - 9) + \"10101010\"\n    if c == n - b - 10:\n        return \"1\" + \"0\" * (n - 10) + \"101010101\"\n    if c == n - b - 11:\n        return \"1\" + \"0\" * (n - 11) + \"1010101010\"\n    if c == n - b - 12:\n        return \"1\" + \"0\" * (n - 12) + \"10101010101\"\n    if c == n - b - 13:\n        return \"1\" + \"0\" * (n - 13) + \"101010101010\"\n    if c == n - b - 14:\n        return \"1\" + \"0\" * (n - 14) + \"1010101010101\"\n    if c == n - b - 15:\n        return \"1\" + \"0\" * (n - 15) + \"10101010101010\"\n    if c == n - b - 16:\n        return \"1\" + \"0\" * (n - 16) + \"101010101010101\"\n    if c == n - b - 17:\n        return \"1\" + \"0\" * (n - 17) + \"1010101010101010\"\n    if c == n - b - 18:\n        return \"1\" + \"0\" * (n - 18) + \"10101010101010101\"\n    if c == n - b - 19:\n        return \"1\" + \"0\" * (n - 19) + \"101010101010101010\"\n    if c == n - b - 20:\n        return \"1\" + \"0\" * (n - 20) + \"1010101010101010101\"\n    if c == n - b - 21:\n        return \"1\" + \"0\" * (n - 21) + \"10101010101010101010\"\n    if c == n - b - 22:\n        return \"1\" + \"0\" * (n - 22) + \"101010101010101010101\"\n    if c == n - b - 23:\n        return \"1\" + \"0\" * (n - 23) + \"10101010101010101010"
    },
    {
        "number": 2956,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    count = 0\n    visited = [False] * 9\n    visited[0] = True\n    turn_sequence = stdin.replace('?', 'S')\n    # Loop through each pivot\n    for i in range(1, 9):\n        # Check if the current pivot has already been visited\n        if visited[i]:\n            continue\n        # Check if the current pivot can be visited\n        if turn_sequence[i-1] == 'S':\n            visited[i] = True\n            count += 1\n            continue\n        # Check if the current pivot can be visited by turning around\n        if turn_sequence[i-1] == 'A':\n            visited[i] = True\n            count += 1\n            continue\n        # Check if the current pivot can be visited by turning left\n        if turn_sequence[i-1] == 'L':\n            if visited[i-3]:\n                visited[i] = True\n                count += 1\n            continue\n        # Check if the current pivot can be visited by turning right\n        if turn_sequence[i-1] == 'R':\n            if visited[i+3]:\n                visited[i] = True\n                count += 1\n            continue\n    return str(count)"
    },
    {
        "number": 2957,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for i in range(1, n):\n        if i % k == 0:\n            graph[i].append(i-1)\n            graph[i-1].append(i)\n    visited = [False] * n\n    queue = [(0, 0)]\n    while queue:\n        node, dist = queue.pop(0)\n        if node == n-1:\n            return str(dist)\n        if not visited[node]:\n            visited[node] = True\n            for neighbor in graph[node]:\n                queue.append((neighbor, dist+1))\n    return \"No path found\""
    },
    {
        "number": 2958,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, T, K = map(int, stdin.split()[0:3])\n    deck = list(map(int, stdin.readline().split()))\n    a = []\n    b = []\n    for i in range(T):\n        a_i, b_i = map(int, stdin.readline().split())\n        a.append(a_i)\n        b.append(b_i)\n\n    # calculate profit\n    profit = 0\n    for i in range(T):\n        if deck.count(i+1) < 2:\n            continue\n        if deck.count(i+1) == 2:\n            profit += a[i] - b[i]\n        else:\n            profit += a[i] - b[i] * (deck.count(i+1) - 2)\n\n    # check if complete deck\n    if len(set(deck)) == T and len(deck) == K:\n        return profit\n    else:\n        return -1"
    },
    {
        "number": 2959,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    grid = []\n    for i in range(n):\n        grid.append(list(stdin.readline().strip()))\n\n    rings = [[0] * m for _ in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j] == 'T':\n                rings[i][j] = 1\n                for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < n and 0 <= nj < m and grid[ni][nj] == 'T':\n                        rings[i][j] = max(rings[i][j], rings[ni][nj] + 1)\n\n    max_rings = max(max(row) for row in rings)\n    if max_rings < 10:\n        fmt = '{:2d}'\n    else:\n        fmt = '{:3d}'\n\n    result = []\n    for i in range(n):\n        row = []\n        for j in range(m):\n            if rings[i][j] == 0:\n                row.append('.')\n            else:\n                row.append(fmt.format(rings[i][j]))\n        result.append(''.join(row).rjust(m))\n    return '\\n'.join(result)"
    },
    {
        "number": 2960,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    count = 0\n    for m in range(1, n+1):\n        for k in range(1, m):\n            if binomial(m, k) % 2 == 1:\n                count += 1\n    return count\n\ndef"
    },
    {
        "number": 2961,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n = int(stdin.readline().strip())\n    senior_config = []\n    for i in range(n):\n        senior_config.append(list(map(int, stdin.readline().strip().split())))\n    you_config = []\n    for i in range(n):\n        you_config.append(list(map(int, stdin.readline().strip().split())))\n\n    # check if senior can reach dormitory\n    def can_reach_dormitory(config):\n        visited = set()\n        queue = [(1, 0)]\n        while queue:\n            room, path_len = queue.pop(0)\n            if room == n:\n                return True\n            if room in visited:\n                continue\n            visited.add(room)\n            for i in range(1, 5):\n                if config[room][i-1]!= 0:\n                    next_room = config[room][i-1]\n                    if next_room not in visited:\n                        queue.append((next_room, path_len+1))\n        return False\n\n    if not can_reach_dormitory(senior_config):\n        return \"Impossible\"\n\n    # check if you can reach dormitory\n    def can_reach_dormitory_with_instructions(config, instructions):\n        visited = set()\n        queue = [(1, 0)]\n        for i in range(len(instructions)):\n            room = instructions[i]\n            if room == 0:\n                return False\n            if room in visited:\n                return False\n            visited.add(room)\n            for j in range(1, 5):\n                if config[room][j-1]!= 0:\n                    next_room = config[room][j-1]\n                    if next_room not in visited:\n                        queue.append((next_room, i+1))\n        return queue[-1][0] == n\n\n    for i in range(1, 2**n):\n        instructions = [int(x) for x in bin(i)[2:].zfill(n)]\n        if can_reach_dormitory_with_instructions(you_config, instructions):\n            return \"Yes\"\n\n    return \"No\""
    },
    {
        "number": 2962,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n, t = map(int, lines[0].split())\n    people = []\n    for i in range(1, n+1):\n        c, t_i = map(int, lines[i].split())\n        people.append((c, t_i))\n    people.sort(key=lambda x: x[1])\n    total_cash = 0\n    for c, t_i in people:\n        if t_i <= t:\n            total_cash += c\n            t -= 1\n        else:\n            break\n    return str(total_cash)"
    },
    {
        "number": 2963,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin)\n    x = 1\n    while x**x < n:\n        x += 1\n    return str(x)"
    },
    {
        "number": 2964,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    num_shots = int(stdin.readline().strip())\n    shots = []\n    for i in range(num_shots):\n        x, y = map(int, stdin.readline().strip().split())\n        shots.append((x, y))\n\n    # Calculate distances\n    distances = []\n    for i in range(len(shots)):\n        for j in range(i+1, len(shots)):\n            dx = shots[i][0] - shots[j][0]\n            dy = shots[i][1] - shots[j][1]\n            distances.append(dx**2 + dy**2)\n\n    # Find longest distance\n    longest_distance = max(distances)\n\n    # Format output\n    return f\"{longest_distance:.6f}\""
    },
    {
        "number": 2965,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    P, D, N = map(int, lines[0].split())\n    pumpkins = []\n    for i in range(1, P+1):\n        R, C = map(int, lines[i].split())\n        pumpkins.append((R, C))\n    grid = [[0 for _ in range(N)] for _ in range(N)]\n    for r, c in pumpkins:\n        grid[r][c] = 1\n    for d in range(D):\n        new_grid = [[0 for _ in range(N)] for _ in range(N)]\n        for r in range(N):\n            for c in range(N):\n                if grid[r][c] == 1:\n                    for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        nr, nc = r+dr, c+dc\n                        if 0 <= nr < N and 0 <= nc < N and grid[nr][nc] == 1:\n                            new_grid[r][c] = 1\n                            break\n                    else:\n                        new_grid[r][c] = 0\n                else:\n                    new_grid[r][c] = 0\n        grid = new_grid\n    result = []\n    for r, c in pumpkins:\n        if grid[r][c] == 1:\n            result.append(\"ALIVE\")\n        else:\n            result.append(d)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2966,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    M, N = map(int, stdin.split())\n    count = 0\n    for i in range(M):\n        for j in range(N):\n            if i == j or i + j == M - 1:\n                count += 1\n    return str(count)"
    },
    {
        "number": 2967,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    arrivals = []\n    for i in range(n):\n        a, s = map(int, stdin.split())\n        arrivals.append((a, s))\n    arrivals.sort()\n    unlockings = 0\n    current_unlock = 0\n    for a, s in arrivals:\n        if current_unlock + s > m:\n            unlockings += 1\n            current_unlock = 0\n        current_unlock += s\n    return unlockings"
    },
    {
        "number": 2968,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    b, n, e = map(int, stdin.split()[0:3])\n    s_b, s_n, s_e = map(int, stdin.split()[3:6])\n    m = (b + n + e) // 2\n    c = list(map(int, stdin.split()[6:]))\n    c.sort()\n    v = c[-1] * (s_b + s_n)\n    return str(v)"
    },
    {
        "number": 2969,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.split()[0])\n    hand = []\n    for i in range(n):\n        card = stdin.split()[i+1].split()\n        rank = int(card[0])\n        suit = card[1]\n        hand.append((rank, suit))\n    hand.sort(key=lambda x: (x[0], x[1]))\n    piles = [hand[:26], hand[26:]]\n    for i in range(2):\n        piles[i].sort(key=lambda x: x[0], reverse=True)\n    for i in range(2):\n        piles[i].sort(key=lambda x: x[1])\n    if piles[0] == piles[1]:\n        return \"possible\"\n    else:\n        return \"impossible\""
    },
    {
        "number": 2970,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, k = map(int, stdin.split())\n    buildings = list(map(int, stdin.split()))\n    buildings.sort()\n    noise_levels = [0] * m\n    for i in range(n):\n        building = buildings[i]\n        noise_levels[building-1] += i+1\n    empty_count = 0\n    for i in range(m):\n        if noise_levels[i] > k:\n            empty_count += 1\n            noise_levels[i] = 0\n    return sum(noise_levels) + empty_count * k"
    },
    {
        "number": 2971,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    words = [stdin.readline().strip() for _ in range(n)]\n    max_rhyme_power = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            rhyme_power = 0\n            for k in range(min(len(words[i]), len(words[j]))):\n                if words[i][-k-1]!= words[j][-k-1]:\n                    break\n                rhyme_power += 1\n            max_rhyme_power = max(max_rhyme_power, rhyme_power)\n    return max_rhyme_power"
    },
    {
        "number": 2972,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    a, b, k = map(int, stdin.split())\n    count = 0\n    for i in range(a, b+1):\n        if str(i) == str(i)[::-1]:\n            for j in range(2, k+1):\n                if str(i, j) == str(i, j)[::-1]:\n                    count += 1\n                    break\n    return count"
    },
    {
        "number": 2973,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, t = map(int, stdin.split())\n    distances = []\n    speeds = []\n    for i in range(n):\n        d, s = map(int, stdin.split())\n        distances.append(d)\n        speeds.append(s)\n    c = sum(distances) / sum(speeds)\n    return f\"{c:.6f}\""
    },
    {
        "number": 2974,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N = int(stdin.readline().strip())\n    P = list(map(int, stdin.readline().strip().split()))\n    D = list(map(int, stdin.readline().strip().split()))\n\n    # check if prosecution and defense claim the same order of events\n    if P == D:\n        return \"0 0\"\n\n    # find the minimum consistent recollection of k_p events where it is possible to determine for sure who is right\n    k_p = 1\n    while True:\n        consistent_p = set()\n        for i in range(k_p):\n            consistent_p.add(P[i])\n        for i in range(k_p, N):\n            if P[i] in consistent_p:\n                consistent_p.remove(P[i])\n            else:\n                consistent_p.add(P[i])\n        if len(consistent_p) == 1:\n            break\n        k_p += 1\n\n    # find the minimum consistent recollection of k_r events where it is possible to determine for sure who is right\n    k_r = 1\n    while True:\n        consistent_r = set()\n        for i in range(k_r):\n            consistent_r.add(D[i])\n        for i in range(k_r, N):\n            if D[i] in consistent_r:\n                consistent_r.remove(D[i])\n            else:\n                consistent_r.add(D[i])\n        if len(consistent_r) == 1:\n            break\n        k_r += 1\n\n    return f\"{k_p} {k_r}\""
    },
    {
        "number": 2975,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    ingredients = []\n    for i in range(N):\n        X, Y, S_M, P_M, S_V, P_V = map(int, stdin.readline().split())\n        ingredients.append((X, Y, S_M, P_M, S_V, P_V))\n\n    # sort ingredients by price\n    ingredients.sort(key=lambda x: x[3] + x[5])\n\n    # calculate total cost\n    total_cost = 0\n    for i in range(N):\n        X, Y, S_M, P_M, S_V, P_V = ingredients[i]\n        total_cost += Y * X\n        if total_cost > M:\n            break\n\n    # calculate number of servings\n    num_servings = 0\n    for i in range(N):\n        X, Y, S_M, P_M, S_V, P_V = ingredients[i]\n        if total_cost > M:\n            break\n        num_servings += M // (P_M + P_V)\n        total_cost -= num_servings * (P_M + P_V)\n\n    return str(num_servings)"
    },
    {
        "number": 2976,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    players = lines[0].split()\n    n = int(lines[1])\n    for i in range(2, 2+n):\n        match = lines[i].split()\n        if len(match) == 1:\n            if match[0] == 'federer':\n                return 'ne'\n            else:\n                continue\n        sets = [set(map(int, s.split(':'))) for s in match]\n        if len(sets) == 1:\n            if sets[0] == {6, 6}:\n                return 'da'\n            else:\n                return 'ne'\n        if len(sets) == 2:\n            if sets[0] == {6, 6} or sets[1] == {6, 6}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[1].pop()} or sets[1] == {6, 6-sets[0].pop()}:\n                return 'da'\n            else:\n                return 'ne'\n        if len(sets) == 3:\n            if sets[0] == {6, 6} or sets[1] == {6, 6} or sets[2] == {6, 6}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[1].pop()} or sets[1] == {6, 6-sets[0].pop()} or sets[2] == {6, 6-sets[1].pop()}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[2].pop()} or sets[1] == {6, 6-sets[2].pop()} or sets[2] == {6, 6-sets[0].pop()}:\n                return 'da'\n            else:\n                return 'ne'\n        if len(sets) == 4:\n            if sets[0] == {6, 6} or sets[1] == {6, 6} or sets[2] == {6, 6} or sets[3] == {6, 6}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[1].pop()} or sets[1] == {6, 6-sets[0].pop()} or sets[2] == {6, 6-sets[1].pop()} or sets[3] == {6, 6-sets[2].pop()}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[2].pop()} or sets[1] == {6, 6-sets[2].pop()} or sets[2] == {6, 6-sets[0].pop()} or sets[3] == {6, 6-sets[1].pop()}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[3].pop()} or sets[1] == {6, 6-sets[3].pop()} or sets[2] == {6, 6-sets[3].pop()} or sets[3] == {6, 6-sets[0].pop()}:\n                return 'da'\n            else:\n                return 'ne'\n        if len(sets) == 5:\n            if sets[0] == {6, 6} or sets[1] == {6, 6} or sets[2] == {6, 6} or sets[3] == {6, 6} or sets[4] == {6, 6}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[1].pop()} or sets[1] == {6, 6-sets[0].pop()} or sets[2] == {6, 6-sets[1].pop()} or sets[3] == {6, 6-sets[2].pop()} or sets[4] == {6, 6-sets[3].pop()}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[2].pop()} or sets[1] == {6, 6-sets[2].pop()} or sets[2] == {6, 6-sets[0].pop()} or sets[3] == {6, 6-sets[1].pop()} or sets[4] == {6, 6-sets[3].pop()}:\n                return 'da'\n            elif sets[0] == {6, 6-sets[3].pop()} or sets[1] == {6, 6-sets[3"
    },
    {
        "number": 2977,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    lines = stdin.strip().split('\\n')\n    question = lines[0]\n    num_alternatives = int(lines[1])\n    alternatives = [line.strip().split(', ') for line in lines[2:]]\n\n    # compute incongruity of each alternative\n    incongruities = []\n    for i in range(num_alternatives):\n        incongruity = 0\n        for j in range(num_alternatives):\n            if i == j:\n                continue\n            num_changes = 0\n            for part in alternatives[i]:\n                if part not in alternatives[j]:\n                    num_changes += 1\n            incongruity = max(incongruity, num_changes)\n        incongruities.append(incongruity)\n\n    # find least incongruous alternatives\n    least_incongruous = []\n    min_incongruity = min(incongruities)\n    for i in range(num_alternatives):\n        if incongruities[i] == min_incongruity:\n            least_incongruous.append(alternatives[i])\n\n    # output least incongruous alternatives\n    return '\\n'.join([' '.join(alt) for alt in least_incongruous])"
    },
    {
        "number": 2978,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    S = int(lines[0])\n    streets = []\n    for i in range(1, S+1):\n        x1, y1, x2, y2 = map(int, lines[i].split())\n        streets.append(((x1, y1), (x2, y2)))\n\n    T = int(lines[S+1])\n    for i in range(S+2, S+2+T):\n        x3, y3, x4, y4 = map(int, lines[i].split())\n        for street in streets:\n            if (x3, y3) in street and (x4, y4) in street:\n                return \"same\"\n        if (x3, y3) == (x4, y4):\n            return \"same\"\n    return \"different\""
    },
    {
        "number": 2979,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m, s, t = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        x, y = map(int, stdin.readline().split())\n        graph[x].append(y)\n        graph[y].append(x)\n    infected = [False] * n\n    infected[s] = True\n    queue = [(s, 1)]\n    squawks = [0] * n\n    while queue:\n        node, time = queue.pop(0)\n        if time == t:\n            return squawks[node]\n        for neighbor in graph[node]:\n            if not infected[neighbor]:\n                infected[neighbor] = True\n                queue.append((neighbor, time + 1))\n                squawks[neighbor] += 1\n    return 0"
    },
    {
        "number": 2980,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    k, s = map(int, stdin.readline().split())\n    s = set(map(int, stdin.readline().split()))\n    m = int(stdin.readline())\n    result = []\n    for _ in range(m):\n        l = int(stdin.readline())\n        h = list(map(int, stdin.readline().split()))\n        xor_sum = 0\n        for i in range(l):\n            xor_sum ^= h[i]\n        if xor_sum == 0:\n            result.append('W')\n        else:\n            if any(all(h[i] % s_i == 0 for i in range(l)) for s_i in s):\n                result.append('W')\n            else:\n                result.append('L')\n    return ''.join(result)"
    },
    {
        "number": 2981,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    lines = stdin.split('\\n')\n    n = int(lines[0])\n    vertices = []\n    for i in range(1, n+1):\n        x, y = map(float, lines[i].split())\n        vertices.append((x, y))\n    # find the center of the polygon\n    cx = sum(x for x, y in vertices) / n\n    cy = sum(y for x, y in vertices) / n\n    # find the radius of the circumcircle\n    r = max(\n        ((x - cx)**2 + (y - cy)**2)**0.5\n        for x, y in vertices\n    )\n    # find the angle between the first and last vertices\n    a = (vertices[-1][0] - vertices[0][0])**2 + (vertices[-1][1] - vertices[0][1])**2\n    a = a**0.5\n    a = a if a > 0 else 1\n    # find the angle between each adjacent pair of vertices\n    angles = [\n        (\n            (vertices[i][0] - vertices[i-1][0])**2 +\n            (vertices[i][1] - vertices[i-1][1])**2\n        )**0.5\n        for i in range(1, n)\n    ]\n    angles.append(a)\n    # find the minimum slot size\n    slot_size = r / (2 * (n - 2) * (1 - cos(2*pi/n)))\n    return f'{slot_size:.4f}'"
    },
    {
        "number": 2982,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.readline().strip())\n    ratings = list(map(int, stdin.readline().strip().split()))\n    MOD = 10**9 + 7\n    dp = [[0] * 4 for _ in range(n)]\n    dp[0][ratings[0]-1] = 1\n    dp[1][ratings[1]-1] = 1\n    dp[2][ratings[2]-1] = 1\n    for i in range(3, n):\n        for j in range(4):\n            dp[i][j] = (dp[i-1][(j-1)%4] + dp[i-1][(j+1)%4]) % MOD\n    return sum(dp[n-1]) % MOD"
    },
    {
        "number": 2983,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, *sizes = map(int, stdin.split())\n    if sum(sizes) < 10**9:\n        total_area = 0\n        for i in range(n):\n            total_area += sizes[i] * (2**(-(i+1)/4))**2\n        if total_area > 2**(-5/4)**2:\n            return \"impossible\"\n        else:\n            return sum(sizes) * (2**(-5/4))\n    else:\n        return \"impossible\""
    },
    {
        "number": 2984,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, l, p = map(int, stdin.split())\n    cars = [i for i in range(1, n+1)]\n    passengers = [int(x) for x in stdin.split('\\n')[1:]]\n    passengers.sort()\n    max_distance = 0\n    max_boarding = 0\n    for i in range(p):\n        car = min(cars, key=lambda x: abs(x-passengers[i]))\n        max_distance += abs(car-passengers[i])\n        max_boarding += 1\n        cars.remove(car)\n    return str(max_distance) + '\\n' + str(max_boarding)"
    },
    {
        "number": 2985,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    l, d, n = map(int, stdin.split())\n    positions = list(map(int, stdin.readline().split()))\n\n    # calculate maximal number of additional birds\n    max_additional = (l - 2 * d) // (d - 6)\n    if (l - 2 * d) % (d - 6)!= 0:\n        max_additional += 1\n\n    # check if there are enough birds already sitting on the wire\n    if len(positions) + max_additional > n:\n        return str(n)\n\n    # check if there are enough free spaces on the wire\n    if max_additional > n:\n        return str(n)\n\n    # calculate the number of additional birds that can be added\n    additional = max_additional - len(positions)\n\n    # check if there are enough free spaces on the wire\n    if additional > n:\n        return str(n)\n\n    return str(additional)"
    },
    {
        "number": 2986,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Initialize variables\n    T = int(stdin.readline().strip())\n    output = \"\"\n    for i in range(T):\n        # Read input string\n        input_str = stdin.readline().strip()\n        # Initialize variables\n        cursor = 0\n        backspace_count = 0\n        # Iterate through input string\n        for j in range(len(input_str)):\n            # Handle backspace key\n            if input_str[j] == \"<\":\n                if cursor > 0:\n                    cursor -= 1\n                    backspace_count += 1\n            # Handle home key\n            elif input_str[j] == \"[\":\n                cursor = 0\n            # Handle end key\n            elif input_str[j] == \"]\":\n                cursor = len(output)\n            # Handle other keys\n            else:\n                output = output[:cursor] + input_str[j] + output[cursor:]\n                cursor += 1\n        # Remove backspaces\n        output = output[:-backspace_count]\n        # Append newline character\n        output += \"\\n\"\n    return output[:-1]"
    },
    {
        "number": 2987,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, W = map(int, stdin.split()[0:2])\n    estimates = []\n    for i in range(W+1):\n        K = int(stdin.split()[0])\n        prices = list(map(int, stdin.split()[1:K+1]))\n        seats = list(map(int, stdin.split()[K+1:]))\n        estimates.append((K, prices, seats))\n\n    # compute optimal ticket prices\n    max_revenue = 0\n    max_price = 0\n    for i in range(W+1):\n        K, prices, seats = estimates[i]\n        for j in range(K):\n            price = prices[j]\n            revenue = sum(seats[j] for j in range(K) if prices[j] <= price)\n            if revenue > max_revenue:\n                max_revenue = revenue\n                max_price = price\n\n    # print output\n    print(max_revenue)\n    print(max_price)\n    return \"\""
    },
    {
        "number": 2988,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split()[0:2])\n    trips = []\n    for i in range(m):\n        a, b, t = map(int, stdin.split()[0:3])\n        trips.append((a, b, t))\n    dragon_balls = list(map(int, stdin.split()[0:7]))\n    dp = [[float('inf')] * (n+1) for _ in range(n+1)]\n    dp[1][dragon_balls[0]] = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for a, b, t in trips:\n                if a == i:\n                    dp[j][b] = min(dp[j][b], dp[i][a] + t)\n                if b == i:\n                    dp[j][a] = min(dp[j][a], dp[i][b] + t)\n    if dp[n][1] == float('inf'):\n        return '-1'\n    return str(dp[n][1])"
    },
    {
        "number": 2989,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, p, k = map(int, stdin.split()[0:3])\n    pipes = []\n    for i in range(p):\n        a, b, c = map(int, stdin.split()[0:3])\n        pipes.append((a, b, c))\n    improvements = []\n    for i in range(k):\n        a, b, c = map(int, stdin.split()[0:3])\n        improvements.append((a, b, c))\n    # create graph\n    graph = [[] for i in range(n+1)]\n    for a, b, c in pipes:\n        graph[a].append((b, c))\n        graph[b].append((a, c))\n    # bfs to find max flow\n    flow = 0\n    while improvements:\n        a, b, c = improvements.pop()\n        if not graph[a] or not graph[b]:\n            continue\n        capacity = float('inf')\n        for x, y in graph[a]:\n            if x == b:\n                capacity = min(capacity, y+c)\n        if capacity == float('inf'):\n            continue\n        flow += capacity\n        for x, y in graph[a]:\n            if x == b:\n                graph[a][graph[a].index((x, y))] = (x, y+c)\n        for x, y in graph[b]:\n            if x == a:\n                graph[b][graph[b].index((x, y))] = (x, y-c)\n    # find max flow\n    max_flow = 0\n    visited = [False] * (n+1)\n    queue = [1]\n    while queue:\n        node = queue.pop(0)\n        if visited[node]:\n            continue\n        visited[node] = True\n        for neighbor, capacity in graph[node]:\n            if not visited[neighbor] and capacity > 0:\n                queue.append(neighbor)\n                max_flow += capacity\n    # output\n    result = [max_flow]\n    for i in range(k):\n        a, b, c = improvements[i]\n        capacity = float('inf')\n        for x, y in graph[a]:\n            if x == b:\n                capacity = min(capacity, y+c)\n        if capacity == float('inf'):\n            result.append(0)\n        else:\n            result.append(max_flow-capacity)\n    return '\\n'.join(map(str, result))"
    },
    {
        "number": 2990,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split()[0:2])\n    q = [list(map(int, stdin.split())) for _ in range(n)]\n    p = int(stdin.split()[0])\n    players = [stdin.split()[i] for i in range(p)]\n    owners = [[] for _ in range(n)]\n    for i in range(n):\n        owners[i] = players[:q[i][0]]\n        players = players[q[i][0]:]\n    for i in range(n):\n        owners[i].sort(key=lambda x: players.index(x))\n    result = []\n    for i in range(n):\n        result.append(' '.join(owners[i][:k]))\n    return '\\n'.join(result)"
    },
    {
        "number": 2991,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    remaining = list(map(int, stdin.split()))\n    perms = []\n    for i in range(1, n+1):\n        perms.append(i)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if perms[j] > perms[j+1]:\n                perms[j], perms[j+1] = perms[j+1], perms[j]\n    for i in range(n):\n        if perms[i] == remaining[0]:\n            break\n    perms = perms[i:] + perms[:i]\n    return '\\n'.join(map(str, perms))"
    },
    {
        "number": 2992,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        u, v, w = map(int, stdin.readline().split())\n        graph[u].append((v, w))\n        graph[v].append((u, w))\n    visited = [False] * n\n    min_range = float('inf')\n    def dfs(u, d):\n        nonlocal min_range\n        visited[u] = True\n        for v, w in graph[u]:\n            if not visited[v] and d + w <= min_range:\n                dfs(v, d + w)\n        visited[u] = False\n        if not visited[0]:\n            min_range = min(min_range, d)\n    dfs(0, 0)\n    if min_range == float('inf'):\n        return 'IMPOSSIBLE'\n    return str(min_range)"
    },
    {
        "number": 2993,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    N, D = map(int, stdin.readline().split())\n    p_A = D / 8\n    encoded_message = stdin.readline().strip()\n\n    # Decode message\n    message = \"\"\n    a, b = 0, 1\n    for i in range(N):\n        c = a + p_A * (b - a)\n        if encoded_message[i] == \"0\":\n            a, b = a, c\n        else:\n            a, b = c, b\n        message += \"A\" if a < c else \"B\"\n\n    return message"
    },
    {
        "number": 2994,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Parse input\n    R, C = map(int, stdin.split()[0].split())\n    board = []\n    for i in range(R):\n        board.append(list(stdin.readline().strip()))\n\n    # Apply gravity rule\n    for i in range(R):\n        for j in range(C):\n            if board[i][j] == 'a':\n                if i+1 < R and board[i+1][j] == '.':\n                    board[i+1][j] = 'a'\n                    board[i][j] = '.'\n\n    # Print output\n    for row in board:\n        print(''.join(row))\n\n    return ''"
    },
    {
        "number": 2995,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    n, m = map(int, stdin.readline().strip().split())\n    items = set(stdin.readline().strip().split())\n    suspicious_pairs = set()\n    for _ in range(m):\n        pair = tuple(stdin.readline().strip().split())\n        suspicious_pairs.add(pair)\n\n    # check if it is possible to divide the items\n    if len(items) % 2 == 1 or len(suspicious_pairs) > len(items) // 2:\n        return \"impossible\"\n\n    # find a valid division\n    for i in range(len(items)):\n        if items.issuperset(suspicious_pairs):\n            break\n        items.remove(list(items)[i])\n    else:\n        return \"impossible\"\n\n    # output the divisions\n    walter_items = items.intersection(suspicious_pairs)\n    jesse_items = items - walter_items\n    return \" \".join(walter_items) + \"\\n\" + \" \".join(jesse_items)"
    },
    {
        "number": 2996,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, k = map(int, stdin.split())\n    costs = [list(map(int, stdin.split())) for _ in range(n)]\n    dp = [[float('inf')] * (n+1) for _ in range(k+1)]\n    dp[0][0] = 0\n    for i in range(1, k+1):\n        dp[i][0] = 0\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            for x in range(k+1):\n                if j > i:\n                    dp[x][j] = min(dp[x][j], dp[x][j-1] + costs[j-1][i-j])\n                else:\n                    dp[x][j] = min(dp[x][j], dp[x-1][j] + costs[j-1][i-j])\n    return str(dp[k][n])"
    },
    {
        "number": 2997,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # parse input\n    N, M = map(int, stdin.split())\n    edges = []\n    for i in range(M):\n        a, b = map(int, stdin.readline().split())\n        edges.append((a, b))\n\n    # create graph\n    graph = [[] for _ in range(N+1)]\n    for a, b in edges:\n        graph[a].append(b)\n        graph[b].append(a)\n\n    # DFS to find all paths\n    paths = []\n    def dfs(node, path, visited, color):\n        if node == N:\n            paths.append(path)\n            return\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                dfs(neighbor, path + [(node, neighbor, color)], visited, color)\n                visited.remove(neighbor)\n\n    # find all paths\n    for i in range(1, N+1):\n        visited = set()\n        dfs(i, [(i, i, None)], visited, None)\n\n    # count color changes in each path\n    color_changes = [0] * len(paths)\n    for i, path in enumerate(paths):\n        prev_color = None\n        for a, b, color in path:\n            if color!= prev_color:\n                color_changes[i] += 1\n            prev_color = color\n\n    # return maximum color changes\n    return max(color_changes)"
    },
    {
        "number": 2998,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    # Remove newline character from input\n    input_str = stdin.strip()\n\n    # Split input into words\n    words = input_str.split()\n\n    # Initialize umm-coded message\n    umm_message = \"\"\n\n    # Iterate over words and check if they are part of the umm-coded message\n    for word in words:\n        # Check if word contains only lowercase u's and/or m's\n        if word.islower() and all(c in \"um\" for c in word):\n            # Add word to umm-coded message\n            umm_message += word\n\n    # Decode umm-coded message\n    decoded_message = \"\"\n    for i in range(0, len(umm_message), 7):\n        # Convert 7-bit binary code to ASCII character\n        binary_code = umm_message[i:i+7]\n        ascii_code = int(binary_code, 2)\n        decoded_message += chr(ascii_code)\n\n    return decoded_message"
    },
    {
        "number": 2999,
        "checkpoint": "15B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, s = map(int, stdin.split())\n    participants = []\n    for i in range(n):\n        name, bet = stdin.split()\n        participants.append((name, int(bet)))\n    participants.sort(key=lambda x: x[1], reverse=True)\n    winners = []\n    for i in range(n):\n        name, bet = participants[i]\n        if sum(p[1] for p in participants[:i+1]) == s:\n            winners.append(name)\n    return str(len(winners)) + '\\n' + '\\n'.join(winners)"
    }
]