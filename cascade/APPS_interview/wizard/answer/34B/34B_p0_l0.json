[
    {
        "number": 0,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    s = stdin.strip()\n    if len(s) < 4:\n        return \"-1\"\n\n    opening_bracket = \"[\"\n    closing_bracket = \"]\"\n    colon = \":\"\n    vertical_line = \"|\"\n\n    if s[0] != opening_bracket or s[-1] != closing_bracket:\n        return \"-1\"\n\n    max_length = 0\n    current_length = 0\n\n    for i in range(len(s)):\n        if s[i] == opening_bracket and current_length == 0:\n            current_length += 1\n        elif s[i] == colon and current_length == 1:\n            current_length += 1\n        elif s[i] == vertical_line and current_length == 2:\n            current_length += 1\n        elif s[i] == colon and current_length == 3:\n            current_length += 1\n        elif s[i] == closing_bracket and current_length == 4:\n            current_length = 0\n            max_length = i + 1\n\n    return str(max_length) if max_length > 0 else \"-1\""
    },
    {
        "number": 1,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x = int(stdin)\n    max_sum = 0\n    max_number = 0\n\n    for i in range(1, x + 1):\n        sum_of_digits = sum(int(digit) for digit in str(i))\n        if sum_of_digits > max_sum:\n            max_sum = sum_of_digits\n            max_number = i\n        elif sum_of_digits == max_sum:\n            max_number = max(max_number, i)\n\n    return str(max_number)"
    },
    {
        "number": 2,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    year = int(stdin)\n    next_lucky_year = year + 1\n    while True:\n        if len(set(str(next_lucky_year))) <= 2:\n            break\n        next_lucky_year += 1\n    return str(next_lucky_year - year)"
    },
    {
        "number": 3,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, q = map(int, stdin.split())\n    painters = []\n    for _ in range(q):\n        l, r = map(int, input().split())\n        painters.append((l, r))\n\n    painters.sort(key=lambda x: x[1])\n\n    max_painted = 0\n    current_painted = 0\n    for i in range(q - 2):\n        current_painted = max(current_painted, painters[i][1])\n        max_painted = max(max_painted, current_painted)\n\n    return str(max_painted)"
    },
    {
        "number": 4,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    x, hh, mm = map(int, stdin.split())\n\n    def is_lucky(time: int) -> bool:\n        return '7' in str(time)\n\n    def minutes_before(hh: int, mm: int, minutes: int) -> tuple:\n        total_minutes = hh * 60 + mm\n        new_time = total_minutes - minutes\n        new_hh, new_mm = new_time // 60, new_time % 60\n        return new_hh, new_mm\n\n    def find_lucky_time(x: int, hh: int, mm: int) -> int:\n        y = 0\n        while not is_lucky(y):\n            y += 1\n            new_hh, new_mm = minutes_before(hh, mm, x * y)\n            if new_hh < hh or (new_hh == hh and new_mm <= mm):\n                return y\n        return y\n\n    return str(find_lucky_time(x, hh, mm))"
    },
    {
        "number": 5,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, pos, l, r = map(int, stdin.split())\n    a = l - 1\n    b = r + 1\n\n    if pos < l:\n        return str(l - pos - 1)\n    elif pos > r:\n        return str(r - pos + 1)\n    else:\n        return \"0\""
    },
    {
        "number": 6,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def min_blows(n, x, d, h):\n        q = [(x, 0)]\n        visited = set()\n        while q:\n            curX, curBlows = q.pop(0)\n            if curX == 0:\n                return curBlows\n            if (curX, curBlows) in visited:\n                continue\n            visited.add((curX, curBlows))\n            for i in range(n):\n                newX = curX - min(d[i], curX)\n                if newX > 0:\n                    q.append((newX + h[i], curBlows + 1))\n        return -1\n\n    t = int(stdin.readline())\n    result = []\n    for _ in range(t):\n        n, x = map(int, stdin.readline().split())\n        d = []\n        h = []\n        for _ in range(n):\n            d_i, h_i = map(int, stdin.readline().split())\n            d.append(d_i)\n            h.append(h_i)\n        result.append(min_blows(n, x, d, h))\n    return \"\\n\".join(map(str, result))"
    },
    {
        "number": 7,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, m = map(int, stdin.split())\n    days = 1\n    grains = n\n    while grains > 0:\n        grains -= m\n        if grains < 0:\n            grains += m\n        days += 1\n        sparrows = days\n        for i in range(1, sparrows):\n            grains -= i\n        if grains <= 0:\n            break\n    return str(days)"
    },
    {
        "number": 8,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_mentsu(tiles):\n        if len(tiles) < 3:\n            return False\n        for i in range(len(tiles) - 2):\n            if tiles[i] == tiles[i + 1] == tiles[i + 2]:\n                return True\n            if tiles[i] + 1 == tiles[i + 1] + 1 == tiles[i + 2] + 1:\n                return True\n        return False\n\n    def count_mentsu(tiles):\n        count = 0\n        for i in range(len(tiles) - 2):\n            if tiles[i] == tiles[i + 1] == tiles[i + 2]:\n                count += 1\n            if tiles[i] + 1 == tiles[i + 1] + 1 == tiles[i + 2] + 1:\n                count += 1\n        return count\n\n    tiles = [int(x[0]) for x in stdin.split()]\n    tiles.sort()\n\n    if is_mentsu(tiles):\n        return 0\n\n    for i in range(len(tiles) - 2):\n        if tiles[i] + 1 == tiles[i + 1] + 1 == tiles[i + 2] + 1:\n            return 1\n\n    return min(count_mentsu(tiles), 1)"
    },
    {
        "number": 9,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def is_left(a, b):\n        return a[0] < b[0] and a[1] == b[1]\n\n    def is_right(a, b):\n        return a[0] > b[0] and a[1] == b[1]\n\n    def is_top(a, b):\n        return a[1] < b[1] and a[0] == b[0]\n\n    def is_bottom(a, b):\n        return a[1] > b[1] and a[0] == b[0]\n\n    def count_sofas(sofas, condition):\n        result = 0\n        for i in range(len(sofas)):\n            for j in range(len(sofas)):\n                if i != j and condition(sofas[i], sofas[j]):\n                    result += 1\n        return result\n\n    def find_sofa(sofas, cnt_l, cnt_r, cnt_t, cnt_b):\n        for i, sofa in enumerate(sofas, start=1):\n            if count_sofas([sofa], is_left) == cnt_l and \\\n               count_sofas([sofa], is_right) == cnt_r and \\\n               count_sofas([sofa], is_top) == cnt_t and \\\n               count_sofas([sofa], is_bottom) == cnt_b:\n                return i\n        return -1\n\n    d, n, m = map(int, stdin.readline().split())\n    sofas = [tuple(map(int, stdin.readline().split())) for _ in range(d)]\n    cnt_l, cnt_r, cnt_t, cnt_b = map(int, stdin.readline().split())\n\n    return str(find_sofa(sofas, cnt_l, cnt_r, cnt_t, cnt_b))"
    },
    {
        "number": 10,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n = int(stdin.strip())\n    min_days_off = n // 7 * 2\n    max_days_off = min_days_off + 2\n    return f\"{min_days_off} {max_days_off}\""
    },
    {
        "number": 11,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, a, b, p, q = map(int, stdin.split())\n    red_tiles = [i for i in range(1, n + 1) if i % a == 0]\n    blue_tiles = [i for i in range(1, n + 1) if i % b == 0]\n    common_tiles = set(red_tiles) & set(blue_tiles)\n    red_chocolates = len(red_tiles) - len(common_tiles)\n    blue_chocolates = len(blue_tiles) - len(common_tiles)\n    common_chocolates = len(common_tiles) * (p + q)\n    total_chocolates = red_chocolates * p + blue_chocolates * q + common_chocolates\n    return str(total_chocolates)"
    },
    {
        "number": 12,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    n, trophies = int(stdin.split(\"\\n\")[0]), stdin.split(\"\\n\")[1]\n    max_length = 0\n    current_length = 0\n    for i in range(n):\n        if trophies[i] == \"G\":\n            current_length += 1\n        else:\n            max_length = max(max_length, current_length)\n            current_length = 0\n    max_length = max(max_length, current_length)\n\n    if max_length == 0:\n        return \"0\"\n\n    for i in range(n):\n        if trophies[i] == \"S\":\n            for j in range(i + 1, n):\n                if trophies[j] == \"G\":\n                    trophies = list(trophies)\n                    trophies[i], trophies[j] = trophies[j], trophies[i]\n                    new_max_length = 0\n                    new_current_length = 0\n                    for k in range(n):\n                        if trophies[k] == \"G\":\n                            new_current_length += 1\n                        else:\n                            new_max_length = max(new_max_length, new_current_length)\n                            new_current_length = 0\n                    new_max_length = max(new_max_length, new_current_length)\n                    if new_max_length > max_length:\n                        max_length = new_max_length\n                        trophies = \"\".join(trophies)\n                    trophies = list(trophies)\n                    trophies[i], trophies[j] = trophies[j], trophies[i]\n                    trophies = \"\".join(trophies)\n                    break\n\n    return str(max_length)"
    },
    {
        "number": 13,
        "checkpoint": "34B",
        "pass": 0,
        "answer": "def solution(stdin: str) -> str:\n    def dfs(graph, visited, course, result):\n        visited[course] = True\n        for next_course in graph[course]:\n            if not visited[next_course]:\n                dfs(graph, visited, next_course, result)\n        result.append(course)\n\n    def topological_sort(graph, main_courses):\n        visited = [False] * (len(graph) + 1)\n        result = []\n        for main_course in main_courses:\n            if not visited[main_course]:\n                dfs(graph, visited, main_course, result)\n        return result[::-1]\n\n    def build_graph(n, dependencies):\n        graph = [[] for _ in range(n + 1)]\n        for i, dependency in enumerate(dependencies):\n            for course in dependency:\n                graph[course].append(i + 1)\n        return graph\n\n    n, k = map(int, stdin.readline().split())\n    main_courses = list(map(int, stdin.readline().split()))\n    dependencies = [list(map(int, stdin.readline().split())) for _ in range(n)]\n\n    graph = build_graph(n, dependencies)\n    sorted_courses = topological_sort(graph, main_courses)\n\n    if len(sorted_courses) != n:\n        return \"-1\"\n\n    return f\"{len(sorted_courses)}\\n{' '.join(map(str, sorted_courses))}\""
    }
]